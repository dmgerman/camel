begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|event
operator|.
name|TransportEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|event
operator|.
name|TransportListener
import|;
end_import

begin_comment
comment|/**  * A {@link Consumer} which consumes messages from JavaMail using a {@link Transport} and dispatches them  * to the {@link Processor}  *  * @version $Revision: 523430 $  */
end_comment

begin_class
DECL|class|MailConsumer
specifier|public
class|class
name|MailConsumer
extends|extends
name|DefaultConsumer
argument_list|<
name|MailExchange
argument_list|>
implements|implements
name|TransportListener
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|MailEndpoint
name|endpoint
decl_stmt|;
DECL|field|transport
specifier|private
specifier|final
name|Transport
name|transport
decl_stmt|;
DECL|method|MailConsumer (MailEndpoint endpoint, Processor<MailExchange> processor, Transport transport)
specifier|public
name|MailConsumer
parameter_list|(
name|MailEndpoint
name|endpoint
parameter_list|,
name|Processor
argument_list|<
name|MailExchange
argument_list|>
name|processor
parameter_list|,
name|Transport
name|transport
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|transport
operator|.
name|addTransportListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|messageDelivered (TransportEvent transportEvent)
specifier|public
name|void
name|messageDelivered
parameter_list|(
name|TransportEvent
name|transportEvent
parameter_list|)
block|{
name|Message
name|message
init|=
name|transportEvent
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|MailExchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|messageNotDelivered (TransportEvent transportEvent)
specifier|public
name|void
name|messageNotDelivered
parameter_list|(
name|TransportEvent
name|transportEvent
parameter_list|)
block|{     }
DECL|method|messagePartiallyDelivered (TransportEvent transportEvent)
specifier|public
name|void
name|messagePartiallyDelivered
parameter_list|(
name|TransportEvent
name|transportEvent
parameter_list|)
block|{     }
block|}
end_class

end_unit

