begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|DeferredContextBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedRouteMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckRepository
import|;
end_import

begin_class
annotation|@
name|DeferredContextBinding
DECL|class|RoutesHealthCheckRepository
specifier|public
class|class
name|RoutesHealthCheckRepository
implements|implements
name|CamelContextAware
implements|,
name|HealthCheckRepository
block|{
DECL|field|checks
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Route
argument_list|,
name|HealthCheck
argument_list|>
name|checks
decl_stmt|;
DECL|field|blacklist
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
decl_stmt|;
DECL|field|evaluators
specifier|private
name|List
argument_list|<
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
argument_list|>
name|evaluators
decl_stmt|;
DECL|field|evaluatorMap
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
argument_list|>
argument_list|>
name|evaluatorMap
decl_stmt|;
DECL|field|context
specifier|private
specifier|volatile
name|CamelContext
name|context
decl_stmt|;
DECL|method|RoutesHealthCheckRepository ()
specifier|public
name|RoutesHealthCheckRepository
parameter_list|()
block|{
name|this
operator|.
name|checks
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|setBlacklistedRoutes (Collection<String> blacklistedRoutes)
specifier|public
name|void
name|setBlacklistedRoutes
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|blacklistedRoutes
parameter_list|)
block|{
name|blacklistedRoutes
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|addBlacklistedRoute
argument_list|)
expr_stmt|;
block|}
DECL|method|addBlacklistedRoute (String routeId)
specifier|public
name|void
name|addBlacklistedRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|blacklist
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|blacklist
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|blacklist
operator|.
name|add
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
DECL|method|setEvaluators (Collection<PerformanceCounterEvaluator<ManagedRouteMBean>> evaluators)
specifier|public
name|void
name|setEvaluators
parameter_list|(
name|Collection
argument_list|<
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
argument_list|>
name|evaluators
parameter_list|)
block|{
name|evaluators
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|addEvaluator
argument_list|)
expr_stmt|;
block|}
DECL|method|addEvaluator (PerformanceCounterEvaluator<ManagedRouteMBean> evaluator)
specifier|public
name|void
name|addEvaluator
parameter_list|(
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|evaluator
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|evaluators
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|evaluators
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|evaluators
operator|.
name|add
argument_list|(
name|evaluator
argument_list|)
expr_stmt|;
block|}
DECL|method|setRoutesEvaluators (Map<String, Collection<PerformanceCounterEvaluator<ManagedRouteMBean>>> evaluators)
specifier|public
name|void
name|setRoutesEvaluators
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
argument_list|>
argument_list|>
name|evaluators
parameter_list|)
block|{
name|evaluators
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|setRouteEvaluators
argument_list|)
expr_stmt|;
block|}
DECL|method|setRouteEvaluators (String routeId, Collection<PerformanceCounterEvaluator<ManagedRouteMBean>> evaluators)
specifier|public
name|void
name|setRouteEvaluators
parameter_list|(
name|String
name|routeId
parameter_list|,
name|Collection
argument_list|<
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
argument_list|>
name|evaluators
parameter_list|)
block|{
name|evaluators
operator|.
name|forEach
argument_list|(
name|evaluator
lambda|->
name|addRouteEvaluator
argument_list|(
name|routeId
argument_list|,
name|evaluator
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addRouteEvaluator (String routeId, PerformanceCounterEvaluator<ManagedRouteMBean> evaluator)
specifier|public
name|void
name|addRouteEvaluator
parameter_list|(
name|String
name|routeId
parameter_list|,
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|evaluator
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|evaluatorMap
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|evaluatorMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|evaluatorMap
operator|.
name|computeIfAbsent
argument_list|(
name|routeId
argument_list|,
name|id
lambda|->
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|evaluator
argument_list|)
expr_stmt|;
block|}
DECL|method|evaluators ()
specifier|public
name|Stream
argument_list|<
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
argument_list|>
name|evaluators
parameter_list|()
block|{
return|return
name|this
operator|.
name|evaluators
operator|!=
literal|null
condition|?
name|this
operator|.
name|evaluators
operator|.
name|stream
argument_list|()
else|:
name|Stream
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|evaluators (String routeId)
specifier|public
name|Stream
argument_list|<
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
argument_list|>
name|evaluators
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
return|return
name|this
operator|.
name|evaluatorMap
operator|!=
literal|null
condition|?
name|evaluatorMap
operator|.
name|getOrDefault
argument_list|(
name|routeId
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
else|:
name|Stream
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|stream ()
specifier|public
name|Stream
argument_list|<
name|HealthCheck
argument_list|>
name|stream
parameter_list|()
block|{
comment|// This is not really efficient as getRoutes() creates a copy of the routes
comment|// array for each invocation. It would be nice to have more stream oriented
comment|// operation on CamelContext i.e.
comment|//
comment|// interface CamelContext {
comment|//
comment|//     Stream<Route> routes();
comment|//
comment|//     void forEachRoute(Consumer<Route> consumer);
comment|// }
comment|//
return|return
name|this
operator|.
name|context
operator|!=
literal|null
condition|?
name|this
operator|.
name|context
operator|.
name|getRoutes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|route
lambda|->
name|route
operator|.
name|getId
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|filter
argument_list|(
name|route
lambda|->
name|isNotBlacklisted
argument_list|(
name|route
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|toRouteHealthCheck
argument_list|)
else|:
name|Stream
operator|.
name|empty
argument_list|()
return|;
block|}
comment|// *****************************
comment|// Helpers
comment|// *****************************
DECL|method|isNotBlacklisted (Route route)
specifier|private
name|boolean
name|isNotBlacklisted
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
return|return
name|this
operator|.
name|blacklist
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|blacklist
operator|.
name|contains
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
else|:
literal|true
return|;
block|}
DECL|method|toRouteHealthCheck (Route route)
specifier|private
name|HealthCheck
name|toRouteHealthCheck
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
return|return
name|checks
operator|.
name|computeIfAbsent
argument_list|(
name|route
argument_list|,
name|r
lambda|->
block|{
name|HealthCheck
name|check
init|=
operator|new
name|RouteHealthCheck
argument_list|(
name|route
argument_list|,
name|evaluatorMap
operator|!=
literal|null
condition|?
name|evaluatorMap
operator|.
name|getOrDefault
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|evaluators
argument_list|)
else|:
name|evaluators
argument_list|)
decl_stmt|;
name|check
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

