begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2007-present the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
DECL|class|MavenWrapperDownloader
specifier|public
class|class
name|MavenWrapperDownloader
block|{
DECL|field|WRAPPER_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|WRAPPER_VERSION
init|=
literal|"0.5.5"
decl_stmt|;
comment|/**      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.      */
DECL|field|DEFAULT_DOWNLOAD_URL
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DOWNLOAD_URL
init|=
literal|"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
operator|+
name|WRAPPER_VERSION
operator|+
literal|"/maven-wrapper-"
operator|+
name|WRAPPER_VERSION
operator|+
literal|".jar"
decl_stmt|;
comment|/**      * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to      * use instead of the default one.      */
DECL|field|MAVEN_WRAPPER_PROPERTIES_PATH
specifier|private
specifier|static
specifier|final
name|String
name|MAVEN_WRAPPER_PROPERTIES_PATH
init|=
literal|".mvn/wrapper/maven-wrapper.properties"
decl_stmt|;
comment|/**      * Path where the maven-wrapper.jar will be saved to.      */
DECL|field|MAVEN_WRAPPER_JAR_PATH
specifier|private
specifier|static
specifier|final
name|String
name|MAVEN_WRAPPER_JAR_PATH
init|=
literal|".mvn/wrapper/maven-wrapper.jar"
decl_stmt|;
comment|/**      * Name of the property which should be used to override the default download url for the wrapper.      */
DECL|field|PROPERTY_NAME_WRAPPER_URL
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_NAME_WRAPPER_URL
init|=
literal|"wrapperUrl"
decl_stmt|;
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Downloader started"
argument_list|)
expr_stmt|;
name|File
name|baseDirectory
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Using base directory: "
operator|+
name|baseDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the maven-wrapper.properties exists, read it and check if it contains a custom
comment|// wrapperUrl parameter.
name|File
name|mavenWrapperPropertyFile
init|=
operator|new
name|File
argument_list|(
name|baseDirectory
argument_list|,
name|MAVEN_WRAPPER_PROPERTIES_PATH
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|DEFAULT_DOWNLOAD_URL
decl_stmt|;
if|if
condition|(
name|mavenWrapperPropertyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileInputStream
name|mavenWrapperPropertyFileInputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mavenWrapperPropertyFileInputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|mavenWrapperPropertyFile
argument_list|)
expr_stmt|;
name|Properties
name|mavenWrapperProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|mavenWrapperProperties
operator|.
name|load
argument_list|(
name|mavenWrapperPropertyFileInputStream
argument_list|)
expr_stmt|;
name|url
operator|=
name|mavenWrapperProperties
operator|.
name|getProperty
argument_list|(
name|PROPERTY_NAME_WRAPPER_URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- ERROR loading '"
operator|+
name|MAVEN_WRAPPER_PROPERTIES_PATH
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|mavenWrapperPropertyFileInputStream
operator|!=
literal|null
condition|)
block|{
name|mavenWrapperPropertyFileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore ...
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Downloading from: "
operator|+
name|url
argument_list|)
expr_stmt|;
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|baseDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|MAVEN_WRAPPER_JAR_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- ERROR creating output directory '"
operator|+
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Downloading to: "
operator|+
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|downloadFileFromURL
argument_list|(
name|url
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Done"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Error downloading"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|downloadFileFromURL (String urlString, File destination)
specifier|private
specifier|static
name|void
name|downloadFileFromURL
parameter_list|(
name|String
name|urlString
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
literal|"MVNW_USERNAME"
argument_list|)
operator|!=
literal|null
operator|&&
name|System
operator|.
name|getenv
argument_list|(
literal|"MVNW_PASSWORD"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|username
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"MVNW_USERNAME"
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"MVNW_PASSWORD"
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|Authenticator
operator|.
name|setDefault
argument_list|(
operator|new
name|Authenticator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|PasswordAuthentication
name|getPasswordAuthentication
parameter_list|()
block|{
return|return
operator|new
name|PasswordAuthentication
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|URL
name|website
init|=
operator|new
name|URL
argument_list|(
name|urlString
argument_list|)
decl_stmt|;
name|ReadableByteChannel
name|rbc
decl_stmt|;
name|rbc
operator|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|website
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|fos
operator|.
name|getChannel
argument_list|()
operator|.
name|transferFrom
argument_list|(
name|rbc
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|rbc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

