begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * Salesforce DTO generated by camel-salesforce-maven-plugin  * Generated on: Thu Feb 09 14:29:57 CET 2017  */
end_comment

begin_package
DECL|package|org.foo.salesforce.upsert.contact
package|package
name|org
operator|.
name|foo
operator|.
name|salesforce
operator|.
name|upsert
operator|.
name|contact
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonValue
import|;
end_import

begin_comment
comment|/**  * Salesforce Enumeration DTO for picklist CleanStatus  */
end_comment

begin_enum
DECL|enum|Contact_CleanStatusEnum
specifier|public
enum|enum
name|Contact_CleanStatusEnum
block|{
comment|// Acknowledged
DECL|enumConstant|ACKNOWLEDGED
name|ACKNOWLEDGED
argument_list|(
literal|"Acknowledged"
argument_list|)
block|,
comment|// Different
DECL|enumConstant|DIFFERENT
name|DIFFERENT
argument_list|(
literal|"Different"
argument_list|)
block|,
comment|// Inactive
DECL|enumConstant|INACTIVE
name|INACTIVE
argument_list|(
literal|"Inactive"
argument_list|)
block|,
comment|// Matched
DECL|enumConstant|MATCHED
name|MATCHED
argument_list|(
literal|"Matched"
argument_list|)
block|,
comment|// NotFound
DECL|enumConstant|NOTFOUND
name|NOTFOUND
argument_list|(
literal|"NotFound"
argument_list|)
block|,
comment|// Pending
DECL|enumConstant|PENDING
name|PENDING
argument_list|(
literal|"Pending"
argument_list|)
block|,
comment|// SelectMatch
DECL|enumConstant|SELECTMATCH
name|SELECTMATCH
argument_list|(
literal|"SelectMatch"
argument_list|)
block|,
comment|// Skipped
DECL|enumConstant|SKIPPED
name|SKIPPED
argument_list|(
literal|"Skipped"
argument_list|)
block|;
DECL|field|value
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|Contact_CleanStatusEnum (String value)
specifier|private
name|Contact_CleanStatusEnum
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|JsonValue
DECL|method|value ()
specifier|public
name|String
name|value
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|JsonCreator
DECL|method|fromValue (String value)
specifier|public
specifier|static
name|Contact_CleanStatusEnum
name|fromValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|Contact_CleanStatusEnum
name|e
range|:
name|Contact_CleanStatusEnum
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

