begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|model
operator|.
name|ComponentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|model
operator|.
name|ComponentOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|model
operator|.
name|ConnectorOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|model
operator|.
name|EndpointOptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|model
operator|.
name|OptionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|util
operator|.
name|JSonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|Roaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|AnnotationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|PropertySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureAfter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|DeprecatedConfigurationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|util
operator|.
name|FileHelper
operator|.
name|loadText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|getSafeValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|getShortJavaType
import|;
end_import

begin_comment
comment|/**  * Generate Spring Boot auto configuration files for Camel connectors.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"prepare-spring-boot-auto-configuration"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PACKAGE
argument_list|,
name|requiresProject
operator|=
literal|true
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|)
DECL|class|SpringBootAutoConfigurationMojo
specifier|public
class|class
name|SpringBootAutoConfigurationMojo
extends|extends
name|AbstractMojo
block|{
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.outputDirectory}"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|classesDirectory
specifier|private
name|File
name|classesDirectory
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|includeLicenseHeader
specifier|private
name|boolean
name|includeLicenseHeader
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"camel.connector"
argument_list|)
DECL|field|configurationPrefix
specifier|private
name|String
name|configurationPrefix
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
try|try
block|{
name|executeConnector
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error generating Spring-Boot auto configuration for connector"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|executeConnector ()
specifier|private
name|void
name|executeConnector
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|javaType
init|=
literal|null
decl_stmt|;
name|String
name|connectorScheme
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|componentOptions
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|endpointOptions
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
literal|"camel-connector.json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
name|dto
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|file
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|javaType
operator|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
expr_stmt|;
name|connectorScheme
operator|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"scheme"
argument_list|)
expr_stmt|;
name|componentOptions
operator|=
operator|(
name|List
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"componentOptions"
argument_list|)
expr_stmt|;
name|endpointOptions
operator|=
operator|(
name|List
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"endpointOptions"
argument_list|)
expr_stmt|;
block|}
comment|// find the component dependency and get its .json file
name|file
operator|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
literal|"camel-connector-schema.json"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|javaType
operator|!=
literal|null
operator|&&
name|connectorScheme
operator|!=
literal|null
condition|)
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|ComponentModel
name|model
init|=
name|generateComponentModel
argument_list|(
name|json
argument_list|)
decl_stmt|;
comment|// resolvePropertyPlaceholders is an option which only make sense to use if the component has other options
name|boolean
name|hasOptions
init|=
name|model
operator|.
name|getComponentOptions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
operator|!
name|o
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"resolvePropertyPlaceholders"
argument_list|)
argument_list|)
decl_stmt|;
comment|// use springboot as sub package name so the code is not in normal
comment|// package so the Spring Boot JARs can be optional at runtime
name|int
name|pos
init|=
name|javaType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
name|javaType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|".springboot"
decl_stmt|;
comment|// we only create spring boot auto configuration if there is options to configure
if|if
condition|(
name|hasOptions
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generating Spring Boot AutoConfiguration for Connector: "
operator|+
name|model
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|createConnectorConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|model
argument_list|,
name|javaType
argument_list|,
name|connectorScheme
argument_list|,
name|componentOptions
argument_list|,
name|endpointOptions
argument_list|)
expr_stmt|;
name|createConnectorAutoConfigurationSource
argument_list|(
name|pkg
argument_list|,
name|hasOptions
argument_list|,
name|javaType
argument_list|,
name|connectorScheme
argument_list|)
expr_stmt|;
name|createConnectorSpringFactorySource
argument_list|(
name|pkg
argument_list|,
name|javaType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createConnectorSpringFactorySource (String packageName, String javaType)
specifier|private
name|void
name|createConnectorSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|javaType
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|int
name|pos
init|=
name|javaType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|javaType
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ConnectorAutoConfiguration"
argument_list|)
expr_stmt|;
name|writeComponentSpringFactorySource
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|writeComponentSpringFactorySource (String packageName, String name)
specifier|private
name|void
name|writeComponentSpringFactorySource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MojoFailureException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n"
argument_list|)
expr_stmt|;
name|String
name|lineToAdd
init|=
name|packageName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lineToAdd
argument_list|)
expr_stmt|;
comment|// project root folder
name|File
name|root
init|=
name|classesDirectory
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|"src/main/resources/META-INF/spring.factories"
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
comment|// create new file
try|try
block|{
name|String
name|header
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|includeLicenseHeader
condition|)
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header.txt"
argument_list|)
decl_stmt|;
name|header
operator|=
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|String
name|code
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// add empty new line after header
name|code
operator|=
name|header
operator|+
literal|"\n"
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createConnectorConfigurationSource (String packageName, ComponentModel model, String javaType, String connectorScheme, List<String> componentOptions, List<String> endpointOptions)
specifier|private
name|void
name|createConnectorConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|ComponentModel
name|model
parameter_list|,
name|String
name|javaType
parameter_list|,
name|String
name|connectorScheme
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|componentOptions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|endpointOptions
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|int
name|pos
init|=
name|javaType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
specifier|final
name|String
name|commonName
init|=
name|javaType
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ConnectorConfigurationCommon"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|configName
init|=
name|javaType
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ConnectorConfiguration"
argument_list|)
decl_stmt|;
comment|// Common base class
name|JavaClassSource
name|commonClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|commonClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|commonClass
operator|.
name|setName
argument_list|(
name|commonName
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-package-maven-plugin - do not edit this file!"
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|model
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|=
name|model
operator|.
name|getDescription
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|doc
expr_stmt|;
block|}
comment|// replace Component with Connector
name|doc
operator|=
name|doc
operator|.
name|replaceAll
argument_list|(
literal|"Component"
argument_list|,
literal|"Connector"
argument_list|)
expr_stmt|;
name|doc
operator|=
name|doc
operator|.
name|replaceAll
argument_list|(
literal|"component"
argument_list|,
literal|"connector"
argument_list|)
expr_stmt|;
name|commonClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|commonClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// compute the configuration prefix to use with spring boot configuration
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|configurationPrefix
argument_list|)
condition|)
block|{
comment|// make sure prefix is in lower case
name|prefix
operator|=
name|configurationPrefix
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|prefix
operator|+=
literal|"."
expr_stmt|;
block|}
block|}
name|prefix
operator|+=
name|connectorScheme
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
for|for
control|(
name|OptionModel
name|option
range|:
name|model
operator|.
name|getComponentOptions
argument_list|()
control|)
block|{
name|boolean
name|isComponentOption
init|=
name|componentOptions
operator|!=
literal|null
operator|&&
name|componentOptions
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
name|o
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isEndpointOption
init|=
name|endpointOptions
operator|!=
literal|null
operator|&&
name|endpointOptions
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
name|o
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// only include the options that has been explicit configured in the
comment|// componentOptions section of camel-connector.json file and exclude
comment|// those configured on endpointOptions in the same file
if|if
condition|(
name|isComponentOption
operator|&&
operator|!
name|isEndpointOption
condition|)
block|{
name|addProperty
argument_list|(
name|commonClass
argument_list|,
name|model
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OptionModel
name|option
range|:
name|model
operator|.
name|getEndpointOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|endpointOptions
operator|!=
literal|null
operator|&&
name|endpointOptions
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
name|o
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|addProperty
argument_list|(
name|commonClass
argument_list|,
name|model
argument_list|,
name|option
argument_list|)
block|;             }
block|}
for|for
control|(
name|OptionModel
name|option
range|:
name|model
operator|.
name|getConnectorOptions
argument_list|()
control|)
block|{
name|addProperty
argument_list|(
name|commonClass
argument_list|,
name|model
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|sortImports
argument_list|(
name|commonClass
argument_list|)
expr_stmt|;
name|writeSourceIfChanged
argument_list|(
name|commonClass
argument_list|,
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|commonName
operator|+
literal|".java"
argument_list|)
expr_stmt|;
comment|// Config class
name|JavaClassSource
name|configClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|configClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|setName
argument_list|(
name|configName
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|extendSuperType
argument_list|(
name|commonClass
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addAnnotation
argument_list|(
name|ConfigurationProperties
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addImport
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addImport
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|removeImport
argument_list|(
name|commonClass
argument_list|)
expr_stmt|;
name|configClass
operator|.
name|addField
argument_list|(
literal|"Map<String, "
operator|+
name|commonName
operator|+
literal|"> configurations = new HashMap<>()"
argument_list|)
operator|.
name|setPrivate
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
literal|"Define additional configuration definitions"
argument_list|)
expr_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
decl_stmt|;
name|method
operator|=
name|configClass
operator|.
name|addMethod
argument_list|()
expr_stmt|;
name|method
operator|.
name|setName
argument_list|(
literal|"getConfigurations"
argument_list|)
expr_stmt|;
name|method
operator|.
name|setReturnType
argument_list|(
literal|"Map<String, "
operator|+
name|commonName
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|method
operator|.
name|setPublic
argument_list|()
expr_stmt|;
name|method
operator|.
name|setBody
argument_list|(
literal|"return configurations;"
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|configClass
argument_list|)
expr_stmt|;
name|writeSourceIfChanged
argument_list|(
name|configClass
argument_list|,
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|configName
operator|+
literal|".java"
argument_list|)
expr_stmt|;
block|}
DECL|method|createConnectorAutoConfigurationSource (String packageName, boolean hasOptions, String javaType, String connectorScheme)
specifier|private
name|void
name|createConnectorAutoConfigurationSource
parameter_list|(
name|String
name|packageName
parameter_list|,
name|boolean
name|hasOptions
parameter_list|,
name|String
name|javaType
parameter_list|,
name|String
name|connectorScheme
parameter_list|)
throws|throws
name|MojoFailureException
block|{
specifier|final
name|JavaClassSource
name|javaClass
init|=
name|Roaster
operator|.
name|create
argument_list|(
name|JavaClassSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|javaType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|javaType
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ConnectorAutoConfiguration"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|configNameCommon
init|=
name|javaType
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ConnectorConfigurationCommon"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|configName
init|=
name|javaType
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"Component"
argument_list|,
literal|"ConnectorConfiguration"
argument_list|)
decl_stmt|;
comment|// add method for auto configure
specifier|final
name|String
name|shortJavaType
init|=
name|getShortJavaType
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
comment|// must be named -component because camel-spring-boot uses that to lookup components
specifier|final
name|String
name|beanName
init|=
name|connectorScheme
operator|+
literal|"-component"
decl_stmt|;
name|javaClass
operator|.
name|setPackage
argument_list|(
name|packageName
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|doc
init|=
literal|"Generated by camel-connector-maven-plugin - do not edit this file!"
decl_stmt|;
name|javaClass
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"value"
argument_list|,
name|SpringBootAutoConfigurationMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnBean
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"type"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|AutoConfigureAfter
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
literal|"org.apache.camel.spring.boot.CamelAutoConfiguration"
argument_list|)
expr_stmt|;
name|String
name|configurationName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|"ConnectorAutoConfiguration"
argument_list|,
literal|"ConnectorConfiguration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|ann
init|=
name|javaClass
operator|.
name|addAnnotation
argument_list|(
name|EnableConfigurationProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|ann
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
name|configurationName
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.CamelPropertiesHelper"
argument_list|)
expr_stmt|;
block|}
name|javaClass
operator|.
name|addImport
argument_list|(
name|javaType
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|ApplicationContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|BeanCreationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.Logger"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.slf4j.LoggerFactory"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.component.connector.ConnectorCustomizer"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spi.HasId"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.spring.boot.util.HierarchicalPropertiesEvaluator"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.ObjectHelper"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addImport
argument_list|(
literal|"org.apache.camel.util.IntrospectionSupport"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setStatic
argument_list|(
literal|true
argument_list|)
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
literal|"LOGGER"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"Logger"
argument_list|)
operator|.
name|setLiteralInitializer
argument_list|(
literal|"LoggerFactory.getLogger("
operator|+
name|name
operator|+
literal|".class)"
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"applicationContext"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"ApplicationContext"
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setName
argument_list|(
literal|"camelContext"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"org.apache.camel.CamelContext"
argument_list|)
operator|.
name|setPrivate
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setName
argument_list|(
literal|"configuration"
argument_list|)
operator|.
name|setType
argument_list|(
name|configName
argument_list|)
operator|.
name|setPrivate
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
expr_stmt|;
name|javaClass
operator|.
name|addField
argument_list|()
operator|.
name|setPrivate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"customizers"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"List<ConnectorCustomizer<"
operator|+
name|shortJavaType
operator|+
literal|">>"
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Autowired
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"configure"
operator|+
name|shortJavaType
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|createComponentBody
argument_list|(
name|shortJavaType
argument_list|,
name|hasOptions
argument_list|,
name|connectorScheme
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setReturnType
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|addThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|configureMethod
operator|.
name|addAnnotation
argument_list|(
name|Lazy
operator|.
name|class
argument_list|)
expr_stmt|;
name|configureMethod
operator|.
name|addAnnotation
argument_list|(
name|Bean
operator|.
name|class
argument_list|)
operator|.
name|setStringValue
argument_list|(
literal|"name"
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|configureMethod
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnClass
operator|.
name|class
argument_list|)
operator|.
name|setLiteralValue
argument_list|(
literal|"value"
argument_list|,
literal|"CamelContext.class"
argument_list|)
expr_stmt|;
name|configureMethod
operator|.
name|addAnnotation
argument_list|(
name|ConditionalOnMissingBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|postProcessMethod
init|=
name|javaClass
operator|.
name|addMethod
argument_list|()
operator|.
name|setName
argument_list|(
literal|"postConstruct"
operator|+
name|shortJavaType
argument_list|)
operator|.
name|setPublic
argument_list|()
operator|.
name|setBody
argument_list|(
name|createPostConstructBody
argument_list|(
name|shortJavaType
argument_list|,
name|configNameCommon
argument_list|,
name|connectorScheme
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|postProcessMethod
operator|.
name|addAnnotation
argument_list|(
name|PostConstruct
operator|.
name|class
argument_list|)
expr_stmt|;
name|sortImports
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|packageName
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\/"
argument_list|)
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".java"
decl_stmt|;
name|writeSourceIfChanged
argument_list|(
name|javaClass
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSourceIfChanged (JavaClassSource source, String fileName)
specifier|private
name|void
name|writeSourceIfChanged
parameter_list|(
name|JavaClassSource
name|source
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|MojoFailureException
block|{
comment|// project root folder
name|File
name|root
init|=
name|classesDirectory
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"src/main/java/"
operator|+
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|header
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|includeLicenseHeader
condition|)
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"license-header-java.txt"
argument_list|)
decl_stmt|;
name|header
operator|=
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|String
name|code
init|=
name|sourceToString
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|code
operator|=
name|header
operator|+
name|code
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Source code generated:\n"
operator|+
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|existing
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|code
operator|.
name|equals
argument_list|(
name|existing
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updated existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No changes to existing file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|target
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"IOError with file "
operator|+
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createComponentBody (String shortJavaType, boolean hasOptions, String name)
specifier|private
specifier|static
name|String
name|createComponentBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|boolean
name|hasOptions
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" connector = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"connector.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOptions
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.getProperties(configuration, parameters, null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"connector.setOptions(parameters);\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"if (ObjectHelper.isNotEmpty(customizers)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    for (ConnectorCustomizer<"
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"> customizer : customizers) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        boolean useCustomizer = (customizer instanceof HasId)"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            ? HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               ((HasId)customizer).getId())\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            : HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".customizer\");\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        if (useCustomizer) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            LOGGER.debug(\"Configure connector {}, with customizer {}\", connector, customizer);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            customizer.customize(connector);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"return connector;"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createPostConstructBody (String shortJavaType, String commonConfigurationName, String name)
specifier|private
specifier|static
name|String
name|createPostConstructBody
parameter_list|(
name|String
name|shortJavaType
parameter_list|,
name|String
name|commonConfigurationName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Map<String, Object> parameters = new HashMap<>();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"for (Map.Entry<String, "
operator|+
name|commonConfigurationName
operator|+
literal|"> entry : configuration.getConfigurations().entrySet()) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parameters.clear();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|" connector = new "
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"();\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"connector.setCamelContext(camelContext);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"try {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"IntrospectionSupport.getProperties(entry.getValue(), parameters, null, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CamelPropertiesHelper.setCamelProperties(camelContext, connector, parameters, false);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"connector.setOptions(parameters);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"if (ObjectHelper.isNotEmpty(customizers)) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    for (ConnectorCustomizer<"
argument_list|)
operator|.
name|append
argument_list|(
name|shortJavaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"> customizer : customizers) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        boolean useCustomizer = (customizer instanceof HasId)"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            ? HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".\" + entry.getKey() + \".customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               ((HasId)customizer).getId())\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            : HierarchicalPropertiesEvaluator.evaluate(\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"                applicationContext.getEnvironment(),\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector.customizer\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"               \"camel.connector."
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".\" + entry.getKey() + \".customizer\");\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        if (useCustomizer) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            LOGGER.debug(\"Configure connector {}, with customizer {}\", connector, customizer);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"            customizer.customize(connector);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"camelContext.addComponent(entry.getKey(), connector);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"} catch (Exception e) {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"throw new BeanCreationException(entry.getKey(), e.getMessage(), e);\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sortImports (JavaClassSource javaClass)
specifier|private
specifier|static
name|void
name|sortImports
parameter_list|(
name|JavaClassSource
name|javaClass
parameter_list|)
block|{
comment|// sort imports
name|List
argument_list|<
name|Import
argument_list|>
name|imports
init|=
name|javaClass
operator|.
name|getImports
argument_list|()
decl_stmt|;
comment|// sort imports
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Import
name|imp
range|:
name|imports
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|imp
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort
name|Collections
operator|.
name|sort
argument_list|(
name|names
argument_list|,
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
block|{
comment|// java comes first
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"___"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"___"
operator|+
name|s2
expr_stmt|;
block|}
comment|// then javax comes next
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"__"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"__"
operator|+
name|s2
expr_stmt|;
block|}
comment|// org.w3c is for some odd reason also before others
if|if
condition|(
name|s1
operator|.
name|startsWith
argument_list|(
literal|"org.w3c."
argument_list|)
condition|)
block|{
name|s1
operator|=
literal|"_"
operator|+
name|s1
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|.
name|startsWith
argument_list|(
literal|"org.w3c."
argument_list|)
condition|)
block|{
name|s2
operator|=
literal|"_"
operator|+
name|s2
expr_stmt|;
block|}
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// remove all imports first
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|javaClass
operator|.
name|removeImport
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// and add them back in correct order
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|javaClass
operator|.
name|addImport
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sourceToString (JavaClassSource javaClass)
specifier|private
specifier|static
name|String
name|sourceToString
parameter_list|(
name|JavaClassSource
name|javaClass
parameter_list|)
block|{
name|String
name|code
init|=
name|Formatter
operator|.
name|format
argument_list|(
name|javaClass
argument_list|)
decl_stmt|;
comment|// convert tabs to 4 spaces
name|code
operator|=
name|code
operator|.
name|replaceAll
argument_list|(
literal|"\\t"
argument_list|,
literal|"    "
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
DECL|method|generateComponentModel (String json)
specifier|private
specifier|static
name|ComponentModel
name|generateComponentModel
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ComponentModel
name|component
init|=
operator|new
name|ComponentModel
argument_list|()
decl_stmt|;
name|component
operator|.
name|setScheme
argument_list|(
name|getSafeValue
argument_list|(
literal|"scheme"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"syntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setAlternativeSyntax
argument_list|(
name|getSafeValue
argument_list|(
literal|"alternativeSyntax"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setTitle
argument_list|(
name|getSafeValue
argument_list|(
literal|"title"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setFirstVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"firstVersion"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setLabel
argument_list|(
name|getSafeValue
argument_list|(
literal|"label"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setConsumerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"consumerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setProducerOnly
argument_list|(
name|getSafeValue
argument_list|(
literal|"producerOnly"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setGroupId
argument_list|(
name|getSafeValue
argument_list|(
literal|"groupId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setArtifactId
argument_list|(
name|getSafeValue
argument_list|(
literal|"artifactId"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|setVersion
argument_list|(
name|getSafeValue
argument_list|(
literal|"version"
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|ComponentOptionModel
name|option
init|=
operator|new
name|ComponentOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addComponentOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|EndpointOptionModel
name|option
init|=
operator|new
name|EndpointOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setGroup
argument_list|(
name|getSafeValue
argument_list|(
literal|"group"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
name|getSafeValue
argument_list|(
literal|"required"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setPrefix
argument_list|(
name|getSafeValue
argument_list|(
literal|"prefix"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMultiValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"multiValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnumValues
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addEndpointOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"connectorProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|ConnectorOptionModel
name|option
init|=
operator|new
name|ConnectorOptionModel
argument_list|()
decl_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getSafeValue
argument_list|(
literal|"name"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDisplayName
argument_list|(
name|getSafeValue
argument_list|(
literal|"displayName"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setKind
argument_list|(
name|getSafeValue
argument_list|(
literal|"kind"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|getSafeValue
argument_list|(
literal|"type"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setJavaType
argument_list|(
name|getSafeValue
argument_list|(
literal|"javaType"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDeprecated
argument_list|(
name|getSafeValue
argument_list|(
literal|"deprecated"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDescription
argument_list|(
name|getSafeValue
argument_list|(
literal|"description"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setDefaultValue
argument_list|(
name|getSafeValue
argument_list|(
literal|"defaultValue"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setEnums
argument_list|(
name|getSafeValue
argument_list|(
literal|"enum"
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|component
operator|.
name|addConnectorOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|component
return|;
block|}
DECL|method|addProperty (JavaClassSource clazz, ComponentModel model, OptionModel option)
specifier|private
name|void
name|addProperty
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|ComponentModel
name|model
parameter_list|,
name|OptionModel
name|option
parameter_list|)
block|{
name|String
name|type
init|=
name|option
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|PropertySource
argument_list|<
name|JavaClassSource
argument_list|>
name|prop
init|=
name|clazz
operator|.
name|addProperty
argument_list|(
name|type
argument_list|,
name|option
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getDeprecated
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|prop
operator|.
name|getMutator
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// DeprecatedConfigurationProperty must be on getter when deprecated
name|prop
operator|.
name|getAccessor
argument_list|()
operator|.
name|addAnnotation
argument_list|(
name|DeprecatedConfigurationProperty
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|getJavaDoc
argument_list|()
operator|.
name|setFullText
argument_list|(
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setStringInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
comment|// the value should be a Long number
name|String
name|value
init|=
name|option
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|"L"
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isBlank
argument_list|(
name|option
operator|.
name|getEnums
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|enumShortName
init|=
name|type
operator|.
name|substring
argument_list|(
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|prop
operator|.
name|getField
argument_list|()
operator|.
name|setLiteralInitializer
argument_list|(
name|enumShortName
operator|+
literal|"."
operator|+
name|option
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|addImport
argument_list|(
name|model
operator|.
name|getJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

