begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.connector.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
operator|.
name|model
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CaseFormat
import|;
end_import

begin_class
DECL|class|EndpointOptionModel
specifier|public
class|class
name|EndpointOptionModel
extends|extends
name|OptionModel
block|{
DECL|field|prefix
specifier|private
name|String
name|prefix
decl_stmt|;
DECL|field|multiValue
specifier|private
name|String
name|multiValue
decl_stmt|;
DECL|field|enumValues
specifier|private
name|String
name|enumValues
decl_stmt|;
comment|// special for documentation rendering
DECL|field|newGroup
specifier|private
name|boolean
name|newGroup
decl_stmt|;
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
DECL|method|setPrefix (String prefix)
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
DECL|method|getMultiValue ()
specifier|public
name|String
name|getMultiValue
parameter_list|()
block|{
return|return
name|multiValue
return|;
block|}
DECL|method|setMultiValue (String multiValue)
specifier|public
name|void
name|setMultiValue
parameter_list|(
name|String
name|multiValue
parameter_list|)
block|{
name|this
operator|.
name|multiValue
operator|=
name|multiValue
expr_stmt|;
block|}
DECL|method|getEnumValues ()
specifier|public
name|String
name|getEnumValues
parameter_list|()
block|{
return|return
name|enumValues
return|;
block|}
DECL|method|setEnumValues (String enumValues)
specifier|public
name|void
name|setEnumValues
parameter_list|(
name|String
name|enumValues
parameter_list|)
block|{
name|this
operator|.
name|enumValues
operator|=
name|enumValues
expr_stmt|;
block|}
DECL|method|isNewGroup ()
specifier|public
name|boolean
name|isNewGroup
parameter_list|()
block|{
return|return
name|newGroup
return|;
block|}
DECL|method|setNewGroup (boolean newGroup)
specifier|public
name|void
name|setNewGroup
parameter_list|(
name|boolean
name|newGroup
parameter_list|)
block|{
name|this
operator|.
name|newGroup
operator|=
name|newGroup
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getShortJavaType ()
specifier|public
name|String
name|getShortJavaType
parameter_list|()
block|{
comment|// TODO: use watermark in the others
return|return
name|getShortJavaType
argument_list|(
literal|40
argument_list|)
return|;
block|}
DECL|method|getShortJavaType (int watermark)
specifier|public
name|String
name|getShortJavaType
parameter_list|(
name|int
name|watermark
parameter_list|)
block|{
name|String
name|type
init|=
name|getType
argument_list|()
decl_stmt|;
name|String
name|javaType
init|=
name|getJavaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|javaType
operator|.
name|startsWith
argument_list|(
literal|"java.util.Map"
argument_list|)
condition|)
block|{
return|return
literal|"Map"
return|;
block|}
elseif|else
if|if
condition|(
name|javaType
operator|.
name|startsWith
argument_list|(
literal|"java.util.Set"
argument_list|)
condition|)
block|{
return|return
literal|"Set"
return|;
block|}
elseif|else
if|if
condition|(
name|javaType
operator|.
name|startsWith
argument_list|(
literal|"java.util.List"
argument_list|)
condition|)
block|{
return|return
literal|"List"
return|;
block|}
name|String
name|text
init|=
name|javaType
decl_stmt|;
name|int
name|pos
init|=
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// if its some kind of java object then lets wrap it as its long
if|if
condition|(
literal|"object"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|text
operator|=
name|wrapCamelCaseWords
argument_list|(
name|text
argument_list|,
name|watermark
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
DECL|method|getShortGroup ()
specifier|public
name|String
name|getShortGroup
parameter_list|()
block|{
name|String
name|group
init|=
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|endsWith
argument_list|(
literal|" (advanced)"
argument_list|)
condition|)
block|{
return|return
name|group
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|group
operator|.
name|length
argument_list|()
operator|-
literal|11
argument_list|)
return|;
block|}
return|return
name|group
return|;
block|}
DECL|method|getShortDefaultValue (int watermark)
specifier|public
name|String
name|getShortDefaultValue
parameter_list|(
name|int
name|watermark
parameter_list|)
block|{
name|String
name|defaultValue
init|=
name|getDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|text
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|endsWith
argument_list|(
literal|"<T>"
argument_list|)
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|endsWith
argument_list|(
literal|"<T>>"
argument_list|)
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// TODO: dirty hack for AUTO_ACKNOWLEDGE which we should wrap
if|if
condition|(
literal|"AUTO_ACKNOWLEDGE"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
literal|"AUTO_ ACKNOWLEDGE"
return|;
block|}
return|return
name|text
return|;
block|}
DECL|method|getShortName (int watermark)
specifier|public
name|String
name|getShortName
parameter_list|(
name|int
name|watermark
parameter_list|)
block|{
name|String
name|text
init|=
name|wrapCamelCaseWords
argument_list|(
name|getName
argument_list|()
argument_list|,
name|watermark
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
comment|// ensure the option name starts with lower-case
return|return
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|text
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * To wrap long camel cased texts by words.      *      * @param option  the option which is camel cased.      * @param watermark a watermark to denote the size to cut after      * @param newLine the new line to use when breaking into a new line      */
DECL|method|wrapCamelCaseWords (String option, int watermark, String newLine)
specifier|private
name|String
name|wrapCamelCaseWords
parameter_list|(
name|String
name|option
parameter_list|,
name|int
name|watermark
parameter_list|,
name|String
name|newLine
parameter_list|)
block|{
name|String
name|text
init|=
name|CaseFormat
operator|.
name|UPPER_CAMEL
operator|.
name|to
argument_list|(
name|CaseFormat
operator|.
name|LOWER_HYPHEN
argument_list|,
name|option
argument_list|)
decl_stmt|;
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|text
operator|=
name|wrapWords
argument_list|(
name|text
argument_list|,
literal|"\n"
argument_list|,
name|watermark
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|text
operator|=
name|CaseFormat
operator|.
name|LOWER_HYPHEN
operator|.
name|to
argument_list|(
name|CaseFormat
operator|.
name|UPPER_CAMEL
argument_list|,
name|text
argument_list|)
expr_stmt|;
comment|// upper case first char on each line
name|String
index|[]
name|lines
init|=
name|text
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|lines
index|[
name|i
index|]
decl_stmt|;
name|line
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|lines
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * To wrap a big line by words.      *      * @param line the big line      * @param newLine the new line to use when breaking into a new line      * @param watermark a watermark to denote the size to cut after      * @param wrapLongWords whether to wrap long words      */
DECL|method|wrapWords (String line, String newLine, int watermark, boolean wrapLongWords)
specifier|private
name|String
name|wrapWords
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|newLine
parameter_list|,
name|int
name|watermark
parameter_list|,
name|boolean
name|wrapLongWords
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|newLine
operator|==
literal|null
condition|)
block|{
name|newLine
operator|=
name|System
operator|.
name|lineSeparator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|watermark
operator|<
literal|1
condition|)
block|{
name|watermark
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|inputLineLength
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|inputLineLength
operator|+
literal|32
argument_list|)
decl_stmt|;
while|while
condition|(
name|inputLineLength
operator|-
name|offset
operator|>
name|watermark
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
operator|==
literal|32
condition|)
block|{
operator|++
name|offset
expr_stmt|;
block|}
else|else
block|{
name|int
name|spaceToWrapAt
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|32
argument_list|,
name|watermark
operator|+
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|spaceToWrapAt
operator|>=
name|offset
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|spaceToWrapAt
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|offset
operator|=
name|spaceToWrapAt
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wrapLongWords
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|watermark
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|watermark
expr_stmt|;
block|}
else|else
block|{
name|spaceToWrapAt
operator|=
name|line
operator|.
name|indexOf
argument_list|(
literal|32
argument_list|,
name|watermark
operator|+
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|spaceToWrapAt
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|spaceToWrapAt
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newLine
argument_list|)
expr_stmt|;
name|offset
operator|=
name|spaceToWrapAt
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|inputLineLength
expr_stmt|;
block|}
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

