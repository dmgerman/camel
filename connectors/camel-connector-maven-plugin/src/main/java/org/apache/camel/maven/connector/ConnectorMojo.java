begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|jar
operator|.
name|AbstractJarMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"jar"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PREPARE_PACKAGE
argument_list|,
name|requiresProject
operator|=
literal|true
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|RUNTIME
argument_list|)
DECL|class|ConnectorMojo
specifier|public
class|class
name|ConnectorMojo
extends|extends
name|AbstractJarMojo
block|{
comment|/**      * Directory containing the classes and resource files that should be packaged into the JAR.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.outputDirectory}"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|classesDirectory
specifier|private
name|File
name|classesDirectory
decl_stmt|;
comment|/**      * Whether to generate JSon schema files to the sources directory (<tt>src/main/resources</tt>) which allows the files to be stored together with the source code.      * If this options is<tt>false</tt> the JSon schema files are generated into<tt>target/classes</tt> and only included in the built JAR.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|generateToSources
specifier|private
name|boolean
name|generateToSources
decl_stmt|;
comment|/**      * Whether to include the git url for the git repository of the source code for the Camel connector      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|includeGitUrl
specifier|private
name|boolean
name|includeGitUrl
decl_stmt|;
annotation|@
name|Override
DECL|method|getClassesDirectory ()
specifier|protected
name|File
name|getClassesDirectory
parameter_list|()
block|{
return|return
name|classesDirectory
return|;
block|}
annotation|@
name|Override
DECL|method|getClassifier ()
specifier|protected
name|String
name|getClassifier
parameter_list|()
block|{
comment|// no classifier
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|protected
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"jar"
return|;
block|}
annotation|@
name|Override
DECL|method|createArchive ()
specifier|public
name|File
name|createArchive
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
comment|// project root folder
name|File
name|root
init|=
name|classesDirectory
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|gitUrl
init|=
literal|null
decl_stmt|;
comment|// find the component dependency and get its .json file
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
literal|"camel-connector.json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|includeGitUrl
condition|)
block|{
comment|// we want to include the git url of the project
name|File
name|gitFolder
init|=
name|GitHelper
operator|.
name|findGitFolder
argument_list|()
decl_stmt|;
try|try
block|{
name|gitUrl
operator|=
name|GitHelper
operator|.
name|extractGitUrl
argument_list|(
name|gitFolder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Cannot extract gitUrl due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|gitUrl
operator|==
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No .git directory found for connector"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
name|dto
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|file
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// embed girUrl in camel-connector.json file
if|if
condition|(
name|gitUrl
operator|!=
literal|null
condition|)
block|{
name|String
name|existingGitUrl
init|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"gitUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingGitUrl
operator|==
literal|null
operator|||
operator|!
name|existingGitUrl
operator|.
name|equals
argument_list|(
name|gitUrl
argument_list|)
condition|)
block|{
name|dto
operator|.
name|put
argument_list|(
literal|"gitUrl"
argument_list|,
name|gitUrl
argument_list|)
expr_stmt|;
comment|// update file
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|file
argument_list|,
name|dto
argument_list|)
expr_stmt|;
comment|// update source file also
name|file
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"src/main/resources/camel-connector.json"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Updating gitUrl to "
operator|+
name|file
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|file
argument_list|,
name|dto
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|File
name|schema
init|=
name|embedCamelComponentSchema
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|String
name|json
init|=
name|FileHelper
operator|.
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|schema
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|header
init|=
name|buildComponentHeaderSchema
argument_list|(
name|rows
argument_list|,
name|dto
argument_list|,
name|gitUrl
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|componentOptions
init|=
name|buildComponentOptionsSchema
argument_list|(
name|rows
argument_list|,
name|dto
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|componentOptions
argument_list|)
expr_stmt|;
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|endpointOptions
init|=
name|buildEndpointOptionsSchema
argument_list|(
name|rows
argument_list|,
name|dto
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|endpointOptions
argument_list|)
expr_stmt|;
comment|// generate the json file
name|StringBuilder
name|jsonSchema
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|jsonSchema
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|jsonSchema
operator|.
name|append
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|jsonSchema
operator|.
name|append
argument_list|(
name|componentOptions
argument_list|)
expr_stmt|;
name|jsonSchema
operator|.
name|append
argument_list|(
name|endpointOptions
argument_list|)
expr_stmt|;
name|jsonSchema
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|String
name|newJson
init|=
name|jsonSchema
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// parse ourselves
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|newJson
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|newScheme
init|=
name|getOption
argument_list|(
name|rows
argument_list|,
literal|"scheme"
argument_list|)
decl_stmt|;
comment|// write the json file to the target directory as if camel apt would do it
name|String
name|javaType
init|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
name|String
name|dir
init|=
name|javaType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|javaType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|dir
operator|=
name|dir
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|File
name|subDir
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|newScheme
operator|+
literal|".json"
decl_stmt|;
name|File
name|out
init|=
operator|new
name|File
argument_list|(
name|subDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|newJson
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// also write the file in the root folder so its easier to find that for tooling
name|out
operator|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
literal|"camel-connector-schema.json"
argument_list|)
expr_stmt|;
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|newJson
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|generateToSources
condition|)
block|{
comment|// copy the file into the sources as well
name|File
name|from
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
literal|"camel-connector-schema.json"
argument_list|)
decl_stmt|;
name|File
name|to
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"src/main/resources/camel-connector-schema.json"
argument_list|)
decl_stmt|;
name|FileHelper
operator|.
name|copyFile
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
comment|// build json schema for component that only has the selectable options
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error in camel-connector-maven-plugin"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|createArchive
argument_list|()
return|;
block|}
DECL|method|extractJavaType (String scheme)
specifier|private
name|String
name|extractJavaType
parameter_list|(
name|String
name|scheme
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
literal|"META-INF/services/org/apache/camel/component/"
operator|+
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|FileHelper
operator|.
name|loadFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|fqn
init|=
name|extractClass
argument_list|(
name|lines
argument_list|)
decl_stmt|;
return|return
name|fqn
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getOption (List<Map<String, String>> rows, String key)
specifier|private
name|String
name|getOption
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|,
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|row
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|buildComponentOptionsSchema (List<Map<String, String>> rows, Map dto)
specifier|private
name|String
name|buildComponentOptionsSchema
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|,
name|Map
name|dto
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
comment|// find the endpoint options
name|List
name|options
init|=
operator|(
name|List
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"componentOptions"
argument_list|)
decl_stmt|;
name|Map
name|values
init|=
operator|(
name|Map
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"componentValues"
argument_list|)
decl_stmt|;
name|Map
name|overrides
init|=
operator|(
name|Map
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"componentOverrides"
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"componentProperties\": {\n"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|row
operator|.
name|remove
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|==
literal|null
operator|||
operator|!
name|options
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// do we have a new default value for this row?
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|newDefaultValue
init|=
operator|(
name|String
operator|)
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDefaultValue
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"defaultValue"
argument_list|,
name|newDefaultValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// is there any overrides for this row?
if|if
condition|(
name|overrides
operator|!=
literal|null
operator|&&
name|overrides
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Map
name|over
init|=
operator|(
name|Map
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|over
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|putAll
argument_list|(
name|over
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we should build the json as one-line which is how Camel does it today
comment|// which makes its internal json parser support loading our generated schema file
name|String
name|line
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"    \""
operator|+
name|key
operator|+
literal|"\": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"  },\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|buildEndpointOptionsSchema (List<Map<String, String>> rows, Map dto)
specifier|private
name|String
name|buildEndpointOptionsSchema
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|,
name|Map
name|dto
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
comment|// find the endpoint options
name|List
name|options
init|=
operator|(
name|List
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"endpointOptions"
argument_list|)
decl_stmt|;
name|Map
name|values
init|=
operator|(
name|Map
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"endpointValues"
argument_list|)
decl_stmt|;
name|Map
name|overrides
init|=
operator|(
name|Map
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"endpointOverrides"
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"properties\": {\n"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|row
operator|.
name|remove
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|==
literal|null
operator|||
operator|!
name|options
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// do we have a new default value for this row?
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|newDefaultValue
init|=
operator|(
name|String
operator|)
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDefaultValue
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"defaultValue"
argument_list|,
name|newDefaultValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// is there any overrides for this row?
if|if
condition|(
name|overrides
operator|!=
literal|null
operator|&&
name|overrides
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Map
name|over
init|=
operator|(
name|Map
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|over
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|putAll
argument_list|(
name|over
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we should build the json as one-line which is how Camel does it today
comment|// which makes its internal json parser support loading our generated schema file
name|String
name|line
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"    \""
operator|+
name|key
operator|+
literal|"\": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|buildComponentHeaderSchema (List<Map<String, String>> rows, Map dto, String gitUrl)
specifier|private
name|String
name|buildComponentHeaderSchema
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|,
name|Map
name|dto
parameter_list|,
name|String
name|gitUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|baseScheme
init|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"baseScheme"
argument_list|)
decl_stmt|;
name|String
name|title
init|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|StringHelper
operator|.
name|camelCaseToDash
argument_list|(
name|title
argument_list|)
decl_stmt|;
name|String
name|baseSyntax
init|=
name|getOption
argument_list|(
name|rows
argument_list|,
literal|"syntax"
argument_list|)
decl_stmt|;
name|String
name|syntax
init|=
name|baseSyntax
operator|.
name|replaceFirst
argument_list|(
name|baseScheme
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
name|String
name|description
init|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
comment|// dto has labels
name|String
name|label
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"labels"
argument_list|)
decl_stmt|;
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
block|{
name|label
operator|=
name|labels
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|async
init|=
name|getOption
argument_list|(
name|rows
argument_list|,
literal|"async"
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|dto
operator|.
name|get
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|String
name|producerOnly
init|=
literal|"To"
operator|.
name|equalsIgnoreCase
argument_list|(
name|pattern
argument_list|)
condition|?
literal|"true"
else|:
literal|null
decl_stmt|;
name|String
name|consumerOnly
init|=
literal|"From"
operator|.
name|equalsIgnoreCase
argument_list|(
name|pattern
argument_list|)
condition|?
literal|"true"
else|:
literal|null
decl_stmt|;
name|String
name|lenientProperties
init|=
name|getOption
argument_list|(
name|rows
argument_list|,
literal|"lenientProperties"
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|extractJavaType
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
name|String
name|groupId
init|=
name|getProject
argument_list|()
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
name|String
name|artifactId
init|=
name|getProject
argument_list|()
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|getProject
argument_list|()
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"component\": {\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|gitUrl
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    \"girUrl\": \""
operator|+
name|StringHelper
operator|.
name|nullSafe
argument_list|(
name|gitUrl
argument_list|)
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"    \"kind\": \"component\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    \"baseScheme\": \""
operator|+
name|StringHelper
operator|.
name|nullSafe
argument_list|(
name|baseScheme
argument_list|)
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    \"scheme\": \""
operator|+
name|scheme
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    \"syntax\": \""
operator|+
name|syntax
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    \"title\": \""
operator|+
name|title
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    \"description\": \""
operator|+
name|description
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    \"label\": \""
operator|+
name|label
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"    \"deprecated\": \"false\",\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    \"async\": \""
operator|+
name|async
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producerOnly
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    \"producerOnly\": \""
operator|+
name|producerOnly
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|consumerOnly
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    \"consumerOnly\": \""
operator|+
name|consumerOnly
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lenientProperties
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    \"lenientProperties\": \""
operator|+
name|lenientProperties
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"    \"javaType\": \""
operator|+
name|javaType
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    \"groupId\": \""
operator|+
name|groupId
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    \"artifactId\": \""
operator|+
name|artifactId
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    \"version\": \""
operator|+
name|version
operator|+
literal|"\"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  },\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Finds and embeds the Camel component JSon schema file      */
DECL|method|embedCamelComponentSchema (File file)
specifier|private
name|File
name|embedCamelComponentSchema
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
name|dto
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|file
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|extractScheme
argument_list|(
name|dto
argument_list|)
decl_stmt|;
name|String
name|groupId
init|=
name|extractGroupId
argument_list|(
name|dto
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|extractArtifactId
argument_list|(
name|dto
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|extractVersion
argument_list|(
name|dto
argument_list|)
decl_stmt|;
comment|// find the artifact on the classpath that has the Camel component this connector is using
comment|// then we want to grab its json schema file to embed in this JAR so we have all files together
if|if
condition|(
name|scheme
operator|!=
literal|null
operator|&&
name|groupId
operator|!=
literal|null
operator|&&
name|artifactId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|obj
range|:
name|getProject
argument_list|()
operator|.
name|getDependencyArtifacts
argument_list|()
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// use baseVersion so we can support SNAPSHOT versions that are based on a base version
if|if
condition|(
name|groupId
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|artifactId
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
name|version
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
condition|)
block|{
comment|// load the component file inside the file
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:"
operator|+
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|URLClassLoader
name|child
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|child
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/services/org/apache/camel/component/"
operator|+
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|FileHelper
operator|.
name|loadFile
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|fqn
init|=
name|extractClass
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// only keep package
name|String
name|pck
init|=
name|fqn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fqn
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|pck
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|"/"
operator|+
name|scheme
operator|+
literal|".json"
decl_stmt|;
name|is
operator|=
name|child
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|schema
init|=
name|FileHelper
operator|.
name|loadFile
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// write schema to file
name|File
name|out
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|,
literal|"camel-component-schema.json"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|schema
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Embedded camel-component-schema.json file for Camel component "
operator|+
name|scheme
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Cannot read file camel-connector.json"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|extractClass (List<String> lines)
specifier|private
name|String
name|extractClass
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
block|{
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"class="
argument_list|)
condition|)
block|{
return|return
name|line
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|extractScheme (Map map)
specifier|private
name|String
name|extractScheme
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"baseScheme"
argument_list|)
return|;
block|}
DECL|method|extractGroupId (Map map)
specifier|private
name|String
name|extractGroupId
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"baseGroupId"
argument_list|)
return|;
block|}
DECL|method|extractArtifactId (Map map)
specifier|private
name|String
name|extractArtifactId
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"baseArtifactId"
argument_list|)
return|;
block|}
DECL|method|extractVersion (Map map)
specifier|private
name|String
name|extractVersion
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"baseVersion"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

