begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|connector
package|;
end_package

begin_comment
comment|/**  * Utility methods for String.  */
end_comment

begin_class
DECL|class|StringHelper
specifier|public
specifier|final
class|class
name|StringHelper
block|{
DECL|method|StringHelper ()
specifier|private
name|StringHelper
parameter_list|()
block|{     }
comment|/**      * Converts the value to use dash style instead of upper cased      */
DECL|method|camelCaseToDash (String value)
specifier|public
specifier|static
name|String
name|camelCaseToDash
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|dash
init|=
literal|false
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|value
operator|.
name|toCharArray
argument_list|()
control|)
block|{
comment|// skip dash in start
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|dash
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dash
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lower case first
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|dash
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the string value (uses empty string for<tt>null</tt> values)      */
DECL|method|nullSafe (String text)
specifier|public
specifier|static
name|String
name|nullSafe
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|text
operator|!=
literal|null
condition|?
name|text
else|:
literal|""
return|;
block|}
block|}
end_class

end_unit

