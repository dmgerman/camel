begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|json
operator|.
name|simple
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|json
operator|.
name|simple
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|json
operator|.
name|simple
operator|.
name|Jsoner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ConnectorModel
specifier|final
class|class
name|ConnectorModel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConnectorModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|componentName
specifier|private
specifier|final
name|String
name|componentName
decl_stmt|;
DECL|field|className
specifier|private
specifier|final
name|String
name|className
decl_stmt|;
DECL|field|connectorJSon
specifier|private
name|String
name|connectorJSon
decl_stmt|;
DECL|field|baseScheme
specifier|private
name|String
name|baseScheme
decl_stmt|;
DECL|field|baseJavaType
specifier|private
name|String
name|baseJavaType
decl_stmt|;
DECL|field|scheduler
specifier|private
name|String
name|scheduler
decl_stmt|;
DECL|field|connectorName
specifier|private
name|String
name|connectorName
decl_stmt|;
DECL|field|inputDataType
specifier|private
name|DataType
name|inputDataType
decl_stmt|;
DECL|field|outputDataType
specifier|private
name|DataType
name|outputDataType
decl_stmt|;
DECL|field|defaultComponentOptions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaultComponentOptions
decl_stmt|;
DECL|field|defaultEndpointOptions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaultEndpointOptions
decl_stmt|;
DECL|field|endpointOptions
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|endpointOptions
decl_stmt|;
DECL|field|componentOptions
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|componentOptions
decl_stmt|;
DECL|field|connectorOptions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|connectorOptions
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ConnectorModel (String componentName, Class<?> componentClass)
name|ConnectorModel
parameter_list|(
name|String
name|componentName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|componentClass
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|componentClass
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|connectorJSon
operator|=
name|findCamelConnectorJSonSchema
argument_list|(
name|componentClass
argument_list|)
expr_stmt|;
comment|// parse the json
name|JsonObject
name|json
decl_stmt|;
try|try
block|{
name|json
operator|=
operator|(
name|JsonObject
operator|)
name|Jsoner
operator|.
name|deserialize
argument_list|(
name|connectorJSon
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error parsing camel-connector.json file due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|connectorName
operator|=
name|json
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseScheme
operator|=
name|json
operator|.
name|getString
argument_list|(
literal|"baseScheme"
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseJavaType
operator|=
name|json
operator|.
name|getString
argument_list|(
literal|"baseJavaType"
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|json
operator|.
name|getString
argument_list|(
literal|"scheduler"
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"inputDataType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|inputDataType
operator|=
operator|new
name|DataType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|json
operator|.
name|getString
argument_list|(
literal|"outputDataType"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|outputDataType
operator|=
operator|new
name|DataType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|defaultComponentOptions
operator|=
name|json
operator|.
name|getMap
argument_list|(
literal|"componentValues"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultComponentOptions
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|defaultComponentOptions
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
name|this
operator|.
name|defaultEndpointOptions
operator|=
name|json
operator|.
name|getMap
argument_list|(
literal|"endpointValues"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultEndpointOptions
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|defaultEndpointOptions
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
name|this
operator|.
name|endpointOptions
operator|=
name|json
operator|.
name|getCollection
argument_list|(
literal|"endpointOptions"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|endpointOptions
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|endpointOptions
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
name|this
operator|.
name|componentOptions
operator|=
name|json
operator|.
name|getCollection
argument_list|(
literal|"componentOptions"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|componentOptions
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|componentOptions
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
name|this
operator|.
name|connectorOptions
operator|=
name|json
operator|.
name|getMap
argument_list|(
literal|"connectorProperties"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|connectorOptions
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|connectorOptions
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
block|}
DECL|method|getComponentName ()
specifier|public
name|String
name|getComponentName
parameter_list|()
block|{
return|return
name|componentName
return|;
block|}
DECL|method|getClassName ()
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
DECL|method|getConnectorJSon ()
specifier|public
name|String
name|getConnectorJSon
parameter_list|()
block|{
return|return
name|connectorJSon
return|;
block|}
DECL|method|getBaseScheme ()
specifier|public
name|String
name|getBaseScheme
parameter_list|()
block|{
return|return
name|baseScheme
return|;
block|}
DECL|method|getBaseJavaType ()
specifier|public
name|String
name|getBaseJavaType
parameter_list|()
block|{
return|return
name|baseJavaType
return|;
block|}
DECL|method|getScheduler ()
specifier|public
name|String
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
DECL|method|getConnectorName ()
specifier|public
name|String
name|getConnectorName
parameter_list|()
block|{
return|return
name|connectorName
return|;
block|}
DECL|method|getInputDataType ()
specifier|public
name|DataType
name|getInputDataType
parameter_list|()
block|{
return|return
name|inputDataType
return|;
block|}
DECL|method|getOutputDataType ()
specifier|public
name|DataType
name|getOutputDataType
parameter_list|()
block|{
return|return
name|outputDataType
return|;
block|}
DECL|method|getDefaultComponentOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultComponentOptions
parameter_list|()
block|{
return|return
name|defaultComponentOptions
return|;
block|}
DECL|method|getDefaultEndpointOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultEndpointOptions
parameter_list|()
block|{
return|return
name|defaultEndpointOptions
return|;
block|}
DECL|method|getEndpointOptions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getEndpointOptions
parameter_list|()
block|{
return|return
name|endpointOptions
return|;
block|}
DECL|method|getComponentOptions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getComponentOptions
parameter_list|()
block|{
return|return
name|componentOptions
return|;
block|}
DECL|method|getConnectorOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getConnectorOptions
parameter_list|()
block|{
return|return
name|connectorOptions
return|;
block|}
comment|// ***************************************
comment|// Helpers
comment|// ***************************************
DECL|method|findCamelConnectorJSonSchema (Class<?> componentClass)
specifier|private
name|String
name|findCamelConnectorJSonSchema
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|componentClass
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Finding camel-connector.json in classpath for connector: {}"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|urls
decl_stmt|;
try|try
block|{
name|urls
operator|=
name|componentClass
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
literal|"camel-connector.json"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot open camel-connector.json in classpath for connector "
operator|+
name|componentName
argument_list|)
throw|;
block|}
while|while
condition|(
name|urls
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|urls
operator|.
name|nextElement
argument_list|()
operator|.
name|openStream
argument_list|()
init|)
block|{
name|String
name|json
init|=
name|IOHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|JsonObject
name|output
init|=
operator|(
name|JsonObject
operator|)
name|Jsoner
operator|.
name|deserialize
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|output
operator|.
name|getString
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Found camel-connector.json in classpath with javaType: {}"
argument_list|,
name|javaType
argument_list|)
expr_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
name|json
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot read camel-connector.json in classpath for connector "
operator|+
name|componentName
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

