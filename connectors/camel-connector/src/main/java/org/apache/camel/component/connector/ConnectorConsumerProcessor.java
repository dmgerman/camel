begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DelegateAsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * Connector {@link Processor} which is capable of performing before and after custom processing  * while consuming a message (ie from the consumer).  */
end_comment

begin_class
DECL|class|ConnectorConsumerProcessor
specifier|public
class|class
name|ConnectorConsumerProcessor
extends|extends
name|DelegateAsyncProcessor
block|{
DECL|field|beforeConsumer
specifier|private
specifier|final
name|Processor
name|beforeConsumer
decl_stmt|;
DECL|field|afterConsumer
specifier|private
specifier|final
name|Processor
name|afterConsumer
decl_stmt|;
DECL|method|ConnectorConsumerProcessor (Processor processor, Processor beforeConsumer, Processor afterConsumer)
specifier|public
name|ConnectorConsumerProcessor
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|Processor
name|beforeConsumer
parameter_list|,
name|Processor
name|afterConsumer
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|beforeConsumer
operator|=
name|beforeConsumer
expr_stmt|;
name|this
operator|.
name|afterConsumer
operator|=
name|afterConsumer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// setup callback for after consumer
name|AsyncCallback
name|delegate
init|=
name|doneSync
lambda|->
block|{
if|if
condition|(
name|afterConsumer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|afterConsumer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|done
argument_list|(
name|doneSync
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|// perform any before consumer
if|if
condition|(
name|beforeConsumer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|beforeConsumer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// process the consumer
return|return
name|super
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|delegate
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|beforeConsumer
argument_list|,
name|processor
argument_list|,
name|afterConsumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|beforeConsumer
argument_list|,
name|processor
argument_list|,
name|afterConsumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|suspendService
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|resumeService
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|beforeConsumer
argument_list|,
name|processor
argument_list|,
name|afterConsumer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

