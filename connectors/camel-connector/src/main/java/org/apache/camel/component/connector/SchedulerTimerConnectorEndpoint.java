begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Pipeline
import|;
end_import

begin_comment
comment|/**  * A connector which is scheduler based from a timer endpoint. This allows to use a connector from a Camel route that  * is scheduled. For example a foo connector would otherwise have to be manually scheduled, eg  *<pre>  *     from("timer:something?period=2000")  *       .to("foo:hello")  *       .log("Foo says ${body}");  *</pre>  * .. can now be done without the manual timer  *<pre>  *     from("foo:hello?schedulePeriod=2000")  *       .log("Foo says ${body}");  *</pre>  *<p/>  * This requires the connector to have configured:<tt>"scheduler": "timer"</tt> such as shown in the petstore-connector.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed Scheduled TimerConnector Endpoint"
argument_list|)
DECL|class|SchedulerTimerConnectorEndpoint
specifier|public
class|class
name|SchedulerTimerConnectorEndpoint
extends|extends
name|DefaultConnectorEndpoint
block|{
DECL|field|period
specifier|private
name|long
name|period
init|=
literal|1000
decl_stmt|;
DECL|method|SchedulerTimerConnectorEndpoint (String endpointUri, ConnectorComponent component, Endpoint endpoint, DataType inputDataType, DataType outputDataType)
specifier|public
name|SchedulerTimerConnectorEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|ConnectorComponent
name|component
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|DataType
name|inputDataType
parameter_list|,
name|DataType
name|outputDataType
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|,
name|endpoint
argument_list|,
name|inputDataType
argument_list|,
name|outputDataType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// special as we are scheduler based and then need to create a timer consumer that then calls the producer
name|List
argument_list|<
name|Processor
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|createProducer
argument_list|()
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|Processor
name|pipeline
init|=
name|Pipeline
operator|.
name|newInstance
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
comment|// create a timer consumer which wraps calling the producer and then the intended processor
name|String
name|name
init|=
name|getComponent
argument_list|()
operator|.
name|getComponentName
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
literal|"timer:"
operator|+
name|name
operator|+
literal|"?period="
operator|+
name|period
decl_stmt|;
name|Consumer
name|consumer
init|=
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|)
operator|.
name|createConsumer
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Delay in milli seconds between scheduling (executing)"
argument_list|)
DECL|method|getPeriod ()
specifier|public
name|long
name|getPeriod
parameter_list|()
block|{
return|return
name|period
return|;
block|}
DECL|method|setPeriod (long period)
specifier|public
name|void
name|setPeriod
parameter_list|(
name|long
name|period
parameter_list|)
block|{
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
block|}
block|}
end_class

end_unit

