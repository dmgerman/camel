begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|VerifiableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|DefaultCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultErrorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
operator|.
name|sanitizeUri
import|;
end_import

begin_comment
comment|/**  * Base class for Camel Connector components.  */
end_comment

begin_class
DECL|class|DefaultConnectorComponent
specifier|public
specifier|abstract
class|class
name|DefaultConnectorComponent
extends|extends
name|DefaultComponent
implements|implements
name|ConnectorComponent
implements|,
name|VerifiableComponent
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|catalog
specifier|private
specifier|final
name|CamelCatalog
name|catalog
init|=
operator|new
name|DefaultCamelCatalog
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|baseScheme
specifier|private
specifier|final
name|String
name|baseScheme
decl_stmt|;
DECL|field|componentName
specifier|private
specifier|final
name|String
name|componentName
decl_stmt|;
DECL|field|componentScheme
specifier|private
specifier|final
name|String
name|componentScheme
decl_stmt|;
DECL|field|model
specifier|private
specifier|final
name|ConnectorModel
name|model
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
decl_stmt|;
DECL|field|beforeProducer
specifier|private
name|Processor
name|beforeProducer
decl_stmt|;
DECL|field|afterProducer
specifier|private
name|Processor
name|afterProducer
decl_stmt|;
DECL|field|beforeConsumer
specifier|private
name|Processor
name|beforeConsumer
decl_stmt|;
DECL|field|afterConsumer
specifier|private
name|Processor
name|afterConsumer
decl_stmt|;
DECL|method|DefaultConnectorComponent (String componentName, String className)
specifier|protected
name|DefaultConnectorComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
operator|new
name|ConnectorModel
argument_list|(
name|componentName
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseScheme
operator|=
name|this
operator|.
name|model
operator|.
name|getBaseScheme
argument_list|()
expr_stmt|;
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
name|this
operator|.
name|componentScheme
operator|=
name|componentName
operator|+
literal|"-component"
expr_stmt|;
name|this
operator|.
name|options
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// add to catalog
name|this
operator|.
name|catalog
operator|.
name|addComponent
argument_list|(
name|componentName
argument_list|,
name|className
argument_list|)
expr_stmt|;
comment|// It may be a custom component so we need to register this in the camel catalog also
if|if
condition|(
operator|!
name|catalog
operator|.
name|findComponentNames
argument_list|()
operator|.
name|contains
argument_list|(
name|baseScheme
argument_list|)
condition|)
block|{
name|catalog
operator|.
name|addComponent
argument_list|(
name|baseScheme
argument_list|,
name|model
operator|.
name|getBaseJavaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add an alias for the base component so there's no clash between connectors
comment|// if they set options targeting the component.
if|if
condition|(
operator|!
name|catalog
operator|.
name|findComponentNames
argument_list|()
operator|.
name|contains
argument_list|(
name|componentScheme
argument_list|)
condition|)
block|{
name|this
operator|.
name|catalog
operator|.
name|addComponent
argument_list|(
name|componentScheme
argument_list|,
name|this
operator|.
name|model
operator|.
name|getBaseJavaType
argument_list|()
argument_list|,
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
name|baseScheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|registerExtension
argument_list|(
name|this
operator|::
name|getComponentVerifierExtension
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddOption (Map<String, T> options, String name, T value)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|void
name|doAddOption
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|options
parameter_list|,
name|String
name|name
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Adding option: {}={}"
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|T
name|val
init|=
name|options
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Options {} overridden, old value was {}"
argument_list|,
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// if we extracted any scheduler query parameters we would need to rebuild the uri without them
name|int
name|before
init|=
name|parameters
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerOptions
init|=
name|extractSchedulerOptions
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|int
name|after
init|=
name|parameters
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|schedulerOptions
operator|!=
literal|null
operator|&&
name|before
operator|!=
name|after
condition|)
block|{
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|u
operator|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|u
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|uri
operator|=
name|u
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// grab the regular query parameters
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
name|buildEndpointOptions
argument_list|(
name|remaining
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|// create the uri of the base component
name|String
name|delegateUri
init|=
name|createEndpointUri
argument_list|(
name|componentScheme
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Endpoint
name|delegate
init|=
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|delegateUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
comment|// the uris can have sensitive information so sanitize
name|log
operator|.
name|info
argument_list|(
literal|"Connector resolved: {} -> {}"
argument_list|,
name|sanitizeUri
argument_list|(
name|uri
argument_list|)
argument_list|,
name|sanitizeUri
argument_list|(
name|delegateUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|answer
decl_stmt|;
comment|// are we scheduler based?
if|if
condition|(
literal|"timer"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getScheduler
argument_list|()
argument_list|)
condition|)
block|{
name|SchedulerTimerConnectorEndpoint
name|endpoint
init|=
operator|new
name|SchedulerTimerConnectorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|delegate
argument_list|,
name|model
operator|.
name|getInputDataType
argument_list|()
argument_list|,
name|model
operator|.
name|getOutputDataType
argument_list|()
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|schedulerOptions
argument_list|)
expr_stmt|;
name|answer
operator|=
name|endpoint
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|DefaultConnectorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|delegate
argument_list|,
name|model
operator|.
name|getInputDataType
argument_list|()
argument_list|,
name|model
operator|.
name|getOutputDataType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// clean-up parameters so that validation won't fail later on
comment|// in DefaultConnectorComponent.validateParameters()
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpointUri (String scheme, Map<String, String> options)
specifier|public
name|String
name|createEndpointUri
parameter_list|(
name|String
name|scheme
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Creating endpoint uri with scheme: {}"
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
return|return
name|catalog
operator|.
name|asEndpointUri
argument_list|(
name|scheme
argument_list|,
name|options
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelCatalog ()
specifier|public
name|CamelCatalog
name|getCamelCatalog
parameter_list|()
block|{
return|return
name|catalog
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelConnectorJSon ()
specifier|public
name|String
name|getCamelConnectorJSon
parameter_list|()
block|{
return|return
name|model
operator|.
name|getConnectorJSon
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConnectorName ()
specifier|public
name|String
name|getConnectorName
parameter_list|()
block|{
return|return
name|model
operator|.
name|getConnectorName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getComponentName ()
specifier|public
name|String
name|getComponentName
parameter_list|()
block|{
return|return
name|componentName
return|;
block|}
annotation|@
name|Override
DECL|method|getOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
annotation|@
name|Override
DECL|method|setOptions (Map<String, Object> options)
specifier|public
name|void
name|setOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|options
operator|.
name|putAll
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addOption (String name, Object value)
specifier|public
name|void
name|addOption
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|doAddOption
argument_list|(
name|this
operator|.
name|options
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addOptions (Map<String, Object> options)
specifier|public
name|void
name|addOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|options
operator|.
name|forEach
argument_list|(
parameter_list|(
name|name
parameter_list|,
name|value
parameter_list|)
lambda|->
name|doAddOption
argument_list|(
name|this
operator|.
name|options
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVerifier ()
specifier|public
name|ComponentVerifier
name|getVerifier
parameter_list|()
block|{
return|return
parameter_list|(
name|scope
parameter_list|,
name|parameters
parameter_list|)
lambda|->
name|getExtension
argument_list|(
name|ComponentVerifierExtension
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|UnsupportedOperationException
operator|::
operator|new
argument_list|)
operator|.
name|verify
argument_list|(
name|scope
argument_list|,
name|parameters
argument_list|)
return|;
block|}
DECL|method|getComponentVerifierExtension ()
specifier|private
name|ComponentVerifierExtension
name|getComponentVerifierExtension
parameter_list|()
block|{
try|try
block|{
comment|// Create the component but no need to add it to the camel context
comment|// nor to start it.
specifier|final
name|Component
name|component
init|=
name|createNewBaseComponent
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ComponentVerifierExtension
argument_list|>
name|extension
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|ComponentVerifierExtension
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|extension
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
parameter_list|(
name|ComponentVerifierExtension
operator|.
name|Scope
name|scope
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
decl_stmt|;
try|try
block|{
comment|// A little nasty hack required as verifier uses Map<String, Object>
comment|// to be compatible with all the methods in CamelContext whereas
comment|// catalog deals with Map<String, String>
name|options
operator|=
operator|(
name|Map
operator|)
name|buildEndpointOptions
argument_list|(
literal|null
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|NoTypeConversionAvailableException
name|e
parameter_list|)
block|{
comment|// If a failure is detected while reading the catalog, wrap it
comment|// and stop the validation step.
return|return
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|scope
argument_list|)
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|extension
operator|.
name|get
argument_list|()
operator|.
name|verify
argument_list|(
name|scope
argument_list|,
name|options
argument_list|)
return|;
block|}
return|;
block|}
else|else
block|{
return|return
parameter_list|(
name|scope
parameter_list|,
name|map
parameter_list|)
lambda|->
block|{
return|return
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|UNSUPPORTED
argument_list|,
name|scope
argument_list|)
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCode
argument_list|(
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|UNSUPPORTED
argument_list|)
operator|.
name|detail
argument_list|(
literal|"camel_connector_name"
argument_list|,
name|getConnectorName
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
literal|"camel_component_name"
argument_list|,
name|getComponentName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
parameter_list|(
name|scope
parameter_list|,
name|map
parameter_list|)
lambda|->
block|{
return|return
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|scope
argument_list|)
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|;
block|}
block|}
comment|// --------------------------------------------------------------
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// lets enforce that every connector must have an input and output data type
if|if
condition|(
name|model
operator|.
name|getInputDataType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Camel connector must have inputDataType defined in camel-connector.json file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|model
operator|.
name|getOutputDataType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Camel connector must have outputDataType defined in camel-connector.json file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|model
operator|.
name|getBaseScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Camel connector must have baseSchema defined in camel-connector.json file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|model
operator|.
name|getBaseJavaType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Camel connector must have baseJavaType defined in camel-connector.json file"
argument_list|)
throw|;
block|}
name|Component
name|component
init|=
name|createNewBaseComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|removeComponent
argument_list|(
name|this
operator|.
name|componentScheme
argument_list|)
expr_stmt|;
comment|// ensure component is started and stopped when Camel shutdown
name|getCamelContext
argument_list|()
operator|.
name|addService
argument_list|(
name|component
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getCamelContext
argument_list|()
operator|.
name|addComponent
argument_list|(
name|this
operator|.
name|componentScheme
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Starting connector: {}"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Stopping connector: {}"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBeforeProducer ()
specifier|public
name|Processor
name|getBeforeProducer
parameter_list|()
block|{
return|return
name|beforeProducer
return|;
block|}
annotation|@
name|Override
DECL|method|setBeforeProducer (Processor beforeProducer)
specifier|public
name|void
name|setBeforeProducer
parameter_list|(
name|Processor
name|beforeProducer
parameter_list|)
block|{
name|this
operator|.
name|beforeProducer
operator|=
name|beforeProducer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAfterProducer ()
specifier|public
name|Processor
name|getAfterProducer
parameter_list|()
block|{
return|return
name|afterProducer
return|;
block|}
annotation|@
name|Override
DECL|method|setAfterProducer (Processor afterProducer)
specifier|public
name|void
name|setAfterProducer
parameter_list|(
name|Processor
name|afterProducer
parameter_list|)
block|{
name|this
operator|.
name|afterProducer
operator|=
name|afterProducer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBeforeConsumer ()
specifier|public
name|Processor
name|getBeforeConsumer
parameter_list|()
block|{
return|return
name|beforeConsumer
return|;
block|}
annotation|@
name|Override
DECL|method|setBeforeConsumer (Processor beforeConsumer)
specifier|public
name|void
name|setBeforeConsumer
parameter_list|(
name|Processor
name|beforeConsumer
parameter_list|)
block|{
name|this
operator|.
name|beforeConsumer
operator|=
name|beforeConsumer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAfterConsumer ()
specifier|public
name|Processor
name|getAfterConsumer
parameter_list|()
block|{
return|return
name|afterConsumer
return|;
block|}
annotation|@
name|Override
DECL|method|setAfterConsumer (Processor afterConsumer)
specifier|public
name|void
name|setAfterConsumer
parameter_list|(
name|Processor
name|afterConsumer
parameter_list|)
block|{
name|this
operator|.
name|afterConsumer
operator|=
name|afterConsumer
expr_stmt|;
block|}
comment|// ***************************************
comment|// Helpers
comment|// ***************************************
comment|/**      * Create the endpoint instance which either happens with a new base component      * which has been pre-configured for this connector or we fallback and use      * the default component in the camel context      */
DECL|method|createNewBaseComponent ()
specifier|private
name|Component
name|createNewBaseComponent
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseClassName
init|=
name|model
operator|.
name|getBaseJavaType
argument_list|()
decl_stmt|;
specifier|final
name|CamelContext
name|context
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
name|Component
name|base
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseClassName
operator|!=
literal|null
condition|)
block|{
comment|// create a new instance of this base component
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|Class
operator|.
name|forName
argument_list|(
name|baseClassName
argument_list|)
decl_stmt|;
name|Constructor
name|ctr
init|=
name|getPublicDefaultConstructor
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctr
operator|!=
literal|null
condition|)
block|{
comment|// call default no-arg constructor
name|base
operator|=
operator|(
name|Component
operator|)
name|ctr
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|base
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// the connector may have default values for the component level also
comment|// and if so we need to prepare these values and set on this component
comment|// before we can start
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultOptions
init|=
name|model
operator|.
name|getDefaultComponentOptions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|defaultOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|defaultOptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// also support {{ }} placeholders so resolve those first
name|value
operator|=
name|getCamelContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Using component option: {}={}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|base
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// configure component with extra options
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Get the list of options from the connector catalog that
comment|// are configured to target the endpoint
name|List
argument_list|<
name|String
argument_list|>
name|endpointOptions
init|=
name|model
operator|.
name|getEndpointOptions
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|connectorOptions
init|=
name|model
operator|.
name|getConnectorOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Only set options that are targeting the component
if|if
condition|(
operator|!
name|endpointOptions
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
operator|!
name|connectorOptions
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using component option: {}={}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|base
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|base
return|;
block|}
comment|/**      * Extracts the scheduler options from the parameters.      *<p/>      * These options start with<tt>scheduler</tt> in their key name, such as<tt>schedulerPeriod</tt>      * which is removed from parameters, and transformed into keys without the<tt>scheduler</tt> prefix.      *      * @return the scheduler options, or<tt>null</tt> if scheduler not enabled      */
DECL|method|extractSchedulerOptions (Map<String, Object> parameters)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractSchedulerOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getScheduler
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// include default options first
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|model
operator|.
name|getDefaultEndpointOptions
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|String
name|schedulerKey
init|=
name|asSchedulerKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerKey
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// and then override with from parameters
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|parameters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|schedulerKey
init|=
name|asSchedulerKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerKey
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|schedulerKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// and remove as it should not be part of regular parameters
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|asSchedulerKey (String key)
specifier|private
specifier|static
name|String
name|asSchedulerKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"scheduler"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
decl_stmt|;
comment|// and lower case first char
name|name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|buildEndpointOptions (String remaining, Map<String, Object> parameters)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildEndpointOptions
parameter_list|(
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|NoTypeConversionAvailableException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultOptions
init|=
name|model
operator|.
name|getDefaultEndpointOptions
argument_list|()
decl_stmt|;
comment|// gather all options to use when building the delegate uri
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// default options from connector json
if|if
condition|(
operator|!
name|defaultOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultOptions
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|isValidConnectionOption
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|doAddOption
argument_list|(
name|options
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Extract options from options that are supposed to be set at the endpoint
comment|// level, those options can be overridden and extended using by the query
comment|// parameters.
name|List
argument_list|<
name|String
argument_list|>
name|endpointOptions
init|=
name|model
operator|.
name|getEndpointOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpointOptions
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|this
operator|.
name|options
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|endpointOption
range|:
name|endpointOptions
control|)
block|{
name|Object
name|value
init|=
name|this
operator|.
name|options
operator|.
name|get
argument_list|(
name|endpointOption
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|doAddOption
argument_list|(
name|options
argument_list|,
name|endpointOption
argument_list|,
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// options from query parameters
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isValidConnectionOption
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|doAddOption
argument_list|(
name|options
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add extra options from remaining (context-path)
if|if
condition|(
name|remaining
operator|!=
literal|null
condition|)
block|{
name|String
name|targetUri
init|=
name|componentScheme
operator|+
literal|":"
operator|+
name|remaining
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extra
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
name|targetUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|!=
literal|null
operator|&&
operator|!
name|extra
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|extra
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|isValidConnectionOption
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|doAddOption
argument_list|(
name|options
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|options
return|;
block|}
DECL|method|isValidConnectionOption (String key, String value)
specifier|private
name|boolean
name|isValidConnectionOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// skip specific option if its a scheduler
if|if
condition|(
name|model
operator|.
name|getScheduler
argument_list|()
operator|!=
literal|null
operator|&&
name|asSchedulerKey
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getPublicDefaultConstructor (Class<?> clazz)
specifier|private
specifier|static
name|Constructor
name|getPublicDefaultConstructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
for|for
control|(
name|Constructor
name|ctr
range|:
name|clazz
operator|.
name|getConstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|ctr
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|ctr
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|ctr
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

