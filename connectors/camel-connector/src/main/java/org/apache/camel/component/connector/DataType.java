begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|connector
package|;
end_package

begin_comment
comment|/**  * Data types supported by Camel connectors.  *<p/>  * A connector is more strict that a regular Camel component and as such the connector  * is limited to supporting one data type as input and output.  */
end_comment

begin_class
DECL|class|DataType
specifier|public
specifier|final
class|class
name|DataType
block|{
comment|/**      * The supported data types.      */
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enumConstant|none
DECL|enumConstant|any
DECL|enumConstant|java
DECL|enumConstant|text
DECL|enumConstant|xml
DECL|enumConstant|json
name|none
block|,
name|any
block|,
name|java
block|,
name|text
block|,
name|xml
block|,
name|json
block|;     }
DECL|field|type
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|subType
specifier|private
specifier|final
name|String
name|subType
decl_stmt|;
DECL|method|DataType (String text)
name|DataType
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|text
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|parts
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// allow * as shorthand for any kind
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"any"
expr_stmt|;
block|}
name|type
operator|=
name|Type
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|subType
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|subType
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|DataType (Type type, String subType)
name|DataType
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|subType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|subType
operator|=
name|subType
expr_stmt|;
block|}
comment|/**      * The type one of<tt>none</tt>,<tt>any</tt> (you can also use<tt>*</tt> as any),<tt>java</tt>,<tt>text</tt>,<tt>xml</tt>, or<tt>json</tt>.      */
DECL|method|getType ()
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Optional sub type to qualify the data type such as a java fully qualified class name, or a xml namespace etc      */
DECL|method|getSubType ()
specifier|public
name|String
name|getSubType
parameter_list|()
block|{
return|return
name|subType
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|subType
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|name
argument_list|()
operator|+
literal|":"
operator|+
name|subType
return|;
block|}
else|else
block|{
return|return
name|type
operator|.
name|name
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

