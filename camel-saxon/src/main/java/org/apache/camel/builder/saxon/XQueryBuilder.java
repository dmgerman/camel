begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.saxon
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|saxon
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|om
operator|.
name|DocumentInfo
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|query
operator|.
name|DynamicQueryContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|query
operator|.
name|StaticQueryContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|query
operator|.
name|XQueryExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|trans
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|BytesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Creates an XQuery builder  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|XQueryBuilder
specifier|public
specifier|abstract
class|class
name|XQueryBuilder
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|Expression
argument_list|<
name|E
argument_list|>
implements|,
name|Predicate
argument_list|<
name|E
argument_list|>
block|{
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|expression
specifier|private
name|XQueryExpression
name|expression
decl_stmt|;
DECL|field|staticQueryContext
specifier|private
name|StaticQueryContext
name|staticQueryContext
decl_stmt|;
DECL|field|parameters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|converter
specifier|private
name|XmlConverter
name|converter
init|=
operator|new
name|XmlConverter
argument_list|()
decl_stmt|;
DECL|field|resultsFormat
specifier|private
name|ResultFormat
name|resultsFormat
init|=
name|ResultFormat
operator|.
name|DOM
decl_stmt|;
DECL|field|properties
specifier|private
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|method|evaluate (E exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
try|try
block|{
switch|switch
condition|(
name|resultsFormat
condition|)
block|{
case|case
name|Bytes
case|:
return|return
name|evaluateAsBytes
argument_list|(
name|exchange
argument_list|)
return|;
case|case
name|BytesSource
case|:
return|return
name|evaluateAsBytesSource
argument_list|(
name|exchange
argument_list|)
return|;
case|case
name|DOM
case|:
return|return
name|evaluateAsDOM
argument_list|(
name|exchange
argument_list|)
return|;
case|case
name|List
case|:
return|return
name|evaluateAsList
argument_list|(
name|exchange
argument_list|)
return|;
case|case
name|StringSource
case|:
return|return
name|evaluateAsStringSource
argument_list|(
name|exchange
argument_list|)
return|;
case|case
name|String
case|:
default|default:
return|return
name|evaluateAsString
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExpressionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|evaluateAsList (E exchange)
specifier|public
name|List
name|evaluateAsList
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|createDynamicContext
argument_list|(
name|exchange
argument_list|)
argument_list|)
return|;
block|}
DECL|method|evaluateAsStringSource (E exchange)
specifier|public
name|Object
name|evaluateAsStringSource
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|text
init|=
name|evaluateAsString
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringSource
argument_list|(
name|text
argument_list|)
return|;
block|}
DECL|method|evaluateAsBytesSource (E exchange)
specifier|public
name|Object
name|evaluateAsBytesSource
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|evaluateAsBytes
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|BytesSource
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|evaluateAsDOM (E exchange)
specifier|public
name|Node
name|evaluateAsDOM
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|getExpression
argument_list|()
operator|.
name|pull
argument_list|(
name|createDynamicContext
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|result
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getNode
argument_list|()
return|;
block|}
DECL|method|evaluateAsBytes (E exchange)
specifier|public
name|byte
index|[]
name|evaluateAsBytes
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|getExpression
argument_list|()
operator|.
name|pull
argument_list|(
name|createDynamicContext
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|result
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|buffer
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|bytes
return|;
block|}
DECL|method|evaluateAsString (E exchange)
specifier|public
name|String
name|evaluateAsString
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|getExpression
argument_list|()
operator|.
name|pull
argument_list|(
name|createDynamicContext
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|result
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|text
return|;
block|}
DECL|method|matches (E exchange)
specifier|public
name|boolean
name|matches
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
try|try
block|{
name|List
name|list
init|=
name|evaluateAsList
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found list: "
operator|+
name|list
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExpressionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Builder methods
comment|//-------------------------------------------------------------------------
DECL|method|xquery (final String queryText)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|xquery
parameter_list|(
specifier|final
name|String
name|queryText
parameter_list|)
block|{
return|return
operator|new
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|protected
name|XQueryExpression
name|createQueryExpression
parameter_list|(
name|StaticQueryContext
name|staticQueryContext
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|staticQueryContext
operator|.
name|compileQuery
argument_list|(
name|queryText
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|xquery (final Reader reader)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|xquery
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|protected
name|XQueryExpression
name|createQueryExpression
parameter_list|(
name|StaticQueryContext
name|staticQueryContext
parameter_list|)
throws|throws
name|XPathException
throws|,
name|IOException
block|{
return|return
name|staticQueryContext
operator|.
name|compileQuery
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|xquery (final InputStream in, final String characterSet)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|xquery
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|String
name|characterSet
parameter_list|)
block|{
return|return
operator|new
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|protected
name|XQueryExpression
name|createQueryExpression
parameter_list|(
name|StaticQueryContext
name|staticQueryContext
parameter_list|)
throws|throws
name|XPathException
throws|,
name|IOException
block|{
return|return
name|staticQueryContext
operator|.
name|compileQuery
argument_list|(
name|in
argument_list|,
name|characterSet
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|asBytes ()
specifier|public
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|asBytes
parameter_list|()
block|{
name|setResultsFormat
argument_list|(
name|ResultFormat
operator|.
name|Bytes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|asBytesSource ()
specifier|public
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|asBytesSource
parameter_list|()
block|{
name|setResultsFormat
argument_list|(
name|ResultFormat
operator|.
name|BytesSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|asDOM ()
specifier|public
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|asDOM
parameter_list|()
block|{
name|setResultsFormat
argument_list|(
name|ResultFormat
operator|.
name|DOM
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|asDOMSource ()
specifier|public
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|asDOMSource
parameter_list|()
block|{
name|setResultsFormat
argument_list|(
name|ResultFormat
operator|.
name|DOMSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|asList ()
specifier|public
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|asList
parameter_list|()
block|{
name|setResultsFormat
argument_list|(
name|ResultFormat
operator|.
name|List
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|asString ()
specifier|public
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|asString
parameter_list|()
block|{
name|setResultsFormat
argument_list|(
name|ResultFormat
operator|.
name|String
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|asStringSource ()
specifier|public
name|XQueryBuilder
argument_list|<
name|E
argument_list|>
name|asStringSource
parameter_list|()
block|{
name|setResultsFormat
argument_list|(
name|ResultFormat
operator|.
name|StringSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getExpression ()
specifier|public
name|XQueryExpression
name|getExpression
parameter_list|()
throws|throws
name|IOException
throws|,
name|XPathException
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
name|expression
operator|=
name|createQueryExpression
argument_list|(
name|getStaticQueryContext
argument_list|()
argument_list|)
expr_stmt|;
name|clearBuilderReferences
argument_list|()
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|configuration
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|setHostLanguage
argument_list|(
name|Configuration
operator|.
name|XQUERY
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (Configuration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getStaticQueryContext ()
specifier|public
name|StaticQueryContext
name|getStaticQueryContext
parameter_list|()
block|{
if|if
condition|(
name|staticQueryContext
operator|==
literal|null
condition|)
block|{
name|staticQueryContext
operator|=
operator|new
name|StaticQueryContext
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|staticQueryContext
return|;
block|}
DECL|method|setStaticQueryContext (StaticQueryContext staticQueryContext)
specifier|public
name|void
name|setStaticQueryContext
parameter_list|(
name|StaticQueryContext
name|staticQueryContext
parameter_list|)
block|{
name|this
operator|.
name|staticQueryContext
operator|=
name|staticQueryContext
expr_stmt|;
block|}
DECL|method|getParameters ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
DECL|method|setParameters (Map<String, Object> parameters)
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
DECL|method|getProperties ()
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties (Properties properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|getResultsFormat ()
specifier|public
name|ResultFormat
name|getResultsFormat
parameter_list|()
block|{
return|return
name|resultsFormat
return|;
block|}
DECL|method|setResultsFormat (ResultFormat resultsFormat)
specifier|public
name|void
name|setResultsFormat
parameter_list|(
name|ResultFormat
name|resultsFormat
parameter_list|)
block|{
name|this
operator|.
name|resultsFormat
operator|=
name|resultsFormat
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * A factory method to create the XQuery expression      */
DECL|method|createQueryExpression (StaticQueryContext staticQueryContext)
specifier|protected
specifier|abstract
name|XQueryExpression
name|createQueryExpression
parameter_list|(
name|StaticQueryContext
name|staticQueryContext
parameter_list|)
throws|throws
name|XPathException
throws|,
name|IOException
function_decl|;
comment|/**      * Creates a dynamic context for the given exchange      */
DECL|method|createDynamicContext (E exchange)
specifier|protected
name|DynamicQueryContext
name|createDynamicContext
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|DynamicQueryContext
name|dynamicQueryContext
init|=
operator|new
name|DynamicQueryContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
name|source
operator|=
name|converter
operator|.
name|toSource
argument_list|(
name|converter
operator|.
name|createDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DocumentInfo
name|doc
init|=
name|getStaticQueryContext
argument_list|()
operator|.
name|buildDocument
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|dynamicQueryContext
operator|.
name|setContextItem
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|configureQuery
argument_list|(
name|dynamicQueryContext
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
name|dynamicQueryContext
return|;
block|}
comment|/**      * Configures the dynamic context with exchange specific parameters      *      * @param dynamicQueryContext      * @param exchange      * @throws Exception      */
DECL|method|configureQuery (DynamicQueryContext dynamicQueryContext, Exchange exchange)
specifier|protected
name|void
name|configureQuery
parameter_list|(
name|DynamicQueryContext
name|dynamicQueryContext
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|addParameters
argument_list|(
name|dynamicQueryContext
argument_list|,
name|exchange
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|addParameters
argument_list|(
name|dynamicQueryContext
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|addParameters
argument_list|(
name|dynamicQueryContext
argument_list|,
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|dynamicQueryContext
operator|.
name|setParameter
argument_list|(
literal|"exchange"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|dynamicQueryContext
operator|.
name|setParameter
argument_list|(
literal|"in"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|dynamicQueryContext
operator|.
name|setParameter
argument_list|(
literal|"out"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addParameters (DynamicQueryContext dynamicQueryContext, Map<String, Object> map)
specifier|protected
name|void
name|addParameters
parameter_list|(
name|DynamicQueryContext
name|dynamicQueryContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propertyEntries
init|=
name|map
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|propertyEntries
control|)
block|{
name|dynamicQueryContext
operator|.
name|setParameter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * To avoid keeping around any unnecessary objects after the expresion has been created lets      * nullify references here      */
DECL|method|clearBuilderReferences ()
specifier|protected
name|void
name|clearBuilderReferences
parameter_list|()
block|{
name|staticQueryContext
operator|=
literal|null
expr_stmt|;
name|configuration
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

