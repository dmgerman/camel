begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.eclipse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|eclipse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|text
operator|.
name|rules
operator|.
name|IPredicateRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|text
operator|.
name|rules
operator|.
name|IToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|text
operator|.
name|rules
operator|.
name|MultiLineRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|text
operator|.
name|rules
operator|.
name|SingleLineRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openarchitectureware
operator|.
name|xtext
operator|.
name|editor
operator|.
name|scanning
operator|.
name|AbstractPartitionScanner
import|;
end_import

begin_class
DECL|class|GeneratedPartitionScanner
specifier|public
class|class
name|GeneratedPartitionScanner
extends|extends
name|AbstractPartitionScanner
block|{
annotation|@
name|Override
DECL|method|getRules ()
specifier|public
name|List
argument_list|<
name|IPredicateRule
argument_list|>
name|getRules
parameter_list|()
block|{
name|List
argument_list|<
name|IPredicateRule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|IPredicateRule
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|MultiLineRule
argument_list|(
literal|"/*"
argument_list|,
literal|"*/"
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|SingleLineRule
argument_list|(
literal|"//"
argument_list|,
literal|""
argument_list|,
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|MultiLineRule
argument_list|(
literal|"\""
argument_list|,
literal|"\""
argument_list|,
name|string
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|MultiLineRule
argument_list|(
literal|"'"
argument_list|,
literal|"'"
argument_list|,
name|string
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rules
return|;
block|}
DECL|method|getSingleLineCommentToken (String string)
specifier|protected
name|IToken
name|getSingleLineCommentToken
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|comment
return|;
block|}
DECL|method|getStringToken (String start, String end)
specifier|protected
name|IToken
name|getStringToken
parameter_list|(
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|)
block|{
return|return
name|string
return|;
block|}
block|}
end_class

end_unit

