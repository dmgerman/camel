begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DeadLetterChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|SendProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 520164 $  */
end_comment

begin_class
DECL|class|SpringXMLExtensionTest
specifier|public
class|class
name|SpringXMLExtensionTest
extends|extends
name|TestCase
block|{
DECL|field|ctx
specifier|private
name|ClassPathXmlApplicationContext
name|ctx
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ctx
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/spring/spring_xml_extension_test.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleRoute ()
specifier|public
name|void
name|testSimpleRoute
parameter_list|()
block|{
name|RouteBuilder
name|builder
init|=
operator|(
name|RouteBuilder
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"testSimpleRoute"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|routeMap
init|=
name|builder
operator|.
name|getRouteMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
argument_list|>
name|routes
init|=
name|routeMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number routes created"
argument_list|,
literal|1
argument_list|,
name|routes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|route
range|:
name|routes
control|)
block|{
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|key
init|=
name|route
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"From endpoint"
argument_list|,
literal|"queue:a"
argument_list|,
name|key
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
name|getProcessorWithoutErrorHandler
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Processor should be a SendProcessor but was: "
operator|+
name|processor
operator|+
literal|" with type: "
operator|+
name|processor
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|processor
operator|instanceof
name|SendProcessor
argument_list|)
expr_stmt|;
name|SendProcessor
name|sendProcessor
init|=
operator|(
name|SendProcessor
operator|)
name|processor
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Endpoint URI"
argument_list|,
literal|"queue:b"
argument_list|,
name|sendProcessor
operator|.
name|getDestination
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * By default routes should be wrapped in the {@link DeadLetterChannel} so lets unwrap that and return the actual processor      */
DECL|method|getProcessorWithoutErrorHandler (Map.Entry<Endpoint<Exchange>, Processor<Exchange>> route)
specifier|protected
name|Processor
argument_list|<
name|Exchange
argument_list|>
name|getProcessorWithoutErrorHandler
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|route
parameter_list|)
block|{
name|Processor
argument_list|<
name|Exchange
argument_list|>
name|processor
init|=
name|route
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|unwrapErrorHandler
argument_list|(
name|processor
argument_list|)
return|;
block|}
DECL|method|unwrapErrorHandler (Processor<Exchange> processor)
specifier|protected
name|Processor
argument_list|<
name|Exchange
argument_list|>
name|unwrapErrorHandler
parameter_list|(
name|Processor
argument_list|<
name|Exchange
argument_list|>
name|processor
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Processor should be a DeadLetterChannel but was: "
operator|+
name|processor
operator|+
literal|" with type: "
operator|+
name|processor
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|processor
operator|instanceof
name|DeadLetterChannel
argument_list|)
expr_stmt|;
name|DeadLetterChannel
name|deadLetter
init|=
operator|(
name|DeadLetterChannel
operator|)
name|processor
decl_stmt|;
return|return
name|deadLetter
operator|.
name|getOutput
argument_list|()
return|;
block|}
DECL|method|assertEndpointUri (Endpoint<Exchange> endpoint, String uri)
specifier|protected
name|void
name|assertEndpointUri
parameter_list|(
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|endpoint
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Endoint uri for: "
operator|+
name|endpoint
argument_list|,
name|uri
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

