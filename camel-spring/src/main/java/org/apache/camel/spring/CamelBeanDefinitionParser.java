begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|Fluent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|FluentArg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|RuntimeBeanReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|AbstractBeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|AbstractBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|xml
operator|.
name|DomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
DECL|class|CamelBeanDefinitionParser
specifier|public
class|class
name|CamelBeanDefinitionParser
extends|extends
name|AbstractBeanDefinitionParser
block|{
DECL|method|parseInternal (Element element, ParserContext parserContext)
specifier|protected
name|AbstractBeanDefinition
name|parseInternal
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
block|{
name|BeanDefinitionBuilder
name|factory
init|=
name|BeanDefinitionBuilder
operator|.
name|rootBeanDefinition
argument_list|(
name|RouteBuilderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
name|childElements
init|=
name|DomUtils
operator|.
name|getChildElementsByTagName
argument_list|(
name|element
argument_list|,
literal|"route"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|RouteBuilderStatement
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteBuilderStatement
argument_list|>
argument_list|(
name|childElements
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childElements
operator|!=
literal|null
operator|&&
name|childElements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childElements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Element
name|routeElement
init|=
operator|(
name|Element
operator|)
name|childElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RouteBuilderStatement
name|def
init|=
name|parseRouteElement
argument_list|(
name|routeElement
argument_list|)
decl_stmt|;
name|routes
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
block|}
name|factory
operator|.
name|addPropertyValue
argument_list|(
literal|"routes"
argument_list|,
name|routes
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|getBeanDefinition
argument_list|()
return|;
block|}
comment|/**  	 * Use reflection to figure out what is the valid next element. 	 *  	 * @param routeElement 	 * @return 	 */
DECL|method|parseRouteElement (Element element)
specifier|private
name|RouteBuilderStatement
name|parseRouteElement
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|RouteBuilderStatement
name|rc
init|=
operator|new
name|RouteBuilderStatement
argument_list|()
decl_stmt|;
name|Class
name|currentBuilder
init|=
name|RouteBuilder
operator|.
name|class
decl_stmt|;
name|NodeList
name|childElements
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|RouteBuilderAction
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteBuilderAction
argument_list|>
argument_list|(
name|childElements
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childElements
operator|!=
literal|null
operator|&&
name|childElements
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|previousElement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childElements
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Node
name|node
init|=
name|childElements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|currentBuilder
operator|=
name|parseAction
argument_list|(
name|currentBuilder
argument_list|,
name|actions
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|,
name|previousElement
argument_list|)
expr_stmt|;
name|previousElement
operator|=
operator|(
name|Element
operator|)
name|node
expr_stmt|;
block|}
block|}
block|}
name|rc
operator|.
name|setActions
argument_list|(
name|actions
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|method|parseAction (Class currentBuilder, ArrayList<RouteBuilderAction> actions, Element element, Element previousElement)
specifier|private
name|Class
name|parseAction
parameter_list|(
name|Class
name|currentBuilder
parameter_list|,
name|ArrayList
argument_list|<
name|RouteBuilderAction
argument_list|>
name|actions
parameter_list|,
name|Element
name|element
parameter_list|,
name|Element
name|previousElement
parameter_list|)
block|{
name|String
name|actionName
init|=
name|element
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
comment|// Get a list of method names that match the action.
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
name|methods
init|=
name|findFluentMethodsWithName
argument_list|(
name|currentBuilder
argument_list|,
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalRouteException
argument_list|(
name|actionName
argument_list|,
name|previousElement
operator|==
literal|null
condition|?
literal|null
else|:
name|previousElement
operator|.
name|getLocalName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Pick the best method out of the list.  Sort by argument length.  Pick first longest match.
name|Collections
operator|.
name|sort
argument_list|(
name|methods
argument_list|,
operator|new
name|Comparator
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MethodInfo
name|m1
parameter_list|,
name|MethodInfo
name|m2
parameter_list|)
block|{
return|return
name|m1
operator|.
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|-
name|m2
operator|.
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Build an ordered list of the element attributes.
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
name|getAttributes
argument_list|(
name|element
argument_list|)
decl_stmt|;
comment|// Do we have enough parameters for this action.
name|MethodInfo
name|match
init|=
name|findBestMethod
argument_list|(
name|methods
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalRouteException
argument_list|(
name|actionName
argument_list|,
name|previousElement
operator|==
literal|null
condition|?
literal|null
else|:
name|previousElement
operator|.
name|getLocalName
argument_list|()
argument_list|)
throw|;
name|actions
operator|.
name|add
argument_list|(
operator|new
name|RouteBuilderAction
argument_list|(
name|match
argument_list|,
name|attributes
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|match
operator|.
name|method
operator|.
name|getReturnType
argument_list|()
return|;
block|}
DECL|method|findBestMethod (ArrayList<MethodInfo> methods, HashMap<String, Object> attributes)
specifier|private
name|MethodInfo
name|findBestMethod
parameter_list|(
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
name|methods
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributeNames
init|=
name|attributes
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodInfo
name|method
range|:
name|methods
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|parameterNames
init|=
name|method
operator|.
name|parameters
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// If all the parameters are specified as parameters.
if|if
condition|(
name|attributeNames
operator|.
name|size
argument_list|()
operator|==
name|parameterNames
operator|.
name|size
argument_list|()
operator|&&
name|attributeNames
operator|.
name|containsAll
argument_list|(
name|parameterNames
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getAttributes (Element element)
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAttributes
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|NamedNodeMap
name|childNodes
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|node
decl_stmt|;
name|String
name|str
init|=
name|attr
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|str
decl_stmt|;
comment|// If the value starts with # then it's a bean reference
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Support using ## to escape the bean reference feature.
if|if
condition|(
operator|!
name|str
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|RuntimeBeanReference
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
name|attributes
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributes
return|;
block|}
comment|/** 	 * Finds all the methods on the clazz that match the name and which have the 	 * {@see Fluent} annotation and whoes parameters have the {@see FluentArg} annotation. 	 *   	 * @param clazz 	 * @param name 	 * @return 	 */
DECL|method|findFluentMethodsWithName (Class clazz, String name)
specifier|private
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
name|findFluentMethodsWithName
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
name|rc
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|method
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|Fluent
operator|.
name|class
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Annotation
argument_list|>
name|l
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|l
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameters
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parameters
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameter
init|=
name|parameters
index|[
name|j
index|]
decl_stmt|;
name|FluentArg
name|annotation
init|=
name|getParameterAnnotation
argument_list|(
name|FluentArg
operator|.
name|class
argument_list|,
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|annotation
operator|.
name|value
argument_list|()
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// If all the parameters were annotated...
if|if
condition|(
name|parameters
operator|.
name|length
operator|==
name|map
operator|.
name|size
argument_list|()
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
operator|new
name|MethodInfo
argument_list|(
name|method
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
DECL|method|getParameterAnnotation (Class<T> annotationClass, Method method, int index)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getParameterAnnotation
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|annotationClass
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|Annotation
index|[]
name|annotations
init|=
name|method
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|index
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|annotationClass
operator|.
name|isAssignableFrom
argument_list|(
name|annotations
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|annotations
index|[
name|i
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

