begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|SimpleTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|RuntimeBeanReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|BuilderAction
specifier|public
class|class
name|BuilderAction
block|{
DECL|field|methodInfo
specifier|private
specifier|final
name|MethodInfo
name|methodInfo
decl_stmt|;
DECL|field|parameterValues
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameterValues
decl_stmt|;
DECL|method|BuilderAction (MethodInfo methodInfo, HashMap<String, Object> parameterValues)
specifier|public
name|BuilderAction
parameter_list|(
name|MethodInfo
name|methodInfo
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameterValues
parameter_list|)
block|{
name|this
operator|.
name|methodInfo
operator|=
name|methodInfo
expr_stmt|;
name|this
operator|.
name|parameterValues
operator|=
name|parameterValues
expr_stmt|;
block|}
DECL|method|invoke (BeanFactory beanFactory, Object rootBuilder, Object contextBuilder)
specifier|public
name|Object
name|invoke
parameter_list|(
name|BeanFactory
name|beanFactory
parameter_list|,
name|Object
name|rootBuilder
parameter_list|,
name|Object
name|contextBuilder
parameter_list|)
block|{
name|SimpleTypeConverter
name|converter
init|=
operator|new
name|SimpleTypeConverter
argument_list|()
decl_stmt|;
name|Object
name|args
index|[]
init|=
operator|new
name|Object
index|[
name|methodInfo
operator|.
name|parameters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|entry
range|:
name|methodInfo
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|paramName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Class
name|paramClass
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|parameterValues
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|replaceBeanReferences
argument_list|(
name|beanFactory
argument_list|,
name|rootBuilder
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|args
index|[
name|pos
index|]
operator|=
name|converter
operator|.
name|convertIfNecessary
argument_list|(
name|value
argument_list|,
name|paramClass
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
return|return
name|methodInfo
operator|.
name|method
operator|.
name|invoke
argument_list|(
name|contextBuilder
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|replaceBeanReferences (BeanFactory beanFactory, Object rootBuilder, Object value)
specifier|protected
name|Object
name|replaceBeanReferences
parameter_list|(
name|BeanFactory
name|beanFactory
parameter_list|,
name|Object
name|rootBuilder
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// TODO why not using instanceof??
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|==
name|RuntimeBeanReference
operator|.
name|class
condition|)
block|{
name|String
name|beanName
init|=
operator|(
operator|(
name|RuntimeBeanReference
operator|)
name|value
operator|)
operator|.
name|getBeanName
argument_list|()
decl_stmt|;
name|value
operator|=
name|beanFactory
operator|.
name|getBean
argument_list|(
name|beanName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|==
name|BuilderStatement
operator|.
name|class
condition|)
block|{
name|BuilderStatement
name|bs
init|=
operator|(
name|BuilderStatement
operator|)
name|value
decl_stmt|;
name|value
operator|=
name|bs
operator|.
name|create
argument_list|(
name|beanFactory
argument_list|,
name|rootBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|list
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|replaceBeanReferences
argument_list|(
name|beanFactory
argument_list|,
name|rootBuilder
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|methodInfo
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getMethodInfo ()
specifier|public
name|MethodInfo
name|getMethodInfo
parameter_list|()
block|{
return|return
name|methodInfo
return|;
block|}
block|}
end_class

end_unit

