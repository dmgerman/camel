begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|aopalliance
operator|.
name|intercept
operator|.
name|MethodInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Represents the metadata about a bean type created via a combination of  * introspection and annotations together with some useful sensible defaults  *  * @version $Revision: $  */
end_comment

begin_class
DECL|class|BeanInfo
specifier|public
class|class
name|BeanInfo
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|type
specifier|private
name|Class
name|type
decl_stmt|;
DECL|field|strategy
specifier|private
name|MethodInvocationStrategy
name|strategy
decl_stmt|;
DECL|field|operations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MethodInfo
argument_list|>
name|operations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|defaultExpression
specifier|private
name|MethodInfo
name|defaultExpression
decl_stmt|;
DECL|method|BeanInfo (Class type, MethodInvocationStrategy strategy)
specifier|public
name|BeanInfo
parameter_list|(
name|Class
name|type
parameter_list|,
name|MethodInvocationStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|Class
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|introspect ()
specifier|public
name|void
name|introspect
parameter_list|()
block|{
name|introspect
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|operations
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|methodInfos
init|=
name|operations
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodInfo
name|methodInfo
range|:
name|methodInfos
control|)
block|{
name|defaultExpression
operator|=
name|methodInfo
expr_stmt|;
block|}
block|}
block|}
DECL|method|createInvocation (Method method, Object pojo, Exchange messageExchange)
specifier|public
name|MethodInvocation
name|createInvocation
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|Exchange
name|messageExchange
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
name|MethodInfo
name|methodInfo
init|=
name|introspect
argument_list|(
name|type
argument_list|,
name|method
argument_list|)
decl_stmt|;
return|return
name|methodInfo
operator|.
name|createMethodInvocation
argument_list|(
name|pojo
argument_list|,
name|messageExchange
argument_list|)
return|;
block|}
DECL|method|createInvocation (Object pojo, Exchange messageExchange)
specifier|public
name|MethodInvocation
name|createInvocation
parameter_list|(
name|Object
name|pojo
parameter_list|,
name|Exchange
name|messageExchange
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
name|MethodInfo
name|methodInfo
init|=
literal|null
decl_stmt|;
comment|// TODO use some other mechanism?
name|String
name|name
init|=
name|messageExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"org.apache.camel.MethodName"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|methodInfo
operator|=
name|operations
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|methodInfo
operator|==
literal|null
condition|)
block|{
name|methodInfo
operator|=
name|defaultExpression
expr_stmt|;
block|}
if|if
condition|(
name|methodInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|methodInfo
operator|.
name|createMethodInvocation
argument_list|(
name|pojo
argument_list|,
name|messageExchange
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|introspect (Class clazz)
specifier|protected
name|void
name|introspect
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|introspect
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
name|Class
name|superclass
init|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
operator|&&
operator|!
name|superclass
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
name|introspect
argument_list|(
name|superclass
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|introspect (Class clazz, Method method)
specifier|protected
name|MethodInfo
name|introspect
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Class
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|parameterAnnotations
init|=
name|method
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
specifier|final
name|Expression
index|[]
name|parameterExpressions
init|=
operator|new
name|Expression
index|[
name|parameterTypes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
name|parameterType
init|=
name|parameterTypes
index|[
name|i
index|]
decl_stmt|;
name|Expression
name|expression
init|=
name|createParameterUnmarshalExpression
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No expression available for method: "
operator|+
name|method
operator|.
name|toString
argument_list|()
operator|+
literal|" parameter: "
operator|+
name|i
operator|+
literal|" so ignoring method"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// lets assume its the body
name|expression
operator|=
name|ExpressionBuilder
operator|.
name|bodyExpression
argument_list|(
name|parameterType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|parameterExpressions
index|[
name|i
index|]
operator|=
name|expression
expr_stmt|;
block|}
comment|// now lets add the method to the repository
name|String
name|opName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/*          TODO allow an annotation to expose the operation name to use          if (method.getAnnotation(Operation.class) != null) {             String name = method.getAnnotation(Operation.class).name();             if (name != null&& name.length()> 0) {                 opName = name;             }         }         */
name|Expression
name|parametersExpression
init|=
name|createMethodParametersExpression
argument_list|(
name|parameterExpressions
argument_list|)
decl_stmt|;
name|MethodInfo
name|methodInfo
init|=
operator|new
name|MethodInfo
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|,
name|parametersExpression
argument_list|)
decl_stmt|;
name|operations
operator|.
name|put
argument_list|(
name|opName
argument_list|,
name|methodInfo
argument_list|)
expr_stmt|;
return|return
name|methodInfo
return|;
block|}
DECL|method|createMethodParametersExpression (final Expression[] parameterExpressions)
specifier|protected
name|Expression
name|createMethodParametersExpression
parameter_list|(
specifier|final
name|Expression
index|[]
name|parameterExpressions
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
index|[]
name|answer
init|=
operator|new
name|Object
index|[
name|parameterExpressions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterExpressions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|parameterExpression
init|=
name|parameterExpressions
index|[
name|i
index|]
decl_stmt|;
name|answer
index|[
name|i
index|]
operator|=
name|parameterExpression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"parametersExpression"
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|parameterExpressions
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Creates an expression for the given parameter type if the parameter can be mapped      * automatically or null if the parameter cannot be mapped due to unsufficient      * annotations or not fitting with the default type conventions.      */
DECL|method|createParameterUnmarshalExpression (Class clazz, Method method, Class parameterType, Annotation[] parameterAnnotation)
specifier|protected
name|Expression
name|createParameterUnmarshalExpression
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|,
name|Class
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotation
parameter_list|)
block|{
comment|// TODO look for a parameter annotation that converts into an expression
for|for
control|(
name|Annotation
name|annotation
range|:
name|parameterAnnotation
control|)
block|{
name|Expression
name|answer
init|=
name|createParameterUnmarshalExpressionForAnnotation
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|,
name|parameterType
argument_list|,
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
return|return
name|strategy
operator|.
name|getDefaultParameterTypeExpression
argument_list|(
name|parameterType
argument_list|)
return|;
block|}
DECL|method|createParameterUnmarshalExpressionForAnnotation (Class clazz, Method method, Class parameterType, Annotation annotation)
specifier|protected
name|Expression
name|createParameterUnmarshalExpressionForAnnotation
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|,
name|Class
name|parameterType
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|Property
condition|)
block|{
name|Property
name|propertyAnnotation
init|=
operator|(
name|Property
operator|)
name|annotation
decl_stmt|;
return|return
name|ExpressionBuilder
operator|.
name|propertyExpression
argument_list|(
name|propertyAnnotation
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|Header
condition|)
block|{
name|Header
name|headerAnnotation
init|=
operator|(
name|Header
operator|)
name|annotation
decl_stmt|;
return|return
name|ExpressionBuilder
operator|.
name|headerExpression
argument_list|(
name|headerAnnotation
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|Body
condition|)
block|{
name|Body
name|content
init|=
operator|(
name|Body
operator|)
name|annotation
decl_stmt|;
return|return
name|ExpressionBuilder
operator|.
name|bodyExpression
argument_list|(
name|parameterType
argument_list|)
return|;
comment|// TODO allow annotations to be used to create expressions?
comment|/*         } else if (annotation instanceof XPath) {             XPath xpathAnnotation = (XPath) annotation;             return new JAXPStringXPathExpression(xpathAnnotation.xpath());         } */
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

