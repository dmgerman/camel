begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactoryAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_comment
comment|/**  * A {@link FactoryBean} which creates a RouteBuilder by parsing an XML file  *  * @version $Revision: 521369 $  */
end_comment

begin_class
DECL|class|RouteBuilderFactory
specifier|public
class|class
name|RouteBuilderFactory
implements|implements
name|FactoryBean
implements|,
name|BeanFactoryAware
block|{
DECL|field|routes
specifier|private
name|ArrayList
argument_list|<
name|BuilderStatement
argument_list|>
name|routes
decl_stmt|;
DECL|field|singleton
specifier|private
name|boolean
name|singleton
decl_stmt|;
DECL|field|beanFactory
specifier|private
name|BeanFactory
name|beanFactory
decl_stmt|;
DECL|class|SpringRouteBuilder
class|class
name|SpringRouteBuilder
extends|extends
name|RouteBuilder
block|{
DECL|field|routes
specifier|private
name|ArrayList
argument_list|<
name|BuilderStatement
argument_list|>
name|routes
decl_stmt|;
DECL|field|beanFactory
specifier|private
name|BeanFactory
name|beanFactory
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
for|for
control|(
name|BuilderStatement
name|routeFactory
range|:
name|routes
control|)
block|{
name|routeFactory
operator|.
name|create
argument_list|(
name|beanFactory
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRoutes ()
specifier|public
name|ArrayList
argument_list|<
name|BuilderStatement
argument_list|>
name|getRoutes
parameter_list|()
block|{
return|return
name|routes
return|;
block|}
DECL|method|setRoutes (ArrayList<BuilderStatement> routes)
specifier|public
name|void
name|setRoutes
parameter_list|(
name|ArrayList
argument_list|<
name|BuilderStatement
argument_list|>
name|routes
parameter_list|)
block|{
name|this
operator|.
name|routes
operator|=
name|routes
expr_stmt|;
block|}
DECL|method|setBeanFactory (BeanFactory beanFactory)
specifier|public
name|void
name|setBeanFactory
parameter_list|(
name|BeanFactory
name|beanFactory
parameter_list|)
block|{
name|this
operator|.
name|beanFactory
operator|=
name|beanFactory
expr_stmt|;
block|}
block|}
DECL|method|getObject ()
specifier|public
name|Object
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringRouteBuilder
name|builder
init|=
operator|new
name|SpringRouteBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBeanFactory
argument_list|(
name|beanFactory
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRoutes
argument_list|(
name|routes
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|getObjectType ()
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|SpringRouteBuilder
operator|.
name|class
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
name|singleton
return|;
block|}
DECL|method|setSingleton (boolean singleton)
specifier|public
name|void
name|setSingleton
parameter_list|(
name|boolean
name|singleton
parameter_list|)
block|{
name|this
operator|.
name|singleton
operator|=
name|singleton
expr_stmt|;
block|}
DECL|method|getRoutes ()
specifier|public
name|ArrayList
argument_list|<
name|BuilderStatement
argument_list|>
name|getRoutes
parameter_list|()
block|{
return|return
name|routes
return|;
block|}
DECL|method|setRoutes (ArrayList<BuilderStatement> routes)
specifier|public
name|void
name|setRoutes
parameter_list|(
name|ArrayList
argument_list|<
name|BuilderStatement
argument_list|>
name|routes
parameter_list|)
block|{
name|this
operator|.
name|routes
operator|=
name|routes
expr_stmt|;
block|}
DECL|method|setBeanFactory (BeanFactory beanFactory)
specifier|public
name|void
name|setBeanFactory
parameter_list|(
name|BeanFactory
name|beanFactory
parameter_list|)
throws|throws
name|BeansException
block|{
name|this
operator|.
name|beanFactory
operator|=
name|beanFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

