begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|DefaultCamelCatalog
import|;
end_import

begin_class
DECL|class|DefaultCamelConnectorCatalog
specifier|public
class|class
name|DefaultCamelConnectorCatalog
implements|implements
name|CamelConnectorCatalog
block|{
DECL|field|camelCatalog
specifier|private
specifier|final
name|CamelCatalog
name|camelCatalog
init|=
operator|new
name|DefaultCamelCatalog
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|dataStore
specifier|private
name|ConnectorDataStore
name|dataStore
init|=
operator|new
name|MemoryConnectorDataStore
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setConnectorDataStore (ConnectorDataStore dataStore)
specifier|public
name|void
name|setConnectorDataStore
parameter_list|(
name|ConnectorDataStore
name|dataStore
parameter_list|)
block|{
name|this
operator|.
name|dataStore
operator|=
name|dataStore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasConnector (String groupId, String artifactId, String version)
specifier|public
name|boolean
name|hasConnector
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|ConnectorDto
name|dto
init|=
operator|new
name|ConnectorDto
argument_list|()
decl_stmt|;
name|dto
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|dataStore
operator|.
name|hasConnector
argument_list|(
name|dto
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addConnector (String groupId, String artifactId, String version, String name, String scheme, String javaType, String description, String labels, String connectorJson, String connectorSchemaJson, String componentSchemaJson)
specifier|public
name|void
name|addConnector
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|scheme
parameter_list|,
name|String
name|javaType
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|labels
parameter_list|,
name|String
name|connectorJson
parameter_list|,
name|String
name|connectorSchemaJson
parameter_list|,
name|String
name|componentSchemaJson
parameter_list|)
block|{
name|ConnectorDto
name|dto
init|=
operator|new
name|ConnectorDto
argument_list|()
decl_stmt|;
name|dto
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setJavaType
argument_list|(
name|javaType
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|addConnector
argument_list|(
name|dto
argument_list|,
name|connectorJson
argument_list|,
name|connectorSchemaJson
argument_list|,
name|componentSchemaJson
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeConnector (String groupId, String artifactId, String version)
specifier|public
name|void
name|removeConnector
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|ConnectorDto
name|dto
init|=
operator|new
name|ConnectorDto
argument_list|()
decl_stmt|;
name|dto
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|removeConnector
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findConnector (boolean latestVersionOnly)
specifier|public
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|findConnector
parameter_list|(
name|boolean
name|latestVersionOnly
parameter_list|)
block|{
return|return
name|findConnector
argument_list|(
literal|null
argument_list|,
name|latestVersionOnly
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findConnector (String filter, boolean latestVersionOnly)
specifier|public
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|findConnector
parameter_list|(
name|String
name|filter
parameter_list|,
name|boolean
name|latestVersionOnly
parameter_list|)
block|{
return|return
name|dataStore
operator|.
name|findConnector
argument_list|(
name|filter
argument_list|,
name|latestVersionOnly
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|connectorJSon (String groupId, String artifactId, String version)
specifier|public
name|String
name|connectorJSon
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|ConnectorDto
name|dto
init|=
operator|new
name|ConnectorDto
argument_list|()
decl_stmt|;
name|dto
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|dataStore
operator|.
name|connectorJSon
argument_list|(
name|dto
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|connectorSchemaJSon (String groupId, String artifactId, String version)
specifier|public
name|String
name|connectorSchemaJSon
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|ConnectorDto
name|dto
init|=
operator|new
name|ConnectorDto
argument_list|()
decl_stmt|;
name|dto
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|dataStore
operator|.
name|connectorSchemaJSon
argument_list|(
name|dto
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|componentSchemaJSon (String groupId, String artifactId, String version)
specifier|public
name|String
name|componentSchemaJSon
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|ConnectorDto
name|dto
init|=
operator|new
name|ConnectorDto
argument_list|()
decl_stmt|;
name|dto
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setArtifactId
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|dto
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|dataStore
operator|.
name|componentSchemaJSon
argument_list|(
name|dto
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|asEndpointUri (String scheme, String json, boolean encode)
specifier|public
name|String
name|asEndpointUri
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|json
parameter_list|,
name|boolean
name|encode
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// delegate to use CamelCatalog
name|Optional
argument_list|<
name|ConnectorDto
argument_list|>
name|found
init|=
name|dataStore
operator|.
name|findConnector
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|d
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ConnectorDto
name|dto
init|=
name|found
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// need to add custom connector as component to the catalog before we can build the uri
name|String
name|javaType
init|=
name|dto
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|String
name|componentJson
init|=
name|componentSchemaJSon
argument_list|(
name|dto
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dto
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dto
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|camelCatalog
operator|.
name|addComponent
argument_list|(
name|scheme
argument_list|,
name|javaType
argument_list|,
name|componentJson
argument_list|)
expr_stmt|;
return|return
name|camelCatalog
operator|.
name|asEndpointUri
argument_list|(
name|scheme
argument_list|,
name|json
argument_list|,
name|encode
argument_list|)
return|;
block|}
comment|// no connector with that scheme
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|asEndpointUriXml (String scheme, String json, boolean encode)
specifier|public
name|String
name|asEndpointUriXml
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|json
parameter_list|,
name|boolean
name|encode
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// delegate to use CamelCatalog
name|Optional
argument_list|<
name|ConnectorDto
argument_list|>
name|found
init|=
name|dataStore
operator|.
name|findConnector
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|d
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ConnectorDto
name|dto
init|=
name|found
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// need to add custom connector as component to the catalog before we can build the uri
name|String
name|javaType
init|=
name|dto
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|String
name|componentJson
init|=
name|componentSchemaJSon
argument_list|(
name|dto
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dto
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dto
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|camelCatalog
operator|.
name|addComponent
argument_list|(
name|scheme
argument_list|,
name|javaType
argument_list|,
name|componentJson
argument_list|)
expr_stmt|;
return|return
name|camelCatalog
operator|.
name|asEndpointUriXml
argument_list|(
name|scheme
argument_list|,
name|json
argument_list|,
name|encode
argument_list|)
return|;
block|}
comment|// no connector with that scheme
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|asEndpointUri (String scheme, Map<String, String> properties, boolean encode)
specifier|public
name|String
name|asEndpointUri
parameter_list|(
name|String
name|scheme
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|boolean
name|encode
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// delegate to use CamelCatalog
name|Optional
argument_list|<
name|ConnectorDto
argument_list|>
name|found
init|=
name|dataStore
operator|.
name|findConnector
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|d
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ConnectorDto
name|dto
init|=
name|found
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// need to add custom connector as component to the catalog before we can build the uri
name|String
name|javaType
init|=
name|dto
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|String
name|componentJson
init|=
name|componentSchemaJSon
argument_list|(
name|dto
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dto
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dto
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|camelCatalog
operator|.
name|addComponent
argument_list|(
name|scheme
argument_list|,
name|javaType
argument_list|,
name|componentJson
argument_list|)
expr_stmt|;
return|return
name|camelCatalog
operator|.
name|asEndpointUri
argument_list|(
name|scheme
argument_list|,
name|properties
argument_list|,
name|encode
argument_list|)
return|;
block|}
comment|// no connector with that scheme
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|asEndpointUriXml (String scheme, Map<String, String> properties, boolean encode)
specifier|public
name|String
name|asEndpointUriXml
parameter_list|(
name|String
name|scheme
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|boolean
name|encode
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// delegate to use CamelCatalog
name|Optional
argument_list|<
name|ConnectorDto
argument_list|>
name|found
init|=
name|dataStore
operator|.
name|findConnector
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|d
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ConnectorDto
name|dto
init|=
name|found
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// need to add custom connector as component to the catalog before we can build the uri
name|String
name|javaType
init|=
name|dto
operator|.
name|getJavaType
argument_list|()
decl_stmt|;
name|String
name|componentJson
init|=
name|componentSchemaJSon
argument_list|(
name|dto
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dto
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dto
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|camelCatalog
operator|.
name|addComponent
argument_list|(
name|scheme
argument_list|,
name|javaType
argument_list|,
name|componentJson
argument_list|)
expr_stmt|;
return|return
name|camelCatalog
operator|.
name|asEndpointUriXml
argument_list|(
name|scheme
argument_list|,
name|properties
argument_list|,
name|encode
argument_list|)
return|;
block|}
comment|// no connector with that scheme
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

