begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium PostgresSQL endpoint which is used to capture changes  * in PostgresSQL database so that that applications can see those changes and  * respond to them.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.debezium-postgres"
argument_list|)
DECL|class|DebeziumPostgresComponentConfiguration
specifier|public
class|class
name|DebeziumPostgresComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the debezium-postgres component.      * This is enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * Allow pre-configured Configurations to be set.      */
DECL|field|configuration
specifier|private
name|PostgresConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|PostgresConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( PostgresConnectorEmbeddedDebeziumConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|PostgresConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|class|PostgresConnectorEmbeddedDebeziumConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|PostgresConnectorEmbeddedDebeziumConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|PostgresConnectorEmbeddedDebeziumConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|snapshotCustomClass
specifier|private
name|String
name|snapshotCustomClass
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|maxQueueSize
specifier|private
name|Integer
name|maxQueueSize
init|=
literal|8192
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|slotName
specifier|private
name|String
name|slotName
init|=
literal|"debezium"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|hstoreHandlingMode
specifier|private
name|String
name|hstoreHandlingMode
init|=
literal|"json"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|columnBlacklist
specifier|private
name|String
name|columnBlacklist
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|snapshotDelayMs
specifier|private
name|Long
name|snapshotDelayMs
init|=
literal|0L
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|schemaBlacklist
specifier|private
name|String
name|schemaBlacklist
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|tableBlacklist
specifier|private
name|String
name|tableBlacklist
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|schemaRefreshMode
specifier|private
name|String
name|schemaRefreshMode
init|=
literal|"columns_diff"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|tableWhitelist
specifier|private
name|String
name|tableWhitelist
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|topicSelectionStrategy
specifier|private
name|String
name|topicSelectionStrategy
init|=
literal|"topic_per_table"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|tombstonesOnDelete
specifier|private
name|Boolean
name|tombstonesOnDelete
init|=
literal|false
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseSslmode
specifier|private
name|String
name|databaseSslmode
init|=
literal|"disable"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|decimalHandlingMode
specifier|private
name|String
name|decimalHandlingMode
init|=
literal|"precise"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseSslcert
specifier|private
name|String
name|databaseSslcert
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|pollIntervalMs
specifier|private
name|Long
name|pollIntervalMs
init|=
literal|500L
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseInitialStatements
specifier|private
name|String
name|databaseInitialStatements
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|heartbeatTopicsPrefix
specifier|private
name|String
name|heartbeatTopicsPrefix
init|=
literal|"__debezium-heartbeat"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseSslfactory
specifier|private
name|String
name|databaseSslfactory
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|statusUpdateIntervalMs
specifier|private
name|Integer
name|statusUpdateIntervalMs
init|=
literal|10000
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|snapshotFetchSize
specifier|private
name|Integer
name|snapshotFetchSize
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|snapshotLockTimeoutMs
specifier|private
name|Long
name|snapshotLockTimeoutMs
init|=
literal|10000L
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseTcpkeepalive
specifier|private
name|Boolean
name|databaseTcpkeepalive
init|=
literal|true
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseHistoryFileFilename
specifier|private
name|String
name|databaseHistoryFileFilename
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseDbname
specifier|private
name|String
name|databaseDbname
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseUser
specifier|private
name|String
name|databaseUser
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseSslkey
specifier|private
name|String
name|databaseSslkey
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|snapshotSelectStatementOverrides
specifier|private
name|String
name|snapshotSelectStatementOverrides
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|xminFetchIntervalMs
specifier|private
name|Long
name|xminFetchIntervalMs
init|=
literal|0L
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|timePrecisionMode
specifier|private
name|String
name|timePrecisionMode
init|=
literal|"adaptive"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseServerName
specifier|private
name|String
name|databaseServerName
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|heartbeatIntervalMs
specifier|private
name|Integer
name|heartbeatIntervalMs
init|=
literal|0
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|pluginName
specifier|private
name|String
name|pluginName
init|=
literal|"decoderbufs"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databasePort
specifier|private
name|Integer
name|databasePort
init|=
literal|5432
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseSslpassword
specifier|private
name|String
name|databaseSslpassword
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|schemaWhitelist
specifier|private
name|String
name|schemaWhitelist
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|includeUnknownDatatypes
specifier|private
name|Boolean
name|includeUnknownDatatypes
init|=
literal|false
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseHostname
specifier|private
name|String
name|databaseHostname
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databasePassword
specifier|private
name|String
name|databasePassword
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|databaseSslrootcert
specifier|private
name|String
name|databaseSslrootcert
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|maxBatchSize
specifier|private
name|Integer
name|maxBatchSize
init|=
literal|2048
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|snapshotMode
specifier|private
name|String
name|snapshotMode
init|=
literal|"initial"
decl_stmt|;
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'          */
DECL|field|slotStreamParams
specifier|private
name|String
name|slotStreamParams
decl_stmt|;
comment|/**          * The name of the Java class for the connector          */
DECL|field|connectorClass
specifier|private
name|Class
name|connectorClass
decl_stmt|;
comment|/**          * Unique name for the connector. Attempting to register again with the          * same name will fail.          */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**          * The name of the Java class that is responsible for persistence of          * connector offsets.          */
DECL|field|offsetStorage
specifier|private
name|String
name|offsetStorage
init|=
literal|"org.apache.kafka.connect.storage.FileOffsetBackingStore"
decl_stmt|;
comment|/**          * Path to file where offsets are to be stored. Required when          * offset.storage is set to the FileOffsetBackingStore          */
DECL|field|offsetStorageFileName
specifier|private
name|String
name|offsetStorageFileName
decl_stmt|;
comment|/**          * The name of the Kafka topic where offsets are to be stored. Required          * when offset.storage is set to the KafkaOffsetBackingStore.          */
DECL|field|offsetStorageTopic
specifier|private
name|String
name|offsetStorageTopic
decl_stmt|;
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore          */
DECL|field|offsetStorageReplicationFactor
specifier|private
name|Integer
name|offsetStorageReplicationFactor
decl_stmt|;
comment|/**          * The name of the Java class of the commit policy. It defines when          * offsets commit has to be triggered based on the number of events          * processed and the time elapsed since the last commit. This class must          * implement the interface<â¦â>.OffsetCommitPolicy. The default is a          * periodic commit policy based upon time intervals.          */
DECL|field|offsetCommitPolicy
specifier|private
name|String
name|offsetCommitPolicy
init|=
literal|"io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy"
decl_stmt|;
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          */
DECL|field|offsetFlushIntervalMs
specifier|private
name|Long
name|offsetFlushIntervalMs
init|=
literal|60000L
decl_stmt|;
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          */
DECL|field|offsetCommitTimeoutMs
specifier|private
name|Long
name|offsetCommitTimeoutMs
init|=
literal|5000L
decl_stmt|;
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the          *<â¦â>.KafkaOffsetBackingStore.          */
DECL|field|offsetStoragePartitions
specifier|private
name|Integer
name|offsetStoragePartitions
decl_stmt|;
comment|/**          * The Converter class that should be used to serialize and deserialize          * key data for offsets. The default is JSON converter.          */
DECL|field|internalKeyConverter
specifier|private
name|String
name|internalKeyConverter
init|=
literal|"org.apache.kafka.connect.json.JsonConverter"
decl_stmt|;
comment|/**          * The Converter class that should be used to serialize and deserialize          * value data for offsets. The default is JSON converter.          */
DECL|field|internalValueConverter
specifier|private
name|String
name|internalValueConverter
init|=
literal|"org.apache.kafka.connect.json.JsonConverter"
decl_stmt|;
DECL|method|getSnapshotCustomClass ()
specifier|public
name|String
name|getSnapshotCustomClass
parameter_list|()
block|{
return|return
name|snapshotCustomClass
return|;
block|}
DECL|method|setSnapshotCustomClass (String snapshotCustomClass)
specifier|public
name|void
name|setSnapshotCustomClass
parameter_list|(
name|String
name|snapshotCustomClass
parameter_list|)
block|{
name|this
operator|.
name|snapshotCustomClass
operator|=
name|snapshotCustomClass
expr_stmt|;
block|}
DECL|method|getMaxQueueSize ()
specifier|public
name|Integer
name|getMaxQueueSize
parameter_list|()
block|{
return|return
name|maxQueueSize
return|;
block|}
DECL|method|setMaxQueueSize (Integer maxQueueSize)
specifier|public
name|void
name|setMaxQueueSize
parameter_list|(
name|Integer
name|maxQueueSize
parameter_list|)
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|maxQueueSize
expr_stmt|;
block|}
DECL|method|getSlotName ()
specifier|public
name|String
name|getSlotName
parameter_list|()
block|{
return|return
name|slotName
return|;
block|}
DECL|method|setSlotName (String slotName)
specifier|public
name|void
name|setSlotName
parameter_list|(
name|String
name|slotName
parameter_list|)
block|{
name|this
operator|.
name|slotName
operator|=
name|slotName
expr_stmt|;
block|}
DECL|method|getHstoreHandlingMode ()
specifier|public
name|String
name|getHstoreHandlingMode
parameter_list|()
block|{
return|return
name|hstoreHandlingMode
return|;
block|}
DECL|method|setHstoreHandlingMode (String hstoreHandlingMode)
specifier|public
name|void
name|setHstoreHandlingMode
parameter_list|(
name|String
name|hstoreHandlingMode
parameter_list|)
block|{
name|this
operator|.
name|hstoreHandlingMode
operator|=
name|hstoreHandlingMode
expr_stmt|;
block|}
DECL|method|getColumnBlacklist ()
specifier|public
name|String
name|getColumnBlacklist
parameter_list|()
block|{
return|return
name|columnBlacklist
return|;
block|}
DECL|method|setColumnBlacklist (String columnBlacklist)
specifier|public
name|void
name|setColumnBlacklist
parameter_list|(
name|String
name|columnBlacklist
parameter_list|)
block|{
name|this
operator|.
name|columnBlacklist
operator|=
name|columnBlacklist
expr_stmt|;
block|}
DECL|method|getSnapshotDelayMs ()
specifier|public
name|Long
name|getSnapshotDelayMs
parameter_list|()
block|{
return|return
name|snapshotDelayMs
return|;
block|}
DECL|method|setSnapshotDelayMs (Long snapshotDelayMs)
specifier|public
name|void
name|setSnapshotDelayMs
parameter_list|(
name|Long
name|snapshotDelayMs
parameter_list|)
block|{
name|this
operator|.
name|snapshotDelayMs
operator|=
name|snapshotDelayMs
expr_stmt|;
block|}
DECL|method|getSchemaBlacklist ()
specifier|public
name|String
name|getSchemaBlacklist
parameter_list|()
block|{
return|return
name|schemaBlacklist
return|;
block|}
DECL|method|setSchemaBlacklist (String schemaBlacklist)
specifier|public
name|void
name|setSchemaBlacklist
parameter_list|(
name|String
name|schemaBlacklist
parameter_list|)
block|{
name|this
operator|.
name|schemaBlacklist
operator|=
name|schemaBlacklist
expr_stmt|;
block|}
DECL|method|getTableBlacklist ()
specifier|public
name|String
name|getTableBlacklist
parameter_list|()
block|{
return|return
name|tableBlacklist
return|;
block|}
DECL|method|setTableBlacklist (String tableBlacklist)
specifier|public
name|void
name|setTableBlacklist
parameter_list|(
name|String
name|tableBlacklist
parameter_list|)
block|{
name|this
operator|.
name|tableBlacklist
operator|=
name|tableBlacklist
expr_stmt|;
block|}
DECL|method|getSchemaRefreshMode ()
specifier|public
name|String
name|getSchemaRefreshMode
parameter_list|()
block|{
return|return
name|schemaRefreshMode
return|;
block|}
DECL|method|setSchemaRefreshMode (String schemaRefreshMode)
specifier|public
name|void
name|setSchemaRefreshMode
parameter_list|(
name|String
name|schemaRefreshMode
parameter_list|)
block|{
name|this
operator|.
name|schemaRefreshMode
operator|=
name|schemaRefreshMode
expr_stmt|;
block|}
DECL|method|getTableWhitelist ()
specifier|public
name|String
name|getTableWhitelist
parameter_list|()
block|{
return|return
name|tableWhitelist
return|;
block|}
DECL|method|setTableWhitelist (String tableWhitelist)
specifier|public
name|void
name|setTableWhitelist
parameter_list|(
name|String
name|tableWhitelist
parameter_list|)
block|{
name|this
operator|.
name|tableWhitelist
operator|=
name|tableWhitelist
expr_stmt|;
block|}
DECL|method|getTopicSelectionStrategy ()
specifier|public
name|String
name|getTopicSelectionStrategy
parameter_list|()
block|{
return|return
name|topicSelectionStrategy
return|;
block|}
DECL|method|setTopicSelectionStrategy (String topicSelectionStrategy)
specifier|public
name|void
name|setTopicSelectionStrategy
parameter_list|(
name|String
name|topicSelectionStrategy
parameter_list|)
block|{
name|this
operator|.
name|topicSelectionStrategy
operator|=
name|topicSelectionStrategy
expr_stmt|;
block|}
DECL|method|getTombstonesOnDelete ()
specifier|public
name|Boolean
name|getTombstonesOnDelete
parameter_list|()
block|{
return|return
name|tombstonesOnDelete
return|;
block|}
DECL|method|setTombstonesOnDelete (Boolean tombstonesOnDelete)
specifier|public
name|void
name|setTombstonesOnDelete
parameter_list|(
name|Boolean
name|tombstonesOnDelete
parameter_list|)
block|{
name|this
operator|.
name|tombstonesOnDelete
operator|=
name|tombstonesOnDelete
expr_stmt|;
block|}
DECL|method|getDatabaseSslmode ()
specifier|public
name|String
name|getDatabaseSslmode
parameter_list|()
block|{
return|return
name|databaseSslmode
return|;
block|}
DECL|method|setDatabaseSslmode (String databaseSslmode)
specifier|public
name|void
name|setDatabaseSslmode
parameter_list|(
name|String
name|databaseSslmode
parameter_list|)
block|{
name|this
operator|.
name|databaseSslmode
operator|=
name|databaseSslmode
expr_stmt|;
block|}
DECL|method|getDecimalHandlingMode ()
specifier|public
name|String
name|getDecimalHandlingMode
parameter_list|()
block|{
return|return
name|decimalHandlingMode
return|;
block|}
DECL|method|setDecimalHandlingMode (String decimalHandlingMode)
specifier|public
name|void
name|setDecimalHandlingMode
parameter_list|(
name|String
name|decimalHandlingMode
parameter_list|)
block|{
name|this
operator|.
name|decimalHandlingMode
operator|=
name|decimalHandlingMode
expr_stmt|;
block|}
DECL|method|getDatabaseSslcert ()
specifier|public
name|String
name|getDatabaseSslcert
parameter_list|()
block|{
return|return
name|databaseSslcert
return|;
block|}
DECL|method|setDatabaseSslcert (String databaseSslcert)
specifier|public
name|void
name|setDatabaseSslcert
parameter_list|(
name|String
name|databaseSslcert
parameter_list|)
block|{
name|this
operator|.
name|databaseSslcert
operator|=
name|databaseSslcert
expr_stmt|;
block|}
DECL|method|getPollIntervalMs ()
specifier|public
name|Long
name|getPollIntervalMs
parameter_list|()
block|{
return|return
name|pollIntervalMs
return|;
block|}
DECL|method|setPollIntervalMs (Long pollIntervalMs)
specifier|public
name|void
name|setPollIntervalMs
parameter_list|(
name|Long
name|pollIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|pollIntervalMs
operator|=
name|pollIntervalMs
expr_stmt|;
block|}
DECL|method|getDatabaseInitialStatements ()
specifier|public
name|String
name|getDatabaseInitialStatements
parameter_list|()
block|{
return|return
name|databaseInitialStatements
return|;
block|}
DECL|method|setDatabaseInitialStatements ( String databaseInitialStatements)
specifier|public
name|void
name|setDatabaseInitialStatements
parameter_list|(
name|String
name|databaseInitialStatements
parameter_list|)
block|{
name|this
operator|.
name|databaseInitialStatements
operator|=
name|databaseInitialStatements
expr_stmt|;
block|}
DECL|method|getHeartbeatTopicsPrefix ()
specifier|public
name|String
name|getHeartbeatTopicsPrefix
parameter_list|()
block|{
return|return
name|heartbeatTopicsPrefix
return|;
block|}
DECL|method|setHeartbeatTopicsPrefix (String heartbeatTopicsPrefix)
specifier|public
name|void
name|setHeartbeatTopicsPrefix
parameter_list|(
name|String
name|heartbeatTopicsPrefix
parameter_list|)
block|{
name|this
operator|.
name|heartbeatTopicsPrefix
operator|=
name|heartbeatTopicsPrefix
expr_stmt|;
block|}
DECL|method|getDatabaseSslfactory ()
specifier|public
name|String
name|getDatabaseSslfactory
parameter_list|()
block|{
return|return
name|databaseSslfactory
return|;
block|}
DECL|method|setDatabaseSslfactory (String databaseSslfactory)
specifier|public
name|void
name|setDatabaseSslfactory
parameter_list|(
name|String
name|databaseSslfactory
parameter_list|)
block|{
name|this
operator|.
name|databaseSslfactory
operator|=
name|databaseSslfactory
expr_stmt|;
block|}
DECL|method|getStatusUpdateIntervalMs ()
specifier|public
name|Integer
name|getStatusUpdateIntervalMs
parameter_list|()
block|{
return|return
name|statusUpdateIntervalMs
return|;
block|}
DECL|method|setStatusUpdateIntervalMs (Integer statusUpdateIntervalMs)
specifier|public
name|void
name|setStatusUpdateIntervalMs
parameter_list|(
name|Integer
name|statusUpdateIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|statusUpdateIntervalMs
operator|=
name|statusUpdateIntervalMs
expr_stmt|;
block|}
DECL|method|getSnapshotFetchSize ()
specifier|public
name|Integer
name|getSnapshotFetchSize
parameter_list|()
block|{
return|return
name|snapshotFetchSize
return|;
block|}
DECL|method|setSnapshotFetchSize (Integer snapshotFetchSize)
specifier|public
name|void
name|setSnapshotFetchSize
parameter_list|(
name|Integer
name|snapshotFetchSize
parameter_list|)
block|{
name|this
operator|.
name|snapshotFetchSize
operator|=
name|snapshotFetchSize
expr_stmt|;
block|}
DECL|method|getSnapshotLockTimeoutMs ()
specifier|public
name|Long
name|getSnapshotLockTimeoutMs
parameter_list|()
block|{
return|return
name|snapshotLockTimeoutMs
return|;
block|}
DECL|method|setSnapshotLockTimeoutMs (Long snapshotLockTimeoutMs)
specifier|public
name|void
name|setSnapshotLockTimeoutMs
parameter_list|(
name|Long
name|snapshotLockTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|snapshotLockTimeoutMs
operator|=
name|snapshotLockTimeoutMs
expr_stmt|;
block|}
DECL|method|getDatabaseTcpkeepalive ()
specifier|public
name|Boolean
name|getDatabaseTcpkeepalive
parameter_list|()
block|{
return|return
name|databaseTcpkeepalive
return|;
block|}
DECL|method|setDatabaseTcpkeepalive (Boolean databaseTcpkeepalive)
specifier|public
name|void
name|setDatabaseTcpkeepalive
parameter_list|(
name|Boolean
name|databaseTcpkeepalive
parameter_list|)
block|{
name|this
operator|.
name|databaseTcpkeepalive
operator|=
name|databaseTcpkeepalive
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryFileFilename ()
specifier|public
name|String
name|getDatabaseHistoryFileFilename
parameter_list|()
block|{
return|return
name|databaseHistoryFileFilename
return|;
block|}
DECL|method|setDatabaseHistoryFileFilename ( String databaseHistoryFileFilename)
specifier|public
name|void
name|setDatabaseHistoryFileFilename
parameter_list|(
name|String
name|databaseHistoryFileFilename
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryFileFilename
operator|=
name|databaseHistoryFileFilename
expr_stmt|;
block|}
DECL|method|getDatabaseDbname ()
specifier|public
name|String
name|getDatabaseDbname
parameter_list|()
block|{
return|return
name|databaseDbname
return|;
block|}
DECL|method|setDatabaseDbname (String databaseDbname)
specifier|public
name|void
name|setDatabaseDbname
parameter_list|(
name|String
name|databaseDbname
parameter_list|)
block|{
name|this
operator|.
name|databaseDbname
operator|=
name|databaseDbname
expr_stmt|;
block|}
DECL|method|getDatabaseUser ()
specifier|public
name|String
name|getDatabaseUser
parameter_list|()
block|{
return|return
name|databaseUser
return|;
block|}
DECL|method|setDatabaseUser (String databaseUser)
specifier|public
name|void
name|setDatabaseUser
parameter_list|(
name|String
name|databaseUser
parameter_list|)
block|{
name|this
operator|.
name|databaseUser
operator|=
name|databaseUser
expr_stmt|;
block|}
DECL|method|getDatabaseSslkey ()
specifier|public
name|String
name|getDatabaseSslkey
parameter_list|()
block|{
return|return
name|databaseSslkey
return|;
block|}
DECL|method|setDatabaseSslkey (String databaseSslkey)
specifier|public
name|void
name|setDatabaseSslkey
parameter_list|(
name|String
name|databaseSslkey
parameter_list|)
block|{
name|this
operator|.
name|databaseSslkey
operator|=
name|databaseSslkey
expr_stmt|;
block|}
DECL|method|getSnapshotSelectStatementOverrides ()
specifier|public
name|String
name|getSnapshotSelectStatementOverrides
parameter_list|()
block|{
return|return
name|snapshotSelectStatementOverrides
return|;
block|}
DECL|method|setSnapshotSelectStatementOverrides ( String snapshotSelectStatementOverrides)
specifier|public
name|void
name|setSnapshotSelectStatementOverrides
parameter_list|(
name|String
name|snapshotSelectStatementOverrides
parameter_list|)
block|{
name|this
operator|.
name|snapshotSelectStatementOverrides
operator|=
name|snapshotSelectStatementOverrides
expr_stmt|;
block|}
DECL|method|getXminFetchIntervalMs ()
specifier|public
name|Long
name|getXminFetchIntervalMs
parameter_list|()
block|{
return|return
name|xminFetchIntervalMs
return|;
block|}
DECL|method|setXminFetchIntervalMs (Long xminFetchIntervalMs)
specifier|public
name|void
name|setXminFetchIntervalMs
parameter_list|(
name|Long
name|xminFetchIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|xminFetchIntervalMs
operator|=
name|xminFetchIntervalMs
expr_stmt|;
block|}
DECL|method|getTimePrecisionMode ()
specifier|public
name|String
name|getTimePrecisionMode
parameter_list|()
block|{
return|return
name|timePrecisionMode
return|;
block|}
DECL|method|setTimePrecisionMode (String timePrecisionMode)
specifier|public
name|void
name|setTimePrecisionMode
parameter_list|(
name|String
name|timePrecisionMode
parameter_list|)
block|{
name|this
operator|.
name|timePrecisionMode
operator|=
name|timePrecisionMode
expr_stmt|;
block|}
DECL|method|getDatabaseServerName ()
specifier|public
name|String
name|getDatabaseServerName
parameter_list|()
block|{
return|return
name|databaseServerName
return|;
block|}
DECL|method|setDatabaseServerName (String databaseServerName)
specifier|public
name|void
name|setDatabaseServerName
parameter_list|(
name|String
name|databaseServerName
parameter_list|)
block|{
name|this
operator|.
name|databaseServerName
operator|=
name|databaseServerName
expr_stmt|;
block|}
DECL|method|getHeartbeatIntervalMs ()
specifier|public
name|Integer
name|getHeartbeatIntervalMs
parameter_list|()
block|{
return|return
name|heartbeatIntervalMs
return|;
block|}
DECL|method|setHeartbeatIntervalMs (Integer heartbeatIntervalMs)
specifier|public
name|void
name|setHeartbeatIntervalMs
parameter_list|(
name|Integer
name|heartbeatIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|heartbeatIntervalMs
operator|=
name|heartbeatIntervalMs
expr_stmt|;
block|}
DECL|method|getPluginName ()
specifier|public
name|String
name|getPluginName
parameter_list|()
block|{
return|return
name|pluginName
return|;
block|}
DECL|method|setPluginName (String pluginName)
specifier|public
name|void
name|setPluginName
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|this
operator|.
name|pluginName
operator|=
name|pluginName
expr_stmt|;
block|}
DECL|method|getDatabasePort ()
specifier|public
name|Integer
name|getDatabasePort
parameter_list|()
block|{
return|return
name|databasePort
return|;
block|}
DECL|method|setDatabasePort (Integer databasePort)
specifier|public
name|void
name|setDatabasePort
parameter_list|(
name|Integer
name|databasePort
parameter_list|)
block|{
name|this
operator|.
name|databasePort
operator|=
name|databasePort
expr_stmt|;
block|}
DECL|method|getDatabaseSslpassword ()
specifier|public
name|String
name|getDatabaseSslpassword
parameter_list|()
block|{
return|return
name|databaseSslpassword
return|;
block|}
DECL|method|setDatabaseSslpassword (String databaseSslpassword)
specifier|public
name|void
name|setDatabaseSslpassword
parameter_list|(
name|String
name|databaseSslpassword
parameter_list|)
block|{
name|this
operator|.
name|databaseSslpassword
operator|=
name|databaseSslpassword
expr_stmt|;
block|}
DECL|method|getSchemaWhitelist ()
specifier|public
name|String
name|getSchemaWhitelist
parameter_list|()
block|{
return|return
name|schemaWhitelist
return|;
block|}
DECL|method|setSchemaWhitelist (String schemaWhitelist)
specifier|public
name|void
name|setSchemaWhitelist
parameter_list|(
name|String
name|schemaWhitelist
parameter_list|)
block|{
name|this
operator|.
name|schemaWhitelist
operator|=
name|schemaWhitelist
expr_stmt|;
block|}
DECL|method|getIncludeUnknownDatatypes ()
specifier|public
name|Boolean
name|getIncludeUnknownDatatypes
parameter_list|()
block|{
return|return
name|includeUnknownDatatypes
return|;
block|}
DECL|method|setIncludeUnknownDatatypes (Boolean includeUnknownDatatypes)
specifier|public
name|void
name|setIncludeUnknownDatatypes
parameter_list|(
name|Boolean
name|includeUnknownDatatypes
parameter_list|)
block|{
name|this
operator|.
name|includeUnknownDatatypes
operator|=
name|includeUnknownDatatypes
expr_stmt|;
block|}
DECL|method|getDatabaseHostname ()
specifier|public
name|String
name|getDatabaseHostname
parameter_list|()
block|{
return|return
name|databaseHostname
return|;
block|}
DECL|method|setDatabaseHostname (String databaseHostname)
specifier|public
name|void
name|setDatabaseHostname
parameter_list|(
name|String
name|databaseHostname
parameter_list|)
block|{
name|this
operator|.
name|databaseHostname
operator|=
name|databaseHostname
expr_stmt|;
block|}
DECL|method|getDatabasePassword ()
specifier|public
name|String
name|getDatabasePassword
parameter_list|()
block|{
return|return
name|databasePassword
return|;
block|}
DECL|method|setDatabasePassword (String databasePassword)
specifier|public
name|void
name|setDatabasePassword
parameter_list|(
name|String
name|databasePassword
parameter_list|)
block|{
name|this
operator|.
name|databasePassword
operator|=
name|databasePassword
expr_stmt|;
block|}
DECL|method|getDatabaseSslrootcert ()
specifier|public
name|String
name|getDatabaseSslrootcert
parameter_list|()
block|{
return|return
name|databaseSslrootcert
return|;
block|}
DECL|method|setDatabaseSslrootcert (String databaseSslrootcert)
specifier|public
name|void
name|setDatabaseSslrootcert
parameter_list|(
name|String
name|databaseSslrootcert
parameter_list|)
block|{
name|this
operator|.
name|databaseSslrootcert
operator|=
name|databaseSslrootcert
expr_stmt|;
block|}
DECL|method|getMaxBatchSize ()
specifier|public
name|Integer
name|getMaxBatchSize
parameter_list|()
block|{
return|return
name|maxBatchSize
return|;
block|}
DECL|method|setMaxBatchSize (Integer maxBatchSize)
specifier|public
name|void
name|setMaxBatchSize
parameter_list|(
name|Integer
name|maxBatchSize
parameter_list|)
block|{
name|this
operator|.
name|maxBatchSize
operator|=
name|maxBatchSize
expr_stmt|;
block|}
DECL|method|getSnapshotMode ()
specifier|public
name|String
name|getSnapshotMode
parameter_list|()
block|{
return|return
name|snapshotMode
return|;
block|}
DECL|method|setSnapshotMode (String snapshotMode)
specifier|public
name|void
name|setSnapshotMode
parameter_list|(
name|String
name|snapshotMode
parameter_list|)
block|{
name|this
operator|.
name|snapshotMode
operator|=
name|snapshotMode
expr_stmt|;
block|}
DECL|method|getSlotStreamParams ()
specifier|public
name|String
name|getSlotStreamParams
parameter_list|()
block|{
return|return
name|slotStreamParams
return|;
block|}
DECL|method|setSlotStreamParams (String slotStreamParams)
specifier|public
name|void
name|setSlotStreamParams
parameter_list|(
name|String
name|slotStreamParams
parameter_list|)
block|{
name|this
operator|.
name|slotStreamParams
operator|=
name|slotStreamParams
expr_stmt|;
block|}
DECL|method|getConnectorClass ()
specifier|public
name|Class
name|getConnectorClass
parameter_list|()
block|{
return|return
name|connectorClass
return|;
block|}
DECL|method|setConnectorClass (Class connectorClass)
specifier|public
name|void
name|setConnectorClass
parameter_list|(
name|Class
name|connectorClass
parameter_list|)
block|{
name|this
operator|.
name|connectorClass
operator|=
name|connectorClass
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getOffsetStorage ()
specifier|public
name|String
name|getOffsetStorage
parameter_list|()
block|{
return|return
name|offsetStorage
return|;
block|}
DECL|method|setOffsetStorage (String offsetStorage)
specifier|public
name|void
name|setOffsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|this
operator|.
name|offsetStorage
operator|=
name|offsetStorage
expr_stmt|;
block|}
DECL|method|getOffsetStorageFileName ()
specifier|public
name|String
name|getOffsetStorageFileName
parameter_list|()
block|{
return|return
name|offsetStorageFileName
return|;
block|}
DECL|method|setOffsetStorageFileName (String offsetStorageFileName)
specifier|public
name|void
name|setOffsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageFileName
operator|=
name|offsetStorageFileName
expr_stmt|;
block|}
DECL|method|getOffsetStorageTopic ()
specifier|public
name|String
name|getOffsetStorageTopic
parameter_list|()
block|{
return|return
name|offsetStorageTopic
return|;
block|}
DECL|method|setOffsetStorageTopic (String offsetStorageTopic)
specifier|public
name|void
name|setOffsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageTopic
operator|=
name|offsetStorageTopic
expr_stmt|;
block|}
DECL|method|getOffsetStorageReplicationFactor ()
specifier|public
name|Integer
name|getOffsetStorageReplicationFactor
parameter_list|()
block|{
return|return
name|offsetStorageReplicationFactor
return|;
block|}
DECL|method|setOffsetStorageReplicationFactor ( Integer offsetStorageReplicationFactor)
specifier|public
name|void
name|setOffsetStorageReplicationFactor
parameter_list|(
name|Integer
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageReplicationFactor
operator|=
name|offsetStorageReplicationFactor
expr_stmt|;
block|}
DECL|method|getOffsetCommitPolicy ()
specifier|public
name|String
name|getOffsetCommitPolicy
parameter_list|()
block|{
return|return
name|offsetCommitPolicy
return|;
block|}
DECL|method|setOffsetCommitPolicy (String offsetCommitPolicy)
specifier|public
name|void
name|setOffsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitPolicy
operator|=
name|offsetCommitPolicy
expr_stmt|;
block|}
DECL|method|getOffsetFlushIntervalMs ()
specifier|public
name|Long
name|getOffsetFlushIntervalMs
parameter_list|()
block|{
return|return
name|offsetFlushIntervalMs
return|;
block|}
DECL|method|setOffsetFlushIntervalMs (Long offsetFlushIntervalMs)
specifier|public
name|void
name|setOffsetFlushIntervalMs
parameter_list|(
name|Long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|offsetFlushIntervalMs
operator|=
name|offsetFlushIntervalMs
expr_stmt|;
block|}
DECL|method|getOffsetCommitTimeoutMs ()
specifier|public
name|Long
name|getOffsetCommitTimeoutMs
parameter_list|()
block|{
return|return
name|offsetCommitTimeoutMs
return|;
block|}
DECL|method|setOffsetCommitTimeoutMs (Long offsetCommitTimeoutMs)
specifier|public
name|void
name|setOffsetCommitTimeoutMs
parameter_list|(
name|Long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitTimeoutMs
operator|=
name|offsetCommitTimeoutMs
expr_stmt|;
block|}
DECL|method|getOffsetStoragePartitions ()
specifier|public
name|Integer
name|getOffsetStoragePartitions
parameter_list|()
block|{
return|return
name|offsetStoragePartitions
return|;
block|}
DECL|method|setOffsetStoragePartitions (Integer offsetStoragePartitions)
specifier|public
name|void
name|setOffsetStoragePartitions
parameter_list|(
name|Integer
name|offsetStoragePartitions
parameter_list|)
block|{
name|this
operator|.
name|offsetStoragePartitions
operator|=
name|offsetStoragePartitions
expr_stmt|;
block|}
DECL|method|getInternalKeyConverter ()
specifier|public
name|String
name|getInternalKeyConverter
parameter_list|()
block|{
return|return
name|internalKeyConverter
return|;
block|}
DECL|method|setInternalKeyConverter (String internalKeyConverter)
specifier|public
name|void
name|setInternalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|this
operator|.
name|internalKeyConverter
operator|=
name|internalKeyConverter
expr_stmt|;
block|}
DECL|method|getInternalValueConverter ()
specifier|public
name|String
name|getInternalValueConverter
parameter_list|()
block|{
return|return
name|internalValueConverter
return|;
block|}
DECL|method|setInternalValueConverter (String internalValueConverter)
specifier|public
name|void
name|setInternalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|this
operator|.
name|internalValueConverter
operator|=
name|internalValueConverter
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

