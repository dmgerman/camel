begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeeper.springboot.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|springboot
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeeper
operator|.
name|cloud
operator|.
name|ZooKeeperServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|ExponentialBackoffRetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|CloseableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|ServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|ServiceDiscoveryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|x
operator|.
name|discovery
operator|.
name|details
operator|.
name|JsonInstanceSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|EnableAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|runner
operator|.
name|ApplicationContextRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|SocketUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|ZooKeeperServiceRegistryTest
specifier|public
class|class
name|ZooKeeperServiceRegistryTest
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperServiceRegistryTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SERVICE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_PATH
init|=
literal|"/camel"
decl_stmt|;
DECL|field|SERVICE_ID
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_ID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|SERVICE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"my-service"
decl_stmt|;
DECL|field|SERVICE_HOST
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|SERVICE_PORT
specifier|private
specifier|static
specifier|final
name|int
name|SERVICE_PORT
init|=
name|SocketUtils
operator|.
name|findAvailableTcpPort
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|testName
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testServiceRegistry ()
specifier|public
name|void
name|testServiceRegistry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|zkPort
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
specifier|final
name|File
name|zkDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
specifier|final
name|TestingServer
name|zkServer
init|=
operator|new
name|TestingServer
argument_list|(
name|zkPort
argument_list|,
name|zkDir
argument_list|)
decl_stmt|;
name|zkServer
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ZooKeeperTestClient
name|zkClient
init|=
operator|new
name|ZooKeeperTestClient
argument_list|(
literal|"localhost:"
operator|+
name|zkPort
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|ApplicationContextRunner
argument_list|()
operator|.
name|withUserConfiguration
argument_list|(
name|TestConfiguration
operator|.
name|class
argument_list|)
operator|.
name|withPropertyValues
argument_list|(
literal|"debug=false"
argument_list|,
literal|"spring.main.banner-mode=OFF"
argument_list|,
literal|"spring.application.name="
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"camel.component.zookeeper.service-registry.enabled=true"
argument_list|,
literal|"camel.component.zookeeper.service-registry.nodes=localhost:"
operator|+
name|zkPort
argument_list|,
literal|"camel.component.zookeeper.service-registry.id="
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"camel.component.zookeeper.service-registry.base-path="
operator|+
name|SERVICE_PATH
argument_list|,
literal|"camel.component.zookeeper.service-registry.service-host=localhost"
argument_list|)
operator|.
name|run
argument_list|(
name|context
lambda|->
block|{
name|assertThat
argument_list|(
name|context
argument_list|)
operator|.
name|hasSingleBean
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
argument_list|)
operator|.
name|hasSingleBean
argument_list|(
name|ServiceRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|CamelContext
name|camelContext
init|=
name|context
operator|.
name|getBean
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ServiceRegistry
name|serviceRegistry
init|=
name|camelContext
operator|.
name|hasService
argument_list|(
name|ServiceRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|serviceRegistry
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|serviceRegistry
operator|.
name|register
argument_list|(
name|DefaultServiceDefinition
operator|.
name|builder
argument_list|()
operator|.
name|withHost
argument_list|(
name|SERVICE_HOST
argument_list|)
operator|.
name|withPort
argument_list|(
name|SERVICE_PORT
argument_list|)
operator|.
name|withName
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|withId
argument_list|(
name|SERVICE_ID
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|ServiceInstance
argument_list|<
name|ZooKeeperServiceRegistry
operator|.
name|MetaData
argument_list|>
argument_list|>
name|services
init|=
name|zkClient
operator|.
name|discovery
argument_list|()
operator|.
name|queryForInstances
argument_list|(
name|SERVICE_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|services
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|services
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"id"
argument_list|,
name|SERVICE_ID
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|services
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"name"
argument_list|,
name|SERVICE_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|services
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"address"
argument_list|,
name|SERVICE_HOST
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|services
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"port"
argument_list|,
name|SERVICE_PORT
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkClient
operator|.
name|stop
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// *************************************
comment|// Config
comment|// *************************************
annotation|@
name|EnableAutoConfiguration
annotation|@
name|Configuration
DECL|class|TestConfiguration
specifier|public
specifier|static
class|class
name|TestConfiguration
block|{     }
comment|// *************************************
comment|// Helpers
comment|// *************************************
DECL|class|ZooKeeperTestClient
specifier|public
specifier|static
class|class
name|ZooKeeperTestClient
block|{
DECL|field|curator
specifier|private
specifier|final
name|CuratorFramework
name|curator
decl_stmt|;
DECL|field|discovery
specifier|private
specifier|final
name|ServiceDiscovery
argument_list|<
name|ZooKeeperServiceRegistry
operator|.
name|MetaData
argument_list|>
name|discovery
decl_stmt|;
DECL|method|ZooKeeperTestClient (String nodes)
specifier|public
name|ZooKeeperTestClient
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|curator
operator|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|nodes
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|ExponentialBackoffRetry
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|discovery
operator|=
name|ServiceDiscoveryBuilder
operator|.
name|builder
argument_list|(
name|ZooKeeperServiceRegistry
operator|.
name|MetaData
operator|.
name|class
argument_list|)
operator|.
name|client
argument_list|(
name|curator
argument_list|)
operator|.
name|basePath
argument_list|(
name|SERVICE_PATH
argument_list|)
operator|.
name|serializer
argument_list|(
operator|new
name|JsonInstanceSerializer
argument_list|<>
argument_list|(
name|ZooKeeperServiceRegistry
operator|.
name|MetaData
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|curator ()
specifier|public
name|CuratorFramework
name|curator
parameter_list|()
block|{
return|return
name|curator
return|;
block|}
DECL|method|discovery ()
specifier|public
name|ServiceDiscovery
argument_list|<
name|ZooKeeperServiceRegistry
operator|.
name|MetaData
argument_list|>
name|discovery
parameter_list|()
block|{
return|return
name|discovery
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
name|discovery
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|discovery
argument_list|)
expr_stmt|;
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|curator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

