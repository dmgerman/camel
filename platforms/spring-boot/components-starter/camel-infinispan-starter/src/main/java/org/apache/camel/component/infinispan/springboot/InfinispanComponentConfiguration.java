begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanCustomListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCacheContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|context
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|NestedConfigurationProperty
import|;
end_import

begin_comment
comment|/**  * For reading/writing from/to Infinispan distributed key/value store and data  * grid.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.infinispan"
argument_list|)
DECL|class|InfinispanComponentConfiguration
specifier|public
class|class
name|InfinispanComponentConfiguration
block|{
comment|/**      * The default configuration shared among endpoints.      */
DECL|field|configuration
specifier|private
name|InfinispanConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * The default cache container.      */
annotation|@
name|NestedConfigurationProperty
DECL|field|cacheContainer
specifier|private
name|BasicCacheContainer
name|cacheContainer
decl_stmt|;
comment|/**      * Whether the component should resolve property placeholders on itself when      * starting. Only properties which are of String type can use property      * placeholders.      */
DECL|field|resolvePropertyPlaceholders
specifier|private
name|Boolean
name|resolvePropertyPlaceholders
init|=
literal|true
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|InfinispanConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( InfinispanConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|InfinispanConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getCacheContainer ()
specifier|public
name|BasicCacheContainer
name|getCacheContainer
parameter_list|()
block|{
return|return
name|cacheContainer
return|;
block|}
DECL|method|setCacheContainer (BasicCacheContainer cacheContainer)
specifier|public
name|void
name|setCacheContainer
parameter_list|(
name|BasicCacheContainer
name|cacheContainer
parameter_list|)
block|{
name|this
operator|.
name|cacheContainer
operator|=
name|cacheContainer
expr_stmt|;
block|}
DECL|method|getResolvePropertyPlaceholders ()
specifier|public
name|Boolean
name|getResolvePropertyPlaceholders
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
return|;
block|}
DECL|method|setResolvePropertyPlaceholders ( Boolean resolvePropertyPlaceholders)
specifier|public
name|void
name|setResolvePropertyPlaceholders
parameter_list|(
name|Boolean
name|resolvePropertyPlaceholders
parameter_list|)
block|{
name|this
operator|.
name|resolvePropertyPlaceholders
operator|=
name|resolvePropertyPlaceholders
expr_stmt|;
block|}
DECL|class|InfinispanConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|InfinispanConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * The operation to perform.          */
DECL|field|command
specifier|private
name|String
name|command
init|=
literal|"put"
decl_stmt|;
DECL|field|hosts
specifier|private
name|String
name|hosts
decl_stmt|;
DECL|field|cacheContainer
specifier|private
name|BasicCacheContainer
name|cacheContainer
decl_stmt|;
DECL|field|sync
specifier|private
name|Boolean
name|sync
init|=
literal|true
decl_stmt|;
DECL|field|clusteredListener
specifier|private
name|Boolean
name|clusteredListener
init|=
literal|false
decl_stmt|;
comment|/**          * Specifies the set of event types to register by the consumer.          * Multiple event can be separated by comma.          *<p/>          * The possible event types are: CACHE_ENTRY_ACTIVATED,          * CACHE_ENTRY_PASSIVATED, CACHE_ENTRY_VISITED, CACHE_ENTRY_LOADED,          * CACHE_ENTRY_EVICTED, CACHE_ENTRY_CREATED, CACHE_ENTRY_REMOVED,          * CACHE_ENTRY_MODIFIED, TRANSACTION_COMPLETED, TRANSACTION_REGISTERED,          * CACHE_ENTRY_INVALIDATED, DATA_REHASHED, TOPOLOGY_CHANGED,          * PARTITION_STATUS_CHANGED          */
DECL|field|eventTypes
specifier|private
name|Set
name|eventTypes
decl_stmt|;
DECL|field|customListener
specifier|private
name|InfinispanCustomListener
name|customListener
decl_stmt|;
comment|/**          * Specifies the query builder.          */
DECL|field|queryBuilder
specifier|private
name|InfinispanQueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|flags
specifier|private
name|Flag
index|[]
name|flags
decl_stmt|;
DECL|field|configurationUri
specifier|private
name|String
name|configurationUri
decl_stmt|;
comment|/**          * Implementation specific properties for the CacheManager          */
DECL|field|configurationProperties
specifier|private
name|Map
name|configurationProperties
decl_stmt|;
comment|/**          * The CacheContainer configuration          */
DECL|field|cacheContainerConfiguration
specifier|private
name|Object
name|cacheContainerConfiguration
decl_stmt|;
comment|/**          * Store the operation result in a header instead of the message body.          * By default, resultHeader == null and the query result is stored in          * the message body, any existing content in the message body is          * discarded. If resultHeader is set, the value is used as the name of          * the header to store the query result and the original message body is          * preserved. This value can be overridden by an in message header          * named: CamelInfinispanOperationResultHeader          */
DECL|field|resultHeader
specifier|private
name|Object
name|resultHeader
decl_stmt|;
DECL|method|getCommand ()
specifier|public
name|String
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
DECL|method|setCommand (String command)
specifier|public
name|void
name|setCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
DECL|method|getHosts ()
specifier|public
name|String
name|getHosts
parameter_list|()
block|{
return|return
name|hosts
return|;
block|}
DECL|method|setHosts (String hosts)
specifier|public
name|void
name|setHosts
parameter_list|(
name|String
name|hosts
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
block|}
DECL|method|getCacheContainer ()
specifier|public
name|BasicCacheContainer
name|getCacheContainer
parameter_list|()
block|{
return|return
name|cacheContainer
return|;
block|}
DECL|method|setCacheContainer (BasicCacheContainer cacheContainer)
specifier|public
name|void
name|setCacheContainer
parameter_list|(
name|BasicCacheContainer
name|cacheContainer
parameter_list|)
block|{
name|this
operator|.
name|cacheContainer
operator|=
name|cacheContainer
expr_stmt|;
block|}
DECL|method|getSync ()
specifier|public
name|Boolean
name|getSync
parameter_list|()
block|{
return|return
name|sync
return|;
block|}
DECL|method|setSync (Boolean sync)
specifier|public
name|void
name|setSync
parameter_list|(
name|Boolean
name|sync
parameter_list|)
block|{
name|this
operator|.
name|sync
operator|=
name|sync
expr_stmt|;
block|}
DECL|method|getClusteredListener ()
specifier|public
name|Boolean
name|getClusteredListener
parameter_list|()
block|{
return|return
name|clusteredListener
return|;
block|}
DECL|method|setClusteredListener (Boolean clusteredListener)
specifier|public
name|void
name|setClusteredListener
parameter_list|(
name|Boolean
name|clusteredListener
parameter_list|)
block|{
name|this
operator|.
name|clusteredListener
operator|=
name|clusteredListener
expr_stmt|;
block|}
DECL|method|getEventTypes ()
specifier|public
name|Set
name|getEventTypes
parameter_list|()
block|{
return|return
name|eventTypes
return|;
block|}
DECL|method|setEventTypes (Set eventTypes)
specifier|public
name|void
name|setEventTypes
parameter_list|(
name|Set
name|eventTypes
parameter_list|)
block|{
name|this
operator|.
name|eventTypes
operator|=
name|eventTypes
expr_stmt|;
block|}
DECL|method|getCustomListener ()
specifier|public
name|InfinispanCustomListener
name|getCustomListener
parameter_list|()
block|{
return|return
name|customListener
return|;
block|}
DECL|method|setCustomListener (InfinispanCustomListener customListener)
specifier|public
name|void
name|setCustomListener
parameter_list|(
name|InfinispanCustomListener
name|customListener
parameter_list|)
block|{
name|this
operator|.
name|customListener
operator|=
name|customListener
expr_stmt|;
block|}
DECL|method|getQueryBuilder ()
specifier|public
name|InfinispanQueryBuilder
name|getQueryBuilder
parameter_list|()
block|{
return|return
name|queryBuilder
return|;
block|}
DECL|method|setQueryBuilder (InfinispanQueryBuilder queryBuilder)
specifier|public
name|void
name|setQueryBuilder
parameter_list|(
name|InfinispanQueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
name|queryBuilder
expr_stmt|;
block|}
DECL|method|getFlags ()
specifier|public
name|Flag
index|[]
name|getFlags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
DECL|method|setFlags (Flag[] flags)
specifier|public
name|void
name|setFlags
parameter_list|(
name|Flag
index|[]
name|flags
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
DECL|method|getConfigurationUri ()
specifier|public
name|String
name|getConfigurationUri
parameter_list|()
block|{
return|return
name|configurationUri
return|;
block|}
DECL|method|setConfigurationUri (String configurationUri)
specifier|public
name|void
name|setConfigurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|this
operator|.
name|configurationUri
operator|=
name|configurationUri
expr_stmt|;
block|}
DECL|method|getConfigurationProperties ()
specifier|public
name|Map
name|getConfigurationProperties
parameter_list|()
block|{
return|return
name|configurationProperties
return|;
block|}
DECL|method|setConfigurationProperties (Map configurationProperties)
specifier|public
name|void
name|setConfigurationProperties
parameter_list|(
name|Map
name|configurationProperties
parameter_list|)
block|{
name|this
operator|.
name|configurationProperties
operator|=
name|configurationProperties
expr_stmt|;
block|}
DECL|method|getCacheContainerConfiguration ()
specifier|public
name|Object
name|getCacheContainerConfiguration
parameter_list|()
block|{
return|return
name|cacheContainerConfiguration
return|;
block|}
DECL|method|setCacheContainerConfiguration ( Object cacheContainerConfiguration)
specifier|public
name|void
name|setCacheContainerConfiguration
parameter_list|(
name|Object
name|cacheContainerConfiguration
parameter_list|)
block|{
name|this
operator|.
name|cacheContainerConfiguration
operator|=
name|cacheContainerConfiguration
expr_stmt|;
block|}
DECL|method|getResultHeader ()
specifier|public
name|Object
name|getResultHeader
parameter_list|()
block|{
return|return
name|resultHeader
return|;
block|}
DECL|method|setResultHeader (Object resultHeader)
specifier|public
name|void
name|setResultHeader
parameter_list|(
name|Object
name|resultHeader
parameter_list|)
block|{
name|this
operator|.
name|resultHeader
operator|=
name|resultHeader
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

