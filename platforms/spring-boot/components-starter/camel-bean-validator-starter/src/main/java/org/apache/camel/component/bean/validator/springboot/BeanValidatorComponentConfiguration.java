begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean.validator.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|validator
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The Validator component performs bean validation of the message body using  * the Java Bean Validation API.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.bean-validator"
argument_list|)
DECL|class|BeanValidatorComponentConfiguration
specifier|public
class|class
name|BeanValidatorComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the bean-validator component.      * This is enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * Whether to ignore data from the META-INF/validation.xml file.      */
DECL|field|ignoreXmlConfiguration
specifier|private
name|Boolean
name|ignoreXmlConfiguration
init|=
literal|false
decl_stmt|;
comment|/**      * To use a a custom ValidationProviderResolver. The option is a      * javax.validation.ValidationProviderResolver type.      */
DECL|field|validationProviderResolver
specifier|private
name|String
name|validationProviderResolver
decl_stmt|;
comment|/**      * To use a custom MessageInterpolator. The option is a      * javax.validation.MessageInterpolator type.      */
DECL|field|messageInterpolator
specifier|private
name|String
name|messageInterpolator
decl_stmt|;
comment|/**      * To use a custom TraversableResolver. The option is a      * javax.validation.TraversableResolver type.      */
DECL|field|traversableResolver
specifier|private
name|String
name|traversableResolver
decl_stmt|;
comment|/**      * To use a custom ConstraintValidatorFactory. The option is a      * javax.validation.ConstraintValidatorFactory type.      */
DECL|field|constraintValidatorFactory
specifier|private
name|String
name|constraintValidatorFactory
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
comment|/**      * Whether the producer should be started lazy (on the first message). By      * starting lazy you can use this to allow CamelContext and routes to      * startup in situations where a producer may otherwise fail during starting      * and cause the route to fail being started. By deferring this startup to      * be lazy then the startup failure can be handled during routing messages      * via Camel's routing error handlers. Beware that when the first message is      * processed then creating and starting the producer may take a little time      * and prolong the total processing time of the processing.      */
DECL|field|lazyStartProducer
specifier|private
name|Boolean
name|lazyStartProducer
init|=
literal|false
decl_stmt|;
comment|/**      * Allows for bridging the consumer to the Camel routing Error Handler,      * which mean any exceptions occurred while the consumer is trying to pickup      * incoming messages, or the likes, will now be processed as a message and      * handled by the routing Error Handler. By default the consumer will use      * the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that      * will be logged at WARN or ERROR level and ignored.      */
DECL|field|bridgeErrorHandler
specifier|private
name|Boolean
name|bridgeErrorHandler
init|=
literal|false
decl_stmt|;
DECL|method|getIgnoreXmlConfiguration ()
specifier|public
name|Boolean
name|getIgnoreXmlConfiguration
parameter_list|()
block|{
return|return
name|ignoreXmlConfiguration
return|;
block|}
DECL|method|setIgnoreXmlConfiguration (Boolean ignoreXmlConfiguration)
specifier|public
name|void
name|setIgnoreXmlConfiguration
parameter_list|(
name|Boolean
name|ignoreXmlConfiguration
parameter_list|)
block|{
name|this
operator|.
name|ignoreXmlConfiguration
operator|=
name|ignoreXmlConfiguration
expr_stmt|;
block|}
DECL|method|getValidationProviderResolver ()
specifier|public
name|String
name|getValidationProviderResolver
parameter_list|()
block|{
return|return
name|validationProviderResolver
return|;
block|}
DECL|method|setValidationProviderResolver (String validationProviderResolver)
specifier|public
name|void
name|setValidationProviderResolver
parameter_list|(
name|String
name|validationProviderResolver
parameter_list|)
block|{
name|this
operator|.
name|validationProviderResolver
operator|=
name|validationProviderResolver
expr_stmt|;
block|}
DECL|method|getMessageInterpolator ()
specifier|public
name|String
name|getMessageInterpolator
parameter_list|()
block|{
return|return
name|messageInterpolator
return|;
block|}
DECL|method|setMessageInterpolator (String messageInterpolator)
specifier|public
name|void
name|setMessageInterpolator
parameter_list|(
name|String
name|messageInterpolator
parameter_list|)
block|{
name|this
operator|.
name|messageInterpolator
operator|=
name|messageInterpolator
expr_stmt|;
block|}
DECL|method|getTraversableResolver ()
specifier|public
name|String
name|getTraversableResolver
parameter_list|()
block|{
return|return
name|traversableResolver
return|;
block|}
DECL|method|setTraversableResolver (String traversableResolver)
specifier|public
name|void
name|setTraversableResolver
parameter_list|(
name|String
name|traversableResolver
parameter_list|)
block|{
name|this
operator|.
name|traversableResolver
operator|=
name|traversableResolver
expr_stmt|;
block|}
DECL|method|getConstraintValidatorFactory ()
specifier|public
name|String
name|getConstraintValidatorFactory
parameter_list|()
block|{
return|return
name|constraintValidatorFactory
return|;
block|}
DECL|method|setConstraintValidatorFactory (String constraintValidatorFactory)
specifier|public
name|void
name|setConstraintValidatorFactory
parameter_list|(
name|String
name|constraintValidatorFactory
parameter_list|)
block|{
name|this
operator|.
name|constraintValidatorFactory
operator|=
name|constraintValidatorFactory
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|method|getLazyStartProducer ()
specifier|public
name|Boolean
name|getLazyStartProducer
parameter_list|()
block|{
return|return
name|lazyStartProducer
return|;
block|}
DECL|method|setLazyStartProducer (Boolean lazyStartProducer)
specifier|public
name|void
name|setLazyStartProducer
parameter_list|(
name|Boolean
name|lazyStartProducer
parameter_list|)
block|{
name|this
operator|.
name|lazyStartProducer
operator|=
name|lazyStartProducer
expr_stmt|;
block|}
DECL|method|getBridgeErrorHandler ()
specifier|public
name|Boolean
name|getBridgeErrorHandler
parameter_list|()
block|{
return|return
name|bridgeErrorHandler
return|;
block|}
DECL|method|setBridgeErrorHandler (Boolean bridgeErrorHandler)
specifier|public
name|void
name|setBridgeErrorHandler
parameter_list|(
name|Boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|bridgeErrorHandler
operator|=
name|bridgeErrorHandler
expr_stmt|;
block|}
block|}
end_class

end_unit

