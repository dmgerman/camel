begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.watch.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|watch
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The file-watch is used to monitor file events in directory using  * java.nio.file.WatchService  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.file-watch"
argument_list|)
DECL|class|FileWatchComponentConfiguration
specifier|public
class|class
name|FileWatchComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the file-watch component. This is      * enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * The number of concurrent consumers. Increase this value, if your route is      * slow to prevent buffering in queue.      */
DECL|field|concurrentConsumers
specifier|private
name|Integer
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
comment|/**      * Maximum size of queue between WatchService and consumer. Unbounded by      * default.      */
DECL|field|queueSize
specifier|private
name|Integer
name|queueSize
init|=
literal|2147483647
decl_stmt|;
comment|/**      * The number of threads polling WatchService. Increase this value, if you      * see OVERFLOW messages in log.      */
DECL|field|pollThreads
specifier|private
name|Integer
name|pollThreads
init|=
literal|1
decl_stmt|;
comment|/**      * Reference to io.methvin.watcher.hashing.FileHasher. This prevents      * emitting duplicate events on some platforms. For working with large files      * and if you dont need detect multiple modifications per second per file,      * use #lastModifiedTimeFileHasher. You can also provide custom      * implementation in registry. The option is a      * io.methvin.watcher.hashing.FileHasher type.      */
DECL|field|fileHasher
specifier|private
name|String
name|fileHasher
decl_stmt|;
comment|/**      * Enables or disables file hashing to detect duplicate events. If you      * disable this, you can get some events multiple times on some platforms      * and JDKs. Check java.nio.file.WatchService limitations for your target      * platform.      */
DECL|field|useFileHashing
specifier|private
name|Boolean
name|useFileHashing
init|=
literal|true
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
comment|/**      * Whether the producer should be started lazy (on the first message). By      * starting lazy you can use this to allow CamelContext and routes to      * startup in situations where a producer may otherwise fail during starting      * and cause the route to fail being started. By deferring this startup to      * be lazy then the startup failure can be handled during routing messages      * via Camel's routing error handlers. Beware that when the first message is      * processed then creating and starting the producer may take a little time      * and prolong the total processing time of the processing.      */
DECL|field|lazyStartProducer
specifier|private
name|Boolean
name|lazyStartProducer
init|=
literal|false
decl_stmt|;
comment|/**      * Allows for bridging the consumer to the Camel routing Error Handler,      * which mean any exceptions occurred while the consumer is trying to pickup      * incoming messages, or the likes, will now be processed as a message and      * handled by the routing Error Handler. By default the consumer will use      * the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that      * will be logged at WARN or ERROR level and ignored.      */
DECL|field|bridgeErrorHandler
specifier|private
name|Boolean
name|bridgeErrorHandler
init|=
literal|false
decl_stmt|;
DECL|method|getConcurrentConsumers ()
specifier|public
name|Integer
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
DECL|method|setConcurrentConsumers (Integer concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|Integer
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|getQueueSize ()
specifier|public
name|Integer
name|getQueueSize
parameter_list|()
block|{
return|return
name|queueSize
return|;
block|}
DECL|method|setQueueSize (Integer queueSize)
specifier|public
name|void
name|setQueueSize
parameter_list|(
name|Integer
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
DECL|method|getPollThreads ()
specifier|public
name|Integer
name|getPollThreads
parameter_list|()
block|{
return|return
name|pollThreads
return|;
block|}
DECL|method|setPollThreads (Integer pollThreads)
specifier|public
name|void
name|setPollThreads
parameter_list|(
name|Integer
name|pollThreads
parameter_list|)
block|{
name|this
operator|.
name|pollThreads
operator|=
name|pollThreads
expr_stmt|;
block|}
DECL|method|getFileHasher ()
specifier|public
name|String
name|getFileHasher
parameter_list|()
block|{
return|return
name|fileHasher
return|;
block|}
DECL|method|setFileHasher (String fileHasher)
specifier|public
name|void
name|setFileHasher
parameter_list|(
name|String
name|fileHasher
parameter_list|)
block|{
name|this
operator|.
name|fileHasher
operator|=
name|fileHasher
expr_stmt|;
block|}
DECL|method|getUseFileHashing ()
specifier|public
name|Boolean
name|getUseFileHashing
parameter_list|()
block|{
return|return
name|useFileHashing
return|;
block|}
DECL|method|setUseFileHashing (Boolean useFileHashing)
specifier|public
name|void
name|setUseFileHashing
parameter_list|(
name|Boolean
name|useFileHashing
parameter_list|)
block|{
name|this
operator|.
name|useFileHashing
operator|=
name|useFileHashing
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|method|getLazyStartProducer ()
specifier|public
name|Boolean
name|getLazyStartProducer
parameter_list|()
block|{
return|return
name|lazyStartProducer
return|;
block|}
DECL|method|setLazyStartProducer (Boolean lazyStartProducer)
specifier|public
name|void
name|setLazyStartProducer
parameter_list|(
name|Boolean
name|lazyStartProducer
parameter_list|)
block|{
name|this
operator|.
name|lazyStartProducer
operator|=
name|lazyStartProducer
expr_stmt|;
block|}
DECL|method|getBridgeErrorHandler ()
specifier|public
name|Boolean
name|getBridgeErrorHandler
parameter_list|()
block|{
return|return
name|bridgeErrorHandler
return|;
block|}
DECL|method|setBridgeErrorHandler (Boolean bridgeErrorHandler)
specifier|public
name|void
name|setBridgeErrorHandler
parameter_list|(
name|Boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|bridgeErrorHandler
operator|=
name|bridgeErrorHandler
expr_stmt|;
block|}
block|}
end_class

end_unit

