begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xstream.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xstream
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|DataFormatConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * XSTream data format is used for unmarshal a XML payload to POJO or to marshal  * POJO back to XML payload.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.dataformat.xstream"
argument_list|)
DECL|class|XStreamDataFormatConfiguration
specifier|public
class|class
name|XStreamDataFormatConfiguration
extends|extends
name|DataFormatConfigurationPropertiesCommon
block|{
comment|/**      * Adds permissions that controls which Java packages and classes XStream is      * allowed to use during unmarshal from xml/json to Java beans. A permission      * must be configured either here or globally using a JVM system property.      * The permission can be specified in a syntax where a plus sign is allow      * and minus sign is deny. Wildcards is supported by using . as prefix. For      * example to allow com.foo and all subpackages then specfy com.foo..      * Multiple permissions can be configured separated by comma such as      * com.foo.-com.foo.bar.MySecretBean. The following default permission is      * always included: -java.lang.java.util. unless its overridden by      * specifying a JVM system property with they key      * org.apache.camel.xstream.permissions.      */
DECL|field|permissions
specifier|private
name|String
name|permissions
decl_stmt|;
comment|/**      * Sets the encoding to use      */
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
comment|/**      * To use a custom XStream driver. The instance must be of type      * com.thoughtworks.xstream.io.HierarchicalStreamDriver      */
DECL|field|driver
specifier|private
name|String
name|driver
decl_stmt|;
comment|/**      * To refer to a custom XStream driver to lookup in the registry. The      * instance must be of type      * com.thoughtworks.xstream.io.HierarchicalStreamDriver      */
DECL|field|driverRef
specifier|private
name|String
name|driverRef
decl_stmt|;
comment|/**      * Mode for dealing with duplicate references The possible values are:      * NO_REFERENCES ID_REFERENCES XPATH_RELATIVE_REFERENCES      * XPATH_ABSOLUTE_REFERENCES SINGLE_NODE_XPATH_RELATIVE_REFERENCES      * SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES      */
DECL|field|mode
specifier|private
name|String
name|mode
decl_stmt|;
comment|/**      * List of class names for using custom XStream converters. The classes must      * be of type com.thoughtworks.xstream.converters.Converter      */
DECL|field|converters
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|converters
decl_stmt|;
comment|/**      * Alias a Class to a shorter name to be used in XML elements.      */
DECL|field|aliases
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
decl_stmt|;
comment|/**      * Prevents a field from being serialized. To omit a field you must always      * provide the declaring type and not necessarily the type that is      * converted.      */
DECL|field|omitFields
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|omitFields
decl_stmt|;
comment|/**      * Adds a default implicit collection which is used for any unmapped XML      * tag.      */
DECL|field|implicitCollections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|implicitCollections
decl_stmt|;
comment|/**      * Whether the data format should set the Content-Type header with the type      * from the data format if the data format is capable of doing so. For      * example application/xml for data formats marshalling to XML or      * application/json for data formats marshalling to JSon etc.      */
DECL|field|contentTypeHeader
specifier|private
name|Boolean
name|contentTypeHeader
init|=
literal|false
decl_stmt|;
DECL|method|getPermissions ()
specifier|public
name|String
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
DECL|method|setPermissions (String permissions)
specifier|public
name|void
name|setPermissions
parameter_list|(
name|String
name|permissions
parameter_list|)
block|{
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getDriver ()
specifier|public
name|String
name|getDriver
parameter_list|()
block|{
return|return
name|driver
return|;
block|}
DECL|method|setDriver (String driver)
specifier|public
name|void
name|setDriver
parameter_list|(
name|String
name|driver
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
block|}
DECL|method|getDriverRef ()
specifier|public
name|String
name|getDriverRef
parameter_list|()
block|{
return|return
name|driverRef
return|;
block|}
DECL|method|setDriverRef (String driverRef)
specifier|public
name|void
name|setDriverRef
parameter_list|(
name|String
name|driverRef
parameter_list|)
block|{
name|this
operator|.
name|driverRef
operator|=
name|driverRef
expr_stmt|;
block|}
DECL|method|getMode ()
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
DECL|method|setMode (String mode)
specifier|public
name|void
name|setMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
DECL|method|getConverters ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getConverters
parameter_list|()
block|{
return|return
name|converters
return|;
block|}
DECL|method|setConverters (List<String> converters)
specifier|public
name|void
name|setConverters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|converters
parameter_list|)
block|{
name|this
operator|.
name|converters
operator|=
name|converters
expr_stmt|;
block|}
DECL|method|getAliases ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
return|;
block|}
DECL|method|setAliases (Map<String, String> aliases)
specifier|public
name|void
name|setAliases
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
parameter_list|)
block|{
name|this
operator|.
name|aliases
operator|=
name|aliases
expr_stmt|;
block|}
DECL|method|getOmitFields ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|getOmitFields
parameter_list|()
block|{
return|return
name|omitFields
return|;
block|}
DECL|method|setOmitFields (Map<String, String[]> omitFields)
specifier|public
name|void
name|setOmitFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|omitFields
parameter_list|)
block|{
name|this
operator|.
name|omitFields
operator|=
name|omitFields
expr_stmt|;
block|}
DECL|method|getImplicitCollections ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|getImplicitCollections
parameter_list|()
block|{
return|return
name|implicitCollections
return|;
block|}
DECL|method|setImplicitCollections (Map<String, String[]> implicitCollections)
specifier|public
name|void
name|setImplicitCollections
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|implicitCollections
parameter_list|)
block|{
name|this
operator|.
name|implicitCollections
operator|=
name|implicitCollections
expr_stmt|;
block|}
DECL|method|getContentTypeHeader ()
specifier|public
name|Boolean
name|getContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
DECL|method|setContentTypeHeader (Boolean contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|Boolean
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
block|}
end_class

end_unit

