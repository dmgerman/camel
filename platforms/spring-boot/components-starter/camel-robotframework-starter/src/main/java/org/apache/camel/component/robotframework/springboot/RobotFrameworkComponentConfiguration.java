begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.robotframework.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|robotframework
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * Represents a RobotFramework endpoint.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.robotframework"
argument_list|)
DECL|class|RobotFrameworkComponentConfiguration
specifier|public
class|class
name|RobotFrameworkComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the robotframework component.      * This is enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * The configuration      */
DECL|field|configuration
specifier|private
name|RobotFrameworkCamelConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|RobotFrameworkCamelConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( RobotFrameworkCamelConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|RobotFrameworkCamelConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|class|RobotFrameworkCamelConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|RobotFrameworkCamelConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|robotframework
operator|.
name|RobotFrameworkCamelConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * Sets the name of the top-level tests suites.          */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**          * Sets the documentation of the top-level tests suites.          */
DECL|field|document
specifier|private
name|String
name|document
decl_stmt|;
comment|/**          * Sets free metadata for the top level tests suites. comma seperated          * list of string resulting as List<String>          */
DECL|field|metadata
specifier|private
name|String
name|metadata
decl_stmt|;
comment|/**          * Sets the tags(s) to all executed tests cases. List<String>          */
DECL|field|tags
specifier|private
name|String
name|tags
decl_stmt|;
comment|/**          * Selects the tests cases by name. List<String>          */
DECL|field|tests
specifier|private
name|String
name|tests
decl_stmt|;
comment|/**          * Selects the tests suites by name. List<String>          */
DECL|field|suites
specifier|private
name|String
name|suites
decl_stmt|;
comment|/**          * Selects the tests cases by tags. List<String>          */
DECL|field|includes
specifier|private
name|String
name|includes
decl_stmt|;
comment|/**          * Selects the tests cases by tags. List<String>          */
DECL|field|excludes
specifier|private
name|String
name|excludes
decl_stmt|;
comment|/**          * Tests that have the given tags are considered critical. List<String>          */
DECL|field|criticalTags
specifier|private
name|String
name|criticalTags
decl_stmt|;
comment|/**          * Tests that have the given tags are not critical. List<String>          */
DECL|field|nonCriticalTags
specifier|private
name|String
name|nonCriticalTags
decl_stmt|;
comment|/**          * Sets the execution mode for this tests run. Note that this setting          * has been deprecated in Robot Framework 2.8. Use separate dryryn,          * skipTeardownOnExit, exitOnFailure, and randomize settings instead.          */
DECL|field|runMode
specifier|private
name|String
name|runMode
decl_stmt|;
comment|/**          * Sets dryrun mode on use. In the dry run mode tests are run without          * executing keywords originating from test libraries. Useful for          * validating test data syntax.          */
DECL|field|dryrun
specifier|private
name|Boolean
name|dryrun
init|=
literal|false
decl_stmt|;
comment|/**          * Sets whether the teardowns are skipped if the test execution is          * prematurely stopped.          */
DECL|field|skipTeardownOnExit
specifier|private
name|Boolean
name|skipTeardownOnExit
init|=
literal|false
decl_stmt|;
comment|/**          * Sets robot to stop execution immediately if a critical test fails.          */
DECL|field|exitOnFailure
specifier|private
name|Boolean
name|exitOnFailure
init|=
literal|false
decl_stmt|;
comment|/**          * Sets the test execution order to be randomized. Valid values are all,          * suite, and test          */
DECL|field|randomize
specifier|private
name|String
name|randomize
decl_stmt|;
comment|/**          * Sets individual variables. Use the format "name:value" List<String>          */
DECL|field|variables
specifier|private
name|String
name|variables
decl_stmt|;
comment|/**          * Sets variables using variables files. Use the format "path:args"          * List<String>          */
DECL|field|variableFiles
specifier|private
name|String
name|variableFiles
decl_stmt|;
comment|/**          * Configures where generated reports are to be placed.          */
DECL|field|outputDirectory
specifier|private
name|File
name|outputDirectory
decl_stmt|;
comment|/**          * Sets the path to the generated output file.          */
DECL|field|output
specifier|private
name|File
name|output
decl_stmt|;
comment|/**          * Sets the path to the generated log file.          */
DECL|field|log
specifier|private
name|File
name|log
decl_stmt|;
comment|/**          * Sets the path to the generated report file.          */
DECL|field|report
specifier|private
name|File
name|report
decl_stmt|;
comment|/**          * Sets the path to the generated XUnit compatible result file, relative          * to outputDirectory. The file is in xml format. By default, the file          * name is derived from the testCasesDirectory parameter, replacing          * blanks in the directory name by underscores.          */
DECL|field|xunitFile
specifier|private
name|File
name|xunitFile
decl_stmt|;
comment|/**          * A debug file that is written during execution.          */
DECL|field|debugFile
specifier|private
name|File
name|debugFile
decl_stmt|;
comment|/**          * Adds a timestamp to all output files.          */
DECL|field|timestampOutputs
specifier|private
name|Boolean
name|timestampOutputs
init|=
literal|false
decl_stmt|;
comment|/**          * Splits output and log files.          */
DECL|field|splitOutputs
specifier|private
name|String
name|splitOutputs
decl_stmt|;
comment|/**          * Sets a title for the generated tests log.          */
DECL|field|logTitle
specifier|private
name|String
name|logTitle
decl_stmt|;
comment|/**          * Sets a title for the generated tests report.          */
DECL|field|reportTitle
specifier|private
name|String
name|reportTitle
decl_stmt|;
comment|/**          * Sets a title for the generated summary report.          */
DECL|field|summaryTitle
specifier|private
name|String
name|summaryTitle
decl_stmt|;
comment|/**          * Sets background colors for the generated report and summary.          */
DECL|field|reportBackground
specifier|private
name|String
name|reportBackground
decl_stmt|;
comment|/**          * Sets the threshold level for logging.          */
DECL|field|logLevel
specifier|private
name|String
name|logLevel
decl_stmt|;
comment|/**          * Defines how many levels to show in the Statistics by Suite table in          * outputs.          */
DECL|field|suiteStatLevel
specifier|private
name|String
name|suiteStatLevel
decl_stmt|;
comment|/**          * Includes only these tags in the Statistics by Tag and Test Details by          * Tag tables in outputs. List<String>          */
DECL|field|tagStatIncludes
specifier|private
name|String
name|tagStatIncludes
decl_stmt|;
comment|/**          * Excludes these tags from the Statistics by Tag and Test Details by          * Tag tables in outputs. List<String>          */
DECL|field|tagStatExcludes
specifier|private
name|String
name|tagStatExcludes
decl_stmt|;
comment|/**          * Creates combined statistics based on tags. Use the format          * "tags:title" List<String>          */
DECL|field|combinedTagStats
specifier|private
name|String
name|combinedTagStats
decl_stmt|;
comment|/**          * Adds documentation to the specified tags. List<String>          */
DECL|field|tagDocs
specifier|private
name|String
name|tagDocs
decl_stmt|;
comment|/**          * Adds external links to the Statistics by Tag table in outputs. Use          * the format "pattern:link:title" List<String>          */
DECL|field|tagStatLinks
specifier|private
name|String
name|tagStatLinks
decl_stmt|;
comment|/**          * Sets multiple listeners for monitoring tests execution. Use the          * format "ListenerWithArgs:arg1:arg2" or simply "ListenerWithoutArgs"          * List<String>          */
DECL|field|listeners
specifier|private
name|String
name|listeners
decl_stmt|;
comment|/**          * Sets a single listener for monitoring tests execution          */
DECL|field|listener
specifier|private
name|String
name|listener
decl_stmt|;
comment|/**          * Show a warning when an invalid file is skipped.          */
DECL|field|warnOnSkippedFiles
specifier|private
name|Boolean
name|warnOnSkippedFiles
init|=
literal|false
decl_stmt|;
comment|/**          * Width of the monitor output. Default is 78.          */
DECL|field|monitorWidth
specifier|private
name|String
name|monitorWidth
init|=
literal|"78"
decl_stmt|;
comment|/**          * Using ANSI colors in console. Normally colors work in unixes but not          * in Windows. Default is 'on'.<ul><li>'on' - use colors in unixes but          * not in Windows</li><li>'off' - never use colors</li><li>'force' -          * always use colors (also in Windows)</li></ul>          */
DECL|field|monitorColors
specifier|private
name|String
name|monitorColors
decl_stmt|;
comment|/**          * A text file to read more arguments from.          */
DECL|field|argumentFile
specifier|private
name|File
name|argumentFile
decl_stmt|;
comment|/**          * Executes tests also if the top level test suite is empty. Useful e.g.          * with --include/--exclude when it is not an error that no test matches          * the condition.          */
DECL|field|runEmptySuite
specifier|private
name|Boolean
name|runEmptySuite
init|=
literal|false
decl_stmt|;
comment|/**          * Re-run failed tests, based on output.xml file.          */
DECL|field|runFailed
specifier|private
name|File
name|runFailed
decl_stmt|;
comment|/**          * If true, sets the return code to zero regardless of failures in test          * cases. Error codes are returned normally.          */
DECL|field|noStatusReturnCode
specifier|private
name|Boolean
name|noStatusReturnCode
init|=
literal|false
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getDocument ()
specifier|public
name|String
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
DECL|method|setDocument (String document)
specifier|public
name|void
name|setDocument
parameter_list|(
name|String
name|document
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
block|}
DECL|method|getMetadata ()
specifier|public
name|String
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
DECL|method|setMetadata (String metadata)
specifier|public
name|void
name|setMetadata
parameter_list|(
name|String
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
DECL|method|getTags ()
specifier|public
name|String
name|getTags
parameter_list|()
block|{
return|return
name|tags
return|;
block|}
DECL|method|setTags (String tags)
specifier|public
name|void
name|setTags
parameter_list|(
name|String
name|tags
parameter_list|)
block|{
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
block|}
DECL|method|getTests ()
specifier|public
name|String
name|getTests
parameter_list|()
block|{
return|return
name|tests
return|;
block|}
DECL|method|setTests (String tests)
specifier|public
name|void
name|setTests
parameter_list|(
name|String
name|tests
parameter_list|)
block|{
name|this
operator|.
name|tests
operator|=
name|tests
expr_stmt|;
block|}
DECL|method|getSuites ()
specifier|public
name|String
name|getSuites
parameter_list|()
block|{
return|return
name|suites
return|;
block|}
DECL|method|setSuites (String suites)
specifier|public
name|void
name|setSuites
parameter_list|(
name|String
name|suites
parameter_list|)
block|{
name|this
operator|.
name|suites
operator|=
name|suites
expr_stmt|;
block|}
DECL|method|getIncludes ()
specifier|public
name|String
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
DECL|method|setIncludes (String includes)
specifier|public
name|void
name|setIncludes
parameter_list|(
name|String
name|includes
parameter_list|)
block|{
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
block|}
DECL|method|getExcludes ()
specifier|public
name|String
name|getExcludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
DECL|method|setExcludes (String excludes)
specifier|public
name|void
name|setExcludes
parameter_list|(
name|String
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|excludes
operator|=
name|excludes
expr_stmt|;
block|}
DECL|method|getCriticalTags ()
specifier|public
name|String
name|getCriticalTags
parameter_list|()
block|{
return|return
name|criticalTags
return|;
block|}
DECL|method|setCriticalTags (String criticalTags)
specifier|public
name|void
name|setCriticalTags
parameter_list|(
name|String
name|criticalTags
parameter_list|)
block|{
name|this
operator|.
name|criticalTags
operator|=
name|criticalTags
expr_stmt|;
block|}
DECL|method|getNonCriticalTags ()
specifier|public
name|String
name|getNonCriticalTags
parameter_list|()
block|{
return|return
name|nonCriticalTags
return|;
block|}
DECL|method|setNonCriticalTags (String nonCriticalTags)
specifier|public
name|void
name|setNonCriticalTags
parameter_list|(
name|String
name|nonCriticalTags
parameter_list|)
block|{
name|this
operator|.
name|nonCriticalTags
operator|=
name|nonCriticalTags
expr_stmt|;
block|}
DECL|method|getRunMode ()
specifier|public
name|String
name|getRunMode
parameter_list|()
block|{
return|return
name|runMode
return|;
block|}
DECL|method|setRunMode (String runMode)
specifier|public
name|void
name|setRunMode
parameter_list|(
name|String
name|runMode
parameter_list|)
block|{
name|this
operator|.
name|runMode
operator|=
name|runMode
expr_stmt|;
block|}
DECL|method|getDryrun ()
specifier|public
name|Boolean
name|getDryrun
parameter_list|()
block|{
return|return
name|dryrun
return|;
block|}
DECL|method|setDryrun (Boolean dryrun)
specifier|public
name|void
name|setDryrun
parameter_list|(
name|Boolean
name|dryrun
parameter_list|)
block|{
name|this
operator|.
name|dryrun
operator|=
name|dryrun
expr_stmt|;
block|}
DECL|method|getSkipTeardownOnExit ()
specifier|public
name|Boolean
name|getSkipTeardownOnExit
parameter_list|()
block|{
return|return
name|skipTeardownOnExit
return|;
block|}
DECL|method|setSkipTeardownOnExit (Boolean skipTeardownOnExit)
specifier|public
name|void
name|setSkipTeardownOnExit
parameter_list|(
name|Boolean
name|skipTeardownOnExit
parameter_list|)
block|{
name|this
operator|.
name|skipTeardownOnExit
operator|=
name|skipTeardownOnExit
expr_stmt|;
block|}
DECL|method|getExitOnFailure ()
specifier|public
name|Boolean
name|getExitOnFailure
parameter_list|()
block|{
return|return
name|exitOnFailure
return|;
block|}
DECL|method|setExitOnFailure (Boolean exitOnFailure)
specifier|public
name|void
name|setExitOnFailure
parameter_list|(
name|Boolean
name|exitOnFailure
parameter_list|)
block|{
name|this
operator|.
name|exitOnFailure
operator|=
name|exitOnFailure
expr_stmt|;
block|}
DECL|method|getRandomize ()
specifier|public
name|String
name|getRandomize
parameter_list|()
block|{
return|return
name|randomize
return|;
block|}
DECL|method|setRandomize (String randomize)
specifier|public
name|void
name|setRandomize
parameter_list|(
name|String
name|randomize
parameter_list|)
block|{
name|this
operator|.
name|randomize
operator|=
name|randomize
expr_stmt|;
block|}
DECL|method|getVariables ()
specifier|public
name|String
name|getVariables
parameter_list|()
block|{
return|return
name|variables
return|;
block|}
DECL|method|setVariables (String variables)
specifier|public
name|void
name|setVariables
parameter_list|(
name|String
name|variables
parameter_list|)
block|{
name|this
operator|.
name|variables
operator|=
name|variables
expr_stmt|;
block|}
DECL|method|getVariableFiles ()
specifier|public
name|String
name|getVariableFiles
parameter_list|()
block|{
return|return
name|variableFiles
return|;
block|}
DECL|method|setVariableFiles (String variableFiles)
specifier|public
name|void
name|setVariableFiles
parameter_list|(
name|String
name|variableFiles
parameter_list|)
block|{
name|this
operator|.
name|variableFiles
operator|=
name|variableFiles
expr_stmt|;
block|}
DECL|method|getOutputDirectory ()
specifier|public
name|File
name|getOutputDirectory
parameter_list|()
block|{
return|return
name|outputDirectory
return|;
block|}
DECL|method|setOutputDirectory (File outputDirectory)
specifier|public
name|void
name|setOutputDirectory
parameter_list|(
name|File
name|outputDirectory
parameter_list|)
block|{
name|this
operator|.
name|outputDirectory
operator|=
name|outputDirectory
expr_stmt|;
block|}
DECL|method|getOutput ()
specifier|public
name|File
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
DECL|method|setOutput (File output)
specifier|public
name|void
name|setOutput
parameter_list|(
name|File
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
DECL|method|getLog ()
specifier|public
name|File
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
DECL|method|setLog (File log)
specifier|public
name|void
name|setLog
parameter_list|(
name|File
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|getReport ()
specifier|public
name|File
name|getReport
parameter_list|()
block|{
return|return
name|report
return|;
block|}
DECL|method|setReport (File report)
specifier|public
name|void
name|setReport
parameter_list|(
name|File
name|report
parameter_list|)
block|{
name|this
operator|.
name|report
operator|=
name|report
expr_stmt|;
block|}
DECL|method|getXunitFile ()
specifier|public
name|File
name|getXunitFile
parameter_list|()
block|{
return|return
name|xunitFile
return|;
block|}
DECL|method|setXunitFile (File xunitFile)
specifier|public
name|void
name|setXunitFile
parameter_list|(
name|File
name|xunitFile
parameter_list|)
block|{
name|this
operator|.
name|xunitFile
operator|=
name|xunitFile
expr_stmt|;
block|}
DECL|method|getDebugFile ()
specifier|public
name|File
name|getDebugFile
parameter_list|()
block|{
return|return
name|debugFile
return|;
block|}
DECL|method|setDebugFile (File debugFile)
specifier|public
name|void
name|setDebugFile
parameter_list|(
name|File
name|debugFile
parameter_list|)
block|{
name|this
operator|.
name|debugFile
operator|=
name|debugFile
expr_stmt|;
block|}
DECL|method|getTimestampOutputs ()
specifier|public
name|Boolean
name|getTimestampOutputs
parameter_list|()
block|{
return|return
name|timestampOutputs
return|;
block|}
DECL|method|setTimestampOutputs (Boolean timestampOutputs)
specifier|public
name|void
name|setTimestampOutputs
parameter_list|(
name|Boolean
name|timestampOutputs
parameter_list|)
block|{
name|this
operator|.
name|timestampOutputs
operator|=
name|timestampOutputs
expr_stmt|;
block|}
DECL|method|getSplitOutputs ()
specifier|public
name|String
name|getSplitOutputs
parameter_list|()
block|{
return|return
name|splitOutputs
return|;
block|}
DECL|method|setSplitOutputs (String splitOutputs)
specifier|public
name|void
name|setSplitOutputs
parameter_list|(
name|String
name|splitOutputs
parameter_list|)
block|{
name|this
operator|.
name|splitOutputs
operator|=
name|splitOutputs
expr_stmt|;
block|}
DECL|method|getLogTitle ()
specifier|public
name|String
name|getLogTitle
parameter_list|()
block|{
return|return
name|logTitle
return|;
block|}
DECL|method|setLogTitle (String logTitle)
specifier|public
name|void
name|setLogTitle
parameter_list|(
name|String
name|logTitle
parameter_list|)
block|{
name|this
operator|.
name|logTitle
operator|=
name|logTitle
expr_stmt|;
block|}
DECL|method|getReportTitle ()
specifier|public
name|String
name|getReportTitle
parameter_list|()
block|{
return|return
name|reportTitle
return|;
block|}
DECL|method|setReportTitle (String reportTitle)
specifier|public
name|void
name|setReportTitle
parameter_list|(
name|String
name|reportTitle
parameter_list|)
block|{
name|this
operator|.
name|reportTitle
operator|=
name|reportTitle
expr_stmt|;
block|}
DECL|method|getSummaryTitle ()
specifier|public
name|String
name|getSummaryTitle
parameter_list|()
block|{
return|return
name|summaryTitle
return|;
block|}
DECL|method|setSummaryTitle (String summaryTitle)
specifier|public
name|void
name|setSummaryTitle
parameter_list|(
name|String
name|summaryTitle
parameter_list|)
block|{
name|this
operator|.
name|summaryTitle
operator|=
name|summaryTitle
expr_stmt|;
block|}
DECL|method|getReportBackground ()
specifier|public
name|String
name|getReportBackground
parameter_list|()
block|{
return|return
name|reportBackground
return|;
block|}
DECL|method|setReportBackground (String reportBackground)
specifier|public
name|void
name|setReportBackground
parameter_list|(
name|String
name|reportBackground
parameter_list|)
block|{
name|this
operator|.
name|reportBackground
operator|=
name|reportBackground
expr_stmt|;
block|}
DECL|method|getLogLevel ()
specifier|public
name|String
name|getLogLevel
parameter_list|()
block|{
return|return
name|logLevel
return|;
block|}
DECL|method|setLogLevel (String logLevel)
specifier|public
name|void
name|setLogLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|this
operator|.
name|logLevel
operator|=
name|logLevel
expr_stmt|;
block|}
DECL|method|getSuiteStatLevel ()
specifier|public
name|String
name|getSuiteStatLevel
parameter_list|()
block|{
return|return
name|suiteStatLevel
return|;
block|}
DECL|method|setSuiteStatLevel (String suiteStatLevel)
specifier|public
name|void
name|setSuiteStatLevel
parameter_list|(
name|String
name|suiteStatLevel
parameter_list|)
block|{
name|this
operator|.
name|suiteStatLevel
operator|=
name|suiteStatLevel
expr_stmt|;
block|}
DECL|method|getTagStatIncludes ()
specifier|public
name|String
name|getTagStatIncludes
parameter_list|()
block|{
return|return
name|tagStatIncludes
return|;
block|}
DECL|method|setTagStatIncludes (String tagStatIncludes)
specifier|public
name|void
name|setTagStatIncludes
parameter_list|(
name|String
name|tagStatIncludes
parameter_list|)
block|{
name|this
operator|.
name|tagStatIncludes
operator|=
name|tagStatIncludes
expr_stmt|;
block|}
DECL|method|getTagStatExcludes ()
specifier|public
name|String
name|getTagStatExcludes
parameter_list|()
block|{
return|return
name|tagStatExcludes
return|;
block|}
DECL|method|setTagStatExcludes (String tagStatExcludes)
specifier|public
name|void
name|setTagStatExcludes
parameter_list|(
name|String
name|tagStatExcludes
parameter_list|)
block|{
name|this
operator|.
name|tagStatExcludes
operator|=
name|tagStatExcludes
expr_stmt|;
block|}
DECL|method|getCombinedTagStats ()
specifier|public
name|String
name|getCombinedTagStats
parameter_list|()
block|{
return|return
name|combinedTagStats
return|;
block|}
DECL|method|setCombinedTagStats (String combinedTagStats)
specifier|public
name|void
name|setCombinedTagStats
parameter_list|(
name|String
name|combinedTagStats
parameter_list|)
block|{
name|this
operator|.
name|combinedTagStats
operator|=
name|combinedTagStats
expr_stmt|;
block|}
DECL|method|getTagDocs ()
specifier|public
name|String
name|getTagDocs
parameter_list|()
block|{
return|return
name|tagDocs
return|;
block|}
DECL|method|setTagDocs (String tagDocs)
specifier|public
name|void
name|setTagDocs
parameter_list|(
name|String
name|tagDocs
parameter_list|)
block|{
name|this
operator|.
name|tagDocs
operator|=
name|tagDocs
expr_stmt|;
block|}
DECL|method|getTagStatLinks ()
specifier|public
name|String
name|getTagStatLinks
parameter_list|()
block|{
return|return
name|tagStatLinks
return|;
block|}
DECL|method|setTagStatLinks (String tagStatLinks)
specifier|public
name|void
name|setTagStatLinks
parameter_list|(
name|String
name|tagStatLinks
parameter_list|)
block|{
name|this
operator|.
name|tagStatLinks
operator|=
name|tagStatLinks
expr_stmt|;
block|}
DECL|method|getListeners ()
specifier|public
name|String
name|getListeners
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
DECL|method|setListeners (String listeners)
specifier|public
name|void
name|setListeners
parameter_list|(
name|String
name|listeners
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|=
name|listeners
expr_stmt|;
block|}
DECL|method|getListener ()
specifier|public
name|String
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
DECL|method|setListener (String listener)
specifier|public
name|void
name|setListener
parameter_list|(
name|String
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
DECL|method|getWarnOnSkippedFiles ()
specifier|public
name|Boolean
name|getWarnOnSkippedFiles
parameter_list|()
block|{
return|return
name|warnOnSkippedFiles
return|;
block|}
DECL|method|setWarnOnSkippedFiles (Boolean warnOnSkippedFiles)
specifier|public
name|void
name|setWarnOnSkippedFiles
parameter_list|(
name|Boolean
name|warnOnSkippedFiles
parameter_list|)
block|{
name|this
operator|.
name|warnOnSkippedFiles
operator|=
name|warnOnSkippedFiles
expr_stmt|;
block|}
DECL|method|getMonitorWidth ()
specifier|public
name|String
name|getMonitorWidth
parameter_list|()
block|{
return|return
name|monitorWidth
return|;
block|}
DECL|method|setMonitorWidth (String monitorWidth)
specifier|public
name|void
name|setMonitorWidth
parameter_list|(
name|String
name|monitorWidth
parameter_list|)
block|{
name|this
operator|.
name|monitorWidth
operator|=
name|monitorWidth
expr_stmt|;
block|}
DECL|method|getMonitorColors ()
specifier|public
name|String
name|getMonitorColors
parameter_list|()
block|{
return|return
name|monitorColors
return|;
block|}
DECL|method|setMonitorColors (String monitorColors)
specifier|public
name|void
name|setMonitorColors
parameter_list|(
name|String
name|monitorColors
parameter_list|)
block|{
name|this
operator|.
name|monitorColors
operator|=
name|monitorColors
expr_stmt|;
block|}
DECL|method|getArgumentFile ()
specifier|public
name|File
name|getArgumentFile
parameter_list|()
block|{
return|return
name|argumentFile
return|;
block|}
DECL|method|setArgumentFile (File argumentFile)
specifier|public
name|void
name|setArgumentFile
parameter_list|(
name|File
name|argumentFile
parameter_list|)
block|{
name|this
operator|.
name|argumentFile
operator|=
name|argumentFile
expr_stmt|;
block|}
DECL|method|getRunEmptySuite ()
specifier|public
name|Boolean
name|getRunEmptySuite
parameter_list|()
block|{
return|return
name|runEmptySuite
return|;
block|}
DECL|method|setRunEmptySuite (Boolean runEmptySuite)
specifier|public
name|void
name|setRunEmptySuite
parameter_list|(
name|Boolean
name|runEmptySuite
parameter_list|)
block|{
name|this
operator|.
name|runEmptySuite
operator|=
name|runEmptySuite
expr_stmt|;
block|}
DECL|method|getRunFailed ()
specifier|public
name|File
name|getRunFailed
parameter_list|()
block|{
return|return
name|runFailed
return|;
block|}
DECL|method|setRunFailed (File runFailed)
specifier|public
name|void
name|setRunFailed
parameter_list|(
name|File
name|runFailed
parameter_list|)
block|{
name|this
operator|.
name|runFailed
operator|=
name|runFailed
expr_stmt|;
block|}
DECL|method|getNoStatusReturnCode ()
specifier|public
name|Boolean
name|getNoStatusReturnCode
parameter_list|()
block|{
return|return
name|noStatusReturnCode
return|;
block|}
DECL|method|setNoStatusReturnCode (Boolean noStatusReturnCode)
specifier|public
name|void
name|setNoStatusReturnCode
parameter_list|(
name|Boolean
name|noStatusReturnCode
parameter_list|)
block|{
name|this
operator|.
name|noStatusReturnCode
operator|=
name|noStatusReturnCode
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

