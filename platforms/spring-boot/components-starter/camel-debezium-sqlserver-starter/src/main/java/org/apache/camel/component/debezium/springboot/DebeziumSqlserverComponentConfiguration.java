begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium SQL Server endpoint which is used to capture changes in  * SQL Server database so that that applications can see those changes and  * respond to them.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.debezium-sqlserver"
argument_list|)
DECL|class|DebeziumSqlserverComponentConfiguration
specifier|public
class|class
name|DebeziumSqlserverComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the debezium-sqlserver component.      * This is enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * Allow pre-configured Configurations to be set.      */
DECL|field|configuration
specifier|private
name|SqlServerConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|SqlServerConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( SqlServerConnectorEmbeddedDebeziumConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|SqlServerConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|class|SqlServerConnectorEmbeddedDebeziumConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|SqlServerConnectorEmbeddedDebeziumConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|SqlServerConnectorEmbeddedDebeziumConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * A semicolon-separated list of expressions that match fully-qualified          * tables and column(s) to be used as message key. Each expression must          * match the pattern '<fully-qualified table name>:<key columns>',where          * the table names could be defined as (DB_NAME.TABLE_NAME) or          * (SCHEMA_NAME.TABLE_NAME), depending on the specific connector,and the          * key columns are a comma-separated list of columns representing the          * custom key. For any table without an explicit key configuration the          * table's primary key column(s) will be used as message key.Example:          * dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id          */
DECL|field|messageKeyColumns
specifier|private
name|String
name|messageKeyColumns
decl_stmt|;
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          */
DECL|field|maxQueueSize
specifier|private
name|Integer
name|maxQueueSize
init|=
literal|8192
decl_stmt|;
comment|/**          * The name of the topic for the database schema history          */
DECL|field|databaseHistoryKafkaTopic
specifier|private
name|String
name|databaseHistoryKafkaTopic
decl_stmt|;
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'column.blacklist' description.          */
DECL|field|columnBlacklist
specifier|private
name|String
name|columnBlacklist
decl_stmt|;
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          */
DECL|field|snapshotDelayMs
specifier|private
name|Long
name|snapshotDelayMs
init|=
literal|0L
decl_stmt|;
comment|/**          * The number of attempts in a row that no data are returned from Kafka          * before recover completes. The maximum amount of time to wait after          * receiving no data is (recovery.attempts) x          * (recovery.poll.interval.ms).          */
DECL|field|databaseHistoryKafkaRecoveryAttempts
specifier|private
name|Integer
name|databaseHistoryKafkaRecoveryAttempts
init|=
literal|100
decl_stmt|;
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'table.blacklist' description.          */
DECL|field|tableBlacklist
specifier|private
name|String
name|tableBlacklist
decl_stmt|;
comment|/**          * The tables for which changes are to be captured          */
DECL|field|tableWhitelist
specifier|private
name|String
name|tableWhitelist
decl_stmt|;
comment|/**          * Specify how DECIMAL and NUMERIC columns should be represented in          * change events, including:'precise' (the default) uses          * java.math.BigDecimal to represent values, which are encoded in the          * change events using a binary representation and Kafka Connect's          * 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to          * represent values; 'double' represents values using Java's 'double',          * which may not offer the precision but will be far easier to use in          * consumers.          */
DECL|field|decimalHandlingMode
specifier|private
name|String
name|decimalHandlingMode
init|=
literal|"precise"
decl_stmt|;
comment|/**          * The number of milliseconds to wait while polling for persisted data          * during recovery.          */
DECL|field|databaseHistoryKafkaRecoveryPollIntervalMs
specifier|private
name|Integer
name|databaseHistoryKafkaRecoveryPollIntervalMs
init|=
literal|100
decl_stmt|;
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          */
DECL|field|pollIntervalMs
specifier|private
name|Long
name|pollIntervalMs
init|=
literal|500L
decl_stmt|;
comment|/**          * The prefix that is used to name heartbeat topics.Defaults to          * __debezium-heartbeat.          */
DECL|field|heartbeatTopicsPrefix
specifier|private
name|String
name|heartbeatTopicsPrefix
init|=
literal|"__debezium-heartbeat"
decl_stmt|;
comment|/**          * Flag specifying whether built-in tables should be ignored.          */
DECL|field|tableIgnoreBuiltin
specifier|private
name|Boolean
name|tableIgnoreBuiltin
init|=
literal|true
decl_stmt|;
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot          */
DECL|field|snapshotFetchSize
specifier|private
name|Integer
name|snapshotFetchSize
decl_stmt|;
comment|/**          * The maximum number of millis to wait for table locks at the beginning          * of a snapshot. If locks cannot be acquired in this time frame, the          * snapshot will be aborted. Defaults to 10 seconds          */
DECL|field|snapshotLockTimeoutMs
specifier|private
name|Long
name|snapshotLockTimeoutMs
init|=
literal|10000L
decl_stmt|;
comment|/**          * The path to the file that will be used to record the database history          */
DECL|field|databaseHistoryFileFilename
specifier|private
name|String
name|databaseHistoryFileFilename
decl_stmt|;
comment|/**          * The name of the database the connector should be monitoring. When          * working with a multi-tenant set-up, must be set to the CDB name.          */
DECL|field|databaseDbname
specifier|private
name|String
name|databaseDbname
decl_stmt|;
comment|/**          * Name of the SQL Server database user to be used when connecting to          * the database.          */
DECL|field|databaseUser
specifier|private
name|String
name|databaseUser
decl_stmt|;
comment|/**          * This property contains a comma-separated list of fully-qualified          * tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on          * thespecific connectors . Select statements for the individual tables          * are specified in further configuration properties, one for each          * table, identified by the id          * 'snapshot.select.statement.overrides.[DB_NAME].[TABLE_NAME]' or          * 'snapshot.select.statement.overrides.[SCHEMA_NAME].[TABLE_NAME]',          * respectively. The value of those properties is the select statement          * to use when retrieving data from the specific table during          * snapshotting. A possible use case for large append-only tables is          * setting a specific point where to start (resume) snapshotting, in          * case a previous snapshotting was interrupted.          */
DECL|field|snapshotSelectStatementOverrides
specifier|private
name|String
name|snapshotSelectStatementOverrides
decl_stmt|;
comment|/**          * A list of host/port pairs that the connector will use for          * establishing the initial connection to the Kafka cluster for          * retrieving database schema history previously stored by the          * connector. This should point to the same Kafka cluster used by the          * Kafka Connect process.          */
DECL|field|databaseHistoryKafkaBootstrapServers
specifier|private
name|String
name|databaseHistoryKafkaBootstrapServers
decl_stmt|;
comment|/**          * Time, date, and timestamps can be represented with different kinds of          * precisions, including:'adaptive' (the default) bases the precision of          * time, date, and timestamp values on the database column's precision;          * 'adaptive_time_microseconds' like 'adaptive' mode, but TIME fields          * always use microseconds precision;'connect' always represents time,          * date, and timestamp values using Kafka Connect's built-in          * representations for Time, Date, and Timestamp, which uses millisecond          * precision regardless of the database columns' precision .          */
DECL|field|timePrecisionMode
specifier|private
name|String
name|timePrecisionMode
init|=
literal|"adaptive"
decl_stmt|;
comment|/**          * Unique name that identifies the database server and all recorded          * offsets, and that is used as a prefix for all schemas and topics.          * Each distinct installation should have a separate namespace and be          * monitored by at most one Debezium connector.          */
DECL|field|databaseServerName
specifier|private
name|String
name|databaseServerName
decl_stmt|;
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          */
DECL|field|heartbeatIntervalMs
specifier|private
name|Integer
name|heartbeatIntervalMs
init|=
literal|0
decl_stmt|;
comment|/**          * A version of the format of the publicly visible source part in the          * message          */
DECL|field|sourceStructVersion
specifier|private
name|String
name|sourceStructVersion
init|=
literal|"v2"
decl_stmt|;
comment|/**          * Port of the SQL Server database server.          */
DECL|field|databasePort
specifier|private
name|Integer
name|databasePort
init|=
literal|1433
decl_stmt|;
comment|/**          * Resolvable hostname or IP address of the SQL Server database server.          */
DECL|field|databaseHostname
specifier|private
name|String
name|databaseHostname
decl_stmt|;
comment|/**          * Password of the SQL Server database user to be used when connecting          * to the database.          */
DECL|field|databasePassword
specifier|private
name|String
name|databasePassword
decl_stmt|;
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          */
DECL|field|maxBatchSize
specifier|private
name|Integer
name|maxBatchSize
init|=
literal|2048
decl_stmt|;
comment|/**          * The criteria for running a snapshot upon startup of the connector.          * Options include: 'initial' (the default) to specify the connector          * should run a snapshot only when no offsets are available for the          * logical server name; 'initial_schema_only' to specify the connector          * should run a snapshot of the schema when no offsets are available for          * the logical server name.          */
DECL|field|snapshotMode
specifier|private
name|String
name|snapshotMode
init|=
literal|"initial"
decl_stmt|;
comment|/**          * The name of the DatabaseHistory class that should be used to store          * and recover database schema changes. The configuration properties for          * the history are prefixed with the 'database.history.' string.          */
DECL|field|databaseHistory
specifier|private
name|String
name|databaseHistory
init|=
literal|"io.debezium.relational.history.FileDatabaseHistory"
decl_stmt|;
comment|/**          * The name of the Java class for the connector          */
DECL|field|connectorClass
specifier|private
name|Class
name|connectorClass
decl_stmt|;
comment|/**          * Unique name for the connector. Attempting to register again with the          * same name will fail.          */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**          * The name of the Java class that is responsible for persistence of          * connector offsets.          */
DECL|field|offsetStorage
specifier|private
name|String
name|offsetStorage
init|=
literal|"org.apache.kafka.connect.storage.FileOffsetBackingStore"
decl_stmt|;
comment|/**          * Path to file where offsets are to be stored. Required when          * offset.storage is set to the FileOffsetBackingStore          */
DECL|field|offsetStorageFileName
specifier|private
name|String
name|offsetStorageFileName
decl_stmt|;
comment|/**          * The name of the Kafka topic where offsets are to be stored. Required          * when offset.storage is set to the KafkaOffsetBackingStore.          */
DECL|field|offsetStorageTopic
specifier|private
name|String
name|offsetStorageTopic
decl_stmt|;
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore          */
DECL|field|offsetStorageReplicationFactor
specifier|private
name|Integer
name|offsetStorageReplicationFactor
decl_stmt|;
comment|/**          * The name of the Java class of the commit policy. It defines when          * offsets commit has to be triggered based on the number of events          * processed and the time elapsed since the last commit. This class must          * implement the interface 'OffsetCommitPolicy'. The default is a          * periodic commit policy based upon time intervals.          */
DECL|field|offsetCommitPolicy
specifier|private
name|String
name|offsetCommitPolicy
init|=
literal|"io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy"
decl_stmt|;
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          */
DECL|field|offsetFlushIntervalMs
specifier|private
name|Long
name|offsetFlushIntervalMs
init|=
literal|60000L
decl_stmt|;
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          */
DECL|field|offsetCommitTimeoutMs
specifier|private
name|Long
name|offsetCommitTimeoutMs
init|=
literal|5000L
decl_stmt|;
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          */
DECL|field|offsetStoragePartitions
specifier|private
name|Integer
name|offsetStoragePartitions
decl_stmt|;
comment|/**          * The Converter class that should be used to serialize and deserialize          * key data for offsets. The default is JSON converter.          */
DECL|field|internalKeyConverter
specifier|private
name|String
name|internalKeyConverter
init|=
literal|"org.apache.kafka.connect.json.JsonConverter"
decl_stmt|;
comment|/**          * The Converter class that should be used to serialize and deserialize          * value data for offsets. The default is JSON converter.          */
DECL|field|internalValueConverter
specifier|private
name|String
name|internalValueConverter
init|=
literal|"org.apache.kafka.connect.json.JsonConverter"
decl_stmt|;
DECL|method|getMessageKeyColumns ()
specifier|public
name|String
name|getMessageKeyColumns
parameter_list|()
block|{
return|return
name|messageKeyColumns
return|;
block|}
DECL|method|setMessageKeyColumns (String messageKeyColumns)
specifier|public
name|void
name|setMessageKeyColumns
parameter_list|(
name|String
name|messageKeyColumns
parameter_list|)
block|{
name|this
operator|.
name|messageKeyColumns
operator|=
name|messageKeyColumns
expr_stmt|;
block|}
DECL|method|getMaxQueueSize ()
specifier|public
name|Integer
name|getMaxQueueSize
parameter_list|()
block|{
return|return
name|maxQueueSize
return|;
block|}
DECL|method|setMaxQueueSize (Integer maxQueueSize)
specifier|public
name|void
name|setMaxQueueSize
parameter_list|(
name|Integer
name|maxQueueSize
parameter_list|)
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|maxQueueSize
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaTopic ()
specifier|public
name|String
name|getDatabaseHistoryKafkaTopic
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaTopic
return|;
block|}
DECL|method|setDatabaseHistoryKafkaTopic ( String databaseHistoryKafkaTopic)
specifier|public
name|void
name|setDatabaseHistoryKafkaTopic
parameter_list|(
name|String
name|databaseHistoryKafkaTopic
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaTopic
operator|=
name|databaseHistoryKafkaTopic
expr_stmt|;
block|}
DECL|method|getColumnBlacklist ()
specifier|public
name|String
name|getColumnBlacklist
parameter_list|()
block|{
return|return
name|columnBlacklist
return|;
block|}
DECL|method|setColumnBlacklist (String columnBlacklist)
specifier|public
name|void
name|setColumnBlacklist
parameter_list|(
name|String
name|columnBlacklist
parameter_list|)
block|{
name|this
operator|.
name|columnBlacklist
operator|=
name|columnBlacklist
expr_stmt|;
block|}
DECL|method|getSnapshotDelayMs ()
specifier|public
name|Long
name|getSnapshotDelayMs
parameter_list|()
block|{
return|return
name|snapshotDelayMs
return|;
block|}
DECL|method|setSnapshotDelayMs (Long snapshotDelayMs)
specifier|public
name|void
name|setSnapshotDelayMs
parameter_list|(
name|Long
name|snapshotDelayMs
parameter_list|)
block|{
name|this
operator|.
name|snapshotDelayMs
operator|=
name|snapshotDelayMs
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaRecoveryAttempts ()
specifier|public
name|Integer
name|getDatabaseHistoryKafkaRecoveryAttempts
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaRecoveryAttempts
return|;
block|}
DECL|method|setDatabaseHistoryKafkaRecoveryAttempts ( Integer databaseHistoryKafkaRecoveryAttempts)
specifier|public
name|void
name|setDatabaseHistoryKafkaRecoveryAttempts
parameter_list|(
name|Integer
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaRecoveryAttempts
operator|=
name|databaseHistoryKafkaRecoveryAttempts
expr_stmt|;
block|}
DECL|method|getTableBlacklist ()
specifier|public
name|String
name|getTableBlacklist
parameter_list|()
block|{
return|return
name|tableBlacklist
return|;
block|}
DECL|method|setTableBlacklist (String tableBlacklist)
specifier|public
name|void
name|setTableBlacklist
parameter_list|(
name|String
name|tableBlacklist
parameter_list|)
block|{
name|this
operator|.
name|tableBlacklist
operator|=
name|tableBlacklist
expr_stmt|;
block|}
DECL|method|getTableWhitelist ()
specifier|public
name|String
name|getTableWhitelist
parameter_list|()
block|{
return|return
name|tableWhitelist
return|;
block|}
DECL|method|setTableWhitelist (String tableWhitelist)
specifier|public
name|void
name|setTableWhitelist
parameter_list|(
name|String
name|tableWhitelist
parameter_list|)
block|{
name|this
operator|.
name|tableWhitelist
operator|=
name|tableWhitelist
expr_stmt|;
block|}
DECL|method|getDecimalHandlingMode ()
specifier|public
name|String
name|getDecimalHandlingMode
parameter_list|()
block|{
return|return
name|decimalHandlingMode
return|;
block|}
DECL|method|setDecimalHandlingMode (String decimalHandlingMode)
specifier|public
name|void
name|setDecimalHandlingMode
parameter_list|(
name|String
name|decimalHandlingMode
parameter_list|)
block|{
name|this
operator|.
name|decimalHandlingMode
operator|=
name|decimalHandlingMode
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaRecoveryPollIntervalMs ()
specifier|public
name|Integer
name|getDatabaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaRecoveryPollIntervalMs
return|;
block|}
DECL|method|setDatabaseHistoryKafkaRecoveryPollIntervalMs ( Integer databaseHistoryKafkaRecoveryPollIntervalMs)
specifier|public
name|void
name|setDatabaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|(
name|Integer
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaRecoveryPollIntervalMs
operator|=
name|databaseHistoryKafkaRecoveryPollIntervalMs
expr_stmt|;
block|}
DECL|method|getPollIntervalMs ()
specifier|public
name|Long
name|getPollIntervalMs
parameter_list|()
block|{
return|return
name|pollIntervalMs
return|;
block|}
DECL|method|setPollIntervalMs (Long pollIntervalMs)
specifier|public
name|void
name|setPollIntervalMs
parameter_list|(
name|Long
name|pollIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|pollIntervalMs
operator|=
name|pollIntervalMs
expr_stmt|;
block|}
DECL|method|getHeartbeatTopicsPrefix ()
specifier|public
name|String
name|getHeartbeatTopicsPrefix
parameter_list|()
block|{
return|return
name|heartbeatTopicsPrefix
return|;
block|}
DECL|method|setHeartbeatTopicsPrefix (String heartbeatTopicsPrefix)
specifier|public
name|void
name|setHeartbeatTopicsPrefix
parameter_list|(
name|String
name|heartbeatTopicsPrefix
parameter_list|)
block|{
name|this
operator|.
name|heartbeatTopicsPrefix
operator|=
name|heartbeatTopicsPrefix
expr_stmt|;
block|}
DECL|method|getTableIgnoreBuiltin ()
specifier|public
name|Boolean
name|getTableIgnoreBuiltin
parameter_list|()
block|{
return|return
name|tableIgnoreBuiltin
return|;
block|}
DECL|method|setTableIgnoreBuiltin (Boolean tableIgnoreBuiltin)
specifier|public
name|void
name|setTableIgnoreBuiltin
parameter_list|(
name|Boolean
name|tableIgnoreBuiltin
parameter_list|)
block|{
name|this
operator|.
name|tableIgnoreBuiltin
operator|=
name|tableIgnoreBuiltin
expr_stmt|;
block|}
DECL|method|getSnapshotFetchSize ()
specifier|public
name|Integer
name|getSnapshotFetchSize
parameter_list|()
block|{
return|return
name|snapshotFetchSize
return|;
block|}
DECL|method|setSnapshotFetchSize (Integer snapshotFetchSize)
specifier|public
name|void
name|setSnapshotFetchSize
parameter_list|(
name|Integer
name|snapshotFetchSize
parameter_list|)
block|{
name|this
operator|.
name|snapshotFetchSize
operator|=
name|snapshotFetchSize
expr_stmt|;
block|}
DECL|method|getSnapshotLockTimeoutMs ()
specifier|public
name|Long
name|getSnapshotLockTimeoutMs
parameter_list|()
block|{
return|return
name|snapshotLockTimeoutMs
return|;
block|}
DECL|method|setSnapshotLockTimeoutMs (Long snapshotLockTimeoutMs)
specifier|public
name|void
name|setSnapshotLockTimeoutMs
parameter_list|(
name|Long
name|snapshotLockTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|snapshotLockTimeoutMs
operator|=
name|snapshotLockTimeoutMs
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryFileFilename ()
specifier|public
name|String
name|getDatabaseHistoryFileFilename
parameter_list|()
block|{
return|return
name|databaseHistoryFileFilename
return|;
block|}
DECL|method|setDatabaseHistoryFileFilename ( String databaseHistoryFileFilename)
specifier|public
name|void
name|setDatabaseHistoryFileFilename
parameter_list|(
name|String
name|databaseHistoryFileFilename
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryFileFilename
operator|=
name|databaseHistoryFileFilename
expr_stmt|;
block|}
DECL|method|getDatabaseDbname ()
specifier|public
name|String
name|getDatabaseDbname
parameter_list|()
block|{
return|return
name|databaseDbname
return|;
block|}
DECL|method|setDatabaseDbname (String databaseDbname)
specifier|public
name|void
name|setDatabaseDbname
parameter_list|(
name|String
name|databaseDbname
parameter_list|)
block|{
name|this
operator|.
name|databaseDbname
operator|=
name|databaseDbname
expr_stmt|;
block|}
DECL|method|getDatabaseUser ()
specifier|public
name|String
name|getDatabaseUser
parameter_list|()
block|{
return|return
name|databaseUser
return|;
block|}
DECL|method|setDatabaseUser (String databaseUser)
specifier|public
name|void
name|setDatabaseUser
parameter_list|(
name|String
name|databaseUser
parameter_list|)
block|{
name|this
operator|.
name|databaseUser
operator|=
name|databaseUser
expr_stmt|;
block|}
DECL|method|getSnapshotSelectStatementOverrides ()
specifier|public
name|String
name|getSnapshotSelectStatementOverrides
parameter_list|()
block|{
return|return
name|snapshotSelectStatementOverrides
return|;
block|}
DECL|method|setSnapshotSelectStatementOverrides ( String snapshotSelectStatementOverrides)
specifier|public
name|void
name|setSnapshotSelectStatementOverrides
parameter_list|(
name|String
name|snapshotSelectStatementOverrides
parameter_list|)
block|{
name|this
operator|.
name|snapshotSelectStatementOverrides
operator|=
name|snapshotSelectStatementOverrides
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaBootstrapServers ()
specifier|public
name|String
name|getDatabaseHistoryKafkaBootstrapServers
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaBootstrapServers
return|;
block|}
DECL|method|setDatabaseHistoryKafkaBootstrapServers ( String databaseHistoryKafkaBootstrapServers)
specifier|public
name|void
name|setDatabaseHistoryKafkaBootstrapServers
parameter_list|(
name|String
name|databaseHistoryKafkaBootstrapServers
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaBootstrapServers
operator|=
name|databaseHistoryKafkaBootstrapServers
expr_stmt|;
block|}
DECL|method|getTimePrecisionMode ()
specifier|public
name|String
name|getTimePrecisionMode
parameter_list|()
block|{
return|return
name|timePrecisionMode
return|;
block|}
DECL|method|setTimePrecisionMode (String timePrecisionMode)
specifier|public
name|void
name|setTimePrecisionMode
parameter_list|(
name|String
name|timePrecisionMode
parameter_list|)
block|{
name|this
operator|.
name|timePrecisionMode
operator|=
name|timePrecisionMode
expr_stmt|;
block|}
DECL|method|getDatabaseServerName ()
specifier|public
name|String
name|getDatabaseServerName
parameter_list|()
block|{
return|return
name|databaseServerName
return|;
block|}
DECL|method|setDatabaseServerName (String databaseServerName)
specifier|public
name|void
name|setDatabaseServerName
parameter_list|(
name|String
name|databaseServerName
parameter_list|)
block|{
name|this
operator|.
name|databaseServerName
operator|=
name|databaseServerName
expr_stmt|;
block|}
DECL|method|getHeartbeatIntervalMs ()
specifier|public
name|Integer
name|getHeartbeatIntervalMs
parameter_list|()
block|{
return|return
name|heartbeatIntervalMs
return|;
block|}
DECL|method|setHeartbeatIntervalMs (Integer heartbeatIntervalMs)
specifier|public
name|void
name|setHeartbeatIntervalMs
parameter_list|(
name|Integer
name|heartbeatIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|heartbeatIntervalMs
operator|=
name|heartbeatIntervalMs
expr_stmt|;
block|}
DECL|method|getSourceStructVersion ()
specifier|public
name|String
name|getSourceStructVersion
parameter_list|()
block|{
return|return
name|sourceStructVersion
return|;
block|}
DECL|method|setSourceStructVersion (String sourceStructVersion)
specifier|public
name|void
name|setSourceStructVersion
parameter_list|(
name|String
name|sourceStructVersion
parameter_list|)
block|{
name|this
operator|.
name|sourceStructVersion
operator|=
name|sourceStructVersion
expr_stmt|;
block|}
DECL|method|getDatabasePort ()
specifier|public
name|Integer
name|getDatabasePort
parameter_list|()
block|{
return|return
name|databasePort
return|;
block|}
DECL|method|setDatabasePort (Integer databasePort)
specifier|public
name|void
name|setDatabasePort
parameter_list|(
name|Integer
name|databasePort
parameter_list|)
block|{
name|this
operator|.
name|databasePort
operator|=
name|databasePort
expr_stmt|;
block|}
DECL|method|getDatabaseHostname ()
specifier|public
name|String
name|getDatabaseHostname
parameter_list|()
block|{
return|return
name|databaseHostname
return|;
block|}
DECL|method|setDatabaseHostname (String databaseHostname)
specifier|public
name|void
name|setDatabaseHostname
parameter_list|(
name|String
name|databaseHostname
parameter_list|)
block|{
name|this
operator|.
name|databaseHostname
operator|=
name|databaseHostname
expr_stmt|;
block|}
DECL|method|getDatabasePassword ()
specifier|public
name|String
name|getDatabasePassword
parameter_list|()
block|{
return|return
name|databasePassword
return|;
block|}
DECL|method|setDatabasePassword (String databasePassword)
specifier|public
name|void
name|setDatabasePassword
parameter_list|(
name|String
name|databasePassword
parameter_list|)
block|{
name|this
operator|.
name|databasePassword
operator|=
name|databasePassword
expr_stmt|;
block|}
DECL|method|getMaxBatchSize ()
specifier|public
name|Integer
name|getMaxBatchSize
parameter_list|()
block|{
return|return
name|maxBatchSize
return|;
block|}
DECL|method|setMaxBatchSize (Integer maxBatchSize)
specifier|public
name|void
name|setMaxBatchSize
parameter_list|(
name|Integer
name|maxBatchSize
parameter_list|)
block|{
name|this
operator|.
name|maxBatchSize
operator|=
name|maxBatchSize
expr_stmt|;
block|}
DECL|method|getSnapshotMode ()
specifier|public
name|String
name|getSnapshotMode
parameter_list|()
block|{
return|return
name|snapshotMode
return|;
block|}
DECL|method|setSnapshotMode (String snapshotMode)
specifier|public
name|void
name|setSnapshotMode
parameter_list|(
name|String
name|snapshotMode
parameter_list|)
block|{
name|this
operator|.
name|snapshotMode
operator|=
name|snapshotMode
expr_stmt|;
block|}
DECL|method|getDatabaseHistory ()
specifier|public
name|String
name|getDatabaseHistory
parameter_list|()
block|{
return|return
name|databaseHistory
return|;
block|}
DECL|method|setDatabaseHistory (String databaseHistory)
specifier|public
name|void
name|setDatabaseHistory
parameter_list|(
name|String
name|databaseHistory
parameter_list|)
block|{
name|this
operator|.
name|databaseHistory
operator|=
name|databaseHistory
expr_stmt|;
block|}
DECL|method|getConnectorClass ()
specifier|public
name|Class
name|getConnectorClass
parameter_list|()
block|{
return|return
name|connectorClass
return|;
block|}
DECL|method|setConnectorClass (Class connectorClass)
specifier|public
name|void
name|setConnectorClass
parameter_list|(
name|Class
name|connectorClass
parameter_list|)
block|{
name|this
operator|.
name|connectorClass
operator|=
name|connectorClass
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getOffsetStorage ()
specifier|public
name|String
name|getOffsetStorage
parameter_list|()
block|{
return|return
name|offsetStorage
return|;
block|}
DECL|method|setOffsetStorage (String offsetStorage)
specifier|public
name|void
name|setOffsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|this
operator|.
name|offsetStorage
operator|=
name|offsetStorage
expr_stmt|;
block|}
DECL|method|getOffsetStorageFileName ()
specifier|public
name|String
name|getOffsetStorageFileName
parameter_list|()
block|{
return|return
name|offsetStorageFileName
return|;
block|}
DECL|method|setOffsetStorageFileName (String offsetStorageFileName)
specifier|public
name|void
name|setOffsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageFileName
operator|=
name|offsetStorageFileName
expr_stmt|;
block|}
DECL|method|getOffsetStorageTopic ()
specifier|public
name|String
name|getOffsetStorageTopic
parameter_list|()
block|{
return|return
name|offsetStorageTopic
return|;
block|}
DECL|method|setOffsetStorageTopic (String offsetStorageTopic)
specifier|public
name|void
name|setOffsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageTopic
operator|=
name|offsetStorageTopic
expr_stmt|;
block|}
DECL|method|getOffsetStorageReplicationFactor ()
specifier|public
name|Integer
name|getOffsetStorageReplicationFactor
parameter_list|()
block|{
return|return
name|offsetStorageReplicationFactor
return|;
block|}
DECL|method|setOffsetStorageReplicationFactor ( Integer offsetStorageReplicationFactor)
specifier|public
name|void
name|setOffsetStorageReplicationFactor
parameter_list|(
name|Integer
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageReplicationFactor
operator|=
name|offsetStorageReplicationFactor
expr_stmt|;
block|}
DECL|method|getOffsetCommitPolicy ()
specifier|public
name|String
name|getOffsetCommitPolicy
parameter_list|()
block|{
return|return
name|offsetCommitPolicy
return|;
block|}
DECL|method|setOffsetCommitPolicy (String offsetCommitPolicy)
specifier|public
name|void
name|setOffsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitPolicy
operator|=
name|offsetCommitPolicy
expr_stmt|;
block|}
DECL|method|getOffsetFlushIntervalMs ()
specifier|public
name|Long
name|getOffsetFlushIntervalMs
parameter_list|()
block|{
return|return
name|offsetFlushIntervalMs
return|;
block|}
DECL|method|setOffsetFlushIntervalMs (Long offsetFlushIntervalMs)
specifier|public
name|void
name|setOffsetFlushIntervalMs
parameter_list|(
name|Long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|offsetFlushIntervalMs
operator|=
name|offsetFlushIntervalMs
expr_stmt|;
block|}
DECL|method|getOffsetCommitTimeoutMs ()
specifier|public
name|Long
name|getOffsetCommitTimeoutMs
parameter_list|()
block|{
return|return
name|offsetCommitTimeoutMs
return|;
block|}
DECL|method|setOffsetCommitTimeoutMs (Long offsetCommitTimeoutMs)
specifier|public
name|void
name|setOffsetCommitTimeoutMs
parameter_list|(
name|Long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitTimeoutMs
operator|=
name|offsetCommitTimeoutMs
expr_stmt|;
block|}
DECL|method|getOffsetStoragePartitions ()
specifier|public
name|Integer
name|getOffsetStoragePartitions
parameter_list|()
block|{
return|return
name|offsetStoragePartitions
return|;
block|}
DECL|method|setOffsetStoragePartitions (Integer offsetStoragePartitions)
specifier|public
name|void
name|setOffsetStoragePartitions
parameter_list|(
name|Integer
name|offsetStoragePartitions
parameter_list|)
block|{
name|this
operator|.
name|offsetStoragePartitions
operator|=
name|offsetStoragePartitions
expr_stmt|;
block|}
DECL|method|getInternalKeyConverter ()
specifier|public
name|String
name|getInternalKeyConverter
parameter_list|()
block|{
return|return
name|internalKeyConverter
return|;
block|}
DECL|method|setInternalKeyConverter (String internalKeyConverter)
specifier|public
name|void
name|setInternalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|this
operator|.
name|internalKeyConverter
operator|=
name|internalKeyConverter
expr_stmt|;
block|}
DECL|method|getInternalValueConverter ()
specifier|public
name|String
name|getInternalValueConverter
parameter_list|()
block|{
return|return
name|internalValueConverter
return|;
block|}
DECL|method|setInternalValueConverter (String internalValueConverter)
specifier|public
name|void
name|setInternalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|this
operator|.
name|internalValueConverter
operator|=
name|internalValueConverter
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

