begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowHttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|NestedConfigurationProperty
import|;
end_import

begin_comment
comment|/**  * The undertow component provides HTTP-based endpoints for consuming and  * producing HTTP requests.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.undertow"
argument_list|)
DECL|class|UndertowComponentConfiguration
specifier|public
class|class
name|UndertowComponentConfiguration
block|{
comment|/**      * To use a custom HttpBinding to control the mapping between Camel message      * and HttpClient.      */
annotation|@
name|NestedConfigurationProperty
DECL|field|undertowHttpBinding
specifier|private
name|UndertowHttpBinding
name|undertowHttpBinding
decl_stmt|;
comment|/**      * To configure security using SSLContextParameters      */
annotation|@
name|NestedConfigurationProperty
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
comment|/**      * Enable usage of global SSL context parameters.      */
DECL|field|useGlobalSslContextParameters
specifier|private
name|Boolean
name|useGlobalSslContextParameters
init|=
literal|false
decl_stmt|;
comment|/**      * To configure common options such as thread pools      */
DECL|field|hostOptions
specifier|private
name|UndertowHostOptionsNestedConfiguration
name|hostOptions
decl_stmt|;
comment|/**      * Whether the component should resolve property placeholders on itself when      * starting. Only properties which are of String type can use property      * placeholders.      */
DECL|field|resolvePropertyPlaceholders
specifier|private
name|Boolean
name|resolvePropertyPlaceholders
init|=
literal|true
decl_stmt|;
DECL|method|getUndertowHttpBinding ()
specifier|public
name|UndertowHttpBinding
name|getUndertowHttpBinding
parameter_list|()
block|{
return|return
name|undertowHttpBinding
return|;
block|}
DECL|method|setUndertowHttpBinding (UndertowHttpBinding undertowHttpBinding)
specifier|public
name|void
name|setUndertowHttpBinding
parameter_list|(
name|UndertowHttpBinding
name|undertowHttpBinding
parameter_list|)
block|{
name|this
operator|.
name|undertowHttpBinding
operator|=
name|undertowHttpBinding
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters ( SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getUseGlobalSslContextParameters ()
specifier|public
name|Boolean
name|getUseGlobalSslContextParameters
parameter_list|()
block|{
return|return
name|useGlobalSslContextParameters
return|;
block|}
DECL|method|setUseGlobalSslContextParameters ( Boolean useGlobalSslContextParameters)
specifier|public
name|void
name|setUseGlobalSslContextParameters
parameter_list|(
name|Boolean
name|useGlobalSslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|useGlobalSslContextParameters
operator|=
name|useGlobalSslContextParameters
expr_stmt|;
block|}
DECL|method|getHostOptions ()
specifier|public
name|UndertowHostOptionsNestedConfiguration
name|getHostOptions
parameter_list|()
block|{
return|return
name|hostOptions
return|;
block|}
DECL|method|setHostOptions ( UndertowHostOptionsNestedConfiguration hostOptions)
specifier|public
name|void
name|setHostOptions
parameter_list|(
name|UndertowHostOptionsNestedConfiguration
name|hostOptions
parameter_list|)
block|{
name|this
operator|.
name|hostOptions
operator|=
name|hostOptions
expr_stmt|;
block|}
DECL|method|getResolvePropertyPlaceholders ()
specifier|public
name|Boolean
name|getResolvePropertyPlaceholders
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
return|;
block|}
DECL|method|setResolvePropertyPlaceholders ( Boolean resolvePropertyPlaceholders)
specifier|public
name|void
name|setResolvePropertyPlaceholders
parameter_list|(
name|Boolean
name|resolvePropertyPlaceholders
parameter_list|)
block|{
name|this
operator|.
name|resolvePropertyPlaceholders
operator|=
name|resolvePropertyPlaceholders
expr_stmt|;
block|}
DECL|class|UndertowHostOptionsNestedConfiguration
specifier|public
specifier|static
class|class
name|UndertowHostOptionsNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowHostOptions
operator|.
name|class
decl_stmt|;
comment|/**          * The number of worker threads to use in a Undertow host.          */
DECL|field|workerThreads
specifier|private
name|Integer
name|workerThreads
decl_stmt|;
comment|/**          * The number of io threads to use in a Undertow host.          */
DECL|field|ioThreads
specifier|private
name|Integer
name|ioThreads
decl_stmt|;
comment|/**          * The buffer size of the Undertow host.          */
DECL|field|bufferSize
specifier|private
name|Integer
name|bufferSize
decl_stmt|;
comment|/**          * Set if the Undertow host should use direct buffers.          */
DECL|field|directBuffers
specifier|private
name|Boolean
name|directBuffers
decl_stmt|;
DECL|method|getWorkerThreads ()
specifier|public
name|Integer
name|getWorkerThreads
parameter_list|()
block|{
return|return
name|workerThreads
return|;
block|}
DECL|method|setWorkerThreads (Integer workerThreads)
specifier|public
name|void
name|setWorkerThreads
parameter_list|(
name|Integer
name|workerThreads
parameter_list|)
block|{
name|this
operator|.
name|workerThreads
operator|=
name|workerThreads
expr_stmt|;
block|}
DECL|method|getIoThreads ()
specifier|public
name|Integer
name|getIoThreads
parameter_list|()
block|{
return|return
name|ioThreads
return|;
block|}
DECL|method|setIoThreads (Integer ioThreads)
specifier|public
name|void
name|setIoThreads
parameter_list|(
name|Integer
name|ioThreads
parameter_list|)
block|{
name|this
operator|.
name|ioThreads
operator|=
name|ioThreads
expr_stmt|;
block|}
DECL|method|getBufferSize ()
specifier|public
name|Integer
name|getBufferSize
parameter_list|()
block|{
return|return
name|bufferSize
return|;
block|}
DECL|method|setBufferSize (Integer bufferSize)
specifier|public
name|void
name|setBufferSize
parameter_list|(
name|Integer
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
block|}
DECL|method|getDirectBuffers ()
specifier|public
name|Boolean
name|getDirectBuffers
parameter_list|()
block|{
return|return
name|directBuffers
return|;
block|}
DECL|method|setDirectBuffers (Boolean directBuffers)
specifier|public
name|void
name|setDirectBuffers
parameter_list|(
name|Boolean
name|directBuffers
parameter_list|)
block|{
name|this
operator|.
name|directBuffers
operator|=
name|directBuffers
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

