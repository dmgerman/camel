begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_comment
comment|/**  * Resilience4j Circuit Breaker EIP configuration  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
DECL|class|Resilience4jConfigurationDefinitionCommon
specifier|public
class|class
name|Resilience4jConfigurationDefinitionCommon
block|{
comment|/**      * Refers to an existing      * io.github.resilience4j.circuitbreaker.CircuitBreaker instance to lookup      * and use from the registry. When using this, then any other circuit      * breaker options are not in use.      */
DECL|field|circuitBreakerRef
specifier|private
name|String
name|circuitBreakerRef
decl_stmt|;
comment|/**      * Refers to an existing      * io.github.resilience4j.circuitbreaker.CircuitBreakerConfig instance to      * lookup and use from the registry.      */
DECL|field|configRef
specifier|private
name|String
name|configRef
decl_stmt|;
comment|/**      * Configures the failure rate threshold in percentage. If the failure rate      * is equal or greater than the threshold the CircuitBreaker transitions to      * open and starts short-circuiting calls. The threshold must be greater      * than 0 and not greater than 100. Default value is 50 percentage.      */
DECL|field|failureRateThreshold
specifier|private
name|Float
name|failureRateThreshold
decl_stmt|;
comment|/**      * Configures the number of permitted calls when the CircuitBreaker is half      * open. The size must be greater than 0. Default size is 10.      */
DECL|field|permittedNumberOfCallsInHalfOpenState
specifier|private
name|Integer
name|permittedNumberOfCallsInHalfOpenState
init|=
literal|10
decl_stmt|;
comment|/**      * Configures the size of the sliding window which is used to record the      * outcome of calls when the CircuitBreaker is closed. slidingWindowSize      * configures the size of the sliding window. Sliding window can either be      * count-based or time-based. If slidingWindowType is COUNT_BASED, the last      * slidingWindowSize calls are recorded and aggregated. If slidingWindowType      * is TIME_BASED, the calls of the last slidingWindowSize seconds are      * recorded and aggregated. The slidingWindowSize must be greater than 0.      * The minimumNumberOfCalls must be greater than 0. If the slidingWindowType      * is COUNT_BASED, the minimumNumberOfCalls cannot be greater than      * slidingWindowSize. If the slidingWindowType is TIME_BASED, you can pick      * whatever you want. Default slidingWindowSize is 100.      */
DECL|field|slidingWindowSize
specifier|private
name|Integer
name|slidingWindowSize
init|=
literal|100
decl_stmt|;
comment|/**      * Configures the type of the sliding window which is used to record the      * outcome of calls when the CircuitBreaker is closed. Sliding window can      * either be count-based or time-based. If slidingWindowType is COUNT_BASED,      * the last slidingWindowSize calls are recorded and aggregated. If      * slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize      * seconds are recorded and aggregated. Default slidingWindowType is      * COUNT_BASED.      */
DECL|field|slidingWindowType
specifier|private
name|String
name|slidingWindowType
init|=
literal|"COUNT_BASED"
decl_stmt|;
comment|/**      * Configures configures the minimum number of calls which are required (per      * sliding window period) before the CircuitBreaker can calculate the error      * rate. For example, if minimumNumberOfCalls is 10, then at least 10 calls      * must be recorded, before the failure rate can be calculated. If only 9      * calls have been recorded the CircuitBreaker will not transition to open      * even if all 9 calls have failed. Default minimumNumberOfCalls is 100      */
DECL|field|minimumNumberOfCalls
specifier|private
name|Integer
name|minimumNumberOfCalls
init|=
literal|100
decl_stmt|;
comment|/**      * Enables writable stack traces. When set to false, Exception.getStackTrace      * returns a zero length array. This may be used to reduce log spam when the      * circuit breaker is open as the cause of the exceptions is already known      * (the circuit breaker is short-circuiting calls).      */
DECL|field|writableStackTraceEnabled
specifier|private
name|Boolean
name|writableStackTraceEnabled
init|=
literal|true
decl_stmt|;
comment|/**      * Configures the wait duration (in seconds) which specifies how long the      * CircuitBreaker should stay open, before it switches to half open. Default      * value is 60 seconds.      */
DECL|field|waitDurationInOpenState
specifier|private
name|Integer
name|waitDurationInOpenState
init|=
literal|60
decl_stmt|;
comment|/**      * Enables automatic transition from OPEN to HALF_OPEN state once the      * waitDurationInOpenState has passed.      */
DECL|field|automaticTransitionFromOpenToHalfOpenEnabled
specifier|private
name|Boolean
name|automaticTransitionFromOpenToHalfOpenEnabled
init|=
literal|false
decl_stmt|;
comment|/**      * Configures a threshold in percentage. The CircuitBreaker considers a call      * as slow when the call duration is greater than      * slowCallDurationThreshold(Duration. When the percentage of slow calls is      * equal or greater the threshold, the CircuitBreaker transitions to open      * and starts short-circuiting calls. The threshold must be greater than 0      * and not greater than 100. Default value is 100 percentage which means      * that all recorded calls must be slower than slowCallDurationThreshold.      */
DECL|field|slowCallRateThreshold
specifier|private
name|Float
name|slowCallRateThreshold
decl_stmt|;
comment|/**      * Configures the duration threshold (seconds) above which calls are      * considered as slow and increase the slow calls percentage. Default value      * is 60 seconds.      */
DECL|field|slowCallDurationThreshold
specifier|private
name|Integer
name|slowCallDurationThreshold
init|=
literal|60
decl_stmt|;
DECL|method|getCircuitBreakerRef ()
specifier|public
name|String
name|getCircuitBreakerRef
parameter_list|()
block|{
return|return
name|circuitBreakerRef
return|;
block|}
DECL|method|setCircuitBreakerRef (String circuitBreakerRef)
specifier|public
name|void
name|setCircuitBreakerRef
parameter_list|(
name|String
name|circuitBreakerRef
parameter_list|)
block|{
name|this
operator|.
name|circuitBreakerRef
operator|=
name|circuitBreakerRef
expr_stmt|;
block|}
DECL|method|getConfigRef ()
specifier|public
name|String
name|getConfigRef
parameter_list|()
block|{
return|return
name|configRef
return|;
block|}
DECL|method|setConfigRef (String configRef)
specifier|public
name|void
name|setConfigRef
parameter_list|(
name|String
name|configRef
parameter_list|)
block|{
name|this
operator|.
name|configRef
operator|=
name|configRef
expr_stmt|;
block|}
DECL|method|getFailureRateThreshold ()
specifier|public
name|Float
name|getFailureRateThreshold
parameter_list|()
block|{
return|return
name|failureRateThreshold
return|;
block|}
DECL|method|setFailureRateThreshold (Float failureRateThreshold)
specifier|public
name|void
name|setFailureRateThreshold
parameter_list|(
name|Float
name|failureRateThreshold
parameter_list|)
block|{
name|this
operator|.
name|failureRateThreshold
operator|=
name|failureRateThreshold
expr_stmt|;
block|}
DECL|method|getPermittedNumberOfCallsInHalfOpenState ()
specifier|public
name|Integer
name|getPermittedNumberOfCallsInHalfOpenState
parameter_list|()
block|{
return|return
name|permittedNumberOfCallsInHalfOpenState
return|;
block|}
DECL|method|setPermittedNumberOfCallsInHalfOpenState ( Integer permittedNumberOfCallsInHalfOpenState)
specifier|public
name|void
name|setPermittedNumberOfCallsInHalfOpenState
parameter_list|(
name|Integer
name|permittedNumberOfCallsInHalfOpenState
parameter_list|)
block|{
name|this
operator|.
name|permittedNumberOfCallsInHalfOpenState
operator|=
name|permittedNumberOfCallsInHalfOpenState
expr_stmt|;
block|}
DECL|method|getSlidingWindowSize ()
specifier|public
name|Integer
name|getSlidingWindowSize
parameter_list|()
block|{
return|return
name|slidingWindowSize
return|;
block|}
DECL|method|setSlidingWindowSize (Integer slidingWindowSize)
specifier|public
name|void
name|setSlidingWindowSize
parameter_list|(
name|Integer
name|slidingWindowSize
parameter_list|)
block|{
name|this
operator|.
name|slidingWindowSize
operator|=
name|slidingWindowSize
expr_stmt|;
block|}
DECL|method|getSlidingWindowType ()
specifier|public
name|String
name|getSlidingWindowType
parameter_list|()
block|{
return|return
name|slidingWindowType
return|;
block|}
DECL|method|setSlidingWindowType (String slidingWindowType)
specifier|public
name|void
name|setSlidingWindowType
parameter_list|(
name|String
name|slidingWindowType
parameter_list|)
block|{
name|this
operator|.
name|slidingWindowType
operator|=
name|slidingWindowType
expr_stmt|;
block|}
DECL|method|getMinimumNumberOfCalls ()
specifier|public
name|Integer
name|getMinimumNumberOfCalls
parameter_list|()
block|{
return|return
name|minimumNumberOfCalls
return|;
block|}
DECL|method|setMinimumNumberOfCalls (Integer minimumNumberOfCalls)
specifier|public
name|void
name|setMinimumNumberOfCalls
parameter_list|(
name|Integer
name|minimumNumberOfCalls
parameter_list|)
block|{
name|this
operator|.
name|minimumNumberOfCalls
operator|=
name|minimumNumberOfCalls
expr_stmt|;
block|}
DECL|method|getWritableStackTraceEnabled ()
specifier|public
name|Boolean
name|getWritableStackTraceEnabled
parameter_list|()
block|{
return|return
name|writableStackTraceEnabled
return|;
block|}
DECL|method|setWritableStackTraceEnabled (Boolean writableStackTraceEnabled)
specifier|public
name|void
name|setWritableStackTraceEnabled
parameter_list|(
name|Boolean
name|writableStackTraceEnabled
parameter_list|)
block|{
name|this
operator|.
name|writableStackTraceEnabled
operator|=
name|writableStackTraceEnabled
expr_stmt|;
block|}
DECL|method|getWaitDurationInOpenState ()
specifier|public
name|Integer
name|getWaitDurationInOpenState
parameter_list|()
block|{
return|return
name|waitDurationInOpenState
return|;
block|}
DECL|method|setWaitDurationInOpenState (Integer waitDurationInOpenState)
specifier|public
name|void
name|setWaitDurationInOpenState
parameter_list|(
name|Integer
name|waitDurationInOpenState
parameter_list|)
block|{
name|this
operator|.
name|waitDurationInOpenState
operator|=
name|waitDurationInOpenState
expr_stmt|;
block|}
DECL|method|getAutomaticTransitionFromOpenToHalfOpenEnabled ()
specifier|public
name|Boolean
name|getAutomaticTransitionFromOpenToHalfOpenEnabled
parameter_list|()
block|{
return|return
name|automaticTransitionFromOpenToHalfOpenEnabled
return|;
block|}
DECL|method|setAutomaticTransitionFromOpenToHalfOpenEnabled ( Boolean automaticTransitionFromOpenToHalfOpenEnabled)
specifier|public
name|void
name|setAutomaticTransitionFromOpenToHalfOpenEnabled
parameter_list|(
name|Boolean
name|automaticTransitionFromOpenToHalfOpenEnabled
parameter_list|)
block|{
name|this
operator|.
name|automaticTransitionFromOpenToHalfOpenEnabled
operator|=
name|automaticTransitionFromOpenToHalfOpenEnabled
expr_stmt|;
block|}
DECL|method|getSlowCallRateThreshold ()
specifier|public
name|Float
name|getSlowCallRateThreshold
parameter_list|()
block|{
return|return
name|slowCallRateThreshold
return|;
block|}
DECL|method|setSlowCallRateThreshold (Float slowCallRateThreshold)
specifier|public
name|void
name|setSlowCallRateThreshold
parameter_list|(
name|Float
name|slowCallRateThreshold
parameter_list|)
block|{
name|this
operator|.
name|slowCallRateThreshold
operator|=
name|slowCallRateThreshold
expr_stmt|;
block|}
DECL|method|getSlowCallDurationThreshold ()
specifier|public
name|Integer
name|getSlowCallDurationThreshold
parameter_list|()
block|{
return|return
name|slowCallDurationThreshold
return|;
block|}
DECL|method|setSlowCallDurationThreshold (Integer slowCallDurationThreshold)
specifier|public
name|void
name|setSlowCallDurationThreshold
parameter_list|(
name|Integer
name|slowCallDurationThreshold
parameter_list|)
block|{
name|this
operator|.
name|slowCallDurationThreshold
operator|=
name|slowCallDurationThreshold
expr_stmt|;
block|}
block|}
end_class

end_unit

