begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|SedaEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultUuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestApiConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|EnableAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_class
annotation|@
name|DirtiesContext
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|EnableAutoConfiguration
annotation|@
name|SpringBootTest
argument_list|(
name|classes
operator|=
block|{
name|CamelRestTest
operator|.
name|class
block|,
name|CamelRestTest
operator|.
name|TestConfiguration
operator|.
name|class
block|}
argument_list|,
name|properties
operator|=
block|{
literal|"debug=false"
block|,
literal|"camel.springboot.xml-rests=false"
block|,
literal|"camel.springboot.xml-routes=false"
block|,
literal|"camel.rest.enabled=true"
block|,
literal|"camel.rest.component=dummy-rest"
block|,
literal|"camel.rest.host=localhost"
block|,
literal|"camel.rest.data-format-property.prettyPrint=true"
block|,
literal|"camel.rest.api-property.api.title=My cool API"
block|,
literal|"camel.rest.api-property.api.version=1.0.0"
block|,
literal|"camel.rest.api-property.cors=true"
block|,
literal|"camel.rest.cors-headers.foo=123"
block|,
literal|"camel.rest.cors-headers.bar=456"
block|}
argument_list|)
DECL|class|CamelRestTest
specifier|public
class|class
name|CamelRestTest
block|{
annotation|@
name|Autowired
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"seda:get-say-hello"
argument_list|,
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|context
operator|.
name|getRestConfiguration
argument_list|()
operator|.
name|getDataFormatProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"prettyPrint"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"My cool API"
argument_list|,
name|context
operator|.
name|getRestConfiguration
argument_list|()
operator|.
name|getApiProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"api.title"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1.0.0"
argument_list|,
name|context
operator|.
name|getRestConfiguration
argument_list|()
operator|.
name|getApiProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"api.version"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|context
operator|.
name|getRestConfiguration
argument_list|()
operator|.
name|getApiProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"cors"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|context
operator|.
name|getRestConfiguration
argument_list|()
operator|.
name|getCorsHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"456"
argument_list|,
name|context
operator|.
name|getRestConfiguration
argument_list|()
operator|.
name|getCorsHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ***********************************
comment|// Configuration
comment|// ***********************************
annotation|@
name|Configuration
DECL|class|TestConfiguration
specifier|public
specifier|static
class|class
name|TestConfiguration
block|{
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"dummy-rest"
argument_list|)
DECL|method|dummyRestConsumerFactory ()
specifier|public
name|RestConsumerFactory
name|dummyRestConsumerFactory
parameter_list|()
block|{
return|return
operator|new
name|TestConsumerFactory
argument_list|()
return|;
block|}
annotation|@
name|Bean
DECL|method|routeBuilder ()
specifier|public
name|RouteBuilder
name|routeBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|rest
argument_list|(
literal|"/say/hello"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:hello"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:hello"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
comment|// ***********************************
comment|// Rest Helpers
comment|// ***********************************
DECL|class|TestConsumerFactory
specifier|private
specifier|static
specifier|final
class|class
name|TestConsumerFactory
implements|implements
name|RestConsumerFactory
implements|,
name|RestApiConsumerFactory
block|{
DECL|field|dummy
specifier|private
name|Object
name|dummy
decl_stmt|;
DECL|method|getDummy ()
specifier|public
name|Object
name|getDummy
parameter_list|()
block|{
return|return
name|dummy
return|;
block|}
DECL|method|setDummy (Object dummy)
specifier|public
name|void
name|setDummy
parameter_list|(
name|Object
name|dummy
parameter_list|)
block|{
name|this
operator|.
name|dummy
operator|=
name|dummy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConsumer ( CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// just use a seda endpoint for testing purpose
name|String
name|id
decl_stmt|;
if|if
condition|(
name|uriTemplate
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|DefaultUuidGenerator
operator|.
name|generateSanitizedId
argument_list|(
name|basePath
operator|+
name|uriTemplate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|DefaultUuidGenerator
operator|.
name|generateSanitizedId
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
block|}
comment|// remove leading dash as we add that ourselves
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getConsumerProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|getConsumerProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"dummy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|dummy
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|camelContext
argument_list|,
name|ref
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SedaEndpoint
name|seda
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"seda:"
operator|+
name|verb
operator|+
literal|"-"
operator|+
name|id
argument_list|,
name|SedaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|seda
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createApiConsumer ( CamelContext camelContext, Processor processor, String contextPath, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Consumer
name|createApiConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// just use a seda endpoint for testing purpose
name|String
name|id
init|=
name|DefaultUuidGenerator
operator|.
name|generateSanitizedId
argument_list|(
name|contextPath
argument_list|)
decl_stmt|;
comment|// remove leading dash as we add that ourselves
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|SedaEndpoint
name|seda
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"seda:api:"
operator|+
literal|"-"
operator|+
name|id
argument_list|,
name|SedaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|seda
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

