begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|SqlStoredComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|SqlStoredEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|SpringBootApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|SpringBootApplication
annotation|@
name|DirtiesContext
annotation|@
name|ContextConfiguration
argument_list|(
name|classes
operator|=
name|DataSourceAutoConfigurationTest
operator|.
name|class
argument_list|)
annotation|@
name|SpringBootTest
argument_list|(
name|properties
operator|=
block|{
literal|"spring.datasource.url=jdbc:dummy://localhost/test"
block|,
literal|"spring.datasource.username=dbuser"
block|,
literal|"spring.datasource.password=dbpass"
block|,
literal|"spring.datasource.driver-class-name=org.apache.camel.component.sql.support.DummyJDBCDriver"
block|}
argument_list|)
DECL|class|DataSourceAutoConfigurationTest
specifier|public
class|class
name|DataSourceAutoConfigurationTest
block|{
annotation|@
name|Autowired
DECL|field|datasource
specifier|private
name|DataSource
name|datasource
decl_stmt|;
annotation|@
name|Autowired
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Test
DECL|method|testInjectionWorks ()
specifier|public
name|void
name|testInjectionWorks
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|datasource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSqlComponentUsesTheConfiguredDatasource ()
specifier|public
name|void
name|testSqlComponentUsesTheConfiguredDatasource
parameter_list|()
throws|throws
name|Exception
block|{
name|SqlComponent
name|component
init|=
operator|(
name|SqlComponent
operator|)
name|context
operator|.
name|getComponent
argument_list|(
literal|"sql"
argument_list|)
decl_stmt|;
name|SqlEndpoint
name|endpoint
init|=
operator|(
name|SqlEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"sql:select * from table where id=#"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|datasource
argument_list|,
name|endpoint
operator|.
name|getJdbcTemplate
argument_list|()
operator|.
name|getDataSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSqlStoredComponentUsesTheConfiguredDatasource ()
specifier|public
name|void
name|testSqlStoredComponentUsesTheConfiguredDatasource
parameter_list|()
throws|throws
name|Exception
block|{
name|SqlStoredComponent
name|component
init|=
operator|(
name|SqlStoredComponent
operator|)
name|context
operator|.
name|getComponent
argument_list|(
literal|"sql-stored"
argument_list|)
decl_stmt|;
name|SqlStoredEndpoint
name|endpoint
init|=
operator|(
name|SqlStoredEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"sql:select * from table where id=#"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|datasource
argument_list|,
name|endpoint
operator|.
name|getJdbcTemplate
argument_list|()
operator|.
name|getDataSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

