begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.facebook.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The Facebook component provides access to all of the Facebook APIs accessible  * using Facebook4J.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.facebook"
argument_list|)
DECL|class|FacebookComponentConfiguration
specifier|public
class|class
name|FacebookComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * To use the shared configuration      */
DECL|field|configuration
specifier|private
name|FacebookConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * Whether the component should resolve property placeholders on itself when      * starting. Only properties which are of String type can use property      * placeholders.      */
DECL|field|resolvePropertyPlaceholders
specifier|private
name|Boolean
name|resolvePropertyPlaceholders
init|=
literal|true
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|FacebookConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( FacebookConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|FacebookConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getResolvePropertyPlaceholders ()
specifier|public
name|Boolean
name|getResolvePropertyPlaceholders
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
return|;
block|}
DECL|method|setResolvePropertyPlaceholders ( Boolean resolvePropertyPlaceholders)
specifier|public
name|void
name|setResolvePropertyPlaceholders
parameter_list|(
name|Boolean
name|resolvePropertyPlaceholders
parameter_list|)
block|{
name|this
operator|.
name|resolvePropertyPlaceholders
operator|=
name|resolvePropertyPlaceholders
expr_stmt|;
block|}
DECL|class|FacebookConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|FacebookConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|config
operator|.
name|FacebookConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * The user access token          */
DECL|field|oAuthAccessToken
specifier|private
name|String
name|oAuthAccessToken
decl_stmt|;
comment|/**          * OAuth access token URL          */
DECL|field|oAuthAccessTokenURL
specifier|private
name|String
name|oAuthAccessTokenURL
init|=
literal|"https://graph.facebook.com/oauth/access_token"
decl_stmt|;
comment|/**          * The application Id          */
DECL|field|oAuthAppId
specifier|private
name|String
name|oAuthAppId
decl_stmt|;
comment|/**          * The application Secret          */
DECL|field|oAuthAppSecret
specifier|private
name|String
name|oAuthAppSecret
decl_stmt|;
comment|/**          * OAuth authorization URL          */
DECL|field|oAuthAuthorizationURL
specifier|private
name|String
name|oAuthAuthorizationURL
init|=
literal|"https://www.facebook.com/dialog/oauth"
decl_stmt|;
comment|/**          * Facebook4J API client URL          */
DECL|field|clientURL
specifier|private
name|String
name|clientURL
decl_stmt|;
comment|/**          * Facebook4J client API version          */
DECL|field|clientVersion
specifier|private
name|String
name|clientVersion
decl_stmt|;
comment|/**          * Enables deubg output. Effective only with the embedded logger          */
DECL|field|debugEnabled
specifier|private
name|Boolean
name|debugEnabled
init|=
literal|false
decl_stmt|;
comment|/**          * Use Facebook GZIP encoding          */
DECL|field|gzipEnabled
specifier|private
name|Boolean
name|gzipEnabled
init|=
literal|true
decl_stmt|;
comment|/**          * Http connection timeout in milliseconds          */
DECL|field|httpConnectionTimeout
specifier|private
name|Integer
name|httpConnectionTimeout
init|=
literal|20000
decl_stmt|;
comment|/**          * HTTP maximum connections per route          */
DECL|field|httpDefaultMaxPerRoute
specifier|private
name|Integer
name|httpDefaultMaxPerRoute
init|=
literal|2
decl_stmt|;
comment|/**          * HTTP maximum total connections          */
DECL|field|httpMaxTotalConnections
specifier|private
name|Integer
name|httpMaxTotalConnections
init|=
literal|20
decl_stmt|;
comment|/**          * HTTP proxy server host name          */
DECL|field|httpProxyHost
specifier|private
name|String
name|httpProxyHost
decl_stmt|;
comment|/**          * HTTP proxy server password          */
DECL|field|httpProxyPassword
specifier|private
name|String
name|httpProxyPassword
decl_stmt|;
comment|/**          * HTTP proxy server port          */
DECL|field|httpProxyPort
specifier|private
name|Integer
name|httpProxyPort
decl_stmt|;
comment|/**          * HTTP proxy server user name          */
DECL|field|httpProxyUser
specifier|private
name|String
name|httpProxyUser
decl_stmt|;
comment|/**          * Http read timeout in milliseconds          */
DECL|field|httpReadTimeout
specifier|private
name|Integer
name|httpReadTimeout
init|=
literal|120000
decl_stmt|;
comment|/**          * Number of HTTP retries          */
DECL|field|httpRetryCount
specifier|private
name|Integer
name|httpRetryCount
init|=
literal|0
decl_stmt|;
comment|/**          * HTTP retry interval in seconds          */
DECL|field|httpRetryIntervalSeconds
specifier|private
name|Integer
name|httpRetryIntervalSeconds
init|=
literal|5
decl_stmt|;
comment|/**          * HTTP streaming read timeout in milliseconds          */
DECL|field|httpStreamingReadTimeout
specifier|private
name|Integer
name|httpStreamingReadTimeout
init|=
literal|40000
decl_stmt|;
comment|/**          * If set to true, raw JSON forms will be stored in DataObjectFactory          */
DECL|field|jsonStoreEnabled
specifier|private
name|Boolean
name|jsonStoreEnabled
init|=
literal|false
decl_stmt|;
comment|/**          * If set to true, Facebook4J mbean will be registerd          */
DECL|field|mbeanEnabled
specifier|private
name|Boolean
name|mbeanEnabled
init|=
literal|false
decl_stmt|;
comment|/**          * Default OAuth permissions. Comma separated permission names. See          * https://developers.facebook.com/docs/reference/login/#permissions for          * the detail          */
DECL|field|oAuthPermissions
specifier|private
name|String
name|oAuthPermissions
decl_stmt|;
comment|/**          * Prettify JSON debug output if set to true          */
DECL|field|prettyDebugEnabled
specifier|private
name|Boolean
name|prettyDebugEnabled
init|=
literal|false
decl_stmt|;
comment|/**          * API base URL          */
DECL|field|restBaseURL
specifier|private
name|String
name|restBaseURL
init|=
literal|"https://graph.facebook.com/"
decl_stmt|;
comment|/**          * Use SSL          */
DECL|field|useSSL
specifier|private
name|Boolean
name|useSSL
init|=
literal|true
decl_stmt|;
comment|/**          * Video API base URL          */
DECL|field|videoBaseURL
specifier|private
name|String
name|videoBaseURL
init|=
literal|"https://graph-video.facebook.com/"
decl_stmt|;
DECL|method|getOAuthAccessToken ()
specifier|public
name|String
name|getOAuthAccessToken
parameter_list|()
block|{
return|return
name|oAuthAccessToken
return|;
block|}
DECL|method|setOAuthAccessToken (String oAuthAccessToken)
specifier|public
name|void
name|setOAuthAccessToken
parameter_list|(
name|String
name|oAuthAccessToken
parameter_list|)
block|{
name|this
operator|.
name|oAuthAccessToken
operator|=
name|oAuthAccessToken
expr_stmt|;
block|}
DECL|method|getOAuthAccessTokenURL ()
specifier|public
name|String
name|getOAuthAccessTokenURL
parameter_list|()
block|{
return|return
name|oAuthAccessTokenURL
return|;
block|}
DECL|method|setOAuthAccessTokenURL (String oAuthAccessTokenURL)
specifier|public
name|void
name|setOAuthAccessTokenURL
parameter_list|(
name|String
name|oAuthAccessTokenURL
parameter_list|)
block|{
name|this
operator|.
name|oAuthAccessTokenURL
operator|=
name|oAuthAccessTokenURL
expr_stmt|;
block|}
DECL|method|getOAuthAppId ()
specifier|public
name|String
name|getOAuthAppId
parameter_list|()
block|{
return|return
name|oAuthAppId
return|;
block|}
DECL|method|setOAuthAppId (String oAuthAppId)
specifier|public
name|void
name|setOAuthAppId
parameter_list|(
name|String
name|oAuthAppId
parameter_list|)
block|{
name|this
operator|.
name|oAuthAppId
operator|=
name|oAuthAppId
expr_stmt|;
block|}
DECL|method|getOAuthAppSecret ()
specifier|public
name|String
name|getOAuthAppSecret
parameter_list|()
block|{
return|return
name|oAuthAppSecret
return|;
block|}
DECL|method|setOAuthAppSecret (String oAuthAppSecret)
specifier|public
name|void
name|setOAuthAppSecret
parameter_list|(
name|String
name|oAuthAppSecret
parameter_list|)
block|{
name|this
operator|.
name|oAuthAppSecret
operator|=
name|oAuthAppSecret
expr_stmt|;
block|}
DECL|method|getOAuthAuthorizationURL ()
specifier|public
name|String
name|getOAuthAuthorizationURL
parameter_list|()
block|{
return|return
name|oAuthAuthorizationURL
return|;
block|}
DECL|method|setOAuthAuthorizationURL (String oAuthAuthorizationURL)
specifier|public
name|void
name|setOAuthAuthorizationURL
parameter_list|(
name|String
name|oAuthAuthorizationURL
parameter_list|)
block|{
name|this
operator|.
name|oAuthAuthorizationURL
operator|=
name|oAuthAuthorizationURL
expr_stmt|;
block|}
DECL|method|getClientURL ()
specifier|public
name|String
name|getClientURL
parameter_list|()
block|{
return|return
name|clientURL
return|;
block|}
DECL|method|setClientURL (String clientURL)
specifier|public
name|void
name|setClientURL
parameter_list|(
name|String
name|clientURL
parameter_list|)
block|{
name|this
operator|.
name|clientURL
operator|=
name|clientURL
expr_stmt|;
block|}
DECL|method|getClientVersion ()
specifier|public
name|String
name|getClientVersion
parameter_list|()
block|{
return|return
name|clientVersion
return|;
block|}
DECL|method|setClientVersion (String clientVersion)
specifier|public
name|void
name|setClientVersion
parameter_list|(
name|String
name|clientVersion
parameter_list|)
block|{
name|this
operator|.
name|clientVersion
operator|=
name|clientVersion
expr_stmt|;
block|}
DECL|method|getDebugEnabled ()
specifier|public
name|Boolean
name|getDebugEnabled
parameter_list|()
block|{
return|return
name|debugEnabled
return|;
block|}
DECL|method|setDebugEnabled (Boolean debugEnabled)
specifier|public
name|void
name|setDebugEnabled
parameter_list|(
name|Boolean
name|debugEnabled
parameter_list|)
block|{
name|this
operator|.
name|debugEnabled
operator|=
name|debugEnabled
expr_stmt|;
block|}
DECL|method|getGzipEnabled ()
specifier|public
name|Boolean
name|getGzipEnabled
parameter_list|()
block|{
return|return
name|gzipEnabled
return|;
block|}
DECL|method|setGzipEnabled (Boolean gzipEnabled)
specifier|public
name|void
name|setGzipEnabled
parameter_list|(
name|Boolean
name|gzipEnabled
parameter_list|)
block|{
name|this
operator|.
name|gzipEnabled
operator|=
name|gzipEnabled
expr_stmt|;
block|}
DECL|method|getHttpConnectionTimeout ()
specifier|public
name|Integer
name|getHttpConnectionTimeout
parameter_list|()
block|{
return|return
name|httpConnectionTimeout
return|;
block|}
DECL|method|setHttpConnectionTimeout (Integer httpConnectionTimeout)
specifier|public
name|void
name|setHttpConnectionTimeout
parameter_list|(
name|Integer
name|httpConnectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|httpConnectionTimeout
operator|=
name|httpConnectionTimeout
expr_stmt|;
block|}
DECL|method|getHttpDefaultMaxPerRoute ()
specifier|public
name|Integer
name|getHttpDefaultMaxPerRoute
parameter_list|()
block|{
return|return
name|httpDefaultMaxPerRoute
return|;
block|}
DECL|method|setHttpDefaultMaxPerRoute (Integer httpDefaultMaxPerRoute)
specifier|public
name|void
name|setHttpDefaultMaxPerRoute
parameter_list|(
name|Integer
name|httpDefaultMaxPerRoute
parameter_list|)
block|{
name|this
operator|.
name|httpDefaultMaxPerRoute
operator|=
name|httpDefaultMaxPerRoute
expr_stmt|;
block|}
DECL|method|getHttpMaxTotalConnections ()
specifier|public
name|Integer
name|getHttpMaxTotalConnections
parameter_list|()
block|{
return|return
name|httpMaxTotalConnections
return|;
block|}
DECL|method|setHttpMaxTotalConnections (Integer httpMaxTotalConnections)
specifier|public
name|void
name|setHttpMaxTotalConnections
parameter_list|(
name|Integer
name|httpMaxTotalConnections
parameter_list|)
block|{
name|this
operator|.
name|httpMaxTotalConnections
operator|=
name|httpMaxTotalConnections
expr_stmt|;
block|}
DECL|method|getHttpProxyHost ()
specifier|public
name|String
name|getHttpProxyHost
parameter_list|()
block|{
return|return
name|httpProxyHost
return|;
block|}
DECL|method|setHttpProxyHost (String httpProxyHost)
specifier|public
name|void
name|setHttpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|this
operator|.
name|httpProxyHost
operator|=
name|httpProxyHost
expr_stmt|;
block|}
DECL|method|getHttpProxyPassword ()
specifier|public
name|String
name|getHttpProxyPassword
parameter_list|()
block|{
return|return
name|httpProxyPassword
return|;
block|}
DECL|method|setHttpProxyPassword (String httpProxyPassword)
specifier|public
name|void
name|setHttpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPassword
operator|=
name|httpProxyPassword
expr_stmt|;
block|}
DECL|method|getHttpProxyPort ()
specifier|public
name|Integer
name|getHttpProxyPort
parameter_list|()
block|{
return|return
name|httpProxyPort
return|;
block|}
DECL|method|setHttpProxyPort (Integer httpProxyPort)
specifier|public
name|void
name|setHttpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPort
operator|=
name|httpProxyPort
expr_stmt|;
block|}
DECL|method|getHttpProxyUser ()
specifier|public
name|String
name|getHttpProxyUser
parameter_list|()
block|{
return|return
name|httpProxyUser
return|;
block|}
DECL|method|setHttpProxyUser (String httpProxyUser)
specifier|public
name|void
name|setHttpProxyUser
parameter_list|(
name|String
name|httpProxyUser
parameter_list|)
block|{
name|this
operator|.
name|httpProxyUser
operator|=
name|httpProxyUser
expr_stmt|;
block|}
DECL|method|getHttpReadTimeout ()
specifier|public
name|Integer
name|getHttpReadTimeout
parameter_list|()
block|{
return|return
name|httpReadTimeout
return|;
block|}
DECL|method|setHttpReadTimeout (Integer httpReadTimeout)
specifier|public
name|void
name|setHttpReadTimeout
parameter_list|(
name|Integer
name|httpReadTimeout
parameter_list|)
block|{
name|this
operator|.
name|httpReadTimeout
operator|=
name|httpReadTimeout
expr_stmt|;
block|}
DECL|method|getHttpRetryCount ()
specifier|public
name|Integer
name|getHttpRetryCount
parameter_list|()
block|{
return|return
name|httpRetryCount
return|;
block|}
DECL|method|setHttpRetryCount (Integer httpRetryCount)
specifier|public
name|void
name|setHttpRetryCount
parameter_list|(
name|Integer
name|httpRetryCount
parameter_list|)
block|{
name|this
operator|.
name|httpRetryCount
operator|=
name|httpRetryCount
expr_stmt|;
block|}
DECL|method|getHttpRetryIntervalSeconds ()
specifier|public
name|Integer
name|getHttpRetryIntervalSeconds
parameter_list|()
block|{
return|return
name|httpRetryIntervalSeconds
return|;
block|}
DECL|method|setHttpRetryIntervalSeconds (Integer httpRetryIntervalSeconds)
specifier|public
name|void
name|setHttpRetryIntervalSeconds
parameter_list|(
name|Integer
name|httpRetryIntervalSeconds
parameter_list|)
block|{
name|this
operator|.
name|httpRetryIntervalSeconds
operator|=
name|httpRetryIntervalSeconds
expr_stmt|;
block|}
DECL|method|getHttpStreamingReadTimeout ()
specifier|public
name|Integer
name|getHttpStreamingReadTimeout
parameter_list|()
block|{
return|return
name|httpStreamingReadTimeout
return|;
block|}
DECL|method|setHttpStreamingReadTimeout (Integer httpStreamingReadTimeout)
specifier|public
name|void
name|setHttpStreamingReadTimeout
parameter_list|(
name|Integer
name|httpStreamingReadTimeout
parameter_list|)
block|{
name|this
operator|.
name|httpStreamingReadTimeout
operator|=
name|httpStreamingReadTimeout
expr_stmt|;
block|}
DECL|method|getJsonStoreEnabled ()
specifier|public
name|Boolean
name|getJsonStoreEnabled
parameter_list|()
block|{
return|return
name|jsonStoreEnabled
return|;
block|}
DECL|method|setJsonStoreEnabled (Boolean jsonStoreEnabled)
specifier|public
name|void
name|setJsonStoreEnabled
parameter_list|(
name|Boolean
name|jsonStoreEnabled
parameter_list|)
block|{
name|this
operator|.
name|jsonStoreEnabled
operator|=
name|jsonStoreEnabled
expr_stmt|;
block|}
DECL|method|getMbeanEnabled ()
specifier|public
name|Boolean
name|getMbeanEnabled
parameter_list|()
block|{
return|return
name|mbeanEnabled
return|;
block|}
DECL|method|setMbeanEnabled (Boolean mbeanEnabled)
specifier|public
name|void
name|setMbeanEnabled
parameter_list|(
name|Boolean
name|mbeanEnabled
parameter_list|)
block|{
name|this
operator|.
name|mbeanEnabled
operator|=
name|mbeanEnabled
expr_stmt|;
block|}
DECL|method|getOAuthPermissions ()
specifier|public
name|String
name|getOAuthPermissions
parameter_list|()
block|{
return|return
name|oAuthPermissions
return|;
block|}
DECL|method|setOAuthPermissions (String oAuthPermissions)
specifier|public
name|void
name|setOAuthPermissions
parameter_list|(
name|String
name|oAuthPermissions
parameter_list|)
block|{
name|this
operator|.
name|oAuthPermissions
operator|=
name|oAuthPermissions
expr_stmt|;
block|}
DECL|method|getPrettyDebugEnabled ()
specifier|public
name|Boolean
name|getPrettyDebugEnabled
parameter_list|()
block|{
return|return
name|prettyDebugEnabled
return|;
block|}
DECL|method|setPrettyDebugEnabled (Boolean prettyDebugEnabled)
specifier|public
name|void
name|setPrettyDebugEnabled
parameter_list|(
name|Boolean
name|prettyDebugEnabled
parameter_list|)
block|{
name|this
operator|.
name|prettyDebugEnabled
operator|=
name|prettyDebugEnabled
expr_stmt|;
block|}
DECL|method|getRestBaseURL ()
specifier|public
name|String
name|getRestBaseURL
parameter_list|()
block|{
return|return
name|restBaseURL
return|;
block|}
DECL|method|setRestBaseURL (String restBaseURL)
specifier|public
name|void
name|setRestBaseURL
parameter_list|(
name|String
name|restBaseURL
parameter_list|)
block|{
name|this
operator|.
name|restBaseURL
operator|=
name|restBaseURL
expr_stmt|;
block|}
DECL|method|getUseSSL ()
specifier|public
name|Boolean
name|getUseSSL
parameter_list|()
block|{
return|return
name|useSSL
return|;
block|}
DECL|method|setUseSSL (Boolean useSSL)
specifier|public
name|void
name|setUseSSL
parameter_list|(
name|Boolean
name|useSSL
parameter_list|)
block|{
name|this
operator|.
name|useSSL
operator|=
name|useSSL
expr_stmt|;
block|}
DECL|method|getVideoBaseURL ()
specifier|public
name|String
name|getVideoBaseURL
parameter_list|()
block|{
return|return
name|videoBaseURL
return|;
block|}
DECL|method|setVideoBaseURL (String videoBaseURL)
specifier|public
name|void
name|setVideoBaseURL
parameter_list|(
name|String
name|videoBaseURL
parameter_list|)
block|{
name|this
operator|.
name|videoBaseURL
operator|=
name|videoBaseURL
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

