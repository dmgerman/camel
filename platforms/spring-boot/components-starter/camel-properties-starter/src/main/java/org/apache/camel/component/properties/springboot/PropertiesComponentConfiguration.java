begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.properties.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The properties component is used for using property placeholders in endpoint  * uris.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.properties"
argument_list|)
DECL|class|PropertiesComponentConfiguration
specifier|public
class|class
name|PropertiesComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the properties component. This is      * enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * A list of locations to load properties. You can use comma to separate      * multiple locations. This option will override any default locations and      * only use the locations from this option.      */
DECL|field|location
specifier|private
name|String
name|location
decl_stmt|;
comment|/**      * Encoding to use when loading properties file from the file system or      * classpath. If no encoding has been set, then the properties files is      * loaded using ISO-8859-1 encoding (latin-1) as documented by      * java.util.Properties#load(java.io.InputStream)      */
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
comment|/**      * To use a custom PropertiesParser. The option is a      * org.apache.camel.component.properties.PropertiesParser type.      */
DECL|field|propertiesParser
specifier|private
name|String
name|propertiesParser
decl_stmt|;
comment|/**      * If false, the component does not attempt to find a default for the key by      * looking after the colon separator.      */
DECL|field|defaultFallbackEnabled
specifier|private
name|Boolean
name|defaultFallbackEnabled
init|=
literal|true
decl_stmt|;
comment|/**      * Whether to silently ignore if a location cannot be located, such as a      * properties file not found.      */
DECL|field|ignoreMissingLocation
specifier|private
name|Boolean
name|ignoreMissingLocation
init|=
literal|false
decl_stmt|;
comment|/**      * Sets initial properties which will be used before any locations are      * resolved. The option is a java.util.Properties type.      */
DECL|field|initialProperties
specifier|private
name|String
name|initialProperties
decl_stmt|;
comment|/**      * Sets a special list of override properties that take precedence and will      * use first, if a property exist. The option is a java.util.Properties      * type.      */
DECL|field|overrideProperties
specifier|private
name|String
name|overrideProperties
decl_stmt|;
comment|/**      * Sets the JVM system property mode (0 = never, 1 = fallback, 2 =      * override). The default mode (override) is to use system properties if      * present, and override any existing properties. OS environment variable      * mode is checked before JVM system property mode      */
DECL|field|systemPropertiesMode
specifier|private
name|Integer
name|systemPropertiesMode
init|=
literal|2
decl_stmt|;
comment|/**      * Sets the OS environment variables mode (0 = never, 1 = fallback, 2 =      * override). The default mode (override) is to use OS environment variables      * if present, and override any existing properties. OS environment variable      * mode is checked before JVM system property mode      */
DECL|field|environmentVariableMode
specifier|private
name|Integer
name|environmentVariableMode
init|=
literal|2
decl_stmt|;
comment|/**      * Whether to automatically discovery instances of PropertiesSource from      * registry and service factory.      */
DECL|field|autoDiscoverPropertiesSources
specifier|private
name|Boolean
name|autoDiscoverPropertiesSources
init|=
literal|true
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
DECL|method|getLocation ()
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
DECL|method|setLocation (String location)
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getPropertiesParser ()
specifier|public
name|String
name|getPropertiesParser
parameter_list|()
block|{
return|return
name|propertiesParser
return|;
block|}
DECL|method|setPropertiesParser (String propertiesParser)
specifier|public
name|void
name|setPropertiesParser
parameter_list|(
name|String
name|propertiesParser
parameter_list|)
block|{
name|this
operator|.
name|propertiesParser
operator|=
name|propertiesParser
expr_stmt|;
block|}
DECL|method|getDefaultFallbackEnabled ()
specifier|public
name|Boolean
name|getDefaultFallbackEnabled
parameter_list|()
block|{
return|return
name|defaultFallbackEnabled
return|;
block|}
DECL|method|setDefaultFallbackEnabled (Boolean defaultFallbackEnabled)
specifier|public
name|void
name|setDefaultFallbackEnabled
parameter_list|(
name|Boolean
name|defaultFallbackEnabled
parameter_list|)
block|{
name|this
operator|.
name|defaultFallbackEnabled
operator|=
name|defaultFallbackEnabled
expr_stmt|;
block|}
DECL|method|getIgnoreMissingLocation ()
specifier|public
name|Boolean
name|getIgnoreMissingLocation
parameter_list|()
block|{
return|return
name|ignoreMissingLocation
return|;
block|}
DECL|method|setIgnoreMissingLocation (Boolean ignoreMissingLocation)
specifier|public
name|void
name|setIgnoreMissingLocation
parameter_list|(
name|Boolean
name|ignoreMissingLocation
parameter_list|)
block|{
name|this
operator|.
name|ignoreMissingLocation
operator|=
name|ignoreMissingLocation
expr_stmt|;
block|}
DECL|method|getInitialProperties ()
specifier|public
name|String
name|getInitialProperties
parameter_list|()
block|{
return|return
name|initialProperties
return|;
block|}
DECL|method|setInitialProperties (String initialProperties)
specifier|public
name|void
name|setInitialProperties
parameter_list|(
name|String
name|initialProperties
parameter_list|)
block|{
name|this
operator|.
name|initialProperties
operator|=
name|initialProperties
expr_stmt|;
block|}
DECL|method|getOverrideProperties ()
specifier|public
name|String
name|getOverrideProperties
parameter_list|()
block|{
return|return
name|overrideProperties
return|;
block|}
DECL|method|setOverrideProperties (String overrideProperties)
specifier|public
name|void
name|setOverrideProperties
parameter_list|(
name|String
name|overrideProperties
parameter_list|)
block|{
name|this
operator|.
name|overrideProperties
operator|=
name|overrideProperties
expr_stmt|;
block|}
DECL|method|getSystemPropertiesMode ()
specifier|public
name|Integer
name|getSystemPropertiesMode
parameter_list|()
block|{
return|return
name|systemPropertiesMode
return|;
block|}
DECL|method|setSystemPropertiesMode (Integer systemPropertiesMode)
specifier|public
name|void
name|setSystemPropertiesMode
parameter_list|(
name|Integer
name|systemPropertiesMode
parameter_list|)
block|{
name|this
operator|.
name|systemPropertiesMode
operator|=
name|systemPropertiesMode
expr_stmt|;
block|}
DECL|method|getEnvironmentVariableMode ()
specifier|public
name|Integer
name|getEnvironmentVariableMode
parameter_list|()
block|{
return|return
name|environmentVariableMode
return|;
block|}
DECL|method|setEnvironmentVariableMode (Integer environmentVariableMode)
specifier|public
name|void
name|setEnvironmentVariableMode
parameter_list|(
name|Integer
name|environmentVariableMode
parameter_list|)
block|{
name|this
operator|.
name|environmentVariableMode
operator|=
name|environmentVariableMode
expr_stmt|;
block|}
DECL|method|getAutoDiscoverPropertiesSources ()
specifier|public
name|Boolean
name|getAutoDiscoverPropertiesSources
parameter_list|()
block|{
return|return
name|autoDiscoverPropertiesSources
return|;
block|}
DECL|method|setAutoDiscoverPropertiesSources ( Boolean autoDiscoverPropertiesSources)
specifier|public
name|void
name|setAutoDiscoverPropertiesSources
parameter_list|(
name|Boolean
name|autoDiscoverPropertiesSources
parameter_list|)
block|{
name|this
operator|.
name|autoDiscoverPropertiesSources
operator|=
name|autoDiscoverPropertiesSources
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
block|}
end_class

end_unit

