begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.corda.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|corda
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|node
operator|.
name|services
operator|.
name|vault
operator|.
name|PageSpecification
import|;
end_import

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|node
operator|.
name|services
operator|.
name|vault
operator|.
name|QueryCriteria
import|;
end_import

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|node
operator|.
name|services
operator|.
name|vault
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The corda component uses the corda-rpc to interact with corda nodes.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.corda"
argument_list|)
DECL|class|CordaComponentConfiguration
specifier|public
class|class
name|CordaComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the corda component. This is      * enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * Default configuration      */
DECL|field|configuration
specifier|private
name|CordaConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
comment|/**      * Whether the producer should be started lazy (on the first message). By      * starting lazy you can use this to allow CamelContext and routes to      * startup in situations where a producer may otherwise fail during starting      * and cause the route to fail being started. By deferring this startup to      * be lazy then the startup failure can be handled during routing messages      * via Camel's routing error handlers. Beware that when the first message is      * processed then creating and starting the producer may take a little time      * and prolong the total processing time of the processing.      */
DECL|field|lazyStartProducer
specifier|private
name|Boolean
name|lazyStartProducer
init|=
literal|false
decl_stmt|;
comment|/**      * Allows for bridging the consumer to the Camel routing Error Handler,      * which mean any exceptions occurred while the consumer is trying to pickup      * incoming messages, or the likes, will now be processed as a message and      * handled by the routing Error Handler. By default the consumer will use      * the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that      * will be logged at WARN or ERROR level and ignored.      */
DECL|field|bridgeErrorHandler
specifier|private
name|Boolean
name|bridgeErrorHandler
init|=
literal|false
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|CordaConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( CordaConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|CordaConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|method|getLazyStartProducer ()
specifier|public
name|Boolean
name|getLazyStartProducer
parameter_list|()
block|{
return|return
name|lazyStartProducer
return|;
block|}
DECL|method|setLazyStartProducer (Boolean lazyStartProducer)
specifier|public
name|void
name|setLazyStartProducer
parameter_list|(
name|Boolean
name|lazyStartProducer
parameter_list|)
block|{
name|this
operator|.
name|lazyStartProducer
operator|=
name|lazyStartProducer
expr_stmt|;
block|}
DECL|method|getBridgeErrorHandler ()
specifier|public
name|Boolean
name|getBridgeErrorHandler
parameter_list|()
block|{
return|return
name|bridgeErrorHandler
return|;
block|}
DECL|method|setBridgeErrorHandler (Boolean bridgeErrorHandler)
specifier|public
name|void
name|setBridgeErrorHandler
parameter_list|(
name|Boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|bridgeErrorHandler
operator|=
name|bridgeErrorHandler
expr_stmt|;
block|}
DECL|class|CordaConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|CordaConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|corda
operator|.
name|CordaConfiguration
operator|.
name|class
decl_stmt|;
DECL|field|operation
specifier|private
name|String
name|operation
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
name|Integer
name|port
decl_stmt|;
DECL|field|processSnapshot
specifier|private
name|Boolean
name|processSnapshot
decl_stmt|;
DECL|field|flowLociClass
specifier|private
name|Class
name|flowLociClass
decl_stmt|;
DECL|field|arguments
specifier|private
name|Object
index|[]
name|arguments
decl_stmt|;
DECL|field|contractStateClass
specifier|private
name|Class
name|contractStateClass
decl_stmt|;
DECL|field|queryCriteria
specifier|private
name|QueryCriteria
name|queryCriteria
decl_stmt|;
DECL|field|pageSpecification
specifier|private
name|PageSpecification
name|pageSpecification
decl_stmt|;
DECL|field|sort
specifier|private
name|Sort
name|sort
decl_stmt|;
DECL|method|getOperation ()
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
DECL|method|setOperation (String operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getProcessSnapshot ()
specifier|public
name|Boolean
name|getProcessSnapshot
parameter_list|()
block|{
return|return
name|processSnapshot
return|;
block|}
DECL|method|setProcessSnapshot (Boolean processSnapshot)
specifier|public
name|void
name|setProcessSnapshot
parameter_list|(
name|Boolean
name|processSnapshot
parameter_list|)
block|{
name|this
operator|.
name|processSnapshot
operator|=
name|processSnapshot
expr_stmt|;
block|}
DECL|method|getFlowLociClass ()
specifier|public
name|Class
name|getFlowLociClass
parameter_list|()
block|{
return|return
name|flowLociClass
return|;
block|}
DECL|method|setFlowLociClass (Class flowLociClass)
specifier|public
name|void
name|setFlowLociClass
parameter_list|(
name|Class
name|flowLociClass
parameter_list|)
block|{
name|this
operator|.
name|flowLociClass
operator|=
name|flowLociClass
expr_stmt|;
block|}
DECL|method|getArguments ()
specifier|public
name|Object
index|[]
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
DECL|method|setArguments (Object[] arguments)
specifier|public
name|void
name|setArguments
parameter_list|(
name|Object
index|[]
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
block|}
DECL|method|getContractStateClass ()
specifier|public
name|Class
name|getContractStateClass
parameter_list|()
block|{
return|return
name|contractStateClass
return|;
block|}
DECL|method|setContractStateClass (Class contractStateClass)
specifier|public
name|void
name|setContractStateClass
parameter_list|(
name|Class
name|contractStateClass
parameter_list|)
block|{
name|this
operator|.
name|contractStateClass
operator|=
name|contractStateClass
expr_stmt|;
block|}
DECL|method|getQueryCriteria ()
specifier|public
name|QueryCriteria
name|getQueryCriteria
parameter_list|()
block|{
return|return
name|queryCriteria
return|;
block|}
DECL|method|setQueryCriteria (QueryCriteria queryCriteria)
specifier|public
name|void
name|setQueryCriteria
parameter_list|(
name|QueryCriteria
name|queryCriteria
parameter_list|)
block|{
name|this
operator|.
name|queryCriteria
operator|=
name|queryCriteria
expr_stmt|;
block|}
DECL|method|getPageSpecification ()
specifier|public
name|PageSpecification
name|getPageSpecification
parameter_list|()
block|{
return|return
name|pageSpecification
return|;
block|}
DECL|method|setPageSpecification (PageSpecification pageSpecification)
specifier|public
name|void
name|setPageSpecification
parameter_list|(
name|PageSpecification
name|pageSpecification
parameter_list|)
block|{
name|this
operator|.
name|pageSpecification
operator|=
name|pageSpecification
expr_stmt|;
block|}
DECL|method|getSort ()
specifier|public
name|Sort
name|getSort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
DECL|method|setSort (Sort sort)
specifier|public
name|void
name|setSort
parameter_list|(
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

