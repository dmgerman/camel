begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.opentracing.starter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
operator|.
name|starter
package|;
end_package

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|opentracing
operator|.
name|OpenTracingTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|OpenTracingConfigurationProperties
operator|.
name|class
argument_list|)
annotation|@
name|ConditionalOnProperty
argument_list|(
name|value
operator|=
literal|"camel.opentracing.enabled"
argument_list|,
name|matchIfMissing
operator|=
literal|true
argument_list|)
DECL|class|OpenTracingAutoConfiguration
specifier|public
class|class
name|OpenTracingAutoConfiguration
block|{
annotation|@
name|Autowired
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|tracer
specifier|private
name|Tracer
name|tracer
decl_stmt|;
annotation|@
name|Bean
argument_list|(
name|initMethod
operator|=
literal|""
argument_list|,
name|destroyMethod
operator|=
literal|""
argument_list|)
comment|// Camel handles the lifecycle of this bean
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|OpenTracingTracer
operator|.
name|class
argument_list|)
DECL|method|openTracingEventNotifier (CamelContext camelContext, OpenTracingConfigurationProperties config)
name|OpenTracingTracer
name|openTracingEventNotifier
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|OpenTracingConfigurationProperties
name|config
parameter_list|)
block|{
name|OpenTracingTracer
name|ottracer
init|=
operator|new
name|OpenTracingTracer
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracer
operator|!=
literal|null
condition|)
block|{
name|ottracer
operator|.
name|setTracer
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getExcludePatterns
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ottracer
operator|.
name|setExcludePatterns
argument_list|(
name|config
operator|.
name|getExcludePatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getEncoding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ottracer
operator|.
name|setEncoding
argument_list|(
name|config
operator|.
name|getEncoding
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ottracer
operator|.
name|init
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
return|return
name|ottracer
return|;
block|}
block|}
end_class

end_unit

