begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|DataFormatConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The FHIR JSon data format is used to marshall/unmarshall to/from FHIR objects  * to/from JSON.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.dataformat.fhirjson"
argument_list|)
DECL|class|FhirJsonDataFormatConfiguration
specifier|public
class|class
name|FhirJsonDataFormatConfiguration
extends|extends
name|DataFormatConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the fhirJson data format. This is      * enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * The version of FHIR to use. Possible values are:      * DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4      */
DECL|field|fhirVersion
specifier|private
name|String
name|fhirVersion
init|=
literal|"DSTU3"
decl_stmt|;
comment|/**      * Sets the pretty print flag, meaning that the parser will encode resources      * with human-readable spacing and newlines between elements instead of      * condensing output as much as possible.      */
DECL|field|prettyPrint
specifier|private
name|Boolean
name|prettyPrint
init|=
literal|false
decl_stmt|;
comment|/**      * Sets the server's base URL used by this parser. If a value is set,      * resource references will be turned into relative references if they are      * provided as absolute URLs but have a base matching the given base.      */
DECL|field|serverBaseUrl
specifier|private
name|String
name|serverBaseUrl
decl_stmt|;
comment|/**      * If set to true (default is false) the ID of any resources being encoded      * will not be included in the output. Note that this does not apply to      * contained resources, only to root resources. In other words, if this is      * set to true, contained resources will still have local IDs but the      * outer/containing ID will not have an ID.      */
DECL|field|omitResourceId
specifier|private
name|Boolean
name|omitResourceId
init|=
literal|false
decl_stmt|;
comment|/**      * If set to true (default is false), the values supplied to      * setEncodeElements(Set) will not be applied to the root resource      * (typically a Bundle), but will be applied to any sub-resources contained      * within it (i.e. search result resources in that bundle)      */
DECL|field|encodeElementsAppliesToChildResourcesOnly
specifier|private
name|Boolean
name|encodeElementsAppliesToChildResourcesOnly
init|=
literal|false
decl_stmt|;
comment|/**      * If provided, specifies the elements which should be encoded, to the      * exclusion of all others. Valid values for this field would include:      * Patient - Encode patient and all its children Patient.name - Encode only      * the patient's name Patient.name.family - Encode only the patient's family      * name .text - Encode the text element on any resource (only the very first      * position may contain a wildcard) .(mandatory) - This is a special case      * which causes any mandatory fields (min 0) to be encoded. The option is a      * java.util.Set<java.lang.String> type.      */
DECL|field|encodeElements
specifier|private
name|String
name|encodeElements
decl_stmt|;
comment|/**      * If provided, specifies the elements which should NOT be encoded. Valid      * values for this field would include: Patient - Don't encode patient and      * all its children Patient.name - Don't encode the patient's name      * Patient.name.family - Don't encode the patient's family name .text -      * Don't encode the text element on any resource (only the very first      * position may contain a wildcard) DSTU2 note: Note that values including      * meta, such as Patient.meta will work for DSTU2 parsers, but values with      * subelements on meta such as Patient.meta.lastUpdated will only work in      * DSTU3 mode. The option is a java.util.Set<java.lang.String> type.      */
DECL|field|dontEncodeElements
specifier|private
name|String
name|dontEncodeElements
decl_stmt|;
comment|/**      * If set to true (which is the default), resource references containing a      * version will have the version removed when the resource is encoded. This      * is generally good behaviour because in most situations, references from      * one resource to another should be to the resource by ID, not by ID and      * version. In some cases though, it may be desirable to preserve the      * version in resource links. In that case, this value should be set to      * false. This method provides the ability to globally disable reference      * encoding. If finer-grained control is needed, use      * setDontStripVersionsFromReferencesAtPaths(List)      */
DECL|field|stripVersionsFromReferences
specifier|private
name|Boolean
name|stripVersionsFromReferences
init|=
literal|false
decl_stmt|;
comment|/**      * If set to true (which is the default), the Bundle.entry.fullUrl will      * override the Bundle.entry.resource's resource id if the fullUrl is      * defined. This behavior happens when parsing the source data into a Bundle      * object. Set this to false if this is not the desired behavior (e.g. the      * client code wishes to perform additional validation checks between the      * fullUrl and the resource id).      */
DECL|field|overrideResourceIdWithBundleEntryFullUrl
specifier|private
name|Boolean
name|overrideResourceIdWithBundleEntryFullUrl
init|=
literal|false
decl_stmt|;
comment|/**      * If set to true (default is false) only elements marked by the FHIR      * specification as being summary elements will be included.      */
DECL|field|summaryMode
specifier|private
name|Boolean
name|summaryMode
init|=
literal|false
decl_stmt|;
comment|/**      * If set to true (default is false), narratives will not be included in the      * encoded values.      */
DECL|field|suppressNarratives
specifier|private
name|Boolean
name|suppressNarratives
init|=
literal|false
decl_stmt|;
comment|/**      * If supplied value(s), any resource references at the specified paths will      * have their resource versions encoded instead of being automatically      * stripped during the encoding process. This setting has no effect on the      * parsing process. This method provides a finer-grained level of control      * than setStripVersionsFromReferences(Boolean) and any paths specified by      * this method will be encoded even if      * setStripVersionsFromReferences(Boolean) has been set to true (which is      * the default)      */
DECL|field|dontStripVersionsFromReferencesAtPaths
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dontStripVersionsFromReferencesAtPaths
decl_stmt|;
comment|/**      * Whether the data format should set the Content-Type header with the type      * from the data format if the data format is capable of doing so. For      * example application/xml for data formats marshalling to XML, or      * application/json for data formats marshalling to JSon etc.      */
DECL|field|contentTypeHeader
specifier|private
name|Boolean
name|contentTypeHeader
init|=
literal|false
decl_stmt|;
DECL|method|getFhirVersion ()
specifier|public
name|String
name|getFhirVersion
parameter_list|()
block|{
return|return
name|fhirVersion
return|;
block|}
DECL|method|setFhirVersion (String fhirVersion)
specifier|public
name|void
name|setFhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|this
operator|.
name|fhirVersion
operator|=
name|fhirVersion
expr_stmt|;
block|}
DECL|method|getPrettyPrint ()
specifier|public
name|Boolean
name|getPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
DECL|method|setPrettyPrint (Boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|Boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getServerBaseUrl ()
specifier|public
name|String
name|getServerBaseUrl
parameter_list|()
block|{
return|return
name|serverBaseUrl
return|;
block|}
DECL|method|setServerBaseUrl (String serverBaseUrl)
specifier|public
name|void
name|setServerBaseUrl
parameter_list|(
name|String
name|serverBaseUrl
parameter_list|)
block|{
name|this
operator|.
name|serverBaseUrl
operator|=
name|serverBaseUrl
expr_stmt|;
block|}
DECL|method|getOmitResourceId ()
specifier|public
name|Boolean
name|getOmitResourceId
parameter_list|()
block|{
return|return
name|omitResourceId
return|;
block|}
DECL|method|setOmitResourceId (Boolean omitResourceId)
specifier|public
name|void
name|setOmitResourceId
parameter_list|(
name|Boolean
name|omitResourceId
parameter_list|)
block|{
name|this
operator|.
name|omitResourceId
operator|=
name|omitResourceId
expr_stmt|;
block|}
DECL|method|getEncodeElementsAppliesToChildResourcesOnly ()
specifier|public
name|Boolean
name|getEncodeElementsAppliesToChildResourcesOnly
parameter_list|()
block|{
return|return
name|encodeElementsAppliesToChildResourcesOnly
return|;
block|}
DECL|method|setEncodeElementsAppliesToChildResourcesOnly ( Boolean encodeElementsAppliesToChildResourcesOnly)
specifier|public
name|void
name|setEncodeElementsAppliesToChildResourcesOnly
parameter_list|(
name|Boolean
name|encodeElementsAppliesToChildResourcesOnly
parameter_list|)
block|{
name|this
operator|.
name|encodeElementsAppliesToChildResourcesOnly
operator|=
name|encodeElementsAppliesToChildResourcesOnly
expr_stmt|;
block|}
DECL|method|getEncodeElements ()
specifier|public
name|String
name|getEncodeElements
parameter_list|()
block|{
return|return
name|encodeElements
return|;
block|}
DECL|method|setEncodeElements (String encodeElements)
specifier|public
name|void
name|setEncodeElements
parameter_list|(
name|String
name|encodeElements
parameter_list|)
block|{
name|this
operator|.
name|encodeElements
operator|=
name|encodeElements
expr_stmt|;
block|}
DECL|method|getDontEncodeElements ()
specifier|public
name|String
name|getDontEncodeElements
parameter_list|()
block|{
return|return
name|dontEncodeElements
return|;
block|}
DECL|method|setDontEncodeElements (String dontEncodeElements)
specifier|public
name|void
name|setDontEncodeElements
parameter_list|(
name|String
name|dontEncodeElements
parameter_list|)
block|{
name|this
operator|.
name|dontEncodeElements
operator|=
name|dontEncodeElements
expr_stmt|;
block|}
DECL|method|getStripVersionsFromReferences ()
specifier|public
name|Boolean
name|getStripVersionsFromReferences
parameter_list|()
block|{
return|return
name|stripVersionsFromReferences
return|;
block|}
DECL|method|setStripVersionsFromReferences ( Boolean stripVersionsFromReferences)
specifier|public
name|void
name|setStripVersionsFromReferences
parameter_list|(
name|Boolean
name|stripVersionsFromReferences
parameter_list|)
block|{
name|this
operator|.
name|stripVersionsFromReferences
operator|=
name|stripVersionsFromReferences
expr_stmt|;
block|}
DECL|method|getOverrideResourceIdWithBundleEntryFullUrl ()
specifier|public
name|Boolean
name|getOverrideResourceIdWithBundleEntryFullUrl
parameter_list|()
block|{
return|return
name|overrideResourceIdWithBundleEntryFullUrl
return|;
block|}
DECL|method|setOverrideResourceIdWithBundleEntryFullUrl ( Boolean overrideResourceIdWithBundleEntryFullUrl)
specifier|public
name|void
name|setOverrideResourceIdWithBundleEntryFullUrl
parameter_list|(
name|Boolean
name|overrideResourceIdWithBundleEntryFullUrl
parameter_list|)
block|{
name|this
operator|.
name|overrideResourceIdWithBundleEntryFullUrl
operator|=
name|overrideResourceIdWithBundleEntryFullUrl
expr_stmt|;
block|}
DECL|method|getSummaryMode ()
specifier|public
name|Boolean
name|getSummaryMode
parameter_list|()
block|{
return|return
name|summaryMode
return|;
block|}
DECL|method|setSummaryMode (Boolean summaryMode)
specifier|public
name|void
name|setSummaryMode
parameter_list|(
name|Boolean
name|summaryMode
parameter_list|)
block|{
name|this
operator|.
name|summaryMode
operator|=
name|summaryMode
expr_stmt|;
block|}
DECL|method|getSuppressNarratives ()
specifier|public
name|Boolean
name|getSuppressNarratives
parameter_list|()
block|{
return|return
name|suppressNarratives
return|;
block|}
DECL|method|setSuppressNarratives (Boolean suppressNarratives)
specifier|public
name|void
name|setSuppressNarratives
parameter_list|(
name|Boolean
name|suppressNarratives
parameter_list|)
block|{
name|this
operator|.
name|suppressNarratives
operator|=
name|suppressNarratives
expr_stmt|;
block|}
DECL|method|getDontStripVersionsFromReferencesAtPaths ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDontStripVersionsFromReferencesAtPaths
parameter_list|()
block|{
return|return
name|dontStripVersionsFromReferencesAtPaths
return|;
block|}
DECL|method|setDontStripVersionsFromReferencesAtPaths ( List<String> dontStripVersionsFromReferencesAtPaths)
specifier|public
name|void
name|setDontStripVersionsFromReferencesAtPaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dontStripVersionsFromReferencesAtPaths
parameter_list|)
block|{
name|this
operator|.
name|dontStripVersionsFromReferencesAtPaths
operator|=
name|dontStripVersionsFromReferencesAtPaths
expr_stmt|;
block|}
DECL|method|getContentTypeHeader ()
specifier|public
name|Boolean
name|getContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
DECL|method|setContentTypeHeader (Boolean contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|Boolean
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
block|}
end_class

end_unit

