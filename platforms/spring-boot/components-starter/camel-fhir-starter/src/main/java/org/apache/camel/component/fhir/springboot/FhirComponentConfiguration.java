begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fhir.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|context
operator|.
name|FhirContext
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IGenericClient
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|uhn
operator|.
name|fhir
operator|.
name|rest
operator|.
name|client
operator|.
name|api
operator|.
name|IRestfulClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|internal
operator|.
name|FhirApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The fhir component is used for working with the FHIR protocol (health care).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.fhir"
argument_list|)
DECL|class|FhirComponentConfiguration
specifier|public
class|class
name|FhirComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the fhir component. This is      * enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * To use the shared configuration      */
DECL|field|configuration
specifier|private
name|FhirConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
comment|/**      * Whether the producer should be started lazy (on the first message). By      * starting lazy you can use this to allow CamelContext and routes to      * startup in situations where a producer may otherwise fail during starting      * and cause the route to fail being started. By deferring this startup to      * be lazy then the startup failure can be handled during routing messages      * via Camel's routing error handlers. Beware that when the first message is      * processed then creating and starting the producer may take a little time      * and prolong the total processing time of the processing.      */
DECL|field|lazyStartProducer
specifier|private
name|Boolean
name|lazyStartProducer
init|=
literal|false
decl_stmt|;
comment|/**      * Allows for bridging the consumer to the Camel routing Error Handler,      * which mean any exceptions occurred while the consumer is trying to pickup      * incoming messages, or the likes, will now be processed as a message and      * handled by the routing Error Handler. By default the consumer will use      * the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that      * will be logged at WARN or ERROR level and ignored.      */
DECL|field|bridgeErrorHandler
specifier|private
name|Boolean
name|bridgeErrorHandler
init|=
literal|false
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|FhirConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( FhirConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|FhirConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|method|getLazyStartProducer ()
specifier|public
name|Boolean
name|getLazyStartProducer
parameter_list|()
block|{
return|return
name|lazyStartProducer
return|;
block|}
DECL|method|setLazyStartProducer (Boolean lazyStartProducer)
specifier|public
name|void
name|setLazyStartProducer
parameter_list|(
name|Boolean
name|lazyStartProducer
parameter_list|)
block|{
name|this
operator|.
name|lazyStartProducer
operator|=
name|lazyStartProducer
expr_stmt|;
block|}
DECL|method|getBridgeErrorHandler ()
specifier|public
name|Boolean
name|getBridgeErrorHandler
parameter_list|()
block|{
return|return
name|bridgeErrorHandler
return|;
block|}
DECL|method|setBridgeErrorHandler (Boolean bridgeErrorHandler)
specifier|public
name|void
name|setBridgeErrorHandler
parameter_list|(
name|Boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|bridgeErrorHandler
operator|=
name|bridgeErrorHandler
expr_stmt|;
block|}
DECL|class|FhirConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|FhirConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fhir
operator|.
name|FhirConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * Component configuration for FHIR component.          */
DECL|field|serverUrl
specifier|private
name|String
name|serverUrl
decl_stmt|;
comment|/**          * Component configuration for FHIR component.          */
DECL|field|fhirVersion
specifier|private
name|String
name|fhirVersion
init|=
literal|"R4"
decl_stmt|;
comment|/**          * Component configuration for FHIR component.          */
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
comment|/**          * Component configuration for FHIR component.          */
DECL|field|prettyPrint
specifier|private
name|Boolean
name|prettyPrint
init|=
literal|false
decl_stmt|;
comment|/**          * Component configuration for FHIR component.          */
DECL|field|summary
specifier|private
name|String
name|summary
decl_stmt|;
comment|/**          * What kind of operation to perform          */
DECL|field|apiName
specifier|private
name|FhirApiName
name|apiName
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|fhirContext
specifier|private
name|FhirContext
name|fhirContext
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|forceConformanceCheck
specifier|private
name|Boolean
name|forceConformanceCheck
init|=
literal|false
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|log
specifier|private
name|Boolean
name|log
init|=
literal|false
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|compress
specifier|private
name|Boolean
name|compress
init|=
literal|false
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|sessionCookie
specifier|private
name|String
name|sessionCookie
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|validationMode
specifier|private
name|String
name|validationMode
init|=
literal|"ONCE"
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|deferModelScanning
specifier|private
name|Boolean
name|deferModelScanning
init|=
literal|false
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|connectionTimeout
specifier|private
name|Integer
name|connectionTimeout
init|=
literal|10000
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|socketTimeout
specifier|private
name|Integer
name|socketTimeout
init|=
literal|10000
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|proxyHost
specifier|private
name|String
name|proxyHost
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|proxyPassword
specifier|private
name|String
name|proxyPassword
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|proxyPort
specifier|private
name|Integer
name|proxyPort
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|proxyUser
specifier|private
name|String
name|proxyUser
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|client
specifier|private
name|IGenericClient
name|client
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|clientFactory
specifier|private
name|IRestfulClientFactory
name|clientFactory
decl_stmt|;
DECL|method|getServerUrl ()
specifier|public
name|String
name|getServerUrl
parameter_list|()
block|{
return|return
name|serverUrl
return|;
block|}
DECL|method|setServerUrl (String serverUrl)
specifier|public
name|void
name|setServerUrl
parameter_list|(
name|String
name|serverUrl
parameter_list|)
block|{
name|this
operator|.
name|serverUrl
operator|=
name|serverUrl
expr_stmt|;
block|}
DECL|method|getFhirVersion ()
specifier|public
name|String
name|getFhirVersion
parameter_list|()
block|{
return|return
name|fhirVersion
return|;
block|}
DECL|method|setFhirVersion (String fhirVersion)
specifier|public
name|void
name|setFhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|this
operator|.
name|fhirVersion
operator|=
name|fhirVersion
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getPrettyPrint ()
specifier|public
name|Boolean
name|getPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
DECL|method|setPrettyPrint (Boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|Boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getSummary ()
specifier|public
name|String
name|getSummary
parameter_list|()
block|{
return|return
name|summary
return|;
block|}
DECL|method|setSummary (String summary)
specifier|public
name|void
name|setSummary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|this
operator|.
name|summary
operator|=
name|summary
expr_stmt|;
block|}
DECL|method|getApiName ()
specifier|public
name|FhirApiName
name|getApiName
parameter_list|()
block|{
return|return
name|apiName
return|;
block|}
DECL|method|setApiName (FhirApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|FhirApiName
name|apiName
parameter_list|)
block|{
name|this
operator|.
name|apiName
operator|=
name|apiName
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
DECL|method|getFhirContext ()
specifier|public
name|FhirContext
name|getFhirContext
parameter_list|()
block|{
return|return
name|fhirContext
return|;
block|}
DECL|method|setFhirContext (FhirContext fhirContext)
specifier|public
name|void
name|setFhirContext
parameter_list|(
name|FhirContext
name|fhirContext
parameter_list|)
block|{
name|this
operator|.
name|fhirContext
operator|=
name|fhirContext
expr_stmt|;
block|}
DECL|method|getForceConformanceCheck ()
specifier|public
name|Boolean
name|getForceConformanceCheck
parameter_list|()
block|{
return|return
name|forceConformanceCheck
return|;
block|}
DECL|method|setForceConformanceCheck (Boolean forceConformanceCheck)
specifier|public
name|void
name|setForceConformanceCheck
parameter_list|(
name|Boolean
name|forceConformanceCheck
parameter_list|)
block|{
name|this
operator|.
name|forceConformanceCheck
operator|=
name|forceConformanceCheck
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
block|{
return|return
name|accessToken
return|;
block|}
DECL|method|setAccessToken (String accessToken)
specifier|public
name|void
name|setAccessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|this
operator|.
name|accessToken
operator|=
name|accessToken
expr_stmt|;
block|}
DECL|method|getLog ()
specifier|public
name|Boolean
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
DECL|method|setLog (Boolean log)
specifier|public
name|void
name|setLog
parameter_list|(
name|Boolean
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|getCompress ()
specifier|public
name|Boolean
name|getCompress
parameter_list|()
block|{
return|return
name|compress
return|;
block|}
DECL|method|setCompress (Boolean compress)
specifier|public
name|void
name|setCompress
parameter_list|(
name|Boolean
name|compress
parameter_list|)
block|{
name|this
operator|.
name|compress
operator|=
name|compress
expr_stmt|;
block|}
DECL|method|getSessionCookie ()
specifier|public
name|String
name|getSessionCookie
parameter_list|()
block|{
return|return
name|sessionCookie
return|;
block|}
DECL|method|setSessionCookie (String sessionCookie)
specifier|public
name|void
name|setSessionCookie
parameter_list|(
name|String
name|sessionCookie
parameter_list|)
block|{
name|this
operator|.
name|sessionCookie
operator|=
name|sessionCookie
expr_stmt|;
block|}
DECL|method|getValidationMode ()
specifier|public
name|String
name|getValidationMode
parameter_list|()
block|{
return|return
name|validationMode
return|;
block|}
DECL|method|setValidationMode (String validationMode)
specifier|public
name|void
name|setValidationMode
parameter_list|(
name|String
name|validationMode
parameter_list|)
block|{
name|this
operator|.
name|validationMode
operator|=
name|validationMode
expr_stmt|;
block|}
DECL|method|getDeferModelScanning ()
specifier|public
name|Boolean
name|getDeferModelScanning
parameter_list|()
block|{
return|return
name|deferModelScanning
return|;
block|}
DECL|method|setDeferModelScanning (Boolean deferModelScanning)
specifier|public
name|void
name|setDeferModelScanning
parameter_list|(
name|Boolean
name|deferModelScanning
parameter_list|)
block|{
name|this
operator|.
name|deferModelScanning
operator|=
name|deferModelScanning
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|Integer
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
DECL|method|setConnectionTimeout (Integer connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getSocketTimeout ()
specifier|public
name|Integer
name|getSocketTimeout
parameter_list|()
block|{
return|return
name|socketTimeout
return|;
block|}
DECL|method|setSocketTimeout (Integer socketTimeout)
specifier|public
name|void
name|setSocketTimeout
parameter_list|(
name|Integer
name|socketTimeout
parameter_list|)
block|{
name|this
operator|.
name|socketTimeout
operator|=
name|socketTimeout
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|proxyHost
return|;
block|}
DECL|method|setProxyHost (String proxyHost)
specifier|public
name|void
name|setProxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
block|}
DECL|method|getProxyPassword ()
specifier|public
name|String
name|getProxyPassword
parameter_list|()
block|{
return|return
name|proxyPassword
return|;
block|}
DECL|method|setProxyPassword (String proxyPassword)
specifier|public
name|void
name|setProxyPassword
parameter_list|(
name|String
name|proxyPassword
parameter_list|)
block|{
name|this
operator|.
name|proxyPassword
operator|=
name|proxyPassword
expr_stmt|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|Integer
name|getProxyPort
parameter_list|()
block|{
return|return
name|proxyPort
return|;
block|}
DECL|method|setProxyPort (Integer proxyPort)
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
DECL|method|getProxyUser ()
specifier|public
name|String
name|getProxyUser
parameter_list|()
block|{
return|return
name|proxyUser
return|;
block|}
DECL|method|setProxyUser (String proxyUser)
specifier|public
name|void
name|setProxyUser
parameter_list|(
name|String
name|proxyUser
parameter_list|)
block|{
name|this
operator|.
name|proxyUser
operator|=
name|proxyUser
expr_stmt|;
block|}
DECL|method|getClient ()
specifier|public
name|IGenericClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
DECL|method|setClient (IGenericClient client)
specifier|public
name|void
name|setClient
parameter_list|(
name|IGenericClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
DECL|method|getClientFactory ()
specifier|public
name|IRestfulClientFactory
name|getClientFactory
parameter_list|()
block|{
return|return
name|clientFactory
return|;
block|}
DECL|method|setClientFactory (IRestfulClientFactory clientFactory)
specifier|public
name|void
name|setClientFactory
parameter_list|(
name|IRestfulClientFactory
name|clientFactory
parameter_list|)
block|{
name|this
operator|.
name|clientFactory
operator|=
name|clientFactory
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

