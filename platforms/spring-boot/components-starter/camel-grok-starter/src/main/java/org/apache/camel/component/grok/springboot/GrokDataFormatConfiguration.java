begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grok.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grok
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|DataFormatConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The Grok data format is used for unmarshalling unstructured data to objects  * using Logstash based Grok patterns.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.dataformat.grok"
argument_list|)
DECL|class|GrokDataFormatConfiguration
specifier|public
class|class
name|GrokDataFormatConfiguration
extends|extends
name|DataFormatConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the grok data format. This is      * enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * The grok pattern to match lines of input      */
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
comment|/**      * Turns on flattened mode. In flattened mode the exception is thrown when      * there are multiple pattern matches with same key.      */
DECL|field|flattened
specifier|private
name|Boolean
name|flattened
init|=
literal|false
decl_stmt|;
comment|/**      * If false, every line of input is matched for pattern only once. Otherwise      * the line can be scanned multiple times when non-terminal pattern is used.      */
DECL|field|allowMultipleMatchesPerLine
specifier|private
name|Boolean
name|allowMultipleMatchesPerLine
init|=
literal|true
decl_stmt|;
comment|/**      * Whether to capture named expressions only or not (i.e. %{IP:ip} but not      * ${IP})      */
DECL|field|namedOnly
specifier|private
name|Boolean
name|namedOnly
init|=
literal|false
decl_stmt|;
comment|/**      * Whether the data format should set the Content-Type header with the type      * from the data format if the data format is capable of doing so. For      * example application/xml for data formats marshalling to XML, or      * application/json for data formats marshalling to JSon etc.      */
DECL|field|contentTypeHeader
specifier|private
name|Boolean
name|contentTypeHeader
init|=
literal|false
decl_stmt|;
DECL|method|getPattern ()
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
DECL|method|setPattern (String pattern)
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|getFlattened ()
specifier|public
name|Boolean
name|getFlattened
parameter_list|()
block|{
return|return
name|flattened
return|;
block|}
DECL|method|setFlattened (Boolean flattened)
specifier|public
name|void
name|setFlattened
parameter_list|(
name|Boolean
name|flattened
parameter_list|)
block|{
name|this
operator|.
name|flattened
operator|=
name|flattened
expr_stmt|;
block|}
DECL|method|getAllowMultipleMatchesPerLine ()
specifier|public
name|Boolean
name|getAllowMultipleMatchesPerLine
parameter_list|()
block|{
return|return
name|allowMultipleMatchesPerLine
return|;
block|}
DECL|method|setAllowMultipleMatchesPerLine ( Boolean allowMultipleMatchesPerLine)
specifier|public
name|void
name|setAllowMultipleMatchesPerLine
parameter_list|(
name|Boolean
name|allowMultipleMatchesPerLine
parameter_list|)
block|{
name|this
operator|.
name|allowMultipleMatchesPerLine
operator|=
name|allowMultipleMatchesPerLine
expr_stmt|;
block|}
DECL|method|getNamedOnly ()
specifier|public
name|Boolean
name|getNamedOnly
parameter_list|()
block|{
return|return
name|namedOnly
return|;
block|}
DECL|method|setNamedOnly (Boolean namedOnly)
specifier|public
name|void
name|setNamedOnly
parameter_list|(
name|Boolean
name|namedOnly
parameter_list|)
block|{
name|this
operator|.
name|namedOnly
operator|=
name|namedOnly
expr_stmt|;
block|}
DECL|method|getContentTypeHeader ()
specifier|public
name|Boolean
name|getContentTypeHeader
parameter_list|()
block|{
return|return
name|contentTypeHeader
return|;
block|}
DECL|method|setContentTypeHeader (Boolean contentTypeHeader)
specifier|public
name|void
name|setContentTypeHeader
parameter_list|(
name|Boolean
name|contentTypeHeader
parameter_list|)
block|{
name|this
operator|.
name|contentTypeHeader
operator|=
name|contentTypeHeader
expr_stmt|;
block|}
block|}
end_class

end_unit

