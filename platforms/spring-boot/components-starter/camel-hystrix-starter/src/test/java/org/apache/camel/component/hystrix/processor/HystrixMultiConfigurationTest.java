begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hystrix.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hystrix
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Navigate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|SpringBootApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_comment
comment|/**  * Testing the Hystrix multi configuration  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|SpringBootApplication
annotation|@
name|DirtiesContext
annotation|@
name|ContextConfiguration
argument_list|(
name|classes
operator|=
name|HystrixMultiConfiguration
operator|.
name|class
argument_list|)
annotation|@
name|SpringBootTest
argument_list|(
name|properties
operator|=
block|{
literal|"debug=false"
block|,
literal|"camel.hystrix.enabled=true"
block|,
literal|"camel.hystrix.group-key=global-group"
block|,
literal|"camel.hystrix.configurations.conf-1.group-key=conf-1-group"
block|,
literal|"camel.hystrix.configurations.conf-2.group-key=conf-2-group"
block|}
argument_list|)
DECL|class|HystrixMultiConfigurationTest
specifier|public
class|class
name|HystrixMultiConfigurationTest
block|{
annotation|@
name|Autowired
DECL|field|context
specifier|private
name|ApplicationContext
name|context
decl_stmt|;
annotation|@
name|Autowired
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Test
DECL|method|testBeans ()
specifier|public
name|void
name|testBeans
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HystrixConfigurationDefinition
argument_list|>
name|beans
init|=
name|context
operator|.
name|getBeansOfType
argument_list|(
name|HystrixConfigurationDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|beans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"global-group"
argument_list|,
name|beans
operator|.
name|get
argument_list|(
name|HystrixConstants
operator|.
name|DEFAULT_HYSTRIX_CONFIGURATION_ID
argument_list|)
operator|.
name|getGroupKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bean-group"
argument_list|,
name|beans
operator|.
name|get
argument_list|(
literal|"bean-conf"
argument_list|)
operator|.
name|getGroupKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"conf-1-group"
argument_list|,
name|beans
operator|.
name|get
argument_list|(
literal|"conf-1"
argument_list|)
operator|.
name|getGroupKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"conf-2-group"
argument_list|,
name|beans
operator|.
name|get
argument_list|(
literal|"conf-2"
argument_list|)
operator|.
name|getGroupKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigurations ()
specifier|public
name|void
name|testConfigurations
parameter_list|()
throws|throws
name|Exception
block|{
name|HystrixProcessor
name|processor1
init|=
name|findHystrixProcessor
argument_list|(
name|camelContext
operator|.
name|getRoute
argument_list|(
literal|"hystrix-route-1"
argument_list|)
operator|.
name|navigate
argument_list|()
argument_list|)
decl_stmt|;
name|HystrixProcessor
name|processor2
init|=
name|findHystrixProcessor
argument_list|(
name|camelContext
operator|.
name|getRoute
argument_list|(
literal|"hystrix-route-2"
argument_list|)
operator|.
name|navigate
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"conf-1-group"
argument_list|,
name|processor1
operator|.
name|getHystrixGroupKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"conf-2-group"
argument_list|,
name|processor2
operator|.
name|getHystrixGroupKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// **********************************************
comment|// Helper
comment|// **********************************************
DECL|method|findHystrixProcessor (Navigate<Processor> navigate)
specifier|private
name|HystrixProcessor
name|findHystrixProcessor
parameter_list|(
name|Navigate
argument_list|<
name|Processor
argument_list|>
name|navigate
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Processor
name|processor
range|:
name|navigate
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|processor
operator|instanceof
name|HystrixProcessor
condition|)
block|{
return|return
operator|(
name|HystrixProcessor
operator|)
name|processor
return|;
block|}
if|if
condition|(
name|processor
operator|instanceof
name|Navigate
condition|)
block|{
return|return
name|findHystrixProcessor
argument_list|(
operator|(
name|Navigate
argument_list|<
name|Processor
argument_list|>
operator|)
name|processor
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find an HystrixProcessor instance"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

