begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atomix.ha.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|ha
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|catalyst
operator|.
name|transport
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|ha
operator|.
name|AtomixClusterClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|ha
operator|.
name|AtomixClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|CamelAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ha
operator|.
name|ClusteredRouteControllerAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|ConfigurableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureBefore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|AllNestedConditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|AutoConfigureBefore
argument_list|(
block|{
name|ClusteredRouteControllerAutoConfiguration
operator|.
name|class
block|,
name|CamelAutoConfiguration
operator|.
name|class
block|}
argument_list|)
annotation|@
name|Conditional
argument_list|(
name|AtomixClusterServiceAutoConfiguration
operator|.
name|AutoConfigurationCondition
operator|.
name|class
argument_list|)
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|AtomixClusterServiceConfiguration
operator|.
name|class
argument_list|)
DECL|class|AtomixClusterServiceAutoConfiguration
specifier|public
class|class
name|AtomixClusterServiceAutoConfiguration
block|{
annotation|@
name|Autowired
DECL|field|configuration
specifier|private
name|AtomixClusterServiceConfiguration
name|configuration
decl_stmt|;
annotation|@
name|Bean
argument_list|(
name|initMethod
operator|=
literal|"start"
argument_list|,
name|destroyMethod
operator|=
literal|"stop"
argument_list|)
annotation|@
name|Scope
argument_list|(
name|ConfigurableBeanFactory
operator|.
name|SCOPE_SINGLETON
argument_list|)
annotation|@
name|ConditionalOnProperty
argument_list|(
name|prefix
operator|=
literal|"camel.component.atomix.cluster.service"
argument_list|,
name|name
operator|=
literal|"mode"
argument_list|,
name|havingValue
operator|=
literal|"node"
argument_list|)
DECL|method|atomixClusterService ()
specifier|public
name|CamelClusterService
name|atomixClusterService
parameter_list|()
block|{
name|AtomixClusterService
name|service
init|=
operator|new
name|AtomixClusterService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setNodes
argument_list|(
name|configuration
operator|.
name|getNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Address
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|isEphemeral
argument_list|()
argument_list|,
name|service
operator|::
name|setEphemeral
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getId
argument_list|()
argument_list|,
name|service
operator|::
name|setId
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|,
name|service
operator|::
name|setAddress
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getStoragePath
argument_list|()
argument_list|,
name|service
operator|::
name|setStoragePath
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getStorageLevel
argument_list|()
argument_list|,
name|service
operator|::
name|setStorageLevel
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getConfigurationUri
argument_list|()
argument_list|,
name|service
operator|::
name|setConfigurationUri
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
annotation|@
name|Bean
argument_list|(
name|initMethod
operator|=
literal|"start"
argument_list|,
name|destroyMethod
operator|=
literal|"stop"
argument_list|)
annotation|@
name|Scope
argument_list|(
name|ConfigurableBeanFactory
operator|.
name|SCOPE_SINGLETON
argument_list|)
annotation|@
name|ConditionalOnProperty
argument_list|(
name|prefix
operator|=
literal|"camel.component.atomix.cluster.service"
argument_list|,
name|name
operator|=
literal|"mode"
argument_list|,
name|havingValue
operator|=
literal|"client"
argument_list|)
DECL|method|atomixClusterClientService ()
specifier|public
name|CamelClusterService
name|atomixClusterClientService
parameter_list|()
block|{
name|AtomixClusterClientService
name|service
init|=
operator|new
name|AtomixClusterClientService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setNodes
argument_list|(
name|configuration
operator|.
name|getNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Address
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getId
argument_list|()
argument_list|,
name|service
operator|::
name|setId
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getConfigurationUri
argument_list|()
argument_list|,
name|service
operator|::
name|setConfigurationUri
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
comment|// *****************************************
comment|// Conditions
comment|// *****************************************
DECL|class|AutoConfigurationCondition
specifier|public
specifier|static
class|class
name|AutoConfigurationCondition
extends|extends
name|AllNestedConditions
block|{
DECL|method|AutoConfigurationCondition ()
specifier|public
name|AutoConfigurationCondition
parameter_list|()
block|{
name|super
argument_list|(
name|ConfigurationPhase
operator|.
name|REGISTER_BEAN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ConditionalOnProperty
argument_list|(
name|prefix
operator|=
literal|"camel.component.atomix.cluster.service"
argument_list|,
name|name
operator|=
literal|"enabled"
argument_list|)
DECL|class|IfEnabled
specifier|static
class|class
name|IfEnabled
block|{         }
annotation|@
name|ConditionalOnProperty
argument_list|(
name|prefix
operator|=
literal|"camel.component.atomix.cluster.service"
argument_list|,
name|name
operator|=
literal|"mode"
argument_list|)
DECL|class|WithMode
specifier|static
class|class
name|WithMode
block|{         }
block|}
block|}
end_class

end_unit

