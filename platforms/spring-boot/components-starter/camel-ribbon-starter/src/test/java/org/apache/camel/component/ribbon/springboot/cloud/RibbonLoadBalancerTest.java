begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ribbon.springboot.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|springboot
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Navigate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|cloud
operator|.
name|RibbonServiceLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceCallProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|cloud
operator|.
name|CamelCloudServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|cloud
operator|.
name|CamelCloudServiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|EnableAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|runner
operator|.
name|ApplicationContextRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|RibbonLoadBalancerTest
specifier|public
class|class
name|RibbonLoadBalancerTest
block|{
DECL|field|PORT1
specifier|private
specifier|static
specifier|final
name|int
name|PORT1
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PORT2
specifier|private
specifier|static
specifier|final
name|int
name|PORT2
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testLoadBalancer ()
specifier|public
name|void
name|testLoadBalancer
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ApplicationContextRunner
argument_list|()
operator|.
name|withUserConfiguration
argument_list|(
name|TestConfiguration
operator|.
name|class
argument_list|)
operator|.
name|withPropertyValues
argument_list|(
literal|"spring.main.banner-mode=off"
argument_list|,
literal|"camel.cloud.consul.service-discovery.enabled=false"
argument_list|,
literal|"debug=false"
argument_list|,
literal|"camel.cloud.service-discovery.services[myService]=localhost:"
operator|+
name|PORT1
operator|+
literal|",localhost:"
operator|+
name|PORT2
argument_list|,
literal|"camel.cloud.ribbon.load-balancer.enabled=true"
argument_list|)
operator|.
name|run
argument_list|(
name|context
lambda|->
block|{
specifier|final
name|CamelContext
name|camelContext
init|=
name|context
operator|.
name|getBean
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ProducerTemplate
name|template
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|DefaultServiceCallProcessor
name|processor
init|=
name|findServiceCallProcessor
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getLoadBalancer
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getLoadBalancer
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|RibbonServiceLoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|RibbonServiceLoadBalancer
name|loadBalancer
init|=
operator|(
name|RibbonServiceLoadBalancer
operator|)
name|processor
operator|.
name|getLoadBalancer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|loadBalancer
operator|.
name|getServiceDiscovery
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|CamelCloudServiceDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadBalancer
operator|.
name|getServiceFilter
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|CamelCloudServiceFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
operator|+
name|PORT2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
operator|+
name|PORT1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|EnableAutoConfiguration
annotation|@
name|Configuration
DECL|class|TestConfiguration
specifier|public
specifier|static
class|class
name|TestConfiguration
block|{
annotation|@
name|Bean
DECL|method|routeBuilder ()
specifier|public
name|RoutesBuilder
name|routeBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"scall"
argument_list|)
operator|.
name|serviceCall
argument_list|()
operator|.
name|name
argument_list|(
literal|"myService"
argument_list|)
operator|.
name|uri
argument_list|(
literal|"jetty:http://myService"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
name|fromF
argument_list|(
literal|"jetty:http://localhost:%d"
argument_list|,
name|PORT1
argument_list|)
operator|.
name|routeId
argument_list|(
literal|""
operator|+
name|PORT1
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|""
operator|+
name|PORT1
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"jetty:http://localhost:%d"
argument_list|,
name|PORT2
argument_list|)
operator|.
name|routeId
argument_list|(
literal|""
operator|+
name|PORT2
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|""
operator|+
name|PORT2
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
comment|// ************************************
comment|// Helpers
comment|// ************************************
DECL|method|findServiceCallProcessor (CamelContext context)
specifier|protected
name|DefaultServiceCallProcessor
name|findServiceCallProcessor
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|Route
name|route
init|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"scall"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"ServiceCall Route should be present"
argument_list|,
name|route
argument_list|)
expr_stmt|;
return|return
name|findServiceCallProcessor
argument_list|(
name|route
operator|.
name|navigate
argument_list|()
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find a ServiceCallProcessor"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|findServiceCallProcessor (Navigate<Processor> navigate)
specifier|protected
name|Optional
argument_list|<
name|DefaultServiceCallProcessor
argument_list|>
name|findServiceCallProcessor
parameter_list|(
name|Navigate
argument_list|<
name|Processor
argument_list|>
name|navigate
parameter_list|)
block|{
for|for
control|(
name|Processor
name|processor
range|:
name|navigate
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|processor
operator|instanceof
name|DefaultServiceCallProcessor
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
name|DefaultServiceCallProcessor
operator|)
name|processor
argument_list|)
return|;
block|}
if|if
condition|(
name|processor
operator|instanceof
name|Navigate
condition|)
block|{
return|return
name|findServiceCallProcessor
argument_list|(
operator|(
name|Navigate
argument_list|<
name|Processor
argument_list|>
operator|)
name|processor
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

