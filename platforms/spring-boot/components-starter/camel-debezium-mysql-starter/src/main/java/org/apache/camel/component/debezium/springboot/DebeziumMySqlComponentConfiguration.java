begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|ComponentConfigurationPropertiesCommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium MySQL endpoint which is used to capture changes in  * MySQL database so that that applications can see those changes and respond to  * them.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"
argument_list|)
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.debezium-mysql"
argument_list|)
DECL|class|DebeziumMySqlComponentConfiguration
specifier|public
class|class
name|DebeziumMySqlComponentConfiguration
extends|extends
name|ComponentConfigurationPropertiesCommon
block|{
comment|/**      * Whether to enable auto configuration of the debezium-mysql component.      * This is enabled by default.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * Allow pre-configured Configurations to be set.      */
DECL|field|configuration
specifier|private
name|MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * Whether the component should use basic property binding (Camel 2.x) or      * the newer property binding with additional capabilities      */
DECL|field|basicPropertyBinding
specifier|private
name|Boolean
name|basicPropertyBinding
init|=
literal|false
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getBasicPropertyBinding ()
specifier|public
name|Boolean
name|getBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
DECL|method|setBasicPropertyBinding (Boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|Boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
DECL|class|MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|MySqlConnectorEmbeddedDebeziumConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * Controls how long the connector holds onto the global read lock while          * it is performing a snapshot. The default is 'minimal', which means          * the connector holds the global read lock (and thus prevents any          * updates) for just the initial portion of the snapshot while the          * database schemas and other metadata are being read. The remaining          * work in a snapshot involves selecting all rows from each table, and          * this can be done using the snapshot process' REPEATABLE READ          * transaction even when the lock is no longer held and other operations          * are updating the database. However, in some cases it may be desirable          * to block all writes for the entire duration of the snapshot; in such          * cases set this property to 'extended'. Using a value of 'none' will          * prevent the connector from acquiring any table locks during the          * snapshot process. This mode can only be used in combination with          * snapshot.mode values of 'schema_only' or 'schema_only_recovery' and          * is only safe to use if no schema changes are happening while the          * snapshot is taken.          */
DECL|field|snapshotLockingMode
specifier|private
name|String
name|snapshotLockingMode
init|=
literal|"minimal"
decl_stmt|;
comment|/**          * A semicolon-separated list of expressions that match fully-qualified          * tables and column(s) to be used as message key. Each expression must          * match the pattern '<fully-qualified table name>:<key columns>',where          * the table names could be defined as (DB_NAME.TABLE_NAME) or          * (SCHEMA_NAME.TABLE_NAME), depending on the specific connector,and the          * key columns are a comma-separated list of columns representing the          * custom key. For any table without an explicit key configuration the          * table's primary key column(s) will be used as message key.Example:          * dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id          */
DECL|field|messageKeyColumns
specifier|private
name|String
name|messageKeyColumns
decl_stmt|;
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'column.blacklist' description.          */
DECL|field|columnBlacklist
specifier|private
name|String
name|columnBlacklist
decl_stmt|;
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'table.blacklist' description.          */
DECL|field|tableBlacklist
specifier|private
name|String
name|tableBlacklist
decl_stmt|;
comment|/**          * Whether the connector should publish changes in the database schema          * to a Kafka topic with the same name as the database server ID. Each          * schema change will be recorded using a key that contains the database          * name and whose value includes the DDL statement(s).The default is          * 'true'. This is independent of how the connector internally records          * database history.          */
DECL|field|includeSchemaChanges
specifier|private
name|Boolean
name|includeSchemaChanges
init|=
literal|true
decl_stmt|;
comment|/**          * The source UUIDs used to include GTID ranges when determine the          * starting position in the MySQL server's binlog.          */
DECL|field|gtidSourceIncludes
specifier|private
name|String
name|gtidSourceIncludes
decl_stmt|;
comment|/**          * JDBC Driver class name used to connect to the MySQL database server.          */
DECL|field|databaseJdbcDriver
specifier|private
name|String
name|databaseJdbcDriver
init|=
literal|"class com.mysql.cj.jdbc.Driver"
decl_stmt|;
comment|/**          * The number of milliseconds to wait while polling for persisted data          * during recovery.          */
DECL|field|databaseHistoryKafkaRecoveryPollIntervalMs
specifier|private
name|Integer
name|databaseHistoryKafkaRecoveryPollIntervalMs
init|=
literal|100
decl_stmt|;
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          */
DECL|field|pollIntervalMs
specifier|private
name|Long
name|pollIntervalMs
init|=
literal|500L
decl_stmt|;
comment|/**          * A semicolon separated list of SQL statements to be executed when a          * JDBC connection (not binlog reading connection) to the database is          * established. Note that the connector may establish JDBC connections          * at its own discretion, so this should typically be used for          * configuration of session parameters only,but not for executing DML          * statements. Use doubled semicolon (';;') to use a semicolon as a          * character and not as a delimiter.          */
DECL|field|databaseInitialStatements
specifier|private
name|String
name|databaseInitialStatements
decl_stmt|;
comment|/**          * The prefix that is used to name heartbeat topics.Defaults to          * __debezium-heartbeat.          */
DECL|field|heartbeatTopicsPrefix
specifier|private
name|String
name|heartbeatTopicsPrefix
init|=
literal|"__debezium-heartbeat"
decl_stmt|;
comment|/**          * The size of a look-ahead buffer used by the binlog reader to decide          * whether the transaction in progress is going to be committed or          * rolled back. Use 0 to disable look-ahead buffering. Defaults to 0          * (i.e. buffering is disabled).          */
DECL|field|binlogBufferSize
specifier|private
name|Integer
name|binlogBufferSize
init|=
literal|0
decl_stmt|;
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot          */
DECL|field|snapshotFetchSize
specifier|private
name|Integer
name|snapshotFetchSize
decl_stmt|;
comment|/**          * Name of the MySQL database user to be used when connecting to the          * database.          */
DECL|field|databaseUser
specifier|private
name|String
name|databaseUser
decl_stmt|;
comment|/**          * The source UUIDs used to exclude GTID ranges when determine the          * starting position in the MySQL server's binlog.          */
DECL|field|gtidSourceExcludes
specifier|private
name|String
name|gtidSourceExcludes
decl_stmt|;
comment|/**          * This property contains a comma-separated list of fully-qualified          * tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on          * thespecific connectors . Select statements for the individual tables          * are specified in further configuration properties, one for each          * table, identified by the id          * 'snapshot.select.statement.overrides.[DB_NAME].[TABLE_NAME]' or          * 'snapshot.select.statement.overrides.[SCHEMA_NAME].[TABLE_NAME]',          * respectively. The value of those properties is the select statement          * to use when retrieving data from the specific table during          * snapshotting. A possible use case for large append-only tables is          * setting a specific point where to start (resume) snapshotting, in          * case a previous snapshotting was interrupted.          */
DECL|field|snapshotSelectStatementOverrides
specifier|private
name|String
name|snapshotSelectStatementOverrides
decl_stmt|;
comment|/**          * A list of host/port pairs that the connector will use for          * establishing the initial connection to the Kafka cluster for          * retrieving database schema history previously stored by the          * connector. This should point to the same Kafka cluster used by the          * Kafka Connect process.          */
DECL|field|databaseHistoryKafkaBootstrapServers
specifier|private
name|String
name|databaseHistoryKafkaBootstrapServers
decl_stmt|;
comment|/**          * Location of the Java keystore file containing an application          * process's own certificate and private key.          */
DECL|field|databaseSslKeystore
specifier|private
name|String
name|databaseSslKeystore
decl_stmt|;
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          */
DECL|field|heartbeatIntervalMs
specifier|private
name|Integer
name|heartbeatIntervalMs
init|=
literal|0
decl_stmt|;
comment|/**          * A version of the format of the publicly visible source part in the          * message          */
DECL|field|sourceStructVersion
specifier|private
name|String
name|sourceStructVersion
init|=
literal|"v2"
decl_stmt|;
comment|/**          * Password to unlock the keystore file (store password) specified by          * 'ssl.trustore' configuration property or the          * 'javax.net.ssl.trustStore' system or JVM property.          */
DECL|field|databaseSslTruststorePassword
specifier|private
name|String
name|databaseSslTruststorePassword
decl_stmt|;
comment|/**          * Specify how binlog events that belong to a table missing from          * internal schema representation (i.e. internal representation is not          * consistent with database) should be handled, including:'fail' (the          * default) an exception indicating the problematic event and its binlog          * position is raised, causing the connector to be stopped; 'warn' the          * problematic event and its binlog position will be logged and the          * event will be skipped;'ignore' the problematic event will be skipped.          */
DECL|field|inconsistentSchemaHandlingMode
specifier|private
name|String
name|inconsistentSchemaHandlingMode
init|=
literal|"fail"
decl_stmt|;
comment|/**          * MySQL allows user to insert year value as either 2-digit or 4-digit.          * In case of two digit the value is automatically mapped into 1970 -          * 2069.false - delegates the implicit conversion to the databasetrue -          * (the default) Debezium makes the conversion          */
DECL|field|enableTimeAdjuster
specifier|private
name|Boolean
name|enableTimeAdjuster
init|=
literal|true
decl_stmt|;
comment|/**          * If set to 'latest', when connector sees new GTID, it will start          * consuming gtid channel from the server latest executed gtid position.          * If 'earliest' connector starts reading channel from first available          * (not purged) gtid position on the server.          */
DECL|field|gtidNewChannelPosition
specifier|private
name|String
name|gtidNewChannelPosition
init|=
literal|"latest"
decl_stmt|;
comment|/**          * Password of the MySQL database user to be used when connecting to the          * database.          */
DECL|field|databasePassword
specifier|private
name|String
name|databasePassword
decl_stmt|;
comment|/**          * Controls what DDL will Debezium store in database history.By default          * (false) Debezium will store all incoming DDL statements. If set to          * truethen only DDL that manipulates a monitored table will be stored.          */
DECL|field|databaseHistoryStoreOnlyMonitoredTablesDdl
specifier|private
name|Boolean
name|databaseHistoryStoreOnlyMonitoredTablesDdl
init|=
literal|false
decl_stmt|;
comment|/**          * If set to true, we will only produce DML events into Kafka for          * transactions that were written on mysql servers with UUIDs matching          * the filters defined by the gtid.source.includes or          * gtid.source.excludes configuration options, if they are specified.          */
DECL|field|gtidSourceFilterDmlEvents
specifier|private
name|Boolean
name|gtidSourceFilterDmlEvents
init|=
literal|true
decl_stmt|;
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'database.blacklist' description.          */
DECL|field|databaseBlacklist
specifier|private
name|String
name|databaseBlacklist
decl_stmt|;
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          */
DECL|field|maxBatchSize
specifier|private
name|Integer
name|maxBatchSize
init|=
literal|2048
decl_stmt|;
comment|/**          * Whether a separate thread should be used to ensure the connection is          * kept alive.          */
DECL|field|connectKeepAlive
specifier|private
name|Boolean
name|connectKeepAlive
init|=
literal|true
decl_stmt|;
comment|/**          * The name of the DatabaseHistory class that should be used to store          * and recover database schema changes. The configuration properties for          * the history are prefixed with the 'database.history.' string.          */
DECL|field|databaseHistory
specifier|private
name|String
name|databaseHistory
init|=
literal|"io.debezium.relational.history.FileDatabaseHistory"
decl_stmt|;
comment|/**          * The criteria for running a snapshot upon startup of the connector.          * Options include: 'when_needed' to specify that the connector run a          * snapshot upon startup whenever it deems it necessary; 'initial' (the          * default) to specify the connector can run a snapshot only when no          * offsets are available for the logical server name; 'initial_only'          * same as 'initial' except the connector should stop after completing          * the snapshot and before it would normally read the binlog; and'never'          * to specify the connector should never run a snapshot and that upon          * first startup the connector should read from the beginning of the          * binlog. The 'never' mode should be used with care, and only when the          * binlog is known to contain all history.          */
DECL|field|snapshotMode
specifier|private
name|String
name|snapshotMode
init|=
literal|"initial"
decl_stmt|;
comment|/**          * Maximum time in milliseconds to wait after trying to connect to the          * database before timing out.          */
DECL|field|connectTimeoutMs
specifier|private
name|Integer
name|connectTimeoutMs
init|=
literal|30000
decl_stmt|;
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          */
DECL|field|maxQueueSize
specifier|private
name|Integer
name|maxQueueSize
init|=
literal|8192
decl_stmt|;
comment|/**          * The name of the topic for the database schema history          */
DECL|field|databaseHistoryKafkaTopic
specifier|private
name|String
name|databaseHistoryKafkaTopic
decl_stmt|;
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          */
DECL|field|snapshotDelayMs
specifier|private
name|Long
name|snapshotDelayMs
init|=
literal|0L
decl_stmt|;
comment|/**          * The number of attempts in a row that no data are returned from Kafka          * before recover completes. The maximum amount of time to wait after          * receiving no data is (recovery.attempts) x          * (recovery.poll.interval.ms).          */
DECL|field|databaseHistoryKafkaRecoveryAttempts
specifier|private
name|Integer
name|databaseHistoryKafkaRecoveryAttempts
init|=
literal|100
decl_stmt|;
comment|/**          * The tables for which changes are to be captured          */
DECL|field|tableWhitelist
specifier|private
name|String
name|tableWhitelist
decl_stmt|;
comment|/**          * Whether delete operations should be represented by a delete event and          * a subsquenttombstone event (true) or only by a delete event (false).          * Emitting the tombstone event (the default behavior) allows Kafka to          * completely delete all events pertaining to the given key once the          * source record got deleted.          */
DECL|field|tombstonesOnDelete
specifier|private
name|Boolean
name|tombstonesOnDelete
init|=
literal|false
decl_stmt|;
comment|/**          * Specify how DECIMAL and NUMERIC columns should be represented in          * change events, including:'precise' (the default) uses          * java.math.BigDecimal to represent values, which are encoded in the          * change events using a binary representation and Kafka Connect's          * 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to          * represent values; 'double' represents values using Java's 'double',          * which may not offer the precision but will be far easier to use in          * consumers.          */
DECL|field|decimalHandlingMode
specifier|private
name|String
name|decimalHandlingMode
init|=
literal|"precise"
decl_stmt|;
comment|/**          * BETA FEATURE: On connector restart, the connector will check if there          * have been any new tables added to the configuration, and snapshot          * them. There is presently only two options:'off': Default behavior. Do          * not snapshot new tables.'parallel': The snapshot of the new tables          * will occur in parallel to the continued binlog reading of the old          * tables. When the snapshot completes, an independent binlog reader          * will begin reading the events for the new tables until it catches up          * to present time. At this point, both old and new binlog readers will          * be momentarily halted and new binlog reader will start that will read          * the binlog for all configured tables. The parallel binlog reader will          * have a configured server id of 10000 + the primary binlog reader's          * server id.          */
DECL|field|snapshotNewTables
specifier|private
name|String
name|snapshotNewTables
init|=
literal|"off"
decl_stmt|;
comment|/**          * Controls the action Debezium will take when it meets a DDL statement          * in binlog, that it cannot parse.By default the connector will stop          * operating but by changing the setting it can ignore the statements          * which it cannot parse. If skipping is enabled then Debezium can miss          * metadata changes.          */
DECL|field|databaseHistorySkipUnparseableDdl
specifier|private
name|Boolean
name|databaseHistorySkipUnparseableDdl
init|=
literal|false
decl_stmt|;
comment|/**          * Flag specifying whether built-in tables should be ignored.          */
DECL|field|tableIgnoreBuiltin
specifier|private
name|Boolean
name|tableIgnoreBuiltin
init|=
literal|true
decl_stmt|;
comment|/**          * The databases for which changes are to be captured          */
DECL|field|databaseWhitelist
specifier|private
name|String
name|databaseWhitelist
decl_stmt|;
comment|/**          * The path to the file that will be used to record the database history          */
DECL|field|databaseHistoryFileFilename
specifier|private
name|String
name|databaseHistoryFileFilename
decl_stmt|;
comment|/**          * Specify how BIGINT UNSIGNED columns should be represented in change          * events, including:'precise' uses java.math.BigDecimal to represent          * values, which are encoded in the change events using a binary          * representation and Kafka Connect's          * 'org.apache.kafka.connect.data.Decimal' type; 'long' (the default)          * represents values using Java's 'long', which may not offer the          * precision but will be far easier to use in consumers.          */
DECL|field|bigintUnsignedHandlingMode
specifier|private
name|String
name|bigintUnsignedHandlingMode
init|=
literal|"long"
decl_stmt|;
comment|/**          * A numeric ID of this database client, which must be unique across all          * currently-running database processes in the cluster. This connector          * joins the MySQL database cluster as another server (with this unique          * ID) so it can read the binlog. By default, a random number is          * generated between 5400 and 6400.          */
DECL|field|databaseServerId
specifier|private
name|Long
name|databaseServerId
decl_stmt|;
comment|/**          * Specify how failures during deserialization of binlog events (i.e.          * when encountering a corrupted event) should be handled,          * including:'fail' (the default) an exception indicating the          * problematic event and its binlog position is raised, causing the          * connector to be stopped; 'warn' the problematic event and its binlog          * position will be logged and the event will be skipped;'ignore' the          * problematic event will be skipped.          */
DECL|field|eventDeserializationFailureHandlingMode
specifier|private
name|String
name|eventDeserializationFailureHandlingMode
init|=
literal|"fail"
decl_stmt|;
comment|/**          * Time, date and timestamps can be represented with different kinds of          * precisions, including:'adaptive_time_microseconds': the precision of          * date and timestamp values is based the database column's precision;          * but time fields always use microseconds precision;'connect': always          * represents time, date and timestamp values using Kafka Connect's          * built-in representations for Time, Date, and Timestamp, which uses          * millisecond precision regardless of the database columns' precision.          */
DECL|field|timePrecisionMode
specifier|private
name|String
name|timePrecisionMode
init|=
literal|"adaptive_time_microseconds"
decl_stmt|;
comment|/**          * Unique name that identifies the database server and all recorded          * offsets, and that is used as a prefix for all schemas and topics.          * Each distinct installation should have a separate namespace and be          * monitored by at most one Debezium connector.          */
DECL|field|databaseServerName
specifier|private
name|String
name|databaseServerName
decl_stmt|;
comment|/**          * Port of the MySQL database server.          */
DECL|field|databasePort
specifier|private
name|Integer
name|databasePort
init|=
literal|3306
decl_stmt|;
comment|/**          * Location of the Java truststore file containing the collection of CA          * certificates trusted by this application process (trust store).          */
DECL|field|databaseSslTruststore
specifier|private
name|String
name|databaseSslTruststore
decl_stmt|;
comment|/**          * Whether to use an encrypted connection to MySQL. Options          * include'disabled' (the default) to use an unencrypted connection;          * 'preferred' to establish a secure (encrypted) connection if the          * server supports secure connections, but fall back to an unencrypted          * connection otherwise; 'required' to use a secure (encrypted)          * connection, and fail if one cannot be established; 'verify_ca' like          * 'required' but additionally verify the server TLS certificate against          * the configured Certificate Authority (CA) certificates, or fail if no          * valid matching CA certificates are found; or'verify_identity' like          * 'verify_ca' but additionally verify that the server certificate          * matches the host to which the connection is attempted.          */
DECL|field|databaseSslMode
specifier|private
name|String
name|databaseSslMode
init|=
literal|"disabled"
decl_stmt|;
comment|/**          * Password to access the private key from the keystore file specified          * by 'ssl.keystore' configuration property or the          * 'javax.net.ssl.keyStore' system or JVM property. This password is          * used to unlock the keystore file (store password), and to decrypt the          * private key stored in the keystore (key password).          */
DECL|field|databaseSslKeystorePassword
specifier|private
name|String
name|databaseSslKeystorePassword
decl_stmt|;
comment|/**          * Resolvable hostname or IP address of the MySQL database server.          */
DECL|field|databaseHostname
specifier|private
name|String
name|databaseHostname
decl_stmt|;
comment|/**          * Only relevant if parallel snapshotting is configured. During parallel          * snapshotting, multiple (4) connections open to the database client,          * and they each need their own unique connection ID. This offset is          * used to generate those IDs from the base configured cluster ID.          */
DECL|field|databaseServerIdOffset
specifier|private
name|Long
name|databaseServerIdOffset
init|=
literal|10000L
decl_stmt|;
comment|/**          * Interval in milliseconds to wait for connection checking if keep          * alive thread is used.          */
DECL|field|connectKeepAliveIntervalMs
specifier|private
name|Long
name|connectKeepAliveIntervalMs
init|=
literal|60000L
decl_stmt|;
comment|/**          * Whether the connector should include the original SQL query that          * generated the change event. Note: This option requires MySQL be          * configured with the binlog_rows_query_log_events option set to ON.          * Query will not be present for events generated from snapshot.          * WARNING: Enabling this option may expose tables or fields explicitly          * blacklisted or masked by including the original SQL statement in the          * change event. For this reason the default value is 'false'.          */
DECL|field|includeQuery
specifier|private
name|Boolean
name|includeQuery
init|=
literal|false
decl_stmt|;
comment|/**          * The name of the Java class for the connector          */
DECL|field|connectorClass
specifier|private
name|Class
name|connectorClass
decl_stmt|;
comment|/**          * Unique name for the connector. Attempting to register again with the          * same name will fail.          */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**          * The name of the Java class that is responsible for persistence of          * connector offsets.          */
DECL|field|offsetStorage
specifier|private
name|String
name|offsetStorage
init|=
literal|"org.apache.kafka.connect.storage.FileOffsetBackingStore"
decl_stmt|;
comment|/**          * Path to file where offsets are to be stored. Required when          * offset.storage is set to the FileOffsetBackingStore          */
DECL|field|offsetStorageFileName
specifier|private
name|String
name|offsetStorageFileName
decl_stmt|;
comment|/**          * The name of the Kafka topic where offsets are to be stored. Required          * when offset.storage is set to the KafkaOffsetBackingStore.          */
DECL|field|offsetStorageTopic
specifier|private
name|String
name|offsetStorageTopic
decl_stmt|;
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore          */
DECL|field|offsetStorageReplicationFactor
specifier|private
name|Integer
name|offsetStorageReplicationFactor
decl_stmt|;
comment|/**          * The name of the Java class of the commit policy. It defines when          * offsets commit has to be triggered based on the number of events          * processed and the time elapsed since the last commit. This class must          * implement the interface 'OffsetCommitPolicy'. The default is a          * periodic commit policy based upon time intervals.          */
DECL|field|offsetCommitPolicy
specifier|private
name|String
name|offsetCommitPolicy
init|=
literal|"io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy"
decl_stmt|;
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          */
DECL|field|offsetFlushIntervalMs
specifier|private
name|Long
name|offsetFlushIntervalMs
init|=
literal|60000L
decl_stmt|;
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          */
DECL|field|offsetCommitTimeoutMs
specifier|private
name|Long
name|offsetCommitTimeoutMs
init|=
literal|5000L
decl_stmt|;
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          */
DECL|field|offsetStoragePartitions
specifier|private
name|Integer
name|offsetStoragePartitions
decl_stmt|;
comment|/**          * The Converter class that should be used to serialize and deserialize          * key data for offsets. The default is JSON converter.          */
DECL|field|internalKeyConverter
specifier|private
name|String
name|internalKeyConverter
init|=
literal|"org.apache.kafka.connect.json.JsonConverter"
decl_stmt|;
comment|/**          * The Converter class that should be used to serialize and deserialize          * value data for offsets. The default is JSON converter.          */
DECL|field|internalValueConverter
specifier|private
name|String
name|internalValueConverter
init|=
literal|"org.apache.kafka.connect.json.JsonConverter"
decl_stmt|;
DECL|method|getSnapshotLockingMode ()
specifier|public
name|String
name|getSnapshotLockingMode
parameter_list|()
block|{
return|return
name|snapshotLockingMode
return|;
block|}
DECL|method|setSnapshotLockingMode (String snapshotLockingMode)
specifier|public
name|void
name|setSnapshotLockingMode
parameter_list|(
name|String
name|snapshotLockingMode
parameter_list|)
block|{
name|this
operator|.
name|snapshotLockingMode
operator|=
name|snapshotLockingMode
expr_stmt|;
block|}
DECL|method|getMessageKeyColumns ()
specifier|public
name|String
name|getMessageKeyColumns
parameter_list|()
block|{
return|return
name|messageKeyColumns
return|;
block|}
DECL|method|setMessageKeyColumns (String messageKeyColumns)
specifier|public
name|void
name|setMessageKeyColumns
parameter_list|(
name|String
name|messageKeyColumns
parameter_list|)
block|{
name|this
operator|.
name|messageKeyColumns
operator|=
name|messageKeyColumns
expr_stmt|;
block|}
DECL|method|getColumnBlacklist ()
specifier|public
name|String
name|getColumnBlacklist
parameter_list|()
block|{
return|return
name|columnBlacklist
return|;
block|}
DECL|method|setColumnBlacklist (String columnBlacklist)
specifier|public
name|void
name|setColumnBlacklist
parameter_list|(
name|String
name|columnBlacklist
parameter_list|)
block|{
name|this
operator|.
name|columnBlacklist
operator|=
name|columnBlacklist
expr_stmt|;
block|}
DECL|method|getTableBlacklist ()
specifier|public
name|String
name|getTableBlacklist
parameter_list|()
block|{
return|return
name|tableBlacklist
return|;
block|}
DECL|method|setTableBlacklist (String tableBlacklist)
specifier|public
name|void
name|setTableBlacklist
parameter_list|(
name|String
name|tableBlacklist
parameter_list|)
block|{
name|this
operator|.
name|tableBlacklist
operator|=
name|tableBlacklist
expr_stmt|;
block|}
DECL|method|getIncludeSchemaChanges ()
specifier|public
name|Boolean
name|getIncludeSchemaChanges
parameter_list|()
block|{
return|return
name|includeSchemaChanges
return|;
block|}
DECL|method|setIncludeSchemaChanges (Boolean includeSchemaChanges)
specifier|public
name|void
name|setIncludeSchemaChanges
parameter_list|(
name|Boolean
name|includeSchemaChanges
parameter_list|)
block|{
name|this
operator|.
name|includeSchemaChanges
operator|=
name|includeSchemaChanges
expr_stmt|;
block|}
DECL|method|getGtidSourceIncludes ()
specifier|public
name|String
name|getGtidSourceIncludes
parameter_list|()
block|{
return|return
name|gtidSourceIncludes
return|;
block|}
DECL|method|setGtidSourceIncludes (String gtidSourceIncludes)
specifier|public
name|void
name|setGtidSourceIncludes
parameter_list|(
name|String
name|gtidSourceIncludes
parameter_list|)
block|{
name|this
operator|.
name|gtidSourceIncludes
operator|=
name|gtidSourceIncludes
expr_stmt|;
block|}
DECL|method|getDatabaseJdbcDriver ()
specifier|public
name|String
name|getDatabaseJdbcDriver
parameter_list|()
block|{
return|return
name|databaseJdbcDriver
return|;
block|}
DECL|method|setDatabaseJdbcDriver (String databaseJdbcDriver)
specifier|public
name|void
name|setDatabaseJdbcDriver
parameter_list|(
name|String
name|databaseJdbcDriver
parameter_list|)
block|{
name|this
operator|.
name|databaseJdbcDriver
operator|=
name|databaseJdbcDriver
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaRecoveryPollIntervalMs ()
specifier|public
name|Integer
name|getDatabaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaRecoveryPollIntervalMs
return|;
block|}
DECL|method|setDatabaseHistoryKafkaRecoveryPollIntervalMs ( Integer databaseHistoryKafkaRecoveryPollIntervalMs)
specifier|public
name|void
name|setDatabaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|(
name|Integer
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaRecoveryPollIntervalMs
operator|=
name|databaseHistoryKafkaRecoveryPollIntervalMs
expr_stmt|;
block|}
DECL|method|getPollIntervalMs ()
specifier|public
name|Long
name|getPollIntervalMs
parameter_list|()
block|{
return|return
name|pollIntervalMs
return|;
block|}
DECL|method|setPollIntervalMs (Long pollIntervalMs)
specifier|public
name|void
name|setPollIntervalMs
parameter_list|(
name|Long
name|pollIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|pollIntervalMs
operator|=
name|pollIntervalMs
expr_stmt|;
block|}
DECL|method|getDatabaseInitialStatements ()
specifier|public
name|String
name|getDatabaseInitialStatements
parameter_list|()
block|{
return|return
name|databaseInitialStatements
return|;
block|}
DECL|method|setDatabaseInitialStatements ( String databaseInitialStatements)
specifier|public
name|void
name|setDatabaseInitialStatements
parameter_list|(
name|String
name|databaseInitialStatements
parameter_list|)
block|{
name|this
operator|.
name|databaseInitialStatements
operator|=
name|databaseInitialStatements
expr_stmt|;
block|}
DECL|method|getHeartbeatTopicsPrefix ()
specifier|public
name|String
name|getHeartbeatTopicsPrefix
parameter_list|()
block|{
return|return
name|heartbeatTopicsPrefix
return|;
block|}
DECL|method|setHeartbeatTopicsPrefix (String heartbeatTopicsPrefix)
specifier|public
name|void
name|setHeartbeatTopicsPrefix
parameter_list|(
name|String
name|heartbeatTopicsPrefix
parameter_list|)
block|{
name|this
operator|.
name|heartbeatTopicsPrefix
operator|=
name|heartbeatTopicsPrefix
expr_stmt|;
block|}
DECL|method|getBinlogBufferSize ()
specifier|public
name|Integer
name|getBinlogBufferSize
parameter_list|()
block|{
return|return
name|binlogBufferSize
return|;
block|}
DECL|method|setBinlogBufferSize (Integer binlogBufferSize)
specifier|public
name|void
name|setBinlogBufferSize
parameter_list|(
name|Integer
name|binlogBufferSize
parameter_list|)
block|{
name|this
operator|.
name|binlogBufferSize
operator|=
name|binlogBufferSize
expr_stmt|;
block|}
DECL|method|getSnapshotFetchSize ()
specifier|public
name|Integer
name|getSnapshotFetchSize
parameter_list|()
block|{
return|return
name|snapshotFetchSize
return|;
block|}
DECL|method|setSnapshotFetchSize (Integer snapshotFetchSize)
specifier|public
name|void
name|setSnapshotFetchSize
parameter_list|(
name|Integer
name|snapshotFetchSize
parameter_list|)
block|{
name|this
operator|.
name|snapshotFetchSize
operator|=
name|snapshotFetchSize
expr_stmt|;
block|}
DECL|method|getDatabaseUser ()
specifier|public
name|String
name|getDatabaseUser
parameter_list|()
block|{
return|return
name|databaseUser
return|;
block|}
DECL|method|setDatabaseUser (String databaseUser)
specifier|public
name|void
name|setDatabaseUser
parameter_list|(
name|String
name|databaseUser
parameter_list|)
block|{
name|this
operator|.
name|databaseUser
operator|=
name|databaseUser
expr_stmt|;
block|}
DECL|method|getGtidSourceExcludes ()
specifier|public
name|String
name|getGtidSourceExcludes
parameter_list|()
block|{
return|return
name|gtidSourceExcludes
return|;
block|}
DECL|method|setGtidSourceExcludes (String gtidSourceExcludes)
specifier|public
name|void
name|setGtidSourceExcludes
parameter_list|(
name|String
name|gtidSourceExcludes
parameter_list|)
block|{
name|this
operator|.
name|gtidSourceExcludes
operator|=
name|gtidSourceExcludes
expr_stmt|;
block|}
DECL|method|getSnapshotSelectStatementOverrides ()
specifier|public
name|String
name|getSnapshotSelectStatementOverrides
parameter_list|()
block|{
return|return
name|snapshotSelectStatementOverrides
return|;
block|}
DECL|method|setSnapshotSelectStatementOverrides ( String snapshotSelectStatementOverrides)
specifier|public
name|void
name|setSnapshotSelectStatementOverrides
parameter_list|(
name|String
name|snapshotSelectStatementOverrides
parameter_list|)
block|{
name|this
operator|.
name|snapshotSelectStatementOverrides
operator|=
name|snapshotSelectStatementOverrides
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaBootstrapServers ()
specifier|public
name|String
name|getDatabaseHistoryKafkaBootstrapServers
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaBootstrapServers
return|;
block|}
DECL|method|setDatabaseHistoryKafkaBootstrapServers ( String databaseHistoryKafkaBootstrapServers)
specifier|public
name|void
name|setDatabaseHistoryKafkaBootstrapServers
parameter_list|(
name|String
name|databaseHistoryKafkaBootstrapServers
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaBootstrapServers
operator|=
name|databaseHistoryKafkaBootstrapServers
expr_stmt|;
block|}
DECL|method|getDatabaseSslKeystore ()
specifier|public
name|String
name|getDatabaseSslKeystore
parameter_list|()
block|{
return|return
name|databaseSslKeystore
return|;
block|}
DECL|method|setDatabaseSslKeystore (String databaseSslKeystore)
specifier|public
name|void
name|setDatabaseSslKeystore
parameter_list|(
name|String
name|databaseSslKeystore
parameter_list|)
block|{
name|this
operator|.
name|databaseSslKeystore
operator|=
name|databaseSslKeystore
expr_stmt|;
block|}
DECL|method|getHeartbeatIntervalMs ()
specifier|public
name|Integer
name|getHeartbeatIntervalMs
parameter_list|()
block|{
return|return
name|heartbeatIntervalMs
return|;
block|}
DECL|method|setHeartbeatIntervalMs (Integer heartbeatIntervalMs)
specifier|public
name|void
name|setHeartbeatIntervalMs
parameter_list|(
name|Integer
name|heartbeatIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|heartbeatIntervalMs
operator|=
name|heartbeatIntervalMs
expr_stmt|;
block|}
DECL|method|getSourceStructVersion ()
specifier|public
name|String
name|getSourceStructVersion
parameter_list|()
block|{
return|return
name|sourceStructVersion
return|;
block|}
DECL|method|setSourceStructVersion (String sourceStructVersion)
specifier|public
name|void
name|setSourceStructVersion
parameter_list|(
name|String
name|sourceStructVersion
parameter_list|)
block|{
name|this
operator|.
name|sourceStructVersion
operator|=
name|sourceStructVersion
expr_stmt|;
block|}
DECL|method|getDatabaseSslTruststorePassword ()
specifier|public
name|String
name|getDatabaseSslTruststorePassword
parameter_list|()
block|{
return|return
name|databaseSslTruststorePassword
return|;
block|}
DECL|method|setDatabaseSslTruststorePassword ( String databaseSslTruststorePassword)
specifier|public
name|void
name|setDatabaseSslTruststorePassword
parameter_list|(
name|String
name|databaseSslTruststorePassword
parameter_list|)
block|{
name|this
operator|.
name|databaseSslTruststorePassword
operator|=
name|databaseSslTruststorePassword
expr_stmt|;
block|}
DECL|method|getInconsistentSchemaHandlingMode ()
specifier|public
name|String
name|getInconsistentSchemaHandlingMode
parameter_list|()
block|{
return|return
name|inconsistentSchemaHandlingMode
return|;
block|}
DECL|method|setInconsistentSchemaHandlingMode ( String inconsistentSchemaHandlingMode)
specifier|public
name|void
name|setInconsistentSchemaHandlingMode
parameter_list|(
name|String
name|inconsistentSchemaHandlingMode
parameter_list|)
block|{
name|this
operator|.
name|inconsistentSchemaHandlingMode
operator|=
name|inconsistentSchemaHandlingMode
expr_stmt|;
block|}
DECL|method|getEnableTimeAdjuster ()
specifier|public
name|Boolean
name|getEnableTimeAdjuster
parameter_list|()
block|{
return|return
name|enableTimeAdjuster
return|;
block|}
DECL|method|setEnableTimeAdjuster (Boolean enableTimeAdjuster)
specifier|public
name|void
name|setEnableTimeAdjuster
parameter_list|(
name|Boolean
name|enableTimeAdjuster
parameter_list|)
block|{
name|this
operator|.
name|enableTimeAdjuster
operator|=
name|enableTimeAdjuster
expr_stmt|;
block|}
DECL|method|getGtidNewChannelPosition ()
specifier|public
name|String
name|getGtidNewChannelPosition
parameter_list|()
block|{
return|return
name|gtidNewChannelPosition
return|;
block|}
DECL|method|setGtidNewChannelPosition (String gtidNewChannelPosition)
specifier|public
name|void
name|setGtidNewChannelPosition
parameter_list|(
name|String
name|gtidNewChannelPosition
parameter_list|)
block|{
name|this
operator|.
name|gtidNewChannelPosition
operator|=
name|gtidNewChannelPosition
expr_stmt|;
block|}
DECL|method|getDatabasePassword ()
specifier|public
name|String
name|getDatabasePassword
parameter_list|()
block|{
return|return
name|databasePassword
return|;
block|}
DECL|method|setDatabasePassword (String databasePassword)
specifier|public
name|void
name|setDatabasePassword
parameter_list|(
name|String
name|databasePassword
parameter_list|)
block|{
name|this
operator|.
name|databasePassword
operator|=
name|databasePassword
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryStoreOnlyMonitoredTablesDdl ()
specifier|public
name|Boolean
name|getDatabaseHistoryStoreOnlyMonitoredTablesDdl
parameter_list|()
block|{
return|return
name|databaseHistoryStoreOnlyMonitoredTablesDdl
return|;
block|}
DECL|method|setDatabaseHistoryStoreOnlyMonitoredTablesDdl ( Boolean databaseHistoryStoreOnlyMonitoredTablesDdl)
specifier|public
name|void
name|setDatabaseHistoryStoreOnlyMonitoredTablesDdl
parameter_list|(
name|Boolean
name|databaseHistoryStoreOnlyMonitoredTablesDdl
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryStoreOnlyMonitoredTablesDdl
operator|=
name|databaseHistoryStoreOnlyMonitoredTablesDdl
expr_stmt|;
block|}
DECL|method|getGtidSourceFilterDmlEvents ()
specifier|public
name|Boolean
name|getGtidSourceFilterDmlEvents
parameter_list|()
block|{
return|return
name|gtidSourceFilterDmlEvents
return|;
block|}
DECL|method|setGtidSourceFilterDmlEvents ( Boolean gtidSourceFilterDmlEvents)
specifier|public
name|void
name|setGtidSourceFilterDmlEvents
parameter_list|(
name|Boolean
name|gtidSourceFilterDmlEvents
parameter_list|)
block|{
name|this
operator|.
name|gtidSourceFilterDmlEvents
operator|=
name|gtidSourceFilterDmlEvents
expr_stmt|;
block|}
DECL|method|getDatabaseBlacklist ()
specifier|public
name|String
name|getDatabaseBlacklist
parameter_list|()
block|{
return|return
name|databaseBlacklist
return|;
block|}
DECL|method|setDatabaseBlacklist (String databaseBlacklist)
specifier|public
name|void
name|setDatabaseBlacklist
parameter_list|(
name|String
name|databaseBlacklist
parameter_list|)
block|{
name|this
operator|.
name|databaseBlacklist
operator|=
name|databaseBlacklist
expr_stmt|;
block|}
DECL|method|getMaxBatchSize ()
specifier|public
name|Integer
name|getMaxBatchSize
parameter_list|()
block|{
return|return
name|maxBatchSize
return|;
block|}
DECL|method|setMaxBatchSize (Integer maxBatchSize)
specifier|public
name|void
name|setMaxBatchSize
parameter_list|(
name|Integer
name|maxBatchSize
parameter_list|)
block|{
name|this
operator|.
name|maxBatchSize
operator|=
name|maxBatchSize
expr_stmt|;
block|}
DECL|method|getConnectKeepAlive ()
specifier|public
name|Boolean
name|getConnectKeepAlive
parameter_list|()
block|{
return|return
name|connectKeepAlive
return|;
block|}
DECL|method|setConnectKeepAlive (Boolean connectKeepAlive)
specifier|public
name|void
name|setConnectKeepAlive
parameter_list|(
name|Boolean
name|connectKeepAlive
parameter_list|)
block|{
name|this
operator|.
name|connectKeepAlive
operator|=
name|connectKeepAlive
expr_stmt|;
block|}
DECL|method|getDatabaseHistory ()
specifier|public
name|String
name|getDatabaseHistory
parameter_list|()
block|{
return|return
name|databaseHistory
return|;
block|}
DECL|method|setDatabaseHistory (String databaseHistory)
specifier|public
name|void
name|setDatabaseHistory
parameter_list|(
name|String
name|databaseHistory
parameter_list|)
block|{
name|this
operator|.
name|databaseHistory
operator|=
name|databaseHistory
expr_stmt|;
block|}
DECL|method|getSnapshotMode ()
specifier|public
name|String
name|getSnapshotMode
parameter_list|()
block|{
return|return
name|snapshotMode
return|;
block|}
DECL|method|setSnapshotMode (String snapshotMode)
specifier|public
name|void
name|setSnapshotMode
parameter_list|(
name|String
name|snapshotMode
parameter_list|)
block|{
name|this
operator|.
name|snapshotMode
operator|=
name|snapshotMode
expr_stmt|;
block|}
DECL|method|getConnectTimeoutMs ()
specifier|public
name|Integer
name|getConnectTimeoutMs
parameter_list|()
block|{
return|return
name|connectTimeoutMs
return|;
block|}
DECL|method|setConnectTimeoutMs (Integer connectTimeoutMs)
specifier|public
name|void
name|setConnectTimeoutMs
parameter_list|(
name|Integer
name|connectTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|connectTimeoutMs
operator|=
name|connectTimeoutMs
expr_stmt|;
block|}
DECL|method|getMaxQueueSize ()
specifier|public
name|Integer
name|getMaxQueueSize
parameter_list|()
block|{
return|return
name|maxQueueSize
return|;
block|}
DECL|method|setMaxQueueSize (Integer maxQueueSize)
specifier|public
name|void
name|setMaxQueueSize
parameter_list|(
name|Integer
name|maxQueueSize
parameter_list|)
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|maxQueueSize
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaTopic ()
specifier|public
name|String
name|getDatabaseHistoryKafkaTopic
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaTopic
return|;
block|}
DECL|method|setDatabaseHistoryKafkaTopic ( String databaseHistoryKafkaTopic)
specifier|public
name|void
name|setDatabaseHistoryKafkaTopic
parameter_list|(
name|String
name|databaseHistoryKafkaTopic
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaTopic
operator|=
name|databaseHistoryKafkaTopic
expr_stmt|;
block|}
DECL|method|getSnapshotDelayMs ()
specifier|public
name|Long
name|getSnapshotDelayMs
parameter_list|()
block|{
return|return
name|snapshotDelayMs
return|;
block|}
DECL|method|setSnapshotDelayMs (Long snapshotDelayMs)
specifier|public
name|void
name|setSnapshotDelayMs
parameter_list|(
name|Long
name|snapshotDelayMs
parameter_list|)
block|{
name|this
operator|.
name|snapshotDelayMs
operator|=
name|snapshotDelayMs
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryKafkaRecoveryAttempts ()
specifier|public
name|Integer
name|getDatabaseHistoryKafkaRecoveryAttempts
parameter_list|()
block|{
return|return
name|databaseHistoryKafkaRecoveryAttempts
return|;
block|}
DECL|method|setDatabaseHistoryKafkaRecoveryAttempts ( Integer databaseHistoryKafkaRecoveryAttempts)
specifier|public
name|void
name|setDatabaseHistoryKafkaRecoveryAttempts
parameter_list|(
name|Integer
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryKafkaRecoveryAttempts
operator|=
name|databaseHistoryKafkaRecoveryAttempts
expr_stmt|;
block|}
DECL|method|getTableWhitelist ()
specifier|public
name|String
name|getTableWhitelist
parameter_list|()
block|{
return|return
name|tableWhitelist
return|;
block|}
DECL|method|setTableWhitelist (String tableWhitelist)
specifier|public
name|void
name|setTableWhitelist
parameter_list|(
name|String
name|tableWhitelist
parameter_list|)
block|{
name|this
operator|.
name|tableWhitelist
operator|=
name|tableWhitelist
expr_stmt|;
block|}
DECL|method|getTombstonesOnDelete ()
specifier|public
name|Boolean
name|getTombstonesOnDelete
parameter_list|()
block|{
return|return
name|tombstonesOnDelete
return|;
block|}
DECL|method|setTombstonesOnDelete (Boolean tombstonesOnDelete)
specifier|public
name|void
name|setTombstonesOnDelete
parameter_list|(
name|Boolean
name|tombstonesOnDelete
parameter_list|)
block|{
name|this
operator|.
name|tombstonesOnDelete
operator|=
name|tombstonesOnDelete
expr_stmt|;
block|}
DECL|method|getDecimalHandlingMode ()
specifier|public
name|String
name|getDecimalHandlingMode
parameter_list|()
block|{
return|return
name|decimalHandlingMode
return|;
block|}
DECL|method|setDecimalHandlingMode (String decimalHandlingMode)
specifier|public
name|void
name|setDecimalHandlingMode
parameter_list|(
name|String
name|decimalHandlingMode
parameter_list|)
block|{
name|this
operator|.
name|decimalHandlingMode
operator|=
name|decimalHandlingMode
expr_stmt|;
block|}
DECL|method|getSnapshotNewTables ()
specifier|public
name|String
name|getSnapshotNewTables
parameter_list|()
block|{
return|return
name|snapshotNewTables
return|;
block|}
DECL|method|setSnapshotNewTables (String snapshotNewTables)
specifier|public
name|void
name|setSnapshotNewTables
parameter_list|(
name|String
name|snapshotNewTables
parameter_list|)
block|{
name|this
operator|.
name|snapshotNewTables
operator|=
name|snapshotNewTables
expr_stmt|;
block|}
DECL|method|getDatabaseHistorySkipUnparseableDdl ()
specifier|public
name|Boolean
name|getDatabaseHistorySkipUnparseableDdl
parameter_list|()
block|{
return|return
name|databaseHistorySkipUnparseableDdl
return|;
block|}
DECL|method|setDatabaseHistorySkipUnparseableDdl ( Boolean databaseHistorySkipUnparseableDdl)
specifier|public
name|void
name|setDatabaseHistorySkipUnparseableDdl
parameter_list|(
name|Boolean
name|databaseHistorySkipUnparseableDdl
parameter_list|)
block|{
name|this
operator|.
name|databaseHistorySkipUnparseableDdl
operator|=
name|databaseHistorySkipUnparseableDdl
expr_stmt|;
block|}
DECL|method|getTableIgnoreBuiltin ()
specifier|public
name|Boolean
name|getTableIgnoreBuiltin
parameter_list|()
block|{
return|return
name|tableIgnoreBuiltin
return|;
block|}
DECL|method|setTableIgnoreBuiltin (Boolean tableIgnoreBuiltin)
specifier|public
name|void
name|setTableIgnoreBuiltin
parameter_list|(
name|Boolean
name|tableIgnoreBuiltin
parameter_list|)
block|{
name|this
operator|.
name|tableIgnoreBuiltin
operator|=
name|tableIgnoreBuiltin
expr_stmt|;
block|}
DECL|method|getDatabaseWhitelist ()
specifier|public
name|String
name|getDatabaseWhitelist
parameter_list|()
block|{
return|return
name|databaseWhitelist
return|;
block|}
DECL|method|setDatabaseWhitelist (String databaseWhitelist)
specifier|public
name|void
name|setDatabaseWhitelist
parameter_list|(
name|String
name|databaseWhitelist
parameter_list|)
block|{
name|this
operator|.
name|databaseWhitelist
operator|=
name|databaseWhitelist
expr_stmt|;
block|}
DECL|method|getDatabaseHistoryFileFilename ()
specifier|public
name|String
name|getDatabaseHistoryFileFilename
parameter_list|()
block|{
return|return
name|databaseHistoryFileFilename
return|;
block|}
DECL|method|setDatabaseHistoryFileFilename ( String databaseHistoryFileFilename)
specifier|public
name|void
name|setDatabaseHistoryFileFilename
parameter_list|(
name|String
name|databaseHistoryFileFilename
parameter_list|)
block|{
name|this
operator|.
name|databaseHistoryFileFilename
operator|=
name|databaseHistoryFileFilename
expr_stmt|;
block|}
DECL|method|getBigintUnsignedHandlingMode ()
specifier|public
name|String
name|getBigintUnsignedHandlingMode
parameter_list|()
block|{
return|return
name|bigintUnsignedHandlingMode
return|;
block|}
DECL|method|setBigintUnsignedHandlingMode ( String bigintUnsignedHandlingMode)
specifier|public
name|void
name|setBigintUnsignedHandlingMode
parameter_list|(
name|String
name|bigintUnsignedHandlingMode
parameter_list|)
block|{
name|this
operator|.
name|bigintUnsignedHandlingMode
operator|=
name|bigintUnsignedHandlingMode
expr_stmt|;
block|}
DECL|method|getDatabaseServerId ()
specifier|public
name|Long
name|getDatabaseServerId
parameter_list|()
block|{
return|return
name|databaseServerId
return|;
block|}
DECL|method|setDatabaseServerId (Long databaseServerId)
specifier|public
name|void
name|setDatabaseServerId
parameter_list|(
name|Long
name|databaseServerId
parameter_list|)
block|{
name|this
operator|.
name|databaseServerId
operator|=
name|databaseServerId
expr_stmt|;
block|}
DECL|method|getEventDeserializationFailureHandlingMode ()
specifier|public
name|String
name|getEventDeserializationFailureHandlingMode
parameter_list|()
block|{
return|return
name|eventDeserializationFailureHandlingMode
return|;
block|}
DECL|method|setEventDeserializationFailureHandlingMode ( String eventDeserializationFailureHandlingMode)
specifier|public
name|void
name|setEventDeserializationFailureHandlingMode
parameter_list|(
name|String
name|eventDeserializationFailureHandlingMode
parameter_list|)
block|{
name|this
operator|.
name|eventDeserializationFailureHandlingMode
operator|=
name|eventDeserializationFailureHandlingMode
expr_stmt|;
block|}
DECL|method|getTimePrecisionMode ()
specifier|public
name|String
name|getTimePrecisionMode
parameter_list|()
block|{
return|return
name|timePrecisionMode
return|;
block|}
DECL|method|setTimePrecisionMode (String timePrecisionMode)
specifier|public
name|void
name|setTimePrecisionMode
parameter_list|(
name|String
name|timePrecisionMode
parameter_list|)
block|{
name|this
operator|.
name|timePrecisionMode
operator|=
name|timePrecisionMode
expr_stmt|;
block|}
DECL|method|getDatabaseServerName ()
specifier|public
name|String
name|getDatabaseServerName
parameter_list|()
block|{
return|return
name|databaseServerName
return|;
block|}
DECL|method|setDatabaseServerName (String databaseServerName)
specifier|public
name|void
name|setDatabaseServerName
parameter_list|(
name|String
name|databaseServerName
parameter_list|)
block|{
name|this
operator|.
name|databaseServerName
operator|=
name|databaseServerName
expr_stmt|;
block|}
DECL|method|getDatabasePort ()
specifier|public
name|Integer
name|getDatabasePort
parameter_list|()
block|{
return|return
name|databasePort
return|;
block|}
DECL|method|setDatabasePort (Integer databasePort)
specifier|public
name|void
name|setDatabasePort
parameter_list|(
name|Integer
name|databasePort
parameter_list|)
block|{
name|this
operator|.
name|databasePort
operator|=
name|databasePort
expr_stmt|;
block|}
DECL|method|getDatabaseSslTruststore ()
specifier|public
name|String
name|getDatabaseSslTruststore
parameter_list|()
block|{
return|return
name|databaseSslTruststore
return|;
block|}
DECL|method|setDatabaseSslTruststore (String databaseSslTruststore)
specifier|public
name|void
name|setDatabaseSslTruststore
parameter_list|(
name|String
name|databaseSslTruststore
parameter_list|)
block|{
name|this
operator|.
name|databaseSslTruststore
operator|=
name|databaseSslTruststore
expr_stmt|;
block|}
DECL|method|getDatabaseSslMode ()
specifier|public
name|String
name|getDatabaseSslMode
parameter_list|()
block|{
return|return
name|databaseSslMode
return|;
block|}
DECL|method|setDatabaseSslMode (String databaseSslMode)
specifier|public
name|void
name|setDatabaseSslMode
parameter_list|(
name|String
name|databaseSslMode
parameter_list|)
block|{
name|this
operator|.
name|databaseSslMode
operator|=
name|databaseSslMode
expr_stmt|;
block|}
DECL|method|getDatabaseSslKeystorePassword ()
specifier|public
name|String
name|getDatabaseSslKeystorePassword
parameter_list|()
block|{
return|return
name|databaseSslKeystorePassword
return|;
block|}
DECL|method|setDatabaseSslKeystorePassword ( String databaseSslKeystorePassword)
specifier|public
name|void
name|setDatabaseSslKeystorePassword
parameter_list|(
name|String
name|databaseSslKeystorePassword
parameter_list|)
block|{
name|this
operator|.
name|databaseSslKeystorePassword
operator|=
name|databaseSslKeystorePassword
expr_stmt|;
block|}
DECL|method|getDatabaseHostname ()
specifier|public
name|String
name|getDatabaseHostname
parameter_list|()
block|{
return|return
name|databaseHostname
return|;
block|}
DECL|method|setDatabaseHostname (String databaseHostname)
specifier|public
name|void
name|setDatabaseHostname
parameter_list|(
name|String
name|databaseHostname
parameter_list|)
block|{
name|this
operator|.
name|databaseHostname
operator|=
name|databaseHostname
expr_stmt|;
block|}
DECL|method|getDatabaseServerIdOffset ()
specifier|public
name|Long
name|getDatabaseServerIdOffset
parameter_list|()
block|{
return|return
name|databaseServerIdOffset
return|;
block|}
DECL|method|setDatabaseServerIdOffset (Long databaseServerIdOffset)
specifier|public
name|void
name|setDatabaseServerIdOffset
parameter_list|(
name|Long
name|databaseServerIdOffset
parameter_list|)
block|{
name|this
operator|.
name|databaseServerIdOffset
operator|=
name|databaseServerIdOffset
expr_stmt|;
block|}
DECL|method|getConnectKeepAliveIntervalMs ()
specifier|public
name|Long
name|getConnectKeepAliveIntervalMs
parameter_list|()
block|{
return|return
name|connectKeepAliveIntervalMs
return|;
block|}
DECL|method|setConnectKeepAliveIntervalMs ( Long connectKeepAliveIntervalMs)
specifier|public
name|void
name|setConnectKeepAliveIntervalMs
parameter_list|(
name|Long
name|connectKeepAliveIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|connectKeepAliveIntervalMs
operator|=
name|connectKeepAliveIntervalMs
expr_stmt|;
block|}
DECL|method|getIncludeQuery ()
specifier|public
name|Boolean
name|getIncludeQuery
parameter_list|()
block|{
return|return
name|includeQuery
return|;
block|}
DECL|method|setIncludeQuery (Boolean includeQuery)
specifier|public
name|void
name|setIncludeQuery
parameter_list|(
name|Boolean
name|includeQuery
parameter_list|)
block|{
name|this
operator|.
name|includeQuery
operator|=
name|includeQuery
expr_stmt|;
block|}
DECL|method|getConnectorClass ()
specifier|public
name|Class
name|getConnectorClass
parameter_list|()
block|{
return|return
name|connectorClass
return|;
block|}
DECL|method|setConnectorClass (Class connectorClass)
specifier|public
name|void
name|setConnectorClass
parameter_list|(
name|Class
name|connectorClass
parameter_list|)
block|{
name|this
operator|.
name|connectorClass
operator|=
name|connectorClass
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getOffsetStorage ()
specifier|public
name|String
name|getOffsetStorage
parameter_list|()
block|{
return|return
name|offsetStorage
return|;
block|}
DECL|method|setOffsetStorage (String offsetStorage)
specifier|public
name|void
name|setOffsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|this
operator|.
name|offsetStorage
operator|=
name|offsetStorage
expr_stmt|;
block|}
DECL|method|getOffsetStorageFileName ()
specifier|public
name|String
name|getOffsetStorageFileName
parameter_list|()
block|{
return|return
name|offsetStorageFileName
return|;
block|}
DECL|method|setOffsetStorageFileName (String offsetStorageFileName)
specifier|public
name|void
name|setOffsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageFileName
operator|=
name|offsetStorageFileName
expr_stmt|;
block|}
DECL|method|getOffsetStorageTopic ()
specifier|public
name|String
name|getOffsetStorageTopic
parameter_list|()
block|{
return|return
name|offsetStorageTopic
return|;
block|}
DECL|method|setOffsetStorageTopic (String offsetStorageTopic)
specifier|public
name|void
name|setOffsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageTopic
operator|=
name|offsetStorageTopic
expr_stmt|;
block|}
DECL|method|getOffsetStorageReplicationFactor ()
specifier|public
name|Integer
name|getOffsetStorageReplicationFactor
parameter_list|()
block|{
return|return
name|offsetStorageReplicationFactor
return|;
block|}
DECL|method|setOffsetStorageReplicationFactor ( Integer offsetStorageReplicationFactor)
specifier|public
name|void
name|setOffsetStorageReplicationFactor
parameter_list|(
name|Integer
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|this
operator|.
name|offsetStorageReplicationFactor
operator|=
name|offsetStorageReplicationFactor
expr_stmt|;
block|}
DECL|method|getOffsetCommitPolicy ()
specifier|public
name|String
name|getOffsetCommitPolicy
parameter_list|()
block|{
return|return
name|offsetCommitPolicy
return|;
block|}
DECL|method|setOffsetCommitPolicy (String offsetCommitPolicy)
specifier|public
name|void
name|setOffsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitPolicy
operator|=
name|offsetCommitPolicy
expr_stmt|;
block|}
DECL|method|getOffsetFlushIntervalMs ()
specifier|public
name|Long
name|getOffsetFlushIntervalMs
parameter_list|()
block|{
return|return
name|offsetFlushIntervalMs
return|;
block|}
DECL|method|setOffsetFlushIntervalMs (Long offsetFlushIntervalMs)
specifier|public
name|void
name|setOffsetFlushIntervalMs
parameter_list|(
name|Long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|offsetFlushIntervalMs
operator|=
name|offsetFlushIntervalMs
expr_stmt|;
block|}
DECL|method|getOffsetCommitTimeoutMs ()
specifier|public
name|Long
name|getOffsetCommitTimeoutMs
parameter_list|()
block|{
return|return
name|offsetCommitTimeoutMs
return|;
block|}
DECL|method|setOffsetCommitTimeoutMs (Long offsetCommitTimeoutMs)
specifier|public
name|void
name|setOffsetCommitTimeoutMs
parameter_list|(
name|Long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|offsetCommitTimeoutMs
operator|=
name|offsetCommitTimeoutMs
expr_stmt|;
block|}
DECL|method|getOffsetStoragePartitions ()
specifier|public
name|Integer
name|getOffsetStoragePartitions
parameter_list|()
block|{
return|return
name|offsetStoragePartitions
return|;
block|}
DECL|method|setOffsetStoragePartitions (Integer offsetStoragePartitions)
specifier|public
name|void
name|setOffsetStoragePartitions
parameter_list|(
name|Integer
name|offsetStoragePartitions
parameter_list|)
block|{
name|this
operator|.
name|offsetStoragePartitions
operator|=
name|offsetStoragePartitions
expr_stmt|;
block|}
DECL|method|getInternalKeyConverter ()
specifier|public
name|String
name|getInternalKeyConverter
parameter_list|()
block|{
return|return
name|internalKeyConverter
return|;
block|}
DECL|method|setInternalKeyConverter (String internalKeyConverter)
specifier|public
name|void
name|setInternalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|this
operator|.
name|internalKeyConverter
operator|=
name|internalKeyConverter
expr_stmt|;
block|}
DECL|method|getInternalValueConverter ()
specifier|public
name|String
name|getInternalValueConverter
parameter_list|()
block|{
return|return
name|internalValueConverter
return|;
block|}
DECL|method|setInternalValueConverter (String internalValueConverter)
specifier|public
name|void
name|setInternalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|this
operator|.
name|internalValueConverter
operator|=
name|internalValueConverter
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

