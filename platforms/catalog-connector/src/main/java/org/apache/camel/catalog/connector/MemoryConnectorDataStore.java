begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog.connector
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|connector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_comment
comment|/**  * A memory based {@link ConnectorDataStore}  */
end_comment

begin_class
DECL|class|MemoryConnectorDataStore
specifier|public
class|class
name|MemoryConnectorDataStore
implements|implements
name|ConnectorDataStore
block|{
DECL|field|store
specifier|private
name|Set
argument_list|<
name|ConnectorDetails
argument_list|>
name|store
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|addConnector (ConnectorDto dto, String connectorJson, String connectorSchemaJson)
specifier|public
name|void
name|addConnector
parameter_list|(
name|ConnectorDto
name|dto
parameter_list|,
name|String
name|connectorJson
parameter_list|,
name|String
name|connectorSchemaJson
parameter_list|)
block|{
name|ConnectorDetails
name|entry
init|=
operator|new
name|ConnectorDetails
argument_list|(
name|dto
argument_list|,
name|connectorJson
argument_list|,
name|connectorSchemaJson
argument_list|)
decl_stmt|;
comment|// remove in case we are updating the connector
name|store
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeConnector (ConnectorDto dto)
specifier|public
name|void
name|removeConnector
parameter_list|(
name|ConnectorDto
name|dto
parameter_list|)
block|{
name|store
operator|.
name|remove
argument_list|(
operator|new
name|ConnectorDetails
argument_list|(
name|dto
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findConnector (String filter, boolean latestVersionOnly)
specifier|public
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|findConnector
parameter_list|(
name|String
name|filter
parameter_list|,
name|boolean
name|latestVersionOnly
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// search ignore case
name|filter
operator|=
name|filter
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
for|for
control|(
name|ConnectorDetails
name|detail
range|:
name|store
control|)
block|{
name|ConnectorDto
name|dto
init|=
name|detail
operator|.
name|getDto
argument_list|()
decl_stmt|;
if|if
condition|(
name|dto
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getDescription
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getGroupId
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getArtifactId
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getVersion
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|labels
init|=
name|dto
operator|.
name|getLabels
argument_list|()
decl_stmt|;
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|labels
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|lab
range|:
name|arr
control|)
block|{
name|lab
operator|=
name|lab
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
name|lab
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|store
operator|.
name|forEach
argument_list|(
name|d
lambda|->
name|answer
operator|.
name|add
argument_list|(
name|d
operator|.
name|getDto
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// filter only latest version
if|if
condition|(
name|latestVersionOnly
operator|&&
name|answer
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// sort first
name|answer
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|ConnectorDto
operator|::
name|getMavenGav
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep only latest in each group
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|unique
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ConnectorDto
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ConnectorDto
name|dto
range|:
name|answer
control|)
block|{
if|if
condition|(
name|prev
operator|==
literal|null
operator|||
operator|(
name|prev
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|prev
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|prev
operator|=
name|dto
expr_stmt|;
block|}
else|else
block|{
name|unique
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|dto
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
comment|// special for last element
name|unique
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
return|return
name|unique
return|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|connectorJSon (ConnectorDto dto)
specifier|public
name|String
name|connectorJSon
parameter_list|(
name|ConnectorDto
name|dto
parameter_list|)
block|{
return|return
name|store
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|d
operator|.
name|getDto
argument_list|()
operator|.
name|equals
argument_list|(
name|dto
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
operator|.
name|getConnectorJson
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|connectorSchemaJSon (ConnectorDto dto)
specifier|public
name|String
name|connectorSchemaJSon
parameter_list|(
name|ConnectorDto
name|dto
parameter_list|)
block|{
return|return
name|store
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|d
operator|.
name|getDto
argument_list|()
operator|.
name|equals
argument_list|(
name|dto
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
operator|.
name|getConnectorSchemaJson
argument_list|()
return|;
block|}
comment|/**      * Entry holding the connector details      */
DECL|class|ConnectorDetails
specifier|private
specifier|static
specifier|final
class|class
name|ConnectorDetails
block|{
DECL|field|dto
specifier|private
name|ConnectorDto
name|dto
decl_stmt|;
DECL|field|connectorJson
specifier|private
name|String
name|connectorJson
decl_stmt|;
DECL|field|connectorSchemaJson
specifier|private
name|String
name|connectorSchemaJson
decl_stmt|;
DECL|method|ConnectorDetails (ConnectorDto dto, String connectorJson, String connectorSchemaJson)
name|ConnectorDetails
parameter_list|(
name|ConnectorDto
name|dto
parameter_list|,
name|String
name|connectorJson
parameter_list|,
name|String
name|connectorSchemaJson
parameter_list|)
block|{
name|this
operator|.
name|dto
operator|=
name|dto
expr_stmt|;
name|this
operator|.
name|connectorJson
operator|=
name|connectorJson
expr_stmt|;
name|this
operator|.
name|connectorSchemaJson
operator|=
name|connectorSchemaJson
expr_stmt|;
block|}
DECL|method|getDto ()
name|ConnectorDto
name|getDto
parameter_list|()
block|{
return|return
name|dto
return|;
block|}
DECL|method|getConnectorJson ()
name|String
name|getConnectorJson
parameter_list|()
block|{
return|return
name|connectorJson
return|;
block|}
DECL|method|getConnectorSchemaJson ()
name|String
name|getConnectorSchemaJson
parameter_list|()
block|{
return|return
name|connectorSchemaJson
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ConnectorDetails
name|entry
init|=
operator|(
name|ConnectorDetails
operator|)
name|o
decl_stmt|;
return|return
name|dto
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|dto
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|dto
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

