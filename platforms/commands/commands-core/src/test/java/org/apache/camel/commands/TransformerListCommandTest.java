begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ExplicitCamelContextNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|StringDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|CustomTransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|DataFormatTransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|EndpointTransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TransformerListCommandTest
specifier|public
class|class
name|TransformerListCommandTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransformerListCommandTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testTransformerList ()
specifier|public
name|void
name|testTransformerList
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|out
init|=
name|doTest
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"xml:foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"json:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"java:"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"xml:test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"custom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Started"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"ProcessorTransformer["
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"DataFormatTransformer["
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"MyTransformer["
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransformerListVerbose ()
specifier|public
name|void
name|testTransformerListVerbose
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|out
init|=
name|doTest
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"xml:foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"json:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"java:"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"xml:test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"custom"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Started"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"ProcessorTransformer["
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"DataFormatTransformer["
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"MyTransformer["
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTest (boolean verbose)
specifier|private
name|String
name|doTest
parameter_list|(
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|EndpointTransformerDefinition
name|etd
init|=
operator|new
name|EndpointTransformerDefinition
argument_list|()
decl_stmt|;
name|etd
operator|.
name|setFrom
argument_list|(
literal|"xml:foo"
argument_list|)
expr_stmt|;
name|etd
operator|.
name|setTo
argument_list|(
literal|"json:bar"
argument_list|)
expr_stmt|;
name|etd
operator|.
name|setUri
argument_list|(
literal|"direct:transformer"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getTransformers
argument_list|()
operator|.
name|add
argument_list|(
name|etd
argument_list|)
expr_stmt|;
name|context
operator|.
name|resolveTransformer
argument_list|(
operator|new
name|DataType
argument_list|(
literal|"xml:foo"
argument_list|)
argument_list|,
operator|new
name|DataType
argument_list|(
literal|"json:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|DataFormatTransformerDefinition
name|dftd
init|=
operator|new
name|DataFormatTransformerDefinition
argument_list|()
decl_stmt|;
name|dftd
operator|.
name|setFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|dftd
operator|.
name|setTo
argument_list|(
literal|"xml:test"
argument_list|)
expr_stmt|;
name|dftd
operator|.
name|setDataFormatType
argument_list|(
operator|new
name|StringDataFormat
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getTransformers
argument_list|()
operator|.
name|add
argument_list|(
name|dftd
argument_list|)
expr_stmt|;
name|context
operator|.
name|resolveTransformer
argument_list|(
operator|new
name|DataType
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|DataType
argument_list|(
literal|"xml:test"
argument_list|)
argument_list|)
expr_stmt|;
name|CustomTransformerDefinition
name|ctd
init|=
operator|new
name|CustomTransformerDefinition
argument_list|()
decl_stmt|;
name|ctd
operator|.
name|setScheme
argument_list|(
literal|"custom"
argument_list|)
expr_stmt|;
name|ctd
operator|.
name|setType
argument_list|(
name|MyTransformer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getTransformers
argument_list|()
operator|.
name|add
argument_list|(
name|ctd
argument_list|)
expr_stmt|;
name|context
operator|.
name|resolveTransformer
argument_list|(
literal|"custom"
argument_list|)
expr_stmt|;
name|context
operator|.
name|setNameStrategy
argument_list|(
operator|new
name|ExplicitCamelContextNameStrategy
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelController
name|controller
init|=
operator|new
name|DummyCamelController
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|TransformerListCommand
name|command
init|=
operator|new
name|TransformerListCommand
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|verbose
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|command
operator|.
name|execute
argument_list|(
name|controller
argument_list|,
name|ps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|os
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n{}\n"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|class|MyTransformer
specifier|public
specifier|static
class|class
name|MyTransformer
extends|extends
name|Transformer
block|{
annotation|@
name|Override
DECL|method|transform (Message message, DataType from, DataType to)
specifier|public
name|void
name|transform
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
return|return;
block|}
block|}
block|}
end_class

end_unit

