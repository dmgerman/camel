begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedRouteMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RuntimeEndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|JsonSchemaHelper
import|;
end_import

begin_comment
comment|/**  * Abstract {@link org.apache.camel.commands.LocalCamelController} that implementators should extend when implementing  * a controller that runs locally in the same JVM as Camel.  */
end_comment

begin_class
DECL|class|AbstractLocalCamelController
specifier|public
specifier|abstract
class|class
name|AbstractLocalCamelController
extends|extends
name|AbstractCamelController
implements|implements
name|LocalCamelController
block|{
DECL|method|getLocalCamelContext (String name)
specifier|public
name|CamelContext
name|getLocalCamelContext
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|CamelContext
name|camelContext
range|:
name|this
operator|.
name|getLocalCamelContexts
argument_list|()
control|)
block|{
if|if
condition|(
name|camelContext
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|camelContext
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContextInformation (String name)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCamelContextInformation
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"managementName"
argument_list|,
name|context
operator|.
name|getManagementName
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|context
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|context
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"uptime"
argument_list|,
name|context
operator|.
name|getUptime
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"suspended"
argument_list|,
name|context
operator|.
name|getStatus
argument_list|()
operator|.
name|isSuspended
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|level
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getStatisticsLevel
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"managementStatisticsLevel"
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|put
argument_list|(
literal|"allowUseOriginalMessage"
argument_list|,
name|context
operator|.
name|isAllowUseOriginalMessage
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"messageHistory"
argument_list|,
name|context
operator|.
name|isMessageHistory
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"tracing"
argument_list|,
name|context
operator|.
name|isTracing
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"logMask"
argument_list|,
name|context
operator|.
name|isLogMask
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"shutdownTimeout"
argument_list|,
name|context
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|getTimeUnit
argument_list|()
operator|.
name|toSeconds
argument_list|(
name|context
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|getTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"classResolver"
argument_list|,
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"packageScanClassResolver"
argument_list|,
name|context
operator|.
name|getPackageScanClassResolver
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"applicationContextClassLoader"
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"headersMapFactory"
argument_list|,
name|context
operator|.
name|getHeadersMapFactory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|put
argument_list|(
literal|"property."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|activeRoutes
init|=
literal|0
decl_stmt|;
name|long
name|inactiveRoutes
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Route
argument_list|>
name|routeList
init|=
name|context
operator|.
name|getRoutes
argument_list|()
decl_stmt|;
for|for
control|(
name|Route
name|route
range|:
name|routeList
control|)
block|{
if|if
condition|(
name|context
operator|.
name|getRouteStatus
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|activeRoutes
operator|++
expr_stmt|;
block|}
else|else
block|{
name|inactiveRoutes
operator|++
expr_stmt|;
block|}
block|}
name|answer
operator|.
name|put
argument_list|(
literal|"startedRoutes"
argument_list|,
name|activeRoutes
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"totalRoutes"
argument_list|,
name|activeRoutes
operator|+
name|inactiveRoutes
argument_list|)
expr_stmt|;
comment|// add type converter details
name|answer
operator|.
name|put
argument_list|(
literal|"typeConverter.numberOfTypeConverters"
argument_list|,
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"typeConverter.statisticsEnabled"
argument_list|,
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|isStatisticsEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"typeConverter.noopCounter"
argument_list|,
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getNoopCounter
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"typeConverter.attemptCounter"
argument_list|,
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getAttemptCounter
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"typeConverter.hitCounter"
argument_list|,
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getHitCounter
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"typeConverter.missCounter"
argument_list|,
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getMissCounter
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"typeConverter.failedCounter"
argument_list|,
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getFailedCounter
argument_list|()
argument_list|)
expr_stmt|;
comment|// add async processor await manager details
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.size"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.statisticsEnabled"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|isStatisticsEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.threadsBlocked"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getThreadsBlocked
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.threadsInterrupted"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getThreadsInterrupted
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.totalDuration"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getTotalDuration
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.minDuration"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getMinDuration
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.maxDuration"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getMaxDuration
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"asyncProcessorAwaitManager.meanDuration"
argument_list|,
name|context
operator|.
name|getAsyncProcessorAwaitManager
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getMeanDuration
argument_list|()
argument_list|)
expr_stmt|;
comment|// add stream caching details if enabled
if|if
condition|(
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
literal|"streamCachingEnabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.spoolDirectory"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getSpoolDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.spoolChiper"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getSpoolChiper
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.spoolThreshold"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getSpoolThreshold
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.spoolUsedHeapMemoryThreshold"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getSpoolUsedHeapMemoryThreshold
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.spoolUsedHeapMemoryLimit"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getSpoolUsedHeapMemoryLimit
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.anySpoolRules"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|isAnySpoolRules
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.bufferSize"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.removeSpoolDirectoryWhenStopping"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|isRemoveSpoolDirectoryWhenStopping
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.statisticsEnabled"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|isStatisticsEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|isStatisticsEnabled
argument_list|()
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.cacheMemoryCounter"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getCacheMemoryCounter
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.cacheMemorySize"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getCacheMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.cacheMemoryAverageSize"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getCacheMemoryAverageSize
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.cacheSpoolCounter"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getCacheSpoolCounter
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.cacheSpoolSize"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getCacheSpoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"streamCaching.cacheSpoolAverageSize"
argument_list|,
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|getCacheSpoolAverageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|answer
operator|.
name|put
argument_list|(
literal|"streamCachingEnabled"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getCamelContextStatsAsXml (String camelContextName, boolean fullStats, boolean includeProcessors)
specifier|public
name|String
name|getCamelContextStatsAsXml
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|boolean
name|fullStats
parameter_list|,
name|boolean
name|includeProcessors
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ManagementAgent
name|agent
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|agent
operator|!=
literal|null
condition|)
block|{
name|MBeanServer
name|mBeanServer
init|=
name|agent
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|query
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|agent
operator|.
name|getMBeanObjectDomainName
argument_list|()
operator|+
literal|":type=context,*"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|mBeanServer
operator|.
name|queryNames
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectName
name|contextMBean
range|:
name|set
control|)
block|{
name|String
name|camelId
init|=
operator|(
name|String
operator|)
name|mBeanServer
operator|.
name|getAttribute
argument_list|(
name|contextMBean
argument_list|,
literal|"CamelId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelId
operator|!=
literal|null
operator|&&
name|camelId
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|xml
init|=
operator|(
name|String
operator|)
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|contextMBean
argument_list|,
literal|"dumpRoutesStatsAsXml"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fullStats
block|,
name|includeProcessors
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|,
literal|"boolean"
block|}
argument_list|)
decl_stmt|;
return|return
name|xml
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|browseInflightExchanges (String camelContextName, String route, int limit, boolean sortByLongestDuration)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|browseInflightExchanges
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|route
parameter_list|,
name|int
name|limit
parameter_list|,
name|boolean
name|sortByLongestDuration
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ManagementAgent
name|agent
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|agent
operator|!=
literal|null
condition|)
block|{
name|MBeanServer
name|mBeanServer
init|=
name|agent
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|on
init|=
operator|new
name|ObjectName
argument_list|(
name|agent
operator|.
name|getMBeanObjectDomainName
argument_list|()
operator|+
literal|":type=services,name=DefaultInflightRepository,context="
operator|+
name|context
operator|.
name|getManagementName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mBeanServer
operator|.
name|isRegistered
argument_list|(
name|on
argument_list|)
condition|)
block|{
name|TabularData
name|list
init|=
operator|(
name|TabularData
operator|)
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"browse"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|route
block|,
name|limit
block|,
name|sortByLongestDuration
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"int"
block|,
literal|"boolean"
block|}
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|CompositeData
argument_list|>
name|values
init|=
operator|(
name|Collection
argument_list|<
name|CompositeData
argument_list|>
operator|)
name|list
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|CompositeData
name|data
range|:
name|values
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Object
name|exchangeId
init|=
name|data
operator|.
name|get
argument_list|(
literal|"exchangeId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchangeId
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"exchangeId"
argument_list|,
name|exchangeId
argument_list|)
expr_stmt|;
block|}
name|Object
name|fromRouteId
init|=
name|data
operator|.
name|get
argument_list|(
literal|"fromRouteId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromRouteId
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"fromRouteId"
argument_list|,
name|fromRouteId
argument_list|)
expr_stmt|;
block|}
name|Object
name|routeId
init|=
name|data
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"routeId"
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
block|}
name|Object
name|nodeId
init|=
name|data
operator|.
name|get
argument_list|(
literal|"nodeId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"nodeId"
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|Object
name|elapsed
init|=
name|data
operator|.
name|get
argument_list|(
literal|"elapsed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elapsed
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"elapsed"
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
block|}
name|Object
name|duration
init|=
name|data
operator|.
name|get
argument_list|(
literal|"duration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|duration
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"duration"
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|startContext (String camelContextName)
specifier|public
name|void
name|startContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopContext (String camelContextName)
specifier|public
name|void
name|stopContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|suspendContext (String camelContextName)
specifier|public
name|void
name|suspendContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|resumeContext (String camelContextName)
specifier|public
name|void
name|resumeContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRoutes (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getRoutes
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRoutes
argument_list|(
name|camelContextName
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getRoutes (String camelContextName, String filter)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getRoutes
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContextName
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Route
name|route
range|:
name|context
operator|.
name|getRoutes
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|route
operator|.
name|getId
argument_list|()
operator|.
name|matches
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"camelContextName"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"routeId"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|getRouteState
argument_list|(
name|route
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uptime"
argument_list|,
name|route
operator|.
name|getUptime
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedRouteMBean
name|mr
init|=
name|context
operator|.
name|getManagedRoute
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|ManagedRouteMBean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"exchangesTotal"
argument_list|,
literal|""
operator|+
name|mr
operator|.
name|getExchangesTotal
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesInflight"
argument_list|,
literal|""
operator|+
name|mr
operator|.
name|getExchangesInflight
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesFailed"
argument_list|,
literal|""
operator|+
name|mr
operator|.
name|getExchangesFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|put
argument_list|(
literal|"exchangesTotal"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesInflight"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesFailed"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|camelContexts
init|=
name|this
operator|.
name|getCamelContexts
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|camelContexts
control|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|routes
init|=
name|getRoutes
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|answer
operator|.
name|addAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sort the list
name|Collections
operator|.
name|sort
argument_list|(
name|answer
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o2
parameter_list|)
block|{
comment|// group by camel context first, then by route name
name|String
name|c1
init|=
name|o1
operator|.
name|get
argument_list|(
literal|"camelContextName"
argument_list|)
decl_stmt|;
name|String
name|c2
init|=
name|o2
operator|.
name|get
argument_list|(
literal|"camelContextName"
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
comment|// okay from same camel context, then sort by route id
name|answer
operator|=
name|o1
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|resetRouteStats (String camelContextName)
specifier|public
name|void
name|resetRouteStats
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ManagementAgent
name|agent
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|agent
operator|!=
literal|null
condition|)
block|{
name|MBeanServer
name|mBeanServer
init|=
name|agent
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
comment|// reset route mbeans
name|ObjectName
name|query
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|agent
operator|.
name|getMBeanObjectDomainName
argument_list|()
operator|+
literal|":type=routes,*"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|mBeanServer
operator|.
name|queryNames
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectName
name|routeMBean
range|:
name|set
control|)
block|{
name|String
name|camelId
init|=
operator|(
name|String
operator|)
name|mBeanServer
operator|.
name|getAttribute
argument_list|(
name|routeMBean
argument_list|,
literal|"CamelId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelId
operator|!=
literal|null
operator|&&
name|camelId
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|routeMBean
argument_list|,
literal|"reset"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|true
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|startRoute (String camelContextName, String routeId)
specifier|public
name|void
name|startRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|startRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopRoute (String camelContextName, String routeId)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|stopRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|suspendRoute (String camelContextName, String routeId)
specifier|public
name|void
name|suspendRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|suspendRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resumeRoute (String camelContextName, String routeId)
specifier|public
name|void
name|resumeRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|resumeRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRouteModelAsXml (String routeId, String camelContextName)
specifier|public
name|String
name|getRouteModelAsXml
parameter_list|(
name|String
name|routeId
parameter_list|,
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RouteDefinition
name|route
init|=
name|context
operator|.
name|getRouteDefinition
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ModelHelper
operator|.
name|dumpModelAsXml
argument_list|(
literal|null
argument_list|,
name|route
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRouteStatsAsXml (String routeId, String camelContextName, boolean fullStats, boolean includeProcessors)
specifier|public
name|String
name|getRouteStatsAsXml
parameter_list|(
name|String
name|routeId
parameter_list|,
name|String
name|camelContextName
parameter_list|,
name|boolean
name|fullStats
parameter_list|,
name|boolean
name|includeProcessors
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ManagementAgent
name|agent
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|agent
operator|!=
literal|null
condition|)
block|{
name|MBeanServer
name|mBeanServer
init|=
name|agent
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|mBeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|agent
operator|.
name|getMBeanObjectDomainName
argument_list|()
operator|+
literal|":type=routes,name=\""
operator|+
name|routeId
operator|+
literal|"\",*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ObjectName
argument_list|>
name|iterator
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectName
name|routeMBean
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// the route must be part of the camel context
name|String
name|camelId
init|=
operator|(
name|String
operator|)
name|mBeanServer
operator|.
name|getAttribute
argument_list|(
name|routeMBean
argument_list|,
literal|"CamelId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelId
operator|!=
literal|null
operator|&&
name|camelId
operator|.
name|equals
argument_list|(
name|camelContextName
argument_list|)
condition|)
block|{
name|String
name|xml
init|=
operator|(
name|String
operator|)
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|routeMBean
argument_list|,
literal|"dumpRouteStatsAsXml"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fullStats
block|,
name|includeProcessors
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|,
literal|"boolean"
block|}
argument_list|)
decl_stmt|;
return|return
name|xml
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRestModelAsXml (String camelContextName)
specifier|public
name|String
name|getRestModelAsXml
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|rests
init|=
name|context
operator|.
name|getRestDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|rests
operator|==
literal|null
operator|||
name|rests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// use a rests definition to dump the rests
name|RestsDefinition
name|def
init|=
operator|new
name|RestsDefinition
argument_list|()
decl_stmt|;
name|def
operator|.
name|setRests
argument_list|(
name|rests
argument_list|)
expr_stmt|;
return|return
name|ModelHelper
operator|.
name|dumpModelAsXml
argument_list|(
literal|null
argument_list|,
name|def
argument_list|)
return|;
block|}
DECL|method|getRestApiDocAsJson (String camelContextName)
specifier|public
name|String
name|getRestApiDocAsJson
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|getRestRegistry
argument_list|()
operator|.
name|apiDocAsJson
argument_list|()
return|;
block|}
DECL|method|getEndpoints (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getEndpoints
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContextName
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|context
operator|.
name|getEndpoints
argument_list|()
argument_list|)
decl_stmt|;
comment|// sort routes
name|Collections
operator|.
name|sort
argument_list|(
name|endpoints
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Endpoint
name|o1
parameter_list|,
name|Endpoint
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getEndpointKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEndpointKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"camelContextName"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uri"
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|getEndpointState
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getEndpointRuntimeStatistics (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getEndpointRuntimeStatistics
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContextName
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getRuntimeEndpointRegistry
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|EndpointRegistry
name|staticRegistry
init|=
name|context
operator|.
name|getEndpointRegistry
argument_list|()
decl_stmt|;
for|for
control|(
name|RuntimeEndpointRegistry
operator|.
name|Statistic
name|stat
range|:
name|context
operator|.
name|getRuntimeEndpointRegistry
argument_list|()
operator|.
name|getEndpointStatistics
argument_list|()
control|)
block|{
name|String
name|url
init|=
name|stat
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|String
name|routeId
init|=
name|stat
operator|.
name|getRouteId
argument_list|()
decl_stmt|;
name|String
name|direction
init|=
name|stat
operator|.
name|getDirection
argument_list|()
decl_stmt|;
name|Boolean
name|isStatic
init|=
name|staticRegistry
operator|.
name|isStatic
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Boolean
name|isDynamic
init|=
name|staticRegistry
operator|.
name|isDynamic
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|long
name|hits
init|=
name|stat
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"camelContextName"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uri"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"routeId"
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"direction"
argument_list|,
name|direction
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"static"
argument_list|,
name|isStatic
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"dynamic"
argument_list|,
name|isDynamic
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"hits"
argument_list|,
literal|""
operator|+
name|hits
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sort the list
name|Collections
operator|.
name|sort
argument_list|(
name|answer
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|endpoint1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|endpoint2
parameter_list|)
block|{
comment|// sort by route id
name|String
name|route1
init|=
name|endpoint1
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
decl_stmt|;
name|String
name|route2
init|=
name|endpoint2
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|route1
operator|.
name|compareTo
argument_list|(
name|route2
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
comment|// we want in before out
name|String
name|dir1
init|=
name|endpoint1
operator|.
name|get
argument_list|(
literal|"direction"
argument_list|)
decl_stmt|;
name|String
name|dir2
init|=
name|endpoint2
operator|.
name|get
argument_list|(
literal|"direction"
argument_list|)
decl_stmt|;
name|num
operator|=
name|dir1
operator|.
name|compareTo
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
block|}
return|return
name|num
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getRestServices (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getRestServices
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContextName
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RestRegistry
operator|.
name|RestService
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|RestRegistry
operator|.
name|RestService
argument_list|>
argument_list|(
name|context
operator|.
name|getRestRegistry
argument_list|()
operator|.
name|listAllRestServices
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|services
argument_list|,
operator|new
name|Comparator
argument_list|<
name|RestRegistry
operator|.
name|RestService
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RestRegistry
operator|.
name|RestService
name|o1
parameter_list|,
name|RestRegistry
operator|.
name|RestService
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getUrl
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getUrl
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|RestRegistry
operator|.
name|RestService
name|service
range|:
name|services
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"basePath"
argument_list|,
name|service
operator|.
name|getBasePath
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"baseUrl"
argument_list|,
name|service
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"consumes"
argument_list|,
name|service
operator|.
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|service
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"inType"
argument_list|,
name|service
operator|.
name|getInType
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"method"
argument_list|,
name|service
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"outType"
argument_list|,
name|service
operator|.
name|getOutType
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"produces"
argument_list|,
name|service
operator|.
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"routeId"
argument_list|,
name|service
operator|.
name|getRouteId
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|service
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uriTemplate"
argument_list|,
name|service
operator|.
name|getUriTemplate
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
name|service
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|explainEndpointAsJSon (String camelContextName, String uri, boolean allOptions)
specifier|public
name|String
name|explainEndpointAsJSon
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|uri
parameter_list|,
name|boolean
name|allOptions
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|explainEndpointJson
argument_list|(
name|uri
argument_list|,
name|allOptions
argument_list|)
return|;
block|}
DECL|method|explainEipAsJSon (String camelContextName, String nameOrId, boolean allOptions)
specifier|public
name|String
name|explainEipAsJSon
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|nameOrId
parameter_list|,
name|boolean
name|allOptions
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|explainEipJson
argument_list|(
name|nameOrId
argument_list|,
name|allOptions
argument_list|)
return|;
block|}
DECL|method|listComponents (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|listComponents
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// find all components
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|components
init|=
name|context
operator|.
name|findComponents
argument_list|()
decl_stmt|;
comment|// gather component detail for each component
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|entry
range|:
name|components
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
name|String
name|label
init|=
literal|null
decl_stmt|;
comment|// the status can be:
comment|// - loaded = in use
comment|// - classpath = on the classpath
comment|// - release = available from the Apache Camel release
name|String
name|status
init|=
name|context
operator|.
name|hasComponent
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|?
literal|"in use"
else|:
literal|"on classpath"
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
name|String
name|groupId
init|=
literal|null
decl_stmt|;
name|String
name|artifactId
init|=
literal|null
decl_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
comment|// load component json data, and parse it to gather the component meta-data
name|String
name|json
init|=
name|context
operator|.
name|getComponentParameterJsonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"description"
argument_list|)
condition|)
block|{
name|description
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|label
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"javaType"
argument_list|)
condition|)
block|{
name|type
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"groupId"
argument_list|)
condition|)
block|{
name|groupId
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"groupId"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"artifactId"
argument_list|)
condition|)
block|{
name|artifactId
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"artifactId"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|version
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"label"
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupId
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"groupId"
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifactId
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"artifactId"
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|getTransformers (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getTransformers
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContextName
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Transformer
argument_list|>
name|transformers
init|=
operator|new
name|ArrayList
argument_list|<
name|Transformer
argument_list|>
argument_list|(
name|context
operator|.
name|getTransformerRegistry
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Transformer
name|transformer
range|:
name|transformers
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"camelContextName"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"scheme"
argument_list|,
name|transformer
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"from"
argument_list|,
name|transformer
operator|.
name|getFrom
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"to"
argument_list|,
name|transformer
operator|.
name|getTo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|transformer
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|transformer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|getValidators (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getValidators
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContextName
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|getLocalCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Validator
argument_list|>
name|validators
init|=
operator|new
name|ArrayList
argument_list|<
name|Validator
argument_list|>
argument_list|(
name|context
operator|.
name|getValidatorRegistry
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Validator
name|validator
range|:
name|validators
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"camelContextName"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|validator
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|validator
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|validator
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getEndpointState (Endpoint endpoint)
specifier|private
specifier|static
name|String
name|getEndpointState
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
comment|// must use String type to be sure remote JMX can read the attribute without requiring Camel classes.
if|if
condition|(
name|endpoint
operator|instanceof
name|StatefulService
condition|)
block|{
name|ServiceStatus
name|status
init|=
operator|(
operator|(
name|StatefulService
operator|)
name|endpoint
operator|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
return|return
name|status
operator|.
name|name
argument_list|()
return|;
block|}
comment|// assume started if not a ServiceSupport instance
return|return
name|ServiceStatus
operator|.
name|Started
operator|.
name|name
argument_list|()
return|;
block|}
DECL|method|getRouteState (Route route)
specifier|private
specifier|static
name|String
name|getRouteState
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
comment|// must use String type to be sure remote JMX can read the attribute without requiring Camel classes.
name|ServiceStatus
name|status
init|=
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRouteStatus
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
return|return
name|status
operator|.
name|name
argument_list|()
return|;
block|}
comment|// assume started if not a ServiceSupport instance
return|return
name|ServiceStatus
operator|.
name|Started
operator|.
name|name
argument_list|()
return|;
block|}
block|}
end_class

end_unit

