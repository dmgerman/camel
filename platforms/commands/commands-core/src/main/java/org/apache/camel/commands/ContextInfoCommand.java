begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextStatDump
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
import|;
end_import

begin_comment
comment|/**  * Command to display detailed information about a given {@link org.apache.camel.CamelContext}.  */
end_comment

begin_class
DECL|class|ContextInfoCommand
specifier|public
class|class
name|ContextInfoCommand
extends|extends
name|AbstractCamelCommand
block|{
DECL|field|XML_TIMESTAMP_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|XML_TIMESTAMP_FORMAT
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
decl_stmt|;
DECL|field|OUTPUT_TIMESTAMP_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_TIMESTAMP_FORMAT
init|=
literal|"yyyy-MM-dd HH:mm:ss"
decl_stmt|;
DECL|field|stringEscape
specifier|private
name|StringEscape
name|stringEscape
decl_stmt|;
DECL|field|context
specifier|private
name|String
name|context
decl_stmt|;
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
comment|/**      * @param context The name of the Camel context      * @param verbose Whether to output verbose      */
DECL|method|ContextInfoCommand (String context, boolean verbose)
specifier|public
name|ContextInfoCommand
parameter_list|(
name|String
name|context
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/**      * Sets the {@link org.apache.camel.commands.StringEscape} to use.      */
DECL|method|setStringEscape (StringEscape stringEscape)
specifier|public
name|void
name|setStringEscape
parameter_list|(
name|StringEscape
name|stringEscape
parameter_list|)
block|{
name|this
operator|.
name|stringEscape
operator|=
name|stringEscape
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (CamelController camelController, PrintStream out, PrintStream err)
specifier|public
name|Object
name|execute
parameter_list|(
name|CamelController
name|camelController
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|camelController
operator|.
name|getCamelContextInformation
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
operator|||
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Camel context "
operator|+
name|context
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\u001B[1mCamel Context "
operator|+
name|context
operator|+
literal|"\u001B[0m"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tName: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tManagementName: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"managementName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tVersion: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tStatus: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tUptime: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"uptime"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\u001B[1mMiscellaneous\u001B[0m"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tAuto Startup: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"autoStartup"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tStarting Routes: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"startingRoutes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tSuspended: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"suspended"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tShutdown Timeout: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"shutdownTimeout"
argument_list|)
operator|+
literal|" sec."
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tAllow UseOriginalMessage: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"allowUseOriginalMessage"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tMessage History: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"messageHistory"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tTracing: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"tracing"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\u001B[1mProperties\u001B[0m"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|row
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"property."
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\t"
operator|+
name|key
operator|+
literal|" = "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\u001B[1mAdvanced\u001B[0m"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tClassResolver: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"classResolver"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tPackageScanClassResolver: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"packageScanClassResolver"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tApplicationContextClassLoader: "
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"applicationContextClassLoader"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|printStatistics
argument_list|(
name|camelController
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|printStatistics (CamelController camelController, PrintStream out)
specifier|protected
name|void
name|printStatistics
parameter_list|(
name|CamelController
name|camelController
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\u001B[1mStatistics\u001B[0m"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|camelController
operator|.
name|getCamelContextStatsAsXml
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|xml
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|CamelContextStatDump
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|CamelContextStatDump
name|stat
init|=
operator|(
name|CamelContextStatDump
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|total
init|=
name|stat
operator|.
name|getExchangesCompleted
argument_list|()
operator|+
name|stat
operator|.
name|getExchangesFailed
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tExchanges Total: "
operator|+
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tExchanges Completed: "
operator|+
name|stat
operator|.
name|getExchangesCompleted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tExchanges Failed: "
operator|+
name|stat
operator|.
name|getExchangesFailed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tExchanges Inflight: "
operator|+
name|stat
operator|.
name|getExchangesInflight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tMin Processing Time: "
operator|+
name|stat
operator|.
name|getMinProcessingTime
argument_list|()
operator|+
literal|" ms"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tMax Processing Time: "
operator|+
name|stat
operator|.
name|getMaxProcessingTime
argument_list|()
operator|+
literal|" ms"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tMean Processing Time: "
operator|+
name|stat
operator|.
name|getMeanProcessingTime
argument_list|()
operator|+
literal|" ms"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tTotal Processing Time: "
operator|+
name|stat
operator|.
name|getTotalProcessingTime
argument_list|()
operator|+
literal|" ms"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tLast Processing Time: "
operator|+
name|stat
operator|.
name|getLastProcessingTime
argument_list|()
operator|+
literal|" ms"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tDelta Processing Time: "
operator|+
name|stat
operator|.
name|getDeltaProcessingTime
argument_list|()
operator|+
literal|" ms"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test for null to see if a any exchanges have been processed first to avoid NPE
if|if
condition|(
name|isEmpty
argument_list|(
name|stat
operator|.
name|getResetTimestamp
argument_list|()
argument_list|)
condition|)
block|{
comment|// Print an empty value for scripting
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tReset Statistics Date:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Date
name|date
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|XML_TIMESTAMP_FORMAT
argument_list|)
operator|.
name|parse
argument_list|(
name|stat
operator|.
name|getResetTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|text
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|OUTPUT_TIMESTAMP_FORMAT
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tReset Statistics Date: "
operator|+
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test for null to see if a any exchanges have been processed first to avoid NPE
if|if
condition|(
name|isEmpty
argument_list|(
name|stat
operator|.
name|getFirstExchangeCompletedTimestamp
argument_list|()
argument_list|)
condition|)
block|{
comment|// Print an empty value for scripting
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tFirst Exchange Date:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Date
name|date
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|XML_TIMESTAMP_FORMAT
argument_list|)
operator|.
name|parse
argument_list|(
name|stat
operator|.
name|getFirstExchangeCompletedTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|text
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|OUTPUT_TIMESTAMP_FORMAT
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tFirst Exchange Date: "
operator|+
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test for null to see if a any exchanges have been processed first to avoid NPE
if|if
condition|(
name|isEmpty
argument_list|(
name|stat
operator|.
name|getLastExchangeCompletedTimestamp
argument_list|()
argument_list|)
condition|)
block|{
comment|// Print an empty value for scripting
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tLast Exchange Date:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Date
name|date
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|XML_TIMESTAMP_FORMAT
argument_list|)
operator|.
name|parse
argument_list|(
name|stat
operator|.
name|getLastExchangeCompletedTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|text
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|OUTPUT_TIMESTAMP_FORMAT
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|stringEscape
operator|.
name|unescapeJava
argument_list|(
literal|"\tLast Exchange Date: "
operator|+
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: put that info in the controller
comment|/*                 // add type converter statistics if enabled                 if (camelContext.getTypeConverterRegistry().getStatistics().isStatisticsEnabled()) {                     out.println(stringEscape.unescapeJava(String.format("\tTypeConverterRegistry utilization: [attempts=%s, hits=%s, misses=%s, failures=%s]",                             camelContext.getTypeConverterRegistry().getStatistics().getAttemptCounter(),                             camelContext.getTypeConverterRegistry().getStatistics().getHitCounter(),                             camelContext.getTypeConverterRegistry().getStatistics().getMissCounter(),                             camelContext.getTypeConverterRegistry().getStatistics().getFailedCounter())));                 }                  // add stream caching details if enabled                 if (camelContext.getStreamCachingStrategy().isEnabled()) {                     out.println(stringEscape.unescapeJava(                             String.format("\tStreamCachingStrategy: [spoolDirectory=%s, spoolChiper=%s, spoolThreshold=%s, spoolUsedHeapMemoryThreshold=%s, "                                             + "spoolUsedHeapMemoryLimit=%s, anySpoolRules=%s, bufferSize=%s, removeSpoolDirectoryWhenStopping=%s, statisticsEnabled=%s]",                                     camelContext.getStreamCachingStrategy().getSpoolDirectory(),                                     camelContext.getStreamCachingStrategy().getSpoolChiper(),                                     camelContext.getStreamCachingStrategy().getSpoolThreshold(),                                     camelContext.getStreamCachingStrategy().getSpoolUsedHeapMemoryThreshold(),                                     camelContext.getStreamCachingStrategy().getSpoolUsedHeapMemoryLimit(),                                     camelContext.getStreamCachingStrategy().isAnySpoolRules(),                                     camelContext.getStreamCachingStrategy().getBufferSize(),                                     camelContext.getStreamCachingStrategy().isRemoveSpoolDirectoryWhenStopping(),                                     camelContext.getStreamCachingStrategy().getStatistics().isStatisticsEnabled())));                      if (camelContext.getStreamCachingStrategy().getStatistics().isStatisticsEnabled()) {                         out.println(stringEscape.unescapeJava(                                 String.format("\t                       [cacheMemoryCounter=%s, cacheMemorySize=%s, cacheMemoryAverageSize=%s, cacheSpoolCounter=%s, "                                                 + "cacheSpoolSize=%s, cacheSpoolAverageSize=%s]",                                         camelContext.getStreamCachingStrategy().getStatistics().getCacheMemoryCounter(),                                         printUnitFromBytes(camelContext.getStreamCachingStrategy().getStatistics().getCacheMemorySize()),                                         printUnitFromBytes(camelContext.getStreamCachingStrategy().getStatistics().getCacheMemoryAverageSize()),                                         camelContext.getStreamCachingStrategy().getStatistics().getCacheSpoolCounter(),                                         printUnitFromBytes(camelContext.getStreamCachingStrategy().getStatistics().getCacheSpoolSize()),                                         printUnitFromBytes(camelContext.getStreamCachingStrategy().getStatistics().getCacheSpoolAverageSize()))));                     }                 }                  long activeRoutes = 0;                 long inactiveRoutes = 0;                 List<Route> routeList = camelContext.getRoutes();                 for (Route route : routeList) {                     if (camelContext.getRouteStatus(route.getId()).isStarted()) {                         activeRoutes++;                     } else {                         inactiveRoutes++;                     }                 }                  out.println(stringEscape.unescapeJava("\tNumber of running routes: " + activeRoutes));                 out.println(stringEscape.unescapeJava("\tNumber of not running routes: " + inactiveRoutes));             }*/
block|}
block|}
block|}
end_class

end_unit

