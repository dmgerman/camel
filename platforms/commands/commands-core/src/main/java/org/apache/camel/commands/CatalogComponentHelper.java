begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
annotation|@
name|Deprecated
DECL|class|CatalogComponentHelper
specifier|public
specifier|final
class|class
name|CatalogComponentHelper
block|{
DECL|method|CatalogComponentHelper ()
specifier|private
name|CatalogComponentHelper
parameter_list|()
block|{     }
DECL|class|TableColumn
specifier|public
specifier|static
specifier|final
class|class
name|TableColumn
block|{
DECL|field|header
specifier|private
specifier|final
name|String
name|header
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|maxLen
specifier|private
name|int
name|maxLen
decl_stmt|;
DECL|field|formatString
specifier|private
name|String
name|formatString
decl_stmt|;
DECL|method|TableColumn (String header, String key)
specifier|public
name|TableColumn
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|maxLen
operator|=
name|header
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|formatString
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getHeader ()
specifier|public
name|String
name|getHeader
parameter_list|()
block|{
return|return
name|header
return|;
block|}
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getMaxLen ()
specifier|public
name|int
name|getMaxLen
parameter_list|()
block|{
return|return
name|maxLen
return|;
block|}
DECL|method|computeMaxLen (Map<String, String> row)
specifier|public
name|void
name|computeMaxLen
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
parameter_list|)
block|{
name|String
name|val
init|=
name|row
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|maxLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLen
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|headerSeparator ()
specifier|private
name|String
name|headerSeparator
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|header
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
name|header
operator|.
name|length
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|formatString ()
specifier|private
name|String
name|formatString
parameter_list|()
block|{
if|if
condition|(
name|formatString
operator|==
literal|null
condition|)
block|{
name|formatString
operator|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"%-"
argument_list|)
operator|.
name|append
argument_list|(
name|maxLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|maxLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|formatString
return|;
block|}
DECL|method|printHeader (PrintStream out, boolean newLine)
specifier|public
name|void
name|printHeader
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|boolean
name|newLine
parameter_list|)
block|{
name|String
name|outStr
init|=
name|String
operator|.
name|format
argument_list|(
name|formatString
argument_list|()
argument_list|,
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLine
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|outStr
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printHeaderSeparator (PrintStream out, boolean newLine)
specifier|public
name|void
name|printHeaderSeparator
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|boolean
name|newLine
parameter_list|)
block|{
name|String
name|outStr
init|=
name|String
operator|.
name|format
argument_list|(
name|formatString
argument_list|()
argument_list|,
name|headerSeparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLine
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|outStr
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printValue (PrintStream out, Map<String, String> row, boolean newLine)
specifier|public
name|void
name|printValue
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
parameter_list|,
name|boolean
name|newLine
parameter_list|)
block|{
name|String
name|val
init|=
name|row
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|outStr
init|=
name|String
operator|.
name|format
argument_list|(
name|formatString
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLine
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|outStr
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Table
specifier|public
specifier|static
specifier|final
class|class
name|Table
block|{
DECL|field|columns
specifier|private
specifier|final
name|List
argument_list|<
name|TableColumn
argument_list|>
name|columns
decl_stmt|;
DECL|field|rows
specifier|private
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
decl_stmt|;
DECL|method|Table (String[] headers, String[] keys)
specifier|public
name|Table
parameter_list|(
name|String
index|[]
name|headers
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
assert|assert
name|headers
operator|.
name|length
operator|==
name|keys
operator|.
name|length
assert|;
name|this
operator|.
name|columns
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|rows
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|TableColumn
argument_list|(
name|headers
index|[
name|i
index|]
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|rows
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|addRow (String name, Map<String, Object> row)
specifier|public
name|void
name|addRow
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rowData
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TableColumn
name|column
range|:
name|columns
control|)
block|{
name|Object
name|val
init|=
name|row
operator|.
name|get
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|rowData
operator|==
literal|null
condition|)
block|{
name|rowData
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|rowData
operator|.
name|put
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rowData
operator|!=
literal|null
condition|)
block|{
name|rowData
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|rowData
argument_list|)
expr_stmt|;
for|for
control|(
name|TableColumn
name|column
range|:
name|columns
control|)
block|{
name|column
operator|.
name|computeMaxLen
argument_list|(
name|rowData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|print (PrintStream out)
specifier|public
name|void
name|print
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rows
operator|.
name|size
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|==
literal|0
condition|)
block|{
name|printHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
name|rows
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|columns
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|printValue
argument_list|(
name|out
argument_list|,
name|row
argument_list|,
name|c
operator|==
name|columns
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|printHeader (PrintStream out)
specifier|private
name|void
name|printHeader
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|TableColumn
name|column
init|=
name|columns
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|column
operator|.
name|printHeader
argument_list|(
name|out
argument_list|,
name|c
operator|==
name|columns
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|TableColumn
name|column
init|=
name|columns
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|column
operator|.
name|printHeaderSeparator
argument_list|(
name|out
argument_list|,
name|c
operator|==
name|columns
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

