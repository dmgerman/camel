begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|BacklogTracerEventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|BacklogTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageDump
import|;
end_import

begin_class
DECL|class|BacklogTracerDumpCommand
specifier|public
class|class
name|BacklogTracerDumpCommand
extends|extends
name|AbstractContextCommand
block|{
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
DECL|field|format
specifier|private
name|String
name|format
decl_stmt|;
DECL|field|bodySize
specifier|private
name|Integer
name|bodySize
decl_stmt|;
comment|/**      * @param context  The name of the Camel context.      * @param pattern  To dump trace messages only for nodes or routes matching the given pattern (default is all)      * @param format   Format to use with the dump action (text or xml)      * @param bodySize To limit the body size when using text format      */
DECL|method|BacklogTracerDumpCommand (String context, String pattern, String format, Integer bodySize)
specifier|public
name|BacklogTracerDumpCommand
parameter_list|(
name|String
name|context
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|format
parameter_list|,
name|Integer
name|bodySize
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|bodySize
operator|=
name|bodySize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performContextCommand (CamelController camelController, CamelContext camelContext, PrintStream out, PrintStream err)
specifier|protected
name|Object
name|performContextCommand
parameter_list|(
name|CamelController
name|camelController
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
throws|throws
name|Exception
block|{
name|BacklogTracer
name|backlogTracer
init|=
name|BacklogTracer
operator|.
name|getBacklogTracer
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|backlogTracer
operator|==
literal|null
condition|)
block|{
name|backlogTracer
operator|=
operator|(
name|BacklogTracer
operator|)
name|camelContext
operator|.
name|getDefaultBacklogTracer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|==
literal|null
operator|||
literal|"text"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|MessageDump
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|BacklogTracerEventMessage
operator|.
name|TIMESTAMP_FORMAT
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BacklogTracerEventMessage
argument_list|>
name|events
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|events
operator|=
name|backlogTracer
operator|.
name|dumpTracedMessages
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|events
operator|=
name|backlogTracer
operator|.
name|dumpAllTracedMessages
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|BacklogTracerEventMessage
name|event
range|:
name|events
control|)
block|{
name|MessageDump
name|msg
init|=
operator|(
name|MessageDump
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|event
operator|.
name|getMessageAsXml
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|breadcrumb
init|=
name|getBreadcrumbId
argument_list|(
name|msg
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"#"
operator|+
name|event
operator|.
name|getUid
argument_list|()
operator|+
literal|"\tTimestamp:\t"
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|breadcrumb
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Breadcrumb: "
operator|+
name|breadcrumb
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"ExchangeId: "
operator|+
name|event
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getToNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Route: "
operator|+
name|event
operator|.
name|getRouteId
argument_list|()
operator|+
literal|"\t--> "
operator|+
name|event
operator|.
name|getToNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Route: "
operator|+
name|event
operator|.
name|getRouteId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|body
init|=
name|msg
operator|.
name|getBody
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|bodySize
operator|!=
literal|null
operator|&&
name|bodySize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|body
operator|.
name|length
argument_list|()
operator|>
name|bodySize
condition|)
block|{
name|body
operator|=
name|body
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bodySize
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"xml"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer messages:\n"
operator|+
name|backlogTracer
operator|.
name|dumpTracedMessages
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer messages:\n"
operator|+
name|backlogTracer
operator|.
name|dumpAllTracedMessagesAsXml
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getBreadcrumbId (List<MessageDump.Header> headers)
specifier|private
specifier|static
name|String
name|getBreadcrumbId
parameter_list|(
name|List
argument_list|<
name|MessageDump
operator|.
name|Header
argument_list|>
name|headers
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|==
literal|null
operator|||
name|headers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|MessageDump
operator|.
name|Header
name|header
range|:
name|headers
control|)
block|{
if|if
condition|(
name|header
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|Exchange
operator|.
name|BREADCRUMB_ID
argument_list|)
condition|)
block|{
return|return
name|header
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

