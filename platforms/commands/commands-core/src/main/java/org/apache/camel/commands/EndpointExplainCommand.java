begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|JsonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * Explain the Camel endpoints available in the JVM.  */
end_comment

begin_class
DECL|class|EndpointExplainCommand
specifier|public
class|class
name|EndpointExplainCommand
extends|extends
name|AbstractContextCommand
block|{
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
DECL|field|filter
specifier|private
name|String
name|filter
decl_stmt|;
DECL|method|EndpointExplainCommand (String name, boolean verbose, String filter)
specifier|public
name|EndpointExplainCommand
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performContextCommand (CamelController camelController, CamelContext camelContext, PrintStream out, PrintStream err)
specifier|protected
name|Object
name|performContextCommand
parameter_list|(
name|CamelController
name|camelController
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|endpoints
init|=
name|camelController
operator|.
name|getEndpoints
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoints
operator|==
literal|null
operator|||
name|endpoints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// filter endpoints
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|endpoints
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"uri"
argument_list|)
argument_list|,
name|filter
argument_list|)
condition|)
block|{
comment|// did not match
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|endpoints
control|)
block|{
name|String
name|json
init|=
name|camelController
operator|.
name|explainEndpointAsJSon
argument_list|(
name|context
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"uri"
argument_list|)
argument_list|,
name|verbose
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Context:\t"
operator|+
name|context
argument_list|)
expr_stmt|;
comment|// sanitize and mask uri so we dont see passwords
name|String
name|uri
init|=
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"uri"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|header
init|=
literal|"Uri:            "
operator|+
name|uri
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|// use a basic json parser
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|options
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// lets sort the options by name
name|Collections
operator|.
name|sort
argument_list|(
name|options
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o2
parameter_list|)
block|{
comment|// sort by kind first (need to -1 as we want path on top), then name
name|int
name|answer
init|=
operator|-
literal|1
operator|*
name|o1
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
name|answer
operator|=
name|o1
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|option
range|:
name|options
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Option:\t\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|option
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"Kind:\t\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|option
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|option
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Type:\t\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|String
name|javaType
init|=
name|option
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Java Type:\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|javaType
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|option
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Value:\t\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultValue
init|=
name|option
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Default Value:\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
name|String
name|description
init|=
name|option
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Description:\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

