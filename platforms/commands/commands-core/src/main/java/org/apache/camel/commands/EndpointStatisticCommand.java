begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * Display endpoint runtime statistics for a CamelContext  */
end_comment

begin_class
DECL|class|EndpointStatisticCommand
specifier|public
class|class
name|EndpointStatisticCommand
extends|extends
name|AbstractCamelCommand
block|{
DECL|field|CONTEXT_COLUMN_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|CONTEXT_COLUMN_LABEL
init|=
literal|"Context"
decl_stmt|;
DECL|field|URI_COLUMN_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|URI_COLUMN_LABEL
init|=
literal|"Uri"
decl_stmt|;
DECL|field|ROUTE_COLUMN_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|ROUTE_COLUMN_LABEL
init|=
literal|"Route Id"
decl_stmt|;
DECL|field|DIRECTION_COLUMN_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|DIRECTION_COLUMN_LABEL
init|=
literal|"Direction"
decl_stmt|;
DECL|field|STATIC_COLUMN_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|STATIC_COLUMN_LABEL
init|=
literal|"Static"
decl_stmt|;
DECL|field|DYNAMIC_COLUMN_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|DYNAMIC_COLUMN_LABEL
init|=
literal|"Dynamic"
decl_stmt|;
DECL|field|HITS_COLUMN_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|HITS_COLUMN_LABEL
init|=
literal|"Total #"
decl_stmt|;
DECL|field|DEFAULT_COLUMN_WIDTH_INCREMENT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_COLUMN_WIDTH_INCREMENT
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_FIELD_PREAMBLE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD_PREAMBLE
init|=
literal|" "
decl_stmt|;
DECL|field|DEFAULT_FIELD_POSTAMBLE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_FIELD_POSTAMBLE
init|=
literal|" "
decl_stmt|;
DECL|field|DEFAULT_HEADER_PREAMBLE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HEADER_PREAMBLE
init|=
literal|" "
decl_stmt|;
DECL|field|DEFAULT_HEADER_POSTAMBLE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HEADER_POSTAMBLE
init|=
literal|" "
decl_stmt|;
DECL|field|DEFAULT_FORMAT_BUFFER_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FORMAT_BUFFER_LENGTH
init|=
literal|24
decl_stmt|;
comment|// endpoint uris can be very long so clip by default after 120 chars
DECL|field|MAX_COLUMN_WIDTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_COLUMN_WIDTH
init|=
literal|120
decl_stmt|;
DECL|field|MIN_COLUMN_WIDTH
specifier|private
specifier|static
specifier|final
name|int
name|MIN_COLUMN_WIDTH
init|=
literal|12
decl_stmt|;
DECL|field|context
name|String
name|context
decl_stmt|;
DECL|field|decode
name|boolean
name|decode
init|=
literal|true
decl_stmt|;
DECL|field|filter
specifier|private
name|String
index|[]
name|filter
decl_stmt|;
DECL|method|EndpointStatisticCommand (String context, boolean decode, String[] filter)
specifier|public
name|EndpointStatisticCommand
parameter_list|(
name|String
name|context
parameter_list|,
name|boolean
name|decode
parameter_list|,
name|String
index|[]
name|filter
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|decode
operator|=
name|decode
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (CamelController camelController, PrintStream out, PrintStream err)
specifier|public
name|Object
name|execute
parameter_list|(
name|CamelController
name|camelController
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|contexts
init|=
name|camelController
operator|.
name|getCamelContexts
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|boolean
name|header
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|allEndpoints
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|context
range|:
name|contexts
control|)
block|{
name|String
name|contextName
init|=
name|context
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|endpoints
init|=
name|camelController
operator|.
name|getEndpointRuntimeStatistics
argument_list|(
name|contextName
argument_list|)
decl_stmt|;
name|allEndpoints
operator|.
name|put
argument_list|(
name|contextName
argument_list|,
name|endpoints
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnWidths
init|=
name|computeColumnWidths
argument_list|(
name|allEndpoints
argument_list|)
decl_stmt|;
specifier|final
name|String
name|headerFormat
init|=
name|buildFormatString
argument_list|(
name|columnWidths
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|rowFormat
init|=
name|buildFormatString
argument_list|(
name|columnWidths
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|allEndpoints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|contextName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|header
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|headerFormat
argument_list|,
name|CONTEXT_COLUMN_LABEL
argument_list|,
name|URI_COLUMN_LABEL
argument_list|,
name|ROUTE_COLUMN_LABEL
argument_list|,
name|DIRECTION_COLUMN_LABEL
argument_list|,
name|STATIC_COLUMN_LABEL
argument_list|,
name|DYNAMIC_COLUMN_LABEL
argument_list|,
name|HITS_COLUMN_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|headerFormat
argument_list|,
literal|"-------"
argument_list|,
literal|"---"
argument_list|,
literal|"--------"
argument_list|,
literal|"---------"
argument_list|,
literal|"------"
argument_list|,
literal|"-------"
argument_list|,
literal|"-------"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|uri
init|=
name|row
operator|.
name|get
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|decode
condition|)
block|{
comment|// decode uri so its more human readable
name|uri
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|uri
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
comment|// sanitize and mask uri so we dont see passwords
name|uri
operator|=
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|String
name|routeId
init|=
name|row
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
decl_stmt|;
name|String
name|direction
init|=
name|row
operator|.
name|get
argument_list|(
literal|"direction"
argument_list|)
decl_stmt|;
name|String
name|isStatic
init|=
name|row
operator|.
name|get
argument_list|(
literal|"static"
argument_list|)
decl_stmt|;
name|String
name|isDynamic
init|=
name|row
operator|.
name|get
argument_list|(
literal|"dynamic"
argument_list|)
decl_stmt|;
name|String
name|hits
init|=
name|row
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
decl_stmt|;
comment|// should we filter
if|if
condition|(
name|isValidRow
argument_list|(
name|direction
argument_list|,
name|isStatic
argument_list|,
name|isDynamic
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|rowFormat
argument_list|,
name|contextName
argument_list|,
name|uri
argument_list|,
name|routeId
argument_list|,
name|direction
argument_list|,
name|isStatic
argument_list|,
name|isDynamic
argument_list|,
name|hits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|isValidRow (String direction, String isStatic, String isDynamic)
specifier|protected
name|boolean
name|isValidRow
parameter_list|(
name|String
name|direction
parameter_list|,
name|String
name|isStatic
parameter_list|,
name|String
name|isDynamic
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|filter
control|)
block|{
if|if
condition|(
literal|"in"
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|answer
operator|=
literal|"in"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"out"
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|answer
operator|=
literal|"out"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"static"
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|answer
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|isStatic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dynamic"
operator|.
name|equals
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|answer
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|isDynamic
argument_list|)
expr_stmt|;
block|}
comment|// all filters must apply to accept when multi valued
if|if
condition|(
operator|!
name|answer
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|computeColumnWidths (Map<String, List<Map<String, String>>> allEndpoints)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|computeColumnWidths
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|allEndpoints
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|allEndpoints
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to determine column widths from null Iterable<Endpoint>"
argument_list|)
throw|;
block|}
else|else
block|{
name|int
name|maxContextLen
init|=
literal|0
decl_stmt|;
name|int
name|maxUriLen
init|=
literal|0
decl_stmt|;
name|int
name|maxRouteIdLen
init|=
literal|0
decl_stmt|;
name|int
name|maxDirectionLen
init|=
literal|0
decl_stmt|;
name|int
name|maxStaticLen
init|=
literal|0
decl_stmt|;
name|int
name|maxDynamicLen
init|=
literal|0
decl_stmt|;
name|int
name|maxHitsLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|allEndpoints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|contextName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|maxContextLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxContextLen
argument_list|,
name|contextName
operator|==
literal|null
condition|?
literal|0
else|:
name|contextName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|row
operator|.
name|get
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|decode
condition|)
block|{
comment|// decode uri so its more human readable
name|uri
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|uri
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
comment|// sanitize and mask uri so we dont see passwords
name|uri
operator|=
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|maxUriLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxUriLen
argument_list|,
name|uri
operator|==
literal|null
condition|?
literal|0
else|:
name|uri
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|routeId
init|=
name|row
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
decl_stmt|;
name|maxRouteIdLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRouteIdLen
argument_list|,
name|routeId
operator|==
literal|null
condition|?
literal|0
else|:
name|routeId
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|direction
init|=
name|row
operator|.
name|get
argument_list|(
literal|"direction"
argument_list|)
decl_stmt|;
name|maxDirectionLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxDirectionLen
argument_list|,
name|direction
operator|==
literal|null
condition|?
literal|0
else|:
name|direction
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|isStatic
init|=
name|row
operator|.
name|get
argument_list|(
literal|"static"
argument_list|)
decl_stmt|;
name|maxStaticLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxStaticLen
argument_list|,
name|isStatic
operator|==
literal|null
condition|?
literal|0
else|:
name|isStatic
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|isDynamic
init|=
name|row
operator|.
name|get
argument_list|(
literal|"dynamic"
argument_list|)
decl_stmt|;
name|maxDynamicLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxDynamicLen
argument_list|,
name|isDynamic
operator|==
literal|null
condition|?
literal|0
else|:
name|isDynamic
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|hits
init|=
name|row
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
decl_stmt|;
name|maxHitsLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxHitsLen
argument_list|,
name|hits
operator|==
literal|null
condition|?
literal|0
else|:
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|retval
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|CONTEXT_COLUMN_LABEL
argument_list|,
name|maxContextLen
argument_list|)
expr_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|URI_COLUMN_LABEL
argument_list|,
name|maxUriLen
argument_list|)
expr_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|ROUTE_COLUMN_LABEL
argument_list|,
name|maxRouteIdLen
argument_list|)
expr_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|DIRECTION_COLUMN_LABEL
argument_list|,
name|maxDirectionLen
argument_list|)
expr_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|STATIC_COLUMN_LABEL
argument_list|,
name|maxStaticLen
argument_list|)
expr_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|DYNAMIC_COLUMN_LABEL
argument_list|,
name|maxDynamicLen
argument_list|)
expr_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|HITS_COLUMN_LABEL
argument_list|,
name|maxHitsLen
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
block|}
DECL|method|buildFormatString (final Map<String, Integer> columnWidths, final boolean isHeader)
specifier|private
name|String
name|buildFormatString
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnWidths
parameter_list|,
specifier|final
name|boolean
name|isHeader
parameter_list|)
block|{
specifier|final
name|String
name|fieldPreamble
decl_stmt|;
specifier|final
name|String
name|fieldPostamble
decl_stmt|;
specifier|final
name|int
name|columnWidthIncrement
decl_stmt|;
if|if
condition|(
name|isHeader
condition|)
block|{
name|fieldPreamble
operator|=
name|DEFAULT_HEADER_PREAMBLE
expr_stmt|;
name|fieldPostamble
operator|=
name|DEFAULT_HEADER_POSTAMBLE
expr_stmt|;
block|}
else|else
block|{
name|fieldPreamble
operator|=
name|DEFAULT_FIELD_PREAMBLE
expr_stmt|;
name|fieldPostamble
operator|=
name|DEFAULT_FIELD_POSTAMBLE
expr_stmt|;
block|}
name|columnWidthIncrement
operator|=
name|DEFAULT_COLUMN_WIDTH_INCREMENT
expr_stmt|;
name|int
name|contextLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|columnWidths
operator|.
name|get
argument_list|(
name|CONTEXT_COLUMN_LABEL
argument_list|)
operator|+
name|columnWidthIncrement
argument_list|,
name|getMaxColumnWidth
argument_list|()
argument_list|)
decl_stmt|;
name|contextLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_COLUMN_WIDTH
argument_list|,
name|contextLen
argument_list|)
expr_stmt|;
name|int
name|uriLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|columnWidths
operator|.
name|get
argument_list|(
name|URI_COLUMN_LABEL
argument_list|)
operator|+
name|columnWidthIncrement
argument_list|,
name|getMaxColumnWidth
argument_list|()
argument_list|)
decl_stmt|;
name|uriLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_COLUMN_WIDTH
argument_list|,
name|uriLen
argument_list|)
expr_stmt|;
name|int
name|routeIdLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|columnWidths
operator|.
name|get
argument_list|(
name|ROUTE_COLUMN_LABEL
argument_list|)
operator|+
name|columnWidthIncrement
argument_list|,
name|getMaxColumnWidth
argument_list|()
argument_list|)
decl_stmt|;
name|routeIdLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_COLUMN_WIDTH
argument_list|,
name|routeIdLen
argument_list|)
expr_stmt|;
name|int
name|directionLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|columnWidths
operator|.
name|get
argument_list|(
name|DIRECTION_COLUMN_LABEL
argument_list|)
operator|+
name|columnWidthIncrement
argument_list|,
name|getMaxColumnWidth
argument_list|()
argument_list|)
decl_stmt|;
name|directionLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_COLUMN_WIDTH
argument_list|,
name|directionLen
argument_list|)
expr_stmt|;
name|int
name|staticLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|columnWidths
operator|.
name|get
argument_list|(
name|STATIC_COLUMN_LABEL
argument_list|)
operator|+
name|columnWidthIncrement
argument_list|,
name|getMaxColumnWidth
argument_list|()
argument_list|)
decl_stmt|;
name|staticLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_COLUMN_WIDTH
argument_list|,
name|staticLen
argument_list|)
expr_stmt|;
name|int
name|dynamicLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|columnWidths
operator|.
name|get
argument_list|(
name|DYNAMIC_COLUMN_LABEL
argument_list|)
operator|+
name|columnWidthIncrement
argument_list|,
name|getMaxColumnWidth
argument_list|()
argument_list|)
decl_stmt|;
name|dynamicLen
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_COLUMN_WIDTH
argument_list|,
name|dynamicLen
argument_list|)
expr_stmt|;
comment|// last row does not have min width
specifier|final
name|StringBuilder
name|retval
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_FORMAT_BUFFER_LENGTH
argument_list|)
decl_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|fieldPreamble
argument_list|)
operator|.
name|append
argument_list|(
literal|"%-"
argument_list|)
operator|.
name|append
argument_list|(
name|contextLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|contextLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
operator|.
name|append
argument_list|(
name|fieldPostamble
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|fieldPreamble
argument_list|)
operator|.
name|append
argument_list|(
literal|"%-"
argument_list|)
operator|.
name|append
argument_list|(
name|uriLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|uriLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
operator|.
name|append
argument_list|(
name|fieldPostamble
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|fieldPreamble
argument_list|)
operator|.
name|append
argument_list|(
literal|"%-"
argument_list|)
operator|.
name|append
argument_list|(
name|routeIdLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|routeIdLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
operator|.
name|append
argument_list|(
name|fieldPostamble
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|fieldPreamble
argument_list|)
operator|.
name|append
argument_list|(
literal|"%-"
argument_list|)
operator|.
name|append
argument_list|(
name|directionLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|directionLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
operator|.
name|append
argument_list|(
name|fieldPostamble
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|fieldPreamble
argument_list|)
operator|.
name|append
argument_list|(
literal|"%-"
argument_list|)
operator|.
name|append
argument_list|(
name|staticLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|staticLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
operator|.
name|append
argument_list|(
name|fieldPostamble
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|fieldPreamble
argument_list|)
operator|.
name|append
argument_list|(
literal|"%-"
argument_list|)
operator|.
name|append
argument_list|(
name|dynamicLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|dynamicLen
argument_list|)
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
operator|.
name|append
argument_list|(
name|fieldPostamble
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|fieldPreamble
argument_list|)
operator|.
name|append
argument_list|(
literal|"%s"
argument_list|)
operator|.
name|append
argument_list|(
name|fieldPostamble
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
return|return
name|retval
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getMaxColumnWidth ()
specifier|private
name|int
name|getMaxColumnWidth
parameter_list|()
block|{
return|return
name|MAX_COLUMN_WIDTH
return|;
block|}
block|}
end_class

end_unit

