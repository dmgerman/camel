begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.springboot.commands.crsh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|springboot
operator|.
name|commands
operator|.
name|crsh
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
operator|.
name|LocalCamelController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|crsh
operator|.
name|cli
operator|.
name|descriptor
operator|.
name|ParameterDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|crsh
operator|.
name|cli
operator|.
name|spi
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|crsh
operator|.
name|cli
operator|.
name|spi
operator|.
name|Completion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_class
DECL|class|CamelCompleter
specifier|public
class|class
name|CamelCompleter
implements|implements
name|Completer
block|{
DECL|field|camelController
specifier|private
name|LocalCamelController
name|camelController
init|=
name|CamelCommandsPlugin
operator|.
name|getInstance
argument_list|()
operator|.
name|getCamelCommandsFacade
argument_list|()
operator|.
name|getCamelController
argument_list|()
decl_stmt|;
DECL|field|log
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelCompleter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|complete (ParameterDescriptor parameterDescriptor, String prefix)
specifier|public
name|Completion
name|complete
parameter_list|(
name|ParameterDescriptor
name|parameterDescriptor
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|Exception
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Completion
operator|.
name|Builder
name|builder
init|=
operator|new
name|Completion
operator|.
name|Builder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameterDescriptor
operator|.
name|getAnnotation
argument_list|()
operator|instanceof
name|ArgumentCamelContext
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|getContextNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameterDescriptor
operator|.
name|getAnnotation
argument_list|()
operator|instanceof
name|ArgumentRouteID
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|getRouteIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
name|builder
operator|.
name|add
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getContextNames ()
specifier|private
name|LinkedList
argument_list|<
name|String
argument_list|>
name|getContextNames
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CamelContext
name|camelContext
range|:
name|camelController
operator|.
name|getLocalCamelContexts
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|method|getRouteIds ()
specifier|private
name|LinkedList
argument_list|<
name|String
argument_list|>
name|getRouteIds
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CamelContext
name|camelContext
range|:
name|camelController
operator|.
name|getLocalCamelContexts
argument_list|()
control|)
block|{
for|for
control|(
name|Route
name|route
range|:
name|camelContext
operator|.
name|getRoutes
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

