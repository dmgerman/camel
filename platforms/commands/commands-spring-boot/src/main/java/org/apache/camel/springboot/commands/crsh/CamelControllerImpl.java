begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.springboot.commands.crsh
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|springboot
operator|.
name|commands
operator|.
name|crsh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
operator|.
name|AbstractLocalCamelController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|ListableBeanFactory
import|;
end_import

begin_class
DECL|class|CamelControllerImpl
specifier|public
class|class
name|CamelControllerImpl
extends|extends
name|AbstractLocalCamelController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelControllerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|beanFactory
specifier|private
name|ListableBeanFactory
name|beanFactory
decl_stmt|;
DECL|method|CamelControllerImpl (ListableBeanFactory factory)
name|CamelControllerImpl
parameter_list|(
name|ListableBeanFactory
name|factory
parameter_list|)
block|{
name|beanFactory
operator|=
name|factory
expr_stmt|;
block|}
DECL|method|getLocalCamelContexts ()
specifier|public
name|List
argument_list|<
name|CamelContext
argument_list|>
name|getLocalCamelContexts
parameter_list|()
block|{
name|List
argument_list|<
name|CamelContext
argument_list|>
name|camelContexts
init|=
operator|new
name|ArrayList
argument_list|<
name|CamelContext
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|camelContexts
operator|.
name|addAll
argument_list|(
name|beanFactory
operator|.
name|getBeansOfType
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot retrieve the list of Camel contexts."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|camelContexts
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CamelContext
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CamelContext
name|o1
parameter_list|,
name|CamelContext
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|camelContexts
return|;
block|}
DECL|method|getCamelContexts ()
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getCamelContexts
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CamelContext
argument_list|>
name|camelContexts
init|=
name|getLocalCamelContexts
argument_list|()
decl_stmt|;
for|for
control|(
name|CamelContext
name|camelContext
range|:
name|camelContexts
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|camelContext
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uptime"
argument_list|,
name|camelContext
operator|.
name|getUptime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|camelContext
operator|.
name|getManagedCamelContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|put
argument_list|(
literal|"exchangesTotal"
argument_list|,
literal|""
operator|+
name|camelContext
operator|.
name|getManagedCamelContext
argument_list|()
operator|.
name|getExchangesTotal
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesInflight"
argument_list|,
literal|""
operator|+
name|camelContext
operator|.
name|getManagedCamelContext
argument_list|()
operator|.
name|getExchangesInflight
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesFailed"
argument_list|,
literal|""
operator|+
name|camelContext
operator|.
name|getManagedCamelContext
argument_list|()
operator|.
name|getExchangesFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|put
argument_list|(
literal|"exchangesTotal"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesInflight"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"exchangesFailed"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

