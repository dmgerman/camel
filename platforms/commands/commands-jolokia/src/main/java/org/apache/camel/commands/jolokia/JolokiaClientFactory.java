begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands.jolokia
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
operator|.
name|jolokia
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|BasicAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|J4pClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|J4pClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|J4pClientBuilderFactory
import|;
end_import

begin_comment
comment|/**  * A factory to create a {@link org.jolokia.client.J4pClient} jolokia client that connects to a remote JVM.  */
end_comment

begin_class
DECL|class|JolokiaClientFactory
specifier|public
specifier|final
class|class
name|JolokiaClientFactory
block|{
DECL|method|JolokiaClientFactory ()
specifier|private
name|JolokiaClientFactory
parameter_list|()
block|{     }
DECL|method|createJolokiaClient (String jolokiaUrl, String username, String password)
specifier|public
specifier|static
name|J4pClient
name|createJolokiaClient
parameter_list|(
name|String
name|jolokiaUrl
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|J4pClientBuilder
name|builder
init|=
name|J4pClientBuilderFactory
operator|.
name|url
argument_list|(
name|jolokiaUrl
argument_list|)
decl_stmt|;
name|boolean
name|auth
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|user
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|auth
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|password
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|auth
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|auth
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|authenticator
argument_list|(
operator|new
name|BasicAuthenticator
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|isNotEmpty (String text)
specifier|private
specifier|static
name|boolean
name|isNotEmpty
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|text
operator|!=
literal|null
operator|&&
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

