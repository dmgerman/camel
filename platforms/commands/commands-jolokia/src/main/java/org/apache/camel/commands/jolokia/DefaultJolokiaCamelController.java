begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.commands.jolokia
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
operator|.
name|jolokia
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|commands
operator|.
name|AbstractCamelController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|J4pClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|exception
operator|.
name|J4pException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pExecRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pExecResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pReadRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pReadResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pVersionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jolokia
operator|.
name|client
operator|.
name|request
operator|.
name|J4pVersionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.commands.CamelController} that uses Jolokia Client to connect to remote JVMs which  * has an Jolokia agent running.  */
end_comment

begin_class
DECL|class|DefaultJolokiaCamelController
specifier|public
class|class
name|DefaultJolokiaCamelController
extends|extends
name|AbstractCamelController
implements|implements
name|JolokiaCamelController
block|{
DECL|field|cache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectName
argument_list|>
name|cache
init|=
operator|new
name|LRUCache
argument_list|<
name|String
argument_list|,
name|ObjectName
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
DECL|field|jolokia
specifier|private
name|J4pClient
name|jolokia
decl_stmt|;
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
DECL|method|lookupCamelContext (String camelContextName)
specifier|private
name|ObjectName
name|lookupCamelContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|on
init|=
name|cache
operator|.
name|get
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|on
operator|==
literal|null
condition|)
block|{
name|ObjectName
name|found
init|=
literal|null
decl_stmt|;
name|J4pSearchResponse
name|sr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pSearchRequest
argument_list|(
literal|"*:type=context,*"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ObjectName
name|name
range|:
name|sr
operator|.
name|getObjectNames
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|name
operator|.
name|getKeyProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|id
operator|=
name|StringHelper
operator|.
name|removeLeadingAndEndingQuotes
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|camelContextName
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|found
operator|=
name|name
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|on
operator|=
name|found
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|camelContextName
argument_list|,
name|on
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|on
return|;
block|}
annotation|@
name|Override
DECL|method|connect (String url, String username, String password)
specifier|public
name|void
name|connect
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|jolokia
operator|=
name|JolokiaClientFactory
operator|.
name|createJolokiaClient
argument_list|(
name|url
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ping ()
specifier|public
name|boolean
name|ping
parameter_list|()
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|J4pVersionResponse
name|vr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vr
operator|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pVersionRequest
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|vr
operator|!=
literal|null
operator|&&
name|vr
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|J4pException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCamelContextInformation (String camelContextName)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCamelContextInformation
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|J4pReadResponse
name|rr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pReadRequest
argument_list|(
name|found
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|rr
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|asKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// store some data using special names as that is what the core-commands expects
name|answer
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|answer
operator|.
name|get
argument_list|(
literal|"camelId"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|answer
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|answer
operator|.
name|get
argument_list|(
literal|"camelVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"suspended"
argument_list|,
literal|"Suspended"
operator|.
name|equals
argument_list|(
name|answer
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TimeUnit
name|unit
init|=
name|TimeUnit
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|answer
operator|.
name|get
argument_list|(
literal|"timeUnit"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
operator|(
name|Long
operator|)
name|answer
operator|.
name|get
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"shutdownTimeout"
argument_list|,
literal|""
operator|+
name|unit
operator|.
name|toSeconds
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContexts ()
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getCamelContexts
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|J4pSearchResponse
name|sr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pSearchRequest
argument_list|(
literal|"*:type=context,*"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|J4pReadRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|J4pReadRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectName
name|on
range|:
name|sr
operator|.
name|getObjectNames
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|J4pReadRequest
argument_list|(
name|on
argument_list|,
literal|"CamelId"
argument_list|,
literal|"State"
argument_list|,
literal|"Uptime"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|J4pReadResponse
argument_list|>
name|lrr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
name|list
argument_list|)
decl_stmt|;
for|for
control|(
name|J4pReadResponse
name|rr
range|:
name|lrr
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"CamelId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uptime"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"Uptime"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContextStatsAsXml (String camelContextName, boolean fullStats, boolean includeProcessors)
specifier|public
name|String
name|getCamelContextStatsAsXml
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|boolean
name|fullStats
parameter_list|,
name|boolean
name|includeProcessors
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|J4pExecResponse
name|er
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"dumpRoutesStatsAsXml(boolean,boolean)"
argument_list|,
name|fullStats
argument_list|,
name|includeProcessors
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|er
operator|!=
literal|null
condition|)
block|{
name|String
name|xml
init|=
name|er
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|xml
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|startContext (String camelContextName)
specifier|public
name|void
name|startContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopContext (String camelContextName)
specifier|public
name|void
name|stopContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"stop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|suspendContext (String camelContextName)
specifier|public
name|void
name|suspendContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"suspend"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resumeContext (String camelContextName)
specifier|public
name|void
name|resumeContext
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"resume"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRoutes (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getRoutes
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRoutes
argument_list|(
name|camelContextName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRoutes (String camelContextName, String filter)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getRoutes
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectName
name|found
init|=
name|camelContextName
operator|!=
literal|null
condition|?
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,*"
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|)
decl_stmt|;
name|J4pSearchResponse
name|sr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pSearchRequest
argument_list|(
name|pattern
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|J4pReadRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|J4pReadRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectName
name|on
range|:
name|sr
operator|.
name|getObjectNames
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|J4pReadRequest
argument_list|(
name|on
argument_list|,
literal|"CamelId"
argument_list|,
literal|"RouteId"
argument_list|,
literal|"State"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|J4pReadResponse
argument_list|>
name|lrr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
name|list
argument_list|)
decl_stmt|;
for|for
control|(
name|J4pReadResponse
name|rr
range|:
name|lrr
control|)
block|{
name|String
name|routeId
init|=
name|rr
operator|.
name|getValue
argument_list|(
literal|"RouteId"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|routeId
operator|.
name|matches
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"camelContextName"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"CamelId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"routeId"
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|camelContexts
init|=
name|this
operator|.
name|getCamelContexts
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|camelContexts
control|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|routes
init|=
name|getRoutes
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|answer
operator|.
name|addAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sort the list
name|Collections
operator|.
name|sort
argument_list|(
name|answer
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o2
parameter_list|)
block|{
comment|// group by camel context first, then by route name
name|String
name|c1
init|=
name|o1
operator|.
name|get
argument_list|(
literal|"camelContextName"
argument_list|)
decl_stmt|;
name|String
name|c2
init|=
name|o2
operator|.
name|get
argument_list|(
literal|"camelContextName"
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
comment|// okay from same camel context, then sort by route id
name|answer
operator|=
name|o1
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|resetRouteStats (String camelContextName)
specifier|public
name|void
name|resetRouteStats
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,name=*"
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|)
decl_stmt|;
name|J4pSearchResponse
name|sr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pSearchRequest
argument_list|(
name|pattern
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|J4pExecRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|J4pExecRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectName
name|on
range|:
name|sr
operator|.
name|getObjectNames
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"reset(boolean)"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jolokia
operator|.
name|execute
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|startRoute (String camelContextName, String routeId)
specifier|public
name|void
name|startRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,name=\"%s\""
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|routeId
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"start()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopRoute (String camelContextName, String routeId)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,name=\"%s\""
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|routeId
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"stop()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|suspendRoute (String camelContextName, String routeId)
specifier|public
name|void
name|suspendRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,name=\"%s\""
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|routeId
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"suspend()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resumeRoute (String camelContextName, String routeId)
specifier|public
name|void
name|resumeRoute
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,name=\"%s\""
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|routeId
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"resume()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRouteModelAsXml (String camelContextName, String routeId)
specifier|public
name|String
name|getRouteModelAsXml
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,name=\"%s\""
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|routeId
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|J4pExecResponse
name|response
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"dumpRouteAsXml()"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|String
name|xml
init|=
name|response
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|xml
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRouteStatsAsXml (String camelContextName, String routeId, boolean fullStats, boolean includeProcessors)
specifier|public
name|String
name|getRouteStatsAsXml
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|routeId
parameter_list|,
name|boolean
name|fullStats
parameter_list|,
name|boolean
name|includeProcessors
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=routes,name=\"%s\""
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|,
name|routeId
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|J4pExecResponse
name|response
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"dumpRouteStatsAsXml(boolean,boolean)"
argument_list|,
name|fullStats
argument_list|,
name|includeProcessors
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|String
name|xml
init|=
name|response
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|xml
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRestModelAsXml (String camelContextName)
specifier|public
name|String
name|getRestModelAsXml
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|J4pExecResponse
name|response
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"dumpRestsAsXml()"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|String
name|xml
init|=
name|response
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|xml
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoints (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getEndpoints
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|J4pSearchResponse
name|sr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pSearchRequest
argument_list|(
literal|"*:type=endpoints,*"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|J4pReadRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|J4pReadRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectName
name|on
range|:
name|sr
operator|.
name|getObjectNames
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|J4pReadRequest
argument_list|(
name|on
argument_list|,
literal|"CamelId"
argument_list|,
literal|"EndpointUri"
argument_list|,
literal|"State"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|J4pReadResponse
argument_list|>
name|lrr
init|=
name|jolokia
operator|.
name|execute
argument_list|(
name|list
argument_list|)
decl_stmt|;
for|for
control|(
name|J4pReadResponse
name|rr
range|:
name|lrr
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"camelContextName"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"CamelId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uri"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"EndpointUri"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|rr
operator|.
name|getValue
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|getRestServices (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getRestServices
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:context=%s,type=services,name=DefaultRestRegistry"
argument_list|,
name|found
operator|.
name|getDomain
argument_list|()
argument_list|,
name|found
operator|.
name|getKeyProperty
argument_list|(
literal|"context"
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|J4pExecResponse
name|response
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|on
argument_list|,
literal|"listRestServices()"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|JSONObject
name|data
init|=
name|response
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|data
operator|.
name|values
argument_list|()
control|)
block|{
name|JSONObject
name|data2
init|=
operator|(
name|JSONObject
operator|)
name|obj
decl_stmt|;
name|JSONObject
name|service
init|=
operator|(
name|JSONObject
operator|)
name|data2
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"basePath"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"basePath"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"baseUrl"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"baseUrl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"consumes"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"consumes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"inType"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"inType"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"method"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"method"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"outType"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"outType"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"produces"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"produces"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"routeId"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"routeId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"uriTemplate"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"uriTemplate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
name|asString
argument_list|(
name|service
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sort the list
name|Collections
operator|.
name|sort
argument_list|(
name|answer
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|service1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|service2
parameter_list|)
block|{
name|String
name|url1
init|=
name|service1
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|String
name|url2
init|=
name|service2
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
return|return
name|url1
operator|.
name|compareTo
argument_list|(
name|url2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|explainEndpointAsJSon (String camelContextName, String uri, boolean allOptions)
specifier|public
name|String
name|explainEndpointAsJSon
parameter_list|(
name|String
name|camelContextName
parameter_list|,
name|String
name|uri
parameter_list|,
name|boolean
name|allOptions
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|J4pExecResponse
name|response
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"explainEndpointJson(java.lang.String,boolean)"
argument_list|,
name|uri
argument_list|,
name|allOptions
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|String
name|json
init|=
name|response
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|json
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|listComponents (String camelContextName)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|listComponents
parameter_list|(
name|String
name|camelContextName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jolokia
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Need to connect to remote jolokia first"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectName
name|found
init|=
name|lookupCamelContext
argument_list|(
name|camelContextName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|J4pExecResponse
name|response
init|=
name|jolokia
operator|.
name|execute
argument_list|(
operator|new
name|J4pExecRequest
argument_list|(
name|found
argument_list|,
literal|"listComponents()"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|JSONObject
name|data
init|=
name|response
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|data
operator|.
name|values
argument_list|()
control|)
block|{
name|JSONObject
name|component
init|=
operator|(
name|JSONObject
operator|)
name|obj
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"artifactId"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"artifactId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"groupId"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"groupId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"label"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|asString
argument_list|(
name|component
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sort the list
name|Collections
operator|.
name|sort
argument_list|(
name|answer
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|component1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|component2
parameter_list|)
block|{
name|String
name|name1
init|=
name|component1
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|name2
init|=
name|component2
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
return|return
name|name1
operator|.
name|compareTo
argument_list|(
name|name2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|asKey (String attributeKey)
specifier|private
specifier|static
name|String
name|asKey
parameter_list|(
name|String
name|attributeKey
parameter_list|)
block|{
name|char
name|ch
init|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|attributeKey
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ch
operator|+
name|attributeKey
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|asString (Object basePath)
specifier|private
specifier|static
name|String
name|asString
parameter_list|(
name|Object
name|basePath
parameter_list|)
block|{
if|if
condition|(
name|basePath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|basePath
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

