begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|grape
operator|.
name|Grape
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|GroovyClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|connector
operator|.
name|CamelConnectorCatalog
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
operator|.
name|ComponentArtifactHelper
operator|.
name|extractComponentJavaType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
operator|.
name|ComponentArtifactHelper
operator|.
name|loadComponentJSonSchema
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
operator|.
name|ComponentArtifactHelper
operator|.
name|loadComponentProperties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
operator|.
name|ConnectorArtifactHelper
operator|.
name|loadJSonSchemas
import|;
end_import

begin_comment
comment|/**  * Default {@link MavenArtifactProvider} which uses Groovy Grape to download the artifact.  */
end_comment

begin_class
DECL|class|DefaultMavenArtifactProvider
specifier|public
class|class
name|DefaultMavenArtifactProvider
implements|implements
name|MavenArtifactProvider
block|{
DECL|field|cacheDirectory
specifier|private
name|String
name|cacheDirectory
decl_stmt|;
DECL|field|log
specifier|private
name|boolean
name|log
decl_stmt|;
comment|/**      * Sets whether to log errors and warnings to System.out.      * By default nothing is logged.      */
DECL|method|setLog (boolean log)
specifier|public
name|void
name|setLog
parameter_list|(
name|boolean
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setCacheDirectory (String directory)
specifier|public
name|void
name|setCacheDirectory
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|this
operator|.
name|cacheDirectory
operator|=
name|directory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addMavenRepository (String name, String url)
specifier|public
name|void
name|addMavenRepository
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|repo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|repo
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|repo
operator|.
name|put
argument_list|(
literal|"root"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|Grape
operator|.
name|addResolver
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addArtifactToCatalog (CamelCatalog camelCatalog, CamelConnectorCatalog camelConnectorCatalog, String groupId, String artifactId, String version)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|addArtifactToCatalog
parameter_list|(
name|CamelCatalog
name|camelCatalog
parameter_list|,
name|CamelConnectorCatalog
name|camelConnectorCatalog
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cacheDirectory
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DEBUG: Using cache directory: "
operator|+
name|cacheDirectory
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"grape.root"
argument_list|,
name|cacheDirectory
argument_list|)
expr_stmt|;
block|}
name|Grape
operator|.
name|setEnableAutoDownload
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|GroovyClassLoader
name|classLoader
init|=
operator|new
name|GroovyClassLoader
argument_list|()
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|param
operator|.
name|put
argument_list|(
literal|"classLoader"
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|param
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
name|param
operator|.
name|put
argument_list|(
literal|"module"
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
name|param
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
comment|// no need to download transitive dependencies as we only need to check the component or connector itself
name|param
operator|.
name|put
argument_list|(
literal|"validate"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|param
operator|.
name|put
argument_list|(
literal|"transitive"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Downloading "
operator|+
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|":"
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
name|Grape
operator|.
name|grab
argument_list|(
name|param
argument_list|)
expr_stmt|;
comment|// the classloader can load content from the downloaded JAR
if|if
condition|(
name|camelCatalog
operator|!=
literal|null
condition|)
block|{
name|scanCamelComponents
argument_list|(
name|camelCatalog
argument_list|,
name|classLoader
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelConnectorCatalog
operator|!=
literal|null
condition|)
block|{
name|scanCamelConnectors
argument_list|(
name|camelConnectorCatalog
argument_list|,
name|classLoader
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: Error during add components from artifact "
operator|+
name|groupId
operator|+
literal|":"
operator|+
name|artifactId
operator|+
literal|":"
operator|+
name|version
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
DECL|method|scanCamelComponents (CamelCatalog camelCatalog, ClassLoader classLoader, Set<String> names)
specifier|protected
name|void
name|scanCamelComponents
parameter_list|(
name|CamelCatalog
name|camelCatalog
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
comment|// is there any custom Camel components in this library?
name|Properties
name|properties
init|=
name|loadComponentProperties
argument_list|(
name|log
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|String
name|components
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"components"
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|part
init|=
name|components
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|part
control|)
block|{
if|if
condition|(
operator|!
name|camelCatalog
operator|.
name|findComponentNames
argument_list|()
operator|.
name|contains
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
comment|// find the class name
name|String
name|javaType
init|=
name|extractComponentJavaType
argument_list|(
name|log
argument_list|,
name|classLoader
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
name|String
name|json
init|=
name|loadComponentJSonSchema
argument_list|(
name|log
argument_list|,
name|classLoader
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding component: "
operator|+
name|scheme
argument_list|)
expr_stmt|;
block|}
name|camelCatalog
operator|.
name|addComponent
argument_list|(
name|scheme
argument_list|,
name|javaType
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|scanCamelConnectors (CamelConnectorCatalog camelConnectorCatalog, ClassLoader classLoader, String groupId, String artifactId, String version, Set<String> names)
specifier|protected
name|void
name|scanCamelConnectors
parameter_list|(
name|CamelConnectorCatalog
name|camelConnectorCatalog
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|String
index|[]
name|json
init|=
name|loadJSonSchemas
argument_list|(
name|log
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|camelConnectorCatalog
operator|.
name|hasConnector
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
condition|)
block|{
try|try
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|tree
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|textValue
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|tree
operator|.
name|get
argument_list|(
literal|"scheme"
argument_list|)
operator|.
name|textValue
argument_list|()
decl_stmt|;
name|String
name|javaType
init|=
name|tree
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
operator|.
name|textValue
argument_list|()
decl_stmt|;
name|String
name|description
init|=
name|tree
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
operator|.
name|textValue
argument_list|()
decl_stmt|;
name|String
name|csb
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|tree
operator|.
name|withArray
argument_list|(
literal|"labels"
argument_list|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|JsonNode
operator|::
name|textValue
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding connector: "
operator|+
name|name
operator|+
literal|" with scheme: "
operator|+
name|scheme
argument_list|)
expr_stmt|;
block|}
name|camelConnectorCatalog
operator|.
name|addConnector
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|name
argument_list|,
name|scheme
argument_list|,
name|javaType
argument_list|,
name|description
argument_list|,
name|csb
argument_list|,
name|json
index|[
literal|0
index|]
argument_list|,
name|json
index|[
literal|1
index|]
argument_list|,
name|json
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: Error parsing Connector JSon due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

