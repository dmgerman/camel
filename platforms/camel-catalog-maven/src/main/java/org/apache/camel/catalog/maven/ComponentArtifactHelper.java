begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CatalogHelper
operator|.
name|loadText
import|;
end_import

begin_comment
comment|/**  * Helper methods for loading content from Camel components that the {@link org.apache.camel.catalog.CamelCatalog} requires.  */
end_comment

begin_class
DECL|class|ComponentArtifactHelper
specifier|public
specifier|final
class|class
name|ComponentArtifactHelper
block|{
DECL|method|ComponentArtifactHelper ()
specifier|private
name|ComponentArtifactHelper
parameter_list|()
block|{     }
DECL|method|loadComponentProperties (boolean log, ClassLoader classLoader)
specifier|public
specifier|static
name|Properties
name|loadComponentProperties
parameter_list|(
name|boolean
name|log
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
comment|// load the component files using the recommended way by a component.properties file
name|InputStream
name|is
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/services/org/apache/camel/component.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: Error loading META-INF/services/org/apache/camel/component.properties file due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|extractComponentJavaType (boolean log, ClassLoader classLoader, String scheme)
specifier|public
specifier|static
name|String
name|extractComponentJavaType
parameter_list|(
name|boolean
name|log
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/services/org/apache/camel/component/"
operator|+
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: Error loading META-INF/services/org/apache/camel/component/"
operator|+
name|scheme
operator|+
literal|" file due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadComponentJSonSchema (boolean log, ClassLoader classLoader, String scheme)
specifier|public
specifier|static
name|String
name|loadComponentJSonSchema
parameter_list|(
name|boolean
name|log
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|String
name|javaType
init|=
name|extractComponentJavaType
argument_list|(
name|log
argument_list|,
name|classLoader
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|javaType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|path
operator|=
name|javaType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|scheme
operator|+
literal|".json"
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: Error loading "
operator|+
name|path
operator|+
literal|" file due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

