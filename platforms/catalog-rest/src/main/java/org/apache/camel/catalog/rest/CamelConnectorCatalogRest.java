begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|Api
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiOperation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|ApiParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|connector
operator|.
name|CamelConnectorCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|connector
operator|.
name|ConnectorDto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|connector
operator|.
name|DefaultCamelConnectorCatalog
import|;
end_import

begin_comment
comment|/**  * A REST based {@link CamelConnectorCatalog} service as a JAX-RS resource class.  */
end_comment

begin_class
annotation|@
name|Api
argument_list|(
name|value
operator|=
literal|"/camel-connector-catalog"
argument_list|,
name|description
operator|=
literal|"Camel Connector Catalog REST API"
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/camel-connector-catalog"
argument_list|)
DECL|class|CamelConnectorCatalogRest
specifier|public
class|class
name|CamelConnectorCatalogRest
block|{
DECL|field|catalog
specifier|private
name|CamelConnectorCatalog
name|catalog
init|=
operator|new
name|DefaultCamelConnectorCatalog
argument_list|()
decl_stmt|;
DECL|method|getCatalog ()
specifier|public
name|CamelConnectorCatalog
name|getCatalog
parameter_list|()
block|{
return|return
name|catalog
return|;
block|}
comment|/**      * To inject an existing {@link CamelConnectorCatalog}      */
DECL|method|setCatalog (CamelConnectorCatalog catalog)
specifier|public
name|void
name|setCatalog
parameter_list|(
name|CamelConnectorCatalog
name|catalog
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/findConnector"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/json"
argument_list|)
annotation|@
name|ApiOperation
argument_list|(
name|value
operator|=
literal|"Find all the connectors from the catalog"
argument_list|)
DECL|method|findConnector (@piParamR) @ueryParamR) boolean latestVersionOnly)
specifier|public
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|findConnector
parameter_list|(
annotation|@
name|ApiParam
argument_list|(
literal|"Whether to include latest version only"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"latestVersionOnly"
argument_list|)
name|boolean
name|latestVersionOnly
parameter_list|)
block|{
return|return
name|catalog
operator|.
name|findConnector
argument_list|(
name|latestVersionOnly
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/findConnector/{filter}"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/json"
argument_list|)
annotation|@
name|ApiOperation
argument_list|(
name|value
operator|=
literal|"Find all the connectors from the catalog"
argument_list|)
DECL|method|findConnector (@piParamR) @athParamR) String filter, @ApiParam(R) @QueryParam(R) boolean latestVersionOnly)
specifier|public
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|findConnector
parameter_list|(
annotation|@
name|ApiParam
argument_list|(
literal|"Filter the connector matching by name, description or labels"
argument_list|)
annotation|@
name|PathParam
argument_list|(
literal|"filter"
argument_list|)
name|String
name|filter
parameter_list|,
annotation|@
name|ApiParam
argument_list|(
literal|"Whether to include latest version only"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
literal|"latestVersionOnly"
argument_list|)
name|boolean
name|latestVersionOnly
parameter_list|)
block|{
return|return
name|catalog
operator|.
name|findConnector
argument_list|(
name|latestVersionOnly
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/connectorJSon/{groupId}/{artifactId}/{version}"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/json"
argument_list|)
annotation|@
name|ApiOperation
argument_list|(
name|value
operator|=
literal|"Returns the camel-connector json file for the given connector with the Maven coordinate"
argument_list|)
DECL|method|connectorJSon (@piParamR) @athParamR) String groupId, @ApiParam(R) @PathParam(R) String artifactId, @ApiParam(R) @PathParam(R) String version)
specifier|public
name|String
name|connectorJSon
parameter_list|(
annotation|@
name|ApiParam
argument_list|(
literal|"Maven groupdId of the connector"
argument_list|)
annotation|@
name|PathParam
argument_list|(
literal|"groupId"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|ApiParam
argument_list|(
literal|"Maven artifactId of the connector"
argument_list|)
annotation|@
name|PathParam
argument_list|(
literal|"artifactId"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|ApiParam
argument_list|(
literal|"Maven version of the connector"
argument_list|)
annotation|@
name|PathParam
argument_list|(
literal|"version"
argument_list|)
name|String
name|version
parameter_list|)
block|{
return|return
name|catalog
operator|.
name|connectorJSon
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/connectorSchemaJSon/{groupId}/{artifactId}/{version}"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/json"
argument_list|)
annotation|@
name|ApiOperation
argument_list|(
name|value
operator|=
literal|"Returns the camel-connector-schema json file for the given connector with the Maven coordinate"
argument_list|)
DECL|method|connectorSchemaJSon (@piParamR) @athParamR) String groupId, @ApiParam(R) @PathParam(R) String artifactId, @ApiParam(R) @PathParam(R) String version)
specifier|public
name|String
name|connectorSchemaJSon
parameter_list|(
annotation|@
name|ApiParam
argument_list|(
literal|"Maven groupdId of the connector"
argument_list|)
annotation|@
name|PathParam
argument_list|(
literal|"groupId"
argument_list|)
name|String
name|groupId
parameter_list|,
annotation|@
name|ApiParam
argument_list|(
literal|"Maven artifactId of the connector"
argument_list|)
annotation|@
name|PathParam
argument_list|(
literal|"artifactId"
argument_list|)
name|String
name|artifactId
parameter_list|,
annotation|@
name|ApiParam
argument_list|(
literal|"Maven version of the connector"
argument_list|)
annotation|@
name|PathParam
argument_list|(
literal|"version"
argument_list|)
name|String
name|version
parameter_list|)
block|{
return|return
name|catalog
operator|.
name|connectorSchemaJSon
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
end_class

end_unit

