begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.karaf.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|karaf
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|BacklogTracerEventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|BacklogTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_comment
comment|/**  * Command to use the<a href="camel.apache.org/backlogtracer">Backlog Tracer</a>.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"camel"
argument_list|,
name|name
operator|=
literal|"backlog-tracer"
argument_list|,
name|description
operator|=
literal|"Access the Backlog tracer"
argument_list|)
DECL|class|BacklogTracerCommand
specifier|public
class|class
name|BacklogTracerCommand
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-a"
argument_list|,
name|aliases
operator|=
block|{
literal|"--action"
block|}
argument_list|,
name|description
operator|=
literal|"The action to perform."
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
DECL|field|action
name|String
name|action
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"context"
argument_list|,
name|description
operator|=
literal|"The name of the Camel context."
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
DECL|field|context
name|String
name|context
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|name
operator|=
literal|"pattern"
argument_list|,
name|description
operator|=
literal|"To trace/dump trace messages only for nodes matching the given pattern (default is all)"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
DECL|field|pattern
name|String
name|pattern
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|2
argument_list|,
name|name
operator|=
literal|"format"
argument_list|,
name|description
operator|=
literal|"Format to use with the dump action (default is xml)"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
DECL|field|format
name|String
name|format
decl_stmt|;
comment|// TODO: need to work on a better command syntax to make it easier to use
DECL|field|camelController
specifier|private
name|CamelController
name|camelController
decl_stmt|;
DECL|method|setCamelController (CamelController camelController)
specifier|public
name|void
name|setCamelController
parameter_list|(
name|CamelController
name|camelController
parameter_list|)
block|{
name|this
operator|.
name|camelController
operator|=
name|camelController
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute ()
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camel
init|=
name|camelController
operator|.
name|getCamelContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|camel
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"CamelContext "
operator|+
name|context
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|BacklogTracer
name|backlogTracer
init|=
name|BacklogTracer
operator|.
name|getBacklogTracer
argument_list|(
name|camel
argument_list|)
decl_stmt|;
if|if
condition|(
name|backlogTracer
operator|==
literal|null
condition|)
block|{
name|backlogTracer
operator|=
operator|(
name|BacklogTracer
operator|)
name|camel
operator|.
name|getDefaultBacklogTracer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"enable"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|backlogTracer
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|backlogTracer
operator|.
name|setTracePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer enabled on "
operator|+
name|camel
operator|.
name|getName
argument_list|()
operator|+
literal|" using pattern: "
operator|+
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer enabled on "
operator|+
name|camel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
literal|"disable"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|backlogTracer
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|backlogTracer
operator|.
name|setTracePattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer disabled on "
operator|+
name|camel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
literal|"summary"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer context:"
operator|+
name|camel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer enabled:"
operator|+
name|backlogTracer
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer pattern:"
operator|+
operator|(
name|backlogTracer
operator|.
name|getTracePattern
argument_list|()
operator|!=
literal|null
condition|?
name|backlogTracer
operator|.
name|getTracePattern
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer backlogSize:"
operator|+
name|backlogTracer
operator|.
name|getBacklogSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer tracerCount:"
operator|+
name|backlogTracer
operator|.
name|getTraceCounter
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
literal|"dump"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
if|if
condition|(
name|format
operator|==
literal|null
operator|||
literal|"xml"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BacklogTracer messages:\n"
operator|+
name|backlogTracer
operator|.
name|dumpAllTracedMessagesAsXml
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
literal|"table"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|MessageDump
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
comment|// assume its a table
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|BacklogTracerEventMessage
operator|.
name|TIMESTAMP_FORMAT
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BacklogTracerEventMessage
argument_list|>
name|events
init|=
name|backlogTracer
operator|.
name|dumpAllTracedMessages
argument_list|()
decl_stmt|;
for|for
control|(
name|BacklogTracerEventMessage
name|event
range|:
name|events
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#"
operator|+
name|event
operator|.
name|getUid
argument_list|()
operator|+
literal|"\tExchangeId: "
operator|+
name|event
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Timestamp: "
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Route: "
operator|+
name|event
operator|.
name|getRouteId
argument_list|()
operator|+
literal|" --> "
operator|+
name|event
operator|.
name|getToNode
argument_list|()
argument_list|)
expr_stmt|;
name|MessageDump
name|msg
init|=
operator|(
name|MessageDump
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|event
operator|.
name|getMessageAsXml
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|breadcrumb
init|=
name|getBreadcrumbId
argument_list|(
name|msg
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|breadcrumb
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Breadcrumb: "
operator|+
name|breadcrumb
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Body: "
operator|+
name|msg
operator|.
name|getBody
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getBreadcrumbId (List<MessageDump.Header> headers)
specifier|private
specifier|static
name|String
name|getBreadcrumbId
parameter_list|(
name|List
argument_list|<
name|MessageDump
operator|.
name|Header
argument_list|>
name|headers
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|==
literal|null
operator|||
name|headers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|MessageDump
operator|.
name|Header
name|header
range|:
name|headers
control|)
block|{
if|if
condition|(
name|header
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|Exchange
operator|.
name|BREADCRUMB_ID
argument_list|)
condition|)
block|{
return|return
name|header
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

