begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.karaf.commands
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|karaf
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ProcessorStatDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|RouteStatDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|StringEscapeUtils
import|;
end_import

begin_comment
comment|/**  * Command to display profile information about a Camel route.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"camel"
argument_list|,
name|name
operator|=
literal|"route-profile"
argument_list|,
name|description
operator|=
literal|"Display profile information about Camel route(s)."
argument_list|)
DECL|class|RouteProfile
specifier|public
class|class
name|RouteProfile
extends|extends
name|AbstractRouteCommand
block|{
DECL|field|HEADER_FORMAT
specifier|protected
specifier|static
specifier|final
name|String
name|HEADER_FORMAT
init|=
literal|"%-30s %10s %12s %12s %12s %12s %12s %12s %12s"
decl_stmt|;
DECL|field|OUTPUT_FORMAT
specifier|protected
specifier|static
specifier|final
name|String
name|OUTPUT_FORMAT
init|=
literal|"[%-28s] [%8d] [%10d] [%10d] [%10d] [%10d] [%10d] [%10d] [%10d]"
decl_stmt|;
DECL|field|previousCamelContextName
specifier|private
name|String
name|previousCamelContextName
decl_stmt|;
annotation|@
name|Override
DECL|method|doExecute ()
specifier|public
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|previousCamelContextName
operator|=
literal|null
expr_stmt|;
comment|// reset state
return|return
name|super
operator|.
name|doExecute
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executeOnRoute (CamelContext camelContext, Route camelRoute)
specifier|public
name|void
name|executeOnRoute
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Route
name|camelRoute
parameter_list|)
throws|throws
name|Exception
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|RouteStatDump
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
comment|// write new header for new camel context
if|if
condition|(
name|previousCamelContextName
operator|==
literal|null
operator|||
operator|!
name|previousCamelContextName
operator|.
name|equals
argument_list|(
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringEscapeUtils
operator|.
name|unescapeJava
argument_list|(
literal|"\u001B[1mProfile\u001B[0m"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringEscapeUtils
operator|.
name|unescapeJava
argument_list|(
literal|"\tCamel Context: "
operator|+
name|camelRoute
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|HEADER_FORMAT
argument_list|,
literal|"Id"
argument_list|,
literal|"Count"
argument_list|,
literal|"Last (ms)"
argument_list|,
literal|"Delta (ms)"
argument_list|,
literal|"Mean (ms)"
argument_list|,
literal|"Min (ms)"
argument_list|,
literal|"Max (ms)"
argument_list|,
literal|"Total (ms)"
argument_list|,
literal|"Self (ms)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//        System.out.println(StringEscapeUtils.unescapeJava("\u001B[1m\u001B[33mCamel Route " + camelRoute.getId() + "\u001B[0m"));
comment|//        System.out.println(StringEscapeUtils.unescapeJava("\tEndpoint uri: " + URISupport.sanitizeUri(camelRoute.getEndpoint().getEndpointUri())));
name|ManagementAgent
name|agent
init|=
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|agent
operator|!=
literal|null
condition|)
block|{
name|MBeanServer
name|mBeanServer
init|=
name|agent
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|mBeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|agent
operator|.
name|getMBeanObjectDomainName
argument_list|()
operator|+
literal|":type=routes,name=\""
operator|+
name|camelRoute
operator|.
name|getId
argument_list|()
operator|+
literal|"\",*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectName
name|routeMBean
range|:
name|set
control|)
block|{
comment|// the route must be part of the camel context
name|String
name|camelId
init|=
operator|(
name|String
operator|)
name|mBeanServer
operator|.
name|getAttribute
argument_list|(
name|routeMBean
argument_list|,
literal|"CamelId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelId
operator|!=
literal|null
operator|&&
name|camelId
operator|.
name|equals
argument_list|(
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|xml
init|=
operator|(
name|String
operator|)
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|routeMBean
argument_list|,
literal|"dumpRouteStatsAsXml"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|,
literal|"boolean"
block|}
argument_list|)
decl_stmt|;
name|RouteStatDump
name|route
init|=
operator|(
name|RouteStatDump
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|route
operator|.
name|getExchangesCompleted
argument_list|()
operator|+
name|route
operator|.
name|getExchangesFailed
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|OUTPUT_FORMAT
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|count
argument_list|,
name|route
operator|.
name|getLastProcessingTime
argument_list|()
argument_list|,
name|route
operator|.
name|getDeltaProcessingTime
argument_list|()
argument_list|,
name|route
operator|.
name|getMeanProcessingTime
argument_list|()
argument_list|,
name|route
operator|.
name|getMinProcessingTime
argument_list|()
argument_list|,
name|route
operator|.
name|getMaxProcessingTime
argument_list|()
argument_list|,
name|route
operator|.
name|getTotalProcessingTime
argument_list|()
argument_list|,
name|route
operator|.
name|getSelfProcessingTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessorStatDump
name|ps
range|:
name|route
operator|.
name|getProcessorStats
argument_list|()
control|)
block|{
comment|// the self time is the total time of the processor itself
name|long
name|selfTime
init|=
name|ps
operator|.
name|getTotalProcessingTime
argument_list|()
decl_stmt|;
name|count
operator|=
name|ps
operator|.
name|getExchangesCompleted
argument_list|()
operator|+
name|ps
operator|.
name|getExchangesFailed
argument_list|()
expr_stmt|;
comment|// indent route id with 2 spaces
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|OUTPUT_FORMAT
argument_list|,
literal|"  "
operator|+
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|count
argument_list|,
name|ps
operator|.
name|getLastProcessingTime
argument_list|()
argument_list|,
name|ps
operator|.
name|getDeltaProcessingTime
argument_list|()
argument_list|,
name|ps
operator|.
name|getMeanProcessingTime
argument_list|()
argument_list|,
name|ps
operator|.
name|getMinProcessingTime
argument_list|()
argument_list|,
name|ps
operator|.
name|getMaxProcessingTime
argument_list|()
argument_list|,
name|ps
operator|.
name|getAccumulatedProcessingTime
argument_list|()
argument_list|,
name|selfTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringEscapeUtils
operator|.
name|unescapeJava
argument_list|(
literal|"\u001B[31mJMX Agent of Camel is not reachable. Maybe it has been disabled on the Camel context"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringEscapeUtils
operator|.
name|unescapeJava
argument_list|(
literal|"In consequence, profile are not available.\u001B[0m"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we want to group routes from the same context in the same table
name|previousCamelContextName
operator|=
name|camelContext
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

