begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog.karaf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|karaf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|DefaultRuntimeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|JSonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|RuntimeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
operator|.
name|ELEMENT_NODE
import|;
end_import

begin_class
DECL|class|KarafRuntimeProvider
specifier|public
class|class
name|KarafRuntimeProvider
implements|implements
name|RuntimeProvider
block|{
DECL|field|FEATURES
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES
init|=
literal|"org/apache/camel/catalog/karaf/features.xml"
decl_stmt|;
DECL|field|camelCatalog
specifier|private
name|CamelCatalog
name|camelCatalog
decl_stmt|;
DECL|field|defaultProvider
specifier|private
name|DefaultRuntimeProvider
name|defaultProvider
init|=
operator|new
name|DefaultRuntimeProvider
argument_list|()
decl_stmt|;
DECL|field|rowsCache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|rowsCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getCamelCatalog ()
specifier|public
name|CamelCatalog
name|getCamelCatalog
parameter_list|()
block|{
return|return
name|camelCatalog
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelCatalog (CamelCatalog camelCatalog)
specifier|public
name|void
name|setCamelCatalog
parameter_list|(
name|CamelCatalog
name|camelCatalog
parameter_list|)
block|{
name|this
operator|.
name|camelCatalog
operator|=
name|camelCatalog
expr_stmt|;
name|this
operator|.
name|defaultProvider
operator|.
name|setCamelCatalog
argument_list|(
name|camelCatalog
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProviderName ()
specifier|public
name|String
name|getProviderName
parameter_list|()
block|{
return|return
literal|"karaf"
return|;
block|}
annotation|@
name|Override
DECL|method|findComponentNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findComponentNames
parameter_list|()
block|{
comment|// find the component name from all the default components
name|List
argument_list|<
name|String
argument_list|>
name|allNames
init|=
name|defaultProvider
operator|.
name|findComponentNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// filter out to only include what's in the karaf features file
name|InputStream
name|is
init|=
name|camelCatalog
operator|.
name|getVersionManager
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|FEATURES
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringElementContentWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setXIncludeAware
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|children
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"features"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|ELEMENT_NODE
condition|)
block|{
name|NodeList
name|children2
init|=
name|child
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children2
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|child2
init|=
name|children2
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"feature"
operator|.
name|equals
argument_list|(
name|child2
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
comment|// the name attribute is the maven artifact id of the component
name|String
name|artifactId
init|=
name|child2
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifactId
operator|!=
literal|null
operator|&&
name|artifactId
operator|.
name|startsWith
argument_list|(
literal|"camel-"
argument_list|)
condition|)
block|{
comment|// find the component name based on the artifact id
name|String
name|componentName
init|=
name|componentNameFromArtifactId
argument_list|(
name|artifactId
argument_list|,
name|allNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentName
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total components "
operator|+
name|allNames
operator|.
name|size
argument_list|()
operator|+
literal|" karaf supports "
operator|+
name|answer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// clear temporary cache
name|rowsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|findDataFormatNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findDataFormatNames
parameter_list|()
block|{
comment|// karaf support all data formats
return|return
name|defaultProvider
operator|.
name|findDataFormatNames
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|findLanguageNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findLanguageNames
parameter_list|()
block|{
comment|// karaf support all languages
return|return
name|defaultProvider
operator|.
name|findLanguageNames
argument_list|()
return|;
block|}
DECL|method|componentNameFromArtifactId (String artifactId, List<String> allNames)
specifier|private
name|String
name|componentNameFromArtifactId
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|allNames
parameter_list|)
block|{
comment|// try a quick shortcut that is faster
name|String
name|quick
init|=
name|artifactId
operator|.
name|startsWith
argument_list|(
literal|"camel-"
argument_list|)
condition|?
name|artifactId
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|quick
operator|!=
literal|null
condition|)
block|{
name|String
name|json
init|=
name|camelCatalog
operator|.
name|componentJSonSchema
argument_list|(
name|quick
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|rowsCache
operator|.
name|get
argument_list|(
name|quick
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
condition|)
block|{
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rowsCache
operator|.
name|put
argument_list|(
name|quick
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
name|String
name|componentArtifactId
init|=
name|getArtifactId
argument_list|(
name|rows
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactId
operator|.
name|equals
argument_list|(
name|componentArtifactId
argument_list|)
condition|)
block|{
return|return
name|quick
return|;
block|}
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|allNames
control|)
block|{
name|String
name|json
init|=
name|camelCatalog
operator|.
name|componentJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|rowsCache
operator|.
name|get
argument_list|(
name|quick
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
condition|)
block|{
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rowsCache
operator|.
name|put
argument_list|(
name|quick
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
name|String
name|componentArtifactId
init|=
name|getArtifactId
argument_list|(
name|rows
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactId
operator|.
name|equals
argument_list|(
name|componentArtifactId
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getArtifactId (List<Map<String, String>> rows)
specifier|public
specifier|static
name|String
name|getArtifactId
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
parameter_list|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|get
argument_list|(
literal|"artifactId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|row
operator|.
name|get
argument_list|(
literal|"artifactId"
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

