begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog.nexus
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|nexus
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A in-memory based {@link ConnectorDataStore}.  */
end_comment

begin_class
DECL|class|MemoryConnectorDataStore
specifier|public
class|class
name|MemoryConnectorDataStore
implements|implements
name|ConnectorDataStore
block|{
DECL|field|connectors
specifier|private
specifier|final
name|Set
argument_list|<
name|ConnectorDto
argument_list|>
name|connectors
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|connectors
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|addConnector (ConnectorDto connector)
specifier|public
name|void
name|addConnector
parameter_list|(
name|ConnectorDto
name|connector
parameter_list|)
block|{
name|connectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|searchConnectors (String filter, boolean latestVersionOnly)
specifier|public
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|searchConnectors
parameter_list|(
name|String
name|filter
parameter_list|,
name|boolean
name|latestVersionOnly
parameter_list|)
block|{
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// return all of them
name|answer
operator|.
name|addAll
argument_list|(
name|connectors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// search ignore case
name|filter
operator|=
name|filter
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
for|for
control|(
name|ConnectorDto
name|dto
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|dto
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getDescription
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getNexusArtifactDto
argument_list|()
operator|.
name|getGroupId
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getNexusArtifactDto
argument_list|()
operator|.
name|getArtifactId
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|.
name|getNexusArtifactDto
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|labels
init|=
name|dto
operator|.
name|getLabels
argument_list|()
decl_stmt|;
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|labels
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|lab
range|:
name|arr
control|)
block|{
name|lab
operator|=
name|lab
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
name|lab
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|dto
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// filter only latest version
if|if
condition|(
name|latestVersionOnly
operator|&&
name|answer
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// sort first
name|answer
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|ConnectorDto
operator|::
name|getMavenGav
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep only latest in each group
name|List
argument_list|<
name|ConnectorDto
argument_list|>
name|unique
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ConnectorDto
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ConnectorDto
name|dto
range|:
name|answer
control|)
block|{
if|if
condition|(
name|prev
operator|==
literal|null
operator|||
operator|(
name|prev
operator|.
name|getNexusArtifactDto
argument_list|()
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|getNexusArtifactDto
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|prev
operator|.
name|getNexusArtifactDto
argument_list|()
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|getNexusArtifactDto
argument_list|()
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|prev
operator|=
name|dto
expr_stmt|;
block|}
else|else
block|{
name|unique
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|=
name|dto
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
comment|// special for last element
name|unique
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
name|answer
operator|=
name|unique
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

