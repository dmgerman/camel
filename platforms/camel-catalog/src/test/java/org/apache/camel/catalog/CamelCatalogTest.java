begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CatalogHelper
operator|.
name|loadText
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|CamelCatalogTest
specifier|public
class|class
name|CamelCatalogTest
block|{
DECL|field|catalog
specifier|static
name|CamelCatalog
name|catalog
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelCatalogTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createCamelCatalog ()
specifier|public
specifier|static
name|void
name|createCamelCatalog
parameter_list|()
block|{
name|catalog
operator|=
operator|new
name|DefaultCamelCatalog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetVersion ()
specifier|public
name|void
name|testGetVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|version
init|=
name|catalog
operator|.
name|getCatalogVersion
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|String
name|loaded
init|=
name|catalog
operator|.
name|getLoadedVersion
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|version
argument_list|,
name|loaded
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadVersion ()
specifier|public
name|void
name|testLoadVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|result
init|=
name|catalog
operator|.
name|loadVersion
argument_list|(
literal|"1.0"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|String
name|version
init|=
name|catalog
operator|.
name|getCatalogVersion
argument_list|()
decl_stmt|;
name|result
operator|=
name|catalog
operator|.
name|loadVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindLanguageNames ()
specifier|public
name|void
name|testFindLanguageNames
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|catalog
operator|.
name|findLanguageNames
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"spel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"xpath"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"method"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindOtherNames ()
specifier|public
name|void
name|testFindOtherNames
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|catalog
operator|.
name|findOtherNames
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"hystrix"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"leveldb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"kura"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"swagger-java"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"test-spring"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"http-common"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"core-osgi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"ftp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"jetty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindNames ()
specifier|public
name|void
name|testFindNames
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|catalog
operator|.
name|findComponentNames
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"log"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"docker"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"jms"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|=
name|catalog
operator|.
name|findDataFormatNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"bindy-csv"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"hl7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"jaxb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"syslog"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|=
name|catalog
operator|.
name|findLanguageNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"groovy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"mvel"
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|=
name|catalog
operator|.
name|findModelNames
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"from"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"to"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"recipientList"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"aggregate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"split"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"loadBalance"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJsonSchema ()
specifier|public
name|void
name|testJsonSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schema
init|=
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
literal|"docker"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|catalog
operator|.
name|dataFormatJSonSchema
argument_list|(
literal|"hl7"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|catalog
operator|.
name|languageJSonSchema
argument_list|(
literal|"groovy"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"aggregate"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|catalog
operator|.
name|otherJSonSchema
argument_list|(
literal|"swagger-java"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
comment|// lets make it possible to find bean/method using both names
name|schema
operator|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"bean"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXmlSchema ()
specifier|public
name|void
name|testXmlSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schema
init|=
name|catalog
operator|.
name|blueprintSchemaAsXml
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|catalog
operator|.
name|springSchemaAsXml
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArchetypeCatalog ()
specifier|public
name|void
name|testArchetypeCatalog
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schema
init|=
name|catalog
operator|.
name|archetypeCatalogAsXml
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriMapFile ()
specifier|public
name|void
name|testAsEndpointUriMapFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"directoryName"
argument_list|,
literal|"src/data/inbox"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"noop"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"delay"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"file"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file:src/data/inbox?delay=5000&noop=true"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|String
name|uri2
init|=
name|catalog
operator|.
name|asEndpointUriXml
argument_list|(
literal|"file"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file:src/data/inbox?delay=5000&amp;noop=true"
argument_list|,
name|uri2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriMapFtp ()
specifier|public
name|void
name|testAsEndpointUriMapFtp
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
literal|"someserver"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"port"
argument_list|,
literal|"21"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"directoryName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"connectTimeout"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"ftp"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ftp:someserver:21/foo?connectTimeout=5000"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|String
name|uri2
init|=
name|catalog
operator|.
name|asEndpointUriXml
argument_list|(
literal|"ftp"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ftp:someserver:21/foo?connectTimeout=5000"
argument_list|,
name|uri2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriMapJms ()
specifier|public
name|void
name|testAsEndpointUriMapJms
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"destinationType"
argument_list|,
literal|"queue"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"destinationName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"jms"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jms:queue:foo"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriNetty4http ()
specifier|public
name|void
name|testAsEndpointUriNetty4http
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// use http protocol
name|map
operator|.
name|put
argument_list|(
literal|"protocol"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"port"
argument_list|,
literal|"8080"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"disconnect"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"netty4-http"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"netty4-http:http:localhost:8080/foo/bar?disconnect=true"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// lets switch protocol
name|map
operator|.
name|put
argument_list|(
literal|"protocol"
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"netty4-http"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"netty4-http:https:localhost:8080/foo/bar?disconnect=true"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// lets set a query parameter in the path
name|map
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
literal|"foo/bar?verbose=true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"disconnect"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"netty4-http"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"netty4-http:https:localhost:8080/foo/bar?verbose=true&disconnect=true"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriTimer ()
specifier|public
name|void
name|testAsEndpointUriTimer
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"timerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"period"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"timer"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"timer:foo?period=5000"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointDefaultValue ()
specifier|public
name|void
name|testAsEndpointDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"destinationName"
argument_list|,
literal|"cheese"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"maxMessagesPerTask"
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"jms"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jms:cheese?maxMessagesPerTask=-1"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriPropertiesPlaceholders ()
specifier|public
name|void
name|testAsEndpointUriPropertiesPlaceholders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"timerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"period"
argument_list|,
literal|"{{howoften}}"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"repeatCount"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"timer"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"timer:foo?period=%7B%7Bhowoften%7D%7D&repeatCount=5"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|uri
operator|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"timer"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"timer:foo?period={{howoften}}&repeatCount=5"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriBeanLookup ()
specifier|public
name|void
name|testAsEndpointUriBeanLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"resourceUri"
argument_list|,
literal|"foo.xslt"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"converter"
argument_list|,
literal|"#myConverter"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"xslt"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"xslt:foo.xslt?converter=%23myConverter"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|uri
operator|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"xslt"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xslt:foo.xslt?converter=#myConverter"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriMapJmsRequiredOnly ()
specifier|public
name|void
name|testAsEndpointUriMapJmsRequiredOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"destinationName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"jms"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jms:foo"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"deliveryPersistent"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"allowNullBody"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"jms"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jms:foo?allowNullBody=true&deliveryPersistent=false"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|String
name|uri2
init|=
name|catalog
operator|.
name|asEndpointUriXml
argument_list|(
literal|"jms"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jms:foo?allowNullBody=true&amp;deliveryPersistent=false"
argument_list|,
name|uri2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriRestUriTemplate ()
specifier|public
name|void
name|testAsEndpointUriRestUriTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"method"
argument_list|,
literal|"get"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
literal|"api"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"uriTemplate"
argument_list|,
literal|"user/{id}"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"rest"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rest:get:api:user/{id}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointProperties ()
specifier|public
name|void
name|testEndpointProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"ftp:someserver:21/foo?connectTimeout=5000"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"someserver"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"21"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"directoryName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5000"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"connectTimeout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointLenientProperties ()
specifier|public
name|void
name|testEndpointLenientProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointLenientProperties
argument_list|(
literal|"http:myserver?throwExceptionOnFailure=false&foo=123&bar=456"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"456"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointLenientProperties
argument_list|(
literal|"http:myserver?throwExceptionOnFailure=false&foo=123&bar=456&httpClient.timeout=5000&httpClient.soTimeout=10000"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"456"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointLenientProperties
argument_list|(
literal|"http:myserver?throwExceptionOnFailure=false&foo=123&bar=456&httpClient.timeout=5000&httpClient.soTimeout=10000&myPrefix.baz=beer"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"456"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beer"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"myPrefix.baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesPlaceholders ()
specifier|public
name|void
name|testEndpointPropertiesPlaceholders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"timer:foo?period={{howoften}}&repeatCount=5"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"timerName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{{howoften}}"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"period"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"repeatCount"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesNetty4Http ()
specifier|public
name|void
name|testEndpointPropertiesNetty4Http
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"netty4-http:http:localhost:8080/foo/bar?disconnect=true&keepAlive=false"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"protocol"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8080"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"disconnect"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"keepAlive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesNetty4HttpDefaultPort ()
specifier|public
name|void
name|testEndpointPropertiesNetty4HttpDefaultPort
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"netty4-http:http:localhost/foo/bar?disconnect=true&keepAlive=false"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"protocol"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"disconnect"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"keepAlive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesNetty4HttpPlaceholder ()
specifier|public
name|void
name|testEndpointPropertiesNetty4HttpPlaceholder
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"netty4-http:http:{{myhost}}:{{myport}}/foo/bar?disconnect=true&keepAlive=false"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"protocol"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{{myhost}}"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{{myport}}"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"disconnect"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"keepAlive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesNetty4HttpWithDoubleSlash ()
specifier|public
name|void
name|testEndpointPropertiesNetty4HttpWithDoubleSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"netty4-http:http://localhost:8080/foo/bar?disconnect=true&keepAlive=false"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"protocol"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8080"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"disconnect"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"keepAlive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriLog ()
specifier|public
name|void
name|testAsEndpointUriLog
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerLevel"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"multiline"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showAll"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showBody"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showBodyType"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showExchangePattern"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"style"
argument_list|,
literal|"Tab"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log:foo?loggerLevel=WARN&multiline=true&showAll=true&style=Tab"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"log"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriLogShort ()
specifier|public
name|void
name|testAsEndpointUriLogShort
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerLevel"
argument_list|,
literal|"DEBUG"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log:foo?loggerLevel=DEBUG"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"log"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriWithplaceholder ()
specifier|public
name|void
name|testAsEndpointUriWithplaceholder
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"query"
argument_list|,
literal|"{{insert}}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sql:{{insert}}"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"sql"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"useMessageBodyForSql"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sql:{{insert}}?useMessageBodyForSql=true"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"sql"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"parametersCount"
argument_list|,
literal|"{{count}}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sql:{{insert}}?parametersCount={{count}}&useMessageBodyForSql=true"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"sql"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriStream ()
specifier|public
name|void
name|testAsEndpointUriStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"kind"
argument_list|,
literal|"url"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"http://camel.apache.org"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stream:url?url=http://camel.apache.org"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"stream"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesJms ()
specifier|public
name|void
name|testEndpointPropertiesJms
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"jms:queue:foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"destinationType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"destinationName"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"jms:foo"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"destinationName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesJmsWithDotInName ()
specifier|public
name|void
name|testEndpointPropertiesJmsWithDotInName
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"jms:browse.me"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"browse.me"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"destinationName"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"jms:browse.me"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"browse.me"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"destinationName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesJmsRequired ()
specifier|public
name|void
name|testEndpointPropertiesJmsRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"jms:foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"destinationName"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"jms:foo?allowNullBody=true&deliveryPersistent=false"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"destinationName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"allowNullBody"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"deliveryPersistent"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesAtom ()
specifier|public
name|void
name|testEndpointPropertiesAtom
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"atom:file:src/test/data/feed.atom"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file:src/test/data/feed.atom"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"feedUri"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"atom:file:src/test/data/feed.atom?splitEntries=false&delay=5000"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file:src/test/data/feed.atom"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"feedUri"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"splitEntries"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5000"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"delay"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesMultiValued ()
specifier|public
name|void
name|testEndpointPropertiesMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"http:helloworld?httpClientOptions=httpClient.foo=123&httpClient.bar=456"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"helloworld"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"httpUri"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"httpClient.foo=123&httpClient.bar=456"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"httpClientOptions"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesSshWithUserInfo ()
specifier|public
name|void
name|testEndpointPropertiesSshWithUserInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"ssh:localhost:8101?username=scott&password=tiger"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8101"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scott"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"username"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tiger"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"ssh://scott:tiger@localhost:8101"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8101"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scott"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"username"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tiger"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateActiveMQProperties ()
specifier|public
name|void
name|validateActiveMQProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add activemq as known component
name|catalog
operator|.
name|addComponent
argument_list|(
literal|"activemq"
argument_list|,
literal|"org.apache.activemq.camel.component.ActiveMQComponent"
argument_list|)
expr_stmt|;
comment|// activemq
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"activemq:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"activemq:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"activemq:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"activemq:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// connection factory
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"activemq:Consumer.Baz.VirtualTopic.FooRequest?connectionFactory=#pooledJmsConnectionFactory"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateJmsProperties ()
specifier|public
name|void
name|validateJmsProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// jms
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:temp-queue:cheese?jmsMessageType=Bytes"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateProperties ()
specifier|public
name|void
name|validateProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// valid
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"log:mylog"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// unknown
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"log:mylog?level=WARN&foo=bar"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getUnknown
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// enum
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:unknown:myqueue"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unknown"
argument_list|,
name|result
operator|.
name|getInvalidEnum
argument_list|()
operator|.
name|get
argument_list|(
literal|"destinationType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue"
argument_list|,
name|result
operator|.
name|getDefaultValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"destinationType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// reference okay
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:queue:myqueue?jmsKeyFormatStrategy=#key"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// reference
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:queue:myqueue?jmsKeyFormatStrategy=foo"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getInvalidEnum
argument_list|()
operator|.
name|get
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// okay
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"yammer:MESSAGES?accessToken=aaa&consumerKey=bbb&consumerSecret=ccc&useJson=true&initialDelay=500"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// required / boolean / integer
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"yammer:MESSAGES?accessToken=aaa&consumerKey=&useJson=no&initialDelay=five"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getRequired
argument_list|()
operator|.
name|contains
argument_list|(
literal|"consumerKey"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getRequired
argument_list|()
operator|.
name|contains
argument_list|(
literal|"consumerSecret"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no"
argument_list|,
name|result
operator|.
name|getInvalidBoolean
argument_list|()
operator|.
name|get
argument_list|(
literal|"useJson"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"five"
argument_list|,
name|result
operator|.
name|getInvalidInteger
argument_list|()
operator|.
name|get
argument_list|(
literal|"initialDelay"
argument_list|)
argument_list|)
expr_stmt|;
comment|// okay
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"mqtt:myqtt?reconnectBackOffMultiplier=2.5"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// number
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"mqtt:myqtt?reconnectBackOffMultiplier=five"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"five"
argument_list|,
name|result
operator|.
name|getInvalidNumber
argument_list|()
operator|.
name|get
argument_list|(
literal|"reconnectBackOffMultiplier"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// unknown component
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"foo:bar?me=you"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getUnknownComponent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// invalid boolean but default value
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"log:output?showAll=ggg"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ggg"
argument_list|,
name|result
operator|.
name|getInvalidBoolean
argument_list|()
operator|.
name|get
argument_list|(
literal|"showAll"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// dataset
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataset:foo?minRate=50"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// time pattern
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"timer://foo?fixedRate=true&delay=0&period=2s"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// reference lookup
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"timer://foo?fixedRate=#fixed&delay=#myDelay"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// optional consumer. prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?consumer.delay=5000&consumer.greedy=true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// optional without consumer. prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?delay=5000&greedy=true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// mixed optional without consumer. prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?delay=5000&consumer.greedy=true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?delay=5000&scheduler.foo=123&scheduler.bar=456"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// stub
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"stub:foo?me=123&you=456"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient on
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataformat:string:marshal?foo=bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient off
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataformat:string:marshal?foo=bar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getUnknown
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// lenient off consumer only
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"netty4-http:http://myserver?foo=bar"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// consumer should still fail because we cannot use lenient option in consumer mode
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getUnknown
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getLenient
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient off producer only
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"netty4-http:http://myserver?foo=bar"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// foo is the lenient option
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getLenient
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getLenient
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient on consumer only
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"netty4-http:http://myserver?foo=bar"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// consumer should still fail because we cannot use lenient option in consumer mode
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getUnknown
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getLenient
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient on producer only
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"netty4-http:http://myserver?foo=bar"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getUnknown
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getLenient
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient on rss consumer only
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"rss:file:src/test/data/rss20.xml?splitEntries=true&sortEntries=true&consumer.delay=50&foo=bar"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getLenient
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// data format
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataformat:string:marshal?charset=utf-8"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 slash after component name
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"atmos://put?remotePath=/dummy.txt"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// userinfo in authority with username and password
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"ssh://karaf:karaf@localhost:8101"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// userinfo in authority without password
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"ssh://scott@localhost:8101?certResource=classpath:test_rsa&useFixedDelay=true&delay=5000&pollCommand=features:list%0A"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// userinfo with both user and password and placeholder
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"ssh://smx:smx@localhost:8181?timeout=3000"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// and should also work when port is using a placeholder
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"ssh://smx:smx@localhost:{{port}}?timeout=3000"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// placeholder for a bunch of optional options
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"aws-swf://activity?{{options}}"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// incapable to parse
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"{{getFtpUrl}}?recursive=true"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getIncapable
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validatePropertiesSummary ()
specifier|public
name|void
name|validatePropertiesSummary
parameter_list|()
throws|throws
name|Exception
block|{
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"yammer:MESSAGES?blah=yada&accessToken=aaa&consumerKey=&useJson=no&initialDelay=five&pollStrategy=myStrategy"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|reason
init|=
name|result
operator|.
name|summaryErrorMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:unknown:myqueue"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|reason
operator|=
name|result
operator|.
name|summaryErrorMessage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateTimePattern ()
specifier|public
name|void
name|validateTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"10000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5sec"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5secs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"3m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"3min"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"3minutes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5m15s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"1h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"1hour"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"2hours"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"bla"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"2year"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"60darn"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointComponentName ()
specifier|public
name|void
name|testEndpointComponentName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|catalog
operator|.
name|endpointComponentName
argument_list|(
literal|"jms:queue:foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jms"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListComponentsAsJson ()
specifier|public
name|void
name|testListComponentsAsJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|listComponentsAsJson
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListDataFormatsAsJson ()
specifier|public
name|void
name|testListDataFormatsAsJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|listDataFormatsAsJson
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListLanguagesAsJson ()
specifier|public
name|void
name|testListLanguagesAsJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|listLanguagesAsJson
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListModelsAsJson ()
specifier|public
name|void
name|testListModelsAsJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|listModelsAsJson
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListOthersAsJson ()
specifier|public
name|void
name|testListOthersAsJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|listOthersAsJson
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSummaryAsJson ()
specifier|public
name|void
name|testSummaryAsJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|summaryAsJson
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddComponent ()
specifier|public
name|void
name|testAddComponent
parameter_list|()
throws|throws
name|Exception
block|{
name|catalog
operator|.
name|addComponent
argument_list|(
literal|"dummy"
argument_list|,
literal|"org.foo.camel.DummyComponent"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|findComponentNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
literal|"dummy"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddComponentWithJson ()
specifier|public
name|void
name|testAddComponentWithJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
literal|"src/test/resources/org/foo/camel/dummy.json"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|addComponent
argument_list|(
literal|"dummy"
argument_list|,
literal|"org.foo.camel.DummyComponent"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|findComponentNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|=
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddComponentWithPrettyJson ()
specifier|public
name|void
name|testAddComponentWithPrettyJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
literal|"src/test/resources/org/foo/camel/dummy-pretty.json"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|addComponent
argument_list|(
literal|"dummy"
argument_list|,
literal|"org.foo.camel.DummyComponent"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|findComponentNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|=
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddDataFormat ()
specifier|public
name|void
name|testAddDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|catalog
operator|.
name|addDataFormat
argument_list|(
literal|"dummyformat"
argument_list|,
literal|"org.foo.camel.DummyDataFormat"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|findDataFormatNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dummyformat"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|catalog
operator|.
name|dataFormatJSonSchema
argument_list|(
literal|"dummyformat"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddDataFormatWithJSon ()
specifier|public
name|void
name|testAddDataFormatWithJSon
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
literal|"src/test/resources/org/foo/camel/dummyformat.json"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|addDataFormat
argument_list|(
literal|"dummyformat"
argument_list|,
literal|"org.foo.camel.DummyDataFormat"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|findDataFormatNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dummyformat"
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|=
name|catalog
operator|.
name|dataFormatJSonSchema
argument_list|(
literal|"dummyformat"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddDataFormatWithPrettyJSon ()
specifier|public
name|void
name|testAddDataFormatWithPrettyJSon
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
literal|"src/test/resources/org/foo/camel/dummyformat-pretty.json"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|addDataFormat
argument_list|(
literal|"dummyformat"
argument_list|,
literal|"org.foo.camel.DummyDataFormat"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|findDataFormatNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dummyformat"
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|=
name|catalog
operator|.
name|dataFormatJSonSchema
argument_list|(
literal|"dummyformat"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleExpression ()
specifier|public
name|void
name|testSimpleExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"expected symbol functionEnd but was eol at location 5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected symbol functionEnd but was eol"
argument_list|,
name|result
operator|.
name|getShortError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${bodyxxx}"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${bodyxxx}"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Valid syntax: ${body.OGNL} was: bodyxxx"
argument_list|,
name|result
operator|.
name|getShortError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimplePredicate ()
specifier|public
name|void
name|testSimplePredicate
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body} == 'abc'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body} == 'abc'"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}> ${header.size"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}> ${header.size"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"expected symbol functionEnd but was eol at location 22"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected symbol functionEnd but was eol"
argument_list|,
name|result
operator|.
name|getShortError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPredicatePlaceholder ()
specifier|public
name|void
name|testPredicatePlaceholder
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body} contains '{{danger}}'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body} contains '{{danger}}'"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${bdy} contains '{{danger}}'"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${bdy} contains '{{danger}}'"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unknown function: bdy at location 0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|contains
argument_list|(
literal|"'{{danger}}'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown function: bdy"
argument_list|,
name|result
operator|.
name|getShortError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateLanguage ()
specifier|public
name|void
name|testValidateLanguage
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"header"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}> 10"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}> 10"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"header"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"foobar"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown language foobar"
argument_list|,
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateJSonPathLanguage ()
specifier|public
name|void
name|testValidateJSonPathLanguage
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"jsonpath"
argument_list|,
literal|"$.store.book[?(@.price< 10)]"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"$.store.book[?(@.price< 10)]"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"jsonpath"
argument_list|,
literal|"$.store.book[?(@.price ^^^ 10)]"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"$.store.book[?(@.price ^^^ 10)]"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Illegal syntax: $.store.book[?(@.price ^^^ 10)]"
argument_list|,
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpringCamelContext ()
specifier|public
name|void
name|testSpringCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"camelContext"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"CamelContext using XML configuration"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComponentAsciiDoc ()
specifier|public
name|void
name|testComponentAsciiDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|doc
init|=
name|catalog
operator|.
name|componentAsciiDoc
argument_list|(
literal|"mock"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|contains
argument_list|(
literal|"mock:someName"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|catalog
operator|.
name|componentAsciiDoc
argument_list|(
literal|"geocoder"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|contains
argument_list|(
literal|"looking up geocodes"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|catalog
operator|.
name|componentAsciiDoc
argument_list|(
literal|"smtp"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|contains
argument_list|(
literal|"The mail component"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|catalog
operator|.
name|componentAsciiDoc
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransactedAndPolicyNoOutputs ()
specifier|public
name|void
name|testTransactedAndPolicyNoOutputs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"transacted"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"output\": false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"outputs\":"
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"policy"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"output\": false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"outputs\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDataFormatAsciiDoc ()
specifier|public
name|void
name|testDataFormatAsciiDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|doc
init|=
name|catalog
operator|.
name|dataFormatAsciiDoc
argument_list|(
literal|"json-jackson"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|contains
argument_list|(
literal|"Jackson dataformat"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|catalog
operator|.
name|dataFormatAsciiDoc
argument_list|(
literal|"bindy-csv"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|contains
argument_list|(
literal|"CsvRecord"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLanguageAsciiDoc ()
specifier|public
name|void
name|testLanguageAsciiDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|doc
init|=
name|catalog
operator|.
name|languageAsciiDoc
argument_list|(
literal|"jsonpath"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|contains
argument_list|(
literal|"JSonPath language"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOtherAsciiDoc ()
specifier|public
name|void
name|testOtherAsciiDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|doc
init|=
name|catalog
operator|.
name|otherAsciiDoc
argument_list|(
literal|"swagger-java"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|contains
argument_list|(
literal|"Swagger"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateEndpointTwitterSpecial ()
specifier|public
name|void
name|testValidateEndpointTwitterSpecial
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"twitter-search://java?{{%s}}"
decl_stmt|;
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateEndpointJmsDefault ()
specifier|public
name|void
name|testValidateEndpointJmsDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"jms:cheese?maxMessagesPerTask=-1"
decl_stmt|;
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getDefaultValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|result
operator|.
name|getDefaultValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"maxMessagesPerTask"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateEndpointConsumerOnly ()
specifier|public
name|void
name|testValidateEndpointConsumerOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"file:inbox?bufferSize=4096&readLock=changed&delete=true"
decl_stmt|;
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
literal|"file:inbox?bufferSize=4096&readLock=changed&delete=true&fileExist=Append"
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fileExist"
argument_list|,
name|result
operator|.
name|getNotConsumerOnly
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateEndpointProducerOnly ()
specifier|public
name|void
name|testValidateEndpointProducerOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"file:outbox?bufferSize=4096&fileExist=Append"
decl_stmt|;
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
literal|"file:outbox?bufferSize=4096&fileExist=Append&delete=true"
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"delete"
argument_list|,
name|result
operator|.
name|getNotProducerOnly
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNetty4Http4DynamicToIssue ()
specifier|public
name|void
name|testNetty4Http4DynamicToIssue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"netty4-http:http://10.192.1.10:8080/client/alerts/summary?throwExceptionOnFailure=false"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|)
expr_stmt|;
name|String
name|resolved
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"netty4-http"
argument_list|,
name|params
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"netty4-http:http:10.192.1.10:8080"
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJSonSchemaHelper ()
specifier|public
name|void
name|testJSonSchemaHelper
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|json
init|=
name|loadText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
literal|"src/test/resources/org/foo/camel/dummy.json"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// component
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|JSonSchemaHelper
operator|.
name|isComponentProducerOnly
argument_list|(
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|JSonSchemaHelper
operator|.
name|isComponentConsumerOnly
argument_list|(
name|rows
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"description"
argument_list|)
condition|)
block|{
name|desc
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
literal|"The dummy component logs message exchanges to the underlying logging mechanism."
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// componentProperties
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
literal|"exchangeFormatter"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.camel.spi.ExchangeFormatter"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exchange Formatter"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"displayName"
argument_list|)
argument_list|)
expr_stmt|;
comment|// properties
name|rows
operator|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
literal|"level"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"INFO"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|enums
init|=
name|JSonSchemaHelper
operator|.
name|getPropertyEnum
argument_list|(
name|rows
argument_list|,
literal|"level"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ERROR,WARN,INFO,DEBUG,TRACE,OFF"
argument_list|,
name|enums
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Level"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"displayName"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
literal|"amount"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of drinks in the order"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Amount"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"displayName"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
literal|"maxChars"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10000"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max Chars"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"displayName"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
literal|"repeatCount"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Repeat Count"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"displayName"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
literal|"fontSize"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"14"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Font Size"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"displayName"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
literal|"kerberosRenewJitter"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Double"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0.05"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Kerberos Renew Jitter"
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"displayName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

