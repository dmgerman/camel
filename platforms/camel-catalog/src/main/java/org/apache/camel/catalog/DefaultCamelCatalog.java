begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_comment
comment|/**  * Default {@link CamelCatalog}.  */
end_comment

begin_class
DECL|class|DefaultCamelCatalog
specifier|public
class|class
name|DefaultCamelCatalog
extends|extends
name|AbstractCamelCatalog
implements|implements
name|CamelCatalog
block|{
DECL|field|MODELS_CATALOG
specifier|private
specifier|static
specifier|final
name|String
name|MODELS_CATALOG
init|=
literal|"org/apache/camel/catalog/models.properties"
decl_stmt|;
DECL|field|MODEL_DIR
specifier|private
specifier|static
specifier|final
name|String
name|MODEL_DIR
init|=
literal|"org/apache/camel/catalog/models"
decl_stmt|;
DECL|field|DOC_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DOC_DIR
init|=
literal|"org/apache/camel/catalog/docs"
decl_stmt|;
DECL|field|ARCHETYPES_CATALOG
specifier|private
specifier|static
specifier|final
name|String
name|ARCHETYPES_CATALOG
init|=
literal|"org/apache/camel/catalog/archetypes/archetype-catalog.xml"
decl_stmt|;
DECL|field|SCHEMAS_XML
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMAS_XML
init|=
literal|"org/apache/camel/catalog/schemas"
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|VersionHelper
name|version
init|=
operator|new
name|VersionHelper
argument_list|()
decl_stmt|;
comment|// 3rd party components/data-formats
DECL|field|extraComponents
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraComponents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|extraComponentsJSonSchema
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraComponentsJSonSchema
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|extraDataFormats
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraDataFormats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|extraDataFormatsJSonSchema
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraDataFormatsJSonSchema
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// cache of operation -> result
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|caching
specifier|private
name|boolean
name|caching
decl_stmt|;
DECL|field|versionManager
specifier|private
name|VersionManager
name|versionManager
init|=
operator|new
name|DefaultVersionManager
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|runtimeProvider
specifier|private
name|RuntimeProvider
name|runtimeProvider
init|=
operator|new
name|DefaultRuntimeProvider
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|/**      * Creates the {@link CamelCatalog} without caching enabled.      */
DECL|method|DefaultCamelCatalog ()
specifier|public
name|DefaultCamelCatalog
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the {@link CamelCatalog}      *      * @param caching  whether to use cache      */
DECL|method|DefaultCamelCatalog (boolean caching)
specifier|public
name|DefaultCamelCatalog
parameter_list|(
name|boolean
name|caching
parameter_list|)
block|{
name|this
operator|.
name|caching
operator|=
name|caching
expr_stmt|;
name|setJSonSchemaResolver
argument_list|(
operator|new
name|CamelCatalogJSonSchemaResolver
argument_list|(
name|this
argument_list|,
name|extraComponents
argument_list|,
name|extraComponentsJSonSchema
argument_list|,
name|extraDataFormats
argument_list|,
name|extraDataFormatsJSonSchema
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRuntimeProvider ()
specifier|public
name|RuntimeProvider
name|getRuntimeProvider
parameter_list|()
block|{
return|return
name|runtimeProvider
return|;
block|}
annotation|@
name|Override
DECL|method|setRuntimeProvider (RuntimeProvider runtimeProvider)
specifier|public
name|void
name|setRuntimeProvider
parameter_list|(
name|RuntimeProvider
name|runtimeProvider
parameter_list|)
block|{
name|this
operator|.
name|runtimeProvider
operator|=
name|runtimeProvider
expr_stmt|;
comment|// inject CamelCatalog to the provider
name|this
operator|.
name|runtimeProvider
operator|.
name|setCamelCatalog
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// invalidate the cache
name|cache
operator|.
name|remove
argument_list|(
literal|"findComponentNames"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"listComponentsAsJson"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"findDataFormatNames"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"listDataFormatsAsJson"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"findLanguageNames"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"listLanguagesAsJson"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|enableCache ()
specifier|public
name|void
name|enableCache
parameter_list|()
block|{
name|caching
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCaching ()
specifier|public
name|boolean
name|isCaching
parameter_list|()
block|{
return|return
name|caching
return|;
block|}
annotation|@
name|Override
DECL|method|setVersionManager (VersionManager versionManager)
specifier|public
name|void
name|setVersionManager
parameter_list|(
name|VersionManager
name|versionManager
parameter_list|)
block|{
name|this
operator|.
name|versionManager
operator|=
name|versionManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVersionManager ()
specifier|public
name|VersionManager
name|getVersionManager
parameter_list|()
block|{
return|return
name|versionManager
return|;
block|}
annotation|@
name|Override
DECL|method|addComponent (String name, String className)
specifier|public
name|void
name|addComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|extraComponents
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|className
argument_list|)
expr_stmt|;
comment|// invalidate the cache
name|cache
operator|.
name|remove
argument_list|(
literal|"findComponentNames"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"findComponentLabels"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"listComponentsAsJson"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addComponent (String name, String className, String jsonSchema)
specifier|public
name|void
name|addComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|jsonSchema
parameter_list|)
block|{
name|addComponent
argument_list|(
name|name
argument_list|,
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|jsonSchema
operator|!=
literal|null
condition|)
block|{
name|extraComponentsJSonSchema
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|jsonSchema
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addDataFormat (String name, String className)
specifier|public
name|void
name|addDataFormat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|extraDataFormats
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|className
argument_list|)
expr_stmt|;
comment|// invalidate the cache
name|cache
operator|.
name|remove
argument_list|(
literal|"findDataFormatNames"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"findDataFormatLabels"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"listDataFormatsAsJson"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDataFormat (String name, String className, String jsonSchema)
specifier|public
name|void
name|addDataFormat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|jsonSchema
parameter_list|)
block|{
name|addDataFormat
argument_list|(
name|name
argument_list|,
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|jsonSchema
operator|!=
literal|null
condition|)
block|{
name|extraDataFormatsJSonSchema
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|jsonSchema
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCatalogVersion ()
specifier|public
name|String
name|getCatalogVersion
parameter_list|()
block|{
return|return
name|version
operator|.
name|getVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|loadVersion (String version)
specifier|public
name|boolean
name|loadVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|versionManager
operator|.
name|getLoadedVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|versionManager
operator|.
name|loadVersion
argument_list|(
name|version
argument_list|)
condition|)
block|{
comment|// invalidate existing cache if we loaded a new version
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getLoadedVersion ()
specifier|public
name|String
name|getLoadedVersion
parameter_list|()
block|{
return|return
name|versionManager
operator|.
name|getLoadedVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRuntimeProviderLoadedVersion ()
specifier|public
name|String
name|getRuntimeProviderLoadedVersion
parameter_list|()
block|{
return|return
name|versionManager
operator|.
name|getRuntimeProviderLoadedVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|loadRuntimeProviderVersion (String groupId, String artifactId, String version)
specifier|public
name|boolean
name|loadRuntimeProviderVersion
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|versionManager
operator|.
name|loadRuntimeProviderVersion
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findComponentNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findComponentNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|names
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findComponentNames"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|names
operator|=
name|runtimeProvider
operator|.
name|findComponentNames
argument_list|()
expr_stmt|;
comment|// include third party components
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|extraComponents
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort the names
name|Collections
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findComponentNames"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findDataFormatNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findDataFormatNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|names
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findDataFormatNames"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|names
operator|=
name|runtimeProvider
operator|.
name|findDataFormatNames
argument_list|()
expr_stmt|;
comment|// include third party data formats
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|extraDataFormats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort the names
name|Collections
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findDataFormatNames"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findLanguageNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findLanguageNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|names
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findLanguageNames"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|names
operator|=
name|runtimeProvider
operator|.
name|findLanguageNames
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findLanguageNames"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findModelNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findModelNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|names
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findModelNames"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|names
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|MODELS_CATALOG
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|CatalogHelper
operator|.
name|loadLines
argument_list|(
name|is
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findModelNames"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findOtherNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findOtherNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|names
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findOtherNames"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|names
operator|=
name|runtimeProvider
operator|.
name|findOtherNames
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findOtherNames"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
DECL|method|findModelNames (String filter)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findModelNames
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
comment|// should not cache when filter parameter can by any kind of value
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findModelNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|modelJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"model"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
try|try
block|{
if|if
condition|(
name|part
operator|.
name|equalsIgnoreCase
argument_list|(
name|filter
argument_list|)
operator|||
name|CatalogHelper
operator|.
name|matchWildcard
argument_list|(
name|part
argument_list|,
name|filter
argument_list|)
operator|||
name|part
operator|.
name|matches
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore as filter is maybe not a pattern
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|findComponentNames (String filter)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findComponentNames
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
comment|// should not cache when filter parameter can by any kind of value
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findComponentNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|componentJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
try|try
block|{
if|if
condition|(
name|part
operator|.
name|equalsIgnoreCase
argument_list|(
name|filter
argument_list|)
operator|||
name|CatalogHelper
operator|.
name|matchWildcard
argument_list|(
name|part
argument_list|,
name|filter
argument_list|)
operator|||
name|part
operator|.
name|matches
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore as filter is maybe not a pattern
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|findDataFormatNames (String filter)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findDataFormatNames
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
comment|// should not cache when filter parameter can by any kind of value
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findDataFormatNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|dataFormatJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"dataformat"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
try|try
block|{
if|if
condition|(
name|part
operator|.
name|equalsIgnoreCase
argument_list|(
name|filter
argument_list|)
operator|||
name|CatalogHelper
operator|.
name|matchWildcard
argument_list|(
name|part
argument_list|,
name|filter
argument_list|)
operator|||
name|part
operator|.
name|matches
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore as filter is maybe not a pattern
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|findLanguageNames (String filter)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findLanguageNames
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
comment|// should not cache when filter parameter can by any kind of value
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findLanguageNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|languageJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"language"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
try|try
block|{
if|if
condition|(
name|part
operator|.
name|equalsIgnoreCase
argument_list|(
name|filter
argument_list|)
operator|||
name|CatalogHelper
operator|.
name|matchWildcard
argument_list|(
name|part
argument_list|,
name|filter
argument_list|)
operator|||
name|part
operator|.
name|matches
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore as filter is maybe not a pattern
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|findOtherNames (String filter)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findOtherNames
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
comment|// should not cache when filter parameter can by any kind of value
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findOtherNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|otherJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"other"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
try|try
block|{
if|if
condition|(
name|part
operator|.
name|equalsIgnoreCase
argument_list|(
name|filter
argument_list|)
operator|||
name|CatalogHelper
operator|.
name|matchWildcard
argument_list|(
name|part
argument_list|,
name|filter
argument_list|)
operator|||
name|part
operator|.
name|matches
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore as filter is maybe not a pattern
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|modelJSonSchema (String name)
specifier|public
name|String
name|modelJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|file
init|=
name|MODEL_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"model-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|getJSonSchemaResolver
argument_list|()
operator|.
name|getModelJSonSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"model-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|componentJSonSchema (String name)
specifier|public
name|String
name|componentJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|file
init|=
name|runtimeProvider
operator|.
name|getComponentJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"component-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|getJSonSchemaResolver
argument_list|()
operator|.
name|getComponentJSonSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"component-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|dataFormatJSonSchema (String name)
specifier|public
name|String
name|dataFormatJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|file
init|=
name|runtimeProvider
operator|.
name|getDataFormatJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"dataformat-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|getJSonSchemaResolver
argument_list|()
operator|.
name|getDataFormatJSonSchema
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"dataformat-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|languageJSonSchema (String name)
specifier|public
name|String
name|languageJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// if we try to look method then its in the bean.json file
if|if
condition|(
literal|"method"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"bean"
expr_stmt|;
block|}
name|String
name|file
init|=
name|runtimeProvider
operator|.
name|getLanguageJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|otherJSonSchema (String name)
specifier|public
name|String
name|otherJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|file
init|=
name|runtimeProvider
operator|.
name|getOtherJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"other-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"other-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|componentAsciiDoc (String name)
specifier|public
name|String
name|componentAsciiDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|answer
init|=
name|doComponentAsciiDoc
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// maybe the name is an alternative scheme name, and then we need to find the component that
comment|// has the name as alternative, and use the first scheme as the name to find the documentation
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findComponentNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alternative
range|:
name|names
control|)
block|{
name|String
name|schemes
init|=
name|getAlternativeComponentName
argument_list|(
name|alternative
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemes
operator|!=
literal|null
operator|&&
name|schemes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|first
init|=
name|schemes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
return|return
name|componentAsciiDoc
argument_list|(
name|first
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|componentHtmlDoc (String name)
specifier|public
name|String
name|componentHtmlDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|answer
init|=
name|doComponentHtmlDoc
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// maybe the name is an alternative scheme name, and then we need to find the component that
comment|// has the name as alternative, and use the first scheme as the name to find the documentation
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findComponentNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alternative
range|:
name|names
control|)
block|{
name|String
name|schemes
init|=
name|getAlternativeComponentName
argument_list|(
name|alternative
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemes
operator|!=
literal|null
operator|&&
name|schemes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|first
init|=
name|schemes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
return|return
name|componentHtmlDoc
argument_list|(
name|first
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getAlternativeComponentName (String componentName)
specifier|private
name|String
name|getAlternativeComponentName
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
name|String
name|json
init|=
name|componentJSonSchema
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"alternativeSchemes"
argument_list|)
condition|)
block|{
return|return
name|row
operator|.
name|get
argument_list|(
literal|"alternativeSchemes"
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|doComponentAsciiDoc (String name)
specifier|private
name|String
name|doComponentAsciiDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for mail component
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"imap"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"imaps"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3s"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtp"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtps"
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"mail"
expr_stmt|;
block|}
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-component.adoc"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"component-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
comment|// its maybe a third party so try load it
name|String
name|className
init|=
name|extraComponents
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|String
name|packageName
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-component.adoc"
decl_stmt|;
name|is
operator|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"component-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|doComponentHtmlDoc (String name)
specifier|private
name|String
name|doComponentHtmlDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for mail component
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"imap"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"imaps"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"pop3s"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtp"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"smtps"
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"mail"
expr_stmt|;
block|}
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-component.html"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"component-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
comment|// its maybe a third party so try load it
name|String
name|className
init|=
name|extraComponents
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|String
name|packageName
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-component.html"
decl_stmt|;
name|is
operator|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"component-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|dataFormatAsciiDoc (String name)
specifier|public
name|String
name|dataFormatAsciiDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for some name data formats
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"bindy"
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"bindy"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"univocity"
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"univocity"
expr_stmt|;
block|}
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-dataformat.adoc"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"dataformat-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
comment|// its maybe a third party so try load it
name|String
name|className
init|=
name|extraDataFormats
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|String
name|packageName
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-dataformat.adoc"
decl_stmt|;
name|is
operator|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"dataformat-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|dataFormatHtmlDoc (String name)
specifier|public
name|String
name|dataFormatHtmlDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for some name data formats
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"bindy"
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"bindy"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"univocity"
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"univocity"
expr_stmt|;
block|}
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-dataformat.html"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"dataformat-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
comment|// its maybe a third party so try load it
name|String
name|className
init|=
name|extraDataFormats
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|String
name|packageName
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-dataformat.html"
decl_stmt|;
name|is
operator|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"dataformat-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|languageAsciiDoc (String name)
specifier|public
name|String
name|languageAsciiDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// if we try to look method then its in the bean.adoc file
if|if
condition|(
literal|"method"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"bean"
expr_stmt|;
block|}
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-language.adoc"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|languageHtmlDoc (String name)
specifier|public
name|String
name|languageHtmlDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// if we try to look method then its in the bean.html file
if|if
condition|(
literal|"method"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"bean"
expr_stmt|;
block|}
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-language.html"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|otherAsciiDoc (String name)
specifier|public
name|String
name|otherAsciiDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".adoc"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"other-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"other-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|otherHtmlDoc (String name)
specifier|public
name|String
name|otherHtmlDoc
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|file
init|=
name|DOC_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"-other.html"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"language-"
operator|+
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findModelLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findModelLabels
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findModelLabels"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findModelNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|modelJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"model"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findModelLabels"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findComponentLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findComponentLabels
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findComponentLabels"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findComponentNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|componentJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"component"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findComponentLabels"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findDataFormatLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findDataFormatLabels
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findDataFormatLabels"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findDataFormatNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|dataFormatJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"dataformat"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findDataFormatLabels"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findLanguageLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findLanguageLabels
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findLanguageLabels"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findLanguageNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|languageJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"language"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findLanguageLabels"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|findOtherLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findOtherLabels
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"findOtherLabels"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findOtherNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|json
init|=
name|otherJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"other"
argument_list|,
name|json
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|containsKey
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|label
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"findOtherLabels"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|archetypeCatalogAsXml ()
specifier|public
name|String
name|archetypeCatalogAsXml
parameter_list|()
block|{
name|String
name|file
init|=
name|ARCHETYPES_CATALOG
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|springSchemaAsXml ()
specifier|public
name|String
name|springSchemaAsXml
parameter_list|()
block|{
name|String
name|file
init|=
name|SCHEMAS_XML
operator|+
literal|"/camel-spring.xsd"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|blueprintSchemaAsXml ()
specifier|public
name|String
name|blueprintSchemaAsXml
parameter_list|()
block|{
name|String
name|file
init|=
name|SCHEMAS_XML
operator|+
literal|"/camel-blueprint.xsd"
decl_stmt|;
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|versionManager
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Special logic for log endpoints to deal when showAll=true      */
DECL|method|filterProperties (String scheme, Map<String, String> options)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterProperties
parameter_list|(
name|String
name|scheme
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
if|if
condition|(
literal|"log"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|String
name|showAll
init|=
name|options
operator|.
name|get
argument_list|(
literal|"showAll"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|showAll
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filtered
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// remove all the other showXXX options when showAll=true
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|boolean
name|skip
init|=
name|key
operator|.
name|startsWith
argument_list|(
literal|"show"
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|equals
argument_list|(
literal|"showAll"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|skip
condition|)
block|{
name|filtered
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filtered
return|;
block|}
block|}
comment|// use as-is
return|return
name|options
return|;
block|}
annotation|@
name|Override
DECL|method|listComponentsAsJson ()
specifier|public
name|String
name|listComponentsAsJson
parameter_list|()
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"listComponentsAsJson"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findComponentNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|scheme
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|componentJSonSchema
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// skip first line
name|json
operator|=
name|CatalogHelper
operator|.
name|between
argument_list|(
name|json
argument_list|,
literal|"\"component\": {"
argument_list|,
literal|"\"componentProperties\": {"
argument_list|)
expr_stmt|;
name|json
operator|=
name|json
operator|!=
literal|null
condition|?
name|json
operator|.
name|trim
argument_list|()
else|:
literal|""
expr_stmt|;
comment|// skip last comma if not the last
if|if
condition|(
name|i
operator|==
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|json
operator|=
name|json
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|json
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"listComponentsAsJson"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|listDataFormatsAsJson ()
specifier|public
name|String
name|listDataFormatsAsJson
parameter_list|()
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"listDataFormatsAsJson"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findDataFormatNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|scheme
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|dataFormatJSonSchema
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// skip first line
name|json
operator|=
name|CatalogHelper
operator|.
name|between
argument_list|(
name|json
argument_list|,
literal|"\"dataformat\": {"
argument_list|,
literal|"\"properties\": {"
argument_list|)
expr_stmt|;
name|json
operator|=
name|json
operator|!=
literal|null
condition|?
name|json
operator|.
name|trim
argument_list|()
else|:
literal|""
expr_stmt|;
comment|// skip last comma if not the last
if|if
condition|(
name|i
operator|==
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|json
operator|=
name|json
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|json
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"listDataFormatsAsJson"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|listLanguagesAsJson ()
specifier|public
name|String
name|listLanguagesAsJson
parameter_list|()
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"listLanguagesAsJson"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findLanguageNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|scheme
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|languageJSonSchema
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// skip first line
name|json
operator|=
name|CatalogHelper
operator|.
name|between
argument_list|(
name|json
argument_list|,
literal|"\"language\": {"
argument_list|,
literal|"\"properties\": {"
argument_list|)
expr_stmt|;
name|json
operator|=
name|json
operator|!=
literal|null
condition|?
name|json
operator|.
name|trim
argument_list|()
else|:
literal|""
expr_stmt|;
comment|// skip last comma if not the last
if|if
condition|(
name|i
operator|==
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|json
operator|=
name|json
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|json
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"listLanguagesAsJson"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|listModelsAsJson ()
specifier|public
name|String
name|listModelsAsJson
parameter_list|()
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"listModelsAsJson"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findModelNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|scheme
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|modelJSonSchema
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// skip first line
name|json
operator|=
name|CatalogHelper
operator|.
name|between
argument_list|(
name|json
argument_list|,
literal|"\"model\": {"
argument_list|,
literal|"\"properties\": {"
argument_list|)
expr_stmt|;
name|json
operator|=
name|json
operator|!=
literal|null
condition|?
name|json
operator|.
name|trim
argument_list|()
else|:
literal|""
expr_stmt|;
comment|// skip last comma if not the last
if|if
condition|(
name|i
operator|==
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|json
operator|=
name|json
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|json
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"listModelsAsJson"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|listOthersAsJson ()
specifier|public
name|String
name|listOthersAsJson
parameter_list|()
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"listOthersAsJson"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findOtherNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|scheme
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|otherJSonSchema
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// skip first line
name|json
operator|=
name|CatalogHelper
operator|.
name|between
argument_list|(
name|json
argument_list|,
literal|"\"other\": {"
argument_list|,
literal|"  }"
argument_list|)
expr_stmt|;
name|json
operator|=
name|json
operator|!=
literal|null
condition|?
name|json
operator|.
name|trim
argument_list|()
else|:
literal|""
expr_stmt|;
name|json
operator|=
name|json
operator|+
literal|"\n  },"
expr_stmt|;
comment|// skip last comma if not the last
if|if
condition|(
name|i
operator|==
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|json
operator|=
name|json
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|json
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"listOthersAsJson"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|summaryAsJson ()
specifier|public
name|String
name|summaryAsJson
parameter_list|()
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|answer
operator|=
operator|(
name|String
operator|)
name|cache
operator|.
name|get
argument_list|(
literal|"summaryAsJson"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|int
name|archetypes
init|=
literal|0
decl_stmt|;
try|try
block|{
name|String
name|xml
init|=
name|archetypeCatalogAsXml
argument_list|()
decl_stmt|;
name|Document
name|dom
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
operator|.
name|evaluate
argument_list|(
literal|"count(/archetype-catalog/archetypes/archetype)"
argument_list|,
name|dom
argument_list|,
name|XPathConstants
operator|.
name|NUMBER
argument_list|)
decl_stmt|;
name|double
name|num
init|=
operator|(
name|double
operator|)
name|val
decl_stmt|;
name|archetypes
operator|=
operator|(
name|int
operator|)
name|num
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"version\": \""
argument_list|)
operator|.
name|append
argument_list|(
name|getCatalogVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"eips\": "
argument_list|)
operator|.
name|append
argument_list|(
name|findModelNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"components\": "
argument_list|)
operator|.
name|append
argument_list|(
name|findComponentNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"dataformats\": "
argument_list|)
operator|.
name|append
argument_list|(
name|findDataFormatNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"languages\": "
argument_list|)
operator|.
name|append
argument_list|(
name|findLanguageNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  \"archetypes\": "
argument_list|)
operator|.
name|append
argument_list|(
name|archetypes
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
literal|"summaryAsJson"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|// CHECKSTYLE:ON
block|}
end_class

end_unit

