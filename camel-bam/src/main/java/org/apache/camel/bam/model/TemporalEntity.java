begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|model
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|Time
operator|.
name|millis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * @version $Revision: $  */
end_comment

begin_class
DECL|class|TemporalEntity
specifier|public
specifier|abstract
class|class
name|TemporalEntity
extends|extends
name|EntitySupport
block|{
DECL|field|timeStarted
specifier|private
name|long
name|timeStarted
decl_stmt|;
DECL|field|timeCompleted
specifier|private
name|long
name|timeCompleted
decl_stmt|;
DECL|field|completed
specifier|private
name|boolean
name|completed
decl_stmt|;
DECL|method|isCompleted ()
specifier|public
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|completed
return|;
block|}
DECL|method|setCompleted (boolean completed)
specifier|public
name|void
name|setCompleted
parameter_list|(
name|boolean
name|completed
parameter_list|)
block|{
name|this
operator|.
name|completed
operator|=
name|completed
expr_stmt|;
block|}
DECL|method|getTimeCompleted ()
specifier|public
name|long
name|getTimeCompleted
parameter_list|()
block|{
return|return
name|timeCompleted
return|;
block|}
DECL|method|setTimeCompleted (long timeCompleted)
specifier|public
name|void
name|setTimeCompleted
parameter_list|(
name|long
name|timeCompleted
parameter_list|)
block|{
name|this
operator|.
name|timeCompleted
operator|=
name|timeCompleted
expr_stmt|;
block|}
DECL|method|getTimeStarted ()
specifier|public
name|long
name|getTimeStarted
parameter_list|()
block|{
return|return
name|timeStarted
return|;
block|}
DECL|method|setTimeStarted (long timeStarted)
specifier|public
name|void
name|setTimeStarted
parameter_list|(
name|long
name|timeStarted
parameter_list|)
block|{
name|this
operator|.
name|timeStarted
operator|=
name|timeStarted
expr_stmt|;
block|}
DECL|method|getStartTime ()
specifier|public
name|Time
name|getStartTime
parameter_list|()
block|{
name|long
name|value
init|=
name|getTimeStarted
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
return|return
name|millis
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getCompleteTime ()
specifier|public
name|Time
name|getCompleteTime
parameter_list|()
block|{
name|long
name|value
init|=
name|getTimeCompleted
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
return|return
name|millis
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

