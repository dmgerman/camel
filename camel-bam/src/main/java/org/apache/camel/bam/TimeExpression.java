begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision: $  */
end_comment

begin_class
DECL|class|TimeExpression
specifier|public
class|class
name|TimeExpression
implements|implements
name|Expression
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|activity
specifier|private
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|Activity
name|activity
decl_stmt|;
DECL|field|expression
specifier|private
name|Expression
name|expression
decl_stmt|;
DECL|method|TimeExpression (org.apache.camel.bam.Activity activity, Expression expression)
specifier|public
name|TimeExpression
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|Activity
name|activity
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|activity
operator|=
name|activity
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
comment|/**      * Creates a new temporal rule on this expression and the other expression      */
DECL|method|after (TimeExpression expression)
specifier|public
name|TemporalRule
name|after
parameter_list|(
name|TimeExpression
name|expression
parameter_list|)
block|{
return|return
operator|new
name|TemporalRule
argument_list|(
name|this
argument_list|,
name|expression
argument_list|)
return|;
block|}
block|}
end_class

end_unit

