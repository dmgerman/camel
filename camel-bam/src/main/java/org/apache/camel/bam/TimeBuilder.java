begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A fluent builder of times  *  * @version $Revision: $  */
end_comment

begin_class
DECL|class|TimeBuilder
specifier|public
class|class
name|TimeBuilder
block|{
DECL|field|number
specifier|private
name|long
name|number
decl_stmt|;
DECL|field|timeUnit
specifier|private
name|TimeUnit
name|timeUnit
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
decl_stmt|;
DECL|field|configuredTime
specifier|private
name|boolean
name|configuredTime
decl_stmt|;
comment|/**      * Creates a time which by default is in milliseconds unless      * specified using a time based builder method      */
DECL|method|time (long number)
specifier|public
specifier|static
name|TimeBuilder
name|time
parameter_list|(
name|long
name|number
parameter_list|)
block|{
return|return
operator|new
name|TimeBuilder
argument_list|(
name|number
argument_list|)
return|;
block|}
DECL|method|TimeBuilder (long number)
specifier|public
name|TimeBuilder
parameter_list|(
name|long
name|number
parameter_list|)
block|{
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
block|}
DECL|method|toMillis ()
specifier|public
name|long
name|toMillis
parameter_list|()
block|{
return|return
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|number
argument_list|)
return|;
block|}
DECL|method|millis ()
specifier|public
name|TimeBuilder
name|millis
parameter_list|()
block|{
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|nanos ()
specifier|public
name|TimeBuilder
name|nanos
parameter_list|()
block|{
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|micros ()
specifier|public
name|TimeBuilder
name|micros
parameter_list|()
block|{
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|seconds ()
specifier|public
name|TimeBuilder
name|seconds
parameter_list|()
block|{
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|minutes ()
specifier|public
name|TimeBuilder
name|minutes
parameter_list|()
block|{
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|number
operator|=
name|minutesAsSeconds
argument_list|(
name|number
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|hours ()
specifier|public
name|TimeBuilder
name|hours
parameter_list|()
block|{
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|number
operator|=
name|hoursAsSeconds
argument_list|(
name|number
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|days ()
specifier|public
name|TimeBuilder
name|days
parameter_list|()
block|{
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|number
operator|=
name|daysAsSeconds
argument_list|(
name|number
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getNumber ()
specifier|public
name|long
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
DECL|method|getTimeUnit ()
specifier|public
name|TimeUnit
name|getTimeUnit
parameter_list|()
block|{
return|return
name|timeUnit
return|;
block|}
DECL|method|setTimeUnit (TimeUnit timeUnit)
specifier|public
name|void
name|setTimeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|configuredTime
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot configure the time unit twice!"
argument_list|)
throw|;
block|}
else|else
block|{
name|configuredTime
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
block|}
DECL|method|minutesAsSeconds (long value)
specifier|protected
name|long
name|minutesAsSeconds
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|value
operator|*
literal|60
return|;
block|}
DECL|method|hoursAsSeconds (long value)
specifier|protected
name|long
name|hoursAsSeconds
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|minutesAsSeconds
argument_list|(
name|value
argument_list|)
operator|*
literal|60
return|;
block|}
DECL|method|daysAsSeconds (long value)
specifier|protected
name|long
name|daysAsSeconds
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|hoursAsSeconds
argument_list|(
name|value
argument_list|)
operator|*
literal|24
return|;
block|}
block|}
end_class

end_unit

