begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_comment
comment|/**  * @version $Revision: $  */
end_comment

begin_class
DECL|class|ProcessExpressionSupport
specifier|public
specifier|abstract
class|class
name|ProcessExpressionSupport
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Expression
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|PROCESS_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|PROCESS_PROPERTY
init|=
literal|"org.apache.camel.bam.Process"
decl_stmt|;
DECL|field|type
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
DECL|method|ProcessExpressionSupport (Class<T> type)
specifier|protected
name|ProcessExpressionSupport
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getProcessEntity (Exchange exchange, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getProcessEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|PROCESS_PROPERTY
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|storeProcessEntity (Exchange exchange, T processEntity)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|storeProcessEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|T
name|processEntity
parameter_list|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|PROCESS_PROPERTY
argument_list|,
name|processEntity
argument_list|)
expr_stmt|;
block|}
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|T
name|processEntity
init|=
name|getProcessEntity
argument_list|(
name|exchange
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|processEntity
argument_list|)
return|;
block|}
DECL|method|evaluate (Exchange exchange, T processEntity)
specifier|protected
specifier|abstract
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|T
name|processEntity
parameter_list|)
function_decl|;
block|}
end_class

end_unit

