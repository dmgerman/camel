begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|CascadeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|FetchType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|ManyToOne
import|;
end_import

begin_comment
comment|/**  * The default state for a specific activity within a process  *  * @version $Revision: $  */
end_comment

begin_class
annotation|@
name|Entity
DECL|class|ActivityState
specifier|public
class|class
name|ActivityState
extends|extends
name|TemporalEntity
implements|implements
name|TimerEventHandler
block|{
annotation|@
name|ManyToOne
argument_list|(
name|fetch
operator|=
name|FetchType
operator|.
name|LAZY
argument_list|,
name|cascade
operator|=
block|{
name|CascadeType
operator|.
name|PERSIST
block|}
argument_list|)
DECL|field|process
specifier|private
name|ProcessInstance
name|process
decl_stmt|;
DECL|field|receivedMessageCount
specifier|private
name|int
name|receivedMessageCount
decl_stmt|;
DECL|field|activityName
specifier|private
name|String
name|activityName
decl_stmt|;
DECL|method|process (Activity activity, Exchange exchange)
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|Activity
name|activity
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
name|getReceivedMessageCount
argument_list|()
operator|+
literal|1
decl_stmt|;
name|setReceivedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|messageCount
operator|==
literal|1
condition|)
block|{
name|onFirstMessage
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
name|int
name|expectedMessages
init|=
name|activity
operator|.
name|getExpectedMessages
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageCount
operator|==
name|expectedMessages
condition|)
block|{
name|onExpectedMessage
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messageCount
operator|>
name|expectedMessages
condition|)
block|{
name|onExcessMessage
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// now lets fire any assertions on the activity
name|activity
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns true if this state is for the given activity      */
DECL|method|isActivity (Activity activity)
specifier|public
name|boolean
name|isActivity
parameter_list|(
name|Activity
name|activity
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|equals
argument_list|(
name|getActivityName
argument_list|()
argument_list|,
name|activity
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Invoked by the timer firing      */
DECL|method|onTimerEvent (TimerEvent event)
specifier|public
name|void
name|onTimerEvent
parameter_list|(
name|TimerEvent
name|event
parameter_list|)
block|{
comment|// TODO do check on this entity
block|}
comment|// Properties
comment|//-----------------------------------------------------------------------
DECL|method|getProcess ()
specifier|public
name|ProcessInstance
name|getProcess
parameter_list|()
block|{
return|return
name|process
return|;
block|}
DECL|method|setProcess (ProcessInstance process)
specifier|public
name|void
name|setProcess
parameter_list|(
name|ProcessInstance
name|process
parameter_list|)
block|{
name|this
operator|.
name|process
operator|=
name|process
expr_stmt|;
name|process
operator|.
name|getActivityStates
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getActivityName ()
specifier|public
name|String
name|getActivityName
parameter_list|()
block|{
return|return
name|activityName
return|;
block|}
DECL|method|setActivityName (String activityName)
specifier|public
name|void
name|setActivityName
parameter_list|(
name|String
name|activityName
parameter_list|)
block|{
name|this
operator|.
name|activityName
operator|=
name|activityName
expr_stmt|;
block|}
DECL|method|getReceivedMessageCount ()
specifier|public
name|int
name|getReceivedMessageCount
parameter_list|()
block|{
return|return
name|receivedMessageCount
return|;
block|}
DECL|method|setReceivedMessageCount (int receivedMessageCount)
specifier|public
name|void
name|setReceivedMessageCount
parameter_list|(
name|int
name|receivedMessageCount
parameter_list|)
block|{
name|this
operator|.
name|receivedMessageCount
operator|=
name|receivedMessageCount
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-----------------------------------------------------------------------
comment|/**      * Called when the first message is reached      */
DECL|method|onFirstMessage (Exchange exchange)
specifier|protected
name|void
name|onFirstMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|setTimeStarted
argument_list|(
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when the expected number of messages are is reached      */
DECL|method|onExpectedMessage (Exchange exchange)
specifier|protected
name|void
name|onExpectedMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|setTimeCompleted
argument_list|(
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
name|setCompleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when an excess message (after the expected number of messages)      * are received      */
DECL|method|onExcessMessage (Exchange exchange)
specifier|protected
name|void
name|onExcessMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// TODO
block|}
DECL|method|currentTime ()
specifier|protected
name|long
name|currentTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
end_class

end_unit

