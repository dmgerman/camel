begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|model
operator|.
name|ProcessInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|JpaTemplate
import|;
end_import

begin_comment
comment|/**  * @version $Revision: $  */
end_comment

begin_class
DECL|class|JpaBamProcessor
specifier|public
class|class
name|JpaBamProcessor
extends|extends
name|JpaBamProcessorSupport
argument_list|<
name|ProcessInstance
argument_list|>
block|{
DECL|method|JpaBamProcessor (Class<ProcessInstance> entitytype, Expression<Exchange> correlationKeyExpression, Activity activity, JpaTemplate template)
specifier|public
name|JpaBamProcessor
parameter_list|(
name|Class
argument_list|<
name|ProcessInstance
argument_list|>
name|entitytype
parameter_list|,
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|correlationKeyExpression
parameter_list|,
name|Activity
name|activity
parameter_list|,
name|JpaTemplate
name|template
parameter_list|)
block|{
name|super
argument_list|(
name|entitytype
argument_list|,
name|correlationKeyExpression
argument_list|,
name|activity
argument_list|,
name|template
argument_list|)
expr_stmt|;
block|}
DECL|method|JpaBamProcessor (Expression<Exchange> correlationKeyExpression, Activity activity, JpaTemplate template)
specifier|public
name|JpaBamProcessor
parameter_list|(
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|correlationKeyExpression
parameter_list|,
name|Activity
name|activity
parameter_list|,
name|JpaTemplate
name|template
parameter_list|)
block|{
name|super
argument_list|(
name|correlationKeyExpression
argument_list|,
name|activity
argument_list|,
name|template
argument_list|)
expr_stmt|;
block|}
DECL|method|processEntity (Exchange exchange, ProcessInstance process)
specifier|protected
name|void
name|processEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|ProcessInstance
name|process
parameter_list|)
throws|throws
name|Exception
block|{
name|ActivityState
name|state
init|=
name|process
operator|.
name|getActivityState
argument_list|(
name|getActivity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|createActivityState
argument_list|(
name|exchange
argument_list|,
name|process
argument_list|)
expr_stmt|;
name|state
operator|.
name|setProcess
argument_list|(
name|process
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|process
argument_list|(
name|getActivity
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|createActivityState (Exchange exchange, ProcessInstance process)
specifier|protected
name|ActivityState
name|createActivityState
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|ProcessInstance
name|process
parameter_list|)
block|{
return|return
operator|new
name|ActivityState
argument_list|()
return|;
block|}
block|}
end_class

end_unit

