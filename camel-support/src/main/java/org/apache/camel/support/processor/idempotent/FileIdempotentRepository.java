begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.processor.idempotent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|idempotent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LRUCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_comment
comment|/**  * A file based implementation of {@link org.apache.camel.spi.IdempotentRepository}.  *<p/>  * This implementation provides a 1st-level in-memory {@link LRUCache} for fast check of the most  * frequently used keys. When {@link #add(String)} or {@link #contains(String)} methods are being used  * then in case of 1st-level cache miss, the underlying file is scanned which may cost additional performance.  * So try to find the right balance of the size of the 1st-level cache, the default size is 1000.  * The file store has a maximum capacity of 32mb by default (you can turn this off and have unlimited size).  * If the file store grows bigger than the maximum capacity, then the {@link #getDropOldestFileStore()} (is default 1000)  * number of entries from the file store is dropped to reduce the file store and make room for newer entries.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"File based idempotent repository"
argument_list|)
DECL|class|FileIdempotentRepository
specifier|public
class|class
name|FileIdempotentRepository
extends|extends
name|ServiceSupport
implements|implements
name|IdempotentRepository
block|{
DECL|field|STORE_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|STORE_DELIMITER
init|=
literal|"\n"
decl_stmt|;
DECL|field|init
specifier|private
specifier|final
name|AtomicBoolean
name|init
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|cache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
DECL|field|fileStore
specifier|private
name|File
name|fileStore
decl_stmt|;
DECL|field|maxFileStoreSize
specifier|private
name|long
name|maxFileStoreSize
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1000L
decl_stmt|;
comment|// 32mb store file
DECL|field|dropOldestFileStore
specifier|private
name|long
name|dropOldestFileStore
init|=
literal|1000
decl_stmt|;
DECL|method|FileIdempotentRepository ()
specifier|public
name|FileIdempotentRepository
parameter_list|()
block|{     }
DECL|method|FileIdempotentRepository (File fileStore, Map<String, Object> set)
specifier|public
name|FileIdempotentRepository
parameter_list|(
name|File
name|fileStore
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|set
parameter_list|)
block|{
name|this
operator|.
name|fileStore
operator|=
name|fileStore
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|set
expr_stmt|;
block|}
comment|/**      * Creates a new file based repository using a {@link LRUCache}      * as 1st level cache with a default of 1000 entries in the cache.      *      * @param fileStore  the file store      */
DECL|method|fileIdempotentRepository (File fileStore)
specifier|public
specifier|static
name|IdempotentRepository
name|fileIdempotentRepository
parameter_list|(
name|File
name|fileStore
parameter_list|)
block|{
return|return
name|fileIdempotentRepository
argument_list|(
name|fileStore
argument_list|,
literal|1000
argument_list|)
return|;
block|}
comment|/**      * Creates a new file based repository using a {@link LRUCache}      * as 1st level cache.      *      * @param fileStore  the file store      * @param cacheSize  the cache size      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fileIdempotentRepository (File fileStore, int cacheSize)
specifier|public
specifier|static
name|IdempotentRepository
name|fileIdempotentRepository
parameter_list|(
name|File
name|fileStore
parameter_list|,
name|int
name|cacheSize
parameter_list|)
block|{
return|return
name|fileIdempotentRepository
argument_list|(
name|fileStore
argument_list|,
name|LRUCacheFactory
operator|.
name|newLRUCache
argument_list|(
name|cacheSize
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates a new file based repository using a {@link LRUCache}      * as 1st level cache.      *      * @param fileStore  the file store      * @param cacheSize  the cache size      * @param maxFileStoreSize  the max size in bytes for the filestore file       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fileIdempotentRepository (File fileStore, int cacheSize, long maxFileStoreSize)
specifier|public
specifier|static
name|IdempotentRepository
name|fileIdempotentRepository
parameter_list|(
name|File
name|fileStore
parameter_list|,
name|int
name|cacheSize
parameter_list|,
name|long
name|maxFileStoreSize
parameter_list|)
block|{
name|FileIdempotentRepository
name|repository
init|=
operator|new
name|FileIdempotentRepository
argument_list|(
name|fileStore
argument_list|,
name|LRUCacheFactory
operator|.
name|newLRUCache
argument_list|(
name|cacheSize
argument_list|)
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setMaxFileStoreSize
argument_list|(
name|maxFileStoreSize
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
comment|/**      * Creates a new file based repository using the given {@link java.util.Map}      * as 1st level cache.      *<p/>      * Care should be taken to use a suitable underlying {@link java.util.Map} to avoid this class being a      * memory leak.      *      * @param store  the file store      * @param cache  the cache to use as 1st level cache      */
DECL|method|fileIdempotentRepository (File store, Map<String, Object> cache)
specifier|public
specifier|static
name|IdempotentRepository
name|fileIdempotentRepository
parameter_list|(
name|File
name|store
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|)
block|{
return|return
operator|new
name|FileIdempotentRepository
argument_list|(
name|store
argument_list|,
name|cache
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Adds the key to the store"
argument_list|)
DECL|method|add (String key)
specifier|public
name|boolean
name|add
parameter_list|(
name|String
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// always register the most used keys in the LRUCache
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
comment|// now check the file store
name|boolean
name|containsInFile
init|=
name|containsStore
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|containsInFile
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// its a new key so append to file store
name|appendToStore
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// check if we hit maximum capacity (if enabled) and report a warning about this
if|if
condition|(
name|maxFileStoreSize
operator|>
literal|0
operator|&&
name|fileStore
operator|.
name|length
argument_list|()
operator|>
name|maxFileStoreSize
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Maximum capacity of file store: {} hit at {} bytes. Dropping {} oldest entries from the file store"
argument_list|,
name|fileStore
argument_list|,
name|maxFileStoreSize
argument_list|,
name|dropOldestFileStore
argument_list|)
expr_stmt|;
name|trunkStore
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Does the store contain the given key"
argument_list|)
DECL|method|contains (String key)
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
comment|// check 1st-level first and then fallback to check the actual file
return|return
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
name|containsStore
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Remove the key from the store"
argument_list|)
DECL|method|remove (String key)
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|boolean
name|answer
decl_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|answer
operator|=
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
expr_stmt|;
comment|// remove from file cache also
name|removeFromStore
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|confirm (String key)
specifier|public
name|boolean
name|confirm
parameter_list|(
name|String
name|key
parameter_list|)
block|{
comment|// noop
return|return
literal|true
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Clear the store (danger this removes all entries)"
argument_list|)
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
comment|// clear file store
name|clearStore
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getFileStore ()
specifier|public
name|File
name|getFileStore
parameter_list|()
block|{
return|return
name|fileStore
return|;
block|}
DECL|method|setFileStore (File fileStore)
specifier|public
name|void
name|setFileStore
parameter_list|(
name|File
name|fileStore
parameter_list|)
block|{
name|this
operator|.
name|fileStore
operator|=
name|fileStore
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The file path for the store"
argument_list|)
DECL|method|getFilePath ()
specifier|public
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|fileStore
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|getCache ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
DECL|method|setCache (Map<String, Object> cache)
specifier|public
name|void
name|setCache
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The maximum file size for the file store in bytes"
argument_list|)
DECL|method|getMaxFileStoreSize ()
specifier|public
name|long
name|getMaxFileStoreSize
parameter_list|()
block|{
return|return
name|maxFileStoreSize
return|;
block|}
comment|/**      * Sets the maximum file size for the file store in bytes.      * You can set the value to 0 or negative to turn this off, and have unlimited file store size.      *<p/>      * The default is 32mb.      */
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The maximum file size for the file store in bytes"
argument_list|)
DECL|method|setMaxFileStoreSize (long maxFileStoreSize)
specifier|public
name|void
name|setMaxFileStoreSize
parameter_list|(
name|long
name|maxFileStoreSize
parameter_list|)
block|{
name|this
operator|.
name|maxFileStoreSize
operator|=
name|maxFileStoreSize
expr_stmt|;
block|}
DECL|method|getDropOldestFileStore ()
specifier|public
name|long
name|getDropOldestFileStore
parameter_list|()
block|{
return|return
name|dropOldestFileStore
return|;
block|}
comment|/**      * Sets the number of oldest entries to drop from the file store when the maximum capacity is hit to reduce      * disk space to allow room for new entries.      *<p/>      * The default is 1000.      */
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of oldest elements to drop from file store if maximum file size reached"
argument_list|)
DECL|method|setDropOldestFileStore (long dropOldestFileStore)
specifier|public
name|void
name|setDropOldestFileStore
parameter_list|(
name|long
name|dropOldestFileStore
parameter_list|)
block|{
name|this
operator|.
name|dropOldestFileStore
operator|=
name|dropOldestFileStore
expr_stmt|;
block|}
comment|/**      * Sets the 1st-level cache size.      *      * Setting cache size is only possible when using the default {@link LRUCache} cache implementation.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setCacheSize (int size)
specifier|public
name|void
name|setCacheSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|cache
operator|instanceof
name|LRUCache
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting cache size is only possible when using the default LRUCache cache implementation"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|cache
operator|=
name|LRUCacheFactory
operator|.
name|newLRUCache
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The current 1st-level cache size"
argument_list|)
DECL|method|getCacheSize ()
specifier|public
name|int
name|getCacheSize
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
return|return
name|cache
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**      * Reset and clears the 1st-level cache to force it to reload from file      */
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Reset and reloads the file store"
argument_list|)
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
comment|// run the cleanup task first
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|loadStore
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Checks the file store if the key exists      *      * @param key  the key      * @return<tt>true</tt> if exists in the file,<tt>false</tt> otherwise      */
DECL|method|containsStore (final String key)
specifier|protected
name|boolean
name|containsStore
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|fileStore
operator|==
literal|null
operator|||
operator|!
name|fileStore
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|fileStore
argument_list|,
literal|null
argument_list|,
name|STORE_DELIMITER
argument_list|)
init|)
block|{
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Appends the given key to the file store      *      * @param key  the key      */
DECL|method|appendToStore (final String key)
specifier|protected
name|void
name|appendToStore
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Appending: {} to idempotent filestore: {}"
argument_list|,
name|key
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create store parent directory if missing
name|File
name|storeParentDirectory
init|=
name|fileStore
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|storeParentDirectory
operator|!=
literal|null
operator|&&
operator|!
name|storeParentDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Parent directory of file store {} doesn't exist. Creating."
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileStore
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Parent directory of filestore: {} successfully created."
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Parent directory of filestore: {} cannot be created."
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create store if missing
if|if
condition|(
operator|!
name|fileStore
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|createNewFile
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
block|}
comment|// append to store
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|fileStore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|STORE_DELIMITER
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|fos
argument_list|,
literal|"Appending to file idempotent repository"
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeFromStore (String key)
specifier|protected
specifier|synchronized
name|void
name|removeFromStore
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Removing: {} from idempotent filestore: {}"
argument_list|,
name|key
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
comment|// we need to re-load the entire file and remove the key and then re-write the file
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
try|try
block|{
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|fileStore
argument_list|,
literal|null
argument_list|,
name|STORE_DELIMITER
argument_list|)
init|)
block|{
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|found
condition|)
block|{
comment|// rewrite file
name|log
operator|.
name|debug
argument_list|(
literal|"Rewriting idempotent filestore: {} due to key: {} removed"
argument_list|,
name|fileStore
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|STORE_DELIMITER
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|fos
argument_list|,
literal|"Rewriting file idempotent repository"
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Clears the file-store (danger this deletes all entries)      */
DECL|method|clearStore ()
specifier|protected
name|void
name|clearStore
parameter_list|()
block|{
try|try
block|{
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|createNewFile
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Trunks the file store when the max store size is hit by dropping the most oldest entries.      */
DECL|method|trunkStore ()
specifier|protected
specifier|synchronized
name|void
name|trunkStore
parameter_list|()
block|{
if|if
condition|(
name|fileStore
operator|==
literal|null
operator|||
operator|!
name|fileStore
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Trunking: {} oldest entries from idempotent filestore: {}"
argument_list|,
name|dropOldestFileStore
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
comment|// we need to re-load the entire file and remove the key and then re-write the file
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|fileStore
argument_list|,
literal|null
argument_list|,
name|STORE_DELIMITER
argument_list|)
init|)
block|{
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|dropOldestFileStore
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// rewrite file
name|log
operator|.
name|debug
argument_list|(
literal|"Rewriting idempotent filestore: {} with {} entries:"
argument_list|,
name|fileStore
argument_list|,
name|lines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|fileStore
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|STORE_DELIMITER
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|fos
argument_list|,
literal|"Rewriting file idempotent repository"
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// its a small file so recreate the file
name|log
operator|.
name|debug
argument_list|(
literal|"Clearing idempotent filestore: {}"
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
name|clearStore
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Cleanup the 1st-level cache.      */
DECL|method|cleanup ()
specifier|protected
name|void
name|cleanup
parameter_list|()
block|{
comment|// run the cleanup task first
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Loads the given file store into the 1st level cache      */
DECL|method|loadStore ()
specifier|protected
name|void
name|loadStore
parameter_list|()
throws|throws
name|IOException
block|{
comment|// auto create starting directory if needed
if|if
condition|(
operator|!
name|fileStore
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating filestore: {}"
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
name|File
name|parent
init|=
name|fileStore
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|boolean
name|created
init|=
name|FileUtil
operator|.
name|createNewFile
argument_list|(
name|fileStore
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|created
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create filestore: "
operator|+
name|fileStore
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Loading to 1st level cache from idempotent filestore: {}"
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
init|(
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|fileStore
argument_list|,
literal|null
argument_list|,
name|STORE_DELIMITER
argument_list|)
init|)
block|{
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|line
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Loaded {} to the 1st level cache from idempotent filestore: {}"
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|,
name|fileStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|fileStore
argument_list|,
literal|"fileStore"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cache
operator|==
literal|null
condition|)
block|{
comment|// default use a 1st level cache
name|this
operator|.
name|cache
operator|=
name|LRUCacheFactory
operator|.
name|newLRUCache
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// init store if not loaded before
if|if
condition|(
name|init
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|loadStore
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// run the cleanup task first
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|init
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

