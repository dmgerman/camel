begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMX
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedThrottlingExceptionRoutePolicyMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|throttling
operator|.
name|ThrottlingExceptionHalfOpenHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|throttling
operator|.
name|ThrottlingExceptionRoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ManagedThrottlingExceptionRoutePolicyTest
specifier|public
class|class
name|ManagedThrottlingExceptionRoutePolicyTest
extends|extends
name|ManagementTestSupport
block|{
annotation|@
name|Test
DECL|method|testRoutes ()
specifier|public
name|void
name|testRoutes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// JMX tests dont work well on AIX CI servers (hangs them)
if|if
condition|(
name|isPlatform
argument_list|(
literal|"aix"
argument_list|)
condition|)
block|{
return|return;
block|}
name|MBeanServer
name|mbeanServer
init|=
name|getMBeanServer
argument_list|()
decl_stmt|;
comment|// get the Camel route
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|mbeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"*:type=routes,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|registered
init|=
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|on
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should be registered"
argument_list|,
literal|true
argument_list|,
name|registered
argument_list|)
expr_stmt|;
comment|// check the starting endpoint uri
name|String
name|uri
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"EndpointUri"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"direct://start"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// should be started
name|String
name|state
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"State"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ServiceStatus
operator|.
name|Started
operator|.
name|name
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// should have ThrottlingExceptionRoutePolicy route policy
name|String
name|policy
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"RoutePolicyList"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|startsWith
argument_list|(
literal|"ThrottlingExceptionRoutePolicy"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the RoutePolicy
name|String
name|mbeanName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"org.apache.camel:context=camel-1,name=%s,type=services"
argument_list|,
name|policy
argument_list|)
decl_stmt|;
name|set
operator|=
name|mbeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|mbeanName
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|on
operator|=
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|on
argument_list|)
argument_list|)
expr_stmt|;
comment|// the route has no failures
name|String
name|myType
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"ServiceType"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ThrottlingExceptionRoutePolicy"
argument_list|,
name|myType
argument_list|)
expr_stmt|;
name|ManagedThrottlingExceptionRoutePolicyMBean
name|proxy
init|=
name|JMX
operator|.
name|newMBeanProxy
argument_list|(
name|mbeanServer
argument_list|,
name|on
argument_list|,
name|ManagedThrottlingExceptionRoutePolicyMBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
comment|// state should be closed w/ no failures
name|String
name|myState
init|=
name|proxy
operator|.
name|currentState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"State closed, failures 0"
argument_list|,
name|myState
argument_list|)
expr_stmt|;
comment|// the route has no failures
name|Integer
name|val
init|=
name|proxy
operator|.
name|getCurrentFailures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// the route has no failures
name|Long
name|lastFail
init|=
name|proxy
operator|.
name|getLastFailure
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|lastFail
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// the route is closed
name|Long
name|openAt
init|=
name|proxy
operator|.
name|getOpenAt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|openAt
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// the route has a handler
name|String
name|handlerClass
init|=
name|proxy
operator|.
name|getHalfOpenHandlerName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DummyHandler"
argument_list|,
name|handlerClass
argument_list|)
expr_stmt|;
comment|// values set during construction of class
name|Integer
name|threshold
init|=
name|proxy
operator|.
name|getFailureThreshold
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|threshold
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|window
init|=
name|proxy
operator|.
name|getFailureWindow
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000L
argument_list|,
name|window
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|halfOpenAfter
init|=
name|proxy
operator|.
name|getHalfOpenAfter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5000L
argument_list|,
name|halfOpenAfter
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// change value
name|proxy
operator|.
name|setHalfOpenAfter
argument_list|(
literal|10000L
argument_list|)
expr_stmt|;
name|halfOpenAfter
operator|=
name|proxy
operator|.
name|getHalfOpenAfter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000L
argument_list|,
name|halfOpenAfter
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// state should be closed w/ no failures
name|myState
operator|=
name|proxy
operator|.
name|currentState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|myState
operator|.
name|contains
argument_list|(
literal|"State closed, failures 1, last failure"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the route has 1 failure
name|val
operator|=
name|proxy
operator|.
name|getCurrentFailures
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// the route has 1 failure X mills ago
name|lastFail
operator|=
name|proxy
operator|.
name|getLastFailure
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|lastFail
operator|.
name|longValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrottlingExceptionRoutePolicy
name|policy
init|=
operator|new
name|ThrottlingExceptionRoutePolicy
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|,
literal|5000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|policy
operator|.
name|setHalfOpenHandler
argument_list|(
operator|new
name|DummyHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"testRoute"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:foo"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|BoomProcess
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|BoomProcess
class|class
name|BoomProcess
implements|implements
name|Processor
block|{
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// need to sleep a little to cause last failure to be slow
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"boom!"
argument_list|)
throw|;
block|}
block|}
DECL|class|DummyHandler
class|class
name|DummyHandler
implements|implements
name|ThrottlingExceptionHalfOpenHandler
block|{
annotation|@
name|Override
DECL|method|isReadyToBeClosed ()
specifier|public
name|boolean
name|isReadyToBeClosed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

