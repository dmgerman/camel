begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|CamelOpenMBeanTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|ExceptionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|GroupAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|HttpAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedComponentMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|JSonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed Component"
argument_list|)
DECL|class|ManagedComponent
specifier|public
class|class
name|ManagedComponent
implements|implements
name|ManagedInstance
implements|,
name|ManagedComponentMBean
block|{
DECL|field|component
specifier|private
specifier|final
name|Component
name|component
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|ManagedComponent (String name, Component component)
specifier|public
name|ManagedComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
DECL|method|init (ManagementStrategy strategy)
specifier|public
name|void
name|init
parameter_list|(
name|ManagementStrategy
name|strategy
parameter_list|)
block|{
comment|// do nothing
block|}
DECL|method|getComponent ()
specifier|public
name|Component
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|getComponentName ()
specifier|public
name|String
name|getComponentName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getState ()
specifier|public
name|String
name|getState
parameter_list|()
block|{
comment|// must use String type to be sure remote JMX can read the attribute without requiring Camel classes.
if|if
condition|(
name|component
operator|instanceof
name|StatefulService
condition|)
block|{
name|ServiceStatus
name|status
init|=
operator|(
operator|(
name|StatefulService
operator|)
name|component
operator|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
return|return
name|status
operator|.
name|name
argument_list|()
return|;
block|}
comment|// assume started if not a ServiceSupport instance
return|return
name|ServiceStatus
operator|.
name|Started
operator|.
name|name
argument_list|()
return|;
block|}
DECL|method|getCamelId ()
specifier|public
name|String
name|getCamelId
parameter_list|()
block|{
return|return
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getCamelManagementName ()
specifier|public
name|String
name|getCamelManagementName
parameter_list|()
block|{
return|return
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getManagementName
argument_list|()
return|;
block|}
DECL|method|getInstance ()
specifier|public
name|Object
name|getInstance
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|informationJson ()
specifier|public
name|String
name|informationJson
parameter_list|()
block|{
try|try
block|{
comment|// a component may have been given a different name, so resolve its default name by its java type
comment|// as we can find the component json information from the default component name
name|String
name|defaultName
init|=
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|resolveComponentDefaultName
argument_list|(
name|component
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|target
init|=
name|defaultName
operator|!=
literal|null
condition|?
name|defaultName
else|:
name|name
decl_stmt|;
return|return
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getComponentParameterJsonSchema
argument_list|(
name|target
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|explain (boolean allOptions)
specifier|public
name|TabularData
name|explain
parameter_list|(
name|boolean
name|allOptions
parameter_list|)
block|{
try|try
block|{
comment|// a component may have been given a different name, so resolve its default name by its java type
comment|// as we can find the component json information from the default component name
name|String
name|defaultName
init|=
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|resolveComponentDefaultName
argument_list|(
name|component
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|target
init|=
name|defaultName
operator|!=
literal|null
condition|?
name|defaultName
else|:
name|name
decl_stmt|;
name|String
name|json
init|=
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|explainComponentJson
argument_list|(
name|target
argument_list|,
name|allOptions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TabularData
name|answer
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|CamelOpenMBeanTypes
operator|.
name|explainComponentTabularType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|name
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|kind
init|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
decl_stmt|;
name|String
name|group
init|=
name|row
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
operator|!=
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
operator|!=
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|type
init|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
name|String
name|deprecated
init|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
operator|!=
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|secret
init|=
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
operator|!=
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
operator|!=
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
operator|!=
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|description
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
operator|!=
literal|null
condition|?
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
else|:
literal|""
decl_stmt|;
name|CompositeType
name|ct
init|=
name|CamelOpenMBeanTypes
operator|.
name|explainComponentCompositeType
argument_list|()
decl_stmt|;
name|CompositeData
name|data
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"option"
block|,
literal|"kind"
block|,
literal|"group"
block|,
literal|"label"
block|,
literal|"type"
block|,
literal|"java type"
block|,
literal|"deprecated"
block|,
literal|"secret"
block|,
literal|"value"
block|,
literal|"default value"
block|,
literal|"description"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|kind
block|,
name|group
block|,
name|label
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|secret
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isVerifySupported ()
specifier|public
name|boolean
name|isVerifySupported
parameter_list|()
block|{
return|return
name|component
operator|.
name|getExtension
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|class
argument_list|)
operator|.
name|isPresent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|verify (String scope, Map<String, String> options)
specifier|public
name|ComponentVerifierExtension
operator|.
name|Result
name|verify
parameter_list|(
name|String
name|scope
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|Scope
name|scopeEnum
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|Scope
operator|.
name|fromString
argument_list|(
name|scope
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
argument_list|>
name|verifier
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifier
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|Result
name|result
init|=
name|verifier
operator|.
name|get
argument_list|()
operator|.
name|verify
argument_list|(
name|scopeEnum
argument_list|,
name|CastUtils
operator|.
name|cast
argument_list|(
name|options
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rstatus
init|=
name|result
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|rscope
init|=
name|result
operator|.
name|getScope
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|ResultImpl
argument_list|(
name|Scope
operator|.
name|valueOf
argument_list|(
name|rscope
argument_list|)
argument_list|,
name|Status
operator|.
name|valueOf
argument_list|(
name|rstatus
argument_list|)
argument_list|,
name|result
operator|.
name|getErrors
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|translate
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ResultImpl
argument_list|(
name|Scope
operator|.
name|PARAMETERS
argument_list|,
name|Status
operator|.
name|UNSUPPORTED
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ResultImpl
argument_list|(
name|Scope
operator|.
name|PARAMETERS
argument_list|,
name|Status
operator|.
name|UNSUPPORTED
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|VerificationErrorImpl
argument_list|(
name|StandardCode
operator|.
name|UNSUPPORTED_SCOPE
argument_list|,
literal|"Unsupported scope: "
operator|+
name|scope
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|translate (org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError error)
specifier|private
name|VerificationError
name|translate
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
name|error
parameter_list|)
block|{
return|return
operator|new
name|VerificationErrorImpl
argument_list|(
name|translate
argument_list|(
name|error
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|,
name|error
operator|.
name|getDescription
argument_list|()
argument_list|,
name|error
operator|.
name|getParameterKeys
argument_list|()
argument_list|,
name|translate
argument_list|(
name|error
operator|.
name|getDetails
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|translate (Map<org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.Attribute, Object> details)
specifier|private
name|Map
argument_list|<
name|VerificationError
operator|.
name|Attribute
argument_list|,
name|Object
argument_list|>
name|translate
parameter_list|(
name|Map
argument_list|<
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|Attribute
argument_list|,
name|Object
argument_list|>
name|details
parameter_list|)
block|{
return|return
name|details
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|translate
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|Entry
operator|::
name|getValue
argument_list|)
argument_list|)
return|;
block|}
DECL|method|translate (org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.Attribute attribute)
specifier|private
name|VerificationError
operator|.
name|Attribute
name|translate
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|Attribute
name|attribute
parameter_list|)
block|{
if|if
condition|(
name|attribute
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|GroupAttribute
operator|.
name|GROUP_NAME
condition|)
block|{
return|return
name|GroupAttribute
operator|.
name|GROUP_NAME
return|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|GroupAttribute
operator|.
name|GROUP_OPTIONS
condition|)
block|{
return|return
name|GroupAttribute
operator|.
name|GROUP_OPTIONS
return|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|HttpAttribute
operator|.
name|HTTP_CODE
condition|)
block|{
return|return
name|HttpAttribute
operator|.
name|HTTP_CODE
return|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|HttpAttribute
operator|.
name|HTTP_REDIRECT
condition|)
block|{
return|return
name|HttpAttribute
operator|.
name|HTTP_REDIRECT
return|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|HttpAttribute
operator|.
name|HTTP_TEXT
condition|)
block|{
return|return
name|HttpAttribute
operator|.
name|HTTP_TEXT
return|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|ExceptionAttribute
operator|.
name|EXCEPTION_CLASS
condition|)
block|{
return|return
name|ExceptionAttribute
operator|.
name|EXCEPTION_CLASS
return|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|ExceptionAttribute
operator|.
name|EXCEPTION_INSTANCE
condition|)
block|{
return|return
name|ExceptionAttribute
operator|.
name|EXCEPTION_INSTANCE
return|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
return|return
name|VerificationError
operator|.
name|asAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|translate (org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.Code code)
specifier|private
name|VerificationError
operator|.
name|Code
name|translate
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|Code
name|code
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
condition|)
block|{
return|return
name|StandardCode
operator|.
name|AUTHENTICATION
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|EXCEPTION
condition|)
block|{
return|return
name|StandardCode
operator|.
name|EXCEPTION
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|INTERNAL
condition|)
block|{
return|return
name|StandardCode
operator|.
name|INTERNAL
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|MISSING_PARAMETER
condition|)
block|{
return|return
name|StandardCode
operator|.
name|MISSING_PARAMETER
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|UNKNOWN_PARAMETER
condition|)
block|{
return|return
name|StandardCode
operator|.
name|UNKNOWN_PARAMETER
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|ILLEGAL_PARAMETER
condition|)
block|{
return|return
name|StandardCode
operator|.
name|ILLEGAL_PARAMETER
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|ILLEGAL_PARAMETER_GROUP_COMBINATION
condition|)
block|{
return|return
name|StandardCode
operator|.
name|ILLEGAL_PARAMETER_GROUP_COMBINATION
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|ILLEGAL_PARAMETER_VALUE
condition|)
block|{
return|return
name|StandardCode
operator|.
name|ILLEGAL_PARAMETER_VALUE
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|INCOMPLETE_PARAMETER_GROUP
condition|)
block|{
return|return
name|StandardCode
operator|.
name|ILLEGAL_PARAMETER_GROUP_COMBINATION
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|UNSUPPORTED
condition|)
block|{
return|return
name|StandardCode
operator|.
name|UNSUPPORTED
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|UNSUPPORTED_SCOPE
condition|)
block|{
return|return
name|StandardCode
operator|.
name|UNSUPPORTED_SCOPE
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|UNSUPPORTED_COMPONENT
condition|)
block|{
return|return
name|StandardCode
operator|.
name|UNSUPPORTED_COMPONENT
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
operator|.
name|VerificationError
operator|.
name|StandardCode
operator|.
name|GENERIC
condition|)
block|{
return|return
name|StandardCode
operator|.
name|GENERIC
return|;
block|}
elseif|else
if|if
condition|(
name|code
operator|!=
literal|null
condition|)
block|{
return|return
name|VerificationError
operator|.
name|asCode
argument_list|(
name|code
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|VerificationErrorImpl
specifier|public
specifier|static
class|class
name|VerificationErrorImpl
implements|implements
name|VerificationError
block|{
DECL|field|code
specifier|private
specifier|final
name|Code
name|code
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
DECL|field|parameterKeys
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|parameterKeys
decl_stmt|;
DECL|field|details
specifier|private
specifier|final
name|Map
argument_list|<
name|Attribute
argument_list|,
name|Object
argument_list|>
name|details
decl_stmt|;
DECL|method|VerificationErrorImpl (Code code, String description)
specifier|public
name|VerificationErrorImpl
parameter_list|(
name|Code
name|code
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|parameterKeys
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|details
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
DECL|method|VerificationErrorImpl (Code code, String description, Set<String> parameterKeys, Map<Attribute, Object> details)
specifier|public
name|VerificationErrorImpl
parameter_list|(
name|Code
name|code
parameter_list|,
name|String
name|description
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|parameterKeys
parameter_list|,
name|Map
argument_list|<
name|Attribute
argument_list|,
name|Object
argument_list|>
name|details
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|parameterKeys
operator|=
name|parameterKeys
expr_stmt|;
name|this
operator|.
name|details
operator|=
name|details
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCode ()
specifier|public
name|Code
name|getCode
parameter_list|()
block|{
return|return
name|code
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
annotation|@
name|Override
DECL|method|getParameterKeys ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getParameterKeys
parameter_list|()
block|{
return|return
name|parameterKeys
return|;
block|}
annotation|@
name|Override
DECL|method|getDetails ()
specifier|public
name|Map
argument_list|<
name|Attribute
argument_list|,
name|Object
argument_list|>
name|getDetails
parameter_list|()
block|{
return|return
name|details
return|;
block|}
block|}
DECL|class|ResultImpl
specifier|public
specifier|static
class|class
name|ResultImpl
implements|implements
name|Result
block|{
DECL|field|scope
specifier|private
specifier|final
name|Scope
name|scope
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|Status
name|status
decl_stmt|;
DECL|field|errors
specifier|private
specifier|final
name|List
argument_list|<
name|VerificationError
argument_list|>
name|errors
decl_stmt|;
DECL|method|ResultImpl (Scope scope, Status status, List<VerificationError> errors)
specifier|public
name|ResultImpl
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Status
name|status
parameter_list|,
name|List
argument_list|<
name|VerificationError
argument_list|>
name|errors
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getScope ()
specifier|public
name|Scope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
annotation|@
name|Override
DECL|method|getStatus ()
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getErrors ()
specifier|public
name|List
argument_list|<
name|VerificationError
argument_list|>
name|getErrors
parameter_list|()
block|{
return|return
name|errors
return|;
block|}
block|}
block|}
end_class

end_unit

