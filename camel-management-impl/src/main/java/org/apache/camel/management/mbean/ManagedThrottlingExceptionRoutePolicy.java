begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedThrottlingExceptionRoutePolicyMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|throttling
operator|.
name|ThrottlingExceptionHalfOpenHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|throttling
operator|.
name|ThrottlingExceptionRoutePolicy
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed ThrottlingExceptionRoutePolicy"
argument_list|)
DECL|class|ManagedThrottlingExceptionRoutePolicy
specifier|public
class|class
name|ManagedThrottlingExceptionRoutePolicy
extends|extends
name|ManagedService
implements|implements
name|ManagedThrottlingExceptionRoutePolicyMBean
block|{
DECL|field|policy
specifier|private
specifier|final
name|ThrottlingExceptionRoutePolicy
name|policy
decl_stmt|;
DECL|method|ManagedThrottlingExceptionRoutePolicy (CamelContext context, ThrottlingExceptionRoutePolicy policy)
specifier|public
name|ManagedThrottlingExceptionRoutePolicy
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ThrottlingExceptionRoutePolicy
name|policy
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
DECL|method|getPolicy ()
specifier|public
name|ThrottlingExceptionRoutePolicy
name|getPolicy
parameter_list|()
block|{
return|return
name|policy
return|;
block|}
annotation|@
name|Override
DECL|method|getHalfOpenAfter ()
specifier|public
name|Long
name|getHalfOpenAfter
parameter_list|()
block|{
return|return
name|getPolicy
argument_list|()
operator|.
name|getHalfOpenAfter
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setHalfOpenAfter (Long milliseconds)
specifier|public
name|void
name|setHalfOpenAfter
parameter_list|(
name|Long
name|milliseconds
parameter_list|)
block|{
name|getPolicy
argument_list|()
operator|.
name|setHalfOpenAfter
argument_list|(
name|milliseconds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFailureWindow ()
specifier|public
name|Long
name|getFailureWindow
parameter_list|()
block|{
return|return
name|getPolicy
argument_list|()
operator|.
name|getFailureWindow
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setFailureWindow (Long milliseconds)
specifier|public
name|void
name|setFailureWindow
parameter_list|(
name|Long
name|milliseconds
parameter_list|)
block|{
name|getPolicy
argument_list|()
operator|.
name|setFailureWindow
argument_list|(
name|milliseconds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFailureThreshold ()
specifier|public
name|Integer
name|getFailureThreshold
parameter_list|()
block|{
return|return
name|getPolicy
argument_list|()
operator|.
name|getFailureThreshold
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setFailureThreshold (Integer numberOfFailures)
specifier|public
name|void
name|setFailureThreshold
parameter_list|(
name|Integer
name|numberOfFailures
parameter_list|)
block|{
name|getPolicy
argument_list|()
operator|.
name|setFailureThreshold
argument_list|(
name|numberOfFailures
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|currentState ()
specifier|public
name|String
name|currentState
parameter_list|()
block|{
return|return
name|getPolicy
argument_list|()
operator|.
name|dumpState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHalfOpenHandlerName ()
specifier|public
name|String
name|getHalfOpenHandlerName
parameter_list|()
block|{
name|ThrottlingExceptionHalfOpenHandler
name|obj
init|=
name|getPolicy
argument_list|()
operator|.
name|getHalfOpenHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
return|return
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCurrentFailures ()
specifier|public
name|Integer
name|getCurrentFailures
parameter_list|()
block|{
return|return
name|getPolicy
argument_list|()
operator|.
name|getFailures
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLastFailure ()
specifier|public
name|Long
name|getLastFailure
parameter_list|()
block|{
if|if
condition|(
name|getPolicy
argument_list|()
operator|.
name|getLastFailure
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0L
return|;
block|}
else|else
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getPolicy
argument_list|()
operator|.
name|getLastFailure
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOpenAt ()
specifier|public
name|Long
name|getOpenAt
parameter_list|()
block|{
if|if
condition|(
name|getPolicy
argument_list|()
operator|.
name|getOpenedAt
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0L
return|;
block|}
else|else
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getPolicy
argument_list|()
operator|.
name|getOpenedAt
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

