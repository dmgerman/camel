begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cxf.jaxrs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|BookNotFoundFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
operator|.
name|BookStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|JAXRSClientServerTest
specifier|public
class|class
name|JAXRSClientServerTest
extends|extends
name|CamelSpringTestSupport
block|{
annotation|@
name|BeforeClass
DECL|method|setupPorts ()
specifier|public
specifier|static
name|void
name|setupPorts
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"soapEndpointPort"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"restEndpointPort"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJAXWSClient ()
specifier|public
name|void
name|testJAXWSClient
parameter_list|()
throws|throws
name|BookNotFoundFault
block|{
name|JAXWSClient
name|jaxwsClient
init|=
operator|new
name|JAXWSClient
argument_list|()
decl_stmt|;
name|BookStore
name|bookStore
init|=
name|jaxwsClient
operator|.
name|getBookStore
argument_list|()
decl_stmt|;
name|bookStore
operator|.
name|addBook
argument_list|(
operator|new
name|Book
argument_list|(
literal|"Camel User Guide"
argument_list|,
literal|123L
argument_list|)
argument_list|)
expr_stmt|;
name|Book
name|book
init|=
name|bookStore
operator|.
name|getBook
argument_list|(
literal|123L
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should find the book here"
argument_list|,
name|book
argument_list|)
expr_stmt|;
try|try
block|{
name|book
operator|=
name|bookStore
operator|.
name|getBook
argument_list|(
literal|124L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We should not have this book"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The exception should be BookNotFoundFault"
argument_list|,
name|exception
operator|instanceof
name|BookNotFoundFault
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJAXRSClient ()
specifier|public
name|void
name|testJAXRSClient
parameter_list|()
throws|throws
name|BookNotFoundFault
block|{
comment|// JAXRSClient invocation
name|JAXRSClient
name|jaxrsClient
init|=
operator|new
name|JAXRSClient
argument_list|()
decl_stmt|;
name|BookStore
name|bookStore
init|=
name|jaxrsClient
operator|.
name|getBookStore
argument_list|()
decl_stmt|;
name|bookStore
operator|.
name|addBook
argument_list|(
operator|new
name|Book
argument_list|(
literal|"Camel User Guide"
argument_list|,
literal|124L
argument_list|)
argument_list|)
expr_stmt|;
name|Book
name|book
init|=
name|bookStore
operator|.
name|getBook
argument_list|(
literal|124L
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should find the book here"
argument_list|,
name|book
argument_list|)
expr_stmt|;
try|try
block|{
name|book
operator|=
name|bookStore
operator|.
name|getBook
argument_list|(
literal|126L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We should not have this book"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The exception should be BookNotFoundFault"
argument_list|,
name|exception
operator|instanceof
name|BookNotFoundFault
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/META-INF/spring/JAXRSCamelContext.xml"
block|}
argument_list|)
return|;
block|}
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

