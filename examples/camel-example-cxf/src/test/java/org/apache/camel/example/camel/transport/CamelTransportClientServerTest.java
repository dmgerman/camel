begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.camel.transport
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|camel
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|PingMeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|FaultDetail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|CamelTransportClientServerTest
specifier|public
class|class
name|CamelTransportClientServerTest
extends|extends
name|Assert
block|{
DECL|field|context
specifier|static
name|AbstractApplicationContext
name|context
decl_stmt|;
DECL|field|port
specifier|static
name|int
name|port
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startUpServer ()
specifier|public
specifier|static
name|void
name|startUpServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"skipStartingCamelContext"
argument_list|)
argument_list|)
condition|)
block|{
name|port
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/META-INF/spring/CamelTransportSpringConfig.xml"
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping starting CamelContext as system property skipStartingCamelContext is set to be true."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|shutDownServer ()
specifier|public
specifier|static
name|void
name|shutDownServer
parameter_list|()
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testClientInvocation ()
specifier|public
name|void
name|testClientInvocation
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/GreeterContext/GreeterPort"
argument_list|)
decl_stmt|;
name|Greeter
name|port
init|=
name|client
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The proxy should not be null"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|String
name|resp
init|=
name|port
operator|.
name|sayHi
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong response "
argument_list|,
literal|"Bonjour from EndpointA"
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|=
name|port
operator|.
name|sayHi
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong response "
argument_list|,
literal|"Bonjour from EndpointB"
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|=
name|port
operator|.
name|greetMe
argument_list|(
literal|"Mike"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong response "
argument_list|,
literal|"Hello Mike from EndpointA"
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|=
name|port
operator|.
name|greetMe
argument_list|(
literal|"James"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong response "
argument_list|,
literal|"Hello James from EndpointB"
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|port
operator|.
name|greetMeOneWay
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|port
operator|.
name|pingMe
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected but none thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PingMeFault
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong exception message received"
argument_list|,
literal|"PingMeFault raised by server EndpointB"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|FaultDetail
name|detail
init|=
name|ex
operator|.
name|getFaultInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong FaultDetail major:"
argument_list|,
literal|2
argument_list|,
name|detail
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong FaultDetail minor:"
argument_list|,
literal|1
argument_list|,
name|detail
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

