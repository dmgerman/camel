begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cxf.provider
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPBody
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPBodyElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_comment
comment|/**  * A simple client that uses the JAX-WS Dispatch API to call   * a service endpoint exposed in a servlet container.  */
end_comment

begin_class
DECL|class|Client
specifier|public
specifier|final
class|class
name|Client
block|{
comment|// The endpoint address of the service
DECL|field|endpointAddress
name|String
name|endpointAddress
decl_stmt|;
DECL|method|Client (String endpointAddress)
specifier|public
name|Client
parameter_list|(
name|String
name|endpointAddress
parameter_list|)
block|{
name|this
operator|.
name|endpointAddress
operator|=
name|endpointAddress
expr_stmt|;
block|}
DECL|method|invoke ()
specifier|public
name|String
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Service Qname as defined in the WSDL.
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
comment|// Port QName as defined in the WSDL.
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapOverHttpRouter"
argument_list|)
decl_stmt|;
comment|// Create a dynamic Service instance
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
comment|// Add a port to the Service
name|service
operator|.
name|addPort
argument_list|(
name|portName
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|endpointAddress
argument_list|)
expr_stmt|;
comment|// Create a dispatch instance
name|Dispatch
argument_list|<
name|SOAPMessage
argument_list|>
name|dispatch
init|=
name|service
operator|.
name|createDispatch
argument_list|(
name|portName
argument_list|,
name|SOAPMessage
operator|.
name|class
argument_list|,
name|Service
operator|.
name|Mode
operator|.
name|MESSAGE
argument_list|)
decl_stmt|;
comment|// Use Dispatch as BindingProvider
name|BindingProvider
name|bp
init|=
name|dispatch
decl_stmt|;
name|MessageFactory
name|factory
init|=
operator|(
operator|(
name|SOAPBinding
operator|)
name|bp
operator|.
name|getBinding
argument_list|()
operator|)
operator|.
name|getMessageFactory
argument_list|()
decl_stmt|;
comment|// Create SOAPMessage Request
name|SOAPMessage
name|request
init|=
name|factory
operator|.
name|createMessage
argument_list|()
decl_stmt|;
comment|// Request Body
name|SOAPBody
name|body
init|=
name|request
operator|.
name|getSOAPBody
argument_list|()
decl_stmt|;
comment|// Compose the soap:Body payload
name|QName
name|payloadName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|,
literal|"greetMe"
argument_list|,
literal|"ns1"
argument_list|)
decl_stmt|;
name|SOAPBodyElement
name|payload
init|=
name|body
operator|.
name|addBodyElement
argument_list|(
name|payloadName
argument_list|)
decl_stmt|;
name|SOAPElement
name|message
init|=
name|payload
operator|.
name|addChildElement
argument_list|(
literal|"requestType"
argument_list|)
decl_stmt|;
name|message
operator|.
name|addTextNode
argument_list|(
literal|"Hello Camel!!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Send out the request: Hello Camel!!"
argument_list|)
expr_stmt|;
comment|// Invoke the endpoint synchronously
comment|// Invoke endpoint operation and read response
name|SOAPMessage
name|reply
init|=
name|dispatch
operator|.
name|invoke
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// process the reply
name|body
operator|=
name|reply
operator|.
name|getSOAPBody
argument_list|()
expr_stmt|;
name|QName
name|responseName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|,
literal|"greetMeResponse"
argument_list|)
decl_stmt|;
name|SOAPElement
name|bodyElement
init|=
operator|(
name|SOAPElement
operator|)
name|body
operator|.
name|getChildElements
argument_list|(
name|responseName
argument_list|)
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|responseMessageText
init|=
name|bodyElement
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Get the response: "
operator|+
name|responseMessageText
argument_list|)
expr_stmt|;
return|return
name|responseMessageText
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
literal|"http://localhost:9000/GreeterContext/SOAPMessageService"
argument_list|)
decl_stmt|;
name|client
operator|.
name|invoke
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

