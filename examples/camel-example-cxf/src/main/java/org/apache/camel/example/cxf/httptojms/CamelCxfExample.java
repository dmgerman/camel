begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cxf.httptojms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|httptojms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_comment
comment|/**  * An example for demonstrating how Camel works as a Router.  * This example shows how Camel can route a SOAP client's HTTP request  * to a SOAP over JMS Service.  */
end_comment

begin_class
DECL|class|CamelCxfExample
specifier|public
specifier|final
class|class
name|CamelCxfExample
block|{
DECL|field|ROUTER_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ROUTER_ADDRESS
init|=
literal|"http://localhost:9001/SoapContext/SoapPort"
decl_stmt|;
DECL|field|SERVICE_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_ADDRESS
init|=
literal|"http://localhost:9003/SoapContext/SoapPort"
decl_stmt|;
DECL|field|SERVICE_CLASS
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_CLASS
init|=
literal|"serviceClass=org.apache.hello_world_soap_http.Greeter"
decl_stmt|;
DECL|field|WSDL_LOCATION
specifier|private
specifier|static
specifier|final
name|String
name|WSDL_LOCATION
init|=
literal|"wsdlURL=wsdl/hello_world.wsdl"
decl_stmt|;
DECL|field|SERVICE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"serviceName={http://apache.org/hello_world_soap_http}SOAPService"
decl_stmt|;
DECL|field|SOAP_OVER_HTTP_ROUTER
specifier|private
specifier|static
specifier|final
name|String
name|SOAP_OVER_HTTP_ROUTER
init|=
literal|"portName={http://apache.org/hello_world_soap_http}SoapOverHttpRouter"
decl_stmt|;
DECL|field|SOAP_OVER_JMS
specifier|private
specifier|static
specifier|final
name|String
name|SOAP_OVER_JMS
init|=
literal|"portName={http://apache.org/hello_world_soap_http}SoapOverJms"
decl_stmt|;
DECL|field|ROUTER_ENDPOINT_URI
specifier|private
specifier|static
specifier|final
name|String
name|ROUTER_ENDPOINT_URI
init|=
literal|"cxf://"
operator|+
name|ROUTER_ADDRESS
operator|+
literal|"?"
operator|+
name|SERVICE_CLASS
operator|+
literal|"&"
operator|+
name|WSDL_LOCATION
operator|+
literal|"&"
operator|+
name|SERVICE_NAME
operator|+
literal|"&"
operator|+
name|SOAP_OVER_HTTP_ROUTER
operator|+
literal|"&dataFormat=POJO"
decl_stmt|;
DECL|field|SERVICE_ENDPOINT_URI
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_ENDPOINT_URI
init|=
literal|"cxf://"
operator|+
name|SERVICE_ADDRESS
operator|+
literal|"?"
operator|+
name|SERVICE_CLASS
operator|+
literal|"&"
operator|+
name|WSDL_LOCATION
operator|+
literal|"&"
operator|+
name|SERVICE_NAME
operator|+
literal|"&"
operator|+
name|SOAP_OVER_JMS
operator|+
literal|"&dataFormat=POJO"
decl_stmt|;
DECL|method|CamelCxfExample ()
specifier|private
name|CamelCxfExample
parameter_list|()
block|{     }
DECL|class|MyRouteBuilder
specifier|public
specifier|static
class|class
name|MyRouteBuilder
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Here we just pass the exception back, don't need to use errorHandler
name|errorHandler
argument_list|(
name|noErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|ROUTER_ENDPOINT_URI
argument_list|)
operator|.
name|to
argument_list|(
name|SERVICE_ENDPOINT_URI
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e1
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
comment|// END SNIPPET: e1
comment|// Set up the JMS broker and the CXF SOAP over JMS server
comment|// START SNIPPET: e2
name|JmsBroker
name|broker
init|=
operator|new
name|JmsBroker
argument_list|()
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// END SNIPPET: e2
comment|// Add some configuration by hand ...
comment|// START SNIPPET: e3
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// Here we just pass the exception back, don't need to use errorHandler
name|errorHandler
argument_list|(
name|noErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|ROUTER_ENDPOINT_URI
argument_list|)
operator|.
name|to
argument_list|(
name|SERVICE_ENDPOINT_URI
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e3
comment|// Starting the routing context
comment|// Using the CXF Client to kick off the invocations
comment|// START SNIPPET: e4
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|ROUTER_ADDRESS
operator|+
literal|"?wsdl"
argument_list|)
decl_stmt|;
comment|// END SNIPPET: e4
comment|// Now everything is set up - let's start the context
name|client
operator|.
name|invoke
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

