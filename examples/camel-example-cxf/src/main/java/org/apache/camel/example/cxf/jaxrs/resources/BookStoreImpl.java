begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cxf.jaxrs.resources
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_class
DECL|class|BookStoreImpl
specifier|public
class|class
name|BookStoreImpl
implements|implements
name|BookStore
block|{
DECL|field|books
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
name|books
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|isRest
specifier|private
name|boolean
name|isRest
decl_stmt|;
DECL|method|BookStoreImpl (boolean restFlag)
specifier|public
name|BookStoreImpl
parameter_list|(
name|boolean
name|restFlag
parameter_list|)
block|{
name|isRest
operator|=
name|restFlag
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|BookStoreImpl ()
specifier|public
name|BookStoreImpl
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|getBook (Long id)
specifier|public
name|Book
name|getBook
parameter_list|(
name|Long
name|id
parameter_list|)
throws|throws
name|BookNotFoundFault
block|{
if|if
condition|(
name|books
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
name|BookNotFoundDetails
name|details
init|=
operator|new
name|BookNotFoundDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRest
condition|)
block|{
throw|throw
operator|new
name|BookNotFoundFault
argument_list|(
literal|"Can't find the Book with id "
operator|+
name|id
argument_list|,
name|details
argument_list|)
throw|;
block|}
else|else
block|{
name|Response
name|r
init|=
name|Response
operator|.
name|status
argument_list|(
literal|404
argument_list|)
operator|.
name|header
argument_list|(
literal|"BOOK-HEADER"
argument_list|,
literal|"No Book with id "
operator|+
name|id
operator|+
literal|" is available"
argument_list|)
operator|.
name|entity
argument_list|(
name|details
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|r
argument_list|)
throw|;
block|}
block|}
return|return
name|books
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|addBook (Book book)
specifier|public
name|Book
name|addBook
parameter_list|(
name|Book
name|book
parameter_list|)
block|{
name|books
operator|.
name|put
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|,
name|book
argument_list|)
expr_stmt|;
return|return
name|books
operator|.
name|get
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|book
operator|.
name|setId
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|book
operator|.
name|setName
argument_list|(
literal|"CXF in Action"
argument_list|)
expr_stmt|;
name|books
operator|.
name|put
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|,
name|book
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

