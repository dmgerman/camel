begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|CamelReactiveStreamsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|reactor
operator|.
name|core
operator|.
name|publisher
operator|.
name|Flux
import|;
end_import

begin_comment
comment|/**  * This example shows how to define Camel rest endpoints using the direct client API.  *  * Note: the code is not spring-boot related and could have been placed in a standalone main().  */
end_comment

begin_class
annotation|@
name|Configuration
annotation|@
name|ConditionalOnProperty
argument_list|(
literal|"examples.client-api.rest"
argument_list|)
DECL|class|ClientAPIRestExample
specifier|public
class|class
name|ClientAPIRestExample
block|{
annotation|@
name|Component
DECL|class|ClientAPIRestExampleStreams
specifier|public
specifier|static
class|class
name|ClientAPIRestExampleStreams
block|{
annotation|@
name|Autowired
DECL|field|camel
specifier|private
name|CamelReactiveStreamsService
name|camel
decl_stmt|;
annotation|@
name|PostConstruct
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|// Rest endpoint to retrieve all orders: http://localhost:8080/camel/orders
name|camel
operator|.
name|process
argument_list|(
literal|"rest:get:orders"
argument_list|,
name|exchange
lambda|->
name|Flux
operator|.
name|from
argument_list|(
name|exchange
argument_list|)
operator|.
name|flatMap
argument_list|(
name|ex
lambda|->
name|allOrders
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rest endpoint to retrieve an order.
comment|// Try: http://localhost:8080/camel/orders/1
comment|// Or: http://localhost:8080/camel/orders/xxx
name|camel
operator|.
name|process
argument_list|(
literal|"rest:get:orders/{orderId}"
argument_list|,
name|exchange
lambda|->
name|Flux
operator|.
name|from
argument_list|(
name|exchange
argument_list|)
operator|.
name|map
argument_list|(
name|ex
lambda|->
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"orderId"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|this
operator|::
name|toOrderInfo
argument_list|)
operator|.
name|map
argument_list|(
name|Object
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|switchIfEmpty
argument_list|(
name|Flux
operator|.
name|from
argument_list|(
name|exchange
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|ex
lambda|->
name|ex
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Not found"
argument_list|)
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|ex
lambda|->
name|ex
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
literal|404
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|toOrderInfo (String orderId)
specifier|private
name|Publisher
argument_list|<
name|String
argument_list|>
name|toOrderInfo
parameter_list|(
name|String
name|orderId
parameter_list|)
block|{
comment|// Simulate a retrieval from DB
return|return
name|allOrders
argument_list|()
operator|.
name|filter
argument_list|(
name|o
lambda|->
name|o
operator|.
name|equals
argument_list|(
name|orderId
argument_list|)
argument_list|)
comment|// Ensure the order exists
operator|.
name|map
argument_list|(
literal|"Detailed Info on "
operator|::
name|concat
argument_list|)
comment|// Add detailed info
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|allOrders ()
specifier|private
name|Flux
argument_list|<
name|String
argument_list|>
name|allOrders
parameter_list|()
block|{
return|return
name|Flux
operator|.
name|just
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

