begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|util
operator|.
name|UnwrapStreamProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|reactor
operator|.
name|core
operator|.
name|publisher
operator|.
name|Flux
import|;
end_import

begin_comment
comment|/**  * This example shows how a Camel route defined with rest DSL can call a can asynchronously request data to a reactive stream framework  * and continue processing.  *  * The exchange pattern is in-out from Camel to Reactor.  *  * Note: the Camel and reactor components are placed in the same configuration class for the sake of clarity,  * but they can be moved in their own files.  */
end_comment

begin_class
annotation|@
name|Configuration
annotation|@
name|ConditionalOnProperty
argument_list|(
literal|"examples.others.rest"
argument_list|)
DECL|class|RestExample
specifier|public
class|class
name|RestExample
block|{
comment|/**      * The reactor streams.      */
annotation|@
name|Component
argument_list|(
literal|"calculator"
argument_list|)
DECL|class|RestExampleStreams
specifier|public
specifier|static
class|class
name|RestExampleStreams
block|{
comment|/**          * This method will be called by a Camel route.          */
DECL|method|sum (@eaderR) Publisher<Long> num1, @Header(R) Publisher<Long> num2)
specifier|public
name|Publisher
argument_list|<
name|Long
argument_list|>
name|sum
parameter_list|(
annotation|@
name|Header
argument_list|(
literal|"num1"
argument_list|)
name|Publisher
argument_list|<
name|Long
argument_list|>
name|num1
parameter_list|,
annotation|@
name|Header
argument_list|(
literal|"num2"
argument_list|)
name|Publisher
argument_list|<
name|Long
argument_list|>
name|num2
parameter_list|)
block|{
return|return
name|Flux
operator|.
name|from
argument_list|(
name|num1
argument_list|)
operator|.
name|zipWith
argument_list|(
name|num2
argument_list|)
operator|.
name|map
argument_list|(
name|t
lambda|->
name|t
operator|.
name|getT1
argument_list|()
operator|+
name|t
operator|.
name|getT2
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * The Camel Configuration.      */
annotation|@
name|Component
DECL|class|RestExampleRoutes
specifier|public
specifier|static
class|class
name|RestExampleRoutes
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The full path should be eg.: http://localhost:8080/camel/sum/23/31
name|rest
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sum/{num1}/{num2}"
argument_list|)
operator|.
name|produces
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|route
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"num1"
argument_list|)
operator|.
name|simple
argument_list|(
literal|"headerAs(num1,Long)"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"num2"
argument_list|)
operator|.
name|simple
argument_list|(
literal|"headerAs(num2,Long)"
argument_list|)
operator|.
name|bean
argument_list|(
literal|"calculator"
argument_list|,
literal|"sum"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|UnwrapStreamProcessor
argument_list|()
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|simple
argument_list|(
literal|"The result is: ${body}"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

