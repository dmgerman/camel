begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|util
operator|.
name|UnwrapStreamProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|reactor
operator|.
name|core
operator|.
name|publisher
operator|.
name|Flux
import|;
end_import

begin_comment
comment|/**  * This example shows how Camel can asynchronously request data to a reactive stream framework  * and continue processing.  *  * The exchange pattern is in-out from Camel to Reactor.  *  * Note: the Camel and reactor components are placed in the same configuration class for the sake of clarity,  * but they can be moved in their own files.  */
end_comment

begin_class
annotation|@
name|Configuration
annotation|@
name|ConditionalOnProperty
argument_list|(
literal|"examples.basic.camel-to-reactor-in-out"
argument_list|)
DECL|class|BasicCamelToReactorInOutExample
specifier|public
class|class
name|BasicCamelToReactorInOutExample
block|{
comment|/**      * The reactor streams.      */
annotation|@
name|Component
argument_list|(
literal|"userBean"
argument_list|)
DECL|class|BasicCamelToReactorInOutExampleStreams
specifier|public
specifier|static
class|class
name|BasicCamelToReactorInOutExampleStreams
block|{
comment|/**          * This method will be called by a Camel route.          */
DECL|method|getUserInfo (Publisher<Long> userId)
specifier|public
name|Publisher
argument_list|<
name|UserInfo
argument_list|>
name|getUserInfo
parameter_list|(
name|Publisher
argument_list|<
name|Long
argument_list|>
name|userId
parameter_list|)
block|{
return|return
name|Flux
operator|.
name|from
argument_list|(
name|userId
argument_list|)
operator|.
name|map
argument_list|(
name|UserInfo
operator|::
operator|new
argument_list|)
operator|.
name|flatMap
argument_list|(
name|this
operator|::
name|retrieveAddress
argument_list|)
operator|.
name|flatMap
argument_list|(
name|this
operator|::
name|retrieveName
argument_list|)
return|;
block|}
comment|/**          * This is a sample utility method.          */
DECL|method|retrieveAddress (UserInfo user)
specifier|private
name|Publisher
argument_list|<
name|UserInfo
argument_list|>
name|retrieveAddress
parameter_list|(
name|UserInfo
name|user
parameter_list|)
block|{
comment|// you can do an async database retrieval here
return|return
name|Flux
operator|.
name|just
argument_list|(
name|user
operator|.
name|withAddress
argument_list|(
literal|"Address"
operator|+
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|retrieveName (UserInfo user)
specifier|private
name|Publisher
argument_list|<
name|UserInfo
argument_list|>
name|retrieveName
parameter_list|(
name|UserInfo
name|user
parameter_list|)
block|{
comment|// you can do an async database retrieval here
return|return
name|Flux
operator|.
name|just
argument_list|(
name|user
operator|.
name|withName
argument_list|(
literal|"Name"
operator|+
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * The Camel Configuration.      */
annotation|@
name|Component
DECL|class|BasicCamelToReactorInOutExampleRoutes
specifier|public
specifier|static
class|class
name|BasicCamelToReactorInOutExampleRoutes
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Generate a Id and retrieve user data from reactor
name|from
argument_list|(
literal|"timer:clock?period=9000&delay=1500"
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|TIMER_COUNTER
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|Long
operator|.
name|class
argument_list|)
comment|// Sample ID
operator|.
name|bean
argument_list|(
literal|"userBean"
argument_list|,
literal|"getUserInfo"
argument_list|)
comment|// Get the user info from reactor code
operator|.
name|process
argument_list|(
operator|new
name|UnwrapStreamProcessor
argument_list|()
argument_list|)
comment|// Unwrap the Publisher
operator|.
name|log
argument_list|(
literal|"BasicCamelToReactorInOut - Got ${body}"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sample bean used in the example.      */
DECL|class|UserInfo
specifier|public
specifier|static
class|class
name|UserInfo
block|{
DECL|field|id
specifier|private
name|Long
name|id
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|address
specifier|private
name|String
name|address
decl_stmt|;
DECL|method|UserInfo ()
specifier|public
name|UserInfo
parameter_list|()
block|{         }
DECL|method|UserInfo (Long id)
specifier|public
name|UserInfo
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (Long id)
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|withName (String name)
specifier|public
name|UserInfo
name|withName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getAddress ()
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
DECL|method|setAddress (String address)
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
DECL|method|withAddress (String address)
specifier|public
name|UserInfo
name|withAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"UserInfo{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id="
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", address='"
argument_list|)
operator|.
name|append
argument_list|(
name|address
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

