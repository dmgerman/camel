begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.example.reactive.streams
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|reactive
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|reactive
operator|.
name|streams
operator|.
name|api
operator|.
name|CamelReactiveStreamsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactivestreams
operator|.
name|Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|reactor
operator|.
name|core
operator|.
name|publisher
operator|.
name|Flux
import|;
end_import

begin_class
annotation|@
name|Component
DECL|class|SampleReactiveStreams
specifier|public
class|class
name|SampleReactiveStreams
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SampleReactiveStreams
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
DECL|field|camelStreams
specifier|private
name|CamelReactiveStreamsService
name|camelStreams
decl_stmt|;
annotation|@
name|PostConstruct
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|Publisher
argument_list|<
name|Integer
argument_list|>
name|numbers
init|=
name|camelStreams
operator|.
name|getPublisher
argument_list|(
literal|"numbers"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Publisher
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|camelStreams
operator|.
name|getPublisher
argument_list|(
literal|"strings"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Flux
operator|.
name|from
argument_list|(
name|numbers
argument_list|)
operator|.
name|zipWith
argument_list|(
name|strings
argument_list|)
operator|.
name|map
argument_list|(
name|tuple
lambda|->
literal|"Seq: "
operator|+
name|tuple
operator|.
name|getT1
argument_list|()
operator|+
literal|" - "
operator|+
name|tuple
operator|.
name|getT2
argument_list|()
argument_list|)
operator|.
name|doOnNext
argument_list|(
name|LOG
operator|::
name|info
argument_list|)
operator|.
name|subscribe
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

