begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.loanbroker.webservice.version.bank
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|loanbroker
operator|.
name|webservice
operator|.
name|version
operator|.
name|bank
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|loanbroker
operator|.
name|webservice
operator|.
name|version
operator|.
name|Constants
import|;
end_import

begin_class
DECL|class|BankServer
specifier|public
class|class
name|BankServer
block|{
DECL|field|endpoint1
specifier|private
name|Endpoint
name|endpoint1
decl_stmt|;
DECL|field|endpoint2
specifier|private
name|Endpoint
name|endpoint2
decl_stmt|;
DECL|field|endpoint3
specifier|private
name|Endpoint
name|endpoint3
decl_stmt|;
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting Bank Server"
argument_list|)
expr_stmt|;
name|Object
name|bank1
init|=
operator|new
name|Bank
argument_list|(
literal|"bank1"
argument_list|)
decl_stmt|;
name|Object
name|bank2
init|=
operator|new
name|Bank
argument_list|(
literal|"bank2"
argument_list|)
decl_stmt|;
name|Object
name|bank3
init|=
operator|new
name|Bank
argument_list|(
literal|"bank3"
argument_list|)
decl_stmt|;
name|endpoint1
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
name|Constants
operator|.
name|BANK1_ADDRESS
argument_list|,
name|bank1
argument_list|)
expr_stmt|;
name|endpoint2
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
name|Constants
operator|.
name|BANK2_ADDRESS
argument_list|,
name|bank2
argument_list|)
expr_stmt|;
name|endpoint3
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
name|Constants
operator|.
name|BANK3_ADDRESS
argument_list|,
name|bank3
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|endpoint1
operator|!=
literal|null
condition|)
block|{
name|endpoint1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpoint2
operator|!=
literal|null
condition|)
block|{
name|endpoint2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpoint3
operator|!=
literal|null
condition|)
block|{
name|endpoint3
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|BankServer
name|server
init|=
operator|new
name|BankServer
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server ready..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server exiting"
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

