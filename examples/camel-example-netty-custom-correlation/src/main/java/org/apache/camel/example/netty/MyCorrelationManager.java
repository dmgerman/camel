begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyCamelState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyCamelStateCorrelationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MyCorrelationManager
specifier|public
class|class
name|MyCorrelationManager
implements|implements
name|NettyCamelStateCorrelationManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MyCorrelationManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|NettyCamelState
argument_list|>
name|map
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|putState (Channel channel, NettyCamelState state)
specifier|public
name|void
name|putState
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|NettyCamelState
name|state
parameter_list|)
block|{
comment|// grab the correlation id
name|String
name|body
init|=
name|state
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the correlation id is the first part of the message
name|String
name|cid
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|body
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|cid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CorrelationID is missing"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"putState({}) on channel: {}"
argument_list|,
name|cid
argument_list|,
name|channel
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|cid
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeState (ChannelHandlerContext channelHandlerContext, Channel channel)
specifier|public
name|void
name|removeState
parameter_list|(
name|ChannelHandlerContext
name|channelHandlerContext
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext channelHandlerContext, Channel channel, Object body)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|channelHandlerContext
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Object
name|body
parameter_list|)
block|{
comment|// the correlation id is the first part of the message
name|String
name|cid
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|body
operator|.
name|toString
argument_list|()
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|cid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CorrelationID is missing"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getState({}) on channel: {}"
argument_list|,
name|cid
argument_list|,
name|channel
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets remove after use as its no longer needed
return|return
name|map
operator|.
name|remove
argument_list|(
name|cid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext channelHandlerContext, Channel channel, Throwable throwable)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|channelHandlerContext
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
comment|// noop
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

