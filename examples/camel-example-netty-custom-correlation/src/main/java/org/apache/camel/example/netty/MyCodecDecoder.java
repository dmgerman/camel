begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|DecoderException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|DelimiterBasedFrameDecoder
import|;
end_import

begin_comment
comment|/**  * Netty decoder that assembles a complete messages from the frames received by Netty.  * The decoder uses delimter based on start and end byte markers, to know when all  * data for a complete message has been received.  */
end_comment

begin_class
DECL|class|MyCodecDecoder
specifier|public
class|class
name|MyCodecDecoder
extends|extends
name|DelimiterBasedFrameDecoder
block|{
DECL|field|MAX_FRAME_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FRAME_LENGTH
init|=
literal|4096
decl_stmt|;
DECL|field|startByte
specifier|private
specifier|static
name|char
name|startByte
init|=
literal|0x0b
decl_stmt|;
comment|// 11 decimal
DECL|field|endByte1
specifier|private
specifier|static
name|char
name|endByte1
init|=
literal|0x1c
decl_stmt|;
comment|// 28 decimal
DECL|field|endByte2
specifier|private
specifier|static
name|char
name|endByte2
init|=
literal|0x0d
decl_stmt|;
comment|// 13 decimal
DECL|method|MyCodecDecoder ()
specifier|public
name|MyCodecDecoder
parameter_list|()
block|{
name|super
argument_list|(
name|MAX_FRAME_LENGTH
argument_list|,
literal|true
argument_list|,
name|Unpooled
operator|.
name|copiedBuffer
argument_list|(
operator|new
name|char
index|[]
block|{
name|endByte1
block|,
name|endByte2
block|}
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, ByteBuf buffer)
specifier|protected
name|Object
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteBuf
name|buf
init|=
operator|(
name|ByteBuf
operator|)
name|super
operator|.
name|decode
argument_list|(
name|ctx
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|pos
init|=
name|buf
operator|.
name|bytesBefore
argument_list|(
operator|(
name|byte
operator|)
name|startByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|ByteBuf
name|msg
init|=
name|buf
operator|.
name|readerIndex
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
operator|.
name|slice
argument_list|()
decl_stmt|;
return|return
name|asString
argument_list|(
name|msg
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|DecoderException
argument_list|(
literal|"Did not find start byte "
operator|+
operator|(
name|int
operator|)
name|startByte
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
comment|// We need to release the buf here to avoid the memory leak
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Message not complete yet - return null to be called again
return|return
literal|null
return|;
block|}
DECL|method|asString (ByteBuf msg)
specifier|private
name|String
name|asString
parameter_list|(
name|ByteBuf
name|msg
parameter_list|)
block|{
comment|// convert the message to a String which Camel will then use
name|String
name|text
init|=
name|msg
operator|.
name|toString
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|text
return|;
block|}
block|}
end_class

end_unit

