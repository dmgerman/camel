begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|sample.camel
package|package
name|sample
operator|.
name|camel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|GetMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|PathVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RestController
import|;
end_import

begin_comment
comment|/**  * Used for simulating a rest service which we can run locally inside Spring Boot  */
end_comment

begin_class
annotation|@
name|RestController
DECL|class|PetController
specifier|public
class|class
name|PetController
block|{
DECL|field|PETS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PETS
init|=
operator|new
name|String
index|[]
block|{
literal|"Snoopy"
block|,
literal|"Fido"
block|,
literal|"Tony the Tiger"
block|}
decl_stmt|;
annotation|@
name|GetMapping
argument_list|(
name|value
operator|=
literal|"/pets/{id}"
argument_list|)
DECL|method|petById (@athVariableR) Integer id)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|petById
parameter_list|(
annotation|@
name|PathVariable
argument_list|(
literal|"id"
argument_list|)
name|Integer
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|>
literal|0
operator|&&
name|id
operator|<=
name|PETS
operator|.
name|length
operator|+
literal|1
condition|)
block|{
name|int
name|index
init|=
name|id
operator|-
literal|1
decl_stmt|;
name|String
name|pet
init|=
name|PETS
index|[
name|index
index|]
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"name"
argument_list|,
name|pet
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

