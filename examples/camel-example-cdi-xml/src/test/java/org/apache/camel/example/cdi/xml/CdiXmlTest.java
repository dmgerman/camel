begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cdi.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cdi
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|AdviceWithRouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|CamelContextStartingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
operator|.
name|CamelCdiRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|CamelCdiRunner
operator|.
name|class
argument_list|)
DECL|class|CdiXmlTest
specifier|public
class|class
name|CdiXmlTest
block|{
annotation|@
name|Named
annotation|@
name|Inject
DECL|field|neo
specifier|private
name|Endpoint
name|neo
decl_stmt|;
annotation|@
name|Inject
DECL|field|prompt
specifier|private
name|ProducerTemplate
name|prompt
decl_stmt|;
DECL|method|pipeMatrixStream (@bserves CamelContextStartingEvent event, ModelCamelContext context)
name|void
name|pipeMatrixStream
parameter_list|(
annotation|@
name|Observes
name|CamelContextStartingEvent
name|event
parameter_list|,
name|ModelCamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|context
operator|.
name|getRouteDefinition
argument_list|(
literal|"matrix"
argument_list|)
operator|.
name|adviceWith
argument_list|(
name|context
argument_list|,
operator|new
name|AdviceWithRouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|weaveAddLast
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:matrix"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|RescueMission
specifier|static
class|class
name|RescueMission
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"seda:rescue?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"rescue mission"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:zion"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Order
argument_list|(
literal|1
argument_list|)
DECL|method|takeTheBluePill (@riR) MockEndpoint matrix)
specifier|public
name|void
name|takeTheBluePill
parameter_list|(
annotation|@
name|Uri
argument_list|(
literal|"mock:matrix"
argument_list|)
name|MockEndpoint
name|matrix
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|matrix
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Matrix Â» Take the blue pill!"
argument_list|)
expr_stmt|;
name|prompt
operator|.
name|sendBody
argument_list|(
name|neo
argument_list|,
literal|"Take the blue pill!"
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|matrix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Order
argument_list|(
literal|2
argument_list|)
DECL|method|takeTheRedPill (@riR) MockEndpoint zion)
specifier|public
name|void
name|takeTheRedPill
parameter_list|(
annotation|@
name|Uri
argument_list|(
literal|"mock:zion"
argument_list|)
name|MockEndpoint
name|zion
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|zion
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|zion
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"location"
argument_list|,
literal|"matrix"
argument_list|)
expr_stmt|;
name|prompt
operator|.
name|sendBody
argument_list|(
name|neo
argument_list|,
literal|"Take the red pill!"
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|zion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Order
argument_list|(
literal|3
argument_list|)
DECL|method|verifyRescue (CamelContext context)
specifier|public
name|void
name|verifyRescue
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|Awaitility
operator|.
name|await
argument_list|(
literal|"Neo is still in the matrix!"
argument_list|)
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|ServiceStatus
operator|.
name|Stopped
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getRouteStatus
argument_list|(
literal|"terminal"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

