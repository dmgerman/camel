begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cdi.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cdi
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Disposes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|RatioGauge
operator|.
name|Ratio
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Slf4jReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|io
operator|.
name|astefanutti
operator|.
name|metrics
operator|.
name|cdi
operator|.
name|MetricsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ContextName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|metrics
operator|.
name|MetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|CamelContextStartedEvent
import|;
end_import

begin_comment
comment|/**  * This example registers the following meters into the Metrics registry:  *<ul>  *<li>{@code attempt}</code>: meters the number of calls  *     made to the service to process incoming events</li>  *<li>{@code error}</code>: meters the number of errors  *     corresponding to the number of events that haven't been processed</li>  *<li>{@code generated}</code>: meters the number of events to be processed</li>  *<li>{@code redelivery}</code>: meters the number of retries  *     made to process the events</li>  *<li>{@code success}</code>: meters the number of events successfully processed</li>  *</ul>  * The invariant being: {@code attempt = redelivery - success - error}.  *<p> In addition, a ratio gauge {@code success-ratio = success / generated} is registered.  *  */
end_comment

begin_class
DECL|class|Application
class|class
name|Application
block|{
annotation|@
name|ContextName
argument_list|(
literal|"camel-example-metrics-cdi"
argument_list|)
DECL|class|MetricsRoute
specifier|static
class|class
name|MetricsRoute
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|onException
argument_list|()
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
literal|2
argument_list|)
operator|.
name|logStackTrace
argument_list|(
literal|false
argument_list|)
operator|.
name|logExhausted
argument_list|(
literal|false
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
literal|"Failed processing ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"metrics:meter:redelivery?mark=2"
argument_list|)
comment|// The 'error' meter
operator|.
name|to
argument_list|(
literal|"metrics:meter:error"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"timer:stream?period=1000"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"unreliable-service"
argument_list|)
operator|.
name|setBody
argument_list|(
name|header
argument_list|(
name|Exchange
operator|.
name|TIMER_COUNTER
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"event #"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"Processing ${body}..."
argument_list|)
comment|// The 'generated' meter
operator|.
name|to
argument_list|(
literal|"metrics:meter:generated"
argument_list|)
comment|// The 'attempt' meter via @Metered interceptor
operator|.
name|bean
argument_list|(
name|UnreliableService
operator|.
name|class
argument_list|)
operator|.
name|filter
argument_list|(
name|header
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|WARN
argument_list|,
literal|"Processed ${body} after ${header.CamelRedeliveryCounter} retries"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|MetricsConstants
operator|.
name|HEADER_METER_MARK
argument_list|,
name|header
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|)
argument_list|)
comment|// The 'redelivery' meter
operator|.
name|to
argument_list|(
literal|"metrics:meter:redelivery"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|log
argument_list|(
literal|"Successfully processed ${body}"
argument_list|)
comment|// The 'success' meter
operator|.
name|to
argument_list|(
literal|"metrics:meter:success"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Produces
annotation|@
name|Metric
argument_list|(
name|name
operator|=
literal|"success-ratio"
argument_list|)
comment|// Register a custom gauge that's the ratio of the 'success' meter on the 'generated' meter
DECL|method|successRatio (Meter success, Meter generated)
name|Gauge
argument_list|<
name|Double
argument_list|>
name|successRatio
parameter_list|(
name|Meter
name|success
parameter_list|,
name|Meter
name|generated
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
name|Ratio
operator|.
name|of
argument_list|(
name|success
operator|.
name|getOneMinuteRate
argument_list|()
argument_list|,
name|generated
operator|.
name|getOneMinuteRate
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Produces
annotation|@
name|Singleton
DECL|method|reporter (MetricRegistry registry)
name|Slf4jReporter
name|reporter
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|)
block|{
return|return
name|Slf4jReporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|onStart (@bserves CamelContextStartedEvent event, Slf4jReporter reporter)
name|void
name|onStart
parameter_list|(
annotation|@
name|Observes
name|CamelContextStartedEvent
name|event
parameter_list|,
name|Slf4jReporter
name|reporter
parameter_list|)
block|{
name|reporter
operator|.
name|start
argument_list|(
literal|10L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|onStop (@isposes Slf4jReporter reporter)
name|void
name|onStop
parameter_list|(
annotation|@
name|Disposes
name|Slf4jReporter
name|reporter
parameter_list|)
block|{
name|reporter
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|configure (@bserves MetricsConfiguration config)
name|void
name|configure
parameter_list|(
annotation|@
name|Observes
name|MetricsConfiguration
name|config
parameter_list|)
block|{
comment|// Force Metrics CDI to use absolute names
name|config
operator|.
name|useAbsoluteName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

