begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.examples.master
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|examples
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|embedded
operator|.
name|EmbeddedServletContainerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_class
annotation|@
name|Configuration
DECL|class|MasterNodeConfiguration
specifier|public
class|class
name|MasterNodeConfiguration
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterNodeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Bean
DECL|method|routeBuilder ()
specifier|public
name|RouteBuilder
name|routeBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This route is configured to be local (see application.properties)
comment|// so it will be started regardless of the leadership status if
comment|// this node.
name|from
argument_list|(
literal|"timer:heartbeat?period=10s"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"heartbeat"
argument_list|)
operator|.
name|log
argument_list|(
literal|"HeartBeat route (timer) {{node.id}} ..."
argument_list|)
expr_stmt|;
comment|// This route is configured to be clustered so it will be started
comment|// by the controller only when this node is leader
name|from
argument_list|(
literal|"master:{{node.namespace}}:timer:clustered?period=5s"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"clustered"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Clustered route (timer) {{node.id}} ..."
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * A small hack to find out the a free port so you can run multiple instances      * of the example without having to manually set the property: server.port      */
annotation|@
name|Bean
DECL|method|containerCustomizer ()
specifier|public
name|EmbeddedServletContainerCustomizer
name|containerCustomizer
parameter_list|()
block|{
return|return
name|container
lambda|->
block|{
try|try
init|(
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"server.port: {}"
argument_list|,
name|socket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPort
argument_list|(
name|socket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{             }
block|}
return|;
block|}
block|}
end_class

end_unit

