begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.transformer.demo.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|transformer
operator|.
name|demo
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|transformer
operator|.
name|demo
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|transformer
operator|.
name|demo
operator|.
name|OrderResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * Client that sends order data in various format and verify XML output.  *<p/>  */
end_comment

begin_class
DECL|class|CamelClient
specifier|public
specifier|final
class|class
name|CamelClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CSV_PATH
specifier|private
specifier|static
specifier|final
name|String
name|CSV_PATH
init|=
literal|"target/output/orders.csv"
decl_stmt|;
DECL|method|CamelClient ()
specifier|private
name|CamelClient
parameter_list|()
block|{
comment|// Helper class
block|}
DECL|method|main (final String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|csvLogFile
init|=
operator|new
name|File
argument_list|(
name|CSV_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|csvLogFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Removing log file '{}'..."
argument_list|,
name|csvLogFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|csvLogFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|// START SNIPPET: e1
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Starting 'order' camel route..."
argument_list|)
expr_stmt|;
name|ClassPathXmlApplicationContext
name|context
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"META-INF/spring/camel-context.xml"
argument_list|)
decl_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|context
operator|.
name|getBean
argument_list|(
literal|"order"
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ProducerTemplate
name|producer
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
comment|// END SNIPPET: e1
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|()
operator|.
name|setOrderId
argument_list|(
literal|"Order-Java-0001"
argument_list|)
operator|.
name|setItemId
argument_list|(
literal|"MILK"
argument_list|)
operator|.
name|setQuantity
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Sending '{}' to 'direct:java'"
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|OrderResponse
name|response
init|=
name|producer
operator|.
name|requestBody
argument_list|(
literal|"direct:java"
argument_list|,
name|order
argument_list|,
name|OrderResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Received '{}'"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> CSV log now contains:{}"
argument_list|,
name|getCsvLog
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|String
name|orderXml
init|=
literal|"<order orderId=\"Order-XML-0001\" itemId=\"MIKAN\" quantity=\"365\"/>"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Sending '{}' to 'direct:xml'"
argument_list|,
name|orderXml
argument_list|)
expr_stmt|;
name|String
name|responseXml
init|=
name|producer
operator|.
name|requestBody
argument_list|(
literal|"direct:xml"
argument_list|,
name|orderXml
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Received '{}'"
argument_list|,
name|responseXml
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> CSV log now contains:{}"
argument_list|,
name|getCsvLog
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|String
name|orderJson
init|=
literal|"{\"orderId\":\"Order-JSON-0001\", \"itemId\":\"MIZUYO-KAN\", \"quantity\":\"16350\"}"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Sending '{}' to 'direct:json'"
argument_list|,
name|orderJson
argument_list|)
expr_stmt|;
name|String
name|responseJson
init|=
name|producer
operator|.
name|requestBody
argument_list|(
literal|"direct:json"
argument_list|,
name|orderJson
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> Received '{}'"
argument_list|,
name|responseJson
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---> CSV log now contains:{}"
argument_list|,
name|getCsvLog
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|getCsvLog ()
specifier|public
specifier|static
name|String
name|getCsvLog
parameter_list|()
throws|throws
name|Exception
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
name|CSV_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

