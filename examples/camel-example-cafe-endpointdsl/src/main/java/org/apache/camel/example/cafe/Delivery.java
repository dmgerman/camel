begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cafe
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cafe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|Delivery
specifier|public
class|class
name|Delivery
block|{
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"-----------------------"
decl_stmt|;
DECL|field|deliveredDrinks
specifier|private
name|List
argument_list|<
name|Drink
argument_list|>
name|deliveredDrinks
decl_stmt|;
DECL|field|orderNumber
specifier|private
name|int
name|orderNumber
decl_stmt|;
DECL|method|Delivery (List<Drink> deliveredDrinks)
specifier|public
name|Delivery
parameter_list|(
name|List
argument_list|<
name|Drink
argument_list|>
name|deliveredDrinks
parameter_list|)
block|{
assert|assert
name|deliveredDrinks
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
name|this
operator|.
name|deliveredDrinks
operator|=
name|deliveredDrinks
expr_stmt|;
name|this
operator|.
name|orderNumber
operator|=
name|deliveredDrinks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrderNumber
argument_list|()
expr_stmt|;
block|}
DECL|method|getOrderNumber ()
specifier|public
name|int
name|getOrderNumber
parameter_list|()
block|{
return|return
name|orderNumber
return|;
block|}
DECL|method|getDeliveredDrinks ()
specifier|public
name|List
argument_list|<
name|Drink
argument_list|>
name|getDeliveredDrinks
parameter_list|()
block|{
return|return
name|deliveredDrinks
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|SEPARATOR
operator|+
literal|"\n"
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"Order #"
argument_list|)
operator|.
name|append
argument_list|(
name|getOrderNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Drink
name|drink
range|:
name|getDeliveredDrinks
argument_list|()
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|drink
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|SEPARATOR
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

