begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.metrics.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|metrics
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|io
operator|.
name|astefanutti
operator|.
name|metrics
operator|.
name|cdi
operator|.
name|MetricsExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiCamelExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|api
operator|.
name|Deployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|junit
operator|.
name|Arquillian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ShrinkWrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|EmptyAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|spec
operator|.
name|JavaArchive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Arquillian
operator|.
name|class
argument_list|)
DECL|class|MetricsSampleTest
specifier|public
class|class
name|MetricsSampleTest
block|{
annotation|@
name|Inject
DECL|field|generated
specifier|private
name|Meter
name|generated
decl_stmt|;
annotation|@
name|Inject
DECL|field|attempt
specifier|private
name|Meter
name|attempt
decl_stmt|;
annotation|@
name|Inject
DECL|field|success
specifier|private
name|Meter
name|success
decl_stmt|;
annotation|@
name|Inject
DECL|field|redelivery
specifier|private
name|Meter
name|redelivery
decl_stmt|;
annotation|@
name|Inject
DECL|field|error
specifier|private
name|Meter
name|error
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Metric
argument_list|(
name|name
operator|=
literal|"success-ratio"
argument_list|)
DECL|field|ratio
specifier|private
name|Gauge
argument_list|<
name|Double
argument_list|>
name|ratio
decl_stmt|;
annotation|@
name|Inject
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Deployment
DECL|method|deployment ()
specifier|public
specifier|static
name|Archive
argument_list|<
name|?
argument_list|>
name|deployment
parameter_list|()
block|{
return|return
name|ShrinkWrap
operator|.
name|create
argument_list|(
name|JavaArchive
operator|.
name|class
argument_list|)
comment|// Camel CDI
operator|.
name|addPackage
argument_list|(
name|CdiCamelExtension
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
comment|// Metrics CDI
operator|.
name|addPackage
argument_list|(
name|MetricsExtension
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
comment|// Test classes
operator|.
name|addPackage
argument_list|(
name|MetricsSampleTest
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
comment|// Bean archive deployment descriptor
operator|.
name|addAsManifestResource
argument_list|(
name|EmptyAsset
operator|.
name|INSTANCE
argument_list|,
literal|"beans.xml"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testContextName ()
specifier|public
name|void
name|testContextName
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"Context name is incorrect!"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"camel-example-metrics-cdi"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricsValues ()
specifier|public
name|void
name|testMetricsValues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Wait a while so that the timer can kick in
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// And stop the Camel context so that inflight exchanges get completed
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"Meter counts are not consistent!"
argument_list|,
name|attempt
operator|.
name|getCount
argument_list|()
operator|-
name|redelivery
operator|.
name|getCount
argument_list|()
operator|-
name|success
operator|.
name|getCount
argument_list|()
operator|-
name|error
operator|.
name|getCount
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Success rate gauge value is incorrect!"
argument_list|,
name|ratio
operator|.
name|getValue
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|success
operator|.
name|getOneMinuteRate
argument_list|()
operator|/
name|generated
operator|.
name|getOneMinuteRate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

