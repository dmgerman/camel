begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.spring.boot.rest.jpa
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|spring
operator|.
name|boot
operator|.
name|rest
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|GeneratedValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|ManyToOne
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|NamedQuery
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jpa
operator|.
name|Consumed
import|;
end_import

begin_class
annotation|@
name|Entity
annotation|@
name|Table
argument_list|(
name|name
operator|=
literal|"orders"
argument_list|)
annotation|@
name|NamedQuery
argument_list|(
name|name
operator|=
literal|"new-orders"
argument_list|,
name|query
operator|=
literal|"select order from Order order where order.processed = false"
argument_list|)
DECL|class|Order
specifier|public
class|class
name|Order
block|{
annotation|@
name|Id
annotation|@
name|GeneratedValue
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|amount
specifier|private
name|int
name|amount
decl_stmt|;
annotation|@
name|ManyToOne
DECL|field|book
specifier|private
name|Book
name|book
decl_stmt|;
DECL|field|processed
specifier|private
name|boolean
name|processed
decl_stmt|;
annotation|@
name|Consumed
DECL|method|setProcessed ()
specifier|public
name|void
name|setProcessed
parameter_list|()
block|{
name|processed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (int id)
specifier|public
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getAmount ()
specifier|public
name|int
name|getAmount
parameter_list|()
block|{
return|return
name|amount
return|;
block|}
DECL|method|setAmount (int amount)
specifier|public
name|void
name|setAmount
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
name|this
operator|.
name|amount
operator|=
name|amount
expr_stmt|;
block|}
DECL|method|getBook ()
specifier|public
name|Book
name|getBook
parameter_list|()
block|{
return|return
name|book
return|;
block|}
DECL|method|setBook (Book book)
specifier|public
name|void
name|setBook
parameter_list|(
name|Book
name|book
parameter_list|)
block|{
name|this
operator|.
name|book
operator|=
name|book
expr_stmt|;
block|}
DECL|method|isProcessed ()
specifier|public
name|boolean
name|isProcessed
parameter_list|()
block|{
return|return
name|processed
return|;
block|}
DECL|method|setProcessed (boolean processed)
specifier|public
name|void
name|setProcessed
parameter_list|(
name|boolean
name|processed
parameter_list|)
block|{
name|this
operator|.
name|processed
operator|=
name|processed
expr_stmt|;
block|}
block|}
end_class

end_unit

