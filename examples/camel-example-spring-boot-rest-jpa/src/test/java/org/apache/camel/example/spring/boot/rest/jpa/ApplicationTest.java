begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.spring.boot.rest.jpa
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|spring
operator|.
name|boot
operator|.
name|rest
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
operator|.
name|WebEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|web
operator|.
name|client
operator|.
name|TestRestTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|ParameterizedTypeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|ResponseEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|SpringBootTest
argument_list|(
name|webEnvironment
operator|=
name|WebEnvironment
operator|.
name|RANDOM_PORT
argument_list|)
DECL|class|ApplicationTest
specifier|public
class|class
name|ApplicationTest
block|{
annotation|@
name|Autowired
DECL|field|restTemplate
specifier|private
name|TestRestTemplate
name|restTemplate
decl_stmt|;
annotation|@
name|Autowired
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Test
DECL|method|newOrderTest ()
specifier|public
name|void
name|newOrderTest
parameter_list|()
block|{
comment|// Wait for maximum 5s until the first order gets inserted and processed
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|camelContext
argument_list|)
operator|.
name|fromRoute
argument_list|(
literal|"generate-order"
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|and
argument_list|()
operator|.
name|fromRoute
argument_list|(
literal|"process-order"
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|notify
operator|.
name|matches
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Then call the REST API
name|ResponseEntity
argument_list|<
name|Order
argument_list|>
name|response
init|=
name|restTemplate
operator|.
name|getForEntity
argument_list|(
literal|"/camel-rest-jpa/books/order/1"
argument_list|,
name|Order
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|OK
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
name|response
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|order
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|order
operator|.
name|getAmount
argument_list|()
argument_list|)
operator|.
name|isBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|order
operator|.
name|getBook
argument_list|()
operator|.
name|getItem
argument_list|()
argument_list|)
operator|.
name|isIn
argument_list|(
literal|"Camel"
argument_list|,
literal|"ActiveMQ"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|order
operator|.
name|getBook
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|isIn
argument_list|(
literal|"Camel in Action"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|order
operator|.
name|isProcessed
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|booksTest ()
specifier|public
name|void
name|booksTest
parameter_list|()
block|{
name|ResponseEntity
argument_list|<
name|List
argument_list|<
name|Book
argument_list|>
argument_list|>
name|response
init|=
name|restTemplate
operator|.
name|exchange
argument_list|(
literal|"/camel-rest-jpa/books"
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
literal|null
argument_list|,
operator|new
name|ParameterizedTypeReference
argument_list|<
name|List
argument_list|<
name|Book
argument_list|>
argument_list|>
argument_list|()
block|{             }
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|HttpStatus
operator|.
name|OK
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Book
argument_list|>
name|books
init|=
name|response
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|books
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|books
argument_list|)
operator|.
name|element
argument_list|(
literal|0
argument_list|)
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"item"
argument_list|,
literal|"Camel"
argument_list|)
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"description"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|books
argument_list|)
operator|.
name|element
argument_list|(
literal|1
argument_list|)
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"item"
argument_list|,
literal|"ActiveMQ"
argument_list|)
operator|.
name|hasFieldOrPropertyWithValue
argument_list|(
literal|"description"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

