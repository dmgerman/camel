begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.kafka.avro
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|kafka
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|confluent
operator|.
name|common
operator|.
name|config
operator|.
name|ConfigException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|confluent
operator|.
name|kafka
operator|.
name|schemaregistry
operator|.
name|client
operator|.
name|CachedSchemaRegistryClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|confluent
operator|.
name|kafka
operator|.
name|serializers
operator|.
name|AbstractKafkaAvroDeserializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|confluent
operator|.
name|kafka
operator|.
name|serializers
operator|.
name|KafkaAvroDeserializerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|serialization
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CustomKafkaAvroDeserializer
specifier|public
class|class
name|CustomKafkaAvroDeserializer
extends|extends
name|AbstractKafkaAvroDeserializer
implements|implements
name|Deserializer
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CustomKafkaAvroDeserializer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCHEMA_REGISTRY_URL
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_REGISTRY_URL
init|=
literal|"http://localhost:8081"
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (KafkaAvroDeserializerConfig config)
specifier|public
name|void
name|configure
parameter_list|(
name|KafkaAvroDeserializerConfig
name|config
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ENTER CustomKafkaAvroDeserializer  : configure method "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ENTER CustomKafkaAvroDeserializer  : SCHEMA_REGISTRY_URL "
operator|+
name|SCHEMA_REGISTRY_URL
argument_list|)
expr_stmt|;
if|if
condition|(
name|SCHEMA_REGISTRY_URL
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|config
operator|.
name|ConfigException
argument_list|(
literal|"No schema registry provided"
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|schemas
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|SCHEMA_REGISTRY_URL
argument_list|)
decl_stmt|;
name|this
operator|.
name|schemaRegistry
operator|=
operator|new
name|CachedSchemaRegistryClient
argument_list|(
name|schemas
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|useSpecificAvroReader
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|config
operator|.
name|ConfigException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"EXIT CustomKafkaAvroDeserializer  : configure method "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure (Map<String, ?> configs, boolean isKey)
specifier|public
name|void
name|configure
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|configs
parameter_list|,
name|boolean
name|isKey
parameter_list|)
block|{
name|configure
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deserialize (String s, byte[] bytes)
specifier|public
name|Object
name|deserialize
parameter_list|(
name|String
name|s
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ENTER CustomKafkaAvroDeserializer  : deserialize method "
argument_list|)
expr_stmt|;
return|return
name|deserialize
argument_list|(
name|bytes
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
end_class

end_unit

