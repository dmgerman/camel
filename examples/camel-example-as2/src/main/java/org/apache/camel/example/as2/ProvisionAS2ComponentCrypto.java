begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.as2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|as2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|AS2Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|AS2Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2CompressionAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2EncryptionAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_class
DECL|class|ProvisionAS2ComponentCrypto
specifier|public
class|class
name|ProvisionAS2ComponentCrypto
implements|implements
name|CamelContextAware
block|{
DECL|field|issueKP
specifier|private
name|KeyPair
name|issueKP
decl_stmt|;
DECL|field|issueCert
specifier|private
name|X509Certificate
name|issueCert
decl_stmt|;
DECL|field|signingKP
specifier|private
name|KeyPair
name|signingKP
decl_stmt|;
DECL|field|decryptingKP
specifier|private
name|KeyPair
name|decryptingKP
decl_stmt|;
DECL|field|clientCert
specifier|private
name|X509Certificate
name|clientCert
decl_stmt|;
DECL|field|certList
specifier|private
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certList
decl_stmt|;
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
try|try
block|{
name|setupKeysAndCertificates
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"failed to initialized Camel context for AS component"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|AS2Component
name|as2Component
init|=
name|camelContext
operator|.
name|getComponent
argument_list|(
literal|"as2"
argument_list|,
name|AS2Component
operator|.
name|class
argument_list|)
decl_stmt|;
name|AS2Configuration
name|configuration
init|=
operator|new
name|AS2Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setSigningAlgorithm
argument_list|(
name|AS2SignatureAlgorithm
operator|.
name|SHA512WITHRSA
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setSigningCertificateChain
argument_list|(
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setSigningPrivateKey
argument_list|(
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setSignedReceiptMicAlgorithms
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"sha1"
block|,
literal|"md5"
block|}
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setEncryptingAlgorithm
argument_list|(
name|AS2EncryptionAlgorithm
operator|.
name|AES128_CBC
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setEncryptingCertificateChain
argument_list|(
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDecryptingPrivateKey
argument_list|(
name|decryptingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setCompressionAlgorithm
argument_list|(
name|AS2CompressionAlgorithm
operator|.
name|ZLIB
argument_list|)
expr_stmt|;
name|as2Component
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|setupKeysAndCertificates ()
specifier|private
name|void
name|setupKeysAndCertificates
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// set up our certificates
comment|//
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
literal|1024
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|issueDN
init|=
literal|"O=Punkhorn Software, C=US"
decl_stmt|;
name|issueKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|issueCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|issueKP
argument_list|,
name|issueDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
comment|//
comment|// certificate we sign against
comment|//
name|String
name|signingDN
init|=
literal|"CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US"
decl_stmt|;
name|signingKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|clientCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|signingKP
argument_list|,
name|signingDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
name|certList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|clientCert
argument_list|)
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|issueCert
argument_list|)
expr_stmt|;
comment|// keys used to encrypt/decrypt
name|decryptingKP
operator|=
name|signingKP
expr_stmt|;
block|}
block|}
end_class

end_unit

