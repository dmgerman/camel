begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.bigxml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|bigxml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestUtils
specifier|public
class|class
name|TestUtils
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|basePath
specifier|private
specifier|final
specifier|static
name|String
name|basePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/target/data"
decl_stmt|;
DECL|field|numOfRecords
specifier|private
specifier|final
specifier|static
name|int
name|numOfRecords
init|=
literal|40000
decl_stmt|;
DECL|field|maxWaitTime
specifier|private
specifier|final
specifier|static
name|int
name|maxWaitTime
init|=
literal|5000
decl_stmt|;
DECL|method|getBasePath ()
specifier|public
specifier|static
name|String
name|getBasePath
parameter_list|()
block|{
return|return
name|basePath
return|;
block|}
DECL|method|getNumOfRecords ()
specifier|public
specifier|static
name|int
name|getNumOfRecords
parameter_list|()
block|{
return|return
name|numOfRecords
return|;
block|}
DECL|method|getMaxWaitTime ()
specifier|public
specifier|static
name|int
name|getMaxWaitTime
parameter_list|()
block|{
return|return
name|maxWaitTime
return|;
block|}
DECL|method|buildTestXml ()
specifier|public
specifier|static
name|void
name|buildTestXml
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|basePath
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|basePath
operator|+
literal|"/test.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Building test XML file..."
argument_list|)
expr_stmt|;
name|XMLOutputFactory
name|xof
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLStreamWriter
name|xsw
init|=
name|xof
operator|.
name|createXMLStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
name|xsw
operator|.
name|writeStartDocument
argument_list|(
literal|"UTF-8"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|writeStartElement
argument_list|(
literal|"records"
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|writeAttribute
argument_list|(
literal|"xmlns"
argument_list|,
literal|"http://fvaleri.it/records"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfRecords
condition|;
name|i
operator|++
control|)
block|{
name|xsw
operator|.
name|writeStartElement
argument_list|(
literal|"record"
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|writeStartElement
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|writeCharacters
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|xsw
operator|.
name|writeStartElement
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|writeCharacters
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|xsw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xsw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|xsw
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Test XML file ready (size: {} kB)"
argument_list|,
name|f
operator|.
name|length
argument_list|()
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|xsw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

