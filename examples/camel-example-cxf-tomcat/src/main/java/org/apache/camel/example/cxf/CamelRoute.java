begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|incident
operator|.
name|IncidentService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|incident
operator|.
name|InputReportIncident
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|incident
operator|.
name|OutputReportIncident
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cxf
operator|.
name|incident
operator|.
name|OutputStatusIncident
import|;
end_import

begin_comment
comment|// this static import is needed for older versions of Camel than 2.5
end_comment

begin_comment
comment|// import static org.apache.camel.language.simple.SimpleLanguage.simple;
end_comment

begin_comment
comment|/**  * The Camel route  *  * @version $Revision$  */
end_comment

begin_comment
comment|// START SNIPPET: e1
end_comment

begin_class
DECL|class|CamelRoute
specifier|public
class|class
name|CamelRoute
extends|extends
name|RouteBuilder
block|{
comment|// CXF webservice using code first approach
DECL|field|uri
specifier|private
name|String
name|uri
init|=
literal|"cxf:/incident?serviceClass="
operator|+
name|IncidentService
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|uri
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:input"
argument_list|)
comment|// send the request to the route to handle the operation
comment|// the name of the operation is in that header
operator|.
name|recipientList
argument_list|(
name|simple
argument_list|(
literal|"direct:${header.operationName}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// report incident
name|from
argument_list|(
literal|"direct:reportIncident"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// get the id of the input
name|String
name|id
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputReportIncident
operator|.
name|class
argument_list|)
operator|.
name|getIncidentId
argument_list|()
decl_stmt|;
comment|// set reply including the id
name|OutputReportIncident
name|output
init|=
operator|new
name|OutputReportIncident
argument_list|()
decl_stmt|;
name|output
operator|.
name|setCode
argument_list|(
literal|"OK;"
operator|+
name|id
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:output"
argument_list|)
expr_stmt|;
comment|// status incident
name|from
argument_list|(
literal|"direct:statusIncident"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// set reply
name|OutputStatusIncident
name|output
init|=
operator|new
name|OutputStatusIncident
argument_list|()
decl_stmt|;
name|output
operator|.
name|setStatus
argument_list|(
literal|"IN PROGRESS"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:output"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// END SNIPPET: e1
end_comment

end_unit

