begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cdi.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cdi
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|AdviceWithRouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|RouteReifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|CamelContextStartingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
operator|.
name|CamelCdiRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|deltaspike
operator|.
name|core
operator|.
name|api
operator|.
name|config
operator|.
name|ConfigProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|CamelCdiRunner
operator|.
name|class
argument_list|)
DECL|class|CdiPropertiesTest
specifier|public
class|class
name|CdiPropertiesTest
block|{
DECL|method|advice (@bserves CamelContextStartingEvent event, ModelCamelContext context)
specifier|static
name|void
name|advice
parameter_list|(
annotation|@
name|Observes
name|CamelContextStartingEvent
name|event
parameter_list|,
name|ModelCamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Add a mock endpoint to the end of the route
name|RouteReifier
operator|.
name|adviceWith
argument_list|(
name|context
operator|.
name|getRouteDefinitions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|context
argument_list|,
operator|new
name|AdviceWithRouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|weaveAddLast
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:outbound"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteMessage (@riR) MockEndpoint outbound)
specifier|public
name|void
name|testRouteMessage
parameter_list|(
annotation|@
name|Uri
argument_list|(
literal|"mock:outbound"
argument_list|)
name|MockEndpoint
name|outbound
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Exchange count is incorrect!"
argument_list|,
name|outbound
operator|.
name|getExchanges
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Exchange body is incorrect!"
argument_list|,
name|outbound
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProperties (@onfigPropertyname = R) String destination, @ConfigProperty(name = R) String message)
specifier|public
name|void
name|testProperties
parameter_list|(
annotation|@
name|ConfigProperty
argument_list|(
name|name
operator|=
literal|"destination"
argument_list|)
name|String
name|destination
parameter_list|,
annotation|@
name|ConfigProperty
argument_list|(
name|name
operator|=
literal|"message"
argument_list|)
name|String
name|message
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Property 'destination' value is incorrect!"
argument_list|,
name|destination
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"direct:hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Property 'message' value is incorrect!"
argument_list|,
name|message
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

