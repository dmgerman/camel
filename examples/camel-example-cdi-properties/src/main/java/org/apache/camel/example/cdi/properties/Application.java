begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cdi.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cdi
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ContextName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|DefaultPropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|CamelContextStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|deltaspike
operator|.
name|core
operator|.
name|api
operator|.
name|config
operator|.
name|ConfigProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|deltaspike
operator|.
name|core
operator|.
name|api
operator|.
name|config
operator|.
name|ConfigResolver
import|;
end_import

begin_class
DECL|class|Application
specifier|public
class|class
name|Application
block|{
annotation|@
name|ContextName
argument_list|(
literal|"hello"
argument_list|)
DECL|class|HelloRoute
specifier|static
class|class
name|HelloRoute
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// Property placeholders in endpoint URIs are resolved
comment|// based on configuration properties
name|from
argument_list|(
literal|"{{destination}}"
argument_list|)
operator|.
name|log
argument_list|(
literal|"${body} from CamelContext (${camelContext.name})"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hello (@bserves CamelContextStartedEvent event, @ConfigProperty(name = R) String message, @Uri(R) ProducerTemplate producer)
name|void
name|hello
parameter_list|(
annotation|@
name|Observes
name|CamelContextStartedEvent
name|event
parameter_list|,
comment|// Configuration properties can be injected with @ConfigProperty
annotation|@
name|ConfigProperty
argument_list|(
name|name
operator|=
literal|"message"
argument_list|)
name|String
name|message
parameter_list|,
comment|// Property placeholders in @Uri qualifier are also resolved
annotation|@
name|Uri
argument_list|(
literal|"{{destination}}"
argument_list|)
name|ProducerTemplate
name|producer
parameter_list|)
block|{
name|producer
operator|.
name|sendBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Produces
annotation|@
name|ApplicationScoped
annotation|@
name|Named
argument_list|(
literal|"properties"
argument_list|)
comment|// "properties" component bean that Camel uses to lookup properties
DECL|method|properties (PropertiesParser parser)
name|PropertiesComponent
name|properties
parameter_list|(
name|PropertiesParser
name|parser
parameter_list|)
block|{
name|PropertiesComponent
name|component
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
comment|// Use DeltaSpike as configuration source for Camel CDI
name|component
operator|.
name|setPropertiesParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
comment|// PropertiesParser bean that uses DeltaSpike to resolve properties
DECL|class|DeltaSpikeParser
specifier|static
class|class
name|DeltaSpikeParser
extends|extends
name|DefaultPropertiesParser
block|{
annotation|@
name|Override
DECL|method|parseProperty (String key, String value, Properties properties)
specifier|public
name|String
name|parseProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
return|return
name|ConfigResolver
operator|.
name|getPropertyValue
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

