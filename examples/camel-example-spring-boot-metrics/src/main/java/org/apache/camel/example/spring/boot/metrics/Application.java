begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.spring.boot.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|spring
operator|.
name|boot
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|graphite
operator|.
name|GraphiteReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|graphite
operator|.
name|GraphiteSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|graphite
operator|.
name|GraphiteUDP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|metrics
operator|.
name|routepolicy
operator|.
name|MetricsRoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|CamelContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|SpringApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|SpringBootApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_comment
comment|/**  * A simple Spring Boot application, with a couple of timed camel routes  * configured with camel-metrics. Reports metrics to Graphite via  * dropwizard-metrics GraphiteUDP sender. Has standard spring-actuator endpoints  * such as /beans, /autoconfig, /metrics  */
end_comment

begin_class
annotation|@
name|SpringBootApplication
DECL|class|Application
specifier|public
class|class
name|Application
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @param args no command line args required      */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" *** Starting Camel Metrics Example Application ***"
argument_list|)
expr_stmt|;
name|SpringApplication
operator|.
name|run
argument_list|(
name|Application
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create reporter bean and tell Spring to call stop() when shutting down.      * UPD must be enabled in carbon.conf      *       * @return graphite reporter      */
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|"stop"
argument_list|)
DECL|method|graphiteReporter ()
specifier|public
name|GraphiteReporter
name|graphiteReporter
parameter_list|()
block|{
specifier|final
name|GraphiteSender
name|graphite
init|=
operator|new
name|GraphiteUDP
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|2003
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|GraphiteReporter
name|reporter
init|=
name|GraphiteReporter
operator|.
name|forRegistry
argument_list|(
name|metricRegistry
argument_list|()
argument_list|)
operator|.
name|prefixedWith
argument_list|(
literal|"camel-spring-boot"
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|filter
argument_list|(
name|MetricFilter
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|(
name|graphite
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
name|reporter
return|;
block|}
comment|/**      * @return timed route that logs output every 6 seconds      */
annotation|@
name|Bean
DECL|method|slowRoute ()
specifier|public
name|RouteBuilder
name|slowRoute
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"timer://foo?period=6000"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"slow-route"
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|constant
argument_list|(
literal|"Slow hello world!"
argument_list|)
operator|.
name|log
argument_list|(
literal|"${body}"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * @return timed route that logs output every 2 seconds      */
annotation|@
name|Bean
DECL|method|fastRoute ()
specifier|public
name|RouteBuilder
name|fastRoute
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"timer://foo?period=2000"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"fast-route"
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|constant
argument_list|(
literal|"Fast hello world!"
argument_list|)
operator|.
name|log
argument_list|(
literal|"${body}"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Bean
DECL|method|metricRegistry ()
name|MetricRegistry
name|metricRegistry
parameter_list|()
block|{
return|return
operator|new
name|MetricRegistry
argument_list|()
return|;
block|}
annotation|@
name|Bean
DECL|method|contextConfiguration ()
name|CamelContextConfiguration
name|contextConfiguration
parameter_list|()
block|{
return|return
operator|new
name|CamelContextConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeApplicationStart
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuring Camel metrics on all routes"
argument_list|)
expr_stmt|;
name|MetricsRoutePolicyFactory
name|fac
init|=
operator|new
name|MetricsRoutePolicyFactory
argument_list|()
decl_stmt|;
name|fac
operator|.
name|setMetricsRegistry
argument_list|(
name|metricRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutePolicyFactory
argument_list|(
name|fac
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterApplicationStart
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
comment|// noop
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

