begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.guice.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|guice
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_comment
comment|/**  * Configures the CamelContext, RouteBuilder, Component and Endpoint instances using  * Guice within OSGi platform  *  * @version   */
end_comment

begin_class
DECL|class|MyOSGiModule
specifier|public
class|class
name|MyOSGiModule
extends|extends
name|MyModule
block|{
DECL|field|provider
specifier|private
name|OSGiCamelContextProvider
name|provider
decl_stmt|;
DECL|field|properties
specifier|private
name|Properties
name|properties
decl_stmt|;
DECL|method|MyOSGiModule (BundleContext bundleContext)
name|MyOSGiModule
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|provider
operator|=
operator|new
name|OSGiCamelContextProvider
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|URL
name|jndiPropertiesUrl
decl_stmt|;
if|if
condition|(
name|bundleContext
operator|!=
literal|null
condition|)
block|{
name|jndiPropertiesUrl
operator|=
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getEntry
argument_list|(
literal|"camel.properties"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jndiPropertiesUrl
operator|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/camel.properties"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jndiPropertiesUrl
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|jndiPropertiesUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|configureCamelContext ()
specifier|protected
name|void
name|configureCamelContext
parameter_list|()
block|{
name|bind
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|provider
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
comment|// loading the properties into Guice Context
name|Names
operator|.
name|bindProperties
argument_list|(
name|binder
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|super
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

