begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.google.pubsub
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|google
operator|.
name|pubsub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|json
operator|.
name|GoogleJsonResponseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|Pubsub
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|pubsub
operator|.
name|model
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CreateTopicSubscription
specifier|public
specifier|final
class|class
name|CreateTopicSubscription
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CreateTopicSubscription
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CreateTopicSubscription ()
specifier|private
name|CreateTopicSubscription
parameter_list|()
block|{     }
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|createTopicSubscriptionPair
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|createTopicSubscriptionPair (int ackDeadlineSeconds)
specifier|private
specifier|static
name|void
name|createTopicSubscriptionPair
parameter_list|(
name|int
name|ackDeadlineSeconds
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
name|PubsubUtil
operator|.
name|loadProperties
argument_list|()
decl_stmt|;
name|String
name|projectId
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"pubsub.projectId"
argument_list|)
decl_stmt|;
name|String
name|topic
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"pubsub.topic"
argument_list|)
decl_stmt|;
name|String
name|subscriptionName
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"pubsub.subscription"
argument_list|)
decl_stmt|;
name|String
name|topicFullName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"projects/%s/topics/%s"
argument_list|,
name|projectId
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|String
name|subscriptionFullName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"projects/%s/subscriptions/%s"
argument_list|,
name|projectId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
name|Pubsub
name|pubsub
init|=
name|PubsubUtil
operator|.
name|createConnectionFactory
argument_list|(
name|properties
argument_list|)
operator|.
name|getDefaultClient
argument_list|()
decl_stmt|;
try|try
block|{
name|pubsub
operator|.
name|projects
argument_list|()
operator|.
name|topics
argument_list|()
operator|.
name|create
argument_list|(
name|topicFullName
argument_list|,
operator|new
name|Topic
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GoogleJsonResponseException
name|e
parameter_list|)
block|{
comment|// 409 indicates that the resource is available already
if|if
condition|(
literal|409
operator|==
name|e
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Topic {} already exist"
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|Subscription
name|subscription
init|=
operator|new
name|Subscription
argument_list|()
operator|.
name|setTopic
argument_list|(
name|topicFullName
argument_list|)
operator|.
name|setAckDeadlineSeconds
argument_list|(
name|ackDeadlineSeconds
argument_list|)
decl_stmt|;
name|pubsub
operator|.
name|projects
argument_list|()
operator|.
name|subscriptions
argument_list|()
operator|.
name|create
argument_list|(
name|subscriptionFullName
argument_list|,
name|subscription
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GoogleJsonResponseException
name|e
parameter_list|)
block|{
comment|// 409 indicates that the resource is available already
if|if
condition|(
literal|409
operator|==
name|e
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Subscription {} already exist"
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

