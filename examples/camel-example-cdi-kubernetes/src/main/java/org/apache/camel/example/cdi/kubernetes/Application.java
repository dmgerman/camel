begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cdi.kubernetes
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cdi
operator|.
name|kubernetes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|Pod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|KubernetesClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_comment
comment|/**  * This example periodically polls the list of pods that are deployed to the  * configured Kubernetes cluster.  *  * It relies on the Camel Kubernetes component and emulates the output of the  * {@code kubectl get pods} command.  */
end_comment

begin_class
DECL|class|Application
specifier|public
class|class
name|Application
block|{
annotation|@
name|ApplicationScoped
DECL|class|KubernetesRoute
specifier|static
class|class
name|KubernetesRoute
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"timer:client?period=10s"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"kubernetes-client"
argument_list|)
operator|.
name|onException
argument_list|(
name|KubernetesClientException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
literal|"${exception.message}"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Stopping the Kubernetes route..."
argument_list|)
comment|// Let's stop the route (we may want to implement a way to exit the container)
operator|.
name|to
argument_list|(
literal|"controlbus:route?routeId=kubernetes-client&action=stop&async=true&loggingLevel=DEBUG"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"kubernetes-pods://{{kubernetes-master-url:{{env:KUBERNETES_MASTER}}}}?oauthToken={{kubernetes-oauth-token:}}&operation=listPods"
argument_list|)
operator|.
name|log
argument_list|(
literal|"We currently have ${body.size()} pods:"
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
lambda|->
block|{
name|List
argument_list|<
name|Pod
argument_list|>
name|pods
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Compute the length of the longer pod name
name|String
name|tty
init|=
literal|"%-"
operator|+
operator|(
name|pods
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|pod
lambda|->
name|pod
operator|.
name|getMetadata
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|orElse
argument_list|(
literal|30
argument_list|)
operator|+
literal|2
operator|)
operator|+
literal|"s %-9s %-9s %-10s %s"
decl_stmt|;
comment|// Emulates the output of 'kubectl get pods'
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|tty
argument_list|,
literal|"NAME"
argument_list|,
literal|"READY"
argument_list|,
literal|"STATUS"
argument_list|,
literal|"RESTARTS"
argument_list|,
literal|"AGE"
argument_list|)
argument_list|)
expr_stmt|;
name|pods
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|pod
lambda|->
name|String
operator|.
name|format
argument_list|(
name|tty
argument_list|,
name|pod
operator|.
name|getMetadata
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|pod
operator|.
name|getStatus
argument_list|()
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ContainerStatus
operator|::
name|getReady
argument_list|)
operator|.
name|count
argument_list|()
operator|+
literal|"/"
operator|+
name|pod
operator|.
name|getStatus
argument_list|()
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|pod
operator|.
name|getStatus
argument_list|()
operator|.
name|getPhase
argument_list|()
argument_list|,
name|pod
operator|.
name|getStatus
argument_list|()
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|ContainerStatus
operator|::
name|getRestartCount
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|,
name|formatDuration
argument_list|(
name|Duration
operator|.
name|between
argument_list|(
name|ZonedDateTime
operator|.
name|parse
argument_list|(
name|pod
operator|.
name|getStatus
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|,
name|ZonedDateTime
operator|.
name|now
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|System
operator|.
name|out
operator|::
name|println
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let's format duration the kubectl way!
DECL|method|formatDuration (Duration duration)
specifier|static
name|String
name|formatDuration
parameter_list|(
name|Duration
name|duration
parameter_list|)
block|{
if|if
condition|(
name|Duration
operator|.
name|ofDays
argument_list|(
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|duration
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|duration
operator|.
name|toDays
argument_list|()
operator|+
literal|"d"
return|;
block|}
elseif|else
if|if
condition|(
name|Duration
operator|.
name|ofHours
argument_list|(
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|duration
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|duration
operator|.
name|toHours
argument_list|()
operator|+
literal|"h"
return|;
block|}
elseif|else
if|if
condition|(
name|Duration
operator|.
name|ofMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|duration
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|duration
operator|.
name|toMinutes
argument_list|()
operator|+
literal|"m"
return|;
block|}
else|else
block|{
return|return
name|duration
operator|.
name|getSeconds
argument_list|()
operator|+
literal|"s"
return|;
block|}
block|}
annotation|@
name|Produces
annotation|@
name|ApplicationScoped
annotation|@
name|Named
argument_list|(
literal|"properties"
argument_list|)
comment|// "properties" component bean that Camel uses to lookup properties
DECL|method|properties ()
name|PropertiesComponent
name|properties
parameter_list|()
block|{
name|PropertiesComponent
name|component
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setLocation
argument_list|(
literal|"classpath:application.properties"
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
block|}
end_class

end_unit

