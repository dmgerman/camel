begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cdi.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cdi
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|Initialized
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
operator|.
name|CamelCdiRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_class
annotation|@
name|ApplicationScoped
annotation|@
name|RunWith
argument_list|(
name|CamelCdiRunner
operator|.
name|class
argument_list|)
DECL|class|ApplicationScopedTest
specifier|public
class|class
name|ApplicationScopedTest
block|{
DECL|field|COUNTER
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|ApplicationScopedTest (@riR) ProducerTemplate producer)
name|ApplicationScopedTest
parameter_list|(
annotation|@
name|Uri
argument_list|(
literal|"direct:in"
argument_list|)
name|ProducerTemplate
name|producer
parameter_list|)
block|{
name|producer
operator|.
name|sendBody
argument_list|(
name|COUNTER
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|expectations (@bserves @nitializedApplicationScoped.class) Object event, @Uri(R) MockEndpoint mock)
specifier|static
name|void
name|expectations
parameter_list|(
annotation|@
name|Observes
annotation|@
name|Initialized
argument_list|(
name|ApplicationScoped
operator|.
name|class
argument_list|)
name|Object
name|event
parameter_list|,
annotation|@
name|Uri
argument_list|(
literal|"mock:out"
argument_list|)
name|MockEndpoint
name|mock
parameter_list|)
block|{
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOne (@riR) MockEndpoint mock)
specifier|public
name|void
name|testOne
parameter_list|(
annotation|@
name|Uri
argument_list|(
literal|"mock:out"
argument_list|)
name|MockEndpoint
name|mock
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertIsSatisfied
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|mock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwo (@riR) MockEndpoint mock)
specifier|public
name|void
name|testTwo
parameter_list|(
annotation|@
name|Uri
argument_list|(
literal|"mock:out"
argument_list|)
name|MockEndpoint
name|mock
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertIsSatisfied
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|mock
argument_list|)
expr_stmt|;
block|}
DECL|class|TestRoute
specifier|static
class|class
name|TestRoute
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:out"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:out"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

