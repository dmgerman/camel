begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cdi.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cdi
operator|.
name|test
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|event
operator|.
name|Observes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|ContextName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|Uri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|CamelContextStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|CamelContextStoppingEvent
import|;
end_import

begin_comment
comment|/**  * Our CDI Camel application  */
end_comment

begin_class
DECL|class|Application
specifier|public
class|class
name|Application
block|{
annotation|@
name|ContextName
argument_list|(
literal|"camel-test-cdi"
argument_list|)
DECL|class|Hello
specifier|static
class|class
name|Hello
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:message"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route"
argument_list|)
operator|.
name|log
argument_list|(
literal|"${body} from ${camelContext.name}"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"inÂ»out"
argument_list|)
operator|.
name|bean
argument_list|(
literal|"bean"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:out"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Inject
annotation|@
name|Uri
argument_list|(
literal|"direct:message"
argument_list|)
DECL|field|producer
name|ProducerTemplate
name|producer
decl_stmt|;
DECL|method|hello (@bserves CamelContextStartedEvent event)
name|void
name|hello
parameter_list|(
annotation|@
name|Observes
name|CamelContextStartedEvent
name|event
parameter_list|)
block|{
name|producer
operator|.
name|sendBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
DECL|method|bye (@bserves CamelContextStoppingEvent event)
name|void
name|bye
parameter_list|(
annotation|@
name|Observes
name|CamelContextStoppingEvent
name|event
parameter_list|)
block|{
name|producer
operator|.
name|sendBody
argument_list|(
literal|"Bye"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Named
argument_list|(
literal|"bean"
argument_list|)
DECL|class|Bean
specifier|public
specifier|static
class|class
name|Bean
block|{
DECL|method|process (@ody String body)
specifier|public
name|String
name|process
parameter_list|(
annotation|@
name|Body
name|String
name|body
parameter_list|)
block|{
return|return
name|body
return|;
block|}
block|}
block|}
end_class

end_unit

