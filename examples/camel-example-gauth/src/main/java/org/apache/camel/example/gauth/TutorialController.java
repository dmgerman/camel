begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.gauth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|gauth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ui
operator|.
name|ModelMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RequestMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RequestMethod
import|;
end_import

begin_comment
comment|/**  * Single controller for the demo application that handles GET requests. Obtains OAuth access  * token and access token secret from cookies and uses them to obtain calendar names from the  * Google Calendar API. If the interaction with the calendar API fails due to invalid or non-  * existing OAuth tokens an error message is displayed in authorize.jsp. If it succeeds the  * calendar names are displayed in calendar.jsp.  *<p>  * In production systems it is<em>not</em> recommended to store access tokens in cookies. The  * recommended approach is to store them in a database. The demo application is only doing that  * to keep the example as simple as possible. However, an attacker could not use an access token  * alone to get access to a user's calendar data because the application's consumer secret is  * necessary for that as well. The consumer secret never leaves the demo application.  */
end_comment

begin_class
annotation|@
name|Controller
annotation|@
name|RequestMapping
argument_list|(
literal|"/calendar"
argument_list|)
DECL|class|TutorialController
specifier|public
class|class
name|TutorialController
block|{
annotation|@
name|Autowired
DECL|field|service
specifier|private
name|TutorialService
name|service
decl_stmt|;
annotation|@
name|RequestMapping
argument_list|(
name|method
operator|=
name|RequestMethod
operator|.
name|GET
argument_list|)
DECL|method|handleGet ( HttpServletRequest request, HttpServletResponse response, ModelMap model)
specifier|public
name|String
name|handleGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|ModelMap
name|model
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|calendarNames
init|=
literal|null
decl_stmt|;
comment|// Get OAuth tokens from cookies
name|String
name|accessToken
init|=
name|getAccessToken
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|accessTokenSecret
init|=
name|getAccessTokenSecret
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessToken
operator|==
literal|null
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
literal|"No OAuth access token available"
argument_list|)
expr_stmt|;
return|return
literal|"/WEB-INF/jsp/authorize.jsp"
return|;
block|}
try|try
block|{
comment|// Get calendar names from Google Calendar API
name|calendarNames
operator|=
name|service
operator|.
name|getCalendarNames
argument_list|(
name|accessToken
argument_list|,
name|accessTokenSecret
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|model
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
literal|"OAuth access token invalid"
argument_list|)
expr_stmt|;
return|return
literal|"/WEB-INF/jsp/authorize.jsp"
return|;
block|}
name|model
operator|.
name|put
argument_list|(
literal|"calendarNames"
argument_list|,
name|calendarNames
argument_list|)
expr_stmt|;
return|return
literal|"/WEB-INF/jsp/calendar.jsp"
return|;
block|}
DECL|method|getAccessToken (HttpServletRequest request)
specifier|private
specifier|static
name|String
name|getAccessToken
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|getCookieValue
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|,
literal|"TUTORIAL-ACCESS-TOKEN"
argument_list|)
return|;
block|}
DECL|method|getAccessTokenSecret (HttpServletRequest request)
specifier|private
specifier|static
name|String
name|getAccessTokenSecret
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|getCookieValue
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|,
literal|"TUTORIAL-ACCESS-TOKEN-SECRET"
argument_list|)
return|;
block|}
DECL|method|getCookieValue (Cookie[] cookies, String name)
specifier|private
specifier|static
name|String
name|getCookieValue
parameter_list|(
name|Cookie
index|[]
name|cookies
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|cookies
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Cookie
name|cookie
range|:
name|cookies
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|cookie
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|cookie
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

