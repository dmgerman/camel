begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.cafe
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|cafe
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|Drink
specifier|public
class|class
name|Drink
block|{
DECL|field|iced
specifier|private
name|boolean
name|iced
decl_stmt|;
DECL|field|shots
specifier|private
name|int
name|shots
decl_stmt|;
DECL|field|drinkType
specifier|private
name|DrinkType
name|drinkType
decl_stmt|;
DECL|field|orderNumber
specifier|private
name|int
name|orderNumber
decl_stmt|;
DECL|method|Drink (int orderNumber, DrinkType drinkType, boolean hot, int shots)
specifier|public
name|Drink
parameter_list|(
name|int
name|orderNumber
parameter_list|,
name|DrinkType
name|drinkType
parameter_list|,
name|boolean
name|hot
parameter_list|,
name|int
name|shots
parameter_list|)
block|{
name|this
operator|.
name|orderNumber
operator|=
name|orderNumber
expr_stmt|;
name|this
operator|.
name|drinkType
operator|=
name|drinkType
expr_stmt|;
name|this
operator|.
name|iced
operator|=
name|hot
expr_stmt|;
name|this
operator|.
name|shots
operator|=
name|shots
expr_stmt|;
block|}
DECL|method|getOrderNumber ()
specifier|public
name|int
name|getOrderNumber
parameter_list|()
block|{
return|return
name|orderNumber
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|iced
condition|?
literal|"Iced"
else|:
literal|"Hot"
operator|)
operator|+
literal|" "
operator|+
name|drinkType
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|shots
operator|+
literal|" shots."
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Drink
condition|)
block|{
name|Drink
name|that
init|=
operator|(
name|Drink
operator|)
name|o
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|this
operator|.
name|drinkType
argument_list|,
name|that
operator|.
name|drinkType
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|this
operator|.
name|orderNumber
argument_list|,
name|that
operator|.
name|orderNumber
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|this
operator|.
name|iced
argument_list|,
name|that
operator|.
name|iced
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|this
operator|.
name|shots
argument_list|,
name|that
operator|.
name|shots
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|iced
condition|)
block|{
return|return
name|drinkType
operator|.
name|hashCode
argument_list|()
operator|+
name|orderNumber
operator|*
literal|1000
operator|+
name|shots
operator|*
literal|100
return|;
block|}
else|else
block|{
return|return
name|drinkType
operator|.
name|hashCode
argument_list|()
operator|+
name|orderNumber
operator|*
literal|1000
operator|+
name|shots
operator|*
literal|100
operator|+
literal|5
return|;
block|}
block|}
block|}
end_class

end_unit

