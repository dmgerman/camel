begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.example.dsl.java8
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|example
operator|.
name|dsl
operator|.
name|java8
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Component
import|;
end_import

begin_class
annotation|@
name|Component
DECL|class|MyRoute
specifier|public
class|class
name|MyRoute
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"timer:simple?period=503"
argument_list|)
operator|.
name|id
argument_list|(
literal|"simple-route"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|exchange
argument_list|(
name|this
operator|::
name|dateToTime
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|body
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|b
lambda|->
operator|(
name|b
operator|&
literal|1
operator|)
operator|==
literal|0
argument_list|)
operator|.
name|log
argument_list|(
literal|"Received even number"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|body
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|(
name|b
operator|,
name|h
operator|)
operator|->
name|h
operator|.
name|containsKey
argument_list|(
literal|"skip"
argument_list|)
condition|?
literal|false
else|:
operator|(
name|b
operator|&
literal|1
operator|)
operator|==
literal|0
argument_list|)
operator|.
name|log
argument_list|(
literal|"Received odd number"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|body
argument_list|(
name|Objects
operator|::
name|isNull
argument_list|)
operator|.
name|log
argument_list|(
literal|"Received null body"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|body
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|b
lambda|->
operator|(
name|b
operator|&
literal|1
operator|)
operator|!=
literal|0
argument_list|)
operator|.
name|log
argument_list|(
literal|"Received odd number"
argument_list|)
operator|.
name|endChoice
argument_list|()
expr_stmt|;
comment|//   .transform(this::dateToTime2)
comment|//   .transform(function(
comment|//       (Exchange e) -> e.getProperty(Exchange.TIMER_FIRED_TIME, Date.class).getTime()
comment|//   ))
block|}
DECL|method|dateToTime (Exchange e)
specifier|private
name|Long
name|dateToTime
parameter_list|(
name|Exchange
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TIMER_FIRED_TIME
argument_list|,
name|Date
operator|.
name|class
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|dateToTime2 (Exchange exchange, Class<T> type)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|dateToTime2
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

