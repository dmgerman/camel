begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|sample.camel
package|package
name|sample
operator|.
name|camel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_class
annotation|@
name|Configuration
DECL|class|ApplicationConfiguration
specifier|public
class|class
name|ApplicationConfiguration
block|{
annotation|@
name|Bean
DECL|method|routesBuilder ()
specifier|public
name|RouteBuilder
name|routesBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"timer:foo?period=1s"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"fail (foo)"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"timer:bar?period=1s"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"fail (bar)"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"timer:slow?period=1s"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"slow"
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1200
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"my-check-1"
argument_list|)
DECL|method|applicationHealth1 ()
specifier|public
name|ApplicationCheck
name|applicationHealth1
parameter_list|()
block|{
return|return
operator|new
name|ApplicationCheck
argument_list|(
literal|"global"
argument_list|,
literal|"my-check-1"
argument_list|)
return|;
block|}
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"my-check-2"
argument_list|)
DECL|method|applicationHealth2 ()
specifier|public
name|ApplicationCheck
name|applicationHealth2
parameter_list|()
block|{
return|return
operator|new
name|ApplicationCheck
argument_list|(
literal|"local"
argument_list|,
literal|"my-check-2"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

