begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|AbstractBeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|AbstractBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|xml
operator|.
name|DomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
DECL|class|CamelBeanDefinitionParser
specifier|public
class|class
name|CamelBeanDefinitionParser
extends|extends
name|AbstractBeanDefinitionParser
block|{
DECL|method|parseInternal (Element element, ParserContext parserContext)
specifier|protected
name|AbstractBeanDefinition
name|parseInternal
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
block|{
name|BeanDefinitionBuilder
name|factory
init|=
name|BeanDefinitionBuilder
operator|.
name|rootBeanDefinition
argument_list|(
name|RouteBuilderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
name|childElements
init|=
name|DomUtils
operator|.
name|getChildElementsByTagName
argument_list|(
name|element
argument_list|,
literal|"route"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|RouteBuilderStatement
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteBuilderStatement
argument_list|>
argument_list|(
name|childElements
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childElements
operator|!=
literal|null
operator|&&
name|childElements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childElements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Element
name|routeElement
init|=
operator|(
name|Element
operator|)
name|childElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RouteBuilderStatement
name|def
init|=
name|parseRouteElement
argument_list|(
name|routeElement
argument_list|)
decl_stmt|;
name|routes
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
block|}
name|factory
operator|.
name|addPropertyValue
argument_list|(
literal|"routes"
argument_list|,
name|routes
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|getBeanDefinition
argument_list|()
return|;
block|}
comment|/**  	 * Use reflection to figure out what is the valid next element. 	 *  	 * @param routeElement 	 * @return 	 */
DECL|method|parseRouteElement (Element element)
specifier|private
name|RouteBuilderStatement
name|parseRouteElement
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|RouteBuilderStatement
name|rc
init|=
operator|new
name|RouteBuilderStatement
argument_list|()
decl_stmt|;
name|Class
name|currentBuilder
init|=
name|RouteBuilder
operator|.
name|class
decl_stmt|;
name|NodeList
name|childElements
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|RouteBuilderAction
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteBuilderAction
argument_list|>
argument_list|(
name|childElements
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childElements
operator|!=
literal|null
operator|&&
name|childElements
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childElements
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Node
name|node
init|=
name|childElements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|currentBuilder
operator|=
name|parseAction
argument_list|(
name|currentBuilder
argument_list|,
name|actions
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
DECL|method|parseAction (Class currentBuilder, ArrayList<RouteBuilderAction> actions, Element element)
specifier|private
name|Class
name|parseAction
parameter_list|(
name|Class
name|currentBuilder
parameter_list|,
name|ArrayList
argument_list|<
name|RouteBuilderAction
argument_list|>
name|actions
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|actions
operator|.
name|add
argument_list|(
operator|new
name|RouteBuilderAction
argument_list|(
name|element
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|currentBuilder
return|;
block|}
block|}
end_class

end_unit

