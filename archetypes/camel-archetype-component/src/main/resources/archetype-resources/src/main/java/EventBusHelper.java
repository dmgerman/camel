begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
operator|#
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
expr|#
operator|#
name|Licensed
name|to
name|the
name|Apache
name|Software
name|Foundation
argument_list|(
name|ASF
argument_list|)
name|under
name|one
name|or
name|more
expr|#
operator|#
name|contributor
name|license
name|agreements
operator|.
name|See
name|the
name|NOTICE
name|file
name|distributed
name|with
expr|#
operator|#
name|this
name|work
end_expr_stmt

begin_for
for|for additional information regarding copyright ownership. ## The ASF licenses this file to You under the Apache License
operator|,
name|Version
literal|2.0
expr|#
operator|#
operator|(
name|the
literal|"License"
operator|)
expr_stmt|;
end_for

begin_expr_stmt
name|you
name|may
name|not
name|use
name|this
name|file
name|except
name|in
name|compliance
name|with
expr|#
operator|#
name|the
name|License
operator|.
name|You
name|may
name|obtain
name|a
name|copy
name|of
name|the
name|License
name|at
expr|#
operator|#
expr|#
operator|#
name|http
operator|:
comment|//www.apache.org/licenses/LICENSE-2.0
expr|#
operator|#
expr|#
operator|#
name|Unless
name|required
name|by
name|applicable
name|law
name|or
name|agreed
name|to
name|in
name|writing
operator|,
name|software
expr|#
operator|#
name|distributed
name|under
name|the
name|License
name|is
name|distributed
name|on
name|an
literal|"AS IS"
name|BASIS
operator|,
expr_stmt|#
operator|#
name|WITHOUT
name|WARRANTIES
name|OR
name|CONDITIONS
name|OF
name|ANY
name|KIND
operator|,
name|either
name|express
name|or
name|implied
operator|.
expr|#
operator|#
name|See
name|the
name|License
end_expr_stmt

begin_for
for|for the specific language governing permissions and ## limitations under the License. ## ------------------------------------------------------------------------ package $
block|{
package|package
block|}
end_for

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_class
DECL|class|EventBusHelper
specifier|public
class|class
name|EventBusHelper
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
name|EventBusHelper
name|INSTANCE
decl_stmt|;
DECL|field|subscribers
specifier|final
specifier|private
name|Set
argument_list|<
name|Consumer
argument_list|>
name|subscribers
init|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
decl_stmt|;
DECL|method|EventBusHelper ()
specifier|private
name|EventBusHelper
parameter_list|()
block|{ }
DECL|method|getInstance ()
specifier|public
specifier|static
name|EventBusHelper
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|EventBusHelper
argument_list|()
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
DECL|method|subscribe (final Consumer<T> subscriber)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|subscribe
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|subscriber
parameter_list|)
block|{
name|subscribers
operator|.
name|add
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|publish (final T event)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|publish
parameter_list|(
specifier|final
name|T
name|event
parameter_list|)
block|{
comment|// Notify all subscribers
name|subscribers
operator|.
name|forEach
argument_list|(
name|consumer
lambda|->
name|publishSingleEvent
argument_list|(
name|event
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|publishSingleEvent (final T event, final Consumer<T> subscriber)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|publishSingleEvent
parameter_list|(
specifier|final
name|T
name|event
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|subscriber
parameter_list|)
block|{
name|subscriber
operator|.
name|accept
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

