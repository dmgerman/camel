begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
operator|#
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
operator|--
expr|#
operator|#
name|Licensed
name|to
name|the
name|Apache
name|Software
name|Foundation
argument_list|(
name|ASF
argument_list|)
name|under
name|one
name|or
name|more
expr|#
operator|#
name|contributor
name|license
name|agreements
operator|.
name|See
name|the
name|NOTICE
name|file
name|distributed
name|with
expr|#
operator|#
name|this
name|work
end_expr_stmt

begin_for
for|for additional information regarding copyright ownership. ## The ASF licenses this file to You under the Apache License
operator|,
name|Version
literal|2.0
expr|#
operator|#
operator|(
name|the
literal|"License"
operator|)
expr_stmt|;
end_for

begin_expr_stmt
name|you
name|may
name|not
name|use
name|this
name|file
name|except
name|in
name|compliance
name|with
expr|#
operator|#
name|the
name|License
operator|.
name|You
name|may
name|obtain
name|a
name|copy
name|of
name|the
name|License
name|at
expr|#
operator|#
expr|#
operator|#
name|http
operator|:
comment|//www.apache.org/licenses/LICENSE-2.0
expr|#
operator|#
expr|#
operator|#
name|Unless
name|required
name|by
name|applicable
name|law
name|or
name|agreed
name|to
name|in
name|writing
operator|,
name|software
expr|#
operator|#
name|distributed
name|under
name|the
name|License
name|is
name|distributed
name|on
name|an
literal|"AS IS"
name|BASIS
operator|,
expr_stmt|#
operator|#
name|WITHOUT
name|WARRANTIES
name|OR
name|CONDITIONS
name|OF
name|ANY
name|KIND
operator|,
name|either
name|express
name|or
name|implied
operator|.
expr|#
operator|#
name|See
name|the
name|License
end_expr_stmt

begin_for
for|for the specific language governing permissions and ## limitations under the License. ## ------------------------------------------------------------------------ package $
block|{
package|package
block|}
end_for

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * Represents a ${name} endpoint.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"${version}"
argument_list|,
name|scheme
operator|=
literal|"${scheme}"
argument_list|,
name|title
operator|=
literal|"${name}"
argument_list|,
name|syntax
operator|=
literal|"${scheme}:name"
argument_list|,
name|consumerClass
operator|=
name|$
block|{
name|name
block|}
name|Consumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"custom"
argument_list|)
DECL|class|$
specifier|public
class|class
name|$
block|{
name|name
block|}
end_class

begin_expr_stmt
DECL|class|$
name|Endpoint
expr|extends
name|DefaultEndpoint
block|{     @
name|UriPath
expr|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
specifier|private
name|String
name|name
block|;     @
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"10"
argument_list|)
specifier|private
name|int
name|option
operator|=
literal|10
block|;
specifier|public
name|$
block|{
name|name
block|}
name|Endpoint
argument_list|()
block|{     }
specifier|public
name|$
block|{
name|name
block|}
name|Endpoint
argument_list|(
name|String
name|uri
argument_list|,
name|$
block|{
name|name
block|}
name|Component
name|component
argument_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
block|;     }
specifier|public
name|$
block|{
name|name
block|}
name|Endpoint
argument_list|(
name|String
name|endpointUri
argument_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|)
block|;     }
specifier|public
name|Producer
name|createProducer
argument_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|$
block|{
name|name
block|}
name|Producer
argument_list|(
name|this
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|$
block|{
name|name
block|}
name|Consumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function

begin_comment
comment|/**      * Some description of this option, and what it does      */
end_comment

begin_function
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
end_function

begin_comment
comment|/**      * Some description of this option, and what it does      */
end_comment

begin_function
specifier|public
name|void
name|setOption
parameter_list|(
name|int
name|option
parameter_list|)
block|{
name|this
operator|.
name|option
operator|=
name|option
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|int
name|getOption
parameter_list|()
block|{
return|return
name|option
return|;
block|}
end_function

unit|}
end_unit

