begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelAuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExpressionIllegalSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LanguageTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MethodNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|bean
operator|.
name|RuntimeBeanExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleIllegalSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|SimpleTest
specifier|public
class|class
name|SimpleTest
extends|extends
name|LanguageTestSupport
block|{
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"myAnimal"
argument_list|,
operator|new
name|Animal
argument_list|(
literal|"Donkey"
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|method|testResultType ()
specifier|public
name|void
name|testResultType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"${header.bar}"
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"${header.bar}"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// should not be possible
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"${header.bar}"
argument_list|,
name|Date
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"${header.unknown}"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefExpression ()
specifier|public
name|void
name|testRefExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpressionResultInstanceOf
argument_list|(
literal|"ref:myAnimal"
argument_list|,
name|Animal
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertExpressionResultInstanceOf
argument_list|(
literal|"${ref:myAnimal}"
argument_list|,
name|Animal
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"ref:myAnimal"
argument_list|,
literal|"Donkey"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${ref:myAnimal}"
argument_list|,
literal|"Donkey"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"ref:unknown"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${ref:unknown}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"Hello ${ref:myAnimal}"
argument_list|,
literal|"Hello Donkey"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"Hello ${ref:unknown}"
argument_list|,
literal|"Hello "
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstantExpression ()
specifier|public
name|void
name|testConstantExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"Hello World"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyExpression ()
specifier|public
name|void
name|testEmptyExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|" "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expression must be specified"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertPredicate
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|" "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|assertPredicate
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expression must be specified"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyExpression ()
specifier|public
name|void
name|testBodyExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"${body}"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyExpressionUsingAlternativeStartToken ()
specifier|public
name|void
name|testBodyExpressionUsingAlternativeStartToken
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"$simple{body}"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyExpressionNotStringType ()
specifier|public
name|void
name|testBodyExpressionNotStringType
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|Expression
name|exp
init|=
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"${body}"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleExpressions ()
specifier|public
name|void
name|testSimpleExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"exchangeId"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"id"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"body"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.body"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.header.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"header.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"routeId"
argument_list|,
name|exchange
operator|.
name|getFromRouteId
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setFromRouteId
argument_list|(
literal|"myRouteId"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"routeId"
argument_list|,
literal|"myRouteId"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrimSimpleExpressions ()
specifier|public
name|void
name|testTrimSimpleExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|" \texchangeId\n"
operator|.
name|trim
argument_list|()
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\nid\r"
operator|.
name|trim
argument_list|()
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\t\r body"
operator|.
name|trim
argument_list|()
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\nin.body\r"
operator|.
name|trim
argument_list|()
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleThreadName ()
specifier|public
name|void
name|testSimpleThreadName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertExpression
argument_list|(
literal|"threadName"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"The name is ${threadName}"
argument_list|,
literal|"The name is "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleOutExpressions ()
specifier|public
name|void
name|testSimpleOutExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"quote"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"out.body"
argument_list|,
literal|"Bye World"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"out.header.quote"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"out.headers.quote"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimplePropertyExpressions ()
specifier|public
name|void
name|testSimplePropertyExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"medal"
argument_list|,
literal|"gold"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"property.medal"
argument_list|,
literal|"gold"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleSystemPropertyExpressions ()
specifier|public
name|void
name|testSimpleSystemPropertyExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"who"
argument_list|,
literal|"I was here"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"sys.who"
argument_list|,
literal|"I was here"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleSystemEnvironmentExpressions ()
specifier|public
name|void
name|testSimpleSystemEnvironmentExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"PATH"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|assertExpression
argument_list|(
literal|"sysenv.PATH"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimpleCamelId ()
specifier|public
name|void
name|testSimpleCamelId
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"camelId"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLBodyListAndMap ()
specifier|public
name|void
name|testOGNLBodyListAndMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"cool"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"dude"
argument_list|,
literal|"Hey dude"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"code"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][cool]}"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[0][cool]}"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][code]}"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[0][code]}"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLBodyListAndMapAndMethod ()
specifier|public
name|void
name|testOGNLBodyListAndMapAndMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"camel"
argument_list|,
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"amq"
argument_list|,
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][camel].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][camel].name}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][camel].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][camel].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[0][camel].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[0][camel].name}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[0][camel].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[0][camel].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLPropertyList ()
specifier|public
name|void
name|testOGNLPropertyList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"wicket"
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[0]}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[1]}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${property.wicket[2]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index: 2, Size: 2"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertExpression
argument_list|(
literal|"${property.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLPropertyLinesList ()
specifier|public
name|void
name|testOGNLPropertyLinesList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"wicket"
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${property.wicket[2]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index: 2, Size: 2"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertExpression
argument_list|(
literal|"${property.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLPropertyMap ()
specifier|public
name|void
name|testOGNLPropertyMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"cool"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"dude"
argument_list|,
literal|"Hey dude"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"code"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"wicket"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[cool]}"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[dude]}"
argument_list|,
literal|"Hey dude"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[unknown]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[code]}"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
comment|// no header named unknown
name|assertExpression
argument_list|(
literal|"${property?.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLPropertyMapWithDot ()
specifier|public
name|void
name|testOGNLPropertyMapWithDot
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"this.code"
argument_list|,
literal|"This code"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"wicket"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${property.wicket[this.code]}"
argument_list|,
literal|"This code"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLPropertyMapNotMap ()
specifier|public
name|void
name|testOGNLPropertyMapNotMap
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"${property.foobar[bar]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Key: bar not found in bean: cba of type: java.lang.String using OGNL path [[bar]]"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOGNLPropertyMapIllegalSyntax ()
specifier|public
name|void
name|testOGNLPropertyMapIllegalSyntax
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"${property.foobar[bar}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Valid syntax: ${property.OGNL} was: property.foobar[bar at location 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOGNLHeaderEmptyTest ()
specifier|public
name|void
name|testOGNLHeaderEmptyTest
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"beer"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == ''"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == \"\""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == ' '"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == \" \""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"beer"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == ''"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == \"\""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == ' '"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer} == \" \""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer.toString().trim()} == ''"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer.toString().trim()} == \"\""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"beer"
argument_list|,
literal|"   "
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer.trim()} == ''"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${header.beer.trim()} == \"\""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testDateExpressions ()
specifier|public
name|void
name|testDateExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|cal
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1974
argument_list|,
name|Calendar
operator|.
name|APRIL
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"birthday"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"date:header.birthday:yyyyMMdd"
argument_list|,
literal|"19740420"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"date:yyyyMMdd"
argument_list|,
literal|"19740420"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SimpleParserException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Valid syntax: ${date:command:pattern} was: date:yyyyMMdd"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDateAndTimeExpressions ()
specifier|public
name|void
name|testDateAndTimeExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|cal
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1974
argument_list|,
name|Calendar
operator|.
name|APRIL
argument_list|,
literal|20
argument_list|,
literal|8
argument_list|,
literal|55
argument_list|,
literal|47
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"birthday"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"date:header.birthday:yyyy-MM-dd'T'HH:mm:ss:SSS"
argument_list|,
literal|"1974-04-20T08:55:47:123"
argument_list|)
expr_stmt|;
block|}
DECL|method|testLanguagesInContext ()
specifier|public
name|void
name|testLanguagesInContext
parameter_list|()
throws|throws
name|Exception
block|{
comment|// evaluate so we know there is 1 language in the context
name|assertExpression
argument_list|(
literal|"id"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getLanguageNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"simple"
argument_list|,
name|context
operator|.
name|getLanguageNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplexExpressions ()
specifier|public
name|void
name|testComplexExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}"
argument_list|,
literal|"hey abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}!"
argument_list|,
literal|"hey abc!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}-${in.header.foo}!"
argument_list|,
literal|"hey abc-abc!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}${in.header.foo}"
argument_list|,
literal|"hey abcabc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.header.foo}${in.header.foo}"
argument_list|,
literal|"abcabc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.header.foo}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.header.foo}!"
argument_list|,
literal|"abc!"
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplexExpressionsUsingAlternativeStartToken ()
specifier|public
name|void
name|testComplexExpressionsUsingAlternativeStartToken
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"hey $simple{in.header.foo}"
argument_list|,
literal|"hey abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey $simple{in.header.foo}!"
argument_list|,
literal|"hey abc!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey $simple{in.header.foo}-$simple{in.header.foo}!"
argument_list|,
literal|"hey abc-abc!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey $simple{in.header.foo}$simple{in.header.foo}"
argument_list|,
literal|"hey abcabc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"$simple{in.header.foo}$simple{in.header.foo}"
argument_list|,
literal|"abcabc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"$simple{in.header.foo}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"$simple{in.header.foo}!"
argument_list|,
literal|"abc!"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidComplexExpression ()
specifier|public
name|void
name|testInvalidComplexExpression
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"hey ${foo"
argument_list|,
literal|"bad expression!"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SimpleIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|e
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPredicates ()
specifier|public
name|void
name|testPredicates
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPredicate
argument_list|(
literal|"body"
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"header.foo"
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"header.madeUpHeader"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionMessage ()
specifier|public
name|void
name|testExceptionMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Just testing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"exception.message"
argument_list|,
literal|"Just testing"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"Hello ${exception.message} World"
argument_list|,
literal|"Hello Just testing World"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionStacktrace ()
specifier|public
name|void
name|testExceptionStacktrace
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Just testing"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"exception.stacktrace"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|startsWith
argument_list|(
literal|"java.lang.IllegalArgumentException: Just testing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"at org.apache.camel.language."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testException ()
specifier|public
name|void
name|testException
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Just testing"
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|out
init|=
name|SimpleLanguage
operator|.
name|simple
argument_list|(
literal|"exception"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Just testing"
argument_list|,
name|out
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyAs ()
specifier|public
name|void
name|testBodyAs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"${bodyAs(String)}"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${bodyAs('String')}"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${bodyAs('String')}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${bodyAs(Integer)}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${bodyAs(int)}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${bodyAs('int')}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${bodyAs(XXX)}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|ClassNotFoundException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMandatoryBodyAs ()
specifier|public
name|void
name|testMandatoryBodyAs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"${mandatoryBodyAs(String)}"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${mandatoryBodyAs('String')}"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${mandatoryBodyAs('String')}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|InvalidPayloadException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${mandatoryBodyAs(Integer)}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${mandatoryBodyAs(int)}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${mandatoryBodyAs('int')}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${mandatoryBodyAs(XXX)}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|ClassNotFoundException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHeaderEmptyBody ()
specifier|public
name|void
name|testHeaderEmptyBody
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set an empty body
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"header.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.header.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.foo}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headers.foo}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.header.foo}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.headers.foo}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadersWithBracket ()
specifier|public
name|void
name|testHeadersWithBracket
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"headers[foo]"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headers[foo]}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.headers[foo]}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsInstanceOfEmptyBody ()
specifier|public
name|void
name|testIsInstanceOfEmptyBody
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set an empty body
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|assertPredicate
argument_list|(
literal|"${body} is null"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SimpleIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|e
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHeaders ()
specifier|public
name|void
name|testHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|headers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"headers"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headers}"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.headers"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.headers}"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeaderAs ()
specifier|public
name|void
name|testHeaderAs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"${headerAs(foo,String)}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs(bar,int)}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs(bar, int)}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs('bar', int)}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs('bar','int')}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs('bar','Integer')}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs('bar',\"int\")}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs(bar,String)}"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${headerAs(unknown,String)}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${headerAs(unknown String)}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Valid syntax: ${headerAs(key, type)} was: headerAs(unknown String)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${headerAs(bar,XXX)}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|ClassNotFoundException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalSyntax ()
specifier|public
name|void
name|testIllegalSyntax
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"hey ${xxx} how are you?"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unknown function: xxx at location 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${xxx}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unknown function: xxx at location 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${bodyAs(xxx}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Valid syntax: ${bodyAs(type)} was: bodyAs(xxx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOGNLHeaderList ()
specifier|public
name|void
name|testOGNLHeaderList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"wicket"
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[0]}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[1]}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.wicket[2]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index: 2, Size: 2"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertExpression
argument_list|(
literal|"${header.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLHeaderLinesList ()
specifier|public
name|void
name|testOGNLHeaderLinesList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"wicket"
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.wicket[2]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index: 2, Size: 2"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertExpression
argument_list|(
literal|"${header.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLHeaderMap ()
specifier|public
name|void
name|testOGNLHeaderMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"cool"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"dude"
argument_list|,
literal|"Hey dude"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"code"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"wicket"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[cool]}"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[dude]}"
argument_list|,
literal|"Hey dude"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[unknown]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[code]}"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
comment|// no header named unknown
name|assertExpression
argument_list|(
literal|"${header?.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.unknown[cool]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLHeaderMapWithDot ()
specifier|public
name|void
name|testOGNLHeaderMapWithDot
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"this.code"
argument_list|,
literal|"This code"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"wicket"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[this.code]}"
argument_list|,
literal|"This code"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLHeaderMapNotMap ()
specifier|public
name|void
name|testOGNLHeaderMapNotMap
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.foo[bar]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Key: bar not found in bean: abc of type: java.lang.String using OGNL path [[bar]]"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOGNLHeaderMapIllegalSyntax ()
specifier|public
name|void
name|testOGNLHeaderMapIllegalSyntax
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.foo[bar}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Valid syntax: ${header.name[key]} was: header.foo[bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLAsMap ()
specifier|public
name|void
name|testBodyOGNLAsMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[foo]}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[bar]}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLAsMapWithDot ()
specifier|public
name|void
name|testBodyOGNLAsMapWithDot
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[foo.bar]}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLAsMapShorthand ()
specifier|public
name|void
name|testBodyOGNLAsMapShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[foo]}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body[bar]}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLSimple ()
specifier|public
name|void
name|testBodyOGNLSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getAge}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionOGNLSimple ()
specifier|public
name|void
name|testExceptionOGNLSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|AUTHENTICATION_FAILURE_POLICY_ID
argument_list|,
literal|"myPolicy"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
operator|new
name|CamelAuthorizationException
argument_list|(
literal|"The camel authorization exception"
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${exception.getPolicyId}"
argument_list|,
literal|"myPolicy"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLSimpleShorthand ()
specifier|public
name|void
name|testBodyOGNLSimpleShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.name}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.age}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLSimpleOperator ()
specifier|public
name|void
name|testBodyOGNLSimpleOperator
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getName} contains 'Camel'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getName} contains 'Tiger'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getAge}< 10"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getAge}> 10"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getAge}<= '6'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getAge}> '6'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getAge}< ${body.getFriend.getAge}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.getFriend.isDangerous} == true"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLSimpleOperatorShorthand ()
specifier|public
name|void
name|testBodyOGNLSimpleOperatorShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.name} contains 'Camel'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.name} contains 'Tiger'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.age}< 10"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.age}> 10"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.age}<= '6'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.age}> '6'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.age}< ${body.friend.age}"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"${in.body.friend.dangerous} == true"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLNested ()
specifier|public
name|void
name|testBodyOGNLNested
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getAge}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getName}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getAge}"
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLNestedShorthand ()
specifier|public
name|void
name|testBodyOGNLNestedShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.name}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.age}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.friend.name}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.friend.age}"
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderList ()
specifier|public
name|void
name|testBodyOGNLOrderList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[0].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[1].getId}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[last].getId}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[last].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[last-1].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[last-1].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderListShorthand ()
specifier|public
name|void
name|testBodyOGNLOrderListShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[0].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[0].name}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[1].id}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[1].name}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[last].id}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[last].name}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[last-1].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines[last-1].name}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.lines.size}"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLListMap ()
specifier|public
name|void
name|testBodyOGNLListMap
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|grid
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cells
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cells
operator|.
name|put
argument_list|(
literal|"ABC"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|cells
operator|.
name|put
argument_list|(
literal|"DEF"
argument_list|,
literal|"456"
argument_list|)
expr_stmt|;
name|grid
operator|.
name|add
argument_list|(
name|cells
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cells2
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cells2
operator|.
name|put
argument_list|(
literal|"HIJ"
argument_list|,
literal|"789"
argument_list|)
expr_stmt|;
name|grid
operator|.
name|add
argument_list|(
name|cells2
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|grid
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][ABC]}"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0][DEF]}"
argument_list|,
literal|"456"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0]['ABC']}"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0]['DEF']}"
argument_list|,
literal|"456"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1][HIJ]}"
argument_list|,
literal|"789"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1]['HIJ']}"
argument_list|,
literal|"789"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLList ()
specifier|public
name|void
name|testBodyOGNLList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getId}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLListShorthand ()
specifier|public
name|void
name|testBodyOGNLListShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].name}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].id}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].name}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLArray ()
specifier|public
name|void
name|testBodyOGNLArray
parameter_list|()
throws|throws
name|Exception
block|{
name|OrderLine
index|[]
name|lines
init|=
operator|new
name|OrderLine
index|[
literal|2
index|]
decl_stmt|;
name|lines
index|[
literal|0
index|]
operator|=
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|lines
index|[
literal|1
index|]
operator|=
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getId}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLArrayShorthand ()
specifier|public
name|void
name|testBodyOGNLArrayShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|OrderLine
index|[]
name|lines
init|=
operator|new
name|OrderLine
index|[
literal|2
index|]
decl_stmt|;
name|lines
index|[
literal|0
index|]
operator|=
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|lines
index|[
literal|1
index|]
operator|=
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].name}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].id}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].name}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderListOutOfBounds ()
specifier|public
name|void
name|testBodyOGNLOrderListOutOfBounds
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.getLines[3].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Index: 3, Size: 2 out of bounds with List from bean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.getLines[last-2].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Index: -1, Size: 2 out of bounds with List from bean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.getLines[last - XXX].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|ExpressionIllegalSyntaxException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|ExpressionIllegalSyntaxException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"last - XXX"
argument_list|,
name|cause
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLOrderListOutOfBoundsShorthand ()
specifier|public
name|void
name|testBodyOGNLOrderListOutOfBoundsShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.lines[3].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Index: 3, Size: 2 out of bounds with List from bean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.lines[last - 2].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Index: -1, Size: 2 out of bounds with List from bean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.lines[last - XXX].id}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|ExpressionIllegalSyntaxException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|ExpressionIllegalSyntaxException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"last - XXX"
argument_list|,
name|cause
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLOrderListOutOfBoundsWithNullSafe ()
specifier|public
name|void
name|testBodyOGNLOrderListOutOfBoundsWithNullSafe
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body?.getLines[3].getId}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderListOutOfBoundsWithNullSafeShorthand ()
specifier|public
name|void
name|testBodyOGNLOrderListOutOfBoundsWithNullSafeShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body?.lines[3].id}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderListNoMethodNameWithNullSafe ()
specifier|public
name|void
name|testBodyOGNLOrderListNoMethodNameWithNullSafe
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.getLines[0]?.getRating}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|MethodNotFoundException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|MethodNotFoundException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getRating"
argument_list|,
name|cause
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLOrderListNoMethodNameWithNullSafeShorthand ()
specifier|public
name|void
name|testBodyOGNLOrderListNoMethodNameWithNullSafeShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.lines[0]?.rating}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|MethodNotFoundException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|MethodNotFoundException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rating"
argument_list|,
name|cause
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLNullSafeToAvoidNPE ()
specifier|public
name|void
name|testBodyOGNLNullSafeToAvoidNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getAge}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getName}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getAge}"
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
comment|// using null safe to avoid the NPE
name|assertExpression
argument_list|(
literal|"${in.body.getFriend?.getFriend.getName}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
comment|// without null safe we get an NPE
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getFriend.getName}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to invoke method: .getFriend.getFriend.getName on null due to: java.lang.NullPointerException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLNullSafeToAvoidNPEShorthand ()
specifier|public
name|void
name|testBodyOGNLNullSafeToAvoidNPEShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.name}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.age}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// just to mix it a bit
name|assertExpression
argument_list|(
literal|"${in.body.friend.getName}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.age}"
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
comment|// using null safe to avoid the NPE
name|assertExpression
argument_list|(
literal|"${in.body.friend?.friend.name}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
comment|// without null safe we get an NPE
name|assertExpression
argument_list|(
literal|"${in.body.friend.friend.name}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to invoke method: .friend.friend.name on null due to: java.lang.NullPointerException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLReentrant ()
specifier|public
name|void
name|testBodyOGNLReentrant
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|elephant
init|=
operator|new
name|Animal
argument_list|(
literal|"Big Ella"
argument_list|,
literal|48
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|tiger
operator|.
name|setFriend
argument_list|(
name|elephant
argument_list|)
expr_stmt|;
name|elephant
operator|.
name|setFriend
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getFriend.getFriend.getFriend.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getFriend.getFriend.getFriend.getFriend.getName}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getFriend.getFriend.getFriend.getFriend.getFriend.getName}"
argument_list|,
literal|"Big Ella"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLReentrantShorthand ()
specifier|public
name|void
name|testBodyOGNLReentrantShorthand
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|elephant
init|=
operator|new
name|Animal
argument_list|(
literal|"Big Ella"
argument_list|,
literal|48
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|tiger
operator|.
name|setFriend
argument_list|(
name|elephant
argument_list|)
expr_stmt|;
name|elephant
operator|.
name|setFriend
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.friend.friend.friend.name}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.friend.friend.friend.friend.name}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.friend.friend.friend.friend.friend.name}"
argument_list|,
literal|"Big Ella"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLBoolean ()
specifier|public
name|void
name|testBodyOGNLBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.isDangerous}"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.dangerous}"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.isDangerous}"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.dangerous}"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlOnString ()
specifier|public
name|void
name|testBodyOgnlOnString
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.substring(2)}"
argument_list|,
literal|"mel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.substring(2, 4)}"
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.length()}"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.toUpperCase()}"
argument_list|,
literal|"CAMEL"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.toUpperCase()}"
argument_list|,
literal|"CAMEL"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.toUpperCase().substring(2)}"
argument_list|,
literal|"MEL"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.toLowerCase().length()}"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlOnStringWithOgnlParams ()
specifier|public
name|void
name|testBodyOgnlOnStringWithOgnlParams
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Camel"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"max"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.substring(${header.min}, ${header.max})}"
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeaderOgnlOnStringWithOgnlParams ()
specifier|public
name|void
name|testHeaderOgnlOnStringWithOgnlParams
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"name"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"max"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"min"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.name.substring(${header.min}, ${header.max})}"
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCamelContextStartRoute ()
specifier|public
name|void
name|testCamelContextStartRoute
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${camelContext.startRoute('foo')}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlReplace ()
specifier|public
name|void
name|testBodyOgnlReplace
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Kamel is a cool Kamel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace(\"Kamel\", \"Camel\")}"
argument_list|,
literal|"Camel is a cool Camel"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlReplaceEscapedChar ()
specifier|public
name|void
name|testBodyOgnlReplaceEscapedChar
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"foo$bar$baz"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace('$', '-')}"
argument_list|,
literal|"foo-bar-baz"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlReplaceEscapedBackslashChar ()
specifier|public
name|void
name|testBodyOgnlReplaceEscapedBackslashChar
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"foo\\bar\\baz"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace('\\', '\\\\')}"
argument_list|,
literal|"foo\\\\bar\\\\baz"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlReplaceFirst ()
specifier|public
name|void
name|testBodyOgnlReplaceFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"http:camel.apache.org"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replaceFirst('http:', 'http4:')}"
argument_list|,
literal|"http4:camel.apache.org"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replaceFirst('http:', '')}"
argument_list|,
literal|"camel.apache.org"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replaceFirst('http:', ' ')}"
argument_list|,
literal|" camel.apache.org"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replaceFirst('http:',    ' ')}"
argument_list|,
literal|" camel.apache.org"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replaceFirst('http:',' ')}"
argument_list|,
literal|" camel.apache.org"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlReplaceSingleQuoteInDouble ()
specifier|public
name|void
name|testBodyOgnlReplaceSingleQuoteInDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello O'Conner"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace(\"O'C\", \"OC\")}"
argument_list|,
literal|"Hello OConner"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace(\"O'C\", \"O C\")}"
argument_list|,
literal|"Hello O Conner"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace(\"O'C\", \"O-C\")}"
argument_list|,
literal|"Hello O-Conner"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace(\"O'C\", \"O''C\")}"
argument_list|,
literal|"Hello O''Conner"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.replace(\"O'C\", \"O\n'C\")}"
argument_list|,
literal|"Hello O\n'Conner"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOgnlSpaces ()
specifier|public
name|void
name|testBodyOgnlSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
comment|// no quotes, which is discouraged to use
name|assertExpression
argument_list|(
literal|"${body.compareTo(Hello World)}"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.compareTo('Hello World')}"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.compareTo(${body})}"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.compareTo('foo')}"
argument_list|,
literal|"Hello World"
operator|.
name|compareTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.compareTo( 'Hello World' )}"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.compareTo( ${body} )}"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.compareTo( 'foo' )}"
argument_list|,
literal|"Hello World"
operator|.
name|compareTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassSimpleName ()
specifier|public
name|void
name|testClassSimpleName
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getClass().getSimpleName()}"
argument_list|,
literal|"Animal"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getClass.getSimpleName}"
argument_list|,
literal|"Animal"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.class.simpleName}"
argument_list|,
literal|"Animal"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionClassSimpleName ()
specifier|public
name|void
name|testExceptionClassSimpleName
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${exception.getClass().getSimpleName()}"
argument_list|,
literal|"IllegalArgumentException"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${exception.getClass.getSimpleName}"
argument_list|,
literal|"IllegalArgumentException"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${exception.class.simpleName}"
argument_list|,
literal|"IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSlashBeforeHeader ()
specifier|public
name|void
name|testSlashBeforeHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"foo/${header.foo}"
argument_list|,
literal|"foo/abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"foo\\${header.foo}"
argument_list|,
literal|"foo\\abc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testJSonLike ()
specifier|public
name|void
name|testJSonLike
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Something"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"{\n\"data\": \"${body}\"\n}"
argument_list|,
literal|"{\n\"data\": \"Something\"\n}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFunctionEnds ()
specifier|public
name|void
name|testFunctionEnds
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Something"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"{{"
argument_list|,
literal|"{{"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"}}"
argument_list|,
literal|"}}"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"{{}}"
argument_list|,
literal|"{{}}"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"{{foo}}"
argument_list|,
literal|"{{foo}}"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"{{${body}}}"
argument_list|,
literal|"{{Something}}"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"{{${body}-${body}}}"
argument_list|,
literal|"{{Something-Something}}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscape ()
specifier|public
name|void
name|testEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Something"
argument_list|)
expr_stmt|;
comment|// slash foo
name|assertExpression
argument_list|(
literal|"\\foo"
argument_list|,
literal|"\\foo"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\n${body}"
argument_list|,
literal|"\nSomething"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\t${body}"
argument_list|,
literal|"\tSomething"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\r${body}"
argument_list|,
literal|"\rSomething"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\n\\r${body}"
argument_list|,
literal|"\n\rSomething"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\n${body}\\n"
argument_list|,
literal|"\nSomething\n"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\t${body}\\t"
argument_list|,
literal|"\tSomething\t"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\r${body}\\r"
argument_list|,
literal|"\rSomething\r"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"\\n\\r${body}\\n\\r"
argument_list|,
literal|"\n\rSomething\n\r"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"$${body}"
argument_list|,
literal|"$Something"
argument_list|)
expr_stmt|;
block|}
DECL|method|testCamelContextOGNL ()
specifier|public
name|void
name|testCamelContextOGNL
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"${camelContext.getName()}"
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${camelContext.version}"
argument_list|,
name|context
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTypeConstant ()
specifier|public
name|void
name|testTypeConstant
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"${type:org.apache.camel.Exchange.FILE_NAME}"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${type:org.apache.camel.ExchangePattern.InOut}"
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
comment|// non existing fields
name|assertExpression
argument_list|(
literal|"${type:org.apache.camel.ExchangePattern.}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${type:org.apache.camel.ExchangePattern.UNKNOWN}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getLanguageName ()
specifier|protected
name|String
name|getLanguageName
parameter_list|()
block|{
return|return
literal|"simple"
return|;
block|}
DECL|method|assertExpressionResultInstanceOf (String expressionText, Class<?> expectedType)
specifier|protected
name|void
name|assertExpressionResultInstanceOf
parameter_list|(
name|String
name|expressionText
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|)
block|{
name|Language
name|language
init|=
name|assertResolveLanguage
argument_list|(
name|getLanguageName
argument_list|()
argument_list|)
decl_stmt|;
name|Expression
name|expression
init|=
name|language
operator|.
name|createExpression
argument_list|(
name|expressionText
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot assert type when no type is provided"
argument_list|,
name|expectedType
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No Expression could be created for text: "
operator|+
name|expressionText
operator|+
literal|" language: "
operator|+
name|language
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|Object
name|answer
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|expectedType
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
DECL|class|Animal
specifier|public
specifier|static
specifier|final
class|class
name|Animal
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|age
specifier|private
name|int
name|age
decl_stmt|;
DECL|field|friend
specifier|private
name|Animal
name|friend
decl_stmt|;
DECL|method|Animal (String name, int age)
specifier|private
name|Animal
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|age
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|age
operator|=
name|age
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getAge ()
specifier|public
name|int
name|getAge
parameter_list|()
block|{
return|return
name|age
return|;
block|}
DECL|method|getFriend ()
specifier|public
name|Animal
name|getFriend
parameter_list|()
block|{
return|return
name|friend
return|;
block|}
DECL|method|setFriend (Animal friend)
specifier|public
name|void
name|setFriend
parameter_list|(
name|Animal
name|friend
parameter_list|)
block|{
name|this
operator|.
name|friend
operator|=
name|friend
expr_stmt|;
block|}
DECL|method|isDangerous ()
specifier|public
name|boolean
name|isDangerous
parameter_list|()
block|{
return|return
name|name
operator|.
name|contains
argument_list|(
literal|"Tiger"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|class|Order
specifier|public
specifier|static
specifier|final
class|class
name|Order
block|{
DECL|field|lines
specifier|private
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
decl_stmt|;
DECL|method|Order (List<OrderLine> lines)
specifier|public
name|Order
parameter_list|(
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
parameter_list|)
block|{
name|this
operator|.
name|lines
operator|=
name|lines
expr_stmt|;
block|}
DECL|method|getLines ()
specifier|public
name|List
argument_list|<
name|OrderLine
argument_list|>
name|getLines
parameter_list|()
block|{
return|return
name|lines
return|;
block|}
DECL|method|setLines (List<OrderLine> lines)
specifier|public
name|void
name|setLines
parameter_list|(
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
parameter_list|)
block|{
name|this
operator|.
name|lines
operator|=
name|lines
expr_stmt|;
block|}
block|}
DECL|class|OrderLine
specifier|public
specifier|static
specifier|final
class|class
name|OrderLine
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|OrderLine (int id, String name)
specifier|public
name|OrderLine
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

