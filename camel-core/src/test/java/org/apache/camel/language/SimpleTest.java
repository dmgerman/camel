begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExpressionIllegalSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LanguageTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MethodNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|bean
operator|.
name|RuntimeBeanExpressionException
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|SimpleTest
specifier|public
class|class
name|SimpleTest
extends|extends
name|LanguageTestSupport
block|{
DECL|method|testConstantExpression ()
specifier|public
name|void
name|testConstantExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"Hello World"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleExpressions ()
specifier|public
name|void
name|testSimpleExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"id"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"body"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.body"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.header.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in.headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"header.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"headers.foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleOutExpressions ()
specifier|public
name|void
name|testSimpleOutExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"quote"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"out.body"
argument_list|,
literal|"Bye World"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"out.header.quote"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"out.headers.quote"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimplePropertyExpressions ()
specifier|public
name|void
name|testSimplePropertyExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"medal"
argument_list|,
literal|"gold"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"property.medal"
argument_list|,
literal|"gold"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleSystemPropertyExpressions ()
specifier|public
name|void
name|testSimpleSystemPropertyExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"who"
argument_list|,
literal|"I was here"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"sys.who"
argument_list|,
literal|"I was here"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleSystemEnvironmentExpressions ()
specifier|public
name|void
name|testSimpleSystemEnvironmentExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"PATH"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|assertExpression
argument_list|(
literal|"sysenv.PATH"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDateExpressions ()
specifier|public
name|void
name|testDateExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|cal
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1974
argument_list|,
name|Calendar
operator|.
name|APRIL
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"birthday"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"date:header.birthday:yyyyMMdd"
argument_list|,
literal|"19740420"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"date:yyyyMMdd"
argument_list|,
literal|"19740420"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testDateAndTimeExpressions ()
specifier|public
name|void
name|testDateAndTimeExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|cal
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1974
argument_list|,
name|Calendar
operator|.
name|APRIL
argument_list|,
literal|20
argument_list|,
literal|8
argument_list|,
literal|55
argument_list|,
literal|47
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"birthday"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"date:header.birthday:yyyy-MM-dd'T'HH:mm:ss:SSS"
argument_list|,
literal|"1974-04-20T08:55:47:123"
argument_list|)
expr_stmt|;
block|}
DECL|method|testLanguagesInContext ()
specifier|public
name|void
name|testLanguagesInContext
parameter_list|()
throws|throws
name|Exception
block|{
comment|// evaluate so we know there is 1 language in the context
name|assertExpression
argument_list|(
literal|"id"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getLanguageNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"simple"
argument_list|,
name|context
operator|.
name|getLanguageNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplexExpressions ()
specifier|public
name|void
name|testComplexExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}"
argument_list|,
literal|"hey abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}!"
argument_list|,
literal|"hey abc!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}-${in.header.foo}!"
argument_list|,
literal|"hey abc-abc!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hey ${in.header.foo}${in.header.foo}"
argument_list|,
literal|"hey abcabc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.header.foo}${in.header.foo}"
argument_list|,
literal|"abcabc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.header.foo}"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.header.foo}!"
argument_list|,
literal|"abc!"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidComplexExpression ()
specifier|public
name|void
name|testInvalidComplexExpression
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"hey ${foo"
argument_list|,
literal|"bad expression!"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Caught expected exception: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPredicates ()
specifier|public
name|void
name|testPredicates
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPredicate
argument_list|(
literal|"body"
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"header.foo"
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"header.madeUpHeader"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptionMessage ()
specifier|public
name|void
name|testExceptionMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Just testing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"exception.message"
argument_list|,
literal|"Just testing"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"Hello ${exception.message} World"
argument_list|,
literal|"Hello Just testing World"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyAs ()
specifier|public
name|void
name|testBodyAs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"${bodyAs(String)}"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${bodyAs(Integer)}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalSyntax ()
specifier|public
name|void
name|testIllegalSyntax
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"hey ${xxx} how are you?"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Illegal syntax: xxx"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${xxx}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Illegal syntax: xxx"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|assertExpression
argument_list|(
literal|"${bodyAs(xxx}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Illegal syntax: Valid syntax: ${bodyAs(type)} was: bodyAs(xxx"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOGNLHeaderList ()
specifier|public
name|void
name|testOGNLHeaderList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"wicket"
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[0]}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[1]}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.wicket[2]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index: 2, Size: 2"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertExpression
argument_list|(
literal|"${header.unknown[cool]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLHeaderLinesList ()
specifier|public
name|void
name|testOGNLHeaderLinesList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"wicket"
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.wicket[2]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Index: 2, Size: 2"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertExpression
argument_list|(
literal|"${header.unknown[cool]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLHeaderMap ()
specifier|public
name|void
name|testOGNLHeaderMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"cool"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"dude"
argument_list|,
literal|"Hey dude"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"code"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"wicket"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[cool]}"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[dude]}"
argument_list|,
literal|"Hey dude"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[unknown]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.wicket[code]}"
argument_list|,
literal|4321
argument_list|)
expr_stmt|;
comment|// no header named unknown
name|assertExpression
argument_list|(
literal|"${header?.unknown[cool]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${header.unknown[cool]}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testOGNLHeaderMapNotMap ()
specifier|public
name|void
name|testOGNLHeaderMapNotMap
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.foo[bar]}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Key: bar not found in bean: abc of type: java.lang.String using OGNL path [[bar]]"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOGNLHeaderMapIllegalSyntax ()
specifier|public
name|void
name|testOGNLHeaderMapIllegalSyntax
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertExpression
argument_list|(
literal|"${header.foo[bar}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionIllegalSyntaxException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Illegal syntax: Valid syntax: ${header.name[key]} was: header.foo[bar"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLSimple ()
specifier|public
name|void
name|testBodyOGNLSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getAge}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLNested ()
specifier|public
name|void
name|testBodyOGNLNested
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getAge}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getName}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getAge}"
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderList ()
specifier|public
name|void
name|testBodyOGNLOrderList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[0].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[1].getId}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getLines[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLList ()
specifier|public
name|void
name|testBodyOGNLList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getId}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLArray ()
specifier|public
name|void
name|testBodyOGNLArray
parameter_list|()
throws|throws
name|Exception
block|{
name|OrderLine
index|[]
name|lines
init|=
operator|new
name|OrderLine
index|[
literal|2
index|]
decl_stmt|;
name|lines
index|[
literal|0
index|]
operator|=
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|lines
index|[
literal|1
index|]
operator|=
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|lines
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[0].getName}"
argument_list|,
literal|"Camel in Action"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getId}"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body[1].getName}"
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderListOutOfBounds ()
specifier|public
name|void
name|testBodyOGNLOrderListOutOfBounds
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.getLines[3].getId}"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|IndexOutOfBoundsException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Index: 3, Size: 2 out of bounds with List from bean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLOrderListOutOfBoundsWithElvis ()
specifier|public
name|void
name|testBodyOGNLOrderListOutOfBoundsWithElvis
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body?.getLines[3].getId}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyOGNLOrderListNoMethodNameWithElvis ()
specifier|public
name|void
name|testBodyOGNLOrderListNoMethodNameWithElvis
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|OrderLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|OrderLine
argument_list|>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|123
argument_list|,
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|OrderLine
argument_list|(
literal|456
argument_list|,
literal|"ActiveMQ in Action"
argument_list|)
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
operator|new
name|Order
argument_list|(
name|lines
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
try|try
block|{
name|assertExpression
argument_list|(
literal|"${in.body.getLines[0]?.getRating}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|MethodNotFoundException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|MethodNotFoundException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getRating"
argument_list|,
name|cause
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLElvisToAvoidNPE ()
specifier|public
name|void
name|testBodyOGNLElvisToAvoidNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getAge}"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getName}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getAge}"
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
comment|// using elvis to avoid the NPE
name|assertExpression
argument_list|(
literal|"${in.body.getFriend?.getFriend.getName}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
try|try
block|{
comment|// without elvis we get an NPE
name|assertExpression
argument_list|(
literal|"${in.body.getFriend.getFriend.getName}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeBeanExpressionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to invoke method: .getFriend.getFriend.getName on null due to: java.lang.NullPointerException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBodyOGNLReentrant ()
specifier|public
name|void
name|testBodyOGNLReentrant
parameter_list|()
throws|throws
name|Exception
block|{
name|Animal
name|camel
init|=
operator|new
name|Animal
argument_list|(
literal|"Camel"
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Animal
name|tiger
init|=
operator|new
name|Animal
argument_list|(
literal|"Tony the Tiger"
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|Animal
name|elephant
init|=
operator|new
name|Animal
argument_list|(
literal|"Big Ella"
argument_list|,
literal|48
argument_list|)
decl_stmt|;
name|camel
operator|.
name|setFriend
argument_list|(
name|tiger
argument_list|)
expr_stmt|;
name|tiger
operator|.
name|setFriend
argument_list|(
name|elephant
argument_list|)
expr_stmt|;
name|elephant
operator|.
name|setFriend
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getFriend.getFriend.getFriend.getName}"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getFriend.getFriend.getFriend.getFriend.getName}"
argument_list|,
literal|"Tony the Tiger"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${body.getFriend.getFriend.getFriend.getFriend.getFriend.getName}"
argument_list|,
literal|"Big Ella"
argument_list|)
expr_stmt|;
block|}
DECL|method|getLanguageName ()
specifier|protected
name|String
name|getLanguageName
parameter_list|()
block|{
return|return
literal|"simple"
return|;
block|}
DECL|class|Animal
specifier|public
specifier|static
specifier|final
class|class
name|Animal
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|age
specifier|private
name|int
name|age
decl_stmt|;
DECL|field|friend
specifier|private
name|Animal
name|friend
decl_stmt|;
DECL|method|Animal (String name, int age)
specifier|private
name|Animal
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|age
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|age
operator|=
name|age
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getAge ()
specifier|public
name|int
name|getAge
parameter_list|()
block|{
return|return
name|age
return|;
block|}
DECL|method|getFriend ()
specifier|public
name|Animal
name|getFriend
parameter_list|()
block|{
return|return
name|friend
return|;
block|}
DECL|method|setFriend (Animal friend)
specifier|public
name|void
name|setFriend
parameter_list|(
name|Animal
name|friend
parameter_list|)
block|{
name|this
operator|.
name|friend
operator|=
name|friend
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|class|Order
specifier|public
specifier|static
specifier|final
class|class
name|Order
block|{
DECL|field|lines
specifier|private
name|List
name|lines
decl_stmt|;
DECL|method|Order (List lines)
specifier|public
name|Order
parameter_list|(
name|List
name|lines
parameter_list|)
block|{
name|this
operator|.
name|lines
operator|=
name|lines
expr_stmt|;
block|}
DECL|method|getLines ()
specifier|public
name|List
name|getLines
parameter_list|()
block|{
return|return
name|lines
return|;
block|}
DECL|method|setLines (List lines)
specifier|public
name|void
name|setLines
parameter_list|(
name|List
name|lines
parameter_list|)
block|{
name|this
operator|.
name|lines
operator|=
name|lines
expr_stmt|;
block|}
block|}
DECL|class|OrderLine
specifier|public
specifier|static
specifier|final
class|class
name|OrderLine
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|OrderLine (int id, String name)
specifier|public
name|OrderLine
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

