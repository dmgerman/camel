begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.tokenizer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|tokenizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|Namespaces
import|;
end_import

begin_class
DECL|class|XMLTokenizeLanguageStreamingFileTest
specifier|public
class|class
name|XMLTokenizeLanguageStreamingFileTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/xmltokenize"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFromFile ()
specifier|public
name|void
name|testFromFile
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"<c:child some_attr='a' anotherAttr='a' xmlns:c=\"urn:c\"></c:child>"
argument_list|,
literal|"<c:child some_attr='b' anotherAttr='b' xmlns:c=\"urn:c\"></c:child>"
argument_list|,
literal|"<c:child some_attr='c' anotherAttr='c' xmlns:c=\"urn:c\"></c:child>"
argument_list|,
literal|"<c:child some_attr='d' anotherAttr='d' xmlns:c=\"urn:c\"></c:child>"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"<?xml version='1.0' encoding='UTF-8'?>"
operator|+
literal|"<c:parent xmlns:c='urn:c'>"
operator|+
literal|"<c:child some_attr='a' anotherAttr='a'></c:child>"
operator|+
literal|"<c:child some_attr='b' anotherAttr='b'></c:child>"
operator|+
literal|"<c:child some_attr='c' anotherAttr='c'></c:child>"
operator|+
literal|"<c:child some_attr='d' anotherAttr='d'></c:child>"
operator|+
literal|"</c:parent>"
decl_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/xmltokenize"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file:target/xmltokenize"
argument_list|,
name|body
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"myxml.xml"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
name|Namespaces
name|ns
init|=
operator|new
name|Namespaces
argument_list|(
literal|"C"
argument_list|,
literal|"urn:c"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"file:target/xmltokenize?initialDelay=0&delay=10"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|xtokenize
argument_list|(
literal|"//C:child"
argument_list|,
name|ns
argument_list|)
operator|.
name|streaming
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

