begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ComposedMessageProcessorTest
specifier|public
class|class
name|ComposedMessageProcessorTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testValidatingCorrectOrder ()
specifier|public
name|void
name|testValidatingCorrectOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|resultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"orderId"
argument_list|,
literal|"myorderid"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OrderItem
argument_list|>
name|order
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|OrderItem
index|[]
block|{
operator|new
name|OrderItem
argument_list|(
literal|"widget"
argument_list|,
literal|5
argument_list|)
block|,
operator|new
name|OrderItem
argument_list|(
literal|"gadget"
argument_list|,
literal|10
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
name|order
argument_list|,
literal|"orderId"
argument_list|,
literal|"myorderid"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|OrderItem
argument_list|>
name|validatedOrder
init|=
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|validatedOrder
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|valid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validatedOrder
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|valid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testValidatingIncorrectOrder ()
specifier|public
name|void
name|testValidatingIncorrectOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|resultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"orderId"
argument_list|,
literal|"myorderid"
argument_list|)
expr_stmt|;
comment|// START SNIPPET: e1
name|List
argument_list|<
name|OrderItem
argument_list|>
name|order
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|OrderItem
index|[]
block|{
operator|new
name|OrderItem
argument_list|(
literal|"widget"
argument_list|,
literal|500
argument_list|)
block|,
operator|new
name|OrderItem
argument_list|(
literal|"gadget"
argument_list|,
literal|200
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
name|order
argument_list|,
literal|"orderId"
argument_list|,
literal|"myorderid"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e1
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|OrderItem
argument_list|>
name|validatedOrder
init|=
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|validatedOrder
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|valid
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|validatedOrder
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|valid
argument_list|)
expr_stmt|;
block|}
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"orderItemHelper"
argument_list|,
operator|new
name|OrderItemHelper
argument_list|()
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"widgetInventory"
argument_list|,
operator|new
name|WidgetInventory
argument_list|()
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"gadgetInventory"
argument_list|,
operator|new
name|GadgetInventory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// START SNIPPET: e2
comment|// split up the order so individual OrderItems can be validated by the appropriate bean
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|method
argument_list|(
literal|"orderItemHelper"
argument_list|,
literal|"isWidget"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:widgetInventory"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|to
argument_list|(
literal|"bean:gadgetInventory"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"seda:aggregate"
argument_list|)
expr_stmt|;
comment|// collect and re-assemble the validated OrderItems into an order again
name|from
argument_list|(
literal|"seda:aggregate"
argument_list|)
operator|.
name|aggregate
argument_list|(
operator|new
name|MyOrderAggregationStrategy
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
literal|"orderId"
argument_list|)
operator|.
name|completionTimeout
argument_list|(
literal|100
argument_list|)
operator|.
name|completionTimeoutCheckerInterval
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e2
block|}
block|}
return|;
block|}
comment|// START SNIPPET: e3
DECL|class|OrderItem
specifier|public
specifier|static
specifier|final
class|class
name|OrderItem
block|{
DECL|field|type
name|String
name|type
decl_stmt|;
comment|// type of the item
DECL|field|quantity
name|int
name|quantity
decl_stmt|;
comment|// how many we want
DECL|field|valid
name|boolean
name|valid
decl_stmt|;
comment|// whether that many items can be ordered
DECL|method|OrderItem (String type, int quantity)
specifier|public
name|OrderItem
parameter_list|(
name|String
name|type
parameter_list|,
name|int
name|quantity
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|quantity
operator|=
name|quantity
expr_stmt|;
block|}
block|}
comment|// END SNIPPET: e3
DECL|class|OrderItemHelper
specifier|public
specifier|static
specifier|final
class|class
name|OrderItemHelper
block|{
DECL|method|OrderItemHelper ()
specifier|private
name|OrderItemHelper
parameter_list|()
block|{         }
comment|// START SNIPPET: e4
DECL|method|isWidget (@ody OrderItem orderItem)
specifier|public
specifier|static
name|boolean
name|isWidget
parameter_list|(
annotation|@
name|Body
name|OrderItem
name|orderItem
parameter_list|)
block|{
return|return
name|orderItem
operator|.
name|type
operator|.
name|equals
argument_list|(
literal|"widget"
argument_list|)
return|;
block|}
comment|// END SNIPPET: e4
block|}
comment|/**      * Bean that checks whether the specified number of widgets can be ordered      */
comment|// START SNIPPET: e5
DECL|class|WidgetInventory
specifier|public
specifier|static
specifier|final
class|class
name|WidgetInventory
block|{
DECL|method|checkInventory (@ody OrderItem orderItem)
specifier|public
name|void
name|checkInventory
parameter_list|(
annotation|@
name|Body
name|OrderItem
name|orderItem
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"widget"
argument_list|,
name|orderItem
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|orderItem
operator|.
name|quantity
operator|<
literal|10
condition|)
block|{
name|orderItem
operator|.
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// END SNIPPET: e5
comment|/**      * Bean that checks whether the specified number of gadgets can be ordered      */
comment|// START SNIPPET: e6
DECL|class|GadgetInventory
specifier|public
specifier|static
specifier|final
class|class
name|GadgetInventory
block|{
DECL|method|checkInventory (@ody OrderItem orderItem)
specifier|public
name|void
name|checkInventory
parameter_list|(
annotation|@
name|Body
name|OrderItem
name|orderItem
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"gadget"
argument_list|,
name|orderItem
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|orderItem
operator|.
name|quantity
operator|<
literal|20
condition|)
block|{
name|orderItem
operator|.
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// END SNIPPET: e6
comment|/**      * Aggregation strategy that re-assembles the validated OrderItems       * into an order, which is just a List.      */
comment|// START SNIPPET: e7
DECL|class|MyOrderAggregationStrategy
specifier|public
specifier|static
specifier|final
class|class
name|MyOrderAggregationStrategy
implements|implements
name|AggregationStrategy
block|{
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
if|if
condition|(
name|oldExchange
operator|==
literal|null
condition|)
block|{
return|return
name|newExchange
return|;
block|}
name|List
argument_list|<
name|OrderItem
argument_list|>
name|order
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|order
operator|.
name|add
argument_list|(
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|OrderItem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|order
operator|.
name|add
argument_list|(
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|OrderItem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
name|oldExchange
return|;
block|}
block|}
comment|// END SNIPPET: e7
block|}
end_class

end_unit

