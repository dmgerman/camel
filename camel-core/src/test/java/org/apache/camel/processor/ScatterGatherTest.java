begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jndi
operator|.
name|JndiContext
import|;
end_import

begin_class
DECL|class|ScatterGatherTest
specifier|public
class|class
name|ScatterGatherTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testScatterAndGather ()
specifier|public
name|void
name|testScatterAndGather
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// expect the lowest quote
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"<quote_request/>"
argument_list|,
literal|"correlationId"
argument_list|,
literal|"myid"
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createJndiContext ()
specifier|protected
name|Context
name|createJndiContext
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiContext
name|jndi
init|=
operator|new
name|JndiContext
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"vendor1"
argument_list|,
operator|new
name|MyVendor
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"vendor2"
argument_list|,
operator|new
name|MyVendor
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"vendor3"
argument_list|,
operator|new
name|MyVendor
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|multicast
argument_list|()
operator|.
name|to
argument_list|(
literal|"seda:vendor1"
argument_list|,
literal|"seda:vendor2"
argument_list|,
literal|"seda:vendor3"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:vendor1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:vendor1"
argument_list|,
literal|"seda:aggregate"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:vendor2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:vendor2"
argument_list|,
literal|"seda:aggregate"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:vendor3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:vendor3"
argument_list|,
literal|"seda:aggregate"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:aggregate"
argument_list|)
operator|.
name|aggregate
argument_list|(
operator|new
name|LowestQuoteAggregationStrategy
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
literal|"correlationId"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|LowestQuoteAggregationStrategy
specifier|public
specifier|static
class|class
name|LowestQuoteAggregationStrategy
implements|implements
name|AggregationStrategy
block|{
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
if|if
condition|(
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|int
operator|.
name|class
argument_list|)
operator|<
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|int
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|oldExchange
return|;
block|}
else|else
block|{
return|return
name|newExchange
return|;
block|}
block|}
block|}
DECL|class|MyVendor
specifier|public
specifier|static
class|class
name|MyVendor
block|{
DECL|field|quoteResult
name|int
name|quoteResult
init|=
literal|0
decl_stmt|;
DECL|method|MyVendor (int quoteResult)
specifier|public
name|MyVendor
parameter_list|(
name|int
name|quoteResult
parameter_list|)
block|{
name|this
operator|.
name|quoteResult
operator|=
name|quoteResult
expr_stmt|;
block|}
DECL|method|getQuote (Exchange exchange)
specifier|public
name|void
name|getQuote
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|quoteResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

