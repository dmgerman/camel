begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|BodyInAggregatingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|MemoryAggregationRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|OptimisticLockRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|OptimisticLockingAggregationRepository
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|DistributedOptimisticLockFailingTest
specifier|public
class|class
name|DistributedOptimisticLockFailingTest
extends|extends
name|AbstractDistributedTest
block|{
DECL|class|AlwaysFailingRepository
specifier|private
specifier|static
specifier|final
class|class
name|AlwaysFailingRepository
extends|extends
name|MemoryAggregationRepository
block|{
annotation|@
name|Override
DECL|method|add (CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|add
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|key
parameter_list|,
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
throw|throw
operator|new
name|OptimisticLockingException
argument_list|()
throw|;
block|}
block|}
DECL|class|EverySecondOneFailsRepository
specifier|private
specifier|static
specifier|final
class|class
name|EverySecondOneFailsRepository
extends|extends
name|MemoryAggregationRepository
block|{
DECL|field|counter
specifier|private
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|EverySecondOneFailsRepository ()
specifier|private
name|EverySecondOneFailsRepository
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add (CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|add
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|key
parameter_list|,
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
name|int
name|count
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OptimisticLockingException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|add
argument_list|(
name|camelContext
argument_list|,
name|key
argument_list|,
name|oldExchange
argument_list|,
name|newExchange
argument_list|)
return|;
block|}
block|}
block|}
DECL|field|sharedRepository
specifier|private
name|EverySecondOneFailsRepository
name|sharedRepository
init|=
operator|new
name|EverySecondOneFailsRepository
argument_list|()
decl_stmt|;
DECL|method|testAlwaysFails ()
specifier|public
name|void
name|testAlwaysFails
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock2
init|=
name|getMockEndpoint2
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock2
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:fails"
argument_list|,
literal|"hello world"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw CamelExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|CamelExchangeException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|OptimisticLockingAggregationRepository
operator|.
name|OptimisticLockingException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|template2
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:fails"
argument_list|,
literal|"hello world"
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw CamelExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|CamelExchangeException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|OptimisticLockingAggregationRepository
operator|.
name|OptimisticLockingException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mock2
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testEverySecondOneFails ()
specifier|public
name|void
name|testEverySecondOneFails
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|size
init|=
literal|200
decl_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|id
init|=
name|i
operator|%
literal|25
decl_stmt|;
specifier|final
name|int
name|choice
init|=
name|i
operator|%
literal|2
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|i
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|choice
operator|==
literal|0
condition|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:everysecondone"
argument_list|,
literal|""
operator|+
name|count
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template2
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:everysecondone"
argument_list|,
literal|""
operator|+
name|count
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mock2
init|=
name|getMockEndpoint2
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
comment|// submit all tasks
name|service
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|int
name|contextCount
init|=
name|mock
operator|.
name|getReceivedCounter
argument_list|()
decl_stmt|;
name|int
name|context2Count
init|=
name|mock2
operator|.
name|getReceivedCounter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|contextCount
operator|+
name|context2Count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:fails"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|header
argument_list|(
literal|"id"
argument_list|)
argument_list|,
operator|new
name|BodyInAggregatingStrategy
argument_list|()
argument_list|)
operator|.
name|aggregationRepository
argument_list|(
operator|new
name|AlwaysFailingRepository
argument_list|()
argument_list|)
operator|.
name|optimisticLocking
argument_list|()
comment|// do not use retry delay to speedup test
operator|.
name|optimisticLockRetryPolicy
argument_list|(
operator|new
name|OptimisticLockRetryPolicy
argument_list|()
operator|.
name|maximumRetries
argument_list|(
literal|5
argument_list|)
operator|.
name|retryDelay
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|2
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:everysecondone"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|header
argument_list|(
literal|"id"
argument_list|)
argument_list|,
operator|new
name|BodyInAggregatingStrategy
argument_list|()
argument_list|)
operator|.
name|aggregationRepository
argument_list|(
name|sharedRepository
argument_list|)
operator|.
name|optimisticLocking
argument_list|()
operator|.
name|completionSize
argument_list|(
literal|8
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

