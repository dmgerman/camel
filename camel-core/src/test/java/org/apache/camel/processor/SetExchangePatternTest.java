begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_class
DECL|class|SetExchangePatternTest
specifier|public
class|class
name|SetExchangePatternTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testInvokeWithInOut ()
specifier|public
name|void
name|testInvokeWithInOut
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMessageReceivedWithPattern
argument_list|(
literal|"direct:invokeWithInOut"
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvokeWithInOnly ()
specifier|public
name|void
name|testInvokeWithInOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMessageReceivedWithPattern
argument_list|(
literal|"direct:invokeWithInOnly"
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetInOut ()
specifier|public
name|void
name|testSetInOut
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMessageReceivedWithPattern
argument_list|(
literal|"direct:inOnly"
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetInOutAsToParam ()
specifier|public
name|void
name|testSetInOutAsToParam
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMessageReceivedWithPattern
argument_list|(
literal|"direct:inOnlyAsToParam"
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetInOnly ()
specifier|public
name|void
name|testSetInOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMessageReceivedWithPattern
argument_list|(
literal|"direct:inOut"
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetRobustInOnly ()
specifier|public
name|void
name|testSetRobustInOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMessageReceivedWithPattern
argument_list|(
literal|"direct:inOut1"
argument_list|,
name|ExchangePattern
operator|.
name|RobustInOnly
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetInOnly2 ()
specifier|public
name|void
name|testSetInOnly2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMessageReceivedWithPattern
argument_list|(
literal|"direct:inOut2"
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMessageReceivedWithPattern (String sendUri, ExchangePattern expectedPattern)
specifier|protected
name|void
name|assertMessageReceivedWithPattern
parameter_list|(
name|String
name|sendUri
parameter_list|,
name|ExchangePattern
name|expectedPattern
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ExchangePattern
name|sendPattern
decl_stmt|;
switch|switch
condition|(
name|expectedPattern
condition|)
block|{
case|case
name|InOut
case|:
name|sendPattern
operator|=
name|ExchangePattern
operator|.
name|InOnly
expr_stmt|;
break|break;
case|case
name|InOnly
case|:
case|case
name|RobustInOnly
case|:
name|sendPattern
operator|=
name|ExchangePattern
operator|.
name|InOut
expr_stmt|;
break|break;
default|default:
name|sendPattern
operator|=
name|ExchangePattern
operator|.
name|InOnly
expr_stmt|;
block|}
name|MockEndpoint
name|resultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|String
name|expectedBody
init|=
literal|"InOnlyMessage"
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|expectedBody
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|sendUri
argument_list|,
name|sendPattern
argument_list|,
name|expectedBody
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|ExchangePattern
name|actualPattern
init|=
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPattern
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"received exchange pattern"
argument_list|,
name|actualPattern
argument_list|,
name|expectedPattern
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// START SNIPPET: example
comment|// Send to an endpoint using InOut
name|from
argument_list|(
literal|"direct:invokeWithInOut"
argument_list|)
operator|.
name|inOut
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// Send to an endpoint using InOut
name|from
argument_list|(
literal|"direct:invokeWithInOnly"
argument_list|)
operator|.
name|inOnly
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// Set the exchange pattern to InOut, then send it from direct:inOnly to mock:result endpoint
name|from
argument_list|(
literal|"direct:inOnly"
argument_list|)
operator|.
name|inOut
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// Or we can pass the pattern as a parameter
name|from
argument_list|(
literal|"direct:inOnlyAsToParam"
argument_list|)
operator|.
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// Set the exchange pattern to InOut, then send it from direct:inOut to mock:result endpoint
name|from
argument_list|(
literal|"direct:inOut"
argument_list|)
operator|.
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// Send the exchange from direct:inOut1 to mock:result with setting the exchange pattern to be RobustInOnly
name|from
argument_list|(
literal|"direct:inOut1"
argument_list|)
operator|.
name|to
argument_list|(
name|ExchangePattern
operator|.
name|RobustInOnly
argument_list|,
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// Send the exchange from direct:inOut2 to mock:result with setting the exchange pattern to be InOnly
name|from
argument_list|(
literal|"direct:inOut2"
argument_list|)
operator|.
name|inOnly
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: example
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

