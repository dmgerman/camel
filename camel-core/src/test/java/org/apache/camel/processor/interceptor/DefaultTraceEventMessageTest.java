begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|DefaultTraceEventMessageTest
specifier|public
class|class
name|DefaultTraceEventMessageTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testDefaultTraceEventMessage ()
specifier|public
name|void
name|testDefaultTraceEventMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MockEndpoint
name|traced
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:traced"
argument_list|)
decl_stmt|;
name|traced
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"bar"
argument_list|,
literal|"456"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"cheese"
argument_list|,
literal|789
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|DefaultTraceEventMessage
name|em
init|=
name|traced
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|DefaultTraceEventMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|em
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|em
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"direct://start"
argument_list|,
name|em
operator|.
name|getFromEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|em
operator|.
name|getPreviousNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock://foo"
argument_list|,
name|em
operator|.
name|getToNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|em
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|em
operator|.
name|getShortExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"InOut"
argument_list|,
name|em
operator|.
name|getExchangePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|em
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo=123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|em
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CamelToEndpoint=direct://start"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|em
operator|.
name|getProperties
argument_list|()
operator|.
name|contains
argument_list|(
literal|"CamelCreatedTimestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|em
operator|.
name|getHeaders
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar=456"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|em
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"String"
argument_list|,
name|em
operator|.
name|getBodyType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bye World"
argument_list|,
name|em
operator|.
name|getOutBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"String"
argument_list|,
name|em
operator|.
name|getOutBodyType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{cheese=789}"
argument_list|,
name|em
operator|.
name|getOutHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultTraceEventMessageBody ()
specifier|public
name|void
name|testDefaultTraceEventMessageBody
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test"
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultTraceEventMessage
name|em
init|=
operator|new
name|DefaultTraceEventMessage
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|,
literal|null
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong body string"
argument_list|,
literal|"[Body is file based: target/test]"
argument_list|,
name|em
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"target/test"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|em
operator|=
operator|new
name|DefaultTraceEventMessage
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|,
literal|null
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong body string"
argument_list|,
literal|"[Body is instance of java.io.InputStream]"
argument_list|,
name|em
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultTraceEventMessageOptions ()
specifier|public
name|void
name|testDefaultTraceEventMessageOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|DefaultTraceEventMessage
name|em
init|=
operator|new
name|DefaultTraceEventMessage
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|,
literal|null
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|em
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|em
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setBodyType
argument_list|(
literal|"String"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"String"
argument_list|,
name|em
operator|.
name|getBodyType
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setCausedByException
argument_list|(
literal|"Damn"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Damn"
argument_list|,
name|em
operator|.
name|getCausedByException
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setExchangeId
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|em
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setExchangePattern
argument_list|(
literal|"InOnly"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"InOnly"
argument_list|,
name|em
operator|.
name|getExchangePattern
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setFromEndpointUri
argument_list|(
literal|"direct://start"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"direct://start"
argument_list|,
name|em
operator|.
name|getFromEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setHeaders
argument_list|(
literal|"{foo=123}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{foo=123}"
argument_list|,
name|em
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setOutBody
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|em
operator|.
name|getOutBody
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setOutBodyType
argument_list|(
literal|"Integer"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Integer"
argument_list|,
name|em
operator|.
name|getOutBodyType
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setOutHeaders
argument_list|(
literal|"{cheese=789}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{cheese=789}"
argument_list|,
name|em
operator|.
name|getOutHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setProperties
argument_list|(
literal|"{foo=123}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{foo=123}"
argument_list|,
name|em
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setPreviousNode
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|em
operator|.
name|getPreviousNode
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setToNode
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|em
operator|.
name|getToNode
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|em
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|em
operator|.
name|setShortExchangeId
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|em
operator|.
name|getShortExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|exchange
argument_list|,
name|em
operator|.
name|getTracedExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|Tracer
name|tracer
init|=
name|Tracer
operator|.
name|createTracer
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|tracer
operator|.
name|setDestinationUri
argument_list|(
literal|"mock:traced"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addInterceptStrategy
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

