begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|saga
operator|.
name|InMemorySagaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaPropagation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
operator|.
name|await
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|SagaTest
specifier|public
class|class
name|SagaTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|orderManagerService
specifier|private
name|OrderManagerService
name|orderManagerService
decl_stmt|;
DECL|field|creditService
specifier|private
name|CreditService
name|creditService
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreditExhausted ()
specifier|public
name|void
name|testCreditExhausted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// total credit is 100
name|buy
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buy
argument_list|(
literal|70
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buy
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// fail
name|buy
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|await
argument_list|()
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|orderManagerService
operator|.
name|getOrders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|await
argument_list|()
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|creditService
operator|.
name|getCredit
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTotalCompensation ()
specifier|public
name|void
name|testTotalCompensation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// total credit is 100
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|buy
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buy
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|await
argument_list|()
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|orderManagerService
operator|.
name|getOrders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|await
argument_list|()
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|creditService
operator|.
name|getCredit
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buy (int amount, boolean failAtTheEnd, boolean shouldFail)
specifier|private
name|void
name|buy
parameter_list|(
name|int
name|amount
parameter_list|,
name|boolean
name|failAtTheEnd
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
block|{
try|try
block|{
name|context
operator|.
name|createFluentProducerTemplate
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:saga"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"amount"
argument_list|,
name|amount
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"fail"
argument_list|,
name|failAtTheEnd
argument_list|)
operator|.
name|request
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldFail
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception not thrown"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldFail
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|orderManagerService
operator|=
operator|new
name|OrderManagerService
argument_list|()
expr_stmt|;
name|creditService
operator|=
operator|new
name|CreditService
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|CamelSagaService
name|sagaService
init|=
operator|new
name|InMemorySagaService
argument_list|()
decl_stmt|;
name|context
operator|.
name|addService
argument_list|(
name|sagaService
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:saga"
argument_list|)
operator|.
name|saga
argument_list|()
operator|.
name|propagation
argument_list|(
name|SagaPropagation
operator|.
name|REQUIRES_NEW
argument_list|)
operator|.
name|log
argument_list|(
literal|"Creating a new order"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:newOrder"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Taking the credit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:reserveCredit"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Finalizing"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:finalize"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Done!"
argument_list|)
expr_stmt|;
comment|// Order service
name|from
argument_list|(
literal|"direct:newOrder"
argument_list|)
operator|.
name|saga
argument_list|()
operator|.
name|propagation
argument_list|(
name|SagaPropagation
operator|.
name|MANDATORY
argument_list|)
operator|.
name|compensation
argument_list|(
literal|"direct:cancelOrder"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|)
operator|.
name|bean
argument_list|(
name|orderManagerService
argument_list|,
literal|"newOrder"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Order ${body} created"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:cancelOrder"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|)
operator|.
name|bean
argument_list|(
name|orderManagerService
argument_list|,
literal|"cancelOrder"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Order ${body} cancelled"
argument_list|)
expr_stmt|;
comment|// Credit service
name|from
argument_list|(
literal|"direct:reserveCredit"
argument_list|)
operator|.
name|saga
argument_list|()
operator|.
name|propagation
argument_list|(
name|SagaPropagation
operator|.
name|MANDATORY
argument_list|)
operator|.
name|compensation
argument_list|(
literal|"direct:refundCredit"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|)
operator|.
name|bean
argument_list|(
name|creditService
argument_list|,
literal|"reserveCredit"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Credit ${header.amount} reserved in action ${body}"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:refundCredit"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|)
operator|.
name|bean
argument_list|(
name|creditService
argument_list|,
literal|"refundCredit"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Credit for action ${body} refunded"
argument_list|)
expr_stmt|;
comment|// Final actions
name|from
argument_list|(
literal|"direct:finalize"
argument_list|)
operator|.
name|saga
argument_list|()
operator|.
name|propagation
argument_list|(
name|SagaPropagation
operator|.
name|NOT_SUPPORTED
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"fail"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|x
lambda|->
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fail"
argument_list|)
throw|;
block|}
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|OrderManagerService
specifier|public
specifier|static
class|class
name|OrderManagerService
block|{
DECL|field|orders
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|orders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|newOrder (String id)
specifier|public
specifier|synchronized
name|void
name|newOrder
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|orders
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|cancelOrder (String id)
specifier|public
specifier|synchronized
name|void
name|cancelOrder
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|orders
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|getOrders ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|getOrders
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|orders
argument_list|)
return|;
block|}
block|}
DECL|class|CreditService
specifier|public
specifier|static
class|class
name|CreditService
block|{
DECL|field|totalCredit
specifier|private
name|int
name|totalCredit
decl_stmt|;
DECL|field|reservations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|reservations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CreditService (int totalCredit)
specifier|public
name|CreditService
parameter_list|(
name|int
name|totalCredit
parameter_list|)
block|{
name|this
operator|.
name|totalCredit
operator|=
name|totalCredit
expr_stmt|;
block|}
DECL|method|reserveCredit (String id, @Header(R) int amount)
specifier|public
specifier|synchronized
name|void
name|reserveCredit
parameter_list|(
name|String
name|id
parameter_list|,
annotation|@
name|Header
argument_list|(
literal|"amount"
argument_list|)
name|int
name|amount
parameter_list|)
block|{
name|int
name|credit
init|=
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|amount
operator|>
name|credit
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Insufficient credit"
argument_list|)
throw|;
block|}
name|reservations
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
DECL|method|refundCredit (String id)
specifier|public
specifier|synchronized
name|void
name|refundCredit
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|reservations
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|getCredit ()
specifier|public
specifier|synchronized
name|int
name|getCredit
parameter_list|()
block|{
return|return
name|totalCredit
operator|-
name|reservations
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|reduce
argument_list|(
literal|0
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|a
operator|+
name|b
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

