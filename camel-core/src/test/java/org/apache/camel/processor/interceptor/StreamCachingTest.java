begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultRouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link StreamCaching}  */
end_comment

begin_class
DECL|class|StreamCachingTest
specifier|public
class|class
name|StreamCachingTest
extends|extends
name|ContextTestSupport
block|{
comment|/**      * Tests enabling stream caching on a {@link RouteContext}      */
DECL|method|testEnableOnRouteContext ()
specifier|public
name|void
name|testEnableOnRouteContext
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteContext
name|rc
init|=
operator|new
name|DefaultRouteContext
argument_list|(
name|super
operator|.
name|context
argument_list|)
decl_stmt|;
name|StreamCaching
operator|.
name|enable
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|assertStrategyEnabled
argument_list|(
literal|"Enabling StreamCaching should add it to the intercept strategies"
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|StreamCaching
operator|.
name|enable
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|assertStrategyEnabled
argument_list|(
literal|"Enabling it again should not add a second instance"
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
comment|/*      * Assert that the strategy is enabled exactly one time      */
DECL|method|assertStrategyEnabled (String message, RouteContext rc)
specifier|private
name|void
name|assertStrategyEnabled
parameter_list|(
name|String
name|message
parameter_list|,
name|RouteContext
name|rc
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|rc
operator|.
name|getInterceptStrategies
argument_list|()
control|)
block|{
if|if
condition|(
name|strategy
operator|instanceof
name|StreamCaching
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|message
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

