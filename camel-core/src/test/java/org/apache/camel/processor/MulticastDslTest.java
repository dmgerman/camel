begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_class
DECL|class|MulticastDslTest
specifier|public
class|class
name|MulticastDslTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testMulticastDsl ()
specifier|public
name|void
name|testMulticastDsl
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"onPrepare"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|multicast
argument_list|()
operator|.
name|onPrepare
argument_list|()
operator|.
name|message
argument_list|(
name|m
lambda|->
name|m
operator|.
name|setHeader
argument_list|(
literal|"onPrepare"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|aggregationStrategy
argument_list|()
operator|.
name|body
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|(
name|o
operator|,
name|n
operator|)
operator|->
name|o
operator|!=
literal|null
condition|?
name|o
operator|+
name|n
else|:
name|n
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:increase-by-1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:increase-by-2"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:increase-by-1"
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|Increase
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:increase-by-2"
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|Increase
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|Increase
specifier|public
specifier|static
class|class
name|Increase
block|{
DECL|field|amount
specifier|private
specifier|final
name|int
name|amount
decl_stmt|;
DECL|method|Increase (int amount)
specifier|public
name|Increase
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
name|this
operator|.
name|amount
operator|=
name|amount
expr_stmt|;
block|}
DECL|method|add (int num)
specifier|public
name|int
name|add
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|num
operator|+
name|amount
return|;
block|}
block|}
block|}
end_class

end_unit

