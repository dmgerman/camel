begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|queue
operator|.
name|QueueEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ProducerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|ChoiceTest
specifier|public
class|class
name|ChoiceTest
extends|extends
name|TestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ChoiceTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|container
specifier|protected
name|CamelContext
name|container
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
DECL|field|latch
specifier|protected
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|protected
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|endpoint
decl_stmt|;
DECL|field|client
specifier|protected
name|ProducerCache
argument_list|<
name|Exchange
argument_list|>
name|client
init|=
operator|new
name|ProducerCache
argument_list|<
name|Exchange
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|receivedBodies
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|receivedBodies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|testSendToFirstWhen ()
specifier|public
name|void
name|testSendToFirstWhen
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
literal|"bar"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|waitForMessageInQueue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertQueueContains
argument_list|(
literal|"b"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertQueueEmpty
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertQueueEmpty
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSendToSecondWhen ()
specifier|public
name|void
name|testSendToSecondWhen
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
literal|"cheese"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|waitForMessageInQueue
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertQueueEmpty
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertQueueContains
argument_list|(
literal|"c"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertQueueEmpty
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSendToOtherwiseClause ()
specifier|public
name|void
name|testSendToOtherwiseClause
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
literal|"somethingUndefined"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|waitForMessageInQueue
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertQueueEmpty
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertQueueEmpty
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertQueueContains
argument_list|(
literal|"d"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertQueueContains (String name, String expectedBody)
specifier|protected
name|void
name|assertQueueContains
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|expectedBody
parameter_list|)
block|{
name|QueueEndpoint
name|endpoint
init|=
name|getQueue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|BlockingQueue
name|queue
init|=
name|endpoint
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue size for: "
operator|+
name|name
operator|+
literal|" but was: "
operator|+
name|queue
argument_list|,
literal|1
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|(
name|Exchange
operator|)
name|queue
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Object
name|firstBody
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"First body"
argument_list|,
name|expectedBody
argument_list|,
name|firstBody
argument_list|)
expr_stmt|;
block|}
DECL|method|assertQueueEmpty (String name)
specifier|protected
name|void
name|assertQueueEmpty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|QueueEndpoint
name|queue
init|=
name|getQueue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue size for: "
operator|+
name|name
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForMessageInQueue (String name)
specifier|protected
name|void
name|waitForMessageInQueue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// TODO we should replace with actual processors on each queue using a latch
name|QueueEndpoint
name|endpoint
init|=
name|getQueue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|BlockingQueue
name|queue
init|=
name|endpoint
operator|.
name|getQueue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
operator|&&
name|queue
operator|.
name|isEmpty
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getQueue (String name)
specifier|protected
name|QueueEndpoint
name|getQueue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|QueueEndpoint
operator|)
name|container
operator|.
name|resolveEndpoint
argument_list|(
literal|"queue:"
operator|+
name|name
argument_list|)
return|;
block|}
DECL|method|sendMessage (final Object headerValue, final Object body)
specifier|protected
name|void
name|sendMessage
parameter_list|(
specifier|final
name|Object
name|headerValue
parameter_list|,
specifier|final
name|Object
name|body
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// now lets fire in a message
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// TODO we really should be using latches
comment|// for now lets wait a little bit
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Processor
argument_list|<
name|Exchange
argument_list|>
name|processor
init|=
operator|new
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|e
parameter_list|)
block|{
name|Message
name|in
init|=
name|e
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|body
init|=
name|in
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Received body: "
operator|+
name|body
operator|+
literal|" on exchange: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|receivedBodies
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|String
name|endpointUri
init|=
literal|"queue:a"
decl_stmt|;
comment|// lets add some routes
name|container
operator|.
name|addRoutes
argument_list|(
name|createRouteBuilder
argument_list|(
name|endpointUri
argument_list|,
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|=
name|container
operator|.
name|resolveEndpoint
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No endpoint found for URI: "
operator|+
name|endpointUri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilder (final String endpointUri, final Processor<Exchange> processor)
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|(
specifier|final
name|String
name|endpointUri
parameter_list|,
specifier|final
name|Processor
argument_list|<
name|Exchange
argument_list|>
name|processor
parameter_list|)
block|{
return|return
operator|new
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"queue:a"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"queue:b"
argument_list|)
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"cheese"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"queue:c"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|to
argument_list|(
literal|"queue:d"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

