begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.validation
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|resolver
operator|.
name|tools
operator|.
name|CatalogResolver
import|;
end_import

begin_class
DECL|class|CatalogLSResourceResolver
specifier|public
class|class
name|CatalogLSResourceResolver
implements|implements
name|LSResourceResolver
block|{
DECL|field|catalogResolver
name|CatalogResolver
name|catalogResolver
decl_stmt|;
DECL|method|CatalogLSResourceResolver ()
specifier|public
name|CatalogLSResourceResolver
parameter_list|()
block|{     }
DECL|method|CatalogLSResourceResolver (CatalogResolver catalogResolver)
specifier|public
name|CatalogLSResourceResolver
parameter_list|(
name|CatalogResolver
name|catalogResolver
parameter_list|)
block|{
name|this
operator|.
name|catalogResolver
operator|=
name|catalogResolver
expr_stmt|;
block|}
DECL|method|getCatalogResolver ()
specifier|public
name|CatalogResolver
name|getCatalogResolver
parameter_list|()
block|{
return|return
name|catalogResolver
return|;
block|}
DECL|method|setCatalogResolver (CatalogResolver catalogResolver)
specifier|public
name|void
name|setCatalogResolver
parameter_list|(
name|CatalogResolver
name|catalogResolver
parameter_list|)
block|{
name|this
operator|.
name|catalogResolver
operator|=
name|catalogResolver
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveResource (String type, String namespaceURI, String publicId, String systemId, String baseURI)
specifier|public
name|LSInput
name|resolveResource
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|,
name|String
name|baseURI
parameter_list|)
block|{
return|return
operator|new
name|LSInputSource
argument_list|(
name|namespaceURI
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|,
name|baseURI
argument_list|)
return|;
block|}
DECL|class|LSInputSource
class|class
name|LSInputSource
implements|implements
name|LSInput
block|{
DECL|field|inputSource
specifier|private
name|InputSource
name|inputSource
decl_stmt|;
DECL|field|publicId
specifier|private
name|String
name|publicId
decl_stmt|;
DECL|field|systemId
specifier|private
name|String
name|systemId
decl_stmt|;
DECL|field|baseURI
specifier|private
name|String
name|baseURI
decl_stmt|;
DECL|method|LSInputSource (String namespaceURI, String publicId, String systemId, String baseURI)
specifier|public
name|LSInputSource
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|,
name|String
name|baseURI
parameter_list|)
block|{
if|if
condition|(
name|publicId
operator|==
literal|null
condition|)
block|{
name|publicId
operator|=
name|namespaceURI
expr_stmt|;
block|}
name|this
operator|.
name|publicId
operator|=
name|publicId
expr_stmt|;
name|this
operator|.
name|systemId
operator|=
name|systemId
expr_stmt|;
name|this
operator|.
name|baseURI
operator|=
name|baseURI
expr_stmt|;
if|if
condition|(
name|catalogResolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"catalogResolver must be provided"
argument_list|)
throw|;
block|}
name|this
operator|.
name|inputSource
operator|=
name|catalogResolver
operator|.
name|resolveEntity
argument_list|(
name|publicId
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
block|}
DECL|method|getCharacterStream ()
specifier|public
name|Reader
name|getCharacterStream
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|setCharacterStream (Reader characterStream)
specifier|public
name|void
name|setCharacterStream
parameter_list|(
name|Reader
name|characterStream
parameter_list|)
block|{
comment|// noop
block|}
DECL|method|getByteStream ()
specifier|public
name|InputStream
name|getByteStream
parameter_list|()
block|{
return|return
name|inputSource
operator|!=
literal|null
condition|?
name|inputSource
operator|.
name|getByteStream
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|setByteStream (InputStream byteStream)
specifier|public
name|void
name|setByteStream
parameter_list|(
name|InputStream
name|byteStream
parameter_list|)
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|inputSource
operator|.
name|setByteStream
argument_list|(
name|byteStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getStringData ()
specifier|public
name|String
name|getStringData
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|setStringData (String stringData)
specifier|public
name|void
name|setStringData
parameter_list|(
name|String
name|stringData
parameter_list|)
block|{
comment|// noop
block|}
DECL|method|getSystemId ()
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
return|return
name|inputSource
operator|.
name|getSystemId
argument_list|()
return|;
block|}
return|return
name|systemId
return|;
block|}
DECL|method|setSystemId (String systemId)
specifier|public
name|void
name|setSystemId
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|inputSource
operator|.
name|setSystemId
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPublicId ()
specifier|public
name|String
name|getPublicId
parameter_list|()
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
return|return
name|inputSource
operator|.
name|getPublicId
argument_list|()
return|;
block|}
return|return
name|publicId
return|;
block|}
DECL|method|setPublicId (String publicId)
specifier|public
name|void
name|setPublicId
parameter_list|(
name|String
name|publicId
parameter_list|)
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|inputSource
operator|.
name|setPublicId
argument_list|(
name|publicId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|publicId
operator|=
name|publicId
expr_stmt|;
block|}
block|}
DECL|method|getBaseURI ()
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
name|baseURI
return|;
block|}
DECL|method|setBaseURI (String baseURI)
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|String
name|baseURI
parameter_list|)
block|{
comment|// noop
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
return|return
name|inputSource
operator|.
name|getEncoding
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|inputSource
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCertifiedText ()
specifier|public
name|boolean
name|getCertifiedText
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|setCertifiedText (boolean certifiedText)
specifier|public
name|void
name|setCertifiedText
parameter_list|(
name|boolean
name|certifiedText
parameter_list|)
block|{
comment|// noop
block|}
block|}
block|}
end_class

end_unit

