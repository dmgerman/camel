begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test cases for dealing with stream types in an exception handler  *   * @version   */
end_comment

begin_class
DECL|class|ExceptionHandlerStreamCacheTest
specifier|public
class|class
name|ExceptionHandlerStreamCacheTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|successEndpoint
specifier|private
name|MockEndpoint
name|successEndpoint
decl_stmt|;
DECL|field|exceptionEndpoint
specifier|private
name|MockEndpoint
name|exceptionEndpoint
decl_stmt|;
annotation|@
name|Test
DECL|method|testSendFault ()
specifier|public
name|void
name|testSendFault
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestInputStreamPayload
argument_list|(
literal|"fault"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendError ()
specifier|public
name|void
name|testSendError
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestInputStreamPayload
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestInputStreamPayload (String message)
specifier|private
name|void
name|doTestInputStreamPayload
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|exceptionEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|message
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|exceptionEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|InputStream
name|body
init|=
operator|(
name|InputStream
operator|)
name|exceptionEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Ensure message re-readability in the exception handler"
argument_list|,
name|message
argument_list|,
operator|new
name|String
argument_list|(
name|IOConverter
operator|.
name|toBytes
argument_list|(
name|body
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendFaultXml ()
specifier|public
name|void
name|testSendFaultXml
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestXmlPayload
argument_list|(
literal|"<fault/>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendErrorXml ()
specifier|public
name|void
name|testSendErrorXml
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestXmlPayload
argument_list|(
literal|"<error/>"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestXmlPayload (String xml)
specifier|private
name|void
name|doTestXmlPayload
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TransformerException
block|{
name|successEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|exceptionEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|successEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|exceptionEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|StreamSource
name|body
init|=
operator|(
name|StreamSource
operator|)
name|exceptionEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Ensure message re-readability in the exception handler"
argument_list|,
name|xml
argument_list|,
operator|new
name|XmlConverter
argument_list|()
operator|.
name|toString
argument_list|(
name|body
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|exceptionEndpoint
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|successEndpoint
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:success"
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// enable support for handling faults and stream caching
name|context
operator|.
name|setHandleFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStreamCaching
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"fault"
argument_list|)
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|message
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"error"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:success"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

