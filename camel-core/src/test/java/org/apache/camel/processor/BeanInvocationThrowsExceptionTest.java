begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_comment
comment|/**  * Unit test for bean invocation that throws an exception  */
end_comment

begin_class
DECL|class|BeanInvocationThrowsExceptionTest
specifier|public
class|class
name|BeanInvocationThrowsExceptionTest
extends|extends
name|ContextTestSupport
block|{
comment|// START SNIPPET: e1
DECL|method|testBeanInvocation ()
specifier|public
name|void
name|testBeanInvocation
parameter_list|()
block|{
name|int
name|result
init|=
operator|(
name|Integer
operator|)
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|,
literal|"Hello London"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testBeanInvocationFailure ()
specifier|public
name|void
name|testBeanInvocationFailure
parameter_list|()
block|{
comment|// must create an exchange to get the result as an exchange where we can get the caused exception
name|Exchange
name|exchange
init|=
name|getMandatoryEndpoint
argument_list|(
literal|"direct:input"
argument_list|)
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello Paris"
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:input"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be failed"
argument_list|,
name|result
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be IllegalArgumentException"
argument_list|,
name|result
operator|.
name|getException
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Forced exception"
argument_list|,
name|result
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:input"
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|ExceptionBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|ExceptionBean
specifier|public
specifier|static
class|class
name|ExceptionBean
block|{
DECL|method|doSomething (String request)
specifier|public
name|int
name|doSomething
parameter_list|(
name|String
name|request
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
literal|"Hello London"
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced exception"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// START SNIPPET: e1
block|}
end_class

end_unit

