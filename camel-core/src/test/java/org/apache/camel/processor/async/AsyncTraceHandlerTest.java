begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.async
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|async
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|AsyncTraceHandlerTest
specifier|public
class|class
name|AsyncTraceHandlerTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|beforeThreadName
specifier|private
specifier|static
name|String
name|beforeThreadName
decl_stmt|;
DECL|field|afterThreadName
specifier|private
specifier|static
name|String
name|afterThreadName
decl_stmt|;
DECL|method|testAsyncTraceHandler ()
specifier|public
name|void
name|testAsyncTraceHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Bye Camel"
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello Camel"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bye Camel"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Should use different threads"
argument_list|,
name|beforeThreadName
operator|.
name|equalsIgnoreCase
argument_list|(
name|afterThreadName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|contextLocal
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|Tracer
name|tracer
init|=
operator|(
name|Tracer
operator|)
name|contextLocal
operator|.
name|getDefaultTracer
argument_list|()
decl_stmt|;
name|tracer
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|setTraceHandler
argument_list|(
operator|new
name|MyTraceHandler
argument_list|()
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|setTraceOutExchanges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|contextLocal
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addComponent
argument_list|(
literal|"async"
argument_list|,
operator|new
name|MyAsyncComponent
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|tracing
argument_list|()
operator|.
name|to
argument_list|(
literal|"log:before"
argument_list|)
operator|.
name|to
argument_list|(
literal|"async:Bye Camel"
argument_list|)
operator|.
name|id
argument_list|(
literal|"async"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:after"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyTraceHandler
specifier|private
class|class
name|MyTraceHandler
implements|implements
name|TraceEventHandler
block|{
annotation|@
name|Override
DECL|method|traceExchange (ProcessorDefinition node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|void
name|traceExchange
parameter_list|(
name|ProcessorDefinition
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|traceExchangeIn (ProcessorDefinition node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|Object
name|traceExchangeIn
parameter_list|(
name|ProcessorDefinition
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|node
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"async"
argument_list|)
condition|)
block|{
name|beforeThreadName
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|traceExchangeOut (ProcessorDefinition node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange, Object traceState)
specifier|public
name|void
name|traceExchangeOut
parameter_list|(
name|ProcessorDefinition
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|traceState
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|node
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"async"
argument_list|)
condition|)
block|{
name|afterThreadName
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

