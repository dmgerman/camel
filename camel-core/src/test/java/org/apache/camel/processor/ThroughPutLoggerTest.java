begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|ThroughPutLoggerTest
specifier|public
class|class
name|ThroughPutLoggerTest
extends|extends
name|TestCase
block|{
DECL|method|testLogStringDurationIsNotZero ()
specifier|public
name|void
name|testLogStringDurationIsNotZero
parameter_list|()
throws|throws
name|Exception
block|{
name|ThroughputLogger
name|underTest
init|=
operator|new
name|ThroughputLogger
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|underTest
operator|.
name|process
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
operator|(
name|String
operator|)
name|underTest
operator|.
name|logMessage
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"consumed 20 :"
operator|+
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no 'took: 0' :"
operator|+
name|message
argument_list|,
operator|!
name|message
operator|.
name|contains
argument_list|(
literal|"took: 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

