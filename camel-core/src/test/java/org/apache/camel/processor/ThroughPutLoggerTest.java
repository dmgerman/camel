begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
DECL|class|ThroughPutLoggerTest
specifier|public
class|class
name|ThroughPutLoggerTest
extends|extends
name|TestCase
block|{
DECL|method|testLogStringDurationIsNotZero ()
specifier|public
name|void
name|testLogStringDurationIsNotZero
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camel
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|camel
operator|.
name|start
argument_list|()
expr_stmt|;
name|Logger
name|logger
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
name|logger
operator|.
name|isInfoEnabled
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|EasyMock
operator|.
name|startsWith
argument_list|(
literal|"Received: 10"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|EasyMock
operator|.
name|startsWith
argument_list|(
literal|"Received: 20"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|ThroughputLogger
name|underTest
init|=
operator|new
name|ThroughputLogger
argument_list|(
operator|new
name|CamelLogger
argument_list|(
name|logger
argument_list|)
argument_list|)
decl_stmt|;
name|underTest
operator|.
name|setGroupSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|underTest
operator|.
name|process
argument_list|(
operator|new
name|DefaultExchange
argument_list|(
name|camel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|camel
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

