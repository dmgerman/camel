begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|CBRPredicateBeanThrowExceptionTest
specifier|public
class|class
name|CBRPredicateBeanThrowExceptionTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|check
specifier|private
specifier|static
name|AtomicBoolean
name|check
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|check2
specifier|private
specifier|static
name|AtomicBoolean
name|check2
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"cbrBean"
argument_list|,
operator|new
name|MyCBRBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|method|testCBR ()
specifier|public
name|void
name|testCBR
parameter_list|()
throws|throws
name|Exception
block|{
name|check
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|check2
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:dead"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:foo"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Foo"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:bar"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Bar"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello Foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello Bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"other"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|check
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|check2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCBRKaboom ()
specifier|public
name|void
name|testCBRKaboom
parameter_list|()
throws|throws
name|Exception
block|{
name|check
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|check2
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:foo"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:foo2"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:bar"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:dead"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello Foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"Kaboom"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|check
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|check2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:dead"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|method
argument_list|(
literal|"cbrBean"
argument_list|,
literal|"checkHeader"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:foo"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|method
argument_list|(
literal|"cbrBean"
argument_list|,
literal|"checkHeader2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:foo2"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:bar"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyCBRBean
specifier|public
specifier|static
class|class
name|MyCBRBean
block|{
DECL|method|checkHeader (Exchange exchange)
specifier|public
name|boolean
name|checkHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|check
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Message
name|inMsg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|foo
init|=
operator|(
name|String
operator|)
name|inMsg
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Kaboom"
operator|.
name|equalsIgnoreCase
argument_list|(
name|foo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced"
argument_list|)
throw|;
block|}
return|return
name|foo
operator|.
name|equals
argument_list|(
literal|"bar"
argument_list|)
return|;
block|}
DECL|method|checkHeader2 (Exchange exchange)
specifier|public
name|boolean
name|checkHeader2
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|check2
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Message
name|inMsg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|foo
init|=
operator|(
name|String
operator|)
name|inMsg
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Kaboom"
operator|.
name|equalsIgnoreCase
argument_list|(
name|foo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced"
argument_list|)
throw|;
block|}
return|return
name|foo
operator|.
name|equals
argument_list|(
literal|"bar"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

