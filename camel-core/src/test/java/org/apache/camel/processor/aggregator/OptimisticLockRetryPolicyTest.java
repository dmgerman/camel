begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregator
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|OptimisticLockRetryPolicy
import|;
end_import

begin_class
DECL|class|OptimisticLockRetryPolicyTest
specifier|public
class|class
name|OptimisticLockRetryPolicyTest
extends|extends
name|TestCase
block|{
DECL|field|precision
specifier|private
specifier|static
name|long
name|precision
init|=
literal|10L
decl_stmt|;
comment|// give or take 10ms
DECL|method|testRandomBackOff ()
specifier|public
name|void
name|testRandomBackOff
parameter_list|()
throws|throws
name|Exception
block|{
name|OptimisticLockRetryPolicy
name|policy
init|=
operator|new
name|OptimisticLockRetryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setRandomBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRetryDelay
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|long
name|elapsed
init|=
name|doDelay
argument_list|(
name|policy
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|elapsed
operator|<=
name|policy
operator|.
name|getMaximumRetryDelay
argument_list|()
operator|+
name|precision
operator|&&
name|elapsed
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExponentialBackOff ()
specifier|public
name|void
name|testExponentialBackOff
parameter_list|()
throws|throws
name|Exception
block|{
name|OptimisticLockRetryPolicy
name|policy
init|=
operator|new
name|OptimisticLockRetryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setRandomBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setExponentialBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRetryDelay
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRetryDelay
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|long
name|elapsed
init|=
name|doDelay
argument_list|(
name|policy
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertDelay
argument_list|(
literal|50L
operator|<<
name|i
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExponentialBackOffMaximumRetryDelay ()
specifier|public
name|void
name|testExponentialBackOffMaximumRetryDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|OptimisticLockRetryPolicy
name|policy
init|=
operator|new
name|OptimisticLockRetryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setRandomBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setExponentialBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRetryDelay
argument_list|(
literal|200L
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRetryDelay
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|long
name|elapsed
init|=
name|doDelay
argument_list|(
name|policy
argument_list|,
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|assertDelay
argument_list|(
literal|50L
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertDelay
argument_list|(
literal|100L
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assertDelay
argument_list|(
literal|200L
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|testRetryDelay ()
specifier|public
name|void
name|testRetryDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|OptimisticLockRetryPolicy
name|policy
init|=
operator|new
name|OptimisticLockRetryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setRandomBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRetryDelay
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRetryDelay
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|long
name|elapsed
init|=
name|doDelay
argument_list|(
name|policy
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertDelay
argument_list|(
literal|50L
argument_list|,
name|elapsed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMaximumRetries ()
specifier|public
name|void
name|testMaximumRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|OptimisticLockRetryPolicy
name|policy
init|=
operator|new
name|OptimisticLockRetryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setRandomBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRetryDelay
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRetries
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRetryDelay
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
name|assertTrue
argument_list|(
name|policy
operator|.
name|shouldRetry
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assertFalse
argument_list|(
name|policy
operator|.
name|shouldRetry
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doDelay (OptimisticLockRetryPolicy policy, int i)
specifier|private
name|long
name|doDelay
parameter_list|(
name|OptimisticLockRetryPolicy
name|policy
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|policy
operator|.
name|doDelay
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
return|return
name|elapsed
return|;
block|}
DECL|method|assertDelay (long expectedDelay, long actualDelay)
specifier|private
name|void
name|assertDelay
parameter_list|(
name|long
name|expectedDelay
parameter_list|,
name|long
name|actualDelay
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|actualDelay
operator|<=
name|expectedDelay
operator|+
name|precision
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actualDelay
operator|>=
name|expectedDelay
operator|-
name|precision
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

