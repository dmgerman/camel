begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_class
DECL|class|TraceHandlerTestHandler
specifier|public
class|class
name|TraceHandlerTestHandler
implements|implements
name|TraceEventHandler
block|{
DECL|field|eventMessages
specifier|private
name|List
argument_list|<
name|StringBuilder
argument_list|>
name|eventMessages
decl_stmt|;
DECL|field|traceAllNodes
specifier|private
name|boolean
name|traceAllNodes
decl_stmt|;
DECL|method|TraceHandlerTestHandler ()
specifier|public
name|TraceHandlerTestHandler
parameter_list|()
block|{
name|this
operator|.
name|eventMessages
operator|=
operator|new
name|LinkedList
argument_list|<
name|StringBuilder
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|traceAllNodes
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|TraceHandlerTestHandler (List<StringBuilder> eventMessages)
specifier|public
name|TraceHandlerTestHandler
parameter_list|(
name|List
argument_list|<
name|StringBuilder
argument_list|>
name|eventMessages
parameter_list|)
block|{
name|this
operator|.
name|eventMessages
operator|=
name|eventMessages
expr_stmt|;
name|this
operator|.
name|traceAllNodes
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getEventMessages ()
specifier|public
name|List
argument_list|<
name|StringBuilder
argument_list|>
name|getEventMessages
parameter_list|()
block|{
return|return
name|eventMessages
return|;
block|}
DECL|method|setEventMessages (List<StringBuilder> eventMessages)
specifier|public
name|void
name|setEventMessages
parameter_list|(
name|List
argument_list|<
name|StringBuilder
argument_list|>
name|eventMessages
parameter_list|)
block|{
name|this
operator|.
name|eventMessages
operator|=
name|eventMessages
expr_stmt|;
block|}
DECL|method|isTraceAllNodes ()
specifier|public
name|boolean
name|isTraceAllNodes
parameter_list|()
block|{
return|return
name|traceAllNodes
return|;
block|}
DECL|method|setTraceAllNodes (boolean traceAllNodes)
specifier|public
name|void
name|setTraceAllNodes
parameter_list|(
name|boolean
name|traceAllNodes
parameter_list|)
block|{
name|this
operator|.
name|traceAllNodes
operator|=
name|traceAllNodes
expr_stmt|;
block|}
DECL|method|storeMessage (StringBuilder message)
specifier|private
specifier|synchronized
name|void
name|storeMessage
parameter_list|(
name|StringBuilder
name|message
parameter_list|)
block|{
name|eventMessages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|recordComplete (StringBuilder message, ProcessorDefinition<?> node, Exchange exchange)
specifier|public
specifier|static
name|void
name|recordComplete
parameter_list|(
name|StringBuilder
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"Complete: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|node
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|recordIn (StringBuilder message, ProcessorDefinition<?> node, Exchange exchange)
specifier|public
specifier|static
name|void
name|recordIn
parameter_list|(
name|StringBuilder
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"In: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|node
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|recordOut (StringBuilder message, ProcessorDefinition<?> node, Exchange exchange)
specifier|public
specifier|static
name|void
name|recordOut
parameter_list|(
name|StringBuilder
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"Out: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|node
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|exchange
operator|.
name|getOut
argument_list|()
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|exchange
operator|.
name|getException
argument_list|()
condition|)
block|{
name|Exception
name|ex
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"Ex: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traceExchange (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|void
name|traceExchange
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|traceAllNodes
operator|||
operator|!
name|node
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TraceTestProcessor"
argument_list|)
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|recordComplete
argument_list|(
name|message
argument_list|,
name|node
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|storeMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|traceExchangeIn (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|Object
name|traceExchangeIn
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|traceAllNodes
operator|||
operator|!
name|node
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TraceTestProcessor"
argument_list|)
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|recordIn
argument_list|(
name|message
argument_list|,
name|node
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|traceExchangeOut (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange, Object traceState)
specifier|public
name|void
name|traceExchangeOut
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|traceState
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|traceAllNodes
operator|||
operator|!
name|node
operator|.
name|getLabel
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TraceTestProcessor"
argument_list|)
condition|)
block|{
if|if
condition|(
name|StringBuilder
operator|.
name|class
operator|.
name|equals
argument_list|(
name|traceState
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|(
name|StringBuilder
operator|)
name|traceState
decl_stmt|;
name|recordOut
argument_list|(
name|message
argument_list|,
name|node
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|storeMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

