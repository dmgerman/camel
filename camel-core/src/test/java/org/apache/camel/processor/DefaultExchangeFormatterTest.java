begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|DefaultExchangeFormatterTest
specifier|public
class|class
name|DefaultExchangeFormatterTest
block|{
DECL|field|camelContext
specifier|private
name|DefaultCamelContext
name|camelContext
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|exchangeFormatter
specifier|private
name|DefaultExchangeFormatter
name|exchangeFormatter
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|camelContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
operator|new
name|DefaultMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
literal|"This is the message body"
argument_list|)
expr_stmt|;
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|exchangeFormatter
operator|=
operator|new
name|DefaultExchangeFormatter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultFormat ()
specifier|public
name|void
name|testDefaultFormat
parameter_list|()
block|{
name|String
name|formattedExchange
init|=
name|exchangeFormatter
operator|.
name|format
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|formattedExchange
operator|.
name|contains
argument_list|(
literal|"This is the message body"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/*      * The formatted exchange without limitation is       * Exchange[ExchangePattern: InOnly, BodyType: String, Body: This is the message body]      * The "Exchange[", the "...", and the "]" do not count here, but the       * leading ", " that is removed later does count...      */
DECL|method|testFormatWithMaxCharsParameter ()
specifier|public
name|void
name|testFormatWithMaxCharsParameter
parameter_list|()
block|{
name|exchangeFormatter
operator|.
name|setMaxChars
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|String
name|formattedExchange
init|=
name|exchangeFormatter
operator|.
name|format
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|60
operator|+
literal|"Exchange[...]"
operator|.
name|length
argument_list|()
operator|-
literal|", "
operator|.
name|length
argument_list|()
argument_list|,
name|formattedExchange
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/*      * This limitation is really the length of the printed message body, not the      * one of the message      */
DECL|method|testFormatWithBodyMaxChars ()
specifier|public
name|void
name|testFormatWithBodyMaxChars
parameter_list|()
block|{
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|String
name|formattedExchange
init|=
name|exchangeFormatter
operator|.
name|format
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|formattedExchange
operator|.
name|contains
argument_list|(
literal|"This is "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|formattedExchange
operator|.
name|contains
argument_list|(
literal|"This is"
argument_list|)
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/*      * These two limitations will first truncate the message body and then the      * total message.      */
DECL|method|testFormatWithBoth ()
specifier|public
name|void
name|testFormatWithBoth
parameter_list|()
block|{
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|exchangeFormatter
operator|.
name|setMaxChars
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|String
name|formattedExchange
init|=
name|exchangeFormatter
operator|.
name|format
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|60
operator|+
literal|"Exchange[...]"
operator|.
name|length
argument_list|()
operator|-
literal|", "
operator|.
name|length
argument_list|()
argument_list|,
name|formattedExchange
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|formattedExchange
operator|.
name|contains
argument_list|(
literal|"This is "
argument_list|)
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

