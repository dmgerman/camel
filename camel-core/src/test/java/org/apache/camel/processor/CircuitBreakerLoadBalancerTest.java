begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|expectsMessageCount
import|;
end_import

begin_class
DECL|class|CircuitBreakerLoadBalancerTest
specifier|public
class|class
name|CircuitBreakerLoadBalancerTest
extends|extends
name|ContextTestSupport
block|{
DECL|class|MyExceptionProcessor
specifier|private
specifier|static
class|class
name|MyExceptionProcessor
extends|extends
name|RuntimeException
block|{     }
DECL|field|result
specifier|private
name|MockEndpoint
name|result
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|result
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|loadBalance
argument_list|()
operator|.
name|circuitBreaker
argument_list|(
literal|2
argument_list|,
literal|1000L
argument_list|,
name|MyExceptionProcessor
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|testClosedCircuitPassesMessages ()
specifier|public
name|void
name|testClosedCircuitPassesMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|3
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message one"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message two"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message three"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testFailedMessagesOpenCircuitToPreventMessageThree ()
specifier|public
name|void
name|testFailedMessagesOpenCircuitToPreventMessageThree
parameter_list|()
throws|throws
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|2
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MyExceptionProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Exchange
name|exchangeOne
init|=
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message one"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeTwo
init|=
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message two"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeThree
init|=
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message three"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeOne
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyExceptionProcessor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeTwo
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyExceptionProcessor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeThree
operator|.
name|getException
argument_list|()
operator|instanceof
name|RejectedExecutionException
argument_list|)
expr_stmt|;
block|}
DECL|method|testHalfOpenCircuitClosesAfterTimeout ()
specifier|public
name|void
name|testHalfOpenCircuitClosesAfterTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|2
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MyExceptionProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message one"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message two"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message three"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|expectsMessageCount
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message four"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|sendMessage (final String endpoint, final Object body)
specifier|protected
name|Exchange
name|sendMessage
parameter_list|(
specifier|final
name|String
name|endpoint
parameter_list|,
specifier|final
name|Object
name|body
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

