begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|expectsMessageCount
import|;
end_import

begin_class
DECL|class|CircuitBreakerLoadBalancerTest
specifier|public
class|class
name|CircuitBreakerLoadBalancerTest
extends|extends
name|ContextTestSupport
block|{
DECL|class|MyCustomException
specifier|private
specifier|static
class|class
name|MyCustomException
extends|extends
name|RuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
block|}
DECL|field|result
specifier|private
name|MockEndpoint
name|result
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|result
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|loadBalance
argument_list|()
operator|.
name|circuitBreaker
argument_list|(
literal|2
argument_list|,
literal|1000L
argument_list|,
name|MyCustomException
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start-async"
argument_list|)
operator|.
name|loadBalance
argument_list|()
operator|.
name|circuitBreaker
argument_list|(
literal|2
argument_list|,
literal|1000L
argument_list|,
name|MyCustomException
operator|.
name|class
argument_list|)
operator|.
name|threads
argument_list|(
literal|1
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testClosedCircuitPassesMessagesSync ()
specifier|public
name|void
name|testClosedCircuitPassesMessagesSync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start"
decl_stmt|;
name|closedCircuitPassesMessages
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClosedCircuitPassesMessagesAsync ()
specifier|public
name|void
name|testClosedCircuitPassesMessagesAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start-async"
decl_stmt|;
name|closedCircuitPassesMessages
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|closedCircuitPassesMessages (String endpoint)
specifier|private
name|void
name|closedCircuitPassesMessages
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|3
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message one"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message two"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message three"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedMessagesOpenCircuitToPreventMessageThreeSync ()
specifier|public
name|void
name|testFailedMessagesOpenCircuitToPreventMessageThreeSync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start"
decl_stmt|;
name|failedMessagesOpenCircuitToPreventMessageThree
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedMessagesOpenCircuitToPreventMessageThreeAsync ()
specifier|public
name|void
name|testFailedMessagesOpenCircuitToPreventMessageThreeAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start-async"
decl_stmt|;
name|failedMessagesOpenCircuitToPreventMessageThree
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|failedMessagesOpenCircuitToPreventMessageThree (String endpoint)
specifier|private
name|void
name|failedMessagesOpenCircuitToPreventMessageThree
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|2
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MyCustomException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Exchange
name|exchangeOne
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message one"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeTwo
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message two"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeThree
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message three"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeOne
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyCustomException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeTwo
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyCustomException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeThree
operator|.
name|getException
argument_list|()
operator|instanceof
name|RejectedExecutionException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHalfOpenAfterTimeoutSync ()
specifier|public
name|void
name|testHalfOpenAfterTimeoutSync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start"
decl_stmt|;
name|halfOpenAfterTimeout
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHalfOpenAfterTimeoutAsync ()
specifier|public
name|void
name|testHalfOpenAfterTimeoutAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start-async"
decl_stmt|;
name|halfOpenAfterTimeout
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|halfOpenAfterTimeout (String endpoint)
specifier|private
name|void
name|halfOpenAfterTimeout
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|2
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MyCustomException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Exchange
name|exchangeOne
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message one"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeTwo
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message two"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeThree
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message three"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeFour
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message four"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MyCustomException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|expectsMessageCount
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Exchange
name|exchangeFive
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message five"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeSix
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message six"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeOne
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyCustomException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeTwo
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyCustomException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeThree
operator|.
name|getException
argument_list|()
operator|instanceof
name|RejectedExecutionException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeFour
operator|.
name|getException
argument_list|()
operator|instanceof
name|RejectedExecutionException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeFive
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyCustomException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeSix
operator|.
name|getException
argument_list|()
operator|instanceof
name|RejectedExecutionException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHalfOpenToCloseTransitionSync ()
specifier|public
name|void
name|testHalfOpenToCloseTransitionSync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start"
decl_stmt|;
name|halfOpenToCloseTransition
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHalfOpenToCloseTransitionAsync ()
specifier|public
name|void
name|testHalfOpenToCloseTransitionAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start-async"
decl_stmt|;
name|halfOpenToCloseTransition
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|halfOpenToCloseTransition (String endpoint)
specifier|private
name|void
name|halfOpenToCloseTransition
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|2
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MyCustomException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Exchange
name|exchangeOne
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message one"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeTwo
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message two"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeThree
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message three"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|expectsMessageCount
argument_list|(
literal|2
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Exchange
name|exchangeFour
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message four"
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeFive
init|=
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message five"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeOne
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyCustomException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeTwo
operator|.
name|getException
argument_list|()
operator|instanceof
name|MyCustomException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeThree
operator|.
name|getException
argument_list|()
operator|instanceof
name|RejectedExecutionException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeFour
operator|.
name|getException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchangeFive
operator|.
name|getException
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHalfOpenCircuitClosesAfterTimeoutSync ()
specifier|public
name|void
name|testHalfOpenCircuitClosesAfterTimeoutSync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start"
decl_stmt|;
name|halfOpenCircuitClosesAfterTimeout
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHalfOpenCircuitClosesAfterTimeoutAsync ()
specifier|public
name|void
name|testHalfOpenCircuitClosesAfterTimeoutAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|endpoint
init|=
literal|"direct:start-async"
decl_stmt|;
name|halfOpenCircuitClosesAfterTimeout
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|halfOpenCircuitClosesAfterTimeout (String endpoint)
specifier|private
name|void
name|halfOpenCircuitClosesAfterTimeout
parameter_list|(
name|String
name|endpoint
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|Exception
block|{
name|expectsMessageCount
argument_list|(
literal|2
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MyCustomException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message one"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message two"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message three"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|expectsMessageCount
argument_list|(
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|endpoint
argument_list|,
literal|"message four"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|sendMessage (final String endpoint, final Object body)
specifier|protected
name|Exchange
name|sendMessage
parameter_list|(
specifier|final
name|String
name|endpoint
parameter_list|,
specifier|final
name|Object
name|body
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

