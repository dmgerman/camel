begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|Ignore
DECL|class|TraceInterceptorDestinationTest
specifier|public
class|class
name|TraceInterceptorDestinationTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|tracedBodies
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tracedBodies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|tracedHeaders
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tracedHeaders
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|testSendingSomeMessagesBeingTraced ()
specifier|public
name|void
name|testSendingSomeMessagesBeingTraced
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Bye World"
argument_list|,
literal|"Foo World"
argument_list|,
literal|"Foo World"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:traced"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// should be in our CSV format (defined in bottom of this class)
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://start;.*;.*;Hello London"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|1
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://start;.*;.*;Hello World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|2
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://start;.*;.*;Goodday World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|3
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://start;.*;.*;Bye World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|4
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://foo;.*;.*;Hello Copenhagen"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|5
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://foo;.*;.*;Foo World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|6
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://foo;.*;.*;Hello Beijing"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|7
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|regex
argument_list|(
literal|"^direct://foo;.*;.*;Foo World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello London"
argument_list|,
literal|"to"
argument_list|,
literal|"James"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|"Hello Copenhagen"
argument_list|)
expr_stmt|;
comment|// to test sending to same endpoint twice
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|"Hello Beijing"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// assert we received the correct bodies at the given time of interception
comment|// and that the bodies haven't changed during the routing of the original
comment|// exchange that changes its body over time (Hello London -> Bye World)
name|assertEquals
argument_list|(
literal|"Hello London"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Goodday World"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bye World"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Copenhagen"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Foo World"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Beijing"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Foo World"
argument_list|,
name|tracedBodies
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert headers as well
name|assertTrue
argument_list|(
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to=James"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to=Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to=Goodday"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|tracedHeaders
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"to=Bye"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e1
comment|// we create a tracer where we want to send TraveEvents to an endpoint
comment|// "direct:traced" where we can do some custom processing such as storing
comment|// it in a file or a database
name|Tracer
name|tracer
init|=
operator|new
name|Tracer
argument_list|()
decl_stmt|;
name|tracer
operator|.
name|setDestinationUri
argument_list|(
literal|"direct:traced"
argument_list|)
expr_stmt|;
comment|// we disable regular trace logging in the log file. You can omit this and
comment|// have both.
name|tracer
operator|.
name|setLogLevel
argument_list|(
name|LoggingLevel
operator|.
name|OFF
argument_list|)
expr_stmt|;
comment|// and we must remember to add the tracer to Camel
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e1
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyProcessor
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyProcessor
argument_list|(
literal|"Goodday World"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyProcessor
argument_list|(
literal|"Bye World"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyProcessor
argument_list|(
literal|"Foo World"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:traced"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyTraveAssertProcessor
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyTraceMessageProcessor
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:traced"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyProcessor
class|class
name|MyProcessor
implements|implements
name|Processor
block|{
DECL|field|msg
specifier|private
name|String
name|msg
decl_stmt|;
DECL|method|MyProcessor (String msg)
name|MyProcessor
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|this
operator|.
name|msg
operator|=
name|msg
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"to"
argument_list|,
name|msg
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyTraveAssertProcessor
class|class
name|MyTraveAssertProcessor
implements|implements
name|Processor
block|{
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeId
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TRACE_EVENT_NODE_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Date
name|timestamp
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TRACE_EVENT_TIMESTAMP
argument_list|,
name|Date
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
comment|// take a snapshot at current time for assertion later
comment|// after mock assertions in unit test method
name|TraceEventMessage
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|DefaultTraceEventMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|tracedBodies
operator|.
name|add
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getHeaders
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tracedHeaders
operator|.
name|add
argument_list|(
name|msg
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// START SNIPPET: e2
DECL|class|MyTraceMessageProcessor
class|class
name|MyTraceMessageProcessor
implements|implements
name|Processor
block|{
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// here we can transform the message how we like want it
name|TraceEventMessage
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|DefaultTraceEventMessage
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// we want to store it as a CSV with from;to;exchangeId;body
name|String
name|s
init|=
name|msg
operator|.
name|getFromEndpointUri
argument_list|()
operator|+
literal|";"
operator|+
name|msg
operator|.
name|getToNode
argument_list|()
operator|+
literal|";"
operator|+
name|msg
operator|.
name|getExchangeId
argument_list|()
operator|+
literal|";"
operator|+
name|msg
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|// so we replace the IN body with our CSV string
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// END SNIPPET: e2
block|}
end_class

end_unit

