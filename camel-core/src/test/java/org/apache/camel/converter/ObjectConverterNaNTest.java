begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|ObjectConverterNaNTest
specifier|public
class|class
name|ObjectConverterNaNTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|testDoubleToLongWithNaN ()
specifier|public
name|void
name|testDoubleToLongWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatToLongWithNaN ()
specifier|public
name|void
name|testFloatToLongWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubleToIntegerWithNaN ()
specifier|public
name|void
name|testDoubleToIntegerWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatToIntegerWithNaN ()
specifier|public
name|void
name|testFloatToIntegerWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubleToShortWithNaN ()
specifier|public
name|void
name|testDoubleToShortWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatToShortWithNaN ()
specifier|public
name|void
name|testFloatToShortWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubleToByteWithNaN ()
specifier|public
name|void
name|testDoubleToByteWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatToByteWithNaN ()
specifier|public
name|void
name|testFloatToByteWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubleToFloatWithNaN ()
specifier|public
name|void
name|testDoubleToFloatWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|NaN
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloatToDoubleWithNaN ()
specifier|public
name|void
name|testFloatToDoubleWithNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

