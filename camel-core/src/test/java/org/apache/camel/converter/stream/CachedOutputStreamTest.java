begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.stream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultUnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_class
DECL|class|CachedOutputStreamTest
specifier|public
class|class
name|CachedOutputStreamTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|TEST_STRING
specifier|private
specifier|static
specifier|final
name|String
name|TEST_STRING
init|=
literal|"This is a test string and it has enough"
operator|+
literal|" aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa "
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setStreamCaching
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolDirectory
argument_list|(
literal|"target/cachedir"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolThreshold
argument_list|(
literal|16
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/cachedir"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"target/cachedir"
argument_list|)
expr_stmt|;
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|UnitOfWork
name|uow
init|=
operator|new
name|DefaultUnitOfWork
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setUnitOfWork
argument_list|(
name|uow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|toString (InputStream input)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionStringBuffer
name|builder
init|=
operator|new
name|CollectionStringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCacheStreamToFileAndCloseStream ()
specifier|public
name|void
name|testCacheStreamToFileAndCloseStream
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CachedOutputStream
name|cos
init|=
operator|new
name|CachedOutputStream
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/cachedir"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The file name should start with cos"
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"cos"
argument_list|)
argument_list|)
expr_stmt|;
name|StreamCache
name|cache
init|=
name|cos
operator|.
name|getStreamCache
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should get the FileInputStreamCache"
argument_list|,
name|cache
operator|instanceof
name|FileInputStreamCache
argument_list|)
expr_stmt|;
name|String
name|temp
init|=
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|)
decl_stmt|;
operator|(
operator|(
name|InputStream
operator|)
name|cache
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|done
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// The stream is closed, so the temp file is gone.
name|fail
argument_list|(
literal|"we expect the exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// do nothing
block|}
name|files
operator|=
name|file
operator|.
name|list
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have no temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|cos
argument_list|)
expr_stmt|;
block|}
DECL|method|testCacheStreamToFileAndCloseStreamEncrypted ()
specifier|public
name|void
name|testCacheStreamToFileAndCloseStreamEncrypted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set some stream or 8-bit block cipher transformation name
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolChiper
argument_list|(
literal|"RC4"
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CachedOutputStream
name|cos
init|=
operator|new
name|CachedOutputStream
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|cos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/cachedir"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The content is written"
argument_list|,
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|files
index|[
literal|0
index|]
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|10
argument_list|)
expr_stmt|;
name|java
operator|.
name|io
operator|.
name|FileInputStream
name|tmpin
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|files
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|temp
init|=
name|toString
argument_list|(
name|tmpin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The content is not encrypted"
argument_list|,
name|temp
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|temp
operator|.
name|indexOf
argument_list|(
literal|"aaa"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|tmpin
operator|.
name|close
argument_list|()
expr_stmt|;
name|StreamCache
name|cache
init|=
name|cos
operator|.
name|getStreamCache
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should get the FileInputStreamCache"
argument_list|,
name|cache
operator|instanceof
name|FileInputStreamCache
argument_list|)
expr_stmt|;
name|temp
operator|=
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|)
expr_stmt|;
operator|(
operator|(
name|InputStream
operator|)
name|cache
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|done
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// The stream is closed, so the temp file is gone.
name|fail
argument_list|(
literal|"we expect the exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// do nothing
block|}
name|files
operator|=
name|file
operator|.
name|list
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have no temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|cos
argument_list|)
expr_stmt|;
block|}
DECL|method|testCacheStreamToFileCloseStreamBeforeDone ()
specifier|public
name|void
name|testCacheStreamToFileCloseStreamBeforeDone
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CachedOutputStream
name|cos
init|=
operator|new
name|CachedOutputStream
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/cachedir"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The file name should start with cos"
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"cos"
argument_list|)
argument_list|)
expr_stmt|;
name|StreamCache
name|cache
init|=
name|cos
operator|.
name|getStreamCache
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should get the FileInputStreamCache"
argument_list|,
name|cache
operator|instanceof
name|FileInputStreamCache
argument_list|)
expr_stmt|;
name|String
name|temp
init|=
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|cache
operator|.
name|reset
argument_list|()
expr_stmt|;
name|temp
operator|=
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|done
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|InputStream
operator|)
name|cache
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|files
operator|=
name|file
operator|.
name|list
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have no temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|cos
argument_list|)
expr_stmt|;
block|}
DECL|method|testCacheStreamToMemory ()
specifier|public
name|void
name|testCacheStreamToMemory
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolThreshold
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CachedOutputStream
name|cos
init|=
operator|new
name|CachedOutputStream
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/cachedir"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"we should have no temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|StreamCache
name|cache
init|=
name|cos
operator|.
name|getStreamCache
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should get the InputStreamCache"
argument_list|,
name|cache
operator|instanceof
name|InputStreamCache
argument_list|)
expr_stmt|;
name|String
name|temp
init|=
name|IOConverter
operator|.
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|cos
argument_list|)
expr_stmt|;
block|}
DECL|method|testCacheStreamToMemoryAsDiskIsDisabled ()
specifier|public
name|void
name|testCacheStreamToMemoryAsDiskIsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// -1 disables disk based cache
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolThreshold
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CachedOutputStream
name|cos
init|=
operator|new
name|CachedOutputStream
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/cachedir"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"we should have no temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|StreamCache
name|cache
init|=
name|cos
operator|.
name|getStreamCache
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should get the InputStreamCache"
argument_list|,
name|cache
operator|instanceof
name|InputStreamCache
argument_list|)
expr_stmt|;
name|String
name|temp
init|=
name|IOConverter
operator|.
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|done
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|cos
argument_list|)
expr_stmt|;
block|}
DECL|method|testCachedOutputStreamCustomBufferSize ()
specifier|public
name|void
name|testCachedOutputStreamCustomBufferSize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// double the default buffer size
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setBufferSize
argument_list|(
literal|8192
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|CachedOutputStream
name|cos
init|=
operator|new
name|CachedOutputStream
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a custom buffer size"
argument_list|,
name|cos
operator|.
name|getBufferSize
argument_list|()
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
comment|// make sure things still work after custom buffer size set
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/cachedir"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The file name should start with cos"
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"cos"
argument_list|)
argument_list|)
expr_stmt|;
name|StreamCache
name|cache
init|=
name|cos
operator|.
name|getStreamCache
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should get the FileInputStreamCache"
argument_list|,
name|cache
operator|instanceof
name|FileInputStreamCache
argument_list|)
expr_stmt|;
name|String
name|temp
init|=
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|cache
operator|.
name|reset
argument_list|()
expr_stmt|;
name|temp
operator|=
name|toString
argument_list|(
operator|(
name|InputStream
operator|)
name|cache
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cached a wrong file"
argument_list|,
name|temp
argument_list|,
name|TEST_STRING
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|done
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have a temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|InputStream
operator|)
name|cache
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|files
operator|=
name|file
operator|.
name|list
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we should have no temp file"
argument_list|,
name|files
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|cos
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

