begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_class
DECL|class|TimePatternConverterTest
specifier|public
class|class
name|TimePatternConverterTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testMillisecondsTimePattern ()
specifier|public
name|void
name|testMillisecondsTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"444"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|444
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testMilliseconds2TimePattern ()
specifier|public
name|void
name|testMilliseconds2TimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"-72"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|72
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testSTimePattern ()
specifier|public
name|void
name|testSTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"35s"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|35000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testConsiderLegalSTimePattern ()
specifier|public
name|void
name|testConsiderLegalSTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"89s"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|89000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testMTimePattern ()
specifier|public
name|void
name|testMTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"28m"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1680000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testConsiderLegalMTimePattern ()
specifier|public
name|void
name|testConsiderLegalMTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"89m"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5340000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testHMSTimePattern ()
specifier|public
name|void
name|testHMSTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"1h3m5s"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3785000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testHMSTimePattern2 ()
specifier|public
name|void
name|testHMSTimePattern2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"1hours30minutes1second"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5401000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testHMSTimePattern3 ()
specifier|public
name|void
name|testHMSTimePattern3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"1HOUR3m5s"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3785000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testMSTimePattern ()
specifier|public
name|void
name|testMSTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"30m55s"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1855000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testHMTimePattern ()
specifier|public
name|void
name|testHMTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"1h30m"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5400000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testSTimePattern2 ()
specifier|public
name|void
name|testSTimePattern2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"15sec"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testMTimePattern2 ()
specifier|public
name|void
name|testMTimePattern2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"5min"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|300000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testMTimePattern3 ()
specifier|public
name|void
name|testMTimePattern3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"5MIN"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|300000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
DECL|method|testMSTimePattern2 ()
specifier|public
name|void
name|testMSTimePattern2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"4min2sec"
argument_list|)
decl_stmt|;
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|242000
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
comment|//Negative Tests
DECL|method|testIllegalHMSTimePattern ()
specifier|public
name|void
name|testIllegalHMSTimePattern
parameter_list|()
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"36h88m5s"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minutes should contain a valid value between 0 and 59: 36h88m5s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalMSTimePattern ()
specifier|public
name|void
name|testIllegalMSTimePattern
parameter_list|()
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"55m75s"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seconds should contain a valid value between 0 and 59: 55m75s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalHMTimePattern ()
specifier|public
name|void
name|testIllegalHMTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|source
init|=
operator|new
name|String
argument_list|(
literal|"1h89s"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|milliseconds
init|=
name|TimePatternConverter
operator|.
name|toMilliSeconds
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seconds should contain a valid value between 0 and 59: 1h89s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

