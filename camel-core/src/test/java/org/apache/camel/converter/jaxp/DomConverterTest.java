begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|DomConverterTest
specifier|public
class|class
name|DomConverterTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testDomConverterToString ()
specifier|public
name|void
name|testDomConverterToString
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>world!</hello>"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
operator|new
name|DomConverter
argument_list|()
operator|.
name|toString
argument_list|(
name|document
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<hello>world!</hello>"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomConverterToBytes ()
specifier|public
name|void
name|testDomConverterToBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>world!</hello>"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|DomConverter
argument_list|()
operator|.
name|toByteArray
argument_list|(
name|document
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be equal"
argument_list|,
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
literal|"<hello>world!</hello>"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomConverterToNoAssicBytes ()
specifier|public
name|void
name|testDomConverterToNoAssicBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><foo>\u99f1\u99ddb\u00e4r</foo>"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|DomConverter
argument_list|()
operator|.
name|toByteArray
argument_list|(
name|document
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be equal"
argument_list|,
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
literal|"<foo>\u99f1\u99ddb\u00e4r</foo>"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomConverterToInteger ()
specifier|public
name|void
name|testDomConverterToInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>47</hello>"
argument_list|)
decl_stmt|;
name|Integer
name|number
init|=
name|DomConverter
operator|.
name|toInteger
argument_list|(
name|document
operator|.
name|getChildNodes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|47
argument_list|,
name|number
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomConverterToLong ()
specifier|public
name|void
name|testDomConverterToLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>47</hello>"
argument_list|)
decl_stmt|;
name|Long
name|number
init|=
name|DomConverter
operator|.
name|toLong
argument_list|(
name|document
operator|.
name|getChildNodes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|47L
argument_list|,
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomConverterToList ()
specifier|public
name|void
name|testDomConverterToList
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<foo><hello>Hello World</hello><bye>Bye Camel</bye></foo>"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|DomConverter
operator|.
name|toList
argument_list|(
name|document
operator|.
name|getElementsByTagName
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nl
init|=
name|assertIsInstanceOf
argument_list|(
name|NodeList
operator|.
name|class
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|sub
init|=
name|DomConverter
operator|.
name|toList
argument_list|(
name|nl
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sub
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello>Hello World</hello>"
argument_list|,
operator|new
name|DomConverter
argument_list|()
operator|.
name|toString
argument_list|(
operator|(
name|NodeList
operator|)
name|sub
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<bye>Bye Camel</bye>"
argument_list|,
operator|new
name|DomConverter
argument_list|()
operator|.
name|toString
argument_list|(
operator|(
name|NodeList
operator|)
name|sub
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDomConverterToInputStream ()
specifier|public
name|void
name|testDomConverterToInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>world!</hello>"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|DomConverter
argument_list|()
operator|.
name|toInputStream
argument_list|(
name|document
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<hello>world!</hello>"
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

