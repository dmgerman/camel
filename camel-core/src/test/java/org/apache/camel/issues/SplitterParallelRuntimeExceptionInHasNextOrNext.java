begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SplitterParallelRuntimeExceptionInHasNextOrNext
specifier|public
class|class
name|SplitterParallelRuntimeExceptionInHasNextOrNext
extends|extends
name|ContextTestSupport
block|{
comment|/**      * Tests that only one aggregator thread is created if a RuntimeException in      * the hasNext method of a custom iterator occurs.      */
annotation|@
name|Test
DECL|method|testSplitErrorInHasNext ()
specifier|public
name|void
name|testSplitErrorInHasNext
parameter_list|()
throws|throws
name|Exception
block|{
name|execute
argument_list|(
literal|"direct:errorInHasNext"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that only one aggregator thread is created if a RuntimeException in      * the next method of a custom iterator occurs.      */
annotation|@
name|Test
DECL|method|testSplitErrorInNext ()
specifier|public
name|void
name|testSplitErrorInNext
parameter_list|()
throws|throws
name|Exception
block|{
name|execute
argument_list|(
literal|"direct:errorInNext"
argument_list|)
expr_stmt|;
block|}
DECL|method|execute (String from)
specifier|private
name|void
name|execute
parameter_list|(
name|String
name|from
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|from
argument_list|,
literal|"some content"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected due to runtime exception in hasNext method
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Exception occurred"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|aggregatorThreads
init|=
name|getAggregatorThreads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggregatorThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getAggregatorThreads ()
specifier|private
name|List
argument_list|<
name|Thread
argument_list|>
name|getAggregatorThreads
parameter_list|()
block|{
name|List
argument_list|<
name|Thread
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Splitter-AggregateTask"
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:errorInHasNext"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|method
argument_list|(
name|SplitterImpl
operator|.
name|class
argument_list|,
literal|"errorInHasNext"
argument_list|)
operator|.
name|streaming
argument_list|()
operator|.
name|parallelProcessing
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:split1"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:errorInNext"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|method
argument_list|(
name|SplitterImpl
operator|.
name|class
argument_list|,
literal|"errorInNext"
argument_list|)
operator|.
name|streaming
argument_list|()
operator|.
name|parallelProcessing
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:split2"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|SplitterImpl
specifier|public
specifier|static
class|class
name|SplitterImpl
block|{
DECL|method|errorInHasNext (InputStream request, Exchange exchange)
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|errorInHasNext
parameter_list|(
name|InputStream
name|request
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|new
name|CustomIterator
argument_list|(
name|exchange
argument_list|,
name|request
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|errorInNext (InputStream request, Exchange exchange)
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|errorInNext
parameter_list|(
name|InputStream
name|request
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|new
name|CustomIterator
argument_list|(
name|exchange
argument_list|,
name|request
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
DECL|class|CustomIterator
specifier|static
class|class
name|CustomIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|request
specifier|private
name|InputStream
name|request
decl_stmt|;
DECL|field|errorInHasNext
specifier|private
name|boolean
name|errorInHasNext
decl_stmt|;
DECL|method|CustomIterator (Exchange exchange, InputStream request, boolean errorInHasNext)
name|CustomIterator
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|request
parameter_list|,
name|boolean
name|errorInHasNext
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|errorInHasNext
operator|=
name|errorInHasNext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|index
operator|<
literal|7
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|errorInHasNext
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception thrown"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|String
name|next
parameter_list|()
block|{
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|7
condition|)
block|{
return|return
literal|"<a>"
operator|+
name|index
operator|+
literal|"</a>"
return|;
block|}
if|if
condition|(
operator|!
name|errorInHasNext
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception thrown"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|"<a>"
operator|+
name|index
operator|+
literal|"</a>"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|request
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

