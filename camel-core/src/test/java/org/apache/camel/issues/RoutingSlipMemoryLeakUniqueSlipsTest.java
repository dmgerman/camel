begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RoutingSlip
import|;
end_import

begin_class
DECL|class|RoutingSlipMemoryLeakUniqueSlipsTest
specifier|public
class|class
name|RoutingSlipMemoryLeakUniqueSlipsTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|counter
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/output"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/**      * Reproducer for the memory leak: CAMEL-10048/CAMEL-10050      */
DECL|method|testMemoryLeakInExceptionHandlerCaching ()
specifier|public
name|void
name|testMemoryLeakInExceptionHandlerCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"message "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|RoutingSlip
name|routingSlip
init|=
name|context
operator|.
name|getProcessor
argument_list|(
literal|"memory-leak"
argument_list|,
name|RoutingSlip
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|routingSlip
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|errorHandlers
init|=
name|getRoutingSlipErrorHandlers
argument_list|(
name|routingSlip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Error handlers cache must contain only one value"
argument_list|,
literal|1
argument_list|,
name|errorHandlers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getRoutingSlipErrorHandlers (RoutingSlip routingSlip)
specifier|private
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getRoutingSlipErrorHandlers
parameter_list|(
name|RoutingSlip
name|routingSlip
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|errorHandlersField
init|=
name|routingSlip
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"errorHandlers"
argument_list|)
decl_stmt|;
name|errorHandlersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|errorHandlers
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|errorHandlersField
operator|.
name|get
argument_list|(
name|routingSlip
argument_list|)
decl_stmt|;
return|return
name|errorHandlers
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:dead"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|routingSlip
argument_list|(
name|method
argument_list|(
name|SlipProvider
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|id
argument_list|(
literal|"memory-leak"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|SlipProvider
specifier|public
specifier|static
class|class
name|SlipProvider
block|{
DECL|method|computeSlip (String body)
specifier|public
name|String
name|computeSlip
parameter_list|(
name|String
name|body
parameter_list|)
block|{
comment|/*              * It is important to have a processor here, that does not extend              * AsyncProcessor. Only in this case              * AsyncProcessorConverterHelper.convert() creates a new object,              * thus leading to a memory leak. For example, if you replace file              * endpoint with mock endpoint, then everything goes fine, because              * MockEndpoint.createProducer() creates an implementation of              * AsyncProcessor.              */
return|return
literal|"mock:"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

