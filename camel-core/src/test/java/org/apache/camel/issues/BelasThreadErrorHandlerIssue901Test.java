begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Unit test to verify that error handling using thread() pool also works as expected.  */
end_comment

begin_class
DECL|class|BelasThreadErrorHandlerIssue901Test
specifier|public
class|class
name|BelasThreadErrorHandlerIssue901Test
extends|extends
name|ContextTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BelasThreadErrorHandlerIssue901Test
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|msg1
specifier|private
name|String
name|msg1
init|=
literal|"Message Intended For Processor #1"
decl_stmt|;
DECL|field|msg2
specifier|private
name|String
name|msg2
init|=
literal|"Message Intended For Processor #2"
decl_stmt|;
DECL|field|msg3
specifier|private
name|String
name|msg3
init|=
literal|"Message Intended For Processor #3"
decl_stmt|;
DECL|field|callCounter1
specifier|private
name|int
name|callCounter1
decl_stmt|;
DECL|field|callCounter2
specifier|private
name|int
name|callCounter2
decl_stmt|;
DECL|field|callCounter3
specifier|private
name|int
name|callCounter3
decl_stmt|;
DECL|field|redelivery
specifier|private
name|int
name|redelivery
init|=
literal|1
decl_stmt|;
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|disableJMX
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|testThreadErrorHandlerLogging ()
specifier|public
name|void
name|testThreadErrorHandlerLogging
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|handled
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:handled"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:errorTest"
argument_list|,
name|msg1
argument_list|)
expr_stmt|;
name|handled
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|handled
operator|.
name|expectedBodiesReceived
argument_list|(
name|msg3
argument_list|)
expr_stmt|;
comment|// TODO: Enable this when looking into this issue
comment|//Thread.sleep(3000);
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCounter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|callCounter2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|+
name|redelivery
argument_list|,
name|callCounter3
argument_list|)
expr_stmt|;
comment|// Only this should be more then 1
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|//getContext().addInterceptStrategy(new Tracer());
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:handled"
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
name|redelivery
argument_list|)
argument_list|)
expr_stmt|;
comment|// using the onException and handled(true) works
comment|//onException(Exception.class).maximumRedeliveries(redelivery).handled(true).to("mock:handled");
name|from
argument_list|(
literal|"seda:errorTest"
argument_list|)
comment|// TODO: When using thread there is a multi threading / concurreny issue in Camel
comment|// hard to debug as it tend only to surface when unit test is running really fast
comment|// (no break points)
comment|//.thread(5).maxSize(5)
comment|// Processor #1
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|callCounter1
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processor #1 Received A "
operator|+
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|msg2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
comment|// Processor #2
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|callCounter2
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processor #2 Received A "
operator|+
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|msg3
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
comment|// Processor #3
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Thread.sleep(100);
name|callCounter3
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processor #3 Received A "
operator|+
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Forced exception by unit test"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

