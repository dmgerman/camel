begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|SplitterUsingBeanReturningCloseableIteratorTest
specifier|public
class|class
name|SplitterUsingBeanReturningCloseableIteratorTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"mySplitter"
argument_list|,
operator|new
name|MyOtherSplitterBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|class|MyOtherSplitterBean
specifier|public
specifier|static
class|class
name|MyOtherSplitterBean
block|{
DECL|method|split (Exchange exchange)
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|MyCloseableIterator
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
DECL|method|testCloseableIterator ()
specifier|public
name|void
name|testCloseableIterator
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello,World"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"MyCloseableIterator.close() was not invoked"
argument_list|,
name|MyCloseableIterator
operator|.
name|getInstance
argument_list|()
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|method
argument_list|(
literal|"mySplitter"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:foo"
argument_list|,
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_class
DECL|class|MyCloseableIterator
specifier|final
class|class
name|MyCloseableIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|singleton
specifier|private
specifier|static
name|MyCloseableIterator
name|singleton
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|MyCloseableIterator ()
specifier|private
name|MyCloseableIterator
parameter_list|()
block|{     }
DECL|method|getInstance ()
specifier|public
specifier|static
name|MyCloseableIterator
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|singleton
operator|==
literal|null
condition|)
block|{
name|singleton
operator|=
operator|new
name|MyCloseableIterator
argument_list|()
expr_stmt|;
block|}
return|return
name|singleton
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|String
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"will be closed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{     }
block|}
end_class

end_unit

