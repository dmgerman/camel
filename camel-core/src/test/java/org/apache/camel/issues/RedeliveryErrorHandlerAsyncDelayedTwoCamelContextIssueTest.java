begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RedeliveryErrorHandlerAsyncDelayedTwoCamelContextIssueTest
specifier|public
class|class
name|RedeliveryErrorHandlerAsyncDelayedTwoCamelContextIssueTest
block|{
annotation|@
name|Test
DECL|method|shouldNotBreakRedeliveriesOfSecondContextAfterFirstBeingStopped ()
specifier|public
name|void
name|shouldNotBreakRedeliveriesOfSecondContextAfterFirstBeingStopped
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context1
init|=
name|createContext
argument_list|()
decl_stmt|;
name|ProducerTemplate
name|producer1
init|=
name|context1
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|ConsumerTemplate
name|consumer1
init|=
name|context1
operator|.
name|createConsumerTemplate
argument_list|()
decl_stmt|;
name|context1
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer1
operator|.
name|sendBody
argument_list|(
literal|"seda://input"
argument_list|,
literal|"Hey1"
argument_list|)
expr_stmt|;
name|Exchange
name|ex1
init|=
name|consumer1
operator|.
name|receive
argument_list|(
literal|"seda://output"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|DefaultCamelContext
name|context2
init|=
name|createContext
argument_list|()
decl_stmt|;
name|ProducerTemplate
name|producer2
init|=
name|context2
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|ConsumerTemplate
name|consumer2
init|=
name|context2
operator|.
name|createConsumerTemplate
argument_list|()
decl_stmt|;
name|context2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// now stop 1, and see that 2 is still working
name|consumer1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|producer1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|producer2
operator|.
name|sendBody
argument_list|(
literal|"seda://input"
argument_list|,
literal|"Hey2"
argument_list|)
expr_stmt|;
name|Exchange
name|ex2
init|=
name|consumer2
operator|.
name|receive
argument_list|(
literal|"seda://output"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ex1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hey1"
argument_list|,
name|ex1
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ex2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hey2"
argument_list|,
name|ex2
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|consumer2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|producer2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|createContext ()
specifier|private
name|DefaultCamelContext
name|createContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|redeliveryDelay
argument_list|(
literal|100
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
literal|5
argument_list|)
operator|.
name|maximumRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
operator|.
name|backOffMultiplier
argument_list|(
literal|1
argument_list|)
operator|.
name|asyncDelayedRedelivery
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"seda://input"
argument_list|)
operator|.
name|bean
argument_list|(
name|ProblematicBean
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"seda://output"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|class|ProblematicBean
specifier|public
specifier|static
specifier|final
class|class
name|ProblematicBean
block|{
DECL|field|counter
name|int
name|counter
decl_stmt|;
DECL|method|doSomething ()
specifier|public
name|void
name|doSomething
parameter_list|()
block|{
if|if
condition|(
name|counter
operator|++
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

