begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RollbackExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_class
DECL|class|OnCompletionIssueTest
specifier|public
class|class
name|OnCompletionIssueTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testOnCompletionIssue ()
specifier|public
name|void
name|testOnCompletionIssue
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|end
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
decl_stmt|;
name|end
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MockEndpoint
name|complete
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:complete"
argument_list|)
decl_stmt|;
name|complete
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"finish"
argument_list|,
literal|"stop"
argument_list|,
literal|"ile"
argument_list|,
literal|"markRollback"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|failed
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:failed"
argument_list|)
decl_stmt|;
name|failed
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"faulted"
argument_list|,
literal|"npe"
argument_list|,
literal|"rollback"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
literal|"finish"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
literal|"stop"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
literal|"fault"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
literal|"ile"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
literal|"markRollback"
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
literal|"npe"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Darn NPE"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:input"
argument_list|,
literal|"rollback"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|RollbackExchangeException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onCompletion
argument_list|()
operator|.
name|onFailureOnly
argument_list|()
operator|.
name|parallelProcessing
argument_list|()
operator|.
name|log
argument_list|(
literal|"failing ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:failed"
argument_list|)
expr_stmt|;
name|onCompletion
argument_list|()
operator|.
name|onCompleteOnly
argument_list|()
operator|.
name|parallelProcessing
argument_list|()
operator|.
name|log
argument_list|(
literal|"completing ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:complete"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:input"
argument_list|)
operator|.
name|onException
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} == 'stop'"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"stopping"
argument_list|)
operator|.
name|stop
argument_list|()
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} == 'fault'"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"faulting"
argument_list|)
operator|.
name|setFaultBody
argument_list|(
name|constant
argument_list|(
literal|"faulted"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} == 'ile'"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"excepting"
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Exception requested"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} == 'npe'"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"excepting"
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|NullPointerException
argument_list|(
literal|"Darn NPE"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} == 'rollback'"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"rollback"
argument_list|)
operator|.
name|rollback
argument_list|()
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} == 'markRollback'"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"markRollback"
argument_list|)
operator|.
name|markRollbackOnly
argument_list|()
operator|.
name|end
argument_list|()
operator|.
name|log
argument_list|(
literal|"finishing"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

