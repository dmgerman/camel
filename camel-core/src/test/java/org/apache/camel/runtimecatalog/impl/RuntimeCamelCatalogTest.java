begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.runtimecatalog.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|EndpointValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|LanguageValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|RuntimeCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|RuntimeCamelCatalogTest
specifier|public
class|class
name|RuntimeCamelCatalogTest
block|{
DECL|field|catalog
specifier|static
name|RuntimeCamelCatalog
name|catalog
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RuntimeCamelCatalogTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createCamelCatalog ()
specifier|public
specifier|static
name|void
name|createCamelCatalog
parameter_list|()
block|{
name|catalog
operator|=
operator|new
name|DefaultRuntimeCamelCatalog
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFromCamelContext ()
specifier|public
name|void
name|testFromCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schema
init|=
operator|new
name|DefaultCamelContext
argument_list|()
operator|.
name|getRuntimeCamelCatalog
argument_list|()
operator|.
name|modelJSonSchema
argument_list|(
literal|"choice"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJsonSchema ()
specifier|public
name|void
name|testJsonSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|schema
init|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"aggregate"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
comment|// lets make it possible to find bean/method using both names
name|schema
operator|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
literal|"bean"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriMapFile ()
specifier|public
name|void
name|testAsEndpointUriMapFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"directoryName"
argument_list|,
literal|"src/data/inbox"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"noop"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"delay"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"file"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file:src/data/inbox?delay=5000&noop=true"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|String
name|uri2
init|=
name|catalog
operator|.
name|asEndpointUriXml
argument_list|(
literal|"file"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file:src/data/inbox?delay=5000&amp;noop=true"
argument_list|,
name|uri2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriTimer ()
specifier|public
name|void
name|testAsEndpointUriTimer
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"timerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"period"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"timer"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"timer:foo?period=5000"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriPropertiesPlaceholders ()
specifier|public
name|void
name|testAsEndpointUriPropertiesPlaceholders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"timerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"period"
argument_list|,
literal|"{{howoften}}"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"repeatCount"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"timer"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"timer:foo?period=%7B%7Bhowoften%7D%7D&repeatCount=5"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|uri
operator|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"timer"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"timer:foo?period={{howoften}}&repeatCount=5"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriBeanLookup ()
specifier|public
name|void
name|testAsEndpointUriBeanLookup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"resourceUri"
argument_list|,
literal|"foo.xslt"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"converter"
argument_list|,
literal|"#myConverter"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"xslt"
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"xslt:foo.xslt?converter=%23myConverter"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|uri
operator|=
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"xslt"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xslt:foo.xslt?converter=#myConverter"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesPlaceholders ()
specifier|public
name|void
name|testEndpointPropertiesPlaceholders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"timer:foo?period={{howoften}}&repeatCount=5"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"timerName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{{howoften}}"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"period"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"repeatCount"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriLog ()
specifier|public
name|void
name|testAsEndpointUriLog
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerLevel"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"multiline"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showAll"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showBody"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showBodyType"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"showExchangePattern"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"style"
argument_list|,
literal|"Tab"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log:foo?loggerLevel=WARN&multiline=true&showAll=true&style=Tab"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"log"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriLogShort ()
specifier|public
name|void
name|testAsEndpointUriLogShort
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerName"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"loggerLevel"
argument_list|,
literal|"DEBUG"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log:foo?loggerLevel=DEBUG"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"log"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsEndpointUriWithplaceholder ()
specifier|public
name|void
name|testAsEndpointUriWithplaceholder
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"blockWhenFull"
argument_list|,
literal|"{{block}}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"seda:foo?blockWhenFull={{block}}"
argument_list|,
name|catalog
operator|.
name|asEndpointUri
argument_list|(
literal|"seda"
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointPropertiesSedaRequired ()
specifier|public
name|void
name|testEndpointPropertiesSedaRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"seda:foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
literal|"seda:foo?blockWhenFull=true"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"blockWhenFull"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateProperties ()
specifier|public
name|void
name|validateProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// valid
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"log:mylog"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// unknown
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"log:mylog?level=WARN&foo=bar"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getUnknown
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// enum
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"seda:foo?waitForTaskToComplete=blah"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|result
operator|.
name|getInvalidEnum
argument_list|()
operator|.
name|get
argument_list|(
literal|"waitForTaskToComplete"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// reference okay
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"seda:foo?queue=#queue"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// unknown component
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"foo:bar?me=you"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getUnknownComponent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// invalid boolean but default value
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"log:output?showAll=ggg"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ggg"
argument_list|,
name|result
operator|.
name|getInvalidBoolean
argument_list|()
operator|.
name|get
argument_list|(
literal|"showAll"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNumberOfErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// dataset
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataset:foo?minRate=50"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// time pattern
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"timer://foo?fixedRate=true&delay=0&period=2s"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// reference lookup
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"timer://foo?fixedRate=#fixed&delay=#myDelay"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// optional consumer. prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?consumer.delay=5000&consumer.greedy=true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// optional without consumer. prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?delay=5000&greedy=true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// mixed optional without consumer. prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?delay=5000&consumer.greedy=true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// prefix
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"file:inbox?delay=5000&scheduler.foo=123&scheduler.bar=456"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// stub
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"stub:foo?me=123&you=456"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient on
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataformat:string:marshal?foo=bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// lenient off
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataformat:string:marshal?foo=bar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getUnknown
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// data format
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"dataformat:string:marshal?charset=utf-8"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// incapable to parse
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"{{getFtpUrl}}?recursive=true"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getIncapable
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validatePropertiesSummary ()
specifier|public
name|void
name|validatePropertiesSummary
parameter_list|()
throws|throws
name|Exception
block|{
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"yammer:MESSAGES?blah=yada&accessToken=aaa&consumerKey=&useJson=no&initialDelay=five&pollStrategy=myStrategy"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|reason
init|=
name|result
operator|.
name|summaryErrorMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
literal|"jms:unknown:myqueue"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|reason
operator|=
name|result
operator|.
name|summaryErrorMessage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateTimePattern ()
specifier|public
name|void
name|validateTimePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"10000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5sec"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5secs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"3m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"3min"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"3minutes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"5m15s"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"1h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"1hour"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"2hours"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"bla"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"2year"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|catalog
operator|.
name|validateTimePattern
argument_list|(
literal|"60darn"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointComponentName ()
specifier|public
name|void
name|testEndpointComponentName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|catalog
operator|.
name|endpointComponentName
argument_list|(
literal|"jms:queue:foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"jms"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleExpression ()
specifier|public
name|void
name|testSimpleExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"expected symbol functionEnd but was eol at location 5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected symbol functionEnd but was eol"
argument_list|,
name|result
operator|.
name|getShortError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimplePredicate ()
specifier|public
name|void
name|testSimplePredicate
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body} == 'abc'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body} == 'abc'"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}> ${header.size"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}> ${header.size"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"expected symbol functionEnd but was eol at location 22"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected symbol functionEnd but was eol"
argument_list|,
name|result
operator|.
name|getShortError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimplePredicatePlaceholder ()
specifier|public
name|void
name|testSimplePredicatePlaceholder
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body} contains '{{danger}}'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body} contains '{{danger}}'"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${bdy} contains '{{danger}}'"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${bdy} contains '{{danger}}'"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unknown function: bdy at location 0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getError
argument_list|()
operator|.
name|contains
argument_list|(
literal|"'{{danger}}'"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown function: bdy"
argument_list|,
name|result
operator|.
name|getShortError
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateLanguage ()
specifier|public
name|void
name|testValidateLanguage
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageValidationResult
name|result
init|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguageExpression
argument_list|(
literal|null
argument_list|,
literal|"header"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"simple"
argument_list|,
literal|"${body}> 10"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${body}> 10"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"header"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|result
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateLanguagePredicate
argument_list|(
literal|null
argument_list|,
literal|"foobar"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown language foobar"
argument_list|,
name|result
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateEndpointConsumerOnly ()
specifier|public
name|void
name|testValidateEndpointConsumerOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"file:inbox?bufferSize=4096&readLock=changed&delete=true"
decl_stmt|;
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
literal|"file:inbox?bufferSize=4096&readLock=changed&delete=true&fileExist=Append"
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fileExist"
argument_list|,
name|result
operator|.
name|getNotConsumerOnly
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateEndpointProducerOnly ()
specifier|public
name|void
name|testValidateEndpointProducerOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"file:outbox?bufferSize=4096&fileExist=Append"
decl_stmt|;
name|EndpointValidationResult
name|result
init|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
literal|"file:outbox?bufferSize=4096&fileExist=Append&delete=true"
expr_stmt|;
name|result
operator|=
name|catalog
operator|.
name|validateEndpointProperties
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"delete"
argument_list|,
name|result
operator|.
name|getNotProducerOnly
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

