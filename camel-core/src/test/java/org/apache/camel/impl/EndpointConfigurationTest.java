begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|EndpointConfigurationTest
specifier|public
class|class
name|EndpointConfigurationTest
block|{
DECL|field|MAPPED_SCHEME
specifier|private
specifier|static
specifier|final
name|String
name|MAPPED_SCHEME
init|=
literal|"mapped"
decl_stmt|;
DECL|field|context
specifier|private
specifier|static
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createContext ()
specifier|public
specifier|static
name|void
name|createContext
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|Component
name|component
init|=
operator|new
name|ConfiguredComponent
argument_list|()
decl_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
name|MAPPED_SCHEME
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// so that TypeConverters are available
block|}
annotation|@
name|AfterClass
DECL|method|destroyContext ()
specifier|public
specifier|static
name|void
name|destroyContext
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigurationInstanceType ()
specifier|public
name|void
name|testConfigurationInstanceType
parameter_list|()
throws|throws
name|Exception
block|{
name|EndpointConfiguration
name|cfg
init|=
name|ConfigurationHelper
operator|.
name|createConfiguration
argument_list|(
literal|"mapped:foo"
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EndpointConfiguration instance not of expected type"
argument_list|,
name|MappedEndpointConfiguration
operator|.
name|class
argument_list|,
name|cfg
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigurationEquals ()
specifier|public
name|void
name|testConfigurationEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|EndpointConfiguration
name|cfg1
init|=
name|ConfigurationHelper
operator|.
name|createConfiguration
argument_list|(
literal|"mapped://foo?one=true&two=2"
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|EndpointConfiguration
name|cfg2
init|=
name|ConfigurationHelper
operator|.
name|createConfiguration
argument_list|(
literal|"mapped://foo?two=2&one=true"
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|String
name|uri1
init|=
name|cfg1
operator|.
name|toUriString
argument_list|(
name|EndpointConfiguration
operator|.
name|UriFormat
operator|.
name|Complete
argument_list|)
decl_stmt|;
name|String
name|uri2
init|=
name|cfg2
operator|.
name|toUriString
argument_list|(
name|EndpointConfiguration
operator|.
name|UriFormat
operator|.
name|Complete
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Query paramater order should not matter"
argument_list|,
name|uri1
argument_list|,
name|uri2
argument_list|)
expr_stmt|;
block|}
DECL|class|ConfiguredComponent
specifier|private
specifier|static
class|class
name|ConfiguredComponent
implements|implements
name|Component
block|{
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|context
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri)
specifier|public
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration (String uri)
specifier|public
name|EndpointConfiguration
name|createConfiguration
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|MappedEndpointConfiguration
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

