begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|ProducerTest
specifier|public
class|class
name|ProducerTest
extends|extends
name|TestSupport
block|{
DECL|field|context
specifier|private
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
DECL|method|testUsingADerivedExchange ()
specifier|public
name|void
name|testUsingADerivedExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultEndpoint
argument_list|<
name|MyExchange
argument_list|>
name|endpoint
init|=
operator|new
name|DefaultEndpoint
argument_list|<
name|MyExchange
argument_list|>
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|DefaultComponent
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|{
specifier|public
name|Consumer
argument_list|<
name|MyExchange
argument_list|>
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MyExchange
name|createExchange
parameter_list|()
block|{
return|return
operator|new
name|MyExchange
argument_list|(
name|getContext
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Producer
argument_list|<
name|MyExchange
argument_list|>
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|DefaultProducer
name|producer
init|=
operator|new
name|DefaultProducer
argument_list|(
name|endpoint
argument_list|)
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Received: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// now lets try send in a normal exchange
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Class
name|type
init|=
name|endpoint
operator|.
name|getExchangeType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"exchange type"
argument_list|,
name|MyExchange
operator|.
name|class
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|MyExchange
name|actual
init|=
name|endpoint
operator|.
name|toExchangeType
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not same exchange"
argument_list|,
name|actual
operator|!=
name|exchange
argument_list|)
expr_stmt|;
name|MyExchange
name|expected
init|=
operator|new
name|MyExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|actual
operator|=
name|endpoint
operator|.
name|toExchangeType
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Should not copy an exchange when of the correct type"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

