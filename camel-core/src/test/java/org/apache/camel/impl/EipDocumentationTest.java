begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_class
DECL|class|EipDocumentationTest
specifier|public
class|class
name|EipDocumentationTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|testDocumentation ()
specifier|public
name|void
name|testDocumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|context
operator|.
name|getEipParameterJsonSchema
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have found json for from"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"name\": \"from\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"uri\": { \"kind\": \"attribute\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"ref\": { \"kind\": \"attribute\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitDocumentation ()
specifier|public
name|void
name|testSplitDocumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|context
operator|.
name|getEipParameterJsonSchema
argument_list|(
literal|"split"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have found json for split"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"name\": \"split\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// there should be javadoc included
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"If enabled then processing each splitted messages occurs concurrently."
argument_list|)
argument_list|)
expr_stmt|;
comment|// and it support outputs
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"outputs\": { \"kind\": \"element\", \"required\": \"true\", \"type\": \"array\", \"javaType\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleDocumentation ()
specifier|public
name|void
name|testSimpleDocumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|context
operator|.
name|getEipParameterJsonSchema
argument_list|(
literal|"simple"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have found json for simple"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"label\": \"language,core,java\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"name\": \"simple\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailOverDocumentation ()
specifier|public
name|void
name|testFailOverDocumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|context
operator|.
name|getEipParameterJsonSchema
argument_list|(
literal|"failover"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have found json for failover"
argument_list|,
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"name\": \"failover\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"exception\": { \"kind\": \"element\", \"required\": \"false\", \"type\": \"array\""
operator|+
literal|", \"javaType\": \"java.util.List<java.lang.String>\", \"deprecated\": \"false\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotFound ()
specifier|public
name|void
name|testNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|context
operator|.
name|getEipParameterJsonSchema
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Should not have found json for unknown"
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

