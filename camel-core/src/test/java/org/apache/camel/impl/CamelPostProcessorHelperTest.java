begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BeanInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|SynchronizationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|CamelPostProcessorHelperTest
specifier|public
class|class
name|CamelPostProcessorHelperTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|mySynchronization
specifier|private
name|MySynchronization
name|mySynchronization
init|=
operator|new
name|MySynchronization
argument_list|()
decl_stmt|;
DECL|field|myProp
specifier|private
name|Properties
name|myProp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"myProp"
argument_list|,
name|myProp
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|FooBar
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|PropertiesComponent
name|pc
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"properties"
argument_list|,
name|PropertiesComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setLocation
argument_list|(
literal|"ref:myProp"
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|testConstructor ()
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|helper
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructorCamelContext ()
specifier|public
name|void
name|testConstructorCamelContext
parameter_list|()
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchContext ()
specifier|public
name|void
name|testMatchContext
parameter_list|()
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|matchContext
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|helper
operator|.
name|matchContext
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConsume ()
specifier|public
name|void
name|testConsume
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyConsumeBean
name|my
init|=
operator|new
name|MyConsumeBean
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|my
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"consumeSomething"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|helper
operator|.
name|consumerInjection
argument_list|(
name|method
argument_list|,
name|my
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:foo"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testConsumePrivate ()
specifier|public
name|void
name|testConsumePrivate
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyPrivateConsumeBean
name|my
init|=
operator|new
name|MyPrivateConsumeBean
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|my
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"consumeSomethingPrivate"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|consumerInjection
argument_list|(
name|method
argument_list|,
name|my
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"The method private void"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"(for example the method must be public)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConsumeSynchronization ()
specifier|public
name|void
name|testConsumeSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyConsumeAndSynchronizationBean
name|my
init|=
operator|new
name|MyConsumeAndSynchronizationBean
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|my
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"consumeSomething"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|helper
operator|.
name|consumerInjection
argument_list|(
name|method
argument_list|,
name|my
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:foo"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// give UoW a bit of time
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have invoked onDone"
argument_list|,
name|mySynchronization
operator|.
name|isOnDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testProduceSynchronization ()
specifier|public
name|void
name|testProduceSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
name|MyProduceAndSynchronizationBean
name|my
init|=
operator|new
name|MyProduceAndSynchronizationBean
argument_list|()
decl_stmt|;
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|helper
operator|.
name|createInjectionProducer
argument_list|(
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
argument_list|,
name|my
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|my
operator|.
name|setProducer
argument_list|(
name|producer
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|my
operator|.
name|produceSomething
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// give UoW a bit of time
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have invoked onDone"
argument_list|,
name|mySynchronization
operator|.
name|isOnDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEndpointInjectProducerTemplate ()
specifier|public
name|void
name|testEndpointInjectProducerTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointInjectBeanProducerTemplate
name|bean
init|=
operator|new
name|MyEndpointInjectBeanProducerTemplate
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setProducer"
argument_list|,
name|ProducerTemplate
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|parameterTypes
control|)
block|{
name|String
name|propertyName
init|=
name|ObjectHelper
operator|.
name|getPropertyName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bean
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|.
name|send
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testEndpointInjectProducer ()
specifier|public
name|void
name|testEndpointInjectProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointBeanProducer
name|bean
init|=
operator|new
name|MyEndpointBeanProducer
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setProducer"
argument_list|,
name|Producer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|parameterTypes
control|)
block|{
name|String
name|propertyName
init|=
name|ObjectHelper
operator|.
name|getPropertyName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bean
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|bean
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testEndpointInjectPollingConsumer ()
specifier|public
name|void
name|testEndpointInjectPollingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointBeanPollingConsumer
name|bean
init|=
operator|new
name|MyEndpointBeanPollingConsumer
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setConsumer"
argument_list|,
name|PollingConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|parameterTypes
control|)
block|{
name|String
name|propertyName
init|=
name|ObjectHelper
operator|.
name|getPropertyName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:foo"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bean
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|bean
operator|.
name|consume
argument_list|()
decl_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"mock:result"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testEndpointInjectProducerTemplateField ()
specifier|public
name|void
name|testEndpointInjectProducerTemplateField
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointInjectProducerTemplate
name|bean
init|=
operator|new
name|MyEndpointInjectProducerTemplate
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"producer"
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
literal|"producer"
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|bean
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testEndpointInjectProducerTemplateFieldNoDefaultEndpoint ()
specifier|public
name|void
name|testEndpointInjectProducerTemplateFieldNoDefaultEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointInjectProducerTemplateNoDefaultEndpoint
name|bean
init|=
operator|new
name|MyEndpointInjectProducerTemplateNoDefaultEndpoint
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"producer"
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
literal|"producer"
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|bean
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|testEndpointInjectProducerTemplateFieldNameUnknown ()
specifier|public
name|void
name|testEndpointInjectProducerTemplateFieldNameUnknown
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointInjectProducerTemplateNameUnknown
name|bean
init|=
operator|new
name|MyEndpointInjectProducerTemplateNameUnknown
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"producer"
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
literal|"producer"
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchBeanException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No bean could be found in the registry for: unknown of type: org.apache.camel.Endpoint"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEndpointInjectProducerTemplateFieldUrlUnknown ()
specifier|public
name|void
name|testEndpointInjectProducerTemplateFieldUrlUnknown
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointInjectProducerTemplateUrlUnknown
name|bean
init|=
operator|new
name|MyEndpointInjectProducerTemplateUrlUnknown
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"producer"
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
literal|"producer"
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResolveEndpointFailedException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to resolve endpoint: xxx://foo due to: No component found with scheme: xxx"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEndpointInjectBothUriAndRef ()
specifier|public
name|void
name|testEndpointInjectBothUriAndRef
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyEndpointBothUriAndRef
name|bean
init|=
operator|new
name|MyEndpointBothUriAndRef
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"producer"
argument_list|)
decl_stmt|;
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
literal|"producer"
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|getInjectionValue
argument_list|(
name|type
argument_list|,
name|endpointInject
operator|.
name|uri
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|ref
argument_list|()
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Both uri and name is provided, only either one is allowed: uri=seda:foo, ref=myEndpoint"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPropertyFieldInject ()
specifier|public
name|void
name|testPropertyFieldInject
parameter_list|()
throws|throws
name|Exception
block|{
name|myProp
operator|.
name|put
argument_list|(
literal|"myTimeout"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|myProp
operator|.
name|put
argument_list|(
literal|"myApp"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyPropertyFieldBean
name|bean
init|=
operator|new
name|MyPropertyFieldBean
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
name|PropertyInject
name|propertyInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionPropertyValue
argument_list|(
name|type
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"timeout"
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"2000"
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|""
operator|+
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"greeting"
argument_list|)
expr_stmt|;
name|propertyInject
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|=
name|field
operator|.
name|getType
argument_list|()
expr_stmt|;
name|value
operator|=
name|helper
operator|.
name|getInjectionPropertyValue
argument_list|(
name|type
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"greeting"
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Camel"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|testPropertyFieldDefaultValueInject ()
specifier|public
name|void
name|testPropertyFieldDefaultValueInject
parameter_list|()
throws|throws
name|Exception
block|{
name|myProp
operator|.
name|put
argument_list|(
literal|"myApp"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyPropertyFieldBean
name|bean
init|=
operator|new
name|MyPropertyFieldBean
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
name|PropertyInject
name|propertyInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionPropertyValue
argument_list|(
name|type
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
literal|"5000"
argument_list|,
literal|"timeout"
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"5000"
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|""
operator|+
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"greeting"
argument_list|)
expr_stmt|;
name|propertyInject
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|=
name|field
operator|.
name|getType
argument_list|()
expr_stmt|;
name|value
operator|=
name|helper
operator|.
name|getInjectionPropertyValue
argument_list|(
name|type
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"greeting"
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Camel"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|testPropertyMethodInject ()
specifier|public
name|void
name|testPropertyMethodInject
parameter_list|()
throws|throws
name|Exception
block|{
name|myProp
operator|.
name|put
argument_list|(
literal|"myTimeout"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|myProp
operator|.
name|put
argument_list|(
literal|"myApp"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyPropertyMethodBean
name|bean
init|=
operator|new
name|MyPropertyMethodBean
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setTimeout"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|PropertyInject
name|propertyInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionPropertyValue
argument_list|(
name|type
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"timeout"
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"2000"
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|""
operator|+
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setGreeting"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|propertyInject
operator|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|value
operator|=
name|helper
operator|.
name|getInjectionPropertyValue
argument_list|(
name|type
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"greeting"
argument_list|,
name|bean
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Camel"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|testBeanInject ()
specifier|public
name|void
name|testBeanInject
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyBeanInjectBean
name|bean
init|=
operator|new
name|MyBeanInjectBean
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|BeanInject
name|beanInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|BeanInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionBeanValue
argument_list|(
name|type
argument_list|,
name|beanInject
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|bean
operator|.
name|doSomething
argument_list|(
literal|"World"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testBeanInjectNotFound ()
specifier|public
name|void
name|testBeanInjectNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyBeanInjectBean
name|bean
init|=
operator|new
name|MyBeanInjectBean
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|getInjectionBeanValue
argument_list|(
name|type
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchBeanException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No bean could be found in the registry for: bar of type: org.apache.camel.impl.FooBar"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBeanInjectByType ()
specifier|public
name|void
name|testBeanInjectByType
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelPostProcessorHelper
name|helper
init|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyBeanInjectByTypeBean
name|bean
init|=
operator|new
name|MyBeanInjectByTypeBean
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|BeanInject
name|beanInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|BeanInject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|helper
operator|.
name|getInjectionBeanValue
argument_list|(
name|type
argument_list|,
name|beanInject
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|bean
operator|.
name|doSomething
argument_list|(
literal|"Camel"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Camel"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|class|MyConsumeBean
specifier|public
class|class
name|MyConsumeBean
block|{
annotation|@
name|Consume
argument_list|(
name|uri
operator|=
literal|"seda:foo"
argument_list|)
DECL|method|consumeSomething (String body)
specifier|public
name|void
name|consumeSomething
parameter_list|(
name|String
name|body
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"mock:result"
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyConsumeAndSynchronizationBean
specifier|public
class|class
name|MyConsumeAndSynchronizationBean
block|{
annotation|@
name|Consume
argument_list|(
name|uri
operator|=
literal|"seda:foo"
argument_list|)
DECL|method|consumeSomething (String body, Exchange exchange)
specifier|public
name|void
name|consumeSomething
parameter_list|(
name|String
name|body
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|addOnCompletion
argument_list|(
name|mySynchronization
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"mock:result"
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyProduceAndSynchronizationBean
specifier|public
class|class
name|MyProduceAndSynchronizationBean
block|{
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|producer
name|Producer
name|producer
decl_stmt|;
DECL|method|produceSomething (String body)
specifier|public
name|void
name|produceSomething
parameter_list|(
name|String
name|body
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|addOnCompletion
argument_list|(
name|mySynchronization
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|setProducer (Producer producer)
specifier|public
name|void
name|setProducer
parameter_list|(
name|Producer
name|producer
parameter_list|)
block|{
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
block|}
block|}
DECL|class|MySynchronization
specifier|private
specifier|static
class|class
name|MySynchronization
extends|extends
name|SynchronizationAdapter
block|{
DECL|field|onDone
specifier|private
name|boolean
name|onDone
decl_stmt|;
annotation|@
name|Override
DECL|method|onDone (Exchange exchange)
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|onDone
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isOnDone ()
specifier|public
name|boolean
name|isOnDone
parameter_list|()
block|{
return|return
name|onDone
return|;
block|}
block|}
DECL|class|MyEndpointInjectBeanProducerTemplate
specifier|public
class|class
name|MyEndpointInjectBeanProducerTemplate
block|{
DECL|field|producer
specifier|private
name|ProducerTemplate
name|producer
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|method|setProducer (ProducerTemplate producer)
specifier|public
name|void
name|setProducer
parameter_list|(
name|ProducerTemplate
name|producer
parameter_list|)
block|{
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
block|}
DECL|method|getProducer ()
specifier|public
name|ProducerTemplate
name|getProducer
parameter_list|()
block|{
return|return
name|producer
return|;
block|}
DECL|method|send (String message)
specifier|public
name|void
name|send
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|producer
operator|.
name|sendBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyEndpointBeanProducer
specifier|public
class|class
name|MyEndpointBeanProducer
block|{
DECL|field|producer
specifier|private
name|Producer
name|producer
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|method|setProducer (Producer producer)
specifier|public
name|void
name|setProducer
parameter_list|(
name|Producer
name|producer
parameter_list|)
block|{
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
block|}
DECL|method|getProducer ()
specifier|public
name|Producer
name|getProducer
parameter_list|()
block|{
return|return
name|producer
return|;
block|}
DECL|method|send (Exchange exchange)
specifier|public
name|void
name|send
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyEndpointBeanPollingConsumer
specifier|public
class|class
name|MyEndpointBeanPollingConsumer
block|{
DECL|field|consumer
specifier|private
name|PollingConsumer
name|consumer
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"seda:foo"
argument_list|)
DECL|method|setConsumer (PollingConsumer consumer)
specifier|public
name|void
name|setConsumer
parameter_list|(
name|PollingConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
DECL|method|getConsumer ()
specifier|public
name|PollingConsumer
name|getConsumer
parameter_list|()
block|{
return|return
name|consumer
return|;
block|}
DECL|method|consume ()
specifier|public
name|Exchange
name|consume
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
return|;
block|}
block|}
DECL|class|MyEndpointInjectProducerTemplate
specifier|public
class|class
name|MyEndpointInjectProducerTemplate
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|producer
specifier|public
name|ProducerTemplate
name|producer
decl_stmt|;
DECL|method|send (Exchange exchange)
specifier|public
name|void
name|send
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|producer
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyEndpointInjectProducerTemplateNoDefaultEndpoint
specifier|public
class|class
name|MyEndpointInjectProducerTemplateNoDefaultEndpoint
block|{
annotation|@
name|EndpointInject
argument_list|()
DECL|field|producer
specifier|public
name|ProducerTemplate
name|producer
decl_stmt|;
DECL|method|send (Exchange exchange)
specifier|public
name|void
name|send
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|producer
operator|.
name|send
argument_list|(
literal|"mock:result"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyEndpointInjectProducerTemplateNameUnknown
specifier|public
class|class
name|MyEndpointInjectProducerTemplateNameUnknown
block|{
annotation|@
name|EndpointInject
argument_list|(
name|ref
operator|=
literal|"unknown"
argument_list|)
DECL|field|producer
specifier|public
name|ProducerTemplate
name|producer
decl_stmt|;
DECL|method|send (Exchange exchange)
specifier|public
name|void
name|send
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|producer
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyEndpointInjectProducerTemplateUrlUnknown
specifier|public
class|class
name|MyEndpointInjectProducerTemplateUrlUnknown
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"xxx:foo"
argument_list|)
DECL|field|producer
specifier|public
name|ProducerTemplate
name|producer
decl_stmt|;
DECL|method|send (Exchange exchange)
specifier|public
name|void
name|send
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|producer
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyEndpointBothUriAndRef
specifier|public
class|class
name|MyEndpointBothUriAndRef
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"seda:foo"
argument_list|,
name|ref
operator|=
literal|"myEndpoint"
argument_list|)
DECL|field|producer
specifier|public
name|ProducerTemplate
name|producer
decl_stmt|;
DECL|method|send (Exchange exchange)
specifier|public
name|void
name|send
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|producer
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyPrivateConsumeBean
specifier|public
class|class
name|MyPrivateConsumeBean
block|{
annotation|@
name|Consume
argument_list|(
name|uri
operator|=
literal|"seda:foo"
argument_list|)
DECL|method|consumeSomethingPrivate (String body)
specifier|private
name|void
name|consumeSomethingPrivate
parameter_list|(
name|String
name|body
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"mock:result"
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyPropertyFieldBean
specifier|public
class|class
name|MyPropertyFieldBean
block|{
annotation|@
name|PropertyInject
argument_list|(
literal|"myTimeout"
argument_list|)
DECL|field|timeout
specifier|public
name|int
name|timeout
decl_stmt|;
annotation|@
name|PropertyInject
argument_list|(
literal|"Hello {{myApp}}"
argument_list|)
DECL|field|greeting
specifier|public
name|String
name|greeting
decl_stmt|;
DECL|method|doSomething (String body)
specifier|public
name|String
name|doSomething
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
name|greeting
operator|+
literal|" "
operator|+
name|body
operator|+
literal|" with timeout="
operator|+
name|timeout
return|;
block|}
block|}
DECL|class|MyPropertyFieldDefaultValueBean
specifier|public
class|class
name|MyPropertyFieldDefaultValueBean
block|{
annotation|@
name|PropertyInject
argument_list|(
name|value
operator|=
literal|"myTimeout"
argument_list|,
name|defaultValue
operator|=
literal|"5000"
argument_list|)
DECL|field|timeout
specifier|public
name|int
name|timeout
decl_stmt|;
annotation|@
name|PropertyInject
argument_list|(
literal|"Hello {{myApp}}"
argument_list|)
DECL|field|greeting
specifier|public
name|String
name|greeting
decl_stmt|;
DECL|method|doSomething (String body)
specifier|public
name|String
name|doSomething
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
name|greeting
operator|+
literal|" "
operator|+
name|body
operator|+
literal|" with timeout="
operator|+
name|timeout
return|;
block|}
block|}
DECL|class|MyPropertyMethodBean
specifier|public
class|class
name|MyPropertyMethodBean
block|{
DECL|field|timeout
specifier|private
name|int
name|timeout
decl_stmt|;
DECL|field|greeting
specifier|private
name|String
name|greeting
decl_stmt|;
DECL|method|doSomething (String body)
specifier|public
name|String
name|doSomething
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
name|greeting
operator|+
literal|" "
operator|+
name|body
operator|+
literal|" with timeout="
operator|+
name|timeout
return|;
block|}
DECL|method|getTimeout ()
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
annotation|@
name|PropertyInject
argument_list|(
literal|"myTimeout"
argument_list|)
DECL|method|setTimeout (int timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getGreeting ()
specifier|public
name|String
name|getGreeting
parameter_list|()
block|{
return|return
name|greeting
return|;
block|}
annotation|@
name|PropertyInject
argument_list|(
literal|"Hello {{myApp}}"
argument_list|)
DECL|method|setGreeting (String greeting)
specifier|public
name|void
name|setGreeting
parameter_list|(
name|String
name|greeting
parameter_list|)
block|{
name|this
operator|.
name|greeting
operator|=
name|greeting
expr_stmt|;
block|}
block|}
DECL|class|MyBeanInjectBean
specifier|public
class|class
name|MyBeanInjectBean
block|{
annotation|@
name|BeanInject
argument_list|(
literal|"foo"
argument_list|)
DECL|field|foo
specifier|public
name|FooBar
name|foo
decl_stmt|;
DECL|method|doSomething (String body)
specifier|public
name|String
name|doSomething
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
name|foo
operator|.
name|hello
argument_list|(
name|body
argument_list|)
return|;
block|}
block|}
DECL|class|MyBeanInjectByTypeBean
specifier|public
class|class
name|MyBeanInjectByTypeBean
block|{
annotation|@
name|BeanInject
DECL|field|foo
specifier|public
name|FooBar
name|foo
decl_stmt|;
DECL|method|doSomething (String body)
specifier|public
name|String
name|doSomething
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
name|foo
operator|.
name|hello
argument_list|(
name|body
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

