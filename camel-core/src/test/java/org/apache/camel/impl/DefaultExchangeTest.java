begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangeTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|DefaultExchangeTest
specifier|public
class|class
name|DefaultExchangeTest
extends|extends
name|ExchangeTestSupport
block|{
DECL|method|testBody ()
specifier|public
name|void
name|testBody
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello id='m123'>world!</hello>"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello id='m123'>world!</hello>"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello id='m123'>world!</hello>"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello id='m123'>world!</hello>"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMandatoryBody ()
specifier|public
name|void
name|testMandatoryBody
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello id='m123'>world!</hello>"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a TypeConversionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TypeConversionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
literal|"<hello id='m123'>world!</hello>"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an InvalidPayloadException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testExceptionAsType ()
specifier|public
name|void
name|testExceptionAsType
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
operator|new
name|ConnectException
argument_list|(
literal|"Cannot connect to remote server"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ConnectException
name|ce
init|=
name|exchange
operator|.
name|getException
argument_list|(
name|ConnectException
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot connect to remote server"
argument_list|,
name|ce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|IOException
name|ie
init|=
name|exchange
operator|.
name|getException
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ie
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot connect to remote server"
argument_list|,
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|exchange
operator|.
name|getException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot connect to remote server"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|RuntimeCamelException
name|rce
init|=
name|exchange
operator|.
name|getException
argument_list|(
name|RuntimeCamelException
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rce
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"Cannot connect to remote server"
argument_list|,
name|rce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot connect to remote server"
argument_list|,
name|rce
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeader ()
specifier|public
name|void
name|testHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|123
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bar"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bar"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bar"
argument_list|,
literal|234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bar"
argument_list|,
literal|234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|123
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bar"
argument_list|,
literal|234
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bar"
argument_list|,
literal|"234"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|234
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"cheese"
argument_list|,
literal|234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"234"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"cheese"
argument_list|,
literal|234
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testProperty ()
specifier|public
name|void
name|testProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|removeProperty
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|exchange
operator|.
name|hasProperties
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"fruit"
argument_list|,
literal|"apple"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchange
operator|.
name|hasProperties
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apple"
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"fruit"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"beer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"beer"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Current TypeConverter support to turn the null value to false of boolean,
comment|// as assertEquals needs the Object as the parameter, we have to use Boolean.FALSE value in this case
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"beer"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"beer"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apple"
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"fruit"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apple"
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"fruit"
argument_list|,
literal|"banana"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"banana"
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"beer"
argument_list|,
literal|"banana"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"banana"
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
literal|"beer"
argument_list|,
literal|"banana"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInType ()
specifier|public
name|void
name|testInType
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setIn
argument_list|(
operator|new
name|MyMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MyMessage
name|my
init|=
name|exchange
operator|.
name|getIn
argument_list|(
name|MyMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|my
argument_list|)
expr_stmt|;
block|}
DECL|method|testOutType ()
specifier|public
name|void
name|testOutType
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setOut
argument_list|(
operator|new
name|MyMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MyMessage
name|my
init|=
name|exchange
operator|.
name|getOut
argument_list|(
name|MyMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|my
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopy ()
specifier|public
name|void
name|testCopy
parameter_list|()
block|{
name|DefaultExchange
name|sourceExchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MyMessage
name|sourceIn
init|=
operator|new
name|MyMessage
argument_list|()
decl_stmt|;
name|sourceExchange
operator|.
name|setIn
argument_list|(
name|sourceIn
argument_list|)
expr_stmt|;
name|Exchange
name|destExchange
init|=
name|sourceExchange
operator|.
name|copy
argument_list|()
decl_stmt|;
name|Message
name|destIn
init|=
name|destExchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Dest message should be of the same type as source message"
argument_list|,
name|sourceIn
operator|.
name|getClass
argument_list|()
argument_list|,
name|destIn
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyMessage
specifier|public
specifier|static
class|class
name|MyMessage
extends|extends
name|DefaultMessage
block|{
annotation|@
name|Override
DECL|method|newInstance ()
specifier|public
name|MyMessage
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|MyMessage
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

