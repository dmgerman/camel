begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|HeaderFilterStrategyComponentTest
specifier|public
class|class
name|HeaderFilterStrategyComponentTest
extends|extends
name|TestCase
block|{
DECL|class|MyComponent
specifier|private
specifier|static
class|class
name|MyComponent
extends|extends
name|HeaderFilterStrategyComponent
block|{
DECL|method|MyComponent (Class<? extends Endpoint> endpointClass)
specifier|public
name|MyComponent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|endpointClass
parameter_list|)
block|{
name|super
argument_list|(
name|endpointClass
argument_list|)
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|MyEndpoint
specifier|private
specifier|static
class|class
name|MyEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|HeaderFilterStrategyAware
block|{
DECL|field|strategy
specifier|private
name|HeaderFilterStrategy
name|strategy
decl_stmt|;
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|strategy
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy strategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|testHeaderFilterStrategyComponent ()
specifier|public
name|void
name|testHeaderFilterStrategyComponent
parameter_list|()
block|{
name|MyComponent
name|comp
init|=
operator|new
name|MyComponent
argument_list|(
name|MyEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|comp
operator|.
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|HeaderFilterStrategy
name|strategy
init|=
operator|new
name|DefaultHeaderFilterStrategy
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|strategy
argument_list|,
name|comp
operator|.
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeaderFilterStrategyAware ()
specifier|public
name|void
name|testHeaderFilterStrategyAware
parameter_list|()
block|{
name|MyComponent
name|comp
init|=
operator|new
name|MyComponent
argument_list|(
name|MyEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|comp
operator|.
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|HeaderFilterStrategy
name|strategy
init|=
operator|new
name|DefaultHeaderFilterStrategy
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|MyEndpoint
name|my
init|=
operator|new
name|MyEndpoint
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setEndpointHeaderFilterStrategy
argument_list|(
name|my
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|strategy
argument_list|,
name|my
operator|.
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|strategy
argument_list|,
name|comp
operator|.
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

