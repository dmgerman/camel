begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|UriTypeConverterTest
specifier|public
class|class
name|UriTypeConverterTest
block|{
DECL|field|EXAMPLE
specifier|static
specifier|final
name|String
name|EXAMPLE
init|=
literal|"http://www.example.com"
decl_stmt|;
DECL|field|EXAMPLE_URI
specifier|static
specifier|final
name|URI
name|EXAMPLE_URI
init|=
name|URI
operator|.
name|create
argument_list|(
name|EXAMPLE
argument_list|)
decl_stmt|;
DECL|field|INVALID
specifier|static
specifier|final
name|String
name|INVALID
init|=
literal|":"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TypeConversionException
operator|.
name|class
argument_list|)
DECL|method|shouldComplainOnInvalidStringUrisConvertingToStrings ()
specifier|public
name|void
name|shouldComplainOnInvalidStringUrisConvertingToStrings
parameter_list|()
block|{
name|UriTypeConverter
operator|.
name|toCharSequence
argument_list|(
name|INVALID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TypeConversionException
operator|.
name|class
argument_list|)
DECL|method|shouldComplainOnInvalidStringUrisConvertingToUri ()
specifier|public
name|void
name|shouldComplainOnInvalidStringUrisConvertingToUri
parameter_list|()
block|{
name|UriTypeConverter
operator|.
name|toUri
argument_list|(
name|INVALID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldConvertFromStringsToUris ()
specifier|public
name|void
name|shouldConvertFromStringsToUris
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|EXAMPLE_URI
argument_list|,
name|UriTypeConverter
operator|.
name|toUri
argument_list|(
name|EXAMPLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldConvertFromUrisToStrings ()
specifier|public
name|void
name|shouldConvertFromUrisToStrings
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|EXAMPLE
argument_list|,
name|UriTypeConverter
operator|.
name|toCharSequence
argument_list|(
name|EXAMPLE_URI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

