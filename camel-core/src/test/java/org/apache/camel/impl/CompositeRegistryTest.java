begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CompositeRegistryTest
specifier|public
class|class
name|CompositeRegistryTest
block|{
DECL|field|registry
specifier|private
name|CompositeRegistry
name|registry
decl_stmt|;
annotation|@
name|Before
DECL|method|createContext ()
specifier|public
name|void
name|createContext
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleRegistry
name|sr1
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
name|sr1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleRegistry
name|sr2
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
name|sr2
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|registry
operator|=
operator|new
name|CompositeRegistry
argument_list|()
expr_stmt|;
name|registry
operator|.
name|addRegistry
argument_list|(
name|sr2
argument_list|)
expr_stmt|;
name|registry
operator|.
name|addRegistry
argument_list|(
name|sr1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNameAndType ()
specifier|public
name|void
name|testGetNameAndType
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|result
init|=
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"name"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong result"
argument_list|,
name|result
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|result
operator|=
name|registry
operator|.
name|lookup
argument_list|(
literal|"test"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

