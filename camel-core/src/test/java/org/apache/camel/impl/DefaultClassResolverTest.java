begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|DefaultClassResolverTest
specifier|public
class|class
name|DefaultClassResolverTest
extends|extends
name|TestCase
block|{
DECL|method|testResolveClass ()
specifier|public
name|void
name|testResolveClass
parameter_list|()
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveClass
argument_list|(
literal|"java.lang.Integer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveClassType ()
specifier|public
name|void
name|testResolveClassType
parameter_list|()
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|Integer
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveClass
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveClassClassLoader ()
specifier|public
name|void
name|testResolveClassClassLoader
parameter_list|()
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveClass
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|DefaultClassResolverTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveClassClassLoaderType ()
specifier|public
name|void
name|testResolveClassClassLoaderType
parameter_list|()
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|Integer
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveClass
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|DefaultClassResolverTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveMandatoryClass ()
specifier|public
name|void
name|testResolveMandatoryClass
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Integer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveMandatoryClassType ()
specifier|public
name|void
name|testResolveMandatoryClassType
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|Integer
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveMandatorySimpleClassType ()
specifier|public
name|void
name|testResolveMandatorySimpleClassType
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|Byte
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"Byte"
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|clazz
operator|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Byte"
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|Long
argument_list|>
name|clazz2
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"Long"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz2
argument_list|)
expr_stmt|;
name|clazz2
operator|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Long"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clazz2
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|String
argument_list|>
name|clazz3
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"String"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz3
argument_list|)
expr_stmt|;
name|clazz3
operator|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.String"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clazz3
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|Byte
index|[]
argument_list|>
name|clazz4
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"Byte[]"
argument_list|,
name|Byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz4
argument_list|)
expr_stmt|;
name|clazz4
operator|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Byte[]"
argument_list|,
name|Byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clazz4
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|clazz5
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"Object[]"
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz5
argument_list|)
expr_stmt|;
name|clazz5
operator|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Object[]"
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clazz5
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|String
index|[]
argument_list|>
name|clazz6
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"String[]"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz6
argument_list|)
expr_stmt|;
name|clazz6
operator|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.String[]"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clazz6
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveMandatoryClassClassLoader ()
specifier|public
name|void
name|testResolveMandatoryClassClassLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|DefaultClassResolverTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveMandatoryClassClassLoaderType ()
specifier|public
name|void
name|testResolveMandatoryClassClassLoaderType
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|Integer
argument_list|>
name|clazz
init|=
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|DefaultClassResolverTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveMandatoryClassNotFound ()
specifier|public
name|void
name|testResolveMandatoryClassNotFound
parameter_list|()
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|resolver
operator|.
name|resolveMandatoryClass
argument_list|(
literal|"com.FooBar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testLoadResourceAsUri ()
specifier|public
name|void
name|testLoadResourceAsUri
parameter_list|()
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|resolver
operator|.
name|loadResourceAsURL
argument_list|(
literal|"log4j.properties"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadResourceAsStream ()
specifier|public
name|void
name|testLoadResourceAsStream
parameter_list|()
block|{
name|DefaultClassResolver
name|resolver
init|=
operator|new
name|DefaultClassResolver
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
literal|"log4j.properties"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

