begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_comment
comment|/**  * Tests the lazy loading property of the camel context. The default behavior is to  * load all of the type converters up front. When the lazy load property is enabled  * on the context, the loading will be deferred until the converters are accessed.  */
end_comment

begin_class
DECL|class|DefaultCamelContextLazyLoadTypeConvertersTest
specifier|public
class|class
name|DefaultCamelContextLazyLoadTypeConvertersTest
extends|extends
name|TestSupport
block|{
DECL|field|context
specifier|private
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testLazyLoadDefault ()
specifier|public
name|void
name|testLazyLoadDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"Default setting should have been true"
argument_list|,
name|context
operator|.
name|isLazyLoadTypeConverters
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testConvertLoadUpFront ()
specifier|public
name|void
name|testConvertLoadUpFront
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setLazyLoadTypeConverters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doConvertTest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testConvertLazyLoad ()
specifier|public
name|void
name|testConvertLazyLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setLazyLoadTypeConverters
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doConvertTest
argument_list|()
expr_stmt|;
block|}
DECL|method|doConvertTest ()
specifier|private
name|void
name|doConvertTest
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|convert
argument_list|()
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|convert
argument_list|()
expr_stmt|;
block|}
DECL|method|convert ()
specifier|private
name|void
name|convert
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeConverter
name|converter
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
name|Integer
name|value
init|=
name|converter
operator|.
name|convertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"1000"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Converted to Integer"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|converter
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Converted to String"
argument_list|,
literal|"1000"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

