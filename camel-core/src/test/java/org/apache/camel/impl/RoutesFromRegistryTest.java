begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinitionHelper
operator|.
name|from
import|;
end_import

begin_class
DECL|class|RoutesFromRegistryTest
specifier|public
class|class
name|RoutesFromRegistryTest
extends|extends
name|TestSupport
block|{
DECL|method|testRoutes ()
specifier|public
name|void
name|testRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleRegistry
name|registry
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"start"
argument_list|,
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stop"
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"begin"
argument_list|,
name|from
argument_list|(
literal|"direct:begin"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
argument_list|)
expr_stmt|;
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|registry
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|Route
name|start
init|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"start"
argument_list|,
name|start
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Route
name|begin
init|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"begin"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|begin
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"begin"
argument_list|,
name|begin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:stop"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:stop"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:end"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:end"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"begin"
argument_list|)
expr_stmt|;
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:begin"
argument_list|,
literal|"begin"
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testUpdateRoutes ()
specifier|public
name|void
name|testUpdateRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleRegistry
name|registry
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"start"
argument_list|,
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stop"
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"begin"
argument_list|,
name|from
argument_list|(
literal|"direct:begin"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
argument_list|)
expr_stmt|;
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|registry
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|Route
name|start
init|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"start"
argument_list|,
name|start
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Route
name|begin
init|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"begin"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|begin
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"begin"
argument_list|,
name|begin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
name|from
argument_list|(
literal|"direct:test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|start
operator|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|Route
name|test
init|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|test
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

