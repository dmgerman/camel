begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServicePoolAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServicePool
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|CamelContextSharedProducerServicePoolTest
specifier|public
class|class
name|CamelContextSharedProducerServicePoolTest
extends|extends
name|ContextTestSupport
block|{
DECL|class|MyProducer
specifier|private
specifier|static
class|class
name|MyProducer
extends|extends
name|DefaultProducer
implements|implements
name|ServicePoolAware
block|{
DECL|field|start
specifier|private
name|boolean
name|start
decl_stmt|;
DECL|field|stop
specifier|private
name|boolean
name|stop
decl_stmt|;
DECL|method|MyProducer (Endpoint endpoint)
name|MyProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be started twice"
argument_list|,
literal|false
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be stopped twice"
argument_list|,
literal|false
argument_list|,
name|stop
argument_list|)
expr_stmt|;
name|stop
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSharedProducerServicePool ()
specifier|public
name|void
name|testSharedProducerServicePool
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the default capacity
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|context
operator|.
name|getProducerServicePool
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// change it
name|context
operator|.
name|getProducerServicePool
argument_list|()
operator|.
name|setCapacity
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|context
operator|.
name|getProducerServicePool
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSharedProducerServicePoolHitMax ()
specifier|public
name|void
name|testSharedProducerServicePoolHitMax
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the default capacity
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|context
operator|.
name|getProducerServicePool
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// change it
name|ServicePool
argument_list|<
name|Endpoint
argument_list|,
name|Producer
argument_list|>
name|pool
init|=
name|context
operator|.
name|getProducerServicePool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|setCapacity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pool
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:foo"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|pool
operator|.
name|acquire
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
operator|new
name|MyProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer
operator|=
name|pool
operator|.
name|addAndAcquire
argument_list|(
name|endpoint
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Producer
name|producer2
init|=
operator|new
name|MyProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer2
operator|=
name|pool
operator|.
name|addAndAcquire
argument_list|(
name|endpoint
argument_list|,
name|producer2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Producer
name|producer3
init|=
operator|new
name|MyProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|producer3
operator|=
name|pool
operator|.
name|addAndAcquire
argument_list|(
name|endpoint
argument_list|,
name|producer3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|endpoint
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|endpoint
argument_list|,
name|producer2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|endpoint
argument_list|,
name|producer3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Producer
name|producer4
init|=
operator|new
name|MyProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
try|try
block|{
name|producer4
operator|=
name|pool
operator|.
name|addAndAcquire
argument_list|(
name|endpoint
argument_list|,
name|producer4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Queue full"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

