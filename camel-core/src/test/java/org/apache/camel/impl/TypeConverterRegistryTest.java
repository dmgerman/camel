begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|TypeConverterRegistryTest
specifier|public
class|class
name|TypeConverterRegistryTest
extends|extends
name|TestCase
block|{
DECL|method|testDefaultTypeConverterRegistry ()
specifier|public
name|void
name|testDefaultTypeConverterRegistry
parameter_list|()
block|{
name|DefaultCamelContext
name|ctx
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ctx
operator|.
name|getTypeConverterRegistry
argument_list|()
argument_list|)
expr_stmt|;
comment|// file to inputstream is a default converter in Camel
name|TypeConverter
name|tc
init|=
name|ctx
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddTypeConverter ()
specifier|public
name|void
name|testAddTypeConverter
parameter_list|()
block|{
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
comment|// START SNIPPET: e1
comment|// add our own type converter manually that converts from String -> MyOrder using MyOrderTypeConverter
name|context
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|addTypeConverter
argument_list|(
name|MyOrder
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
operator|new
name|MyOrderTypeConverter
argument_list|()
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e1
comment|// START SNIPPET: e3
name|MyOrder
name|order
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|MyOrder
operator|.
name|class
argument_list|,
literal|"123"
argument_list|)
decl_stmt|;
comment|// END SNIPPET: e3
name|assertNotNull
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|order
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyOrder
specifier|private
class|class
name|MyOrder
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (int id)
specifier|public
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
block|}
comment|// START SNIPPET: e2
DECL|class|MyOrderTypeConverter
specifier|private
class|class
name|MyOrderTypeConverter
implements|implements
name|TypeConverter
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertTo (Class<T> type, Object value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|convertTo
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// converter from value to the MyOrder bean
name|MyOrder
name|order
init|=
operator|new
name|MyOrder
argument_list|()
decl_stmt|;
name|order
operator|.
name|setId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|order
return|;
block|}
DECL|method|convertTo (Class<T> type, Exchange exchange, Object value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|convertTo
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// this method with the Exchange parameter will be preferd by Camel to invoke
comment|// this allows you to fetch information from the exchange during convertions
comment|// such as an encoding parameter or the likes
return|return
name|convertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|mandatoryConvertTo (Class<T> type, Object value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|mandatoryConvertTo
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|convertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|mandatoryConvertTo (Class<T> type, Exchange exchange, Object value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|mandatoryConvertTo
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|convertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
comment|// END SNIPPET: e2
block|}
end_class

end_unit

