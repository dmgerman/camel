begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|SedaComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|SedaEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests the use of {@link ComponentConfiguration} both from the URI string approach or for creating and mutating Endpoint instances  * with both regular Components/Endpoints and {@link UriEndpointComponent} instances which have Endpoints annotated  * with {@link org.apache.camel.spi.UriEndpoint}, {@link org.apache.camel.spi.UriParam} and {@link org.apache.camel.spi.UriParams}  */
end_comment

begin_class
DECL|class|ComponentConfigurationTest
specifier|public
class|class
name|ComponentConfigurationTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ComponentConfigurationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Before
DECL|method|createContext ()
specifier|public
name|void
name|createContext
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
literal|"cheese"
argument_list|,
operator|new
name|NonUriComponent
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// so that TypeConverters are available
block|}
annotation|@
name|After
DECL|method|destroyContext ()
specifier|public
name|void
name|destroyContext
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Show we can create a URI from the base URI and the underlying query parameter values      */
annotation|@
name|Test
DECL|method|testCreateUriStringFromParameters ()
specifier|public
name|void
name|testCreateUriStringFromParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"seda"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// configure the base URI properties
name|configuration
operator|.
name|setBaseUri
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|// lets try set and get a valid parameter
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"size"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|String
name|uriString
init|=
name|configuration
operator|.
name|getUriString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"uriString"
argument_list|,
literal|"foo?concurrentConsumers=5&size=1000"
argument_list|,
name|uriString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Show we can create a URI from the base URI and the underlying query parameter values      * on any endpoint (even if its not a {@link UriEndpointComponent})      */
annotation|@
name|Test
DECL|method|testCreateUriStringFromParametersOnDefaultComponent ()
specifier|public
name|void
name|testCreateUriStringFromParametersOnDefaultComponent
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"cheese"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// configure the base URI properties
name|configuration
operator|.
name|setBaseUri
argument_list|(
literal|"somePath"
argument_list|)
expr_stmt|;
comment|// lets try set and get a valid parameter
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"foo"
argument_list|,
literal|"something"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"bar"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|String
name|uriString
init|=
name|configuration
operator|.
name|getUriString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"uriString"
argument_list|,
literal|"somePath?bar=123&foo=something"
argument_list|,
name|uriString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that parameters are strictly typed on {@link UriEndpointComponent}s      */
annotation|@
name|Test
DECL|method|testSetParametersFromUriString ()
specifier|public
name|void
name|testSetParametersFromUriString
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"seda"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// configure the uri and query parameters
name|configuration
operator|.
name|setUriString
argument_list|(
literal|"foo?concurrentConsumers=5&size=1000"
argument_list|)
expr_stmt|;
comment|// notice the parameters are all correctly typed due to the use of a UriEndpointComponent
comment|// and the associated @UriEndpoint / @UriParam annotations
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"concurrentConsumers"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|1000
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setUriString
argument_list|(
literal|"foo?concurrentConsumers=9&size=2000"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|9
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"concurrentConsumers"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|2000
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that parameters can be used on non-{@link UriEndpointComponent} implementations      * but that their types tend to be String until we try to create an Endpoint      */
annotation|@
name|Test
DECL|method|testSetParametersFromUriStringOnDefaultComponent ()
specifier|public
name|void
name|testSetParametersFromUriStringOnDefaultComponent
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"cheese"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// configure the uri and query parameters
name|configuration
operator|.
name|setUriString
argument_list|(
literal|"somePath?foo=something&bar=123"
argument_list|)
expr_stmt|;
comment|// notice the parameters are all Strings since we don't use UriEndpointComponent
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|"something"
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|"123"
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setUriString
argument_list|(
literal|"somePath?foo=another&bar=456"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|"another"
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|"456"
argument_list|,
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Use the {@link ComponentConfiguration}, set some parameters then lets turn it into an endpoint      */
annotation|@
name|Test
DECL|method|testCreateNewSedaUriEndpoint ()
specifier|public
name|void
name|testCreateNewSedaUriEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"seda"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// configure the base URI properties
name|configuration
operator|.
name|setBaseUri
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|// lets try set and get a valid parameter
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"size"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// lets try set an invalid parameter
try|try
block|{
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"doesNotExist"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have got InvalidPropertyException thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPropertyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|SedaEndpoint
name|endpoint
init|=
name|TestSupport
operator|.
name|assertIsInstanceOf
argument_list|(
name|SedaEndpoint
operator|.
name|class
argument_list|,
name|configuration
operator|.
name|createEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|,
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|1000
argument_list|,
name|endpoint
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint uri"
argument_list|,
literal|"foo?concurrentConsumers=5&size=1000"
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets try configure a parameter
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"concurrentConsumers"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|6
argument_list|,
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets try set an invalid parameter
try|try
block|{
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"doesNotExist"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have got InvalidPropertyException thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPropertyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateNewDefaultComponentEndpoint ()
specifier|public
name|void
name|testCreateNewDefaultComponentEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"cheese"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// configure the base URI properties
name|configuration
operator|.
name|setBaseUri
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
comment|// lets try set and get a valid parameter
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|NonUriEndpoint
name|endpoint
init|=
name|TestSupport
operator|.
name|assertIsInstanceOf
argument_list|(
name|NonUriEndpoint
operator|.
name|class
argument_list|,
name|configuration
operator|.
name|createEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|,
name|endpoint
operator|.
name|getFoo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|,
name|endpoint
operator|.
name|getBar
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created endpoint "
operator|+
name|endpoint
operator|+
literal|" on URI "
operator|+
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets try configure a parameter
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"bar"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|6
argument_list|,
name|endpoint
operator|.
name|getBar
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets try configure an invalid parameter
try|try
block|{
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"doesNotExist"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have got InvalidPropertyException thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPropertyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|ComponentConfiguration
name|badConfiguration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|badConfiguration
operator|.
name|setBaseUri
argument_list|(
name|configuration
operator|.
name|getBaseUri
argument_list|()
argument_list|)
expr_stmt|;
name|badConfiguration
operator|.
name|setParameters
argument_list|(
name|configuration
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets try set an invalid parameter on a configuration
comment|// there is no way to validate on non UriEndpoint unless the endpoint
comment|// creates its own configuration object so this always works...
name|badConfiguration
operator|.
name|setParameter
argument_list|(
literal|"doesNotExist"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// however it fails if we now try create an
try|try
block|{
name|badConfiguration
operator|.
name|createEndpoint
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have got ResolveEndpointFailedException thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResolveEndpointFailedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Shows we can introspect a {@link UriEndpointComponent} and find all the available parameters      * along with their types and {@link ParameterConfiguration}      */
annotation|@
name|Test
DECL|method|testIntrospectSedaEndpointParameters ()
specifier|public
name|void
name|testIntrospectSedaEndpointParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"seda"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|parameterMap
init|=
name|configuration
operator|.
name|getParameterConfigurationMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"getParameterConfigurationMap() should not be empty!"
argument_list|,
operator|!
name|parameterMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ParameterConfiguration
name|concurrentConsumersConfig
init|=
name|parameterMap
operator|.
name|get
argument_list|(
literal|"concurrentConsumers"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parameterMap[concurrentConsumers] should not be null!"
argument_list|,
name|concurrentConsumersConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumersConfig.getName()"
argument_list|,
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumersConfig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumersConfig.getParameterType()"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|concurrentConsumersConfig
operator|.
name|getParameterType
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} has has configuration properties {}"
argument_list|,
name|component
argument_list|,
name|parameterMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows we can introspect the parameters of a DefaultComponent (i.e. a non {@link UriEndpointComponent})      * though we only get to introspect the parameter values from teh current configuration      */
annotation|@
name|Test
DECL|method|testIntrospectDefaultComponentParameters ()
specifier|public
name|void
name|testIntrospectDefaultComponentParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"cheese"
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a ComponentConfiguration for component "
operator|+
name|component
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|parameterMap
init|=
name|configuration
operator|.
name|getParameterConfigurationMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"getParameterConfigurationMap() should be empty as we have no parameters yet"
argument_list|,
name|parameterMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// configure the uri and query parameters
name|configuration
operator|.
name|setUriString
argument_list|(
literal|"somePath?foo=something&bar=123"
argument_list|)
expr_stmt|;
name|parameterMap
operator|=
name|configuration
operator|.
name|getParameterConfigurationMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getParameterConfigurationMap() size"
argument_list|,
literal|2
argument_list|,
name|parameterMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ParameterConfiguration
name|barConfiguration
init|=
name|configuration
operator|.
name|getParameterConfiguration
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"should hav a configuration for 'bar'"
argument_list|,
name|barConfiguration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barConfiguration.getName()"
argument_list|,
literal|"bar"
argument_list|,
name|barConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barConfiguration.getParameterType()"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|barConfiguration
operator|.
name|getParameterType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows how we can use the configuration to get and set parameters directly on the endpoint      * for a {@link UriEndpointComponent}      */
annotation|@
name|Test
DECL|method|testConfigureAnExistingSedaEndpoint ()
specifier|public
name|void
name|testConfigureAnExistingSedaEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|SedaEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"seda:cheese?concurrentConsumers=5"
argument_list|,
name|SedaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|SedaComponent
name|component
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|,
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|5
argument_list|,
name|configuration
operator|.
name|getEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"concurrentConsumers"
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets try set and get some valid parameters
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"concurrentConsumers"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Object
name|concurrentConsumers
init|=
name|configuration
operator|.
name|getEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"concurrentConsumers"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.concurrentConsumers"
argument_list|,
literal|10
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"size"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|Object
name|size
init|=
name|configuration
operator|.
name|getEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"size"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.size"
argument_list|,
literal|1000
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// lets try set an invalid parameter
try|try
block|{
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"doesNotExist"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have got InvalidPropertyException thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPropertyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Shows how we can use the configuration to get and set parameters directly on the endpoint      * which is typesafe and performs validation even if the component is not a {@link UriEndpointComponent}      */
annotation|@
name|Test
DECL|method|testConfigureAnExistingDefaultEndpoint ()
specifier|public
name|void
name|testConfigureAnExistingDefaultEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|NonUriEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cheese:somePath?bar=123&foo=something"
argument_list|,
name|NonUriEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|123
argument_list|,
name|endpoint
operator|.
name|getBar
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|123
argument_list|,
name|configuration
operator|.
name|getEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets try set and get some valid parameters
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"bar"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Object
name|bar
init|=
name|configuration
operator|.
name|getEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.bar"
argument_list|,
literal|10
argument_list|,
name|bar
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"foo"
argument_list|,
literal|"anotherThing"
argument_list|)
expr_stmt|;
name|Object
name|foo
init|=
name|configuration
operator|.
name|getEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.foo"
argument_list|,
literal|"anotherThing"
argument_list|,
name|foo
argument_list|)
expr_stmt|;
comment|// lets try set an invalid parameter
try|try
block|{
name|configuration
operator|.
name|setEndpointParameter
argument_list|(
name|endpoint
argument_list|,
literal|"doesNotExist"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have got InvalidPropertyException thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPropertyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NonUriComponent
specifier|public
specifier|static
class|class
name|NonUriComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|NonUriEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|NonUriEndpoint
specifier|public
specifier|static
class|class
name|NonUriEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|foo
specifier|private
name|String
name|foo
decl_stmt|;
DECL|field|bar
specifier|private
name|int
name|bar
decl_stmt|;
DECL|method|NonUriEndpoint (String uri, NonUriComponent component)
specifier|public
name|NonUriEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|NonUriComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|getBar ()
specifier|public
name|int
name|getBar
parameter_list|()
block|{
return|return
name|bar
return|;
block|}
DECL|method|setBar (int bar)
specifier|public
name|void
name|setBar
parameter_list|(
name|int
name|bar
parameter_list|)
block|{
name|this
operator|.
name|bar
operator|=
name|bar
expr_stmt|;
block|}
DECL|method|getFoo ()
specifier|public
name|String
name|getFoo
parameter_list|()
block|{
return|return
name|foo
return|;
block|}
DECL|method|setFoo (String foo)
specifier|public
name|void
name|setFoo
parameter_list|(
name|String
name|foo
parameter_list|)
block|{
name|this
operator|.
name|foo
operator|=
name|foo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

