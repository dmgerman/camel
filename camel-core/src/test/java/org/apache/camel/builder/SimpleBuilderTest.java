begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|SimpleBuilderTest
specifier|public
class|class
name|SimpleBuilderTest
extends|extends
name|TestSupport
block|{
DECL|field|exchange
specifier|protected
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testPredicate ()
specifier|public
name|void
name|testPredicate
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${body} == 'foo'"
argument_list|)
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${body} == 'bar'"
argument_list|)
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpression ()
specifier|public
name|void
name|testExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${body}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cheese}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatExpression ()
specifier|public
name|void
name|testFormatExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"head"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|SimpleBuilder
operator|.
name|simpleF
argument_list|(
literal|"${header.%s}"
argument_list|,
literal|"head"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cheese}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormatExpressionWithResultType ()
specifier|public
name|void
name|testFormatExpressionWithResultType
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"head"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|SimpleBuilder
operator|.
name|simpleF
argument_list|(
literal|"${header.%s}"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
literal|"head"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResultType ()
specifier|public
name|void
name|testResultType
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"cool"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${body}"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// error during conversion
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${body}"
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TypeConversionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cool}"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cool}"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// not possible
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cool}"
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cool}"
argument_list|)
operator|.
name|resultType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cool}"
argument_list|)
operator|.
name|resultType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// not possible
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.cool}"
argument_list|)
operator|.
name|resultType
argument_list|(
name|int
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be convertable to integers
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"11"
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexAllWithPlaceHolders ()
specifier|public
name|void
name|testRegexAllWithPlaceHolders
parameter_list|()
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"activateUrl"
argument_list|,
literal|"http://some/rest/api/(id)/activate"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://some/rest/api/12/activate"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.activateUrl.replaceAll(\"\\(id\\)\",\"12\")}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//passes when contains { only
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"activateUrl"
argument_list|,
literal|"http://some/rest/api/{id/activate"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://some/rest/api/12/activate"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.activateUrl.replaceAll(\"\\{id\",\"12\")}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|replaced
init|=
literal|"http://some/rest/api/{id}/activate"
operator|.
name|replaceAll
argument_list|(
literal|"\\{id\\}"
argument_list|,
literal|"12"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://some/rest/api/12/activate"
argument_list|,
name|replaced
argument_list|)
expr_stmt|;
comment|//passes when contains { }
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"activateUrl"
argument_list|,
literal|"http://some/rest/api/{id}/activate"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://some/rest/api/12/activate"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.activateUrl.replaceAll(\"\\{id\\}\",\"12\")}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//passes when contains { } and another ${body} function
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"12"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://some/rest/api/12/activate"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.activateUrl.replaceAll(\"\\{id\\}\",\"${body}\")}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//passes when } is escaped with \}
name|assertEquals
argument_list|(
literal|"http://some/rest/api/{}/activate"
argument_list|,
name|SimpleBuilder
operator|.
name|simple
argument_list|(
literal|"${header.activateUrl.replaceAll(\"\\{id\\}\",\"{\\}\")}"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

