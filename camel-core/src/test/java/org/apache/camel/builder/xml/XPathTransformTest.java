begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * @version  */
end_comment

begin_class
DECL|class|XPathTransformTest
specifier|public
class|class
name|XPathTransformTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|testXPathTransform ()
specifier|public
name|void
name|testXPathTransform
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<root><firstname>Apache</firstname><lastname>Camel</lastname></root>"
argument_list|)
decl_stmt|;
name|NodeList
name|list
init|=
name|XPathBuilder
operator|.
name|xpath
argument_list|(
literal|"/root/firstname"
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|doc
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|setTextContent
argument_list|(
literal|"Servicemix"
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<root><firstname>Servicemix</firstname><lastname>Camel</lastname></root>"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testXPathNamespaceLoggingEnabledJavaDSL ()
specifier|public
name|void
name|testXPathNamespaceLoggingEnabledJavaDSL
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|l
init|=
name|mock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|l
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"<aRoot xmlns:nsa=\"http://namespacec.net\"><nsa:a xmlns:nsa=\"http://namespacea.net\">Hello|there|Camel</nsa:a>"
operator|+
literal|"<nsb:a xmlns:nsb=\"http://namespaceb.net\">Hello|there|Camel</nsb:a><nsb:a xmlns:nsb=\"http://namespaceb.net\">Hello|there|Camel</nsb:a>"
operator|+
literal|"<a xmlns=\"http://defaultNamespace.net\">Hello|there|Camel</a><a>Hello|there|Camel</a></aRoot>"
decl_stmt|;
name|Document
name|doc
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|Field
name|logField
init|=
name|XPathBuilder
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"LOG"
argument_list|)
decl_stmt|;
name|logField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|modifiers
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiers
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiers
operator|.
name|setInt
argument_list|(
name|logField
argument_list|,
name|logField
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|logField
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|NodeList
name|list
init|=
name|XPathBuilder
operator|.
name|xpath
argument_list|(
literal|"//*"
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
operator|.
name|logNamespaces
argument_list|()
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|doc
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|l
argument_list|)
operator|.
name|info
argument_list|(
name|argThat
argument_list|(
name|containsString
argument_list|(
literal|"Namespaces discovered in message"
argument_list|)
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXPathNamespaceLoggingDisabledJavaDSL ()
specifier|public
name|void
name|testXPathNamespaceLoggingDisabledJavaDSL
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|l
init|=
name|mock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|l
operator|.
name|isInfoEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"<aRoot xmlns:nsa=\"http://namespacec.net\"><nsa:a xmlns:nsa=\"http://namespacea.net\">Hello|there|Camel</nsa:a>"
operator|+
literal|"<nsb:a xmlns:nsb=\"http://namespaceb.net\">Hello|there|Camel</nsb:a><nsb:a xmlns:nsb=\"http://namespaceb.net\">Hello|there|Camel</nsb:a>"
operator|+
literal|"<a xmlns=\"http://defaultNamespace.net\">Hello|there|Camel</a><a>Hello|there|Camel</a></aRoot>"
decl_stmt|;
name|Document
name|doc
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|Field
name|logField
init|=
name|XPathBuilder
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"LOG"
argument_list|)
decl_stmt|;
name|logField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|modifiers
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiers
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiers
operator|.
name|setInt
argument_list|(
name|logField
argument_list|,
name|logField
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|logField
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|NodeList
name|list
init|=
name|XPathBuilder
operator|.
name|xpath
argument_list|(
literal|"//*"
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|doc
argument_list|,
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|l
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|info
argument_list|(
name|argThat
argument_list|(
name|containsString
argument_list|(
literal|"Namespaces discovered in message"
argument_list|)
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

