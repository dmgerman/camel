begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|ErrorListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|XsltTestErrorListenerTest
specifier|public
class|class
name|XsltTestErrorListenerTest
extends|extends
name|Assert
block|{
DECL|field|xsltBuilder
specifier|private
name|XsltBuilder
name|xsltBuilder
init|=
operator|new
name|XsltBuilder
argument_list|()
decl_stmt|;
DECL|field|errorListener
specifier|private
name|ErrorListener
name|errorListener
init|=
name|mock
argument_list|(
name|ErrorListener
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testErrorListener ()
specifier|public
name|void
name|testErrorListener
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Xalan transformer cannot work as expected, so we just skip the test
if|if
condition|(
name|xsltBuilder
operator|.
name|getConverter
argument_list|()
operator|.
name|getTransformerFactory
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.apache.xalan"
argument_list|)
condition|)
block|{
return|return;
block|}
name|URL
name|styleSheet
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"example-with-errors.xsl"
argument_list|)
decl_stmt|;
try|try
block|{
name|xsltBuilder
operator|.
name|setErrorListener
argument_list|(
name|errorListener
argument_list|)
expr_stmt|;
name|xsltBuilder
operator|.
name|setTransformerURL
argument_list|(
name|styleSheet
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|verify
argument_list|(
name|errorListener
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|error
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|errorListener
argument_list|)
operator|.
name|fatalError
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

