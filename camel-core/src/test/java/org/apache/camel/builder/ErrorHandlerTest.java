begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|LoggingErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|SendProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DeadLetterChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|ErrorHandlerTest
specifier|public
class|class
name|ErrorHandlerTest
extends|extends
name|TestSupport
block|{
DECL|method|testOverloadingTheDefaultErrorHandler ()
specifier|public
name|void
name|testOverloadingTheDefaultErrorHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e1
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder1
init|=
operator|new
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|errorHandler
argument_list|(
name|loggingErrorHandler
argument_list|(
literal|"FOO.BAR"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"queue:a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"queue:b"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// END SNIPPET: e1
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder
init|=
name|builder1
decl_stmt|;
name|Map
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|routeMap
init|=
name|builder
operator|.
name|getRouteMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
argument_list|>
name|routes
init|=
name|routeMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number routes created"
argument_list|,
literal|1
argument_list|,
name|routes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|route
range|:
name|routes
control|)
block|{
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|key
init|=
name|route
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"From endpoint"
argument_list|,
literal|"queue:a"
argument_list|,
name|key
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
name|route
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LoggingErrorHandler
name|loggingProcessor
init|=
name|assertIsInstanceOf
argument_list|(
name|LoggingErrorHandler
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
block|}
block|}
DECL|method|testOverloadingTheHandlerOnASingleRoute ()
specifier|public
name|void
name|testOverloadingTheHandlerOnASingleRoute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e2
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder1
init|=
operator|new
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"queue:a"
argument_list|)
operator|.
name|errorHandler
argument_list|(
name|loggingErrorHandler
argument_list|(
literal|"FOO.BAR"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"queue:b"
argument_list|)
expr_stmt|;
comment|// this route will use the default error handler, DeadLetterChannel
name|from
argument_list|(
literal|"queue:b"
argument_list|)
operator|.
name|to
argument_list|(
literal|"queue:c"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// END SNIPPET: e2
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder
init|=
name|builder1
decl_stmt|;
name|Map
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|routeMap
init|=
name|builder
operator|.
name|getRouteMap
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|routeMap
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
argument_list|>
name|routes
init|=
name|routeMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number routes created"
argument_list|,
literal|2
argument_list|,
name|routes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|route
range|:
name|routes
control|)
block|{
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|key
init|=
name|route
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|endpointUri
init|=
name|key
operator|.
name|getEndpointUri
argument_list|()
decl_stmt|;
name|Processor
name|processor
init|=
name|route
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointUri
operator|.
name|equals
argument_list|(
literal|"queue:a"
argument_list|)
condition|)
block|{
name|LoggingErrorHandler
name|loggingProcessor
init|=
name|assertIsInstanceOf
argument_list|(
name|LoggingErrorHandler
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|Processor
name|outputProcessor
init|=
name|loggingProcessor
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|SendProcessor
name|sendProcessor
init|=
name|assertIsInstanceOf
argument_list|(
name|SendProcessor
operator|.
name|class
argument_list|,
name|outputProcessor
argument_list|)
decl_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"From endpoint"
argument_list|,
literal|"queue:b"
argument_list|,
name|endpointUri
argument_list|)
expr_stmt|;
name|DeadLetterChannel
name|deadLetterChannel
init|=
name|assertIsInstanceOf
argument_list|(
name|DeadLetterChannel
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|Processor
name|outputProcessor
init|=
name|deadLetterChannel
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|SendProcessor
name|sendProcessor
init|=
name|assertIsInstanceOf
argument_list|(
name|SendProcessor
operator|.
name|class
argument_list|,
name|outputProcessor
argument_list|)
decl_stmt|;
block|}
block|}
block|}
DECL|method|testConfigureDeadLetterChannel ()
specifier|public
name|void
name|testConfigureDeadLetterChannel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e3
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder1
init|=
operator|new
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"queue:errors"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"queue:a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"queue:b"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// END SNIPPET: e3
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder
init|=
name|builder1
decl_stmt|;
name|Map
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|routeMap
init|=
name|builder
operator|.
name|getRouteMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
argument_list|>
name|routes
init|=
name|routeMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number routes created"
argument_list|,
literal|1
argument_list|,
name|routes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|route
range|:
name|routes
control|)
block|{
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|key
init|=
name|route
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"From endpoint"
argument_list|,
literal|"queue:a"
argument_list|,
name|key
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
name|route
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DeadLetterChannel
name|deadLetterChannel
init|=
name|assertIsInstanceOf
argument_list|(
name|DeadLetterChannel
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|Endpoint
name|deadLetterEndpoint
init|=
name|assertIsInstanceOf
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|deadLetterChannel
operator|.
name|getDeadLetter
argument_list|()
argument_list|)
decl_stmt|;
name|assertEndpointUri
argument_list|(
name|deadLetterEndpoint
argument_list|,
literal|"queue:errors"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConfigureDeadLetterChannelWithCustomRedeliveryPolicy ()
specifier|public
name|void
name|testConfigureDeadLetterChannelWithCustomRedeliveryPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e4
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder1
init|=
operator|new
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"queue:errors"
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
literal|2
argument_list|)
operator|.
name|useExponentialBackOff
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"queue:a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"queue:b"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// END SNIPPET: e4
name|RouteBuilder
argument_list|<
name|Exchange
argument_list|>
name|builder
init|=
name|builder1
decl_stmt|;
name|Map
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|routeMap
init|=
name|builder
operator|.
name|getRouteMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
argument_list|>
name|routes
init|=
name|routeMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number routes created"
argument_list|,
literal|1
argument_list|,
name|routes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
argument_list|,
name|Processor
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|route
range|:
name|routes
control|)
block|{
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|key
init|=
name|route
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"From endpoint"
argument_list|,
literal|"queue:a"
argument_list|,
name|key
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
name|route
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DeadLetterChannel
name|deadLetterChannel
init|=
name|assertIsInstanceOf
argument_list|(
name|DeadLetterChannel
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|Endpoint
name|deadLetterEndpoint
init|=
name|assertIsInstanceOf
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|deadLetterChannel
operator|.
name|getDeadLetter
argument_list|()
argument_list|)
decl_stmt|;
name|assertEndpointUri
argument_list|(
name|deadLetterEndpoint
argument_list|,
literal|"queue:errors"
argument_list|)
expr_stmt|;
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
name|deadLetterChannel
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getMaximumRedeliveries()"
argument_list|,
literal|2
argument_list|,
name|redeliveryPolicy
operator|.
name|getMaximumRedeliveries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"isUseExponentialBackOff()"
argument_list|,
literal|true
argument_list|,
name|redeliveryPolicy
operator|.
name|isUseExponentialBackOff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

