begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|PredicateBinaryCoerceTypeTest
specifier|public
class|class
name|PredicateBinaryCoerceTypeTest
extends|extends
name|TestSupport
block|{
DECL|field|exchange
specifier|protected
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|testIsNull ()
specifier|public
name|void
name|testIsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isNull
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isNull
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsNotNull ()
specifier|public
name|void
name|testIsNotNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isNotNull
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isNotNull
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqual ()
specifier|public
name|void
name|testEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the type and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualWithNull ()
specifier|public
name|void
name|testEqualWithNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the type and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// try two null values
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqual ()
specifier|public
name|void
name|testNotEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isNotEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"333"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isNotEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualWithNull ()
specifier|public
name|void
name|testNotEqualWithNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isNotEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the type and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isNotEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// try two null values
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isNotEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGreatherThan ()
specifier|public
name|void
name|testGreatherThan
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"200"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
decl_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThan
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThan
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the types and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"200"
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThan
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThan
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGreatherThanOrEqual ()
specifier|public
name|void
name|testGreatherThanOrEqual
parameter_list|()
throws|throws
name|Exception
block|{
comment|// greather than
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"200"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
decl_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the types and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"200"
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// equal
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the types and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLessThan ()
specifier|public
name|void
name|testLessThan
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"100"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"200"
argument_list|)
argument_list|)
decl_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThan
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThan
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the types and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"200"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThan
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThan
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLessThanOrEqual ()
specifier|public
name|void
name|testLessThanOrEqual
parameter_list|()
throws|throws
name|Exception
block|{
comment|// less than
name|Expression
name|a
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"100"
argument_list|)
decl_stmt|;
name|Expression
name|b
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"200"
argument_list|)
argument_list|)
decl_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the types and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|assertDoesNotMatch
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// equal
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the types and try again
name|a
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Hello there!"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"name"
argument_list|,
literal|"James"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"location"
argument_list|,
literal|"Islington,London,UK"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"size"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMatches (Predicate predicate)
specifier|protected
name|void
name|assertMatches
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|assertPredicateMatches
argument_list|(
name|predicate
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDoesNotMatch (Predicate predicate)
specifier|protected
name|void
name|assertDoesNotMatch
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|assertPredicateDoesNotMatch
argument_list|(
name|predicate
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

