begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_class
DECL|class|ExchangePropertyTest
specifier|public
class|class
name|ExchangePropertyTest
extends|extends
name|ExchangeTestSupport
block|{
DECL|field|P1_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|P1_NAME
init|=
literal|"org.apache.myproject.mypackage.myproperty1"
decl_stmt|;
DECL|field|P2_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|P2_NAME
init|=
literal|"org.apache.myproject.mypackage.myproperty2"
decl_stmt|;
DECL|field|exchange
specifier|protected
name|Exchange
name|exchange
decl_stmt|;
DECL|method|testExchangePropertyRegistry ()
specifier|public
name|void
name|testExchangePropertyRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
name|myProperty1
init|=
operator|new
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"myProperty1"
argument_list|,
name|P1_NAME
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty1"
argument_list|)
argument_list|,
name|myProperty1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|myProperty1
argument_list|)
expr_stmt|;
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
name|myProperty2
init|=
operator|new
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"myProperty2"
argument_list|,
name|P2_NAME
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty2"
argument_list|)
argument_list|,
name|myProperty2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|myProperty2
argument_list|)
expr_stmt|;
try|try
block|{
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
name|rejectedProperty
init|=
operator|new
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"myProperty2"
argument_list|,
name|P2_NAME
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected RuntimeCamelException to be thrown due to duplicate property "
operator|+
literal|" registration attempt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected RuntimeCamelException to be thrown due to duplicate propery "
operator|+
literal|" registration attempt"
argument_list|)
expr_stmt|;
block|}
name|ExchangeProperty
operator|.
name|deregister
argument_list|(
name|myProperty1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty1"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ExchangeProperty
operator|.
name|deregister
argument_list|(
literal|"myProperty2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty2"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testExchangePropertySetterGetter ()
specifier|public
name|void
name|testExchangePropertySetterGetter
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|()
decl_stmt|;
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
name|myProperty1
init|=
operator|new
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"myProperty1"
argument_list|,
name|P1_NAME
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExchangeProperty
argument_list|<
name|String
argument_list|>
name|myProperty2
init|=
operator|new
name|ExchangeProperty
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"myProperty2"
argument_list|,
name|P2_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|myProperty1
operator|.
name|set
argument_list|(
name|exchange
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected property value"
argument_list|,
name|myProperty1
operator|.
name|get
argument_list|(
name|exchange
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected property value"
argument_list|,
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty1"
argument_list|)
operator|.
name|get
argument_list|(
name|exchange
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|myProperty2
operator|.
name|set
argument_list|(
name|exchange
argument_list|,
literal|"camel"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected property value"
argument_list|,
name|myProperty2
operator|.
name|get
argument_list|(
name|exchange
argument_list|)
operator|.
name|equals
argument_list|(
literal|"camel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected property value"
argument_list|,
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty2"
argument_list|)
operator|.
name|get
argument_list|(
name|exchange
argument_list|)
operator|.
name|equals
argument_list|(
literal|"camel"
argument_list|)
argument_list|)
expr_stmt|;
name|ExchangeProperty
operator|.
name|deregister
argument_list|(
name|myProperty1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty1"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ExchangeProperty
operator|.
name|deregister
argument_list|(
literal|"myProperty2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty2"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testExchangePropertyTypeSafety ()
specifier|public
name|void
name|testExchangePropertyTypeSafety
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|()
decl_stmt|;
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
name|myProperty1
init|=
operator|new
name|ExchangeProperty
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"myProperty1"
argument_list|,
name|P1_NAME
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|P1_NAME
argument_list|,
literal|"camel"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RuntimeCamelException to be thrown due to property value type cast violation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
comment|// complete
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected RuntimeCamelException to be thrown due to property value type cast violation"
argument_list|)
expr_stmt|;
block|}
name|myProperty1
operator|.
name|set
argument_list|(
name|exchange
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected property value"
argument_list|,
name|myProperty1
operator|.
name|get
argument_list|(
name|exchange
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected property value"
argument_list|,
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty1"
argument_list|)
operator|.
name|get
argument_list|(
name|exchange
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ExchangeProperty
operator|.
name|deregister
argument_list|(
name|myProperty1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|get
argument_list|(
literal|"myProperty1"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExchangeProperty
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

