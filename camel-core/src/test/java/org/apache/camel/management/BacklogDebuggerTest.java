begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_class
DECL|class|BacklogDebuggerTest
specifier|public
class|class
name|BacklogDebuggerTest
extends|extends
name|ManagementTestSupport
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testBacklogDebugger ()
specifier|public
name|void
name|testBacklogDebugger
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|on
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.camel:context=localhost/camel-1,type=tracer,name=BacklogDebugger"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|Boolean
name|enabled
init|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be enabled"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// enable debugger
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"enableDebugger"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|enabled
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be enabled"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// add breakpoint at bar
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"addBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|setSleepForEmptyTest
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// add breakpoint at bar
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// the message should be ours
name|String
name|xml
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"dumpTracedMessagesAsXml"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain our body"
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain bar node"
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"<toNode>bar</toNode>"
argument_list|)
argument_list|)
expr_stmt|;
name|resetMocks
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// resume breakpoint
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"resumeBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// and no suspended anymore
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testBacklogDebuggerSuspendOnlyOneAtBreakpoint ()
specifier|public
name|void
name|testBacklogDebuggerSuspendOnlyOneAtBreakpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|on
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.camel:context=localhost/camel-1,type=tracer,name=BacklogDebugger"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|Boolean
name|enabled
init|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be enabled"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// enable debugger
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"enableDebugger"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|enabled
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be enabled"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// add breakpoint at bar
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"addBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// only one of them is suspended
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start"
argument_list|,
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start"
argument_list|,
literal|"Hello Earth"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// add breakpoint at bar
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// the message should be ours
name|String
name|xml
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"dumpTracedMessagesAsXml"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain bar node"
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"<toNode>bar</toNode>"
argument_list|)
argument_list|)
expr_stmt|;
name|resetMocks
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// resume breakpoint
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"resumeBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// and no suspended anymore
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testBacklogDebuggerConditional ()
specifier|public
name|void
name|testBacklogDebuggerConditional
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|on
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.camel:context=localhost/camel-1,type=tracer,name=BacklogDebugger"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|Boolean
name|enabled
init|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be enabled"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// enable debugger
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"enableDebugger"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|enabled
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be enabled"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// add breakpoint at bar
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"addConditionalBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|,
literal|"simple"
block|,
literal|"${body} contains 'Camel'"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// add not breakpoint at bar as condition did not match
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|resetMocks
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|setSleepForEmptyTest
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start"
argument_list|,
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// the message should be ours
name|String
name|xml
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"dumpTracedMessagesAsXml"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain our body"
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"Hello Camel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain bar node"
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"<toNode>bar</toNode>"
argument_list|)
argument_list|)
expr_stmt|;
name|resetMocks
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// resume breakpoint
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"resumeBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"bar"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// and no suspended anymore
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testBacklogDebuggerStep ()
specifier|public
name|void
name|testBacklogDebuggerStep
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|on
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.camel:context=localhost/camel-1,type=tracer,name=BacklogDebugger"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|Boolean
name|enabled
init|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be enabled"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// enable debugger
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"enableDebugger"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|enabled
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"Enabled"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be enabled"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// add breakpoint at bar
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"addBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"foo"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|setSleepForEmptyTest
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"seda:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
comment|// add breakpoint at bar
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Boolean
name|stepMode
init|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"SingleStepMode"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be in step mode"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|stepMode
argument_list|)
expr_stmt|;
comment|// step breakpoint
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"stepBreakpoint"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"foo"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
expr_stmt|;
comment|// then at bar now
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stepMode
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"SingleStepMode"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be in step mode"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|stepMode
argument_list|)
expr_stmt|;
comment|// step
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"step"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// then at transform now
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"transform"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stepMode
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"SingleStepMode"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be in step mode"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|stepMode
argument_list|)
expr_stmt|;
comment|// step
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"step"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// then at cheese now
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cheese"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stepMode
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"SingleStepMode"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be in step mode"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|stepMode
argument_list|)
expr_stmt|;
comment|// step
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"step"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// then at result now
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"result"
argument_list|,
name|nodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stepMode
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"SingleStepMode"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be in step mode"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|stepMode
argument_list|)
expr_stmt|;
comment|// step
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"step"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// then the exchange is completed
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|mbeanServer
operator|.
name|invoke
argument_list|(
name|on
argument_list|,
literal|"getSuspendedBreakpointNodeIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stepMode
operator|=
operator|(
name|Boolean
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"SingleStepMode"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be in step mode"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|stepMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|setUseBreadcrumb
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:start?concurrentConsumers=2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:foo"
argument_list|)
operator|.
name|id
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:bar"
argument_list|)
operator|.
name|id
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
literal|"Bye World"
argument_list|)
operator|.
name|id
argument_list|(
literal|"transform"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:cheese?showExchangeId=true"
argument_list|)
operator|.
name|id
argument_list|(
literal|"cheese"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|id
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

