begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|InstrumentationAgentImpl
import|;
end_import

begin_class
DECL|class|JmxInstrumentationUsingDefaultsTest
specifier|public
class|class
name|JmxInstrumentationUsingDefaultsTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|DEFAULT_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PORT
init|=
literal|1099
decl_stmt|;
DECL|field|iAgent
specifier|protected
name|InstrumentationAgentImpl
name|iAgent
decl_stmt|;
DECL|field|domainName
specifier|protected
name|String
name|domainName
decl_stmt|;
DECL|method|enableJmx ()
specifier|protected
name|void
name|enableJmx
parameter_list|()
block|{
name|iAgent
operator|.
name|enableJmx
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|domainName
operator|=
name|InstrumentationAgentImpl
operator|.
name|DEFAULT_DOMAIN
expr_stmt|;
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|createInstrumentationAgent
argument_list|(
name|context
argument_list|,
name|DEFAULT_PORT
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createInstrumentationAgent (CamelContext context, int port)
specifier|protected
name|void
name|createInstrumentationAgent
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|iAgent
operator|=
operator|new
name|InstrumentationAgentImpl
argument_list|()
expr_stmt|;
name|iAgent
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|enableJmx
argument_list|()
expr_stmt|;
name|iAgent
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|testAgentConfiguration ()
specifier|public
name|void
name|testAgentConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|iAgent
operator|.
name|getMBeanServer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|domainName
argument_list|,
name|iAgent
operator|.
name|getMBeanServer
argument_list|()
operator|.
name|getDefaultDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMBeansRegistered ()
specifier|public
name|void
name|testMBeansRegistered
parameter_list|()
throws|throws
name|Exception
block|{
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:end"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
name|domainName
operator|+
literal|":type=Endpoints,*"
argument_list|)
decl_stmt|;
name|Set
name|s
init|=
name|iAgent
operator|.
name|getMBeanServer
argument_list|()
operator|.
name|queryNames
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

