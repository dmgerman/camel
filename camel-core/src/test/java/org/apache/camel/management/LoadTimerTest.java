begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TimerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|LoadTriplet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|TimerListenerManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
operator|.
name|await
import|;
end_import

begin_class
DECL|class|LoadTimerTest
specifier|public
class|class
name|LoadTimerTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|SAMPLES
specifier|private
specifier|static
specifier|final
name|int
name|SAMPLES
init|=
literal|2
decl_stmt|;
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testTimer ()
specifier|public
name|void
name|testTimer
parameter_list|()
throws|throws
name|Exception
block|{
name|TimerListenerManager
name|myTimer
init|=
operator|new
name|TimerListenerManager
argument_list|()
decl_stmt|;
name|myTimer
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|myTimer
operator|.
name|start
argument_list|()
expr_stmt|;
name|TestLoadAware
name|test
init|=
operator|new
name|TestLoadAware
argument_list|()
decl_stmt|;
name|myTimer
operator|.
name|addTimerListener
argument_list|(
name|test
argument_list|)
expr_stmt|;
try|try
block|{
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|untilAsserted
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertTrue
argument_list|(
name|test
operator|.
name|counter
operator|>=
name|SAMPLES
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|test
operator|.
name|load
operator|.
name|getLoad1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|load
operator|.
name|getLoad1
argument_list|()
operator|>
literal|0.0d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|load
operator|.
name|getLoad1
argument_list|()
operator|<
name|SAMPLES
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myTimer
operator|.
name|removeTimerListener
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
name|myTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|TestLoadAware
specifier|private
class|class
name|TestLoadAware
implements|implements
name|TimerListener
block|{
DECL|field|counter
specifier|volatile
name|int
name|counter
decl_stmt|;
DECL|field|load
name|LoadTriplet
name|load
init|=
operator|new
name|LoadTriplet
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onTimer ()
specifier|public
name|void
name|onTimer
parameter_list|()
block|{
name|load
operator|.
name|update
argument_list|(
operator|++
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

