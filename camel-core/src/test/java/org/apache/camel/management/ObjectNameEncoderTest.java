begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|ObjectNameEncoderTest
specifier|public
class|class
name|ObjectNameEncoderTest
extends|extends
name|TestCase
block|{
DECL|field|BEFOR_ENCODING
specifier|private
specifier|static
specifier|final
name|String
name|BEFOR_ENCODING
init|=
literal|"test:test:hello*adsfad*"
decl_stmt|;
DECL|field|AFTER_ENCODING_1
specifier|private
specifier|static
specifier|final
name|String
name|AFTER_ENCODING_1
init|=
literal|"test%3atest%3ahello%2aadsfad%2a"
decl_stmt|;
DECL|field|AFTER_ENCODING_2
specifier|private
specifier|static
specifier|final
name|String
name|AFTER_ENCODING_2
init|=
literal|"test%3atest%3ahello*adsfad*"
decl_stmt|;
DECL|method|testEncoding ()
specifier|public
name|void
name|testEncoding
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Get the wrong endcoding result"
argument_list|,
name|ObjectNameEncoder
operator|.
name|encode
argument_list|(
name|BEFOR_ENCODING
argument_list|)
argument_list|,
name|AFTER_ENCODING_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get the wrong endcoding result with ignore Wildcards"
argument_list|,
name|ObjectNameEncoder
operator|.
name|encode
argument_list|(
name|BEFOR_ENCODING
argument_list|,
literal|true
argument_list|)
argument_list|,
name|AFTER_ENCODING_2
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecoding ()
specifier|public
name|void
name|testDecoding
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Get the wrong decoding result"
argument_list|,
name|ObjectNameEncoder
operator|.
name|decode
argument_list|(
name|AFTER_ENCODING_1
argument_list|)
argument_list|,
name|BEFOR_ENCODING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get the wrong decoding result with ignore Wildcards"
argument_list|,
name|ObjectNameEncoder
operator|.
name|decode
argument_list|(
name|AFTER_ENCODING_2
argument_list|)
argument_list|,
name|BEFOR_ENCODING
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

