begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|XMLTokenExpressionIteratorCharsetTest
specifier|public
class|class
name|XMLTokenExpressionIteratorCharsetTest
extends|extends
name|TestCase
block|{
DECL|field|DATA_TEMPLATE
specifier|private
specifier|static
specifier|final
name|String
name|DATA_TEMPLATE
init|=
literal|"<?xml version=\"1.0\" encoding=\"{0}\"?>"
operator|+
literal|"<Statements xmlns=\"http://www.apache.org/xml/test\">"
operator|+
literal|"<statement>we l\u00f3ve iso-latin</statement>"
operator|+
literal|"<statement>we h\u00e4te unicode</statement>"
operator|+
literal|"</Statements>"
decl_stmt|;
DECL|field|RESULTS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|RESULTS
init|=
block|{
literal|"<statement xmlns=\"http://www.apache.org/xml/test\">we l\u00f3ve iso-latin</statement>"
block|,
literal|"<statement xmlns=\"http://www.apache.org/xml/test\">we h\u00e4te unicode</statement>"
block|}
decl_stmt|;
DECL|field|DATA_STRING
specifier|private
specifier|static
specifier|final
name|String
name|DATA_STRING
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|DATA_TEMPLATE
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
DECL|field|DATA_UTF8
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DATA_UTF8
init|=
name|getBytes
argument_list|(
name|DATA_TEMPLATE
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
DECL|field|DATA_ISOLATIN
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DATA_ISOLATIN
init|=
name|getBytes
argument_list|(
name|DATA_TEMPLATE
argument_list|,
literal|"iso-8859-1"
argument_list|)
decl_stmt|;
DECL|field|NSMAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|NSMAP
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|""
argument_list|,
literal|"http://www.apache.org/xml/test"
argument_list|)
decl_stmt|;
DECL|method|getBytes (String template, String charset)
specifier|private
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|template
parameter_list|,
name|String
name|charset
parameter_list|)
block|{
try|try
block|{
return|return
name|MessageFormat
operator|.
name|format
argument_list|(
name|template
argument_list|,
name|charset
argument_list|)
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
DECL|method|testTokenzeWithUTF8 ()
specifier|public
name|void
name|testTokenzeWithUTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLTokenExpressionIterator
name|xtei
init|=
operator|new
name|XMLTokenExpressionIterator
argument_list|(
literal|"//statement"
argument_list|,
literal|'i'
argument_list|)
decl_stmt|;
name|xtei
operator|.
name|setNamespaces
argument_list|(
name|NSMAP
argument_list|)
expr_stmt|;
name|invokeAndVerify
argument_list|(
name|xtei
operator|.
name|createIterator
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA_UTF8
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTokenizeWithISOLatin ()
specifier|public
name|void
name|testTokenizeWithISOLatin
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLTokenExpressionIterator
name|xtei
init|=
operator|new
name|XMLTokenExpressionIterator
argument_list|(
literal|"//statement"
argument_list|,
literal|'i'
argument_list|)
decl_stmt|;
name|xtei
operator|.
name|setNamespaces
argument_list|(
name|NSMAP
argument_list|)
expr_stmt|;
name|invokeAndVerify
argument_list|(
name|xtei
operator|.
name|createIterator
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|DATA_ISOLATIN
argument_list|)
argument_list|,
literal|"iso-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTokenizeWithReader ()
specifier|public
name|void
name|testTokenizeWithReader
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLTokenExpressionIterator
name|xtei
init|=
operator|new
name|XMLTokenExpressionIterator
argument_list|(
literal|"//statement"
argument_list|,
literal|'i'
argument_list|)
decl_stmt|;
name|xtei
operator|.
name|setNamespaces
argument_list|(
name|NSMAP
argument_list|)
expr_stmt|;
name|invokeAndVerify
argument_list|(
name|xtei
operator|.
name|createIterator
argument_list|(
operator|new
name|StringReader
argument_list|(
name|DATA_STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|invokeAndVerify (Iterator<?> tokenizer)
specifier|private
name|void
name|invokeAndVerify
parameter_list|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|tokenizer
parameter_list|)
throws|throws
name|IOException
throws|,
name|XMLStreamException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|token
init|=
operator|(
name|String
operator|)
name|tokenizer
operator|.
name|next
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Closeable
operator|)
name|tokenizer
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"token count"
argument_list|,
name|RESULTS
operator|.
name|length
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RESULTS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"mismatch ["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|RESULTS
index|[
name|i
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

