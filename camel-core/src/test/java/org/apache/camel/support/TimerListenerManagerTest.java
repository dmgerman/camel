begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TimerListener
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TimerListenerManagerTest
specifier|public
class|class
name|TimerListenerManagerTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|task
specifier|private
specifier|final
name|MyTask
name|task
init|=
operator|new
name|MyTask
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|testTimerListenerManager ()
specifier|public
name|void
name|testTimerListenerManager
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TimerListenerManager
name|manager
init|=
operator|new
name|TimerListenerManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addTimerListener
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|manager
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be invoked"
argument_list|,
name|task
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|manager
operator|.
name|removeTimerListener
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|class|MyTask
specifier|private
class|class
name|MyTask
implements|implements
name|TimerListener
block|{
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onTimer ()
specifier|public
name|void
name|onTimer
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|await ()
specifier|public
name|boolean
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

