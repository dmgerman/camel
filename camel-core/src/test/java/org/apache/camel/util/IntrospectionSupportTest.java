begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jndi
operator|.
name|ExampleBean
import|;
end_import

begin_comment
comment|/**  * Unit test for IntrospectionSupport   */
end_comment

begin_class
DECL|class|IntrospectionSupportTest
specifier|public
class|class
name|IntrospectionSupportTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testOverloadSetterChooseStringSetter ()
specifier|public
name|void
name|testOverloadSetterChooseStringSetter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyOverloadedBean
name|overloadedBean
init|=
operator|new
name|MyOverloadedBean
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|overloadedBean
argument_list|,
literal|"bean"
argument_list|,
literal|"James"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"James"
argument_list|,
name|overloadedBean
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverloadSetterChooseBeanSetter ()
specifier|public
name|void
name|testOverloadSetterChooseBeanSetter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyOverloadedBean
name|overloadedBean
init|=
operator|new
name|MyOverloadedBean
argument_list|()
decl_stmt|;
name|ExampleBean
name|bean
init|=
operator|new
name|ExampleBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setName
argument_list|(
literal|"Claus"
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|overloadedBean
argument_list|,
literal|"bean"
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Claus"
argument_list|,
name|overloadedBean
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverloadSetterChooseUsingTypeConverter ()
specifier|public
name|void
name|testOverloadSetterChooseUsingTypeConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyOverloadedBean
name|overloadedBean
init|=
operator|new
name|MyOverloadedBean
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
literal|"Willem"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// should use byte[] -> String type converter and call the setBean(String) setter method
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|overloadedBean
argument_list|,
literal|"bean"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Willem"
argument_list|,
name|overloadedBean
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyOverloadedBean
specifier|public
class|class
name|MyOverloadedBean
block|{
DECL|field|bean
specifier|private
name|ExampleBean
name|bean
decl_stmt|;
DECL|method|setBean (ExampleBean bean)
specifier|public
name|void
name|setBean
parameter_list|(
name|ExampleBean
name|bean
parameter_list|)
block|{
name|this
operator|.
name|bean
operator|=
name|bean
expr_stmt|;
block|}
DECL|method|setBean (String name)
specifier|public
name|void
name|setBean
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|bean
operator|=
operator|new
name|ExampleBean
argument_list|()
expr_stmt|;
name|bean
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|bean
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

