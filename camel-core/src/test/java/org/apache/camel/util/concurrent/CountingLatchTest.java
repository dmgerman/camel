begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.concurrent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test case for {@link CountingLatch}  */
end_comment

begin_class
DECL|class|CountingLatchTest
specifier|public
class|class
name|CountingLatchTest
extends|extends
name|TestCase
block|{
DECL|field|COUNT
specifier|private
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|4
decl_stmt|;
DECL|field|latch
specifier|private
name|CountingLatch
name|latch
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|latch
operator|=
operator|new
name|CountingLatch
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test for counting down with the latch (similar to {@link CountDownLatch}      */
DECL|method|testCountDown ()
specifier|public
name|void
name|testCountDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|latch
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|sleep
argument_list|()
expr_stmt|;
name|latch
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We can't be done in 100 ms"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we can block until we are done
name|assertLatchDone
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test for counting up with the latch      */
DECL|method|testCountUp ()
specifier|public
name|void
name|testCountUp
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|latch
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|sleep
argument_list|()
expr_stmt|;
name|latch
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We can't be done in 100 ms"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// but we can block until we are done
name|assertLatchDone
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test for two threads that are simultaneously incrementing and decrementing the latch      */
DECL|method|testCountDownAndUp ()
specifier|public
name|void
name|testCountDownAndUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|up
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|latch
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
name|down
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|latch
operator|.
name|increment
argument_list|()
expr_stmt|;
name|latch
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|sleep
argument_list|()
expr_stmt|;
name|latch
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|up
operator|.
name|start
argument_list|()
expr_stmt|;
name|down
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertLatchDone
argument_list|()
expr_stmt|;
block|}
comment|/**      * Await the latch and assert the count is 0 when it does return      * @throws InterruptedException      */
DECL|method|assertLatchDone ()
specifier|private
name|void
name|assertLatchDone
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The latch has been released, so the count should be 0 now"
argument_list|,
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Helper method do a little nap      */
DECL|method|sleep ()
specifier|private
name|void
name|sleep
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|75
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Thread shouldn't get interrupted -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

