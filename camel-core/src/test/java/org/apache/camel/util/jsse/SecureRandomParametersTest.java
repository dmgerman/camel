begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.jsse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SecureRandomParametersTest
specifier|public
class|class
name|SecureRandomParametersTest
extends|extends
name|AbstractJsseParametersTest
block|{
annotation|@
name|Test
DECL|method|testPropertyPlaceholders ()
specifier|public
name|void
name|testPropertyPlaceholders
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|canTest
argument_list|()
condition|)
block|{
name|CamelContext
name|context
init|=
name|this
operator|.
name|createPropertiesPlaceholderAwareContext
argument_list|()
decl_stmt|;
name|SecureRandomParameters
name|srp
init|=
operator|new
name|SecureRandomParameters
argument_list|()
decl_stmt|;
name|srp
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|srp
operator|.
name|setAlgorithm
argument_list|(
literal|"{{secureRandomParameters.algorithm}}"
argument_list|)
expr_stmt|;
name|srp
operator|.
name|setProvider
argument_list|(
literal|"{{secureRandomParameters.provider}}"
argument_list|)
expr_stmt|;
name|srp
operator|.
name|createSecureRandom
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateSecureRandom ()
specifier|public
name|void
name|testCreateSecureRandom
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|canTest
argument_list|()
condition|)
block|{
name|SecureRandomParameters
name|srp
init|=
operator|new
name|SecureRandomParameters
argument_list|()
decl_stmt|;
name|srp
operator|.
name|setAlgorithm
argument_list|(
literal|"SHA1PRNG"
argument_list|)
expr_stmt|;
name|SecureRandom
name|sr
init|=
name|srp
operator|.
name|createSecureRandom
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SHA1PRNG"
argument_list|,
name|sr
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|providerName
init|=
name|sr
operator|.
name|getProvider
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|srp
operator|.
name|setProvider
argument_list|(
name|providerName
argument_list|)
expr_stmt|;
name|sr
operator|=
name|srp
operator|.
name|createSecureRandom
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SHA1PRNG"
argument_list|,
name|sr
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providerName
argument_list|,
name|sr
operator|.
name|getProvider
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExplicitInvalidAlgorithm ()
specifier|public
name|void
name|testExplicitInvalidAlgorithm
parameter_list|()
throws|throws
name|Exception
block|{
name|SecureRandomParameters
name|srp
init|=
operator|new
name|SecureRandomParameters
argument_list|()
decl_stmt|;
name|srp
operator|.
name|setAlgorithm
argument_list|(
literal|"fsafsadfasdfasdf"
argument_list|)
expr_stmt|;
try|try
block|{
name|srp
operator|.
name|createSecureRandom
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testExplicitInvalidProvider ()
specifier|public
name|void
name|testExplicitInvalidProvider
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|canTest
argument_list|()
condition|)
block|{
name|SecureRandomParameters
name|srp
init|=
operator|new
name|SecureRandomParameters
argument_list|()
decl_stmt|;
name|srp
operator|.
name|setAlgorithm
argument_list|(
literal|"SHA1PRNG"
argument_list|)
expr_stmt|;
name|srp
operator|.
name|setProvider
argument_list|(
literal|"asdfsadfasdfasdf"
argument_list|)
expr_stmt|;
try|try
block|{
name|srp
operator|.
name|createSecureRandom
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProviderException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|canTest ()
specifier|protected
name|boolean
name|canTest
parameter_list|()
block|{
try|try
block|{
name|SecureRandom
operator|.
name|getInstance
argument_list|(
literal|"SHA1PRNG"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

