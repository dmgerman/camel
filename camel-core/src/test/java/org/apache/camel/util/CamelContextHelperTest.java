begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CamelContextHelperTest
specifier|public
class|class
name|CamelContextHelperTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|MyFooBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Test
DECL|method|testGetMandatoryEndpoint ()
specifier|public
name|void
name|testGetMandatoryEndpoint
parameter_list|()
block|{
name|MockEndpoint
name|mock
init|=
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|context
argument_list|,
literal|"mock:foo"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMandatoryConvertTo ()
specifier|public
name|void
name|testMandatoryConvertTo
parameter_list|()
block|{
name|Integer
name|num
init|=
name|CamelContextHelper
operator|.
name|mandatoryConvertTo
argument_list|(
name|context
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
literal|"5"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMandatoryConvertToNotPossible ()
specifier|public
name|void
name|testMandatoryConvertToNotPossible
parameter_list|()
block|{
try|try
block|{
name|CamelContextHelper
operator|.
name|mandatoryConvertTo
argument_list|(
name|context
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testLookupBean ()
specifier|public
name|void
name|testLookupBean
parameter_list|()
block|{
name|Object
name|foo
init|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|MyFooBean
operator|.
name|class
argument_list|,
name|foo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLookupBeanAndType ()
specifier|public
name|void
name|testLookupBeanAndType
parameter_list|()
block|{
name|MyFooBean
name|foo
init|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
name|MyFooBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteStartupOrder ()
specifier|public
name|void
name|testRouteStartupOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|222
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:foo"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bar"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|111
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:bar"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|111
argument_list|,
name|CamelContextHelper
operator|.
name|getRouteStartupOrder
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|222
argument_list|,
name|CamelContextHelper
operator|.
name|getRouteStartupOrder
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no route with that name
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CamelContextHelper
operator|.
name|getRouteStartupOrder
argument_list|(
name|context
argument_list|,
literal|"zzz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MyFooBean
specifier|public
specifier|static
class|class
name|MyFooBean
block|{      }
block|}
end_class

end_unit

