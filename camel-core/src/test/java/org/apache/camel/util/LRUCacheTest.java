begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|LRUCacheTest
specifier|public
class|class
name|LRUCacheTest
extends|extends
name|TestCase
block|{
DECL|field|cache
specifier|private
name|LRUCache
argument_list|<
name|String
argument_list|,
name|Service
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|=
operator|new
name|LRUCache
argument_list|<
name|String
argument_list|,
name|Service
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testLRUCache ()
specifier|public
name|void
name|testLRUCache
parameter_list|()
block|{
name|MyService
name|service1
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|MyService
name|service2
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
name|service1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
name|service2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|service1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|service2
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLRUCacheHitsAndMisses ()
specifier|public
name|void
name|testLRUCacheHitsAndMisses
parameter_list|()
block|{
name|MyService
name|service1
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|MyService
name|service2
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
name|service1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
name|service2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLRUCacheHitsAndMissesStop ()
specifier|public
name|void
name|testLRUCacheHitsAndMissesStop
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|service1
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|MyService
name|service2
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
name|service1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
name|service2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLRUCacheStop ()
specifier|public
name|void
name|testLRUCacheStop
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|service1
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|MyService
name|service2
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
name|service1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
name|service2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service1
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service2
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service1
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service2
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyService
specifier|private
specifier|final
class|class
name|MyService
implements|implements
name|Service
block|{
DECL|field|stopped
specifier|private
name|boolean
name|stopped
decl_stmt|;
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{         }
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isStopped ()
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
block|}
block|}
end_class

end_unit

