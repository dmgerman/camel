begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.backoff
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BackOffTest
specifier|public
class|class
name|BackOffTest
block|{
annotation|@
name|Test
DECL|method|testSimpleBackOff ()
specifier|public
name|void
name|testSimpleBackOff
parameter_list|()
block|{
specifier|final
name|BackOff
name|backOff
init|=
name|BackOff
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|BackOffContext
name|context
init|=
operator|new
name|BackOffContext
argument_list|(
name|backOff
argument_list|)
decl_stmt|;
name|long
name|delay
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|delay
operator|=
name|context
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
argument_list|,
name|context
operator|.
name|getCurrentAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
argument_list|,
name|context
operator|.
name|getCurrentDelay
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
operator|*
name|i
argument_list|,
name|context
operator|.
name|getCurrentElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBackOffWithMultiplier ()
specifier|public
name|void
name|testBackOffWithMultiplier
parameter_list|()
block|{
specifier|final
name|BackOff
name|backOff
init|=
name|BackOff
operator|.
name|builder
argument_list|()
operator|.
name|multiplier
argument_list|(
literal|1.5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|BackOffContext
name|context
init|=
operator|new
name|BackOffContext
argument_list|(
name|backOff
argument_list|)
decl_stmt|;
name|long
name|delay
init|=
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|long
name|oldDelay
decl_stmt|;
name|long
name|elapsed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|oldDelay
operator|=
name|delay
expr_stmt|;
name|delay
operator|=
name|context
operator|.
name|next
argument_list|()
expr_stmt|;
name|elapsed
operator|+=
name|delay
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
argument_list|,
name|context
operator|.
name|getCurrentAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
call|(
name|long
call|)
argument_list|(
name|oldDelay
operator|*
literal|1.5
argument_list|)
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
call|(
name|long
call|)
argument_list|(
name|oldDelay
operator|*
literal|1.5
argument_list|)
argument_list|,
name|context
operator|.
name|getCurrentDelay
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|elapsed
argument_list|,
name|context
operator|.
name|getCurrentElapsedTime
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBackOffWithMaxAttempts ()
specifier|public
name|void
name|testBackOffWithMaxAttempts
parameter_list|()
block|{
specifier|final
name|BackOff
name|backOff
init|=
name|BackOff
operator|.
name|builder
argument_list|()
operator|.
name|maxAttempts
argument_list|(
literal|5L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|BackOffContext
name|context
init|=
operator|new
name|BackOffContext
argument_list|(
name|backOff
argument_list|)
decl_stmt|;
name|long
name|delay
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|delay
operator|=
name|context
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
argument_list|,
name|context
operator|.
name|getCurrentAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
argument_list|,
name|context
operator|.
name|getCurrentDelay
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
operator|*
name|i
argument_list|,
name|context
operator|.
name|getCurrentElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|delay
operator|=
name|context
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|context
operator|.
name|getCurrentAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|NEVER
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackOffWithMaxTime ()
specifier|public
name|void
name|testBackOffWithMaxTime
parameter_list|()
block|{
specifier|final
name|BackOff
name|backOff
init|=
name|BackOff
operator|.
name|builder
argument_list|()
operator|.
name|maxElapsedTime
argument_list|(
literal|9
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|BackOffContext
name|context
init|=
operator|new
name|BackOffContext
argument_list|(
name|backOff
argument_list|)
decl_stmt|;
name|long
name|delay
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|delay
operator|=
name|context
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
argument_list|,
name|context
operator|.
name|getCurrentAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
argument_list|,
name|context
operator|.
name|getCurrentDelay
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|DEFAULT_DELAY
operator|.
name|toMillis
argument_list|()
operator|*
name|i
argument_list|,
name|context
operator|.
name|getCurrentElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|delay
operator|=
name|context
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|context
operator|.
name|getCurrentAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BackOff
operator|.
name|NEVER
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

