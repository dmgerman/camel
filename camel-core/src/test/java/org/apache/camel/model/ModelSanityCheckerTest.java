begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Performs sanity check on the model classes that their JAXB annotations and getter/setter match up.  */
end_comment

begin_class
DECL|class|ModelSanityCheckerTest
specifier|public
class|class
name|ModelSanityCheckerTest
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ModelSanityCheckerTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|discoverJAxbClasses ()
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|discoverJAxbClasses
parameter_list|()
block|{
name|PackageScanClassResolver
name|resolver
init|=
operator|new
name|DefaultPackageScanClassResolver
argument_list|()
decl_stmt|;
name|String
index|[]
name|packages
init|=
name|Constants
operator|.
name|JAXB_CONTEXT_PACKAGES
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
return|return
name|resolver
operator|.
name|findAnnotated
argument_list|(
name|XmlAccessorType
operator|.
name|class
argument_list|,
name|packages
argument_list|)
return|;
block|}
DECL|method|testSanity ()
specifier|public
name|void
name|testSanity
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|discoverJAxbClasses
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"There should be> 140 classes, was: "
operator|+
name|classes
operator|.
name|size
argument_list|()
argument_list|,
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|140
argument_list|)
expr_stmt|;
comment|// check each class is okay
for|for
control|(
name|Class
name|clazz
range|:
name|classes
control|)
block|{
comment|// skip ProcessorDefinition as its special
if|if
condition|(
name|clazz
operator|==
name|ProcessorDefinition
operator|.
name|class
condition|)
block|{
continue|continue;
block|}
comment|// skip RouteDefinition as its special
if|if
condition|(
name|clazz
operator|==
name|RouteDefinition
operator|.
name|class
condition|)
block|{
continue|continue;
block|}
comment|// check each declared field in the class
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class {} has field {}"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// does the field have a jaxb annotation?
name|boolean
name|attribute
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|XmlAttribute
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|element
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|XmlElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|elementRef
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|XmlElementRef
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
comment|// only one of those 3 is allowed, so check that we don't have 2+ of them
if|if
condition|(
operator|(
name|attribute
operator|&&
name|element
operator|)
operator|||
operator|(
name|attribute
operator|&&
name|elementRef
operator|)
operator|||
operator|(
name|element
operator|&&
name|elementRef
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" has field "
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" which has 2+ annotations that are not allowed together."
argument_list|)
expr_stmt|;
block|}
comment|// check getter/setter
if|if
condition|(
name|attribute
operator|||
name|element
operator|||
name|elementRef
condition|)
block|{
comment|// check for getter/setter
name|Method
name|getter
init|=
name|IntrospectionSupport
operator|.
name|getPropertyGetter
argument_list|(
name|clazz
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|setter
init|=
name|IntrospectionSupport
operator|.
name|getPropertySetter
argument_list|(
name|clazz
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Getter "
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" on class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" is missing"
argument_list|,
name|getter
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Setter "
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" on class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" is missing"
argument_list|,
name|setter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we do not expect any JAXB annotations on methods
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class {} has method {}"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// does the field have a jaxb annotation?
name|boolean
name|attribute
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|XmlAttribute
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|element
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|XmlElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|elementRef
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|XmlElementRef
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" has method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" should not have @XmlAttribute annotation"
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" has method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" should not have @XmlElement annotation"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" has method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" should not have @XmlElementRef annotation"
argument_list|,
name|elementRef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

