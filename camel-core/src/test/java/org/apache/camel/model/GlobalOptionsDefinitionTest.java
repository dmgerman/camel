begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GlobalOptionsDefinitionTest
specifier|public
class|class
name|GlobalOptionsDefinitionTest
block|{
DECL|field|LOG_DEBUG_BODY_MAX_CHARS_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|LOG_DEBUG_BODY_MAX_CHARS_VALUE
init|=
literal|"500"
decl_stmt|;
DECL|field|instance
specifier|private
name|GlobalOptionsDefinition
name|instance
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|GlobalOptionDefinition
name|globalOption
init|=
operator|new
name|GlobalOptionDefinition
argument_list|()
decl_stmt|;
name|globalOption
operator|.
name|setKey
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|)
expr_stmt|;
name|globalOption
operator|.
name|setValue
argument_list|(
name|LOG_DEBUG_BODY_MAX_CHARS_VALUE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GlobalOptionDefinition
argument_list|>
name|globalOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|globalOptions
operator|.
name|add
argument_list|(
name|globalOption
argument_list|)
expr_stmt|;
name|instance
operator|=
operator|new
name|GlobalOptionsDefinition
argument_list|()
expr_stmt|;
name|instance
operator|.
name|setGlobalOptions
argument_list|(
name|globalOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|asMapShouldCarryOnLogDebugMaxChars ()
specifier|public
name|void
name|asMapShouldCarryOnLogDebugMaxChars
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|instance
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LOG_DEBUG_BODY_MAX_CHARS_VALUE
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

