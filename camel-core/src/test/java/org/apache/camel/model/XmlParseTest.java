begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
operator|.
name|FailoverLoadBalancerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
operator|.
name|RandomLoadBalancerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
operator|.
name|RoundRobinLoadBalancerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
operator|.
name|StickyLoadBalancerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
operator|.
name|TopicLoadBalancerDefinition
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|XmlParseTest
specifier|public
class|class
name|XmlParseTest
extends|extends
name|XmlTestSupport
block|{
DECL|method|testParseSimpleRouteXml ()
specifier|public
name|void
name|testParseSimpleRouteXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"simpleRoute.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"to"
argument_list|,
name|route
argument_list|,
literal|"seda:b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorXml ()
specifier|public
name|void
name|testParseProcessorXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processor.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|ProcessDefinition
name|to
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|ProcessDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Processor ref"
argument_list|,
literal|"myProcessor"
argument_list|,
name|to
operator|.
name|getRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithFilterXml ()
specifier|public
name|void
name|testParseProcessorWithFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterDefinition
name|filter
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|FilterDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"juel"
argument_list|,
literal|"in.header.foo == 'bar'"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithHeaderFilterXml ()
specifier|public
name|void
name|testParseProcessorWithHeaderFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithHeaderFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterDefinition
name|filter
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|FilterDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"header"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithElFilterXml ()
specifier|public
name|void
name|testParseProcessorWithElFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithElFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterDefinition
name|filter
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|FilterDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"el"
argument_list|,
literal|"$in.header.foo == 'bar'"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithGroovyFilterXml ()
specifier|public
name|void
name|testParseProcessorWithGroovyFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithGroovyFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterDefinition
name|filter
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|FilterDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"groovy"
argument_list|,
literal|"in.headers.any { h -> h.startsWith('foo')}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRecipientListXml ()
specifier|public
name|void
name|testParseRecipientListXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"dynamicRecipientList.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|RecipientListDefinition
name|node
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|RecipientListDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"header"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseStaticRecipientListXml ()
specifier|public
name|void
name|testParseStaticRecipientListXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"staticRecipientList.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"seda:b"
argument_list|,
literal|"seda:c"
argument_list|,
literal|"seda:d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTransformXml ()
specifier|public
name|void
name|testParseTransformXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"transform.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"direct:start"
argument_list|)
expr_stmt|;
name|TransformDefinition
name|node
init|=
name|assertNthProcessorInstanceOf
argument_list|(
name|TransformDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"simple"
argument_list|,
literal|"${in.body} extra data!"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"mock:end"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseSetBodyXml ()
specifier|public
name|void
name|testParseSetBodyXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"setBody.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"direct:start"
argument_list|)
expr_stmt|;
name|SetBodyDefinition
name|node
init|=
name|assertNthProcessorInstanceOf
argument_list|(
name|SetBodyDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"simple"
argument_list|,
literal|"${in.body} extra data!"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"mock:end"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseSetHeaderXml ()
specifier|public
name|void
name|testParseSetHeaderXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"setHeader.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|SetHeaderDefinition
name|node
init|=
name|assertNthProcessorInstanceOf
argument_list|(
name|SetHeaderDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"oldBodyValue"
argument_list|,
name|node
operator|.
name|getHeaderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"simple"
argument_list|,
literal|"body"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"mock:b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseSetHeaderToConstantXml ()
specifier|public
name|void
name|testParseSetHeaderToConstantXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"setHeaderToConstant.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|SetHeaderDefinition
name|node
init|=
name|assertNthProcessorInstanceOf
argument_list|(
name|SetHeaderDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"theHeader"
argument_list|,
name|node
operator|.
name|getHeaderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"constant"
argument_list|,
literal|"a value"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"mock:b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseSetOutHeaderXml ()
specifier|public
name|void
name|testParseSetOutHeaderXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"setOutHeader.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|SetOutHeaderDefinition
name|node
init|=
name|assertNthProcessorInstanceOf
argument_list|(
name|SetOutHeaderDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"oldBodyValue"
argument_list|,
name|node
operator|.
name|getHeaderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"simple"
argument_list|,
literal|"body"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"mock:b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseSetOutHeaderToConstantXml ()
specifier|public
name|void
name|testParseSetOutHeaderToConstantXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"setOutHeaderToConstant.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|SetOutHeaderDefinition
name|node
init|=
name|assertNthProcessorInstanceOf
argument_list|(
name|SetOutHeaderDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"theHeader"
argument_list|,
name|node
operator|.
name|getHeaderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"constant"
argument_list|,
literal|"a value"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"mock:b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseConvertBodyXml ()
specifier|public
name|void
name|testParseConvertBodyXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"convertBody.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|ConvertBodyDefinition
name|node
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|ConvertBodyDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|node
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRoutingSlipXml ()
specifier|public
name|void
name|testParseRoutingSlipXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routingSlip.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|RoutingSlipDefinition
name|node
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|RoutingSlipDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"destinations"
argument_list|,
name|node
operator|.
name|getExpression
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RoutingSlipDefinition
operator|.
name|DEFAULT_DELIMITER
argument_list|,
name|node
operator|.
name|getUriDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRoutingSlipWithHeaderSetXml ()
specifier|public
name|void
name|testParseRoutingSlipWithHeaderSetXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routingSlipHeaderSet.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|RoutingSlipDefinition
name|node
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|RoutingSlipDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"theRoutingSlipHeader"
argument_list|,
name|node
operator|.
name|getExpression
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RoutingSlipDefinition
operator|.
name|DEFAULT_DELIMITER
argument_list|,
name|node
operator|.
name|getUriDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRoutingSlipWithHeaderAndDelimiterSetXml ()
specifier|public
name|void
name|testParseRoutingSlipWithHeaderAndDelimiterSetXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routingSlipHeaderAndDelimiterSet.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|RoutingSlipDefinition
name|node
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|RoutingSlipDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"theRoutingSlipHeader"
argument_list|,
name|node
operator|.
name|getExpression
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"#"
argument_list|,
name|node
operator|.
name|getUriDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRouteWithChoiceXml ()
specifier|public
name|void
name|testParseRouteWithChoiceXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithChoice.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|ChoiceDefinition
name|choice
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|ChoiceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WhenDefinition
argument_list|>
name|whens
init|=
name|assertListSize
argument_list|(
name|choice
operator|.
name|getWhenClauses
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertChildTo
argument_list|(
literal|"when(0)"
argument_list|,
name|whens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"seda:b"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"when(1)"
argument_list|,
name|whens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"seda:c"
argument_list|)
expr_stmt|;
name|OtherwiseDefinition
name|otherwise
init|=
name|choice
operator|.
name|getOtherwise
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Otherwise is null"
argument_list|,
name|otherwise
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"otherwise"
argument_list|,
name|otherwise
argument_list|,
literal|"seda:d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseSplitterXml ()
specifier|public
name|void
name|testParseSplitterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"splitter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|SplitDefinition
name|splitter
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|SplitDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|splitter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"to"
argument_list|,
name|splitter
argument_list|,
literal|"seda:b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLoadBalance ()
specifier|public
name|void
name|testParseLoadBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithLoadBalance.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|LoadBalanceDefinition
name|loadBalance
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|LoadBalanceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Here should have 3 output here"
argument_list|,
literal|3
argument_list|,
name|loadBalance
operator|.
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The loadBalancer shoud be RoundRobinLoadBalancerDefinition"
argument_list|,
name|loadBalance
operator|.
name|getLoadBalancerType
argument_list|()
operator|instanceof
name|RoundRobinLoadBalancerDefinition
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseStickyLoadBalance ()
specifier|public
name|void
name|testParseStickyLoadBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithStickyLoadBalance.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|LoadBalanceDefinition
name|loadBalance
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|LoadBalanceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Here should have 3 output here"
argument_list|,
literal|3
argument_list|,
name|loadBalance
operator|.
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The loadBalancer shoud be StickyLoadBalancerDefinition"
argument_list|,
name|loadBalance
operator|.
name|getLoadBalancerType
argument_list|()
operator|instanceof
name|StickyLoadBalancerDefinition
argument_list|)
expr_stmt|;
name|StickyLoadBalancerDefinition
name|strategy
init|=
operator|(
name|StickyLoadBalancerDefinition
operator|)
name|loadBalance
operator|.
name|getLoadBalancerType
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"the expression should not be null "
argument_list|,
name|strategy
operator|.
name|getCorrelationExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFailoverLoadBalance ()
specifier|public
name|void
name|testParseFailoverLoadBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithFailoverLoadBalance.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|LoadBalanceDefinition
name|loadBalance
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|LoadBalanceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Here should have 3 output here"
argument_list|,
literal|3
argument_list|,
name|loadBalance
operator|.
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The loadBalancer shoud be FailoverLoadBalancerDefinition"
argument_list|,
name|loadBalance
operator|.
name|getLoadBalancerType
argument_list|()
operator|instanceof
name|FailoverLoadBalancerDefinition
argument_list|)
expr_stmt|;
name|FailoverLoadBalancerDefinition
name|strategy
init|=
operator|(
name|FailoverLoadBalancerDefinition
operator|)
name|loadBalance
operator|.
name|getLoadBalancerType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"there should be 2 exceptions"
argument_list|,
literal|2
argument_list|,
name|strategy
operator|.
name|getExceptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRandomLoadBalance ()
specifier|public
name|void
name|testParseRandomLoadBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithRandomLoadBalance.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|LoadBalanceDefinition
name|loadBalance
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|LoadBalanceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Here should have 3 output here"
argument_list|,
literal|3
argument_list|,
name|loadBalance
operator|.
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The loadBalancer shoud be RandomLoadBalancerDefinition"
argument_list|,
name|loadBalance
operator|.
name|getLoadBalancerType
argument_list|()
operator|instanceof
name|RandomLoadBalancerDefinition
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTopicLoadBalance ()
specifier|public
name|void
name|testParseTopicLoadBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithTopicLoadBalance.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|LoadBalanceDefinition
name|loadBalance
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|LoadBalanceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Here should have 3 output here"
argument_list|,
literal|3
argument_list|,
name|loadBalance
operator|.
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The loadBalancer shoud be TopicLoadBalancerDefinition"
argument_list|,
name|loadBalance
operator|.
name|getLoadBalancerType
argument_list|()
operator|instanceof
name|TopicLoadBalancerDefinition
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseHL7DataFormat ()
specifier|public
name|void
name|testParseHL7DataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithHL7DataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseXStreamDataFormat ()
specifier|public
name|void
name|testParseXStreamDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithXStreamDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseXMLBeansDataFormat ()
specifier|public
name|void
name|testParseXMLBeansDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithXMLBeansDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseXMLSecurityDataFormat ()
specifier|public
name|void
name|testParseXMLSecurityDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithXMLSecurityDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTidyMarkupDataFormat ()
specifier|public
name|void
name|testParseTidyMarkupDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithTidyMarkupDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRSSDataFormat ()
specifier|public
name|void
name|testParseRSSDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithRSSDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseJSonDataFormat ()
specifier|public
name|void
name|testParseJSonDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithJSonDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseJaxbDataFormat ()
specifier|public
name|void
name|testParseJaxbDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithJaxbDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFlatpackDataFormat ()
specifier|public
name|void
name|testParseFlatpackDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithFlatpackDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseCvsDataFormat ()
specifier|public
name|void
name|testParseCvsDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithCvsDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseBindyDataFormat ()
specifier|public
name|void
name|testParseBindyDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithBindyDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseCastorDataFormat ()
specifier|public
name|void
name|testParseCastorDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithCastorDataFormat.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseBatchResequencerXml ()
specifier|public
name|void
name|testParseBatchResequencerXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"resequencerBatch.xml"
argument_list|)
decl_stmt|;
name|ResequenceDefinition
name|resequencer
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|ResequenceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|resequencer
operator|.
name|getStreamConfig
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resequencer
operator|.
name|getBatchConfig
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|resequencer
operator|.
name|getBatchConfig
argument_list|()
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000L
argument_list|,
name|resequencer
operator|.
name|getBatchConfig
argument_list|()
operator|.
name|getBatchTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseStreamResequencerXml ()
specifier|public
name|void
name|testParseStreamResequencerXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"resequencerStream.xml"
argument_list|)
decl_stmt|;
name|ResequenceDefinition
name|resequencer
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|ResequenceDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resequencer
operator|.
name|getStreamConfig
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resequencer
operator|.
name|getBatchConfig
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|resequencer
operator|.
name|getStreamConfig
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000L
argument_list|,
name|resequencer
operator|.
name|getStreamConfig
argument_list|()
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoop ()
specifier|public
name|void
name|testLoop
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"loop.xml"
argument_list|)
decl_stmt|;
name|LoopDefinition
name|loop
init|=
name|assertOneProcessorInstanceOf
argument_list|(
name|LoopDefinition
operator|.
name|class
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|loop
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"constant"
argument_list|,
name|loop
operator|.
name|getExpression
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
DECL|method|assertOneRoute (String uri)
specifier|protected
name|RouteDefinition
name|assertOneRoute
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|JAXBException
block|{
name|RouteContainer
name|context
init|=
name|assertParseAsJaxb
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|RouteDefinition
name|route
init|=
name|assertOneElement
argument_list|(
name|context
operator|.
name|getRoutes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|route
return|;
block|}
DECL|method|assertFrom (RouteDefinition route, String uri)
specifier|protected
name|void
name|assertFrom
parameter_list|(
name|RouteDefinition
name|route
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|FromDefinition
name|from
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"From URI"
argument_list|,
name|uri
argument_list|,
name|from
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChildTo (String message, ProcessorDefinition<?> route, String uri)
specifier|protected
name|void
name|assertChildTo
parameter_list|(
name|String
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|route
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
name|ToDefinition
name|value
init|=
name|assertIsInstanceOf
argument_list|(
name|ToDefinition
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|message
operator|+
literal|"To URI"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing: "
operator|+
name|text
operator|+
literal|" is equal to: "
operator|+
name|uri
operator|+
literal|" for processor: "
operator|+
name|processor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|uri
argument_list|,
name|value
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTo (String message, ProcessorDefinition<?> processor, String uri)
specifier|protected
name|void
name|assertTo
parameter_list|(
name|String
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|processor
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|ToDefinition
name|value
init|=
name|assertIsInstanceOf
argument_list|(
name|ToDefinition
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|message
operator|+
literal|"To URI"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing: "
operator|+
name|text
operator|+
literal|" is equal to: "
operator|+
name|uri
operator|+
literal|" for processor: "
operator|+
name|processor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|uri
argument_list|,
name|value
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChildTo (ProcessorDefinition<?> route, String... uris)
specifier|protected
name|void
name|assertChildTo
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|route
parameter_list|,
name|String
modifier|...
name|uris
parameter_list|)
block|{
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|list
init|=
name|assertListSize
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|uris
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|assertTo
argument_list|(
literal|"output["
operator|+
name|idx
operator|+
literal|"] "
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertChildTo (ProcessorDefinition<?> route, String uri, int toIdx)
specifier|protected
name|void
name|assertChildTo
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|route
parameter_list|,
name|String
name|uri
parameter_list|,
name|int
name|toIdx
parameter_list|)
block|{
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|list
init|=
name|route
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|assertTo
argument_list|(
literal|"to and idx="
operator|+
name|toIdx
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|toIdx
argument_list|)
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOneProcessorInstanceOf (Class<T> type, ProcessorDefinition<?> route)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|assertOneProcessorInstanceOf
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|route
parameter_list|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|type
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|assertNthProcessorInstanceOf (Class<T> type, ProcessorDefinition<?> route, int index)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|assertNthProcessorInstanceOf
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|route
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|processor
init|=
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|type
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|assertExpression (ExpressionDefinition expression, String language, String languageExpression)
specifier|protected
name|void
name|assertExpression
parameter_list|(
name|ExpressionDefinition
name|expression
parameter_list|,
name|String
name|language
parameter_list|,
name|String
name|languageExpression
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Expression should not be null!"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expression language"
argument_list|,
name|language
argument_list|,
name|expression
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expression"
argument_list|,
name|languageExpression
argument_list|,
name|expression
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

