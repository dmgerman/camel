begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test cases for corresponding class {@link CsvDataFormat}.  */
end_comment

begin_class
DECL|class|CsvDataFormatTest
specifier|public
class|class
name|CsvDataFormatTest
block|{
annotation|@
name|Test
DECL|method|testConfigureDataFormatDataFormatCamelContext ()
specifier|public
name|void
name|testConfigureDataFormatDataFormatCamelContext
parameter_list|()
block|{
name|CsvDataFormat
name|csvDataFormat
init|=
operator|new
name|CsvDataFormat
argument_list|()
decl_stmt|;
name|csvDataFormat
operator|.
name|setIgnoreHeaderCase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|csvDataFormat
operator|.
name|setTrim
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|csvDataFormat
operator|.
name|setTrailingDelimiter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MyDataFormat
name|dataFormat
init|=
operator|new
name|MyDataFormat
argument_list|()
decl_stmt|;
name|DefaultCamelContext
name|camelContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|csvDataFormat
operator|.
name|configureDataFormat
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dataFormat
operator|.
name|bitSet
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|csvDataFormat
operator|.
name|setIgnoreHeaderCase
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|csvDataFormat
operator|.
name|setTrim
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|csvDataFormat
operator|.
name|setTrailingDelimiter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|csvDataFormat
operator|.
name|configureDataFormat
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataFormat
operator|.
name|bitSet
operator|.
name|cardinality
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Helper classes
comment|//
DECL|class|MyDataFormat
specifier|static
specifier|final
class|class
name|MyDataFormat
implements|implements
name|DataFormat
block|{
DECL|field|bitSet
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
DECL|method|MyDataFormat ()
name|MyDataFormat
parameter_list|()
block|{         }
DECL|method|setIgnoreHeaderCase (Boolean ignoreHeaderCase)
specifier|public
name|void
name|setIgnoreHeaderCase
parameter_list|(
name|Boolean
name|ignoreHeaderCase
parameter_list|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|ignoreHeaderCase
argument_list|)
expr_stmt|;
block|}
DECL|method|setTrim (Boolean trim)
specifier|public
name|void
name|setTrim
parameter_list|(
name|Boolean
name|trim
parameter_list|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
DECL|method|setTrailingDelimiter (Boolean trailingDelimiter)
specifier|public
name|void
name|setTrailingDelimiter
parameter_list|(
name|Boolean
name|trailingDelimiter
parameter_list|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|trailingDelimiter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (Exchange exchange, InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|marshal (Exchange exchange, Object graph, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|graph
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

