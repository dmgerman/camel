begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContextRegistry
import|;
end_import

begin_class
DECL|class|CamelContextRegistryTest
specifier|public
class|class
name|CamelContextRegistryTest
extends|extends
name|TestCase
block|{
DECL|class|MyListener
specifier|private
specifier|final
class|class
name|MyListener
extends|extends
name|CamelContextRegistry
operator|.
name|Listener
block|{
DECL|field|names
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|contextAdded (CamelContext camelContext)
specifier|public
name|void
name|contextAdded
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|names
operator|.
name|add
argument_list|(
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contextRemoved (CamelContext camelContext)
specifier|public
name|void
name|contextRemoved
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|names
operator|.
name|remove
argument_list|(
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testContainerSet ()
specifier|public
name|void
name|testContainerSet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// need to clear the listener for testing
operator|(
operator|(
name|DefaultCamelContextRegistry
operator|)
name|CamelContextRegistry
operator|.
name|INSTANCE
operator|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|MyListener
name|listener
init|=
operator|new
name|MyListener
argument_list|()
decl_stmt|;
name|CamelContext
name|camel1
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|CamelContext
name|camel2
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CamelContextRegistry
operator|.
name|INSTANCE
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// after we set, then we should manage the 2 pending contexts
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listener
operator|.
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CamelContext
name|camel3
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|listener
operator|.
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|camel1
operator|.
name|getName
argument_list|()
argument_list|,
name|listener
operator|.
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|camel2
operator|.
name|getName
argument_list|()
argument_list|,
name|listener
operator|.
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|camel3
operator|.
name|getName
argument_list|()
argument_list|,
name|listener
operator|.
name|names
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|camel1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|camel2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|camel3
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

