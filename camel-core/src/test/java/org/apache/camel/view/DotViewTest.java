begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.view
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|view
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|DotViewTest
specifier|public
class|class
name|DotViewTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|generator
specifier|protected
name|RouteDotGenerator
name|generator
init|=
operator|new
name|RouteDotGenerator
argument_list|()
decl_stmt|;
DECL|method|testDotFile ()
specifier|public
name|void
name|testDotFile
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|generator
operator|.
name|setDir
argument_list|(
literal|"target/site/cameldoc"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|drawRoutes
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|MulticastRoute
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|PipelineRoute
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MulticastRoute
specifier|static
class|class
name|MulticastRoute
extends|extends
name|RouteBuilder
block|{
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"seda:multicast.in"
argument_list|)
operator|.
name|multicast
argument_list|()
operator|.
name|to
argument_list|(
literal|"seda:multicast.out1"
argument_list|,
literal|"seda:multicast.out2"
argument_list|,
literal|"seda:multicast.out3"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PipelineRoute
specifier|static
class|class
name|PipelineRoute
extends|extends
name|RouteBuilder
block|{
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"seda:pipeline.in"
argument_list|)
operator|.
name|to
argument_list|(
literal|"seda:pipeline.out1"
argument_list|,
literal|"seda:pipeline.out2"
argument_list|,
literal|"seda:pipeline.out3"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*                 from("file:foo/xyz?noop=true").                     choice().                       when(xpath("/person/city = 'London'")).to("file:target/messages/uk").                       otherwise().to("file:target/messages/others"); */
comment|/*                   from("file:foo/bar?noop=true").                         filter(header("foo").isEqualTo("bar")).                         to("file:xyz?noop=true");                  from("file:xyz?noop=true").                         filter(header("foo").isEqualTo("bar")).                         recipientList(header("bar")).                         splitter(XPathBuilder.xpath("/invoice/lineItems")).                         throttler(3).                         to("mock:result"); */
block|}
end_class

end_unit

