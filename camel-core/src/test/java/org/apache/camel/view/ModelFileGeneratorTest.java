begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.view
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|view
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|ModelFileGeneratorTest
specifier|public
class|class
name|ModelFileGeneratorTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|outputDirectory
specifier|protected
name|String
name|outputDirectory
init|=
literal|"target/site/model"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
name|outputDirectory
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|testGenerateModel ()
specifier|public
name|void
name|testGenerateModel
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ModelFileGenerator
name|generator
init|=
operator|new
name|ModelFileGenerator
argument_list|(
name|JAXBContext
operator|.
name|newInstance
argument_list|(
literal|"org.apache.camel.model"
argument_list|)
argument_list|)
decl_stmt|;
name|generator
operator|.
name|marshalRoutesUsingJaxb
argument_list|(
name|outputDirectory
operator|+
literal|"/route.xml"
argument_list|,
name|context
operator|.
name|getRouteDefinitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Not supported"
argument_list|)
condition|)
block|{
comment|// ignore as some OS does not support indent-number etc.
return|return;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|File
name|out
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
operator|+
literal|"/route.xml"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File should have been generated"
argument_list|,
name|out
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain a route"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"<route"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain a route"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"</route>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain a route"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"direct:start"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain a route"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"mock:result"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

