begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|BridgeMethodTest
specifier|public
class|class
name|BridgeMethodTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testBridgeMethod ()
specifier|public
name|void
name|testBridgeMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:bar"
argument_list|)
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:bar"
argument_list|)
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
operator|new
name|MyMessageClass
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|MyFooBean
argument_list|()
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|MyBarBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"bean:foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:bar"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:bar"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MessageBaseClass
specifier|private
specifier|static
class|class
name|MessageBaseClass
block|{
DECL|field|i
specifier|final
name|int
name|i
decl_stmt|;
DECL|method|MessageBaseClass (int i)
specifier|public
name|MessageBaseClass
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
block|}
DECL|method|doubleIt ()
specifier|public
name|MessageBaseClass
name|doubleIt
parameter_list|()
block|{
return|return
operator|new
name|MessageBaseClass
argument_list|(
literal|2
operator|*
name|i
argument_list|)
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|MessageBaseClass
operator|)
name|o
operator|)
operator|.
name|i
operator|==
name|i
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|MyMessageClass
specifier|private
specifier|static
class|class
name|MyMessageClass
extends|extends
name|MessageBaseClass
block|{
DECL|method|MyMessageClass (int i)
specifier|public
name|MyMessageClass
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|doubleIt ()
specifier|public
name|MyMessageClass
name|doubleIt
parameter_list|()
block|{
return|return
operator|new
name|MyMessageClass
argument_list|(
literal|2
operator|*
name|i
argument_list|)
return|;
block|}
block|}
DECL|class|MyFooBean
specifier|private
specifier|static
class|class
name|MyFooBean
block|{
DECL|method|source ()
specifier|public
name|MyMessageClass
name|source
parameter_list|()
block|{
return|return
operator|new
name|MyMessageClass
argument_list|(
literal|2
argument_list|)
return|;
block|}
block|}
DECL|interface|MyBar
specifier|private
interface|interface
name|MyBar
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|function (T arg)
name|T
name|function
parameter_list|(
name|T
name|arg
parameter_list|)
function_decl|;
block|}
DECL|class|MyBarBean
specifier|private
specifier|static
class|class
name|MyBarBean
implements|implements
name|MyBar
argument_list|<
name|MessageBaseClass
argument_list|>
block|{
DECL|method|function (MessageBaseClass arg)
specifier|public
name|MessageBaseClass
name|function
parameter_list|(
name|MessageBaseClass
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|.
name|doubleIt
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

