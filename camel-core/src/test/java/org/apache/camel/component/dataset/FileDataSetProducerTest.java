begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dataset
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dataset
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|FileDataSetProducerTest
specifier|public
class|class
name|FileDataSetProducerTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Rule
DECL|field|tempFolder
specifier|public
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|dataSet
specifier|protected
name|FileDataSet
name|dataSet
decl_stmt|;
DECL|field|testPayload
specifier|final
name|String
name|testPayload
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Line 1%nLine 2%nLine 3%nLine 4%nLine 5%nLine 6%nLine 7%nLine 8%nLine 9%nLine 10%n"
argument_list|)
decl_stmt|;
DECL|field|sourceUri
specifier|final
name|String
name|sourceUri
init|=
literal|"direct://source"
decl_stmt|;
DECL|field|dataSetName
specifier|final
name|String
name|dataSetName
init|=
literal|"foo"
decl_stmt|;
DECL|field|dataSetUri
specifier|final
name|String
name|dataSetUri
init|=
literal|"dataset://"
operator|+
name|dataSetName
decl_stmt|;
annotation|@
name|Test
DECL|method|testDefaultListDataSet ()
specifier|public
name|void
name|testDefaultListDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|sourceUri
argument_list|,
name|testPayload
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultListDataSetWithSizeGreaterThanListSize ()
specifier|public
name|void
name|testDefaultListDataSetWithSizeGreaterThanListSize
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|20
decl_stmt|;
name|dataSet
operator|.
name|setSize
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
name|dataSetUri
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|sourceUri
argument_list|,
name|testPayload
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|fileDataset
init|=
name|createFileDatasetWithSystemEndOfLine
argument_list|()
decl_stmt|;
name|dataSet
operator|=
operator|new
name|FileDataSet
argument_list|(
name|fileDataset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected DataSet size"
argument_list|,
literal|1
argument_list|,
name|dataSet
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|createFileDatasetWithSystemEndOfLine ()
specifier|private
name|File
name|createFileDatasetWithSystemEndOfLine
parameter_list|()
throws|throws
name|IOException
block|{
name|tempFolder
operator|.
name|create
argument_list|()
expr_stmt|;
name|File
name|fileDataset
init|=
name|tempFolder
operator|.
name|newFile
argument_list|(
literal|"file-dataset-test.txt"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|testPayload
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|fileDataset
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
return|return
name|fileDataset
return|;
block|}
annotation|@
name|Override
DECL|method|createJndiContext ()
specifier|protected
name|Context
name|createJndiContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
name|super
operator|.
name|createJndiContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|bind
argument_list|(
name|dataSetName
argument_list|,
name|dataSet
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sourceUri
argument_list|)
operator|.
name|to
argument_list|(
name|dataSetUri
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

