begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_comment
comment|/**  * Unit test for consuming files but the exchange fails and is handled  * by the failure handler (usually the DeadLetterChannel)  */
end_comment

begin_class
DECL|class|FileConsumerFailureHandledTest
specifier|public
class|class
name|FileConsumerFailureHandledTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/messages"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParis ()
specifier|public
name|void
name|testParis
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/messages"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:valid"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Paris"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file:target/messages/input/?delete=true"
argument_list|,
literal|"Paris"
argument_list|,
name|FileComponent
operator|.
name|HEADER_FILE_NAME
argument_list|,
literal|"paris.txt"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// sleep otherwise the file assertions below could fail
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|asserFiles
argument_list|(
literal|"paris.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testLondon ()
specifier|public
name|void
name|testLondon
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/messages"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:invalid"
argument_list|)
decl_stmt|;
comment|// we get the original input so its not Hello London but only London
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"London"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file:target/messages/input/?delete=true"
argument_list|,
literal|"London"
argument_list|,
name|FileComponent
operator|.
name|HEADER_FILE_NAME
argument_list|,
literal|"london.txt"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// sleep otherwise the file assertions below could fail
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|asserFiles
argument_list|(
literal|"london.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMadrid ()
specifier|public
name|void
name|testMadrid
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/messages"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:error"
argument_list|)
decl_stmt|;
comment|// we get the original input so its not Hello London but only London
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Madrid"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file:target/messages/input/?delete=true"
argument_list|,
literal|"Madrid"
argument_list|,
name|FileComponent
operator|.
name|HEADER_FILE_NAME
argument_list|,
literal|"madrid.txt"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// sleep otherwise the file assertions below could fail
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|asserFiles
argument_list|(
literal|"madrid.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|asserFiles (String filename)
specifier|private
specifier|static
name|void
name|asserFiles
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
comment|// file should be deleted as deleted=true in parameter in the route below
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/messages/input/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File "
operator|+
name|filename
operator|+
literal|" should be deleted"
argument_list|,
literal|false
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// and no lock files
name|file
operator|=
operator|new
name|File
argument_list|(
literal|"target/messages/input/"
operator|+
name|filename
operator|+
name|FileEndpoint
operator|.
name|DEFAULT_LOCK_FILE_POSTFIX
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File "
operator|+
name|filename
operator|+
literal|" lock should be deleted"
argument_list|,
literal|false
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure mock:error is the dead letter channel
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:error"
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// special failure handler for ValidationException
name|onException
argument_list|(
name|ValidationException
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:invalid"
argument_list|)
expr_stmt|;
comment|// our route logic to process files from the input folder
name|from
argument_list|(
literal|"file:target/messages/input/?delete=true"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyValidatorProcessor
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:valid"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyValidatorProcessor
specifier|private
class|class
name|MyValidatorProcessor
implements|implements
name|Processor
block|{
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"London"
operator|.
name|equals
argument_list|(
name|body
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
name|exchange
argument_list|,
literal|"Forced exception by unit test"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"Madrid"
operator|.
name|equals
argument_list|(
name|body
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Madrid is not a supported city"
argument_list|)
throw|;
block|}
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello "
operator|+
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

