begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SimpleRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests whether the ValidatorEndpoint.clearCachedSchema() can be executed when  * several sender threads are running.  */
end_comment

begin_class
DECL|class|ValidatorEndpointClearCachedSchemaTest
specifier|public
class|class
name|ValidatorEndpointClearCachedSchemaTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ValidatorEndpointClearCachedSchemaTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|simpleReg
specifier|private
name|SimpleRegistry
name|simpleReg
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Test
DECL|method|testClearCachedSchema ()
specifier|public
name|void
name|testClearCachedSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
comment|// send one message for start up to finish.
operator|new
name|Sender
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// send with 5 sender threads in parallel and call clear cache in
comment|// between
name|ExecutorService
name|senderPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorClearCache
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|senderPool
operator|.
name|execute
argument_list|(
operator|new
name|Sender
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
comment|/**                  * The clear cache thread calls xsdEndpoint.clearCachedSchema                  */
name|executorClearCache
operator|.
name|execute
argument_list|(
operator|new
name|ClearCache
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|senderPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorClearCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|senderPool
operator|.
name|awaitTermination
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|exchanges
argument_list|)
expr_stmt|;
comment|// expect at least 5 correct sent messages, the messages sent before
comment|// the clearCacheSchema method is called will fail with a validation
comment|// error and will nor result in an exchange
name|assertTrue
argument_list|(
literal|"Less then expected exchanges"
argument_list|,
name|exchanges
operator|.
name|size
argument_list|()
operator|>
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|simpleReg
operator|=
operator|new
name|SimpleRegistry
argument_list|()
expr_stmt|;
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|(
name|simpleReg
argument_list|)
expr_stmt|;
name|context
operator|.
name|setClassResolver
argument_list|(
operator|new
name|ClassResolverImpl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"validator:pd:somefile.xsd"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:after"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|Sender
specifier|private
class|class
name|Sender
implements|implements
name|Runnable
block|{
DECL|field|message
specifier|private
specifier|final
name|String
name|message
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
comment|//
literal|"<p:TestMessage xmlns:p=\"http://apache.camel.org/test\">"
operator|+
comment|//
literal|"<MessageContent>MessageContent</MessageContent>"
operator|+
comment|//
literal|"</p:TestMessage>"
decl_stmt|;
DECL|field|messageBytes
specifier|private
specifier|final
name|byte
index|[]
name|messageBytes
init|=
name|message
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// send up to 5 messages
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|messageBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ClearCache
specifier|private
class|class
name|ClearCache
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// start later after the first sender
comment|// threads are running
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|clearCachedSchema
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|clearCachedSchema ()
specifier|private
name|void
name|clearCachedSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|context
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Endpoint URI: "
operator|+
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"validator:"
argument_list|)
condition|)
block|{
name|ValidatorEndpoint
name|xsltEndpoint
init|=
operator|(
name|ValidatorEndpoint
operator|)
name|endpoint
decl_stmt|;
name|xsltEndpoint
operator|.
name|clearCachedSchema
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"schema cache cleared"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Class to simulate a change of the XSD document. During the first call of      * the resource a XSD is returned which does not fit to the XML document. In      * the second call a XSD fitting to the XML document is returned.      */
DECL|class|ClassResolverImpl
specifier|static
class|class
name|ClassResolverImpl
extends|extends
name|DefaultClassResolver
block|{
DECL|field|xsdtemplate1
specifier|private
specifier|final
name|String
name|xsdtemplate1
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
comment|//
literal|"<xsd:schema targetNamespace=\"http://apache.camel.org/test\" xmlns=\"http://apache.camel.org/test\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">"
operator|+
comment|//
literal|"<xsd:complexType name=\"TestMessage\">"
operator|+
comment|//
literal|"<xsd:sequence>"
operator|+
comment|//
literal|"<xsd:element name=\"Content\" type=\"xsd:string\" />"
operator|+
comment|// //
comment|// wrong
comment|// element
comment|// name
comment|// will
comment|// cause
comment|// the
comment|// validation
comment|// to
comment|// fail
literal|"</xsd:sequence>"
operator|+
comment|//
literal|"<xsd:attribute name=\"attr\" type=\"xsd:string\" default=\"xsd1\"/>"
operator|+
comment|//
literal|"</xsd:complexType>"
operator|+
comment|//
literal|"<xsd:element name=\"TestMessage\" type=\"TestMessage\" />"
operator|+
comment|//
literal|"</xsd:schema>"
decl_stmt|;
comment|//
DECL|field|xsdtemplate2
specifier|private
specifier|final
name|String
name|xsdtemplate2
init|=
name|xsdtemplate1
operator|.
name|replace
argument_list|(
literal|"\"Content\""
argument_list|,
literal|"\"MessageContent\""
argument_list|)
decl_stmt|;
comment|// correct
comment|// element
comment|// name
comment|// -->
comment|// validation
comment|// will
comment|// be
comment|// correct
DECL|field|xsd1
specifier|private
name|byte
index|[]
name|xsd1
init|=
name|xsdtemplate1
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|xsd2
specifier|private
name|byte
index|[]
name|xsd2
init|=
name|xsdtemplate2
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
DECL|field|counter
specifier|private
specifier|volatile
name|short
name|counter
decl_stmt|;
annotation|@
name|Override
DECL|method|loadResourceAsStream (String uri)
specifier|public
name|InputStream
name|loadResourceAsStream
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"pd:"
argument_list|)
condition|)
block|{
name|byte
index|[]
name|xsd
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|0
condition|)
block|{
name|xsd
operator|=
name|xsd1
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"resolved XSD1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xsd
operator|=
name|xsd2
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"resolved XSD2"
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|xsd
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|loadResourceAsStream
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

