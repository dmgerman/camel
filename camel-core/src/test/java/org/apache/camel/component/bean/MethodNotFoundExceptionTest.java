begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_class
DECL|class|MethodNotFoundExceptionTest
specifier|public
class|class
name|MethodNotFoundExceptionTest
extends|extends
name|TestCase
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|MyDummyBean
name|bean
init|=
operator|new
name|MyDummyBean
argument_list|()
decl_stmt|;
name|String
name|methodName
init|=
literal|"foo"
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|>
name|parameterTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
name|parameterTypes
operator|.
name|add
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|parameterTypes
operator|.
name|add
argument_list|(
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|MethodNotFoundException
name|exception
init|=
operator|new
name|MethodNotFoundException
argument_list|(
name|exchange
argument_list|,
name|bean
argument_list|,
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|exchange
argument_list|,
name|exception
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|bean
argument_list|,
name|exception
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|methodName
argument_list|,
name|exception
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parameterTypes
argument_list|,
name|exception
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Method with name: foo and parameter types: [class java.lang.String, "
operator|+
literal|"class java.lang.Long] not found on bean: "
operator|+
literal|"org.apache.camel.component.bean.MyDummyBean. Exchange[null]"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

