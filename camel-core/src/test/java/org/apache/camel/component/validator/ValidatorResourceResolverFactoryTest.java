begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|SimpleExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSResourceResolver
import|;
end_import

begin_class
DECL|class|ValidatorResourceResolverFactoryTest
specifier|public
class|class
name|ValidatorResourceResolverFactoryTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|registry
specifier|private
name|JndiRegistry
name|registry
decl_stmt|;
DECL|method|testConfigurationOnEndpoint ()
specifier|public
name|void
name|testConfigurationOnEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ensure that validator from test method "testConfigurationOnComponent"
comment|// is unbind
name|registry
operator|.
name|getContext
argument_list|()
operator|.
name|unbind
argument_list|(
literal|"validator"
argument_list|)
expr_stmt|;
name|String
name|directStart
init|=
literal|"direct:start"
decl_stmt|;
name|String
name|endpointUri
init|=
literal|"validator:org/apache/camel/component/validator/xsds/person.xsd?resourceResolverFactory=#resourceResolverFactory"
decl_stmt|;
name|execute
argument_list|(
name|directStart
argument_list|,
name|endpointUri
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfigurationOnComponent ()
specifier|public
name|void
name|testConfigurationOnComponent
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set resource resolver factory on component
name|ValidatorComponent
name|validatorComponent
init|=
operator|new
name|ValidatorComponent
argument_list|()
decl_stmt|;
name|validatorComponent
operator|.
name|setResourceResolverFactory
argument_list|(
operator|new
name|ResourceResolverFactoryImpl
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"validator"
argument_list|,
name|validatorComponent
argument_list|)
expr_stmt|;
name|String
name|directStart
init|=
literal|"direct:startComponent"
decl_stmt|;
name|String
name|endpointUri
init|=
literal|"validator:org/apache/camel/component/validator/xsds/person.xsd"
decl_stmt|;
name|execute
argument_list|(
name|directStart
argument_list|,
name|endpointUri
argument_list|)
expr_stmt|;
block|}
DECL|method|execute (String directStart, String endpointUri)
name|void
name|execute
parameter_list|(
name|String
name|directStart
parameter_list|,
name|String
name|endpointUri
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|MockEndpoint
name|endEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:end"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|body
init|=
literal|"<p:person user=\"james\" xmlns:p=\"org.person\" xmlns:h=\"org.health.check.person\" xmlns:c=\"org.health.check.common\">\n"
comment|//
operator|+
literal|"<p:firstName>James</p:firstName>\n"
comment|//
operator|+
literal|"<p:lastName>Strachan</p:lastName>\n"
comment|//
operator|+
literal|"<p:city>London</p:city>\n"
comment|//
operator|+
literal|"<h:health>\n"
comment|//
operator|+
literal|"<h:lastCheck>2011-12-23</h:lastCheck>\n"
comment|//
operator|+
literal|"<h:status>OK</h:status>\n"
comment|//
operator|+
literal|"<c:commonElement>"
comment|//
operator|+
literal|"<c:element1/>"
comment|//
operator|+
literal|"<c:element2/>"
comment|//
operator|+
literal|"</c:commonElement>"
comment|//
operator|+
literal|"</h:health>\n"
comment|//
operator|+
literal|"</p:person>"
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|directStart
argument_list|,
name|body
argument_list|)
expr_stmt|;
comment|// fetch dynamic endpoint
name|ValidatorEndpoint
name|validatorEndpoint
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|validatorEndpoint
operator|=
name|resolveMandatoryEndpoint
argument_list|(
name|endpointUri
argument_list|,
name|ValidatorEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|validatorEndpoint
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
comment|// wait until endpoint is resolved
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|endEndpoint
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|validatorEndpoint
argument_list|)
expr_stmt|;
name|CustomResourceResolver
name|resolver
init|=
operator|(
name|CustomResourceResolver
operator|)
name|validatorEndpoint
operator|.
name|getResourceResolver
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|uris
init|=
name|resolver
operator|.
name|getResolvedResourceUris
argument_list|()
decl_stmt|;
name|checkResourceUri
argument_list|(
name|uris
argument_list|,
literal|"../type2.xsd"
argument_list|)
expr_stmt|;
name|checkResourceUri
argument_list|(
name|uris
argument_list|,
literal|"health/health.xsd"
argument_list|)
expr_stmt|;
name|checkResourceUri
argument_list|(
name|uris
argument_list|,
literal|"type1.xsd"
argument_list|)
expr_stmt|;
name|checkResourceUri
argument_list|(
name|uris
argument_list|,
literal|"common/common.xsd"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkResourceUri (Set<String> uris, String resourceUri)
name|void
name|checkResourceUri
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|uris
parameter_list|,
name|String
name|resourceUri
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Missing resource uri "
operator|+
name|resourceUri
operator|+
literal|" in resolved resource URI set"
argument_list|,
name|uris
operator|.
name|contains
argument_list|(
name|resourceUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|registry
operator|=
name|super
operator|.
name|createRegistry
argument_list|()
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"resourceResolverFactory"
argument_list|,
operator|new
name|ResourceResolverFactoryImpl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RouteBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"xsd_file"
argument_list|,
operator|new
name|ConstantExpression
argument_list|(
literal|"org/apache/camel/component/validator/xsds/person.xsd"
argument_list|)
argument_list|)
operator|.
name|recipientList
argument_list|(
operator|new
name|SimpleExpression
argument_list|(
literal|"validator:${header.xsd_file}?resourceResolverFactory=#resourceResolverFactory"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:startComponent"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"xsd_file"
argument_list|,
operator|new
name|ConstantExpression
argument_list|(
literal|"org/apache/camel/component/validator/xsds/person.xsd"
argument_list|)
argument_list|)
operator|.
name|recipientList
argument_list|(
operator|new
name|SimpleExpression
argument_list|(
literal|"validator:${header.xsd_file}"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_class
unit|}      static
DECL|class|ResourceResolverFactoryImpl
class|class
name|ResourceResolverFactoryImpl
implements|implements
name|ValidatorResourceResolverFactory
block|{
annotation|@
name|Override
DECL|method|createResourceResolver (CamelContext camelContext, String rootResourceUri)
specifier|public
name|LSResourceResolver
name|createResourceResolver
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|rootResourceUri
parameter_list|)
block|{
return|return
operator|new
name|CustomResourceResolver
argument_list|(
name|camelContext
argument_list|,
name|rootResourceUri
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/** Custom resource resolver which collects all resolved resource URIs. */
end_comment

begin_class
DECL|class|CustomResourceResolver
specifier|static
class|class
name|CustomResourceResolver
extends|extends
name|DefaultLSResourceResolver
block|{
DECL|field|resolvedRsourceUris
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|resolvedRsourceUris
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CustomResourceResolver (CamelContext camelContext, String resourceUri)
name|CustomResourceResolver
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|resourceUri
parameter_list|)
block|{
name|super
argument_list|(
name|camelContext
argument_list|,
name|resourceUri
argument_list|)
expr_stmt|;
block|}
DECL|method|getResolvedResourceUris ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getResolvedResourceUris
parameter_list|()
block|{
return|return
name|resolvedRsourceUris
return|;
block|}
annotation|@
name|Override
DECL|method|resolveResource (String type, String namespaceURI, String publicId, String systemId, String baseURI)
specifier|public
name|LSInput
name|resolveResource
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|,
name|String
name|baseURI
parameter_list|)
block|{
name|LSInput
name|result
init|=
name|super
operator|.
name|resolveResource
argument_list|(
name|type
argument_list|,
name|namespaceURI
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|,
name|baseURI
argument_list|)
decl_stmt|;
name|resolvedRsourceUris
operator|.
name|add
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

unit|}
end_unit

