begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|BeanLifecycleTest
specifier|public
class|class
name|BeanLifecycleTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|statefulInstance
specifier|private
name|MyBean
name|statefulInstance
decl_stmt|;
DECL|field|statefulInstanceInRegistry
specifier|private
name|MyBean
name|statefulInstanceInRegistry
decl_stmt|;
DECL|field|statefulInstanceInRegistryNoCache
specifier|private
name|MyBean
name|statefulInstanceInRegistryNoCache
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|statefulInstance
operator|=
operator|new
name|MyBean
argument_list|()
expr_stmt|;
name|statefulInstanceInRegistry
operator|=
operator|new
name|MyBean
argument_list|()
expr_stmt|;
name|statefulInstanceInRegistryNoCache
operator|=
operator|new
name|MyBean
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stopped"
argument_list|,
name|statefulInstance
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stopped"
argument_list|,
name|statefulInstanceInRegistry
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statefulInstanceInRegistryNoCache
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|MyStatefulBean
operator|.
name|INSTANCES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBeanLifecycle ()
specifier|public
name|void
name|testBeanLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"started"
argument_list|,
name|statefulInstance
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"started"
argument_list|,
name|statefulInstanceInRegistry
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statefulInstanceInRegistryNoCache
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|MyStatefulBean
operator|.
name|INSTANCES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"statefulInstanceInRegistry"
argument_list|,
name|statefulInstanceInRegistry
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"statefulInstanceInRegistryNoCache"
argument_list|,
name|statefulInstanceInRegistryNoCache
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|bean
argument_list|(
name|statefulInstance
argument_list|,
literal|"doSomething"
argument_list|)
operator|.
name|bean
argument_list|(
name|MyStatefulBean
operator|.
name|class
argument_list|,
literal|"doSomething"
argument_list|)
operator|.
name|bean
argument_list|(
name|MyStatefulBean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"doSomething"
argument_list|,
literal|true
argument_list|)
operator|.
name|bean
argument_list|(
name|MyStatelessBean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"doSomething"
argument_list|,
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:statefulInstanceInRegistry?method=doSomething&cache=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:statefulInstanceInRegistryNoCache?method=doSomething&cache=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyBean
specifier|public
specifier|static
class|class
name|MyBean
implements|implements
name|Service
block|{
DECL|field|status
specifier|private
name|String
name|status
decl_stmt|;
DECL|method|getStatus ()
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|doSomething (Exchange exchange)
specifier|public
name|void
name|doSomething
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|status
operator|=
literal|"started"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|status
operator|=
literal|"stopped"
expr_stmt|;
block|}
block|}
DECL|class|MyStatelessBean
specifier|public
specifier|static
class|class
name|MyStatelessBean
implements|implements
name|Service
block|{
DECL|method|doSomething (Exchange exchange)
specifier|public
name|void
name|doSomething
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"Should not be invoked"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"Should not be invoked"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyStatefulBean
specifier|public
specifier|static
class|class
name|MyStatefulBean
implements|implements
name|Service
block|{
DECL|field|INSTANCES
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|INSTANCES
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|MyStatefulBean ()
specifier|public
name|MyStatefulBean
parameter_list|()
block|{
name|INSTANCES
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|doSomething (Exchange exchange)
specifier|public
name|void
name|doSomething
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{         }
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{         }
block|}
block|}
end_class

end_unit

