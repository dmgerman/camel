begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|MyServiceProxyTest
specifier|public
class|class
name|MyServiceProxyTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testOk ()
specifier|public
name|void
name|testOk
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|myService
init|=
name|ProxyHelper
operator|.
name|createProxy
argument_list|(
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
argument_list|,
name|MyService
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|reply
init|=
name|myService
operator|.
name|method
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Camel in Action"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
DECL|method|testKaboom ()
specifier|public
name|void
name|testKaboom
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|myService
init|=
name|ProxyHelper
operator|.
name|createProxy
argument_list|(
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
argument_list|,
name|MyService
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|myService
operator|.
name|method
argument_list|(
literal|"Kaboom"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Damn"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCheckedException ()
specifier|public
name|void
name|testCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|myService
init|=
name|ProxyHelper
operator|.
name|createProxy
argument_list|(
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
argument_list|,
name|MyService
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|myService
operator|.
name|method
argument_list|(
literal|"Tiger in Action"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MyApplicationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No tigers"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedRuntimeCheckedException ()
specifier|public
name|void
name|testNestedRuntimeCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|myService
init|=
name|ProxyHelper
operator|.
name|createProxy
argument_list|(
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
argument_list|,
name|MyService
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|myService
operator|.
name|method
argument_list|(
literal|"Donkey in Action"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MyApplicationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No donkeys"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedCheckedCheckedException ()
specifier|public
name|void
name|testNestedCheckedCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|myService
init|=
name|ProxyHelper
operator|.
name|createProxy
argument_list|(
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
argument_list|,
name|MyService
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|myService
operator|.
name|method
argument_list|(
literal|"Elephant in Action"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MyApplicationException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No elephants"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Tiger in Action"
argument_list|)
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|MyApplicationException
argument_list|(
literal|"No tigers"
argument_list|,
literal|9
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Donkey in Action"
argument_list|)
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|RuntimeCamelException
argument_list|(
operator|new
name|MyApplicationException
argument_list|(
literal|"No donkeys"
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Elephant in Action"
argument_list|)
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|MyCustomException
argument_list|(
literal|"Damn"
argument_list|,
operator|new
name|MyApplicationException
argument_list|(
literal|"No elephants"
argument_list|,
literal|7
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Kaboom"
argument_list|)
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Damn"
argument_list|)
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|transform
argument_list|(
name|constant
argument_list|(
literal|"Camel in Action"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

