begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.vm
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|vm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_class
DECL|class|VmMultipleConsumersMultipleContextTest
specifier|public
class|class
name|VmMultipleConsumersMultipleContextTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testMultipleVMConsumersSameContext ()
specifier|public
name|void
name|testMultipleVMConsumersSameContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|ProducerTemplate
name|producerTemplate
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|(
name|camelContext
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:route1"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|RouteBuilder
name|builder2
init|=
operator|new
name|RouteBuilder
argument_list|(
name|camelContext
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:route2"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|camelContext
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addRoutes
argument_list|(
name|builder2
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mock1
init|=
operator|(
name|MockEndpoint
operator|)
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:route1"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mock2
init|=
operator|(
name|MockEndpoint
operator|)
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:route2"
argument_list|)
decl_stmt|;
name|mock1
operator|.
name|expectedMessageCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|mock2
operator|.
name|expectedMessageCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|producerTemplate
operator|.
name|sendBody
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|mock1
argument_list|,
name|mock2
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testVmMultipleConsumersMultipleContext ()
specifier|public
name|void
name|testVmMultipleConsumersMultipleContext
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start context 1
name|CamelContext
name|consumerContext1
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|consumerContext1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:route1"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|consumerContext1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|route1Mock
init|=
operator|(
name|MockEndpoint
operator|)
name|consumerContext1
operator|.
name|getEndpoint
argument_list|(
literal|"mock:route1"
argument_list|)
decl_stmt|;
name|route1Mock
operator|.
name|expectedMessageCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// start up context 2
name|CamelContext
name|consumerContext2
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|consumerContext2
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:route2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|consumerContext2
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|route2Mock
init|=
operator|(
name|MockEndpoint
operator|)
name|consumerContext2
operator|.
name|getEndpoint
argument_list|(
literal|"mock:route2"
argument_list|)
decl_stmt|;
name|route2Mock
operator|.
name|expectedMessageCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// use context part of contextTestSupport to send in messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|route1Mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|route2Mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|consumerContext1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|consumerContext2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|buildConsumerContext (final String route)
specifier|private
name|CamelContext
name|buildConsumerContext
parameter_list|(
specifier|final
name|String
name|route
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|rc
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|rc
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
name|route
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:"
operator|+
name|route
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rc
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|method|testVmMultipleConsumersDifferentEndpoints ()
specifier|public
name|void
name|testVmMultipleConsumersDifferentEndpoints
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start context 1
name|CamelContext
name|consumerContext1
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|consumerContext1
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:route1"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|consumerContext1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|route1Mock
init|=
operator|(
name|MockEndpoint
operator|)
name|consumerContext1
operator|.
name|getEndpoint
argument_list|(
literal|"mock:route1"
argument_list|)
decl_stmt|;
name|route1Mock
operator|.
name|expectedMessageCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// start up context 2
name|CamelContext
name|consumerContext2
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|consumerContext2
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"vm:foo?multipleConsumers=true"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:route2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|consumerContext2
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|route2Mock
init|=
operator|(
name|MockEndpoint
operator|)
name|consumerContext2
operator|.
name|getEndpoint
argument_list|(
literal|"mock:route2"
argument_list|)
decl_stmt|;
name|route2Mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// use context part of contextTestSupport to send in messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"vm:producer?multipleConsumers=true"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|route1Mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|route2Mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|consumerContext1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|consumerContext2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

