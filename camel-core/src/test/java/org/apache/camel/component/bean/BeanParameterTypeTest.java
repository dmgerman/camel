begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 736324 $  */
end_comment

begin_class
DECL|class|BeanParameterTypeTest
specifier|public
class|class
name|BeanParameterTypeTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|regisry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|regisry
operator|.
name|bind
argument_list|(
literal|"myBean"
argument_list|,
operator|new
name|MyDummyBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regisry
return|;
block|}
DECL|method|testBeanRef ()
specifier|public
name|void
name|testBeanRef
parameter_list|()
throws|throws
name|Exception
block|{
name|beanWithParameterType
argument_list|(
literal|"direct:beanRef"
argument_list|,
literal|"mock:beanRefResult"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBeanClass ()
specifier|public
name|void
name|testBeanClass
parameter_list|()
throws|throws
name|Exception
block|{
name|beanWithParameterType
argument_list|(
literal|"direct:beanClass"
argument_list|,
literal|"mock:beanClassResult"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBeanInstance ()
specifier|public
name|void
name|testBeanInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|beanWithParameterType
argument_list|(
literal|"direct:beanInstance"
argument_list|,
literal|"mock:beanInstanceResult"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterWithBeanClass ()
specifier|public
name|void
name|testFilterWithBeanClass
parameter_list|()
throws|throws
name|Exception
block|{
name|filterWithParameterType
argument_list|(
literal|"direct:filterClass"
argument_list|,
literal|"mock:filterClassResult"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterWithBeanInstance ()
specifier|public
name|void
name|testFilterWithBeanInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|filterWithParameterType
argument_list|(
literal|"direct:filterInstance"
argument_list|,
literal|"mock:filterInstanceResult"
argument_list|)
expr_stmt|;
block|}
DECL|method|beanWithParameterType (String startEndpoint, String mockEndpoint)
specifier|protected
name|void
name|beanWithParameterType
parameter_list|(
name|String
name|startEndpoint
parameter_list|,
name|String
name|mockEndpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|resolveMandatoryEndpoint
argument_list|(
name|mockEndpoint
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"String"
argument_list|,
literal|"String"
argument_list|,
literal|"String"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
operator|(
name|Object
operator|)
literal|"Camel"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Camel"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"Camel"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|filterWithParameterType (String startEndpoint, String mockEndpoint)
specifier|protected
name|void
name|filterWithParameterType
parameter_list|(
name|String
name|startEndpoint
parameter_list|,
name|String
name|mockEndpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|resolveMandatoryEndpoint
argument_list|(
name|mockEndpoint
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
operator|(
name|Object
operator|)
literal|"Camel"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Camel"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"Camel"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startEndpoint
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:beanRef"
argument_list|)
operator|.
name|beanRef
argument_list|(
literal|"myBean"
argument_list|,
literal|"bar"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:beanRefResult"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:beanClass"
argument_list|)
operator|.
name|bean
argument_list|(
name|MyDummyBean
operator|.
name|class
argument_list|,
literal|"bar"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:beanClassResult"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:beanInstance"
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|MyDummyBean
argument_list|()
argument_list|,
literal|"bar"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:beanInstanceResult"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:filterClass"
argument_list|)
operator|.
name|filter
argument_list|()
operator|.
name|method
argument_list|(
name|MyDummyBean
operator|.
name|class
argument_list|,
literal|"shouldProcess"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:filterClassResult"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:filterInstance"
argument_list|)
operator|.
name|filter
argument_list|()
operator|.
name|method
argument_list|(
operator|new
name|MyDummyBean
argument_list|()
argument_list|,
literal|"shouldProcess"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:filterInstanceResult"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

