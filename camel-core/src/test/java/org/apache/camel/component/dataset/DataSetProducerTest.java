begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dataset
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dataset
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|DataSetProducerTest
specifier|public
class|class
name|DataSetProducerTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|dataSet
specifier|protected
name|SimpleDataSet
name|dataSet
init|=
operator|new
name|SimpleDataSet
argument_list|(
literal|20
argument_list|)
decl_stmt|;
DECL|field|dataSetName
specifier|final
name|String
name|dataSetName
init|=
literal|"foo"
decl_stmt|;
DECL|field|dataSetUri
specifier|final
name|String
name|dataSetUri
init|=
literal|"dataset://"
operator|+
name|dataSetName
decl_stmt|;
DECL|field|dataSetUriWithDisableDataSetIndexSetToFalse
specifier|final
name|String
name|dataSetUriWithDisableDataSetIndexSetToFalse
init|=
name|dataSetUri
operator|+
literal|"?disableDataSetIndex=false"
decl_stmt|;
DECL|field|dataSetUriWithDisableDataSetIndexSetToTrue
specifier|final
name|String
name|dataSetUriWithDisableDataSetIndexSetToTrue
init|=
name|dataSetUri
operator|+
literal|"?disableDataSetIndex=true"
decl_stmt|;
DECL|field|sourceUri
specifier|final
name|String
name|sourceUri
init|=
literal|"direct://source"
decl_stmt|;
DECL|field|resultUri
specifier|final
name|String
name|resultUri
init|=
literal|"mock://result"
decl_stmt|;
annotation|@
name|Override
DECL|method|createJndiContext ()
specifier|protected
name|Context
name|createJndiContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
name|super
operator|.
name|createJndiContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|bind
argument_list|(
name|dataSetName
argument_list|,
name|dataSet
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Test
DECL|method|testSendingMessagesExplicitlyToDataSetEndpoint ()
specifier|public
name|void
name|testSendingMessagesExplicitlyToDataSetEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|dataSetUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndex ()
specifier|public
name|void
name|testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|dataSetUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|/**      * Verfiy that the CamelDataSetIndex header is optional when the disableDataSetIndex parameter is unset      */
annotation|@
name|Test
DECL|method|testNotSettingDataSetIndexHeaderWhenDisableDataSetIndexUriParameterIsUnset ()
specifier|public
name|void
name|testNotSettingDataSetIndexHeaderWhenDisableDataSetIndexUriParameterIsUnset
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|0
operator|==
operator|(
name|size
operator|%
literal|2
operator|)
condition|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|dataSetUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|dataSetUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|/**      * Verfiy tha the CamelDataSetIndex header is optional when the disableDataSetIndex parameter is true      */
annotation|@
name|Test
DECL|method|testNotSettingDataSetIndexHeaderWhenDisableDataSetIndexUriParameterSetToTrue ()
specifier|public
name|void
name|testNotSettingDataSetIndexHeaderWhenDisableDataSetIndexUriParameterSetToTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|0
operator|==
operator|(
name|size
operator|%
literal|2
operator|)
condition|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToTrue
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToTrue
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{         }
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|/**      * Verify tha the CamelDataSetIndex header is required when the disableDataSetIndex parameter is false      */
annotation|@
name|Test
DECL|method|testNotSettingDataSetIndexHeaderWhenDisableDataSetIndexUriParameterSetToFalse ()
specifier|public
name|void
name|testNotSettingDataSetIndexHeaderWhenDisableDataSetIndexUriParameterSetToFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToFalse
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getMockEndpoint
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToFalse
argument_list|)
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|assertionError
parameter_list|)
block|{
comment|// Check as much of the string as possible - but the ExchangeID at the end will be unique
name|String
name|expectedErrorString
init|=
name|dataSetUriWithDisableDataSetIndexSetToFalse
operator|+
literal|" Failed due to caught exception: "
operator|+
name|NoSuchHeaderException
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|": No '"
operator|+
name|Exchange
operator|.
name|DATASET_INDEX
operator|+
literal|"' header available of type: java.lang.Long. Exchange"
decl_stmt|;
name|String
name|actualErrorString
init|=
name|assertionError
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualErrorString
operator|.
name|startsWith
argument_list|(
name|expectedErrorString
argument_list|)
condition|)
block|{
comment|// This is what we expect
return|return;
block|}
else|else
block|{
throw|throw
name|assertionError
throw|;
block|}
block|}
name|fail
argument_list|(
literal|"AssertionError should have been generated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndexAndDisableDataSetIndexUriParameterSetToTrue ()
specifier|public
name|void
name|testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndexAndDisableDataSetIndexUriParameterSetToTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToTrue
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableDataSetIndexUriParameterUnset ()
specifier|public
name|void
name|testDisableDataSetIndexUriParameterUnset
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sourceUri
argument_list|)
operator|.
name|to
argument_list|(
name|dataSetUri
argument_list|)
operator|.
name|to
argument_list|(
name|resultUri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
name|resultUri
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
expr_stmt|;
name|result
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|result
operator|.
name|expectsAscending
argument_list|(
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|result
operator|.
name|assertMessagesAscending
argument_list|(
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableDataSetIndexUriParameterSetToTrue ()
specifier|public
name|void
name|testDisableDataSetIndexUriParameterSetToTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sourceUri
argument_list|)
operator|.
name|to
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToTrue
argument_list|)
operator|.
name|to
argument_list|(
name|resultUri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
name|resultUri
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
expr_stmt|;
name|result
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableDataSetIndexUriParameterSetToFalse ()
specifier|public
name|void
name|testDisableDataSetIndexUriParameterSetToFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sourceUri
argument_list|)
operator|.
name|to
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToFalse
argument_list|)
operator|.
name|to
argument_list|(
name|resultUri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
name|resultUri
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectsAscending
argument_list|(
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidDataSetIndexValueWithDisableDataSetIndexUriParameterUnset ()
specifier|public
name|void
name|testInvalidDataSetIndexValueWithDisableDataSetIndexUriParameterUnset
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sourceUri
argument_list|)
operator|.
name|to
argument_list|(
name|dataSetUri
argument_list|)
operator|.
name|to
argument_list|(
name|resultUri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
name|resultUri
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
expr_stmt|;
name|result
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
operator|(
name|size
operator|/
literal|2
operator|)
condition|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|assertionError
parameter_list|)
block|{
comment|// Check as much of the string as possible - but the ExchangeID at the end will be unique
name|String
name|expectedErrorString
init|=
name|dataSetUri
operator|+
literal|" Failed due to caught exception: "
operator|+
name|AssertionError
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|": Header: "
operator|+
name|Exchange
operator|.
name|DATASET_INDEX
operator|+
literal|" does not match. Expected: "
operator|+
name|size
operator|/
literal|2
operator|+
literal|" but was: "
operator|+
operator|(
name|size
operator|/
literal|2
operator|+
literal|10
operator|)
operator|+
literal|" on Exchange"
decl_stmt|;
name|String
name|actualErrorString
init|=
name|assertionError
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualErrorString
operator|.
name|startsWith
argument_list|(
name|expectedErrorString
argument_list|)
condition|)
block|{
comment|// This is what we expect
return|return;
block|}
else|else
block|{
throw|throw
name|assertionError
throw|;
block|}
block|}
name|fail
argument_list|(
literal|"AssertionError should have been generated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidDataSetIndexValueWithDisableDataSetIndexUriParameterSetToTrue ()
specifier|public
name|void
name|testInvalidDataSetIndexValueWithDisableDataSetIndexUriParameterSetToTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sourceUri
argument_list|)
operator|.
name|to
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToTrue
argument_list|)
operator|.
name|to
argument_list|(
name|resultUri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
name|resultUri
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
operator|(
name|size
operator|/
literal|2
operator|)
condition|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidDataSetIndexValueWithDisableDataSetIndexUriParameterSetToFalse ()
specifier|public
name|void
name|testInvalidDataSetIndexValueWithDisableDataSetIndexUriParameterSetToFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sourceUri
argument_list|)
operator|.
name|to
argument_list|(
name|dataSetUriWithDisableDataSetIndexSetToFalse
argument_list|)
operator|.
name|to
argument_list|(
name|resultUri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|dataSet
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
name|resultUri
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
expr_stmt|;
name|result
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
operator|(
name|size
operator|/
literal|2
operator|)
condition|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|sourceUri
argument_list|,
name|dataSet
operator|.
name|getDefaultBody
argument_list|()
argument_list|,
name|Exchange
operator|.
name|DATASET_INDEX
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|assertionError
parameter_list|)
block|{
comment|// Check as much of the string as possible - but the ExchangeID at the end will be unique
name|String
name|expectedErrorString
init|=
name|dataSetUriWithDisableDataSetIndexSetToFalse
operator|+
literal|" Failed due to caught exception: "
operator|+
name|AssertionError
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|": Header: "
operator|+
name|Exchange
operator|.
name|DATASET_INDEX
operator|+
literal|" does not match. Expected: "
operator|+
name|size
operator|/
literal|2
operator|+
literal|" but was: "
operator|+
operator|(
name|size
operator|/
literal|2
operator|+
literal|10
operator|)
operator|+
literal|" on Exchange"
decl_stmt|;
name|String
name|actualErrorString
init|=
name|assertionError
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualErrorString
operator|.
name|startsWith
argument_list|(
name|expectedErrorString
argument_list|)
condition|)
block|{
comment|// This is what we expect
return|return;
block|}
else|else
block|{
throw|throw
name|assertionError
throw|;
block|}
block|}
name|fail
argument_list|(
literal|"AssertionError should have been generated"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

