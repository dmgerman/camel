begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xslt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xslt
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|XsltBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ProcessorEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jndi
operator|.
name|JndiContext
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|XsltReferenceParameterTest
specifier|public
class|class
name|XsltReferenceParameterTest
extends|extends
name|TestSupport
block|{
DECL|field|TEST_URI_1
specifier|private
specifier|static
specifier|final
name|String
name|TEST_URI_1
init|=
literal|"xslt:org/apache/camel/component/xslt/transform.xsl?converter=#testConverter&transformerFactory=#testTransformerFactory"
decl_stmt|;
DECL|field|TEST_URI_2
specifier|private
specifier|static
specifier|final
name|String
name|TEST_URI_2
init|=
literal|"xslt:org/apache/camel/component/xslt/transform.xsl?converter=testConverter&transformerFactory=testTransformerFactory"
decl_stmt|;
DECL|field|testConverter
specifier|private
name|TestConverter
name|testConverter
decl_stmt|;
DECL|field|testTransformerFactory
specifier|private
name|TransformerFactory
name|testTransformerFactory
decl_stmt|;
DECL|field|builder1
specifier|private
name|XsltBuilder
name|builder1
decl_stmt|;
DECL|field|builder2
specifier|private
name|XsltBuilder
name|builder2
decl_stmt|;
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
operator|new
name|JndiRegistry
argument_list|(
operator|new
name|JndiContext
argument_list|()
argument_list|)
decl_stmt|;
name|RouteBuilder
name|builder
init|=
name|createRouteBuilder
argument_list|()
decl_stmt|;
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|registry
argument_list|)
decl_stmt|;
name|testConverter
operator|=
operator|new
name|TestConverter
argument_list|()
expr_stmt|;
name|testTransformerFactory
operator|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"testConverter"
argument_list|,
name|testConverter
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"testTransformerFactory"
argument_list|,
name|testTransformerFactory
argument_list|)
expr_stmt|;
name|ProcessorEndpoint
name|pep1
init|=
operator|(
name|ProcessorEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
name|TEST_URI_1
argument_list|)
decl_stmt|;
name|ProcessorEndpoint
name|pep2
init|=
operator|(
name|ProcessorEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
name|TEST_URI_2
argument_list|)
decl_stmt|;
name|builder1
operator|=
operator|(
name|XsltBuilder
operator|)
name|pep1
operator|.
name|getProcessor
argument_list|()
expr_stmt|;
name|builder2
operator|=
operator|(
name|XsltBuilder
operator|)
name|pep2
operator|.
name|getProcessor
argument_list|()
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testConverterReference ()
specifier|public
name|void
name|testConverterReference
parameter_list|()
block|{
name|assertSame
argument_list|(
name|testConverter
argument_list|,
name|builder1
operator|.
name|getConverter
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|testConverter
argument_list|,
name|builder2
operator|.
name|getConverter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransformerFactoryReference ()
specifier|public
name|void
name|testTransformerFactoryReference
parameter_list|()
block|{
name|assertSame
argument_list|(
name|testTransformerFactory
argument_list|,
name|builder1
operator|.
name|getConverter
argument_list|()
operator|.
name|getTransformerFactory
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|testTransformerFactory
argument_list|,
name|builder2
operator|.
name|getConverter
argument_list|()
operator|.
name|getTransformerFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:a"
argument_list|)
operator|.
name|to
argument_list|(
name|TEST_URI_1
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:b"
argument_list|)
operator|.
name|to
argument_list|(
name|TEST_URI_2
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|TestConverter
specifier|private
specifier|static
class|class
name|TestConverter
extends|extends
name|XmlConverter
block|{     }
block|}
end_class

end_unit

