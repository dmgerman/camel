begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|BeanOgnlBodyMethodReturnNullValueTest
specifier|public
class|class
name|BeanOgnlBodyMethodReturnNullValueTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testBothValue ()
specifier|public
name|void
name|testBothValue
parameter_list|()
block|{
name|ExamplePojo
name|fooBar
init|=
operator|new
name|ExamplePojo
argument_list|()
decl_stmt|;
name|fooBar
operator|.
name|setFoo
argument_list|(
literal|"foo1"
argument_list|)
expr_stmt|;
name|fooBar
operator|.
name|setBar
argument_list|(
literal|"bar2"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
name|fooBar
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo: foo1; bar: bar2"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullValue ()
specifier|public
name|void
name|testNullValue
parameter_list|()
block|{
name|ExamplePojo
name|fooBar
init|=
operator|new
name|ExamplePojo
argument_list|()
decl_stmt|;
name|fooBar
operator|.
name|setFoo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fooBar
operator|.
name|setBar
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
name|fooBar
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo: null; bar: test"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|ExampleBean
argument_list|()
argument_list|,
literal|"doWithFooBar(${body.foo}, ${body.bar})"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|ExampleBean
specifier|public
specifier|static
class|class
name|ExampleBean
block|{
DECL|method|doWithFooBar (String foo, String bar)
specifier|public
name|String
name|doWithFooBar
parameter_list|(
name|String
name|foo
parameter_list|,
name|String
name|bar
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"foo: %s; bar: %s"
argument_list|,
name|foo
argument_list|,
name|bar
argument_list|)
return|;
block|}
block|}
DECL|class|ExamplePojo
specifier|public
specifier|static
class|class
name|ExamplePojo
block|{
DECL|field|foo
specifier|private
name|String
name|foo
decl_stmt|;
DECL|field|bar
specifier|private
name|String
name|bar
decl_stmt|;
DECL|method|getFoo ()
specifier|public
name|String
name|getFoo
parameter_list|()
block|{
return|return
name|foo
return|;
block|}
DECL|method|setFoo (String foo)
specifier|public
name|void
name|setFoo
parameter_list|(
name|String
name|foo
parameter_list|)
block|{
name|this
operator|.
name|foo
operator|=
name|foo
expr_stmt|;
block|}
DECL|method|getBar ()
specifier|public
name|String
name|getBar
parameter_list|()
block|{
return|return
name|bar
return|;
block|}
DECL|method|setBar (String bar)
specifier|public
name|void
name|setBar
parameter_list|(
name|String
name|bar
parameter_list|)
block|{
name|this
operator|.
name|bar
operator|=
name|bar
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

