begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mock
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_class
DECL|class|MockPredicateEqualityTest
specifier|public
class|class
name|MockPredicateEqualityTest
extends|extends
name|ContextTestSupport
block|{
DECL|method|testByteArray ()
specifier|public
name|void
name|testByteArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xde
block|,
operator|(
name|byte
operator|)
literal|0xed
block|,
operator|(
name|byte
operator|)
literal|0xbe
block|,
operator|(
name|byte
operator|)
literal|0xef
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntArray ()
specifier|public
name|void
name|testIntArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
operator|new
name|int
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharArray ()
specifier|public
name|void
name|testCharArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|"forbar"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringArray ()
specifier|public
name|void
name|testStringArray
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"this"
block|,
literal|"is"
block|,
literal|"an"
block|,
literal|"array"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doTest (final Object anArray)
specifier|public
name|void
name|doTest
parameter_list|(
specifier|final
name|Object
name|anArray
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:reverse"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|anArray
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|anArray
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|serialization
argument_list|()
operator|.
name|unmarshal
argument_list|()
operator|.
name|serialization
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:reverse"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

