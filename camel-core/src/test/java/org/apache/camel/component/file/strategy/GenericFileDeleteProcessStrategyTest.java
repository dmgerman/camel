begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.strategy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_comment
comment|/**  * Unit test about retrying deleting processed file, that can be a bit more tricky  * on some OS as java.io.delete can return wrong answer  *  * @version   */
end_comment

begin_class
DECL|class|GenericFileDeleteProcessStrategyTest
specifier|public
class|class
name|GenericFileDeleteProcessStrategyTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|existsCounter
specifier|private
specifier|static
name|int
name|existsCounter
decl_stmt|;
DECL|field|deleteCounter
specifier|private
specifier|static
name|int
name|deleteCounter
decl_stmt|;
DECL|class|MyGenericFileOperations
specifier|private
class|class
name|MyGenericFileOperations
implements|implements
name|GenericFileOperations
argument_list|<
name|Object
argument_list|>
block|{
DECL|method|setEndpoint (GenericFileEndpoint<Object> endpoint)
specifier|public
name|void
name|setEndpoint
parameter_list|(
name|GenericFileEndpoint
argument_list|<
name|Object
argument_list|>
name|endpoint
parameter_list|)
block|{         }
DECL|method|deleteFile (String name)
specifier|public
name|boolean
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|deleteCounter
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|existsFile (String name)
specifier|public
name|boolean
name|existsFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|existsCounter
operator|++
expr_stmt|;
comment|// The file name should be normalized
if|if
condition|(
name|FileUtil
operator|.
name|normalizePath
argument_list|(
literal|"target/foo/boom.txt"
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// test that we can newer delete this file
return|return
literal|true
return|;
block|}
return|return
name|existsCounter
operator|<=
literal|1
return|;
block|}
DECL|method|renameFile (String from, String to)
specifier|public
name|boolean
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|false
return|;
block|}
DECL|method|buildDirectory (String directory, boolean absolute)
specifier|public
name|boolean
name|buildDirectory
parameter_list|(
name|String
name|directory
parameter_list|,
name|boolean
name|absolute
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|false
return|;
block|}
DECL|method|retrieveFile (String name, Exchange exchange)
specifier|public
name|boolean
name|retrieveFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|false
return|;
block|}
DECL|method|storeFile (String name, Exchange exchange)
specifier|public
name|boolean
name|storeFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|false
return|;
block|}
DECL|method|getCurrentDirectory ()
specifier|public
name|String
name|getCurrentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|null
return|;
block|}
DECL|method|changeCurrentDirectory (String path)
specifier|public
name|void
name|changeCurrentDirectory
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{         }
DECL|method|changeToParentDirectory ()
specifier|public
name|void
name|changeToParentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{         }
DECL|method|listFiles ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|listFiles
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|null
return|;
block|}
DECL|method|listFiles (String path)
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|listFiles
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testTroubleDeletingFile ()
specifier|public
name|void
name|testTroubleDeletingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCounter
operator|=
literal|0
expr_stmt|;
name|existsCounter
operator|=
literal|0
expr_stmt|;
name|GenericFileEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"file://target/foo"
argument_list|,
name|GenericFileEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|GenericFile
name|file
init|=
operator|new
name|GenericFile
argument_list|()
decl_stmt|;
name|file
operator|.
name|setAbsoluteFilePath
argument_list|(
literal|"target/foo/me.txt"
argument_list|)
expr_stmt|;
name|GenericFileDeleteProcessStrategy
name|strategy
init|=
operator|new
name|GenericFileDeleteProcessStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|commit
argument_list|(
operator|new
name|MyGenericFileOperations
argument_list|()
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have tried to delete file 2 times"
argument_list|,
literal|2
argument_list|,
name|deleteCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have tried to delete file 2 times"
argument_list|,
literal|2
argument_list|,
name|existsCounter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testCannotDeleteFile ()
specifier|public
name|void
name|testCannotDeleteFile
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCounter
operator|=
literal|0
expr_stmt|;
name|existsCounter
operator|=
literal|0
expr_stmt|;
name|GenericFileEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"file://target/foo"
argument_list|,
name|GenericFileEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|GenericFile
name|file
init|=
operator|new
name|GenericFile
argument_list|()
decl_stmt|;
name|file
operator|.
name|setAbsoluteFilePath
argument_list|(
literal|"target/foo/boom.txt"
argument_list|)
expr_stmt|;
name|GenericFileDeleteProcessStrategy
name|strategy
init|=
operator|new
name|GenericFileDeleteProcessStrategy
argument_list|()
decl_stmt|;
try|try
block|{
name|strategy
operator|.
name|commit
argument_list|(
operator|new
name|MyGenericFileOperations
argument_list|()
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GenericFileOperationFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
literal|"Should have tried to delete file 3 times"
argument_list|,
literal|3
argument_list|,
name|deleteCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have tried to delete file 3 times"
argument_list|,
literal|3
argument_list|,
name|existsCounter
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

