begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.strategy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests the MarkerFileExclusiveReadLockStrategy in a multi-threaded scenario.  */
end_comment

begin_class
DECL|class|MarkerFileExclusiveReadLockStrategyReadLockFailedTest
specifier|public
class|class
name|MarkerFileExclusiveReadLockStrategyReadLockFailedTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MarkerFileExclusiveReadLockStrategyReadLockFailedTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/readlock/"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"target/readlock/in"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadLockFailed ()
specifier|public
name|void
name|testReadLockFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedFileExists
argument_list|(
literal|"target/readlock/out/file1.dat"
argument_list|)
expr_stmt|;
name|writeFiles
argument_list|()
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|String
name|content
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|File
argument_list|(
literal|"target/readlock/out/file1.dat"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|content
operator|.
name|split
argument_list|(
name|LS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Line "
operator|+
name|i
argument_list|,
name|lines
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// wait for a while for camel to clean up the file
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertFileDoesNotExists
argument_list|(
literal|"target/readlock/in/file1.dat.camelLock"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
literal|"target/readlock/in/file2.dat.camelLock"
argument_list|)
expr_stmt|;
name|assertFileDoesNotExists
argument_list|(
literal|"target/readlock/in/file1.dat"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
literal|"target/readlock/in/file2.dat"
argument_list|)
expr_stmt|;
name|File
name|lock
init|=
operator|new
name|File
argument_list|(
literal|"target/readlock/in/file2.dat.camelLock"
argument_list|)
decl_stmt|;
name|lock
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// wait for a while for camel to clean up the file
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
literal|"target/readlock/out/file2.dat"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFiles ()
specifier|private
name|void
name|writeFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing files..."
argument_list|)
expr_stmt|;
comment|// create a camelLock file first
name|File
name|lock
init|=
operator|new
name|File
argument_list|(
literal|"target/readlock/in/file2.dat.camelLock"
argument_list|)
decl_stmt|;
name|lock
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"target/readlock/in/file1.dat"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos2
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"target/readlock/in/file2.dat"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
operator|(
literal|"Line "
operator|+
name|i
operator|+
name|LS
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos2
operator|.
name|write
argument_list|(
operator|(
literal|"Line "
operator|+
name|i
operator|+
name|LS
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing line "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos2
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file:target/readlock/in?readLock=markerFile"
argument_list|)
operator|.
name|to
argument_list|(
literal|"file:target/readlock/out"
argument_list|,
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|assertFileDoesNotExists (String filename)
specifier|private
specifier|static
name|void
name|assertFileDoesNotExists
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"File "
operator|+
name|filename
operator|+
literal|" should not exist, it should have been deleted after being processed"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

