begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_class
DECL|class|FileURLDecodingTest
specifier|public
class|class
name|FileURLDecodingTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|TARGET_DIR
specifier|static
specifier|final
name|String
name|TARGET_DIR
init|=
literal|"target/files"
decl_stmt|;
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
name|TARGET_DIR
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleFile ()
specifier|public
name|void
name|testSimpleFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"data.txt"
argument_list|,
literal|"data.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilePlus ()
specifier|public
name|void
name|testFilePlus
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"data+.txt"
argument_list|,
literal|"data .txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileSpace ()
specifier|public
name|void
name|testFileSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"data%20.txt"
argument_list|,
literal|"data .txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFile2B ()
specifier|public
name|void
name|testFile2B
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"data%2B.txt"
argument_list|,
literal|"data .txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileRaw2B ()
specifier|public
name|void
name|testFileRaw2B
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"RAW(data%2B.txt)"
argument_list|,
literal|"data%2B.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileRawPlus ()
specifier|public
name|void
name|testFileRawPlus
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"RAW(data+.txt)"
argument_list|,
literal|"data+.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileRawSpace ()
specifier|public
name|void
name|testFileRawSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"RAW(data%20.txt)"
argument_list|,
literal|"data%20.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileRaw2520 ()
specifier|public
name|void
name|testFileRaw2520
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"RAW(data%2520.txt)"
argument_list|,
literal|"data%2520.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileWithTwoHundredPercent ()
specifier|public
name|void
name|testFileWithTwoHundredPercent
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTargetFile
argument_list|(
literal|"RAW(data%%.txt)"
argument_list|,
literal|"data%%.txt"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTargetFile (final String encoded, final String expected)
specifier|private
name|void
name|assertTargetFile
parameter_list|(
specifier|final
name|String
name|encoded
parameter_list|,
specifier|final
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"file:"
operator|+
name|TARGET_DIR
operator|+
literal|"?fileName="
operator|+
name|encoded
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Kermit"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Kermit"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|TARGET_DIR
argument_list|,
name|expected
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Kermit"
argument_list|,
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

