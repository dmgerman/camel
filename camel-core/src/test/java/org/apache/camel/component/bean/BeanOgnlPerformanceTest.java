begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|BeanOgnlPerformanceTest
specifier|public
class|class
name|BeanOgnlPerformanceTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|1000
decl_stmt|;
DECL|field|cache
specifier|private
name|String
name|cache
init|=
literal|"true"
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|MyFooBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|method|testBeanOgnlPerformance ()
specifier|public
name|void
name|testBeanOgnlPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Took {} millis"
argument_list|,
name|watch
operator|.
name|taken
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|toF
argument_list|(
literal|"bean:foo?cache=%s&method=hello('Camel')"
argument_list|,
name|cache
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

