begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|OneWay
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|BeanInfoTestTest
specifier|public
class|class
name|BeanInfoTestTest
extends|extends
name|TestCase
block|{
DECL|field|camelContext
specifier|protected
name|CamelContext
name|camelContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
DECL|field|info
specifier|protected
name|BeanInfo
name|info
init|=
operator|new
name|BeanInfo
argument_list|(
name|camelContext
argument_list|,
name|Foo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testMethodPattern ()
specifier|public
name|void
name|testMethodPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMethodPattern
argument_list|(
literal|"inOutMethod"
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|assertMethodPattern
argument_list|(
literal|"inOnlyMethod"
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
name|assertMethodPattern
argument_list|(
literal|"robustInOnlyMethod"
argument_list|,
name|ExchangePattern
operator|.
name|RobustInOnly
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMethodPattern (String methodName, ExchangePattern expectedPattern)
specifier|protected
name|void
name|assertMethodPattern
parameter_list|(
name|String
name|methodName
parameter_list|,
name|ExchangePattern
name|expectedPattern
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|Class
name|type
init|=
name|info
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|type
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find method: "
operator|+
name|methodName
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|MethodInfo
name|methodInfo
init|=
name|info
operator|.
name|getMethodInfo
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find methodInfo for: "
operator|+
name|method
argument_list|,
name|methodInfo
argument_list|)
expr_stmt|;
name|ExchangePattern
name|actualPattern
init|=
name|methodInfo
operator|.
name|getPattern
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Pattern for: "
operator|+
name|method
argument_list|,
name|expectedPattern
argument_list|,
name|actualPattern
argument_list|)
expr_stmt|;
comment|//System.out.println("Method: " + method + " has pattern: " + actualPattern);
block|}
DECL|interface|Foo
specifier|public
interface|interface
name|Foo
block|{
DECL|method|inOutMethod ()
specifier|public
name|void
name|inOutMethod
parameter_list|()
function_decl|;
annotation|@
name|OneWay
DECL|method|inOnlyMethod ()
specifier|public
name|void
name|inOnlyMethod
parameter_list|()
function_decl|;
annotation|@
name|OneWay
argument_list|(
name|ExchangePattern
operator|.
name|RobustInOnly
argument_list|)
DECL|method|robustInOnlyMethod ()
specifier|public
name|void
name|robustInOnlyMethod
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

