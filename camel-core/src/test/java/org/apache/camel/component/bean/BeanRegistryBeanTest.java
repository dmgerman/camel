begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|BeanRegistryBeanTest
specifier|public
class|class
name|BeanRegistryBeanTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|MyFooBean
argument_list|()
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"static"
argument_list|,
name|MyFooBean
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
DECL|method|testNoBean ()
specifier|public
name|void
name|testNoBean
parameter_list|()
block|{
name|RegistryBean
name|rb
init|=
operator|new
name|RegistryBean
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
try|try
block|{
name|rb
operator|.
name|getBean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchBeanException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBean ()
specifier|public
name|void
name|testBean
parameter_list|()
block|{
name|RegistryBean
name|rb
init|=
operator|new
name|RegistryBean
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Object
name|bean
init|=
name|rb
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|MyFooBean
operator|.
name|class
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rb
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|rb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rb
operator|.
name|getParameterMappingStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rb
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParameterMappingStrategy ()
specifier|public
name|void
name|testParameterMappingStrategy
parameter_list|()
block|{
name|RegistryBean
name|rb
init|=
operator|new
name|RegistryBean
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|ParameterMappingStrategy
name|myStrategy
init|=
operator|new
name|ParameterMappingStrategy
argument_list|()
block|{
specifier|public
name|Expression
name|getDefaultParameterTypeExpression
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|rb
operator|.
name|setParameterMappingStrategy
argument_list|(
name|myStrategy
argument_list|)
expr_stmt|;
name|Object
name|bean
init|=
name|rb
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|MyFooBean
operator|.
name|class
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rb
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|rb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myStrategy
argument_list|,
name|rb
operator|.
name|getParameterMappingStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rb
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLookupClass ()
specifier|public
name|void
name|testLookupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|RegistryBean
name|rb
init|=
operator|new
name|RegistryBean
argument_list|(
name|context
argument_list|,
literal|"static"
argument_list|)
decl_stmt|;
name|Object
name|bean
init|=
name|rb
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|MyFooBean
name|foo
init|=
name|assertIsInstanceOf
argument_list|(
name|MyFooBean
operator|.
name|class
argument_list|,
name|bean
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foofoo"
argument_list|,
name|foo
operator|.
name|echo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MyFooBean
specifier|public
specifier|static
class|class
name|MyFooBean
block|{
DECL|method|echo (String s)
specifier|public
name|String
name|echo
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|+
name|s
return|;
block|}
block|}
block|}
end_class

end_unit

