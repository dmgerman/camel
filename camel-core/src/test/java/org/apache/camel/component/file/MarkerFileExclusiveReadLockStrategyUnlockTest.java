begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_class
DECL|class|MarkerFileExclusiveReadLockStrategyUnlockTest
specifier|public
class|class
name|MarkerFileExclusiveReadLockStrategyUnlockTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setupDirectory
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnlocking ()
specifier|public
name|void
name|testUnlocking
parameter_list|()
throws|throws
name|Exception
block|{
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|writeFiles
argument_list|()
expr_stmt|;
name|boolean
name|done
init|=
name|notify
operator|.
name|matches
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Route should be done processing 1 exchanges"
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|assertFileNotExists
argument_list|(
literal|"target/marker-unlock/input-a/file1.dat.camelLock"
argument_list|)
expr_stmt|;
name|assertFileNotExists
argument_list|(
literal|"target/marker-unlock/input-b/file2.dat.camelLock"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file:target/marker-unlock/input-a?fileName=file1.dat&readLock=markerFile&initialDelay=0&delay=10"
argument_list|)
operator|.
name|pollEnrich
argument_list|(
literal|"file:target/marker-unlock/input-b?fileName=file2.dat&readLock=markerFile&initialDelay=0&delay=10"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|setupDirectory ()
specifier|private
name|void
name|setupDirectory
parameter_list|()
block|{
name|deleteDirectory
argument_list|(
literal|"target/marker-unlock/"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"target/marker-unlock/input-a"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"target/marker-unlock/input-b"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFiles ()
specifier|private
name|void
name|writeFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|FileOutputStream
name|fos1
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"target/marker-unlock/input-a/file1.dat"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos2
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"target/marker-unlock/input-b/file2.dat"
argument_list|)
decl_stmt|;
name|fos1
operator|.
name|write
argument_list|(
literal|"File-1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos2
operator|.
name|write
argument_list|(
literal|"File-2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos1
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos1
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos2
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

