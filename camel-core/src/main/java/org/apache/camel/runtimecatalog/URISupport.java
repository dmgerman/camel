begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.runtimecatalog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Copied from org.apache.camel.util.URISupport  */
end_comment

begin_class
DECL|class|URISupport
specifier|public
specifier|final
class|class
name|URISupport
block|{
DECL|field|RAW_TOKEN_START
specifier|public
specifier|static
specifier|final
name|String
name|RAW_TOKEN_START
init|=
literal|"RAW("
decl_stmt|;
DECL|field|RAW_TOKEN_END
specifier|public
specifier|static
specifier|final
name|String
name|RAW_TOKEN_END
init|=
literal|")"
decl_stmt|;
DECL|field|CHARSET
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET
init|=
literal|"UTF-8"
decl_stmt|;
DECL|method|URISupport ()
specifier|private
name|URISupport
parameter_list|()
block|{
comment|// Helper class
block|}
comment|/**      * Normalizes the URI so unsafe characters is encoded      *      * @param uri the input uri      * @return as URI instance      * @throws URISyntaxException is thrown if syntax error in the input uri      */
DECL|method|normalizeUri (String uri)
specifier|public
specifier|static
name|URI
name|normalizeUri
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|extractProperties (Map<String, Object> properties, String optionPrefix)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|optionPrefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|optionPrefix
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|optionPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Strips the query parameters from the uri      *      * @param uri  the uri      * @return the uri without the query parameter      */
DECL|method|stripQuery (String uri)
specifier|public
specifier|static
name|String
name|stripQuery
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|idx
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
operator|-
literal|1
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
comment|/**      * Parses the query parameters of the uri (eg the query part).      *      * @param uri the uri      * @return the parameters, or an empty map if no parameters (eg never null)      * @throws URISyntaxException is thrown if uri has invalid syntax.      */
DECL|method|parseParameters (URI uri)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseParameters
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|query
init|=
name|uri
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|String
name|schemeSpecificPart
init|=
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|schemeSpecificPart
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
comment|// return an empty map
return|return
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|query
operator|=
name|schemeSpecificPart
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|query
operator|=
name|stripPrefix
argument_list|(
name|query
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
block|}
return|return
name|parseQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
comment|/**      * Strips the prefix from the value.      *<p/>      * Returns the value as-is if not starting with the prefix.      *      * @param value  the value      * @param prefix the prefix to remove from value      * @return the value without the prefix      */
DECL|method|stripPrefix (String value, String prefix)
specifier|public
specifier|static
name|String
name|stripPrefix
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Parses the query part of the uri (eg the parameters).      *<p/>      * The URI parameters will by default be URI encoded. However you can define a parameter      * values with the syntax:<tt>key=RAW(value)</tt> which tells Camel to not encode the value,      * and use the value as is (eg key=value) and the value has<b>not</b> been encoded.      *      * @param uri the uri      * @return the parameters, or an empty map if no parameters (eg never null)      * @throws URISyntaxException is thrown if uri has invalid syntax.      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|parseQuery (String uri)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
name|parseQuery
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses the query part of the uri (eg the parameters).      *<p/>      * The URI parameters will by default be URI encoded. However you can define a parameter      * values with the syntax:<tt>key=RAW(value)</tt> which tells Camel to not encode the value,      * and use the value as is (eg key=value) and the value has<b>not</b> been encoded.      *      * @param uri the uri      * @param useRaw whether to force using raw values      * @return the parameters, or an empty map if no parameters (eg never null)      * @throws URISyntaxException is thrown if uri has invalid syntax.      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|parseQuery (String uri, boolean useRaw)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|useRaw
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// must check for trailing& as the uri.split("&") will ignore those
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|endsWith
argument_list|(
literal|"&"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|uri
argument_list|,
literal|"Invalid uri syntax: Trailing& marker found. "
operator|+
literal|"Check the uri and remove the trailing& marker."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
comment|// return an empty map
return|return
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// need to parse the uri query parameters manually as we cannot rely on splitting by&,
comment|// as& can be used in a parameter value as well.
try|try
block|{
comment|// use a linked map so the parameters is in the same order
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isKey
init|=
literal|true
decl_stmt|;
name|boolean
name|isValue
init|=
literal|false
decl_stmt|;
name|boolean
name|isRaw
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|key
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// parse the uri parameters char by char
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uri
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// current char
name|char
name|ch
init|=
name|uri
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// look ahead of the next char
name|char
name|next
decl_stmt|;
if|if
condition|(
name|i
operator|<=
name|uri
operator|.
name|length
argument_list|()
operator|-
literal|2
condition|)
block|{
name|next
operator|=
name|uri
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
literal|'\u0000'
expr_stmt|;
block|}
comment|// are we a raw value
name|isRaw
operator|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|RAW_TOKEN_START
argument_list|)
expr_stmt|;
comment|// if we are in raw mode, then we keep adding until we hit the end marker
if|if
condition|(
name|isRaw
condition|)
block|{
if|if
condition|(
name|isKey
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isValue
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
comment|// we only end the raw marker if its )& or at the end of the value
name|boolean
name|end
init|=
name|ch
operator|==
name|RAW_TOKEN_END
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|&&
operator|(
name|next
operator|==
literal|'&'
operator|||
name|next
operator|==
literal|'\u0000'
operator|)
decl_stmt|;
if|if
condition|(
name|end
condition|)
block|{
comment|// raw value end, so add that as a parameter, and reset flags
name|addParameter
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|rc
argument_list|,
name|useRaw
operator|||
name|isRaw
argument_list|)
expr_stmt|;
name|key
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|value
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|isKey
operator|=
literal|true
expr_stmt|;
name|isValue
operator|=
literal|false
expr_stmt|;
name|isRaw
operator|=
literal|false
expr_stmt|;
comment|// skip to next as we are in raw mode and have already added the value
name|i
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
comment|// if its a key and there is a = sign then the key ends and we are in value mode
if|if
condition|(
name|isKey
operator|&&
name|ch
operator|==
literal|'='
condition|)
block|{
name|isKey
operator|=
literal|false
expr_stmt|;
name|isValue
operator|=
literal|true
expr_stmt|;
name|isRaw
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// the& denote parameter is ended
if|if
condition|(
name|ch
operator|==
literal|'&'
condition|)
block|{
comment|// parameter is ended, as we hit& separator
name|String
name|aKey
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// the key may be a placeholder of options which we then do not know what is
name|boolean
name|validKey
init|=
operator|!
name|aKey
operator|.
name|startsWith
argument_list|(
literal|"{{"
argument_list|)
operator|&&
operator|!
name|aKey
operator|.
name|endsWith
argument_list|(
literal|"}}"
argument_list|)
decl_stmt|;
if|if
condition|(
name|validKey
condition|)
block|{
name|addParameter
argument_list|(
name|aKey
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|rc
argument_list|,
name|useRaw
operator|||
name|isRaw
argument_list|)
expr_stmt|;
block|}
name|key
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|value
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|isKey
operator|=
literal|true
expr_stmt|;
name|isValue
operator|=
literal|false
expr_stmt|;
name|isRaw
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
comment|// regular char so add it to the key or value
if|if
condition|(
name|isKey
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isValue
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// any left over parameters, then add that
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|aKey
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// the key may be a placeholder of options which we then do not know what is
name|boolean
name|validKey
init|=
operator|!
name|aKey
operator|.
name|startsWith
argument_list|(
literal|"{{"
argument_list|)
operator|&&
operator|!
name|aKey
operator|.
name|endsWith
argument_list|(
literal|"}}"
argument_list|)
decl_stmt|;
if|if
condition|(
name|validKey
condition|)
block|{
name|addParameter
argument_list|(
name|aKey
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|rc
argument_list|,
name|useRaw
operator|||
name|isRaw
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|URISyntaxException
name|se
init|=
operator|new
name|URISyntaxException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Invalid encoding"
argument_list|)
decl_stmt|;
name|se
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addParameter (String name, String value, Map<String, Object> map, boolean isRaw)
specifier|private
specifier|static
name|void
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|boolean
name|isRaw
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|name
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|name
argument_list|,
name|CHARSET
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRaw
condition|)
block|{
comment|// need to replace % with %25
name|value
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
literal|"%25"
argument_list|)
argument_list|,
name|CHARSET
argument_list|)
expr_stmt|;
block|}
comment|// does the key already exist?
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// yes it does, so make sure we can support multiple values, but using a list
comment|// to hold the multiple values
name|Object
name|existing
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|existing
operator|instanceof
name|List
condition|)
block|{
name|list
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|existing
expr_stmt|;
block|}
else|else
block|{
comment|// create a new list to hold the multiple values
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|existing
operator|!=
literal|null
condition|?
name|existing
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Assembles a query from the given map.      *      * @param options  the map with the options (eg key/value pairs)      * @param ampersand to use& for Java code, and&amp; for XML      * @return a query string with<tt>key1=value&key2=value2&...</tt>, or an empty string if there is no options.      * @throws URISyntaxException is thrown if uri has invalid syntax.      */
DECL|method|createQueryString (Map<String, String> options, String ampersand, boolean encode)
specifier|public
specifier|static
name|String
name|createQueryString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|,
name|String
name|ampersand
parameter_list|,
name|boolean
name|encode
parameter_list|)
throws|throws
name|URISyntaxException
block|{
try|try
block|{
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|rc
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|append
argument_list|(
name|ampersand
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|Object
name|value
init|=
name|options
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// use the value as a String
name|String
name|s
init|=
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|appendQueryStringParameter
argument_list|(
name|key
argument_list|,
name|s
argument_list|,
name|rc
argument_list|,
name|encode
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|URISyntaxException
name|se
init|=
operator|new
name|URISyntaxException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Invalid encoding"
argument_list|)
decl_stmt|;
name|se
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
block|}
DECL|method|appendQueryStringParameter (String key, String value, StringBuilder rc, boolean encode)
specifier|private
specifier|static
name|void
name|appendQueryStringParameter
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|StringBuilder
name|rc
parameter_list|,
name|boolean
name|encode
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|encode
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|key
argument_list|,
name|CHARSET
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|// only append if value is not null
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
name|RAW_TOKEN_START
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
name|RAW_TOKEN_END
argument_list|)
condition|)
block|{
comment|// do not encode RAW parameters
name|rc
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|encode
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|value
argument_list|,
name|CHARSET
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Tests whether the value is<tt>null</tt> or an empty string.      *      * @param value  the value, if its a String it will be tested for text length as well      * @return true if empty      */
DECL|method|isEmpty (Object value)
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|!
name|isNotEmpty
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Tests whether the value is<b>not</b><tt>null</tt> or an empty string.      *      * @param value  the value, if its a String it will be tested for text length as well      * @return true if<b>not</b> empty      */
DECL|method|isNotEmpty (Object value)
specifier|public
specifier|static
name|boolean
name|isNotEmpty
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|text
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
return|return
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

