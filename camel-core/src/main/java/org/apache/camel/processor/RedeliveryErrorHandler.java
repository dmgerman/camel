begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Navigate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownPrepared
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|SubUnitOfWorkCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AsyncProcessorConverterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AsyncProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EventHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * Base redeliverable error handler that also supports a final dead letter queue in case  * all redelivery attempts fail.  *<p/>  * This implementation should contain all the error handling logic and the sub classes  * should only configure it according to what they support.  *  * @version  */
end_comment

begin_class
DECL|class|RedeliveryErrorHandler
specifier|public
specifier|abstract
class|class
name|RedeliveryErrorHandler
extends|extends
name|ErrorHandlerSupport
implements|implements
name|AsyncProcessor
implements|,
name|ShutdownPrepared
implements|,
name|Navigate
argument_list|<
name|Processor
argument_list|>
block|{
DECL|field|redeliverySleepCounter
specifier|protected
specifier|final
name|AtomicInteger
name|redeliverySleepCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|executorService
specifier|protected
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|camelContext
specifier|protected
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|deadLetter
specifier|protected
specifier|final
name|Processor
name|deadLetter
decl_stmt|;
DECL|field|deadLetterUri
specifier|protected
specifier|final
name|String
name|deadLetterUri
decl_stmt|;
DECL|field|deadLetterHandleNewException
specifier|protected
specifier|final
name|boolean
name|deadLetterHandleNewException
decl_stmt|;
DECL|field|output
specifier|protected
specifier|final
name|Processor
name|output
decl_stmt|;
DECL|field|outputAsync
specifier|protected
specifier|final
name|AsyncProcessor
name|outputAsync
decl_stmt|;
DECL|field|redeliveryProcessor
specifier|protected
specifier|final
name|Processor
name|redeliveryProcessor
decl_stmt|;
DECL|field|redeliveryPolicy
specifier|protected
specifier|final
name|RedeliveryPolicy
name|redeliveryPolicy
decl_stmt|;
DECL|field|retryWhilePolicy
specifier|protected
specifier|final
name|Predicate
name|retryWhilePolicy
decl_stmt|;
DECL|field|logger
specifier|protected
specifier|final
name|CamelLogger
name|logger
decl_stmt|;
DECL|field|useOriginalMessagePolicy
specifier|protected
specifier|final
name|boolean
name|useOriginalMessagePolicy
decl_stmt|;
DECL|field|redeliveryEnabled
specifier|protected
name|boolean
name|redeliveryEnabled
decl_stmt|;
DECL|field|preparingShutdown
specifier|protected
specifier|volatile
name|boolean
name|preparingShutdown
decl_stmt|;
DECL|field|exchangeFormatter
specifier|protected
specifier|final
name|ExchangeFormatter
name|exchangeFormatter
decl_stmt|;
DECL|field|onPrepare
specifier|protected
specifier|final
name|Processor
name|onPrepare
decl_stmt|;
comment|/**      * Contains the current redelivery data      */
DECL|class|RedeliveryData
specifier|protected
class|class
name|RedeliveryData
block|{
DECL|field|original
name|Exchange
name|original
decl_stmt|;
DECL|field|sync
name|boolean
name|sync
init|=
literal|true
decl_stmt|;
DECL|field|redeliveryCounter
name|int
name|redeliveryCounter
decl_stmt|;
DECL|field|redeliveryDelay
name|long
name|redeliveryDelay
decl_stmt|;
DECL|field|retryWhilePredicate
name|Predicate
name|retryWhilePredicate
decl_stmt|;
DECL|field|redeliverFromSync
name|boolean
name|redeliverFromSync
decl_stmt|;
comment|// default behavior which can be overloaded on a per exception basis
DECL|field|currentRedeliveryPolicy
name|RedeliveryPolicy
name|currentRedeliveryPolicy
decl_stmt|;
DECL|field|deadLetterProcessor
name|Processor
name|deadLetterProcessor
decl_stmt|;
DECL|field|failureProcessor
name|Processor
name|failureProcessor
decl_stmt|;
DECL|field|onRedeliveryProcessor
name|Processor
name|onRedeliveryProcessor
decl_stmt|;
DECL|field|onPrepareProcessor
name|Processor
name|onPrepareProcessor
decl_stmt|;
DECL|field|handledPredicate
name|Predicate
name|handledPredicate
decl_stmt|;
DECL|field|continuedPredicate
name|Predicate
name|continuedPredicate
decl_stmt|;
DECL|field|useOriginalInMessage
name|boolean
name|useOriginalInMessage
decl_stmt|;
DECL|field|handleNewException
name|boolean
name|handleNewException
decl_stmt|;
DECL|method|RedeliveryData ()
specifier|public
name|RedeliveryData
parameter_list|()
block|{
comment|// init with values from the error handler
name|this
operator|.
name|retryWhilePredicate
operator|=
name|retryWhilePolicy
expr_stmt|;
name|this
operator|.
name|currentRedeliveryPolicy
operator|=
name|redeliveryPolicy
expr_stmt|;
name|this
operator|.
name|deadLetterProcessor
operator|=
name|deadLetter
expr_stmt|;
name|this
operator|.
name|onRedeliveryProcessor
operator|=
name|redeliveryProcessor
expr_stmt|;
name|this
operator|.
name|onPrepareProcessor
operator|=
name|onPrepare
expr_stmt|;
name|this
operator|.
name|handledPredicate
operator|=
name|getDefaultHandledPredicate
argument_list|()
expr_stmt|;
name|this
operator|.
name|useOriginalInMessage
operator|=
name|useOriginalMessagePolicy
expr_stmt|;
name|this
operator|.
name|handleNewException
operator|=
name|deadLetterHandleNewException
expr_stmt|;
block|}
block|}
comment|/**      * Tasks which performs asynchronous redelivery attempts, and being triggered by a      * {@link java.util.concurrent.ScheduledExecutorService} to avoid having any threads blocking if a task      * has to be delayed before a redelivery attempt is performed.      */
DECL|class|AsyncRedeliveryTask
specifier|private
class|class
name|AsyncRedeliveryTask
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|RedeliveryData
name|data
decl_stmt|;
DECL|method|AsyncRedeliveryTask (Exchange exchange, AsyncCallback callback, RedeliveryData data)
specifier|public
name|AsyncRedeliveryTask
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|,
name|RedeliveryData
name|data
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
DECL|method|call ()
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prepare for redelivery
name|prepareExchangeForRedelivery
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// letting onRedeliver be executed at first
name|deliverToOnRedeliveryProcessor
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Redelivering exchangeId: {} -> {} for Exchange: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|exchange
operator|.
name|getExchangeId
argument_list|()
block|,
name|outputAsync
block|,
name|exchange
block|}
argument_list|)
expr_stmt|;
block|}
comment|// emmit event we are doing redelivery
name|EventHelper
operator|.
name|notifyExchangeRedelivery
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|data
operator|.
name|redeliveryCounter
argument_list|)
expr_stmt|;
comment|// process the exchange (also redelivery)
name|boolean
name|sync
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|redeliverFromSync
condition|)
block|{
comment|// this redelivery task was scheduled from synchronous, which we forced to be asynchronous from
comment|// this error handler, which means we have to invoke the callback with false, to have the callback
comment|// be notified when we are done
name|sync
operator|=
name|outputAsync
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Redelivering exchangeId: {} done sync: {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|doneSync
argument_list|)
expr_stmt|;
comment|// mark we are in sync mode now
name|data
operator|.
name|sync
operator|=
literal|false
expr_stmt|;
comment|// only process if the exchange hasn't failed
comment|// and it has not been handled by the error processor
if|if
condition|(
name|isDone
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// error occurred so loop back around which we do by invoking the processAsyncErrorHandler
name|processAsyncErrorHandler
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this redelivery task was scheduled from asynchronous, which means we should only
comment|// handle when the asynchronous task was done
name|sync
operator|=
name|outputAsync
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Redelivering exchangeId: {} done sync: {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|doneSync
argument_list|)
expr_stmt|;
comment|// this callback should only handle the async case
if|if
condition|(
name|doneSync
condition|)
block|{
return|return;
block|}
comment|// mark we are in async mode now
name|data
operator|.
name|sync
operator|=
literal|false
expr_stmt|;
comment|// only process if the exchange hasn't failed
comment|// and it has not been handled by the error processor
if|if
condition|(
name|isDone
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|callback
operator|.
name|done
argument_list|(
name|doneSync
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// error occurred so loop back around which we do by invoking the processAsyncErrorHandler
name|processAsyncErrorHandler
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|sync
return|;
block|}
block|}
DECL|method|RedeliveryErrorHandler (CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, Processor deadLetter, String deadLetterUri, boolean deadLetterHandleNewException, boolean useOriginalMessagePolicy, Predicate retryWhile, ScheduledExecutorService executorService, Processor onPrepare)
specifier|public
name|RedeliveryErrorHandler
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|output
parameter_list|,
name|CamelLogger
name|logger
parameter_list|,
name|Processor
name|redeliveryProcessor
parameter_list|,
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|,
name|Processor
name|deadLetter
parameter_list|,
name|String
name|deadLetterUri
parameter_list|,
name|boolean
name|deadLetterHandleNewException
parameter_list|,
name|boolean
name|useOriginalMessagePolicy
parameter_list|,
name|Predicate
name|retryWhile
parameter_list|,
name|ScheduledExecutorService
name|executorService
parameter_list|,
name|Processor
name|onPrepare
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|redeliveryPolicy
argument_list|,
literal|"RedeliveryPolicy"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|redeliveryProcessor
operator|=
name|redeliveryProcessor
expr_stmt|;
name|this
operator|.
name|deadLetter
operator|=
name|deadLetter
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|outputAsync
operator|=
name|AsyncProcessorConverterHelper
operator|.
name|convert
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|this
operator|.
name|redeliveryPolicy
operator|=
name|redeliveryPolicy
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|deadLetterUri
operator|=
name|deadLetterUri
expr_stmt|;
name|this
operator|.
name|deadLetterHandleNewException
operator|=
name|deadLetterHandleNewException
expr_stmt|;
name|this
operator|.
name|useOriginalMessagePolicy
operator|=
name|useOriginalMessagePolicy
expr_stmt|;
name|this
operator|.
name|retryWhilePolicy
operator|=
name|retryWhile
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
name|this
operator|.
name|onPrepare
operator|=
name|onPrepare
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|redeliveryPolicy
operator|.
name|getExchangeFormatterRef
argument_list|()
argument_list|)
condition|)
block|{
name|ExchangeFormatter
name|formatter
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|redeliveryPolicy
operator|.
name|getExchangeFormatterRef
argument_list|()
argument_list|,
name|ExchangeFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|exchangeFormatter
operator|=
name|formatter
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find the exchangeFormatter by using reference id "
operator|+
name|redeliveryPolicy
operator|.
name|getExchangeFormatterRef
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// setup exchange formatter to be used for message history dump
name|DefaultExchangeFormatter
name|formatter
init|=
operator|new
name|DefaultExchangeFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|setShowExchangeId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setMultiline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowHeaders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setStyle
argument_list|(
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
operator|.
name|Fixed
argument_list|)
expr_stmt|;
try|try
block|{
name|Integer
name|maxChars
init|=
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|camelContext
argument_list|,
name|camelContext
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxChars
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|setMaxChars
argument_list|(
name|maxChars
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|exchangeFormatter
operator|=
name|formatter
expr_stmt|;
block|}
block|}
DECL|method|supportTransacted ()
specifier|public
name|boolean
name|supportTransacted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|output
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|List
argument_list|<
name|Processor
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Processor
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|isRunAllowed (RedeliveryData data)
specifier|protected
name|boolean
name|isRunAllowed
parameter_list|(
name|RedeliveryData
name|data
parameter_list|)
block|{
comment|// if camel context is forcing a shutdown then do not allow running
name|boolean
name|forceShutdown
init|=
name|camelContext
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|forceShutdown
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceShutdown
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"isRunAllowed() -> false (Run not allowed as ShutdownStrategy is forcing shutting down)"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// redelivery policy can control if redelivery is allowed during stopping/shutdown
comment|// but this only applies during a redelivery (counter must> 0)
if|if
condition|(
name|data
operator|.
name|redeliveryCounter
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|allowRedeliveryWhileStopping
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"isRunAllowed() -> true (Run allowed as RedeliverWhileStopping is enabled)"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|preparingShutdown
condition|)
block|{
comment|// we are preparing for shutdown, now determine if we can still run
name|boolean
name|answer
init|=
name|isRunAllowedOnPreparingShutdown
argument_list|()
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"isRunAllowed() -> {} (Run not allowed as we are preparing for shutdown)"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
comment|// we cannot run if we are stopping/stopped
name|boolean
name|answer
init|=
operator|!
name|isStoppingOrStopped
argument_list|()
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"isRunAllowed() -> {} (Run allowed if we are not stopped/stopping)"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|isRunAllowedOnPreparingShutdown ()
specifier|protected
name|boolean
name|isRunAllowedOnPreparingShutdown
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isRedeliveryAllowed (RedeliveryData data)
specifier|protected
name|boolean
name|isRedeliveryAllowed
parameter_list|(
name|RedeliveryData
name|data
parameter_list|)
block|{
comment|// redelivery policy can control if redelivery is allowed during stopping/shutdown
comment|// but this only applies during a redelivery (counter must> 0)
if|if
condition|(
name|data
operator|.
name|redeliveryCounter
operator|>
literal|0
condition|)
block|{
name|boolean
name|stopping
init|=
name|isStoppingOrStopped
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|preparingShutdown
operator|&&
operator|!
name|stopping
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"isRedeliveryAllowed() -> true (we are not stopping/stopped)"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// we are stopping or preparing to shutdown
if|if
condition|(
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|allowRedeliveryWhileStopping
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"isRedeliveryAllowed() -> true (Redelivery allowed as RedeliverWhileStopping is enabled)"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"isRedeliveryAllowed() -> false (Redelivery not allowed as RedeliverWhileStopping is disabled)"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|prepareShutdown (boolean forced)
specifier|public
name|void
name|prepareShutdown
parameter_list|(
name|boolean
name|forced
parameter_list|)
block|{
comment|// prepare for shutdown, eg do not allow redelivery if configured
name|log
operator|.
name|trace
argument_list|(
literal|"Prepare shutdown on error handler {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|preparingShutdown
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
comment|// no output then just return
return|return;
block|}
name|AsyncProcessorHelper
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process the exchange using redelivery error handling.      */
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
specifier|final
name|RedeliveryData
name|data
init|=
operator|new
name|RedeliveryData
argument_list|()
decl_stmt|;
comment|// do a defensive copy of the original Exchange, which is needed for redelivery so we can ensure the
comment|// original Exchange is being redelivered, and not a mutated Exchange
name|data
operator|.
name|original
operator|=
name|defensiveCopyExchangeIfNeeded
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// use looping to have redelivery attempts
while|while
condition|(
literal|true
condition|)
block|{
comment|// can we still run
if|if
condition|(
operator|!
name|isRunAllowed
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Run not allowed, will reject executing exchange: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we cannot process so invoke callback
name|callback
operator|.
name|done
argument_list|(
name|data
operator|.
name|sync
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|sync
return|;
block|}
comment|// did previous processing cause an exception?
name|boolean
name|handle
init|=
name|shouldHandleException
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|handleException
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|,
name|isDeadLetterChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// compute if we are exhausted, and whether redelivery is allowed
name|boolean
name|exhausted
init|=
name|isExhausted
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|boolean
name|redeliverAllowed
init|=
name|isRedeliveryAllowed
argument_list|(
name|data
argument_list|)
decl_stmt|;
comment|// if we are exhausted or redelivery is not allowed, then deliver to failure processor (eg such as DLC)
if|if
condition|(
operator|!
name|redeliverAllowed
operator|||
name|exhausted
condition|)
block|{
name|Processor
name|target
init|=
literal|null
decl_stmt|;
name|boolean
name|deliver
init|=
literal|true
decl_stmt|;
comment|// the unit of work may have an optional callback associated we need to leverage
name|SubUnitOfWorkCallback
name|uowCallback
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|getSubUnitOfWorkCallback
argument_list|()
decl_stmt|;
if|if
condition|(
name|uowCallback
operator|!=
literal|null
condition|)
block|{
comment|// signal to the callback we are exhausted
name|uowCallback
operator|.
name|onExhausted
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// do not deliver to the failure processor as its been handled by the callback instead
name|deliver
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|deliver
condition|)
block|{
comment|// should deliver to failure processor (either from onException or the dead letter channel)
name|target
operator|=
name|data
operator|.
name|failureProcessor
operator|!=
literal|null
condition|?
name|data
operator|.
name|failureProcessor
else|:
name|data
operator|.
name|deadLetterProcessor
expr_stmt|;
block|}
comment|// we should always invoke the deliverToFailureProcessor as it prepares, logs and does a fair
comment|// bit of work for exhausted exchanges (its only the target processor which may be null if handled by a savepoint)
name|boolean
name|isDeadLetterChannel
init|=
name|isDeadLetterChannel
argument_list|()
operator|&&
operator|(
name|target
operator|==
literal|null
operator|||
name|target
operator|==
name|data
operator|.
name|deadLetterProcessor
operator|)
decl_stmt|;
name|boolean
name|sync
init|=
name|deliverToFailureProcessor
argument_list|(
name|target
argument_list|,
name|isDeadLetterChannel
argument_list|,
name|exchange
argument_list|,
name|data
argument_list|,
name|callback
argument_list|)
decl_stmt|;
comment|// we are breaking out
return|return
name|sync
return|;
block|}
if|if
condition|(
name|data
operator|.
name|redeliveryCounter
operator|>
literal|0
condition|)
block|{
comment|// calculate delay
name|data
operator|.
name|redeliveryDelay
operator|=
name|determineRedeliveryDelay
argument_list|(
name|exchange
argument_list|,
name|data
operator|.
name|currentRedeliveryPolicy
argument_list|,
name|data
operator|.
name|redeliveryDelay
argument_list|,
name|data
operator|.
name|redeliveryCounter
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|redeliveryDelay
operator|>
literal|0
condition|)
block|{
comment|// okay there is a delay so create a scheduled task to have it executed in the future
if|if
condition|(
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isAsyncDelayedRedelivery
argument_list|()
operator|&&
operator|!
name|exchange
operator|.
name|isTransacted
argument_list|()
condition|)
block|{
comment|// we are doing a redelivery then a thread pool must be configured (see the doStart method)
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|executorService
argument_list|,
literal|"Redelivery is enabled but ExecutorService has not been configured."
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// let the RedeliverTask be the logic which tries to redeliver the Exchange which we can used a scheduler to
comment|// have it being executed in the future, or immediately
comment|// we are continuing asynchronously
comment|// mark we are routing async from now and that this redelivery task came from a synchronous routing
name|data
operator|.
name|sync
operator|=
literal|false
expr_stmt|;
name|data
operator|.
name|redeliverFromSync
operator|=
literal|true
expr_stmt|;
name|AsyncRedeliveryTask
name|task
init|=
operator|new
name|AsyncRedeliveryTask
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|data
argument_list|)
decl_stmt|;
comment|// schedule the redelivery task
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Scheduling redelivery task to run in {} millis for exchangeId: {}"
argument_list|,
name|data
operator|.
name|redeliveryDelay
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|data
operator|.
name|redeliveryDelay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// async delayed redelivery was disabled or we are transacted so we must be synchronous
comment|// as the transaction manager requires to execute in the same thread context
try|try
block|{
comment|// we are doing synchronous redelivery and use thread sleep, so we keep track using a counter how many are sleeping
name|redeliverySleepCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|sleep
argument_list|(
name|data
operator|.
name|redeliveryDelay
argument_list|)
expr_stmt|;
name|redeliverySleepCounter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|redeliverySleepCounter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
comment|// we was interrupted so break out
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// mark the exchange to stop continue routing when interrupted
comment|// as we do not want to continue routing (for example a task has been cancelled)
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ROUTE_STOP
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
name|data
operator|.
name|sync
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|sync
return|;
block|}
block|}
block|}
comment|// prepare for redelivery
name|prepareExchangeForRedelivery
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// letting onRedeliver be executed
name|deliverToOnRedeliveryProcessor
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// emmit event we are doing redelivery
name|EventHelper
operator|.
name|notifyExchangeRedelivery
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|data
operator|.
name|redeliveryCounter
argument_list|)
expr_stmt|;
block|}
comment|// process the exchange (also redelivery)
name|boolean
name|sync
init|=
name|outputAsync
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
comment|// this callback should only handle the async case
if|if
condition|(
name|sync
condition|)
block|{
return|return;
block|}
comment|// mark we are in async mode now
name|data
operator|.
name|sync
operator|=
literal|false
expr_stmt|;
comment|// if we are done then notify callback and exit
if|if
condition|(
name|isDone
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|callback
operator|.
name|done
argument_list|(
name|sync
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// error occurred so loop back around which we do by invoking the processAsyncErrorHandler
comment|// method which takes care of this in a asynchronous manner
name|processAsyncErrorHandler
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sync
condition|)
block|{
comment|// the remainder of the Exchange is being processed asynchronously so we should return
return|return
literal|false
return|;
block|}
comment|// we continue to route synchronously
comment|// if we are done then notify callback and exit
name|boolean
name|done
init|=
name|isDone
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|done
condition|)
block|{
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// error occurred so loop back around.....
block|}
block|}
comment|/**      *<p>Determines the redelivery delay time by first inspecting the Message header {@link Exchange#REDELIVERY_DELAY}      * and if not present, defaulting to {@link RedeliveryPolicy#calculateRedeliveryDelay(long, int)}</p>      *      *<p>In order to prevent manipulation of the RedeliveryData state, the values of {@link RedeliveryData#redeliveryDelay}      * and {@link RedeliveryData#redeliveryCounter} are copied in.</p>      *      * @param exchange The current exchange in question.      * @param redeliveryPolicy The RedeliveryPolicy to use in the calculation.      * @param redeliveryDelay The default redelivery delay from RedeliveryData      * @param redeliveryCounter The redeliveryCounter      * @return The time to wait before the next redelivery.      */
DECL|method|determineRedeliveryDelay (Exchange exchange, RedeliveryPolicy redeliveryPolicy, long redeliveryDelay, int redeliveryCounter)
specifier|protected
name|long
name|determineRedeliveryDelay
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|,
name|long
name|redeliveryDelay
parameter_list|,
name|int
name|redeliveryCounter
parameter_list|)
block|{
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Long
name|delay
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_DELAY
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|delay
operator|==
literal|null
condition|)
block|{
name|delay
operator|=
name|redeliveryPolicy
operator|.
name|calculateRedeliveryDelay
argument_list|(
name|redeliveryDelay
argument_list|,
name|redeliveryCounter
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Redelivery delay calculated as {}"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Redelivery delay is {} from Message Header [{}]"
argument_list|,
name|delay
argument_list|,
name|Exchange
operator|.
name|REDELIVERY_DELAY
argument_list|)
expr_stmt|;
block|}
return|return
name|delay
return|;
block|}
comment|/**      * This logic is only executed if we have to retry redelivery asynchronously, which have to be done from the callback.      *<p/>      * And therefore the logic is a bit different than the synchronous<tt>processErrorHandler</tt> method which can use      * a loop based redelivery technique. However this means that these two methods in overall have to be in<b>sync</b>      * in terms of logic.      */
DECL|method|processAsyncErrorHandler (final Exchange exchange, final AsyncCallback callback, final RedeliveryData data)
specifier|protected
name|void
name|processAsyncErrorHandler
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|,
specifier|final
name|RedeliveryData
name|data
parameter_list|)
block|{
comment|// can we still run
if|if
condition|(
operator|!
name|isRunAllowed
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Run not allowed, will reject executing exchange: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
name|data
operator|.
name|sync
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// did previous processing cause an exception?
name|boolean
name|handle
init|=
name|shouldHandleException
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|handleException
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|,
name|isDeadLetterChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// compute if we are exhausted or not
name|boolean
name|exhausted
init|=
name|isExhausted
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|exhausted
condition|)
block|{
name|Processor
name|target
init|=
literal|null
decl_stmt|;
name|boolean
name|deliver
init|=
literal|true
decl_stmt|;
comment|// the unit of work may have an optional callback associated we need to leverage
name|UnitOfWork
name|uow
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|uow
operator|!=
literal|null
condition|)
block|{
name|SubUnitOfWorkCallback
name|uowCallback
init|=
name|uow
operator|.
name|getSubUnitOfWorkCallback
argument_list|()
decl_stmt|;
if|if
condition|(
name|uowCallback
operator|!=
literal|null
condition|)
block|{
comment|// signal to the callback we are exhausted
name|uowCallback
operator|.
name|onExhausted
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// do not deliver to the failure processor as its been handled by the callback instead
name|deliver
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|deliver
condition|)
block|{
comment|// should deliver to failure processor (either from onException or the dead letter channel)
name|target
operator|=
name|data
operator|.
name|failureProcessor
operator|!=
literal|null
condition|?
name|data
operator|.
name|failureProcessor
else|:
name|data
operator|.
name|deadLetterProcessor
expr_stmt|;
block|}
comment|// we should always invoke the deliverToFailureProcessor as it prepares, logs and does a fair
comment|// bit of work for exhausted exchanges (its only the target processor which may be null if handled by a savepoint)
name|boolean
name|isDeadLetterChannel
init|=
name|isDeadLetterChannel
argument_list|()
operator|&&
name|target
operator|==
name|data
operator|.
name|deadLetterProcessor
decl_stmt|;
name|deliverToFailureProcessor
argument_list|(
name|target
argument_list|,
name|isDeadLetterChannel
argument_list|,
name|exchange
argument_list|,
name|data
argument_list|,
name|callback
argument_list|)
expr_stmt|;
comment|// we are breaking out
return|return;
block|}
if|if
condition|(
name|data
operator|.
name|redeliveryCounter
operator|>
literal|0
condition|)
block|{
comment|// we are doing a redelivery then a thread pool must be configured (see the doStart method)
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|executorService
argument_list|,
literal|"Redelivery is enabled but ExecutorService has not been configured."
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// let the RedeliverTask be the logic which tries to redeliver the Exchange which we can used a scheduler to
comment|// have it being executed in the future, or immediately
comment|// Note: the data.redeliverFromSync should be kept as is, in case it was enabled previously
comment|// to ensure the callback will continue routing from where we left
name|AsyncRedeliveryTask
name|task
init|=
operator|new
name|AsyncRedeliveryTask
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|data
argument_list|)
decl_stmt|;
comment|// calculate the redelivery delay
name|data
operator|.
name|redeliveryDelay
operator|=
name|determineRedeliveryDelay
argument_list|(
name|exchange
argument_list|,
name|data
operator|.
name|currentRedeliveryPolicy
argument_list|,
name|data
operator|.
name|redeliveryDelay
argument_list|,
name|data
operator|.
name|redeliveryCounter
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|redeliveryDelay
operator|>
literal|0
condition|)
block|{
comment|// schedule the redelivery task
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Scheduling redelivery task to run in {} millis for exchangeId: {}"
argument_list|,
name|data
operator|.
name|redeliveryDelay
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|data
operator|.
name|redeliveryDelay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// execute the task immediately
name|executorService
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Performs a defensive copy of the exchange if needed      *      * @param exchange the exchange      * @return the defensive copy, or<tt>null</tt> if not needed (redelivery is not enabled).      */
DECL|method|defensiveCopyExchangeIfNeeded (Exchange exchange)
specifier|protected
name|Exchange
name|defensiveCopyExchangeIfNeeded
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// only do a defensive copy if redelivery is enabled
if|if
condition|(
name|redeliveryEnabled
condition|)
block|{
return|return
name|ExchangeHelper
operator|.
name|createCopy
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Strategy whether the exchange has an exception that we should try to handle.      *<p/>      * Standard implementations should just look for an exception.      */
DECL|method|shouldHandleException (Exchange exchange)
specifier|protected
name|boolean
name|shouldHandleException
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/**      * Strategy to determine if the exchange is done so we can continue      */
DECL|method|isDone (Exchange exchange)
specifier|protected
name|boolean
name|isDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|isCancelledOrInterrupted
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// only done if the exchange hasn't failed
comment|// and it has not been handled by the failure processor
comment|// or we are exhausted
if|if
condition|(
operator|!
name|answer
condition|)
block|{
name|answer
operator|=
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
operator|||
name|ExchangeHelper
operator|.
name|isFailureHandled
argument_list|(
name|exchange
argument_list|)
operator|||
name|ExchangeHelper
operator|.
name|isRedeliveryExhausted
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Is exchangeId: {} done? {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Strategy to determine if the exchange was cancelled or interrupted      */
DECL|method|isCancelledOrInterrupted (Exchange exchange)
specifier|protected
name|boolean
name|isCancelledOrInterrupted
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ExchangeHelper
operator|.
name|isInterrupted
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
comment|// mark the exchange to stop continue routing when interrupted
comment|// as we do not want to continue routing (for example a task has been cancelled)
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ROUTE_STOP
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|answer
operator|=
literal|true
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Is exchangeId: {} interrupted? {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Returns the output processor      */
DECL|method|getOutput ()
specifier|public
name|Processor
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
comment|/**      * Returns the dead letter that message exchanges will be sent to if the      * redelivery attempts fail      */
DECL|method|getDeadLetter ()
specifier|public
name|Processor
name|getDeadLetter
parameter_list|()
block|{
return|return
name|deadLetter
return|;
block|}
DECL|method|getDeadLetterUri ()
specifier|public
name|String
name|getDeadLetterUri
parameter_list|()
block|{
return|return
name|deadLetterUri
return|;
block|}
DECL|method|isUseOriginalMessagePolicy ()
specifier|public
name|boolean
name|isUseOriginalMessagePolicy
parameter_list|()
block|{
return|return
name|useOriginalMessagePolicy
return|;
block|}
DECL|method|isDeadLetterHandleNewException ()
specifier|public
name|boolean
name|isDeadLetterHandleNewException
parameter_list|()
block|{
return|return
name|deadLetterHandleNewException
return|;
block|}
DECL|method|getRedeliveryPolicy ()
specifier|public
name|RedeliveryPolicy
name|getRedeliveryPolicy
parameter_list|()
block|{
return|return
name|redeliveryPolicy
return|;
block|}
DECL|method|getLogger ()
specifier|public
name|CamelLogger
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
DECL|method|getDefaultHandledPredicate ()
specifier|protected
name|Predicate
name|getDefaultHandledPredicate
parameter_list|()
block|{
comment|// Default is not not handle errors
return|return
literal|null
return|;
block|}
DECL|method|prepareExchangeForContinue (Exchange exchange, RedeliveryData data, boolean isDeadLetterChannel)
specifier|protected
name|void
name|prepareExchangeForContinue
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RedeliveryData
name|data
parameter_list|,
name|boolean
name|isDeadLetterChannel
parameter_list|)
block|{
name|Exception
name|caught
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// we continue so clear any exceptions
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// clear rollback flags
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ROLLBACK_ONLY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// reset cached streams so they can be read again
name|MessageHelper
operator|.
name|resetStreamCache
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
comment|// its continued then remove traces of redelivery attempted and caught exception
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_MAX_COUNTER
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_HANDLED
argument_list|)
expr_stmt|;
comment|// keep the Exchange.EXCEPTION_CAUGHT as property so end user knows the caused exception
comment|// create log message
name|String
name|msg
init|=
literal|"Failed delivery for "
operator|+
name|ExchangeHelper
operator|.
name|logIds
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|msg
operator|=
name|msg
operator|+
literal|". Exhausted after delivery attempt: "
operator|+
name|data
operator|.
name|redeliveryCounter
operator|+
literal|" caught: "
operator|+
name|caught
expr_stmt|;
name|msg
operator|=
name|msg
operator|+
literal|". Handled and continue routing."
expr_stmt|;
comment|// log that we failed but want to continue
name|logFailedDelivery
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|isDeadLetterChannel
argument_list|,
literal|true
argument_list|,
name|exchange
argument_list|,
name|msg
argument_list|,
name|data
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareExchangeForRedelivery (Exchange exchange, RedeliveryData data)
specifier|protected
name|void
name|prepareExchangeForRedelivery
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RedeliveryData
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|redeliveryEnabled
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Redelivery is not enabled on "
operator|+
name|this
operator|+
literal|". Make sure you have configured the error handler properly."
argument_list|)
throw|;
block|}
comment|// there must be a defensive copy of the exchange
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|data
operator|.
name|original
argument_list|,
literal|"Defensive copy of Exchange is null"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// okay we will give it another go so clear the exception so we can try again
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// clear rollback flags
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ROLLBACK_ONLY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO: We may want to store these as state on RedeliveryData so we keep them in case end user messes with Exchange
comment|// and then put these on the exchange when doing a redelivery / fault processor
comment|// preserve these headers
name|Integer
name|redeliveryCounter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|redeliveryMaxCounter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_MAX_COUNTER
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|redelivered
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// we are redelivering so copy from original back to exchange
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|data
operator|.
name|original
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOut
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// reset cached streams so they can be read again
name|MessageHelper
operator|.
name|resetStreamCache
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
comment|// put back headers
if|if
condition|(
name|redeliveryCounter
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|,
name|redeliveryCounter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redeliveryMaxCounter
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_MAX_COUNTER
argument_list|,
name|redeliveryMaxCounter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redelivered
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|,
name|redelivered
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleException (Exchange exchange, RedeliveryData data, boolean isDeadLetterChannel)
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RedeliveryData
name|data
parameter_list|,
name|boolean
name|isDeadLetterChannel
parameter_list|)
block|{
name|Exception
name|e
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// store the original caused exception in a property, so we can restore it later
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// find the error handler to use (if any)
name|OnExceptionDefinition
name|exceptionPolicy
init|=
name|getExceptionPolicy
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionPolicy
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|currentRedeliveryPolicy
operator|=
name|exceptionPolicy
operator|.
name|createRedeliveryPolicy
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|data
operator|.
name|currentRedeliveryPolicy
argument_list|)
expr_stmt|;
name|data
operator|.
name|handledPredicate
operator|=
name|exceptionPolicy
operator|.
name|getHandledPolicy
argument_list|()
expr_stmt|;
name|data
operator|.
name|continuedPredicate
operator|=
name|exceptionPolicy
operator|.
name|getContinuedPolicy
argument_list|()
expr_stmt|;
name|data
operator|.
name|retryWhilePredicate
operator|=
name|exceptionPolicy
operator|.
name|getRetryWhilePolicy
argument_list|()
expr_stmt|;
name|data
operator|.
name|useOriginalInMessage
operator|=
name|exceptionPolicy
operator|.
name|getUseOriginalMessagePolicy
argument_list|()
operator|!=
literal|null
operator|&&
name|exceptionPolicy
operator|.
name|getUseOriginalMessagePolicy
argument_list|()
expr_stmt|;
comment|// route specific failure handler?
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
name|UnitOfWork
name|uow
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|uow
operator|!=
literal|null
operator|&&
name|uow
operator|.
name|getRouteContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|routeId
init|=
name|uow
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|processor
operator|=
name|exceptionPolicy
operator|.
name|getErrorHandler
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|exceptionPolicy
operator|.
name|getErrorHandlers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// note this should really not happen, but we have this code as a fail safe
comment|// to be backwards compatible with the old behavior
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot determine current route from Exchange with id: {}, will fallback and use first error handler."
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|processor
operator|=
name|exceptionPolicy
operator|.
name|getErrorHandlers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|failureProcessor
operator|=
name|processor
expr_stmt|;
block|}
comment|// route specific on redelivery?
name|processor
operator|=
name|exceptionPolicy
operator|.
name|getOnRedelivery
argument_list|()
expr_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|onRedeliveryProcessor
operator|=
name|processor
expr_stmt|;
block|}
block|}
comment|// only log if not failure handled or not an exhausted unit of work
if|if
condition|(
operator|!
name|ExchangeHelper
operator|.
name|isFailureHandled
argument_list|(
name|exchange
argument_list|)
operator|&&
operator|!
name|ExchangeHelper
operator|.
name|isUnitOfWorkExhausted
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Failed delivery for "
operator|+
name|ExchangeHelper
operator|.
name|logIds
argument_list|(
name|exchange
argument_list|)
operator|+
literal|". On delivery attempt: "
operator|+
name|data
operator|.
name|redeliveryCounter
operator|+
literal|" caught: "
operator|+
name|e
decl_stmt|;
name|logFailedDelivery
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|isDeadLetterChannel
argument_list|,
name|exchange
argument_list|,
name|msg
argument_list|,
name|data
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|redeliveryCounter
operator|=
name|incrementRedeliveryCounter
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gives an optional configure redelivery processor a chance to process before the Exchange      * will be redelivered. This can be used to alter the Exchange.      */
DECL|method|deliverToOnRedeliveryProcessor (final Exchange exchange, final RedeliveryData data)
specifier|protected
name|void
name|deliverToOnRedeliveryProcessor
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|RedeliveryData
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|onRedeliveryProcessor
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Redelivery processor {} is processing Exchange: {} before its redelivered"
argument_list|,
name|data
operator|.
name|onRedeliveryProcessor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// run this synchronously as its just a Processor
try|try
block|{
name|data
operator|.
name|onRedeliveryProcessor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Redelivery processor done"
argument_list|)
expr_stmt|;
block|}
comment|/**      * All redelivery attempts failed so move the exchange to the dead letter queue      */
DECL|method|deliverToFailureProcessor (final Processor processor, final boolean isDeadLetterChannel, final Exchange exchange, final RedeliveryData data, final AsyncCallback callback)
specifier|protected
name|boolean
name|deliverToFailureProcessor
parameter_list|(
specifier|final
name|Processor
name|processor
parameter_list|,
specifier|final
name|boolean
name|isDeadLetterChannel
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|RedeliveryData
name|data
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|boolean
name|sync
init|=
literal|true
decl_stmt|;
name|Exception
name|caught
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// we did not success with the redelivery so now we let the failure processor handle it
comment|// clear exception as we let the failure processor handle it
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|shouldHandle
init|=
name|shouldHandle
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|shouldContinue
init|=
name|shouldContinue
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
decl_stmt|;
comment|// regard both handled or continued as being handled
name|boolean
name|handled
init|=
literal|false
decl_stmt|;
comment|// always handle if dead letter channel
name|boolean
name|handleOrContinue
init|=
name|isDeadLetterChannel
operator|||
name|shouldHandle
operator|||
name|shouldContinue
decl_stmt|;
if|if
condition|(
name|handleOrContinue
condition|)
block|{
comment|// its handled then remove traces of redelivery attempted
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_MAX_COUNTER
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_EXHAUSTED
argument_list|)
expr_stmt|;
comment|// and remove traces of rollback only and uow exhausted markers
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|ROLLBACK_ONLY
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|UNIT_OF_WORK_EXHAUSTED
argument_list|)
expr_stmt|;
name|handled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// must decrement the redelivery counter as we didn't process the redelivery but is
comment|// handling by the failure handler. So we must -1 to not let the counter be out-of-sync
name|decrementRedeliveryCounter
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// is the a failure processor to process the Exchange
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
comment|// prepare original IN body if it should be moved instead of current body
if|if
condition|(
name|data
operator|.
name|useOriginalInMessage
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Using the original IN message instead of current"
argument_list|)
expr_stmt|;
name|Message
name|original
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|getOriginalInMessage
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
name|original
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Removing the out message to avoid some uncertain behavior"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOut
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// reset cached streams so they can be read again
name|MessageHelper
operator|.
name|resetStreamCache
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
comment|// invoke custom on prepare
if|if
condition|(
name|onPrepare
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"OnPrepare processor {} is processing Exchange: {}"
argument_list|,
name|onPrepare
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|onPrepare
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// a new exception was thrown during prepare
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Failure processor {} is processing Exchange: {}"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// store the last to endpoint as the failure endpoint
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ENDPOINT
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|)
argument_list|)
expr_stmt|;
comment|// and store the route id so we know in which route we failed
name|UnitOfWork
name|uow
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|uow
operator|!=
literal|null
operator|&&
name|uow
operator|.
name|getRouteContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ROUTE_ID
argument_list|,
name|uow
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// fire event as we had a failure processor to handle it, which there is a event for
specifier|final
name|boolean
name|deadLetterChannel
init|=
name|processor
operator|==
name|data
operator|.
name|deadLetterProcessor
decl_stmt|;
name|EventHelper
operator|.
name|notifyExchangeFailureHandling
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|processor
argument_list|,
name|deadLetterChannel
argument_list|,
name|deadLetterUri
argument_list|)
expr_stmt|;
comment|// the failure processor could also be asynchronous
name|AsyncProcessor
name|afp
init|=
name|AsyncProcessorConverterHelper
operator|.
name|convert
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|sync
operator|=
name|afp
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Failure processor done: {} processing Exchange: {}"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|prepareExchangeAfterFailure
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|,
name|isDeadLetterChannel
argument_list|,
name|shouldHandle
argument_list|,
name|shouldContinue
argument_list|)
expr_stmt|;
comment|// fire event as we had a failure processor to handle it, which there is a event for
name|EventHelper
operator|.
name|notifyExchangeFailureHandled
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|processor
argument_list|,
name|deadLetterChannel
argument_list|,
name|deadLetterUri
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// if the fault was handled asynchronously, this should be reflected in the callback as well
name|data
operator|.
name|sync
operator|&=
name|sync
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
name|data
operator|.
name|sync
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// invoke custom on prepare
if|if
condition|(
name|onPrepare
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"OnPrepare processor {} is processing Exchange: {}"
argument_list|,
name|onPrepare
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|onPrepare
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// a new exception was thrown during prepare
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no processor but we need to prepare after failure as well
name|prepareExchangeAfterFailure
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|,
name|isDeadLetterChannel
argument_list|,
name|shouldHandle
argument_list|,
name|shouldContinue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// callback we are done
name|callback
operator|.
name|done
argument_list|(
name|data
operator|.
name|sync
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create log message
name|String
name|msg
init|=
literal|"Failed delivery for "
operator|+
name|ExchangeHelper
operator|.
name|logIds
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|msg
operator|=
name|msg
operator|+
literal|". Exhausted after delivery attempt: "
operator|+
name|data
operator|.
name|redeliveryCounter
operator|+
literal|" caught: "
operator|+
name|caught
expr_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isDeadLetterChannel
operator|&&
name|deadLetterUri
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
literal|". Handled by DeadLetterChannel: ["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|deadLetterUri
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|msg
operator|+
literal|". Processed by failure processor: "
operator|+
name|processor
expr_stmt|;
block|}
block|}
comment|// log that we failed delivery as we are exhausted
name|logFailedDelivery
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|handled
argument_list|,
literal|false
argument_list|,
name|isDeadLetterChannel
argument_list|,
name|exchange
argument_list|,
name|msg
argument_list|,
name|data
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|sync
return|;
block|}
DECL|method|prepareExchangeAfterFailure (final Exchange exchange, final RedeliveryData data, final boolean isDeadLetterChannel, final boolean shouldHandle, final boolean shouldContinue)
specifier|protected
name|void
name|prepareExchangeAfterFailure
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|RedeliveryData
name|data
parameter_list|,
specifier|final
name|boolean
name|isDeadLetterChannel
parameter_list|,
specifier|final
name|boolean
name|shouldHandle
parameter_list|,
specifier|final
name|boolean
name|shouldContinue
parameter_list|)
block|{
name|Exception
name|newException
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// we could not process the exchange so we let the failure processor handled it
name|ExchangeHelper
operator|.
name|setFailureHandled
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// honor if already set a handling
name|boolean
name|alreadySet
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|ERRORHANDLER_HANDLED
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|alreadySet
condition|)
block|{
name|boolean
name|handled
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|ERRORHANDLER_HANDLED
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"This exchange has already been marked for handling: {}"
argument_list|,
name|handled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|handled
condition|)
block|{
comment|// exception not handled, put exception back in the exchange
name|exchange
operator|.
name|setException
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// and put failure endpoint back as well
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ENDPOINT
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// dead letter channel is special
if|if
condition|(
name|shouldContinue
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"This exchange is continued: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// okay we want to continue then prepare the exchange for that as well
name|prepareExchangeForContinue
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|,
name|isDeadLetterChannel
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shouldHandle
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"This exchange is handled so its marked as not failed: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ERRORHANDLER_HANDLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// okay the redelivery policy are not explicit set to true, so we should allow to check for some
comment|// special situations when using dead letter channel
if|if
condition|(
name|isDeadLetterChannel
condition|)
block|{
comment|// use the handled option from the DLC
name|boolean
name|handled
init|=
name|data
operator|.
name|handleNewException
decl_stmt|;
comment|// when using DLC then log new exception whether its being handled or not, as otherwise it may appear as
comment|// the DLC swallow new exceptions by default (which is by design to ensure the DLC always complete,
comment|// to avoid causing endless poison messages that fails forever)
if|if
condition|(
name|newException
operator|!=
literal|null
operator|&&
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogNewException
argument_list|()
condition|)
block|{
name|String
name|uri
init|=
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|deadLetterUri
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"New exception occurred during processing by the DeadLetterChannel["
operator|+
name|uri
operator|+
literal|"] due "
operator|+
name|newException
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|handled
condition|)
block|{
name|msg
operator|+=
literal|". The new exception is being handled as deadLetterHandleNewException=true."
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|+=
literal|". The new exception is not handled as deadLetterHandleNewException=false."
expr_stmt|;
block|}
name|logFailedDelivery
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|handled
argument_list|,
literal|false
argument_list|,
name|isDeadLetterChannel
argument_list|,
name|exchange
argument_list|,
name|msg
argument_list|,
name|data
argument_list|,
name|newException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handled
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"This exchange is handled so its marked as not failed: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ERRORHANDLER_HANDLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// not handled by default
name|prepareExchangeAfterFailureNotHandled
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareExchangeAfterFailureNotHandled (Exchange exchange)
specifier|private
name|void
name|prepareExchangeAfterFailureNotHandled
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"This exchange is not handled or continued so its marked as failed: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// exception not handled, put exception back in the exchange
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ERRORHANDLER_HANDLED
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// and put failure endpoint back as well
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ENDPOINT
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|)
argument_list|)
expr_stmt|;
comment|// and store the route id so we know in which route we failed
name|UnitOfWork
name|uow
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|uow
operator|!=
literal|null
operator|&&
name|uow
operator|.
name|getRouteContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ROUTE_ID
argument_list|,
name|uow
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logFailedDelivery (boolean shouldRedeliver, boolean newException, boolean handled, boolean continued, boolean isDeadLetterChannel, Exchange exchange, String message, RedeliveryData data, Throwable e)
specifier|private
name|void
name|logFailedDelivery
parameter_list|(
name|boolean
name|shouldRedeliver
parameter_list|,
name|boolean
name|newException
parameter_list|,
name|boolean
name|handled
parameter_list|,
name|boolean
name|continued
parameter_list|,
name|boolean
name|isDeadLetterChannel
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|String
name|message
parameter_list|,
name|RedeliveryData
name|data
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|exchange
operator|.
name|isRollbackOnly
argument_list|()
condition|)
block|{
if|if
condition|(
name|newException
operator|&&
operator|!
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogNewException
argument_list|()
condition|)
block|{
comment|// do not log new exception
return|return;
block|}
comment|// if we should not rollback, then check whether logging is enabled
comment|// depending on what kind of error handler we should
name|boolean
name|logExhausted
decl_stmt|;
if|if
condition|(
name|isDeadLetterChannel
condition|)
block|{
comment|// if DLC then log exhausted should not be default
name|logExhausted
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|getLogExhaustedMessageHistory
argument_list|()
operator|!=
literal|null
operator|&&
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogExhaustedMessageHistory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// for any other error handler log exhausted should be default
name|logExhausted
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|getLogExhaustedMessageHistory
argument_list|()
operator|==
literal|null
operator|||
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogExhaustedMessageHistory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newException
operator|&&
name|handled
operator|&&
operator|(
operator|!
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogHandled
argument_list|()
operator|&&
operator|!
name|logExhausted
operator|)
condition|)
block|{
comment|// do not log handled (but log exhausted message history can overrule log handled)
return|return;
block|}
if|if
condition|(
operator|!
name|newException
operator|&&
name|continued
operator|&&
operator|!
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogContinued
argument_list|()
condition|)
block|{
comment|// do not log handled
return|return;
block|}
if|if
condition|(
operator|!
name|newException
operator|&&
name|shouldRedeliver
operator|&&
operator|!
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogRetryAttempted
argument_list|()
condition|)
block|{
comment|// do not log retry attempts
return|return;
block|}
if|if
condition|(
operator|!
name|newException
operator|&&
operator|!
name|shouldRedeliver
operator|&&
operator|!
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogExhausted
argument_list|()
condition|)
block|{
comment|// do not log exhausted
return|return;
block|}
block|}
name|LoggingLevel
name|newLogLevel
decl_stmt|;
name|boolean
name|logStackTrace
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|isRollbackOnly
argument_list|()
condition|)
block|{
name|newLogLevel
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|getRetriesExhaustedLogLevel
argument_list|()
expr_stmt|;
name|logStackTrace
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogStackTrace
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shouldRedeliver
condition|)
block|{
name|newLogLevel
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|getRetryAttemptedLogLevel
argument_list|()
expr_stmt|;
name|logStackTrace
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogRetryStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newLogLevel
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|getRetriesExhaustedLogLevel
argument_list|()
expr_stmt|;
name|logStackTrace
operator|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newException
condition|)
block|{
comment|// log at most WARN level
if|if
condition|(
name|newLogLevel
operator|==
name|LoggingLevel
operator|.
name|ERROR
condition|)
block|{
name|newLogLevel
operator|=
name|LoggingLevel
operator|.
name|WARN
expr_stmt|;
block|}
name|String
name|msg
init|=
name|message
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
literal|"New exception "
operator|+
name|ExchangeHelper
operator|.
name|logIds
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// special for logging the new exception
name|Throwable
name|cause
init|=
name|e
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
literal|" due: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|logStackTrace
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|e
argument_list|,
name|newLogLevel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|newLogLevel
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|isRollbackOnly
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Rollback "
operator|+
name|ExchangeHelper
operator|.
name|logIds
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Throwable
name|cause
init|=
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|?
name|exchange
operator|.
name|getException
argument_list|()
else|:
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
literal|" due: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// should we include message history
if|if
condition|(
operator|!
name|shouldRedeliver
operator|&&
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogExhaustedMessageHistory
argument_list|()
condition|)
block|{
name|String
name|routeStackTrace
init|=
name|MessageHelper
operator|.
name|dumpMessageHistoryStacktrace
argument_list|(
name|exchange
argument_list|,
name|exchangeFormatter
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeStackTrace
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
literal|"\n"
operator|+
name|routeStackTrace
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newLogLevel
operator|==
name|LoggingLevel
operator|.
name|ERROR
condition|)
block|{
comment|// log intended rollback on maximum WARN level (no ERROR)
name|logger
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|LoggingLevel
operator|.
name|WARN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise use the desired logging level
name|logger
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|newLogLevel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|msg
init|=
name|message
decl_stmt|;
comment|// should we include message history
if|if
condition|(
operator|!
name|shouldRedeliver
operator|&&
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|isLogExhaustedMessageHistory
argument_list|()
condition|)
block|{
name|String
name|routeStackTrace
init|=
name|MessageHelper
operator|.
name|dumpMessageHistoryStacktrace
argument_list|(
name|exchange
argument_list|,
name|exchangeFormatter
argument_list|,
name|e
operator|!=
literal|null
operator|&&
name|logStackTrace
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeStackTrace
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
literal|"\n"
operator|+
name|routeStackTrace
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|logStackTrace
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|e
argument_list|,
name|newLogLevel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|newLogLevel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Determines whether the exchange is exhausted (or anyway marked to not continue such as rollback).      *<p/>      * If the exchange is exhausted, then we will not continue processing, but let the      * failure processor deal with the exchange.      *      * @param exchange the current exchange      * @param data     the redelivery data      * @return<tt>false</tt> to continue/redeliver, or<tt>true</tt> to exhaust.      */
DECL|method|isExhausted (Exchange exchange, RedeliveryData data)
specifier|private
name|boolean
name|isExhausted
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RedeliveryData
name|data
parameter_list|)
block|{
comment|// if marked as rollback only then do not continue/redeliver
name|boolean
name|exhausted
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_EXHAUSTED
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|exhausted
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"This exchange is marked as redelivery exhausted: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// if marked as rollback only then do not continue/redeliver
name|boolean
name|rollbackOnly
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|ROLLBACK_ONLY
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rollbackOnly
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"This exchange is marked as rollback only, so forcing it to be exhausted: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// its the first original call so continue
if|if
condition|(
name|data
operator|.
name|redeliveryCounter
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// its a potential redelivery so determine if we should redeliver or not
name|boolean
name|redeliver
init|=
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|shouldRedeliver
argument_list|(
name|exchange
argument_list|,
name|data
operator|.
name|redeliveryCounter
argument_list|,
name|data
operator|.
name|retryWhilePredicate
argument_list|)
decl_stmt|;
return|return
operator|!
name|redeliver
return|;
block|}
comment|/**      * Determines whether or not to continue if we are exhausted.      *      * @param exchange the current exchange      * @param data     the redelivery data      * @return<tt>true</tt> to continue, or<tt>false</tt> to exhaust.      */
DECL|method|shouldContinue (Exchange exchange, RedeliveryData data)
specifier|private
name|boolean
name|shouldContinue
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RedeliveryData
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|continuedPredicate
operator|!=
literal|null
condition|)
block|{
return|return
name|data
operator|.
name|continuedPredicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
return|;
block|}
comment|// do not continue by default
return|return
literal|false
return|;
block|}
comment|/**      * Determines whether or not to handle if we are exhausted.      *      * @param exchange the current exchange      * @param data     the redelivery data      * @return<tt>true</tt> to handle, or<tt>false</tt> to exhaust.      */
DECL|method|shouldHandle (Exchange exchange, RedeliveryData data)
specifier|private
name|boolean
name|shouldHandle
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|RedeliveryData
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|handledPredicate
operator|!=
literal|null
condition|)
block|{
return|return
name|data
operator|.
name|handledPredicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
return|;
block|}
comment|// do not handle by default
return|return
literal|false
return|;
block|}
comment|/**      * Increments the redelivery counter and adds the redelivered flag if the      * message has been redelivered      */
DECL|method|incrementRedeliveryCounter (Exchange exchange, Throwable e, RedeliveryData data)
specifier|private
name|int
name|incrementRedeliveryCounter
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Throwable
name|e
parameter_list|,
name|RedeliveryData
name|data
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Integer
name|counter
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|next
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|counter
operator|+
literal|1
expr_stmt|;
block|}
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// if maximum redeliveries is used, then provide that information as well
if|if
condition|(
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|getMaximumRedeliveries
argument_list|()
operator|>
literal|0
condition|)
block|{
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_MAX_COUNTER
argument_list|,
name|data
operator|.
name|currentRedeliveryPolicy
operator|.
name|getMaximumRedeliveries
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
comment|/**      * Prepares the redelivery counter and boolean flag for the failure handle processor      */
DECL|method|decrementRedeliveryCounter (Exchange exchange)
specifier|private
name|void
name|decrementRedeliveryCounter
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Integer
name|counter
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
name|int
name|prev
init|=
name|counter
operator|-
literal|1
decl_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// set boolean flag according to counter
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|,
name|prev
operator|>
literal|0
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not redelivered
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Determines if redelivery is enabled by checking if any of the redelivery policy      * settings may allow redeliveries.      *      * @return<tt>true</tt> if redelivery is possible,<tt>false</tt> otherwise      * @throws Exception can be thrown      */
DECL|method|determineIfRedeliveryIsEnabled ()
specifier|private
name|boolean
name|determineIfRedeliveryIsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// determine if redeliver is enabled either on error handler
if|if
condition|(
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getMaximumRedeliveries
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// must check for != 0 as (-1 means redeliver forever)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|retryWhilePolicy
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// or on the exception policies
if|if
condition|(
operator|!
name|exceptionPolicies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// walk them to see if any of them have a maximum redeliveries> 0 or retry until set
for|for
control|(
name|OnExceptionDefinition
name|def
range|:
name|exceptionPolicies
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|ref
init|=
name|def
operator|.
name|getRedeliveryPolicyRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
comment|// lookup in registry if ref provided
name|RedeliveryPolicy
name|policy
init|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|camelContext
argument_list|,
name|ref
argument_list|,
name|RedeliveryPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|getMaximumRedeliveries
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// must check for != 0 as (-1 means redeliver forever)
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|def
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Integer
name|max
init|=
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|camelContext
argument_list|,
name|def
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getMaximumRedeliveries
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
operator|&&
name|max
operator|!=
literal|0
condition|)
block|{
comment|// must check for != 0 as (-1 means redeliver forever)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|def
operator|.
name|getRetryWhilePolicy
argument_list|()
operator|!=
literal|null
operator|||
name|def
operator|.
name|getRetryWhile
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets the number of exchanges that are pending for redelivery      */
DECL|method|getPendingRedeliveryCount ()
specifier|public
name|int
name|getPendingRedeliveryCount
parameter_list|()
block|{
name|int
name|answer
init|=
name|redeliverySleepCounter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|executorService
operator|!=
literal|null
operator|&&
name|executorService
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|answer
operator|+=
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|executorService
operator|)
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|output
argument_list|,
name|outputAsync
argument_list|,
name|deadLetter
argument_list|)
expr_stmt|;
comment|// determine if redeliver is enabled or not
name|redeliveryEnabled
operator|=
name|determineIfRedeliveryIsEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Redelivery enabled: {} on error handler: {}"
argument_list|,
name|redeliveryEnabled
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// we only need thread pool if redelivery is enabled
if|if
condition|(
name|redeliveryEnabled
condition|)
block|{
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
comment|// use default shared executor service
name|executorService
operator|=
name|camelContext
operator|.
name|getErrorHandlerExecutorService
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Using ExecutorService: {} for redeliveries on error handler: {}"
argument_list|,
name|executorService
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|// reset flag when starting
name|preparingShutdown
operator|=
literal|false
expr_stmt|;
name|redeliverySleepCounter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop, do not stop any services which we only do when shutting down
comment|// as the error handler can be context scoped, and should not stop in case
comment|// a route stops
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|deadLetter
argument_list|,
name|output
argument_list|,
name|outputAsync
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

