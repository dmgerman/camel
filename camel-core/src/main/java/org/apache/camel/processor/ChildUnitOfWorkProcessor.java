begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_comment
comment|/**  * An {@link UnitOfWorkProcessor} that creates a child {@link UnitOfWork} that is  * associated to a parent {@link UnitOfWork}.  *  * @see SubUnitOfWorkProcessor  * @see org.apache.camel.spi.UnitOfWorkCallback  */
end_comment

begin_class
DECL|class|ChildUnitOfWorkProcessor
specifier|public
class|class
name|ChildUnitOfWorkProcessor
extends|extends
name|UnitOfWorkProcessor
block|{
DECL|field|parent
specifier|private
specifier|final
name|UnitOfWork
name|parent
decl_stmt|;
DECL|method|ChildUnitOfWorkProcessor (UnitOfWork parent, Processor processor)
specifier|public
name|ChildUnitOfWorkProcessor
parameter_list|(
name|UnitOfWork
name|parent
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|ChildUnitOfWorkProcessor (UnitOfWork parent, AsyncProcessor processor)
specifier|public
name|ChildUnitOfWorkProcessor
parameter_list|(
name|UnitOfWork
name|parent
parameter_list|,
name|AsyncProcessor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|ChildUnitOfWorkProcessor (UnitOfWork parent, RouteContext routeContext, Processor processor)
specifier|public
name|ChildUnitOfWorkProcessor
parameter_list|(
name|UnitOfWork
name|parent
parameter_list|,
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|ChildUnitOfWorkProcessor (UnitOfWork parent, RouteContext routeContext, AsyncProcessor processor)
specifier|public
name|ChildUnitOfWorkProcessor
parameter_list|(
name|UnitOfWork
name|parent
parameter_list|,
name|RouteContext
name|routeContext
parameter_list|,
name|AsyncProcessor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createUnitOfWork (Exchange exchange)
specifier|protected
name|UnitOfWork
name|createUnitOfWork
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// let the parent create a child unit of work to be used
return|return
name|parent
operator|.
name|createChildUnitOfWork
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
end_class

end_unit

