begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|TraceFormatter
specifier|public
class|class
name|TraceFormatter
block|{
DECL|field|showBreadCrumb
specifier|private
name|boolean
name|showBreadCrumb
init|=
literal|true
decl_stmt|;
DECL|field|showNode
specifier|private
name|boolean
name|showNode
init|=
literal|true
decl_stmt|;
DECL|field|showExchangeId
specifier|private
name|boolean
name|showExchangeId
decl_stmt|;
DECL|field|showExchangePattern
specifier|private
name|boolean
name|showExchangePattern
init|=
literal|true
decl_stmt|;
DECL|field|showProperties
specifier|private
name|boolean
name|showProperties
init|=
literal|true
decl_stmt|;
DECL|field|showHeaders
specifier|private
name|boolean
name|showHeaders
init|=
literal|true
decl_stmt|;
DECL|field|showBody
specifier|private
name|boolean
name|showBody
init|=
literal|true
decl_stmt|;
DECL|field|showBodyType
specifier|private
name|boolean
name|showBodyType
init|=
literal|true
decl_stmt|;
DECL|field|showOutBody
specifier|private
name|boolean
name|showOutBody
init|=
literal|false
decl_stmt|;
DECL|field|showOutBodyType
specifier|private
name|boolean
name|showOutBodyType
init|=
literal|false
decl_stmt|;
DECL|field|showException
specifier|private
name|boolean
name|showException
init|=
literal|true
decl_stmt|;
DECL|method|format (TraceInterceptor interceptor, Exchange exchange)
specifier|public
name|Object
name|format
parameter_list|(
name|TraceInterceptor
name|interceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
comment|// false because we don't want to introduce side effects
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Throwable
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getExchangeAndNode
argument_list|(
name|interceptor
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showExchangePattern
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Pattern:"
argument_list|)
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getPattern
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
comment|// only show properties if we have any
if|if
condition|(
name|showProperties
operator|&&
operator|!
name|exchange
operator|.
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Properties:"
argument_list|)
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
comment|// only show headers if we have any
if|if
condition|(
name|showHeaders
operator|&&
operator|!
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Headers:"
argument_list|)
operator|.
name|append
argument_list|(
name|in
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showBodyType
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", BodyType:"
argument_list|)
operator|.
name|append
argument_list|(
name|getBodyTypeAsString
argument_list|(
name|in
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showBody
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Body:"
argument_list|)
operator|.
name|append
argument_list|(
name|getBodyAsString
argument_list|(
name|in
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showOutBodyType
operator|&&
name|out
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", OutBodyType:"
argument_list|)
operator|.
name|append
argument_list|(
name|getBodyTypeAsString
argument_list|(
name|out
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showOutBody
operator|&&
name|out
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", OutBody:"
argument_list|)
operator|.
name|append
argument_list|(
name|getBodyAsString
argument_list|(
name|out
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showException
operator|&&
name|exception
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Exception:"
argument_list|)
operator|.
name|append
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isShowBody ()
specifier|public
name|boolean
name|isShowBody
parameter_list|()
block|{
return|return
name|showBody
return|;
block|}
DECL|method|setShowBody (boolean showBody)
specifier|public
name|void
name|setShowBody
parameter_list|(
name|boolean
name|showBody
parameter_list|)
block|{
name|this
operator|.
name|showBody
operator|=
name|showBody
expr_stmt|;
block|}
DECL|method|isShowBodyType ()
specifier|public
name|boolean
name|isShowBodyType
parameter_list|()
block|{
return|return
name|showBodyType
return|;
block|}
DECL|method|setShowBodyType (boolean showBodyType)
specifier|public
name|void
name|setShowBodyType
parameter_list|(
name|boolean
name|showBodyType
parameter_list|)
block|{
name|this
operator|.
name|showBodyType
operator|=
name|showBodyType
expr_stmt|;
block|}
DECL|method|setShowOutBody (boolean showOutBody)
specifier|public
name|void
name|setShowOutBody
parameter_list|(
name|boolean
name|showOutBody
parameter_list|)
block|{
name|this
operator|.
name|showOutBody
operator|=
name|showOutBody
expr_stmt|;
block|}
DECL|method|isShowOutBody ()
specifier|public
name|boolean
name|isShowOutBody
parameter_list|()
block|{
return|return
name|showOutBody
return|;
block|}
DECL|method|setShowOutBodyType (boolean showOutBodyType)
specifier|public
name|void
name|setShowOutBodyType
parameter_list|(
name|boolean
name|showOutBodyType
parameter_list|)
block|{
name|this
operator|.
name|showOutBodyType
operator|=
name|showOutBodyType
expr_stmt|;
block|}
DECL|method|isShowOutBodyType ()
specifier|public
name|boolean
name|isShowOutBodyType
parameter_list|()
block|{
return|return
name|showOutBodyType
return|;
block|}
DECL|method|isShowBreadCrumb ()
specifier|public
name|boolean
name|isShowBreadCrumb
parameter_list|()
block|{
return|return
name|showBreadCrumb
return|;
block|}
DECL|method|setShowBreadCrumb (boolean showBreadCrumb)
specifier|public
name|void
name|setShowBreadCrumb
parameter_list|(
name|boolean
name|showBreadCrumb
parameter_list|)
block|{
name|this
operator|.
name|showBreadCrumb
operator|=
name|showBreadCrumb
expr_stmt|;
block|}
DECL|method|isShowExchangeId ()
specifier|public
name|boolean
name|isShowExchangeId
parameter_list|()
block|{
return|return
name|showExchangeId
return|;
block|}
DECL|method|setShowExchangeId (boolean showExchangeId)
specifier|public
name|void
name|setShowExchangeId
parameter_list|(
name|boolean
name|showExchangeId
parameter_list|)
block|{
name|this
operator|.
name|showExchangeId
operator|=
name|showExchangeId
expr_stmt|;
block|}
DECL|method|isShowHeaders ()
specifier|public
name|boolean
name|isShowHeaders
parameter_list|()
block|{
return|return
name|showHeaders
return|;
block|}
DECL|method|setShowHeaders (boolean showHeaders)
specifier|public
name|void
name|setShowHeaders
parameter_list|(
name|boolean
name|showHeaders
parameter_list|)
block|{
name|this
operator|.
name|showHeaders
operator|=
name|showHeaders
expr_stmt|;
block|}
DECL|method|isShowProperties ()
specifier|public
name|boolean
name|isShowProperties
parameter_list|()
block|{
return|return
name|showProperties
return|;
block|}
DECL|method|setShowProperties (boolean showProperties)
specifier|public
name|void
name|setShowProperties
parameter_list|(
name|boolean
name|showProperties
parameter_list|)
block|{
name|this
operator|.
name|showProperties
operator|=
name|showProperties
expr_stmt|;
block|}
DECL|method|isShowNode ()
specifier|public
name|boolean
name|isShowNode
parameter_list|()
block|{
return|return
name|showNode
return|;
block|}
DECL|method|setShowNode (boolean showNode)
specifier|public
name|void
name|setShowNode
parameter_list|(
name|boolean
name|showNode
parameter_list|)
block|{
name|this
operator|.
name|showNode
operator|=
name|showNode
expr_stmt|;
block|}
DECL|method|isShowExchangePattern ()
specifier|public
name|boolean
name|isShowExchangePattern
parameter_list|()
block|{
return|return
name|showExchangePattern
return|;
block|}
DECL|method|setShowExchangePattern (boolean showExchangePattern)
specifier|public
name|void
name|setShowExchangePattern
parameter_list|(
name|boolean
name|showExchangePattern
parameter_list|)
block|{
name|this
operator|.
name|showExchangePattern
operator|=
name|showExchangePattern
expr_stmt|;
block|}
DECL|method|isShowException ()
specifier|public
name|boolean
name|isShowException
parameter_list|()
block|{
return|return
name|showException
return|;
block|}
DECL|method|setShowException (boolean showException)
specifier|public
name|void
name|setShowException
parameter_list|(
name|boolean
name|showException
parameter_list|)
block|{
name|this
operator|.
name|showException
operator|=
name|showException
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|getBreadCrumbID (Exchange exchange)
specifier|protected
name|Object
name|getBreadCrumbID
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|UnitOfWork
name|unitOfWork
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
decl_stmt|;
return|return
name|unitOfWork
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|getBodyAsString (Message in)
specifier|protected
name|Object
name|getBodyAsString
parameter_list|(
name|Message
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StreamCache
name|newBody
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newBody
operator|=
name|in
operator|.
name|getBody
argument_list|(
name|StreamCache
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|newBody
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|setBody
argument_list|(
name|newBody
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoTypeConversionAvailableException
name|ex
parameter_list|)
block|{
comment|// ignore, in not of StreamCache type
block|}
name|Object
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|in
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoTypeConversionAvailableException
name|ex
parameter_list|)
block|{
name|answer
operator|=
name|in
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newBody
operator|!=
literal|null
condition|)
block|{
comment|// Reset the InputStreamCache
name|newBody
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getBodyTypeAsString (Message message)
specifier|protected
name|Object
name|getBodyTypeAsString
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|answer
init|=
name|ObjectHelper
operator|.
name|classCanonicalName
argument_list|(
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|answer
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
condition|)
block|{
return|return
name|answer
operator|.
name|substring
argument_list|(
literal|10
argument_list|)
return|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getNodeMessage (TraceInterceptor interceptor)
specifier|protected
name|String
name|getNodeMessage
parameter_list|(
name|TraceInterceptor
name|interceptor
parameter_list|)
block|{
name|String
name|message
init|=
name|interceptor
operator|.
name|getNode
argument_list|()
operator|.
name|getShortName
argument_list|()
operator|+
literal|"("
operator|+
name|interceptor
operator|.
name|getNode
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%1$-25s"
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|/**      * Returns the exchange id and node, ordered based on whether this was a trace of      * an exchange coming out of or into a processing step. For example,       *       * transform(body) -> ID-mojo/39713-1225468755256/2-0      *       * Or      *       * ID-mojo/39713-1225468755256/2-0 -> transform(body)      *       */
DECL|method|getExchangeAndNode (TraceInterceptor interceptor, Exchange exchange)
specifier|protected
name|String
name|getExchangeAndNode
parameter_list|(
name|TraceInterceptor
name|interceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|id
init|=
literal|""
decl_stmt|;
name|String
name|node
init|=
literal|""
decl_stmt|;
name|String
name|result
decl_stmt|;
if|if
condition|(
name|showBreadCrumb
operator|||
name|showExchangeId
condition|)
block|{
name|id
operator|=
name|getBreadCrumbID
argument_list|(
name|exchange
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|showNode
condition|)
block|{
name|node
operator|=
name|getNodeMessage
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|interceptor
operator|.
name|shouldTraceOutExchanges
argument_list|()
operator|&&
name|exchange
operator|.
name|getOut
argument_list|(
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|node
operator|.
name|trim
argument_list|()
operator|+
literal|" -> "
operator|+
name|id
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|id
operator|.
name|trim
argument_list|()
operator|+
literal|" -> "
operator|+
name|node
expr_stmt|;
block|}
comment|// we want to ensure text coming after this is aligned for readability
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%1$-60s"
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
end_class

end_unit

