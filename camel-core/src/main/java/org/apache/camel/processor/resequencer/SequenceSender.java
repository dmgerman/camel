begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.resequencer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A thread that takes re-ordered {@link Exchange}s from a blocking queue and  * send them to the linked processor.    *   * @author Martin Krasser  *   * @version $Revision  */
end_comment

begin_class
DECL|class|SequenceSender
specifier|public
class|class
name|SequenceSender
extends|extends
name|Thread
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SequenceSender
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|STOP
specifier|private
specifier|static
specifier|final
name|Exchange
name|STOP
init|=
name|createStopSignal
argument_list|()
decl_stmt|;
DECL|field|queue
specifier|private
name|BlockingQueue
argument_list|<
name|Exchange
argument_list|>
name|queue
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
comment|/**      * Creates a new {@link SequenceSender} thread.      *       * @param processor      *            the processor to send re-ordered {@link Exchange}s.      */
DECL|method|SequenceSender (Processor processor)
specifier|public
name|SequenceSender
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
comment|/**      * Sets the {@link BlockingQueue} to take messages from.      *       * @param queue      *            the {@link BlockingQueue} to take messages from.      */
DECL|method|setQueue (BlockingQueue<Exchange> queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|BlockingQueue
argument_list|<
name|Exchange
argument_list|>
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Exchange
name|exchange
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|==
name|STOP
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"exit processing loop after cancellation"
argument_list|)
expr_stmt|;
return|return;
block|}
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"exit processing loop after interrupt"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exception during exchange processing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Cancels this thread.      */
DECL|method|cancel ()
specifier|public
name|void
name|cancel
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|queue
operator|.
name|put
argument_list|(
name|STOP
argument_list|)
expr_stmt|;
block|}
DECL|method|createStopSignal ()
specifier|private
specifier|static
name|Exchange
name|createStopSignal
parameter_list|()
block|{
return|return
operator|(
name|Exchange
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|SequenceSender
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Exchange
operator|.
name|class
block|}
argument_list|,
name|createStopHandler
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createStopHandler ()
specifier|private
specifier|static
name|InvocationHandler
name|createStopHandler
parameter_list|()
block|{
return|return
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"illegal method invocation on stop signal"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

