begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A<code>SamplingThrottler</code> is a special kind of throttler. It also  * limits the number of exchanges sent to a downstream endpoint. It differs from  * a normal throttler in that it will not queue exchanges above the threshold  * for a given period. Instead these exchanges will be stopped, precluding them  * from being processed at all by downstream consumers.  *<p/>  * This kind of throttling can be useful for taking a sample from  * an exchange stream, rough consolidation of noisy and bursty exchange traffic  * or where queuing of throttled exchanges is undesirable.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|SamplingThrottler
specifier|public
class|class
name|SamplingThrottler
extends|extends
name|DelegateProcessor
block|{
DECL|field|log
specifier|protected
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|samplePeriod
specifier|private
name|long
name|samplePeriod
decl_stmt|;
DECL|field|periodInNanos
specifier|private
name|long
name|periodInNanos
decl_stmt|;
DECL|field|units
specifier|private
name|TimeUnit
name|units
decl_stmt|;
DECL|field|timeOfLastExchange
specifier|private
name|long
name|timeOfLastExchange
decl_stmt|;
DECL|field|stopper
specifier|private
name|StopProcessor
name|stopper
init|=
operator|new
name|StopProcessor
argument_list|()
decl_stmt|;
DECL|field|calculationLock
specifier|private
name|Object
name|calculationLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|sampled
specifier|private
name|SampleStats
name|sampled
init|=
operator|new
name|SampleStats
argument_list|()
decl_stmt|;
DECL|method|SamplingThrottler (Processor processor, long samplePeriod, TimeUnit units)
specifier|public
name|SamplingThrottler
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|long
name|samplePeriod
parameter_list|,
name|TimeUnit
name|units
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
if|if
condition|(
name|samplePeriod
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A positive value is required for the sampling period"
argument_list|)
throw|;
block|}
if|if
condition|(
name|units
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A invalid null value was supplied for the units of the sampling period"
argument_list|)
throw|;
block|}
name|this
operator|.
name|samplePeriod
operator|=
name|samplePeriod
expr_stmt|;
name|this
operator|.
name|units
operator|=
name|units
expr_stmt|;
name|periodInNanos
operator|=
name|units
operator|.
name|toNanos
argument_list|(
name|samplePeriod
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SamplingThrottler[1 exchange per: "
operator|+
name|samplePeriod
operator|+
literal|" "
operator|+
name|units
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" -> "
operator|+
name|getProcessor
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|getTraceLabel ()
specifier|public
name|String
name|getTraceLabel
parameter_list|()
block|{
return|return
literal|"samplingThrottler[1 exchange per: "
operator|+
name|samplePeriod
operator|+
literal|" "
operator|+
name|units
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|doSend
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|calculationLock
init|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>=
name|timeOfLastExchange
operator|+
name|periodInNanos
condition|)
block|{
name|doSend
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|sampled
operator|.
name|sample
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|timeOfLastExchange
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|sampled
operator|.
name|drop
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|doSend
condition|)
block|{
name|super
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stopper
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SampleStats
specifier|private
specifier|static
class|class
name|SampleStats
block|{
DECL|field|droppedThisPeriod
specifier|private
name|long
name|droppedThisPeriod
decl_stmt|;
DECL|field|totalDropped
specifier|private
name|long
name|totalDropped
decl_stmt|;
DECL|field|totalSampled
specifier|private
name|long
name|totalSampled
decl_stmt|;
DECL|field|totalThisPeriod
specifier|private
name|long
name|totalThisPeriod
decl_stmt|;
DECL|method|drop ()
name|String
name|drop
parameter_list|()
block|{
name|droppedThisPeriod
operator|++
expr_stmt|;
name|totalThisPeriod
operator|++
expr_stmt|;
name|totalDropped
operator|++
expr_stmt|;
return|return
name|getDroppedLog
argument_list|()
return|;
block|}
DECL|method|sample ()
name|String
name|sample
parameter_list|()
block|{
name|totalThisPeriod
operator|=
literal|1
expr_stmt|;
comment|// a new period, reset to 1
name|totalSampled
operator|++
expr_stmt|;
name|droppedThisPeriod
operator|=
literal|0
expr_stmt|;
return|return
name|getSampledLog
argument_list|()
return|;
block|}
DECL|method|getSampledLog ()
name|String
name|getSampledLog
parameter_list|()
block|{
return|return
name|format
argument_list|(
literal|"Sampled %d of %d total exchanges"
argument_list|,
name|totalSampled
argument_list|,
name|totalSampled
operator|+
name|totalDropped
argument_list|)
return|;
block|}
DECL|method|getDroppedLog ()
name|String
name|getDroppedLog
parameter_list|()
block|{
return|return
name|format
argument_list|(
literal|"Dropped %d of %d exchanges in this period, totalling %d dropped of %d exchanges overall."
argument_list|,
name|droppedThisPeriod
argument_list|,
name|totalThisPeriod
argument_list|,
name|totalDropped
argument_list|,
name|totalSampled
operator|+
name|totalDropped
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

