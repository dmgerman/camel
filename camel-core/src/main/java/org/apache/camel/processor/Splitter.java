begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Implements a dynamic<a href="http://activemq.apache.org/camel/splitter.html">Splitter</a> pattern  * where an expression is evaluated to iterate through each of the parts of a message and then each part is then send to some endpoint.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|Splitter
specifier|public
class|class
name|Splitter
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|Processor
argument_list|<
name|E
argument_list|>
block|{
DECL|field|destination
specifier|private
specifier|final
name|Processor
argument_list|<
name|E
argument_list|>
name|destination
decl_stmt|;
DECL|field|expression
specifier|private
specifier|final
name|Expression
argument_list|<
name|E
argument_list|>
name|expression
decl_stmt|;
DECL|method|Splitter (Processor<E> destination, Expression<E> expression)
specifier|public
name|Splitter
parameter_list|(
name|Processor
argument_list|<
name|E
argument_list|>
name|destination
parameter_list|,
name|Expression
argument_list|<
name|E
argument_list|>
name|expression
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|notNull
argument_list|(
name|destination
argument_list|,
literal|"destination"
argument_list|)
expr_stmt|;
name|notNull
argument_list|(
name|expression
argument_list|,
literal|"expression"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Splitter[on: "
operator|+
name|expression
operator|+
literal|" to: "
operator|+
name|destination
operator|+
literal|"]"
return|;
block|}
DECL|method|onExchange (E exchange)
specifier|public
name|void
name|onExchange
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
name|createIterator
argument_list|(
name|value
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|part
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|E
name|newExchange
init|=
operator|(
name|E
operator|)
name|exchange
operator|.
name|copy
argument_list|()
decl_stmt|;
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|destination
operator|.
name|onExchange
argument_list|(
name|newExchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

