begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Creates a Pipeline pattern where the output of the previous step is sent as input to the next step when working  * with request/response message exchanges.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|Pipeline
specifier|public
class|class
name|Pipeline
extends|extends
name|MulticastProcessor
implements|implements
name|Processor
block|{
DECL|method|Pipeline (Collection<Endpoint> endpoints)
specifier|public
name|Pipeline
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Exchange
name|nextExchange
init|=
name|exchange
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Producer
name|producer
range|:
name|getProducers
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|nextExchange
operator|=
name|createNextExchange
argument_list|(
name|producer
argument_list|,
name|nextExchange
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|process
argument_list|(
name|nextExchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Strategy method to create the next exchange from the      *      * @param producer         the producer used to send to the endpoint      * @param previousExchange the previous exchange      * @return a new exchange      */
DECL|method|createNextExchange (Producer producer, Exchange previousExchange)
specifier|protected
name|Exchange
name|createNextExchange
parameter_list|(
name|Producer
name|producer
parameter_list|,
name|Exchange
name|previousExchange
parameter_list|)
block|{
name|Exchange
name|answer
init|=
name|producer
operator|.
name|createExchange
argument_list|(
name|previousExchange
argument_list|)
decl_stmt|;
comment|// now lets set the input of the next exchange to the output of the previous message if it is not null
name|Object
name|output
init|=
name|previousExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Strategy method to copy the exchange before sending to another endpoint. Derived classes such as the      * {@link Pipeline} will not clone the exchange      *      * @param exchange      * @return the current exchange if no copying is required such as for a pipeline otherwise a new copy of the exchange is returned.      */
DECL|method|copyExchangeStrategy (Exchange exchange)
specifier|protected
name|Exchange
name|copyExchangeStrategy
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|copy
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Pipeline"
operator|+
name|getEndpoints
argument_list|()
return|;
block|}
block|}
end_class

end_unit

