begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|BreakpointSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultDebugger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Debugger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.spi.Debugger} that should be used together with the {@link BacklogTracer} to  * offer debugging and tracing functionality.  */
end_comment

begin_class
DECL|class|BacklogDebugger
specifier|public
class|class
name|BacklogDebugger
extends|extends
name|ServiceSupport
implements|implements
name|InterceptStrategy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BacklogDebugger
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|enabled
specifier|private
specifier|final
name|AtomicBoolean
name|enabled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|debugger
specifier|private
specifier|final
name|Debugger
name|debugger
decl_stmt|;
DECL|field|breakpoints
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeBreakpoint
argument_list|>
name|breakpoints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeBreakpoint
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|suspendedBreakpoints
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CountDownLatch
argument_list|>
name|suspendedBreakpoints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CountDownLatch
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|BacklogDebugger ()
specifier|public
name|BacklogDebugger
parameter_list|()
block|{
name|this
operator|.
name|debugger
operator|=
operator|new
name|DefaultDebugger
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|wrapProcessorInInterceptors (CamelContext context, ProcessorDefinition<?> definition, Processor target, Processor nextTarget)
specifier|public
name|Processor
name|wrapProcessorInInterceptors
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|,
name|Processor
name|target
parameter_list|,
name|Processor
name|nextTarget
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Deprecated"
argument_list|)
throw|;
block|}
comment|/**      * A helper method to return the BacklogDebugger instance if one is enabled      *      * @return the backlog debugger or null if none can be found      */
DECL|method|getBacklogDebugger (CamelContext context)
specifier|public
specifier|static
name|BacklogDebugger
name|getBacklogDebugger
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|list
init|=
name|context
operator|.
name|getInterceptStrategies
argument_list|()
decl_stmt|;
for|for
control|(
name|InterceptStrategy
name|interceptStrategy
range|:
name|list
control|)
block|{
if|if
condition|(
name|interceptStrategy
operator|instanceof
name|BacklogDebugger
condition|)
block|{
return|return
operator|(
name|BacklogDebugger
operator|)
name|interceptStrategy
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getDebugger ()
specifier|public
name|Debugger
name|getDebugger
parameter_list|()
block|{
return|return
name|debugger
return|;
block|}
DECL|method|enableDebugger ()
specifier|public
name|void
name|enableDebugger
parameter_list|()
block|{
try|try
block|{
comment|// TODO: should not start debugger as its old-schoold tracer depedent
comment|//debugger.start();
name|enabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|disableDebugger ()
specifier|public
name|void
name|disableDebugger
parameter_list|()
block|{
try|try
block|{
name|enabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|debugger
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// make sure to clear state and latches is counted down so we wont have hanging threads
name|breakpoints
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|CountDownLatch
name|latch
range|:
name|suspendedBreakpoints
operator|.
name|values
argument_list|()
control|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|suspendedBreakpoints
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|hasBreakpoint (String nodeId)
specifier|public
name|boolean
name|hasBreakpoint
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
return|return
name|breakpoints
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
DECL|method|addBreakpoint (String nodeId)
specifier|public
name|void
name|addBreakpoint
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|breakpoints
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|NodeBreakpoint
name|breakpoint
init|=
operator|new
name|NodeBreakpoint
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|breakpoints
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|breakpoint
argument_list|)
expr_stmt|;
name|debugger
operator|.
name|addBreakpoint
argument_list|(
name|breakpoint
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeBreakpoint (String nodeId)
specifier|public
name|void
name|removeBreakpoint
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
comment|// when removing a break point then ensure latches is cleared and counted down so we wont have hanging threads
name|CountDownLatch
name|latch
init|=
name|suspendedBreakpoints
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|NodeBreakpoint
name|breakpoint
init|=
name|breakpoints
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|breakpoint
operator|!=
literal|null
condition|)
block|{
name|debugger
operator|.
name|removeBreakpoint
argument_list|(
name|breakpoint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|continueBreakpoint (String nodeId)
specifier|public
name|void
name|continueBreakpoint
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|CountDownLatch
name|latch
init|=
name|suspendedBreakpoints
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSuspendedBreakpointNodeIds ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSuspendedBreakpointNodeIds
parameter_list|()
block|{
return|return
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|suspendedBreakpoints
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|beforeProcess (Exchange exchange, Processor processor, ProcessorDefinition<?> definition)
specifier|public
name|boolean
name|beforeProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
return|return
name|debugger
operator|.
name|beforeProcess
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|,
name|definition
argument_list|)
return|;
block|}
DECL|method|afterProcess (Exchange exchange, Processor processor, ProcessorDefinition<?> definition, long timeTaken)
specifier|public
name|boolean
name|afterProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|,
name|long
name|timeTaken
parameter_list|)
block|{
return|return
name|debugger
operator|.
name|afterProcess
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|,
name|definition
argument_list|,
name|timeTaken
argument_list|)
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|debugger
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|disableDebugger
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|debugger
argument_list|)
expr_stmt|;
block|}
comment|/**      * Represents a {@link org.apache.camel.spi.Breakpoint} that has a {@link Condition} on a specific node id.      */
DECL|class|NodeBreakpoint
specifier|private
specifier|final
class|class
name|NodeBreakpoint
extends|extends
name|BreakpointSupport
implements|implements
name|Condition
block|{
DECL|field|nodeId
specifier|private
specifier|final
name|String
name|nodeId
decl_stmt|;
DECL|method|NodeBreakpoint (String nodeId)
specifier|public
name|NodeBreakpoint
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeProcess (Exchange exchange, Processor processor, ProcessorDefinition<?> definition)
specifier|public
name|void
name|beforeProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
comment|// mark as suspend
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|suspendedBreakpoints
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|latch
argument_list|)
expr_stmt|;
comment|// now wait until we should continue
comment|// TODO: have a fallback timeout so we wont wait forever
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Breakpoint at node {} is waiting to continue for exchangeId: {}"
argument_list|,
name|nodeId
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Breakpoint at node {} is continued for exchangeId: {}"
argument_list|,
name|nodeId
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|super
operator|.
name|beforeProcess
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matchProcess (Exchange exchange, Processor processor, ProcessorDefinition<?> definition)
specifier|public
name|boolean
name|matchProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
return|return
name|nodeId
operator|.
name|equals
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|matchEvent (Exchange exchange, EventObject event)
specifier|public
name|boolean
name|matchEvent
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|EventObject
name|event
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

