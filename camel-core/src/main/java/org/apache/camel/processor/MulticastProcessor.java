begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Implements the Multicast pattern to send a message exchange to a number of endpoints, each endpoint receiving a copy of  * the message exchange.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|MulticastProcessor
specifier|public
class|class
name|MulticastProcessor
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|Processor
argument_list|<
name|E
argument_list|>
block|{
DECL|field|endpoints
specifier|private
name|Collection
argument_list|<
name|Endpoint
argument_list|<
name|E
argument_list|>
argument_list|>
name|endpoints
decl_stmt|;
DECL|method|MulticastProcessor (Collection<Endpoint<E>> endpoints)
specifier|public
name|MulticastProcessor
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|<
name|E
argument_list|>
argument_list|>
name|endpoints
parameter_list|)
block|{
name|this
operator|.
name|endpoints
operator|=
name|endpoints
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Multicast"
operator|+
name|endpoints
return|;
block|}
DECL|method|onExchange (E exchange)
specifier|public
name|void
name|onExchange
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
for|for
control|(
name|Endpoint
argument_list|<
name|E
argument_list|>
name|endpoint
range|:
name|endpoints
control|)
block|{
name|E
name|copy
init|=
name|copyExchangeStrategy
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|onExchange
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the endpoints to multicast to      */
DECL|method|getEndpoints ()
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|<
name|E
argument_list|>
argument_list|>
name|getEndpoints
parameter_list|()
block|{
return|return
name|endpoints
return|;
block|}
comment|/**      * Strategy method to copy the exchange before sending to another endpoint. Derived classes such as the      * {@link Pipeline} will not clone the exchange      *      * @param endpoint the endpoint that the exchange will be sent to      * @param exchange @return the current exchange if no copying is required such as for a pipeline otherwise a new copy of the exchange is returned.      */
DECL|method|copyExchangeStrategy (Endpoint<E> endpoint, E exchange)
specifier|protected
name|E
name|copyExchangeStrategy
parameter_list|(
name|Endpoint
argument_list|<
name|E
argument_list|>
name|endpoint
parameter_list|,
name|E
name|exchange
parameter_list|)
block|{
return|return
name|endpoint
operator|.
name|createExchange
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
end_class

end_unit

