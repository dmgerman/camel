begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Navigate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|DefaultTimeoutMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeoutMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeoutMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *<a href="http://camel.apache.org/aggregator.html">Aggregator</a> EIP pattern.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|AggregateProcessor
specifier|public
class|class
name|AggregateProcessor
extends|extends
name|ServiceSupport
implements|implements
name|Processor
implements|,
name|Navigate
argument_list|<
name|Processor
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AggregateProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|timeoutMap
specifier|private
name|TimeoutMap
argument_list|<
name|Object
argument_list|,
name|Exchange
argument_list|>
name|timeoutMap
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|aggregationStrategy
specifier|private
specifier|final
name|AggregationStrategy
name|aggregationStrategy
decl_stmt|;
DECL|field|correlationExpression
specifier|private
specifier|final
name|Expression
name|correlationExpression
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|aggregationRepository
specifier|private
name|AggregationRepository
argument_list|<
name|Object
argument_list|>
name|aggregationRepository
init|=
operator|new
name|MemoryAggregationRepository
argument_list|()
decl_stmt|;
comment|// different ways to have completion triggered
DECL|field|eagerEvaluateCompletionPredicate
specifier|private
name|boolean
name|eagerEvaluateCompletionPredicate
decl_stmt|;
DECL|field|completionPredicate
specifier|private
name|Predicate
name|completionPredicate
decl_stmt|;
DECL|field|completionTimeout
specifier|private
name|long
name|completionTimeout
decl_stmt|;
DECL|field|completionAggregatedSize
specifier|private
name|int
name|completionAggregatedSize
decl_stmt|;
DECL|method|AggregateProcessor (Processor processor, Expression correlationExpression, AggregationStrategy aggregationStrategy)
specifier|public
name|AggregateProcessor
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|Expression
name|correlationExpression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|processor
argument_list|,
literal|"processor"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|correlationExpression
argument_list|,
literal|"correlationExpression"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|aggregationStrategy
argument_list|,
literal|"aggregationStrategy"
argument_list|)
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|correlationExpression
operator|=
name|correlationExpression
expr_stmt|;
name|this
operator|.
name|aggregationStrategy
operator|=
name|aggregationStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AggregateProcessor[to: "
operator|+
name|processor
operator|+
literal|"]"
return|;
block|}
DECL|method|next ()
specifier|public
name|List
argument_list|<
name|Processor
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Processor
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|processor
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|processor
operator|!=
literal|null
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// compute correlation expression
name|Object
name|key
init|=
name|correlationExpression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CamelExchangeException
argument_list|(
literal|"Correlation key could not be evaluated to a value"
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
name|Exchange
name|oldExchange
init|=
name|aggregationRepository
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Exchange
name|newExchange
init|=
name|exchange
decl_stmt|;
name|Integer
name|size
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|oldExchange
operator|!=
literal|null
condition|)
block|{
name|size
operator|=
name|oldExchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|AGGREGATED_SIZE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|size
argument_list|,
name|Exchange
operator|.
name|AGGREGATED_SIZE
operator|+
literal|" on "
operator|+
name|oldExchange
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
comment|// are we complete?
name|boolean
name|complete
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isEagerEvaluateCompletionPredicate
argument_list|()
condition|)
block|{
name|complete
operator|=
name|isCompleted
argument_list|(
name|key
argument_list|,
name|exchange
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|// prepare the exchanges for aggregation and aggregate it
name|ExchangeHelper
operator|.
name|prepareAggregation
argument_list|(
name|oldExchange
argument_list|,
name|newExchange
argument_list|)
expr_stmt|;
name|newExchange
operator|=
name|onAggregation
argument_list|(
name|oldExchange
argument_list|,
name|newExchange
argument_list|)
expr_stmt|;
name|newExchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|AGGREGATED_SIZE
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// if not set to evaluate eager then do that after the aggregation
if|if
condition|(
operator|!
name|isEagerEvaluateCompletionPredicate
argument_list|()
condition|)
block|{
name|complete
operator|=
name|isCompleted
argument_list|(
name|key
argument_list|,
name|newExchange
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|// only need to update aggregation repository if we are not complete
if|if
condition|(
operator|!
name|complete
operator|&&
operator|!
name|newExchange
operator|.
name|equals
argument_list|(
name|oldExchange
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Put exchange:"
operator|+
name|newExchange
operator|+
literal|" with correlation key:"
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|aggregationRepository
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|newExchange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|complete
condition|)
block|{
name|onCompletion
argument_list|(
name|key
argument_list|,
name|newExchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onAggregation (Exchange oldExchange, Exchange newExchange)
specifier|protected
name|Exchange
name|onAggregation
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
return|return
name|aggregationStrategy
operator|.
name|aggregate
argument_list|(
name|oldExchange
argument_list|,
name|newExchange
argument_list|)
return|;
block|}
DECL|method|isCompleted (Object key, Exchange exchange, int size)
specifier|protected
name|boolean
name|isCompleted
parameter_list|(
name|Object
name|key
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|getCompletionPredicate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|answer
init|=
name|getCompletionPredicate
argument_list|()
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|getCompletionAggregatedSize
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|size
operator|>=
name|getCompletionAggregatedSize
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|getCompletionTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// timeout is used so use the timeout map to keep an eye on this
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating correlation key "
operator|+
name|key
operator|+
literal|" to timeout after "
operator|+
name|getCompletionTimeout
argument_list|()
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
name|timeoutMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|exchange
argument_list|,
name|getCompletionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|onCompletion (Object key, final Exchange exchange)
specifier|protected
name|void
name|onCompletion
parameter_list|(
name|Object
name|key
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// remove from repository and timeout map as its completed
name|aggregationRepository
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeoutMap
operator|!=
literal|null
condition|)
block|{
name|timeoutMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Aggregation complete for correlation key "
operator|+
name|key
operator|+
literal|" sending aggregated exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// send this exchange
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getExecutorService ()
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
DECL|method|setExecutorService (ExecutorService executorService)
specifier|public
name|void
name|setExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
DECL|method|getCompletionPredicate ()
specifier|public
name|Predicate
name|getCompletionPredicate
parameter_list|()
block|{
return|return
name|completionPredicate
return|;
block|}
DECL|method|setCompletionPredicate (Predicate completionPredicate)
specifier|public
name|void
name|setCompletionPredicate
parameter_list|(
name|Predicate
name|completionPredicate
parameter_list|)
block|{
name|this
operator|.
name|completionPredicate
operator|=
name|completionPredicate
expr_stmt|;
block|}
DECL|method|isEagerEvaluateCompletionPredicate ()
specifier|public
name|boolean
name|isEagerEvaluateCompletionPredicate
parameter_list|()
block|{
return|return
name|eagerEvaluateCompletionPredicate
return|;
block|}
DECL|method|setEagerEvaluateCompletionPredicate (boolean eagerEvaluateCompletionPredicate)
specifier|public
name|void
name|setEagerEvaluateCompletionPredicate
parameter_list|(
name|boolean
name|eagerEvaluateCompletionPredicate
parameter_list|)
block|{
name|this
operator|.
name|eagerEvaluateCompletionPredicate
operator|=
name|eagerEvaluateCompletionPredicate
expr_stmt|;
block|}
DECL|method|getCompletionTimeout ()
specifier|public
name|long
name|getCompletionTimeout
parameter_list|()
block|{
return|return
name|completionTimeout
return|;
block|}
DECL|method|setCompletionTimeout (long completionTimeout)
specifier|public
name|void
name|setCompletionTimeout
parameter_list|(
name|long
name|completionTimeout
parameter_list|)
block|{
name|this
operator|.
name|completionTimeout
operator|=
name|completionTimeout
expr_stmt|;
block|}
DECL|method|getCompletionAggregatedSize ()
specifier|public
name|int
name|getCompletionAggregatedSize
parameter_list|()
block|{
return|return
name|completionAggregatedSize
return|;
block|}
DECL|method|setCompletionAggregatedSize (int completionAggregatedSize)
specifier|public
name|void
name|setCompletionAggregatedSize
parameter_list|(
name|int
name|completionAggregatedSize
parameter_list|)
block|{
name|this
operator|.
name|completionAggregatedSize
operator|=
name|completionAggregatedSize
expr_stmt|;
block|}
comment|/**      * Background tasks that looks for aggregated exchanges which is triggered by completion timeouts.      */
DECL|class|TimeoutReaper
specifier|private
class|class
name|TimeoutReaper
extends|extends
name|DefaultTimeoutMap
argument_list|<
name|Object
argument_list|,
name|Exchange
argument_list|>
block|{
DECL|method|TimeoutReaper (ScheduledExecutorService executor, long requestMapPollTimeMillis)
specifier|private
name|TimeoutReaper
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|,
name|long
name|requestMapPollTimeMillis
parameter_list|)
block|{
name|super
argument_list|(
name|executor
argument_list|,
name|requestMapPollTimeMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|isValidForEviction (TimeoutMapEntry<Object, Exchange> entry)
specifier|protected
name|boolean
name|isValidForEviction
parameter_list|(
name|TimeoutMapEntry
argument_list|<
name|Object
argument_list|,
name|Exchange
argument_list|>
name|entry
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Completion timeout triggered for correlation key: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|onCompletion
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getCompletionTimeout
argument_list|()
operator|<=
literal|0
operator|&&
name|getCompletionAggregatedSize
argument_list|()
operator|<=
literal|0
operator|&&
name|getCompletionPredicate
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"At least one of the completions options"
operator|+
literal|" [completionTimeout, completionAggregatedSize, completionPredicate] must be set"
argument_list|)
throw|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|aggregationRepository
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|executorService
operator|=
name|ExecutorServiceHelper
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|,
literal|"AggregateProcessor"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// start timeout service if its in use
if|if
condition|(
name|getCompletionTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ScheduledExecutorService
name|scheduler
init|=
name|ExecutorServiceHelper
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
literal|"AggregationProcessorTimeoutReaper"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|timeoutMap
operator|=
operator|new
name|TimeoutReaper
argument_list|(
name|scheduler
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|timeoutMap
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|timeoutMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|aggregationRepository
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

