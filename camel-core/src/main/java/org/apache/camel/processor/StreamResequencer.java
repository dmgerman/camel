begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|LoggingExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
operator|.
name|ResequencerEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
operator|.
name|SequenceElementComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
operator|.
name|SequenceSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * A resequencer that re-orders a (continuous) stream of {@link Exchange}s. The  * algorithm implemented by {@link ResequencerEngine} is based on the detection  * of gaps in a message stream rather than on a fixed batch size. Gap detection  * in combination with timeouts removes the constraint of having to know the  * number of messages of a sequence (i.e. the batch size) in advance.  *<p>  * Messages must contain a unique sequence number for which a predecessor and a  * successor is known. For example a message with the sequence number 3 has a  * predecessor message with the sequence number 2 and a successor message with  * the sequence number 4. The message sequence 2,3,5 has a gap because the  * sucessor of 3 is missing. The resequencer therefore has to retain message 5  * until message 4 arrives (or a timeout occurs).  *<p>  * Instances of this class poll for {@link Exchange}s from a given  *<code>endpoint</code>. Resequencing work and the delivery of messages to  * the next<code>processor</code> is done within the single polling thread.  *   * @author Martin Krasser  *   * @version $Revision$  *   * @see ResequencerEngine  */
end_comment

begin_class
DECL|class|StreamResequencer
specifier|public
class|class
name|StreamResequencer
extends|extends
name|ServiceSupport
implements|implements
name|SequenceSender
argument_list|<
name|Exchange
argument_list|>
implements|,
name|Processor
block|{
DECL|field|DELIVERY_ATTEMPT_INTERVAL
specifier|private
specifier|static
specifier|final
name|long
name|DELIVERY_ATTEMPT_INTERVAL
init|=
literal|1000L
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
DECL|field|engine
specifier|private
name|ResequencerEngine
argument_list|<
name|Exchange
argument_list|>
name|engine
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|field|delivery
specifier|private
name|Delivery
name|delivery
decl_stmt|;
DECL|field|capacity
specifier|private
name|int
name|capacity
decl_stmt|;
comment|/**      * Creates a new {@link StreamResequencer} instance.      *       * @param processor next processor that processes re-ordered exchanges.      * @param comparator a sequence element comparator for exchanges.      */
DECL|method|StreamResequencer (Processor processor, SequenceElementComparator<Exchange> comparator)
specifier|public
name|StreamResequencer
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|SequenceElementComparator
argument_list|<
name|Exchange
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|exceptionHandler
operator|=
operator|new
name|LoggingExceptionHandler
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|engine
operator|=
operator|new
name|ResequencerEngine
argument_list|<
name|Exchange
argument_list|>
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|engine
operator|.
name|setSequenceSender
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
comment|/**      * Returns this resequencer's exception handler.      */
DECL|method|getExceptionHandler ()
specifier|public
name|ExceptionHandler
name|getExceptionHandler
parameter_list|()
block|{
return|return
name|exceptionHandler
return|;
block|}
comment|/**      * Returns the next processor.      */
DECL|method|getProcessor ()
specifier|public
name|Processor
name|getProcessor
parameter_list|()
block|{
return|return
name|processor
return|;
block|}
comment|/**      * Returns this resequencer's capacity. The capacity is the maximum number      * of exchanges that can be managed by this resequencer at a given point in      * time. If the capacity if reached, polling from the endpoint will be      * skipped for<code>timeout</code> milliseconds giving exchanges the      * possibility to time out and to be delivered after the waiting period.      *       * @return this resequencer's capacity.      */
DECL|method|getCapacity ()
specifier|public
name|int
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
comment|/**      * Returns this resequencer's timeout. This sets the resequencer engine's      * timeout via {@link ResequencerEngine#setTimeout(long)}. This value is      * also used to define the polling timeout from the endpoint.      *       * @return this resequencer's timeout. (Processor)      * @see ResequencerEngine#setTimeout(long)      */
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|engine
operator|.
name|getTimeout
argument_list|()
return|;
block|}
DECL|method|setCapacity (int capacity)
specifier|public
name|void
name|setCapacity
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|engine
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StreamResequencer[to: "
operator|+
name|processor
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|delivery
operator|=
operator|new
name|Delivery
argument_list|()
expr_stmt|;
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
name|delivery
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// let's stop everything in the reverse order
comment|// no need to stop the worker thread -- it will stop automatically when this service is stopped
name|engine
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends the<code>exchange</code> to the next<code>processor</code>.      *       * @param exchange exchange to send.      */
DECL|method|sendElement (Exchange exchange)
specifier|public
name|void
name|sendElement
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
name|engine
operator|.
name|size
argument_list|()
operator|>=
name|capacity
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|insert
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|request
argument_list|()
expr_stmt|;
block|}
DECL|class|Delivery
specifier|private
class|class
name|Delivery
extends|extends
name|Thread
block|{
DECL|field|cancelRequested
specifier|private
specifier|volatile
name|boolean
name|cancelRequested
decl_stmt|;
DECL|method|Delivery ()
specifier|public
name|Delivery
parameter_list|()
block|{
name|super
argument_list|(
literal|"Resequencer Delivery Thread"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DELIVERY_ATTEMPT_INTERVAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|cancelRequested
condition|)
block|{
return|return;
block|}
block|}
try|try
block|{
name|engine
operator|.
name|deliver
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionHandler
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|cancel ()
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|cancelRequested
operator|=
literal|true
expr_stmt|;
name|interrupt
argument_list|()
expr_stmt|;
block|}
DECL|method|request ()
specifier|public
name|void
name|request
parameter_list|()
block|{
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

