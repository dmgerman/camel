begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.idempotent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExpressionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of the  *<a href="http://activemq.apache.org/camel/idempotent-consumer.html">Idempotent Consumer</a> pattern.  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|IdempotentConsumer
specifier|public
class|class
name|IdempotentConsumer
extends|extends
name|ServiceSupport
implements|implements
name|Processor
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IdempotentConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|messageIdExpression
specifier|private
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|messageIdExpression
decl_stmt|;
DECL|field|nextProcessor
specifier|private
name|Processor
name|nextProcessor
decl_stmt|;
DECL|field|messageIdRepository
specifier|private
name|MessageIdRepository
name|messageIdRepository
decl_stmt|;
DECL|method|IdempotentConsumer (Expression<Exchange> messageIdExpression, MessageIdRepository messageIdRepository, Processor nextProcessor)
specifier|public
name|IdempotentConsumer
parameter_list|(
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|messageIdExpression
parameter_list|,
name|MessageIdRepository
name|messageIdRepository
parameter_list|,
name|Processor
name|nextProcessor
parameter_list|)
block|{
name|this
operator|.
name|messageIdExpression
operator|=
name|messageIdExpression
expr_stmt|;
name|this
operator|.
name|messageIdRepository
operator|=
name|messageIdRepository
expr_stmt|;
name|this
operator|.
name|nextProcessor
operator|=
name|nextProcessor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IdempotentConsumer[expression="
operator|+
name|messageIdExpression
operator|+
literal|", repository="
operator|+
name|messageIdRepository
operator|+
literal|", processor="
operator|+
name|nextProcessor
operator|+
literal|"]"
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|messageId
init|=
name|ExpressionHelper
operator|.
name|evaluateAsString
argument_list|(
name|messageIdExpression
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoMessageIdException
argument_list|(
name|exchange
argument_list|,
name|messageIdExpression
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|messageIdRepository
operator|.
name|contains
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
name|nextProcessor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onDuplicateMessage
argument_list|(
name|exchange
argument_list|,
name|messageId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getMessageIdExpression ()
specifier|public
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|getMessageIdExpression
parameter_list|()
block|{
return|return
name|messageIdExpression
return|;
block|}
DECL|method|getMessageIdRepository ()
specifier|public
name|MessageIdRepository
name|getMessageIdRepository
parameter_list|()
block|{
return|return
name|messageIdRepository
return|;
block|}
DECL|method|getNextProcessor ()
specifier|public
name|Processor
name|getNextProcessor
parameter_list|()
block|{
return|return
name|nextProcessor
return|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|nextProcessor
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|nextProcessor
argument_list|)
expr_stmt|;
block|}
comment|/**      * A strategy method to allow derived classes to overload the behaviour of processing a duplicate message      *      * @param exchange  the exchange      * @param messageId the message ID of this exchange      */
DECL|method|onDuplicateMessage (Exchange exchange, String messageId)
specifier|protected
name|void
name|onDuplicateMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|messageId
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring duplicate message with id: "
operator|+
name|messageId
operator|+
literal|" for exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

