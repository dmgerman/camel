begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DefaultTraceEventHandler
specifier|public
class|class
name|DefaultTraceEventHandler
implements|implements
name|TraceEventHandler
implements|,
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultTraceEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|traceEventProducer
specifier|private
name|Producer
name|traceEventProducer
decl_stmt|;
DECL|field|jpaTraceEventMessageClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|jpaTraceEventMessageClass
decl_stmt|;
DECL|field|jpaTraceEventMessageClassName
specifier|private
name|String
name|jpaTraceEventMessageClassName
decl_stmt|;
DECL|field|tracer
specifier|private
specifier|final
name|Tracer
name|tracer
decl_stmt|;
DECL|method|DefaultTraceEventHandler (Tracer tracer)
specifier|public
name|DefaultTraceEventHandler
parameter_list|(
name|Tracer
name|tracer
parameter_list|)
block|{
name|this
operator|.
name|tracer
operator|=
name|tracer
expr_stmt|;
block|}
DECL|method|loadJpaTraceEventMessageClass (Exchange exchange)
specifier|private
specifier|synchronized
name|void
name|loadJpaTraceEventMessageClass
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|jpaTraceEventMessageClass
operator|==
literal|null
condition|)
block|{
name|jpaTraceEventMessageClassName
operator|=
name|tracer
operator|.
name|getJpaTraceEventMessageClassName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jpaTraceEventMessageClass
operator|==
literal|null
condition|)
block|{
name|jpaTraceEventMessageClass
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|jpaTraceEventMessageClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|jpaTraceEventMessageClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find class: "
operator|+
name|jpaTraceEventMessageClassName
operator|+
literal|". Make sure camel-jpa.jar is in the classpath."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getTraceEventProducer (Exchange exchange)
specifier|private
specifier|synchronized
name|Producer
name|getTraceEventProducer
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|traceEventProducer
operator|==
literal|null
condition|)
block|{
comment|// create producer when we have access the the camel context (we dont in doStart)
name|Endpoint
name|endpoint
init|=
name|tracer
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
condition|?
name|tracer
operator|.
name|getDestination
argument_list|()
else|:
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|tracer
operator|.
name|getDestinationUri
argument_list|()
argument_list|)
decl_stmt|;
name|traceEventProducer
operator|=
name|endpoint
operator|.
name|createProducer
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|traceEventProducer
argument_list|)
expr_stmt|;
block|}
return|return
name|traceEventProducer
return|;
block|}
annotation|@
name|Override
DECL|method|traceExchange (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|void
name|traceExchange
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tracer
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
operator|||
name|tracer
operator|.
name|getDestinationUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// create event exchange and add event information
name|Date
name|timestamp
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Exchange
name|event
init|=
operator|new
name|DefaultExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|event
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TRACE_EVENT_NODE_ID
argument_list|,
name|node
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TRACE_EVENT_TIMESTAMP
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// keep a reference to the original exchange in case its needed
name|event
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TRACE_EVENT_EXCHANGE
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// create event message to sent as in body containing event information such as
comment|// from node, to node, etc.
name|TraceEventMessage
name|msg
init|=
operator|new
name|DefaultTraceEventMessage
argument_list|(
name|timestamp
argument_list|,
name|node
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
comment|// should we use ordinary or jpa objects
if|if
condition|(
name|tracer
operator|.
name|isUseJpa
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using class: "
operator|+
name|this
operator|.
name|jpaTraceEventMessageClassName
operator|+
literal|" for tracing event messages"
argument_list|)
expr_stmt|;
block|}
comment|// load the jpa event message class
name|loadJpaTraceEventMessageClass
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// create a new instance of the event message class
name|Object
name|jpa
init|=
name|ObjectHelper
operator|.
name|newInstance
argument_list|(
name|jpaTraceEventMessageClass
argument_list|)
decl_stmt|;
comment|// copy options from event to jpa
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|msg
argument_list|,
name|options
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|jpa
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// and set the timestamp as its not a String type
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|jpa
argument_list|,
literal|"timestamp"
argument_list|,
name|msg
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|jpa
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|// marker property to indicate its a tracing event being routed in case
comment|// new Exchange instances is created during trace routing so we can check
comment|// for this marker when interceptor also kick in during routing of trace events
name|event
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TRACE_EVENT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// process the trace route
name|getTraceEventProducer
argument_list|(
name|exchange
argument_list|)
operator|.
name|process
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log and ignore this as the original Exchange should be allowed to continue
name|LOG
operator|.
name|error
argument_list|(
literal|"Error processing trace event (original Exchange will continue): "
operator|+
name|event
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|traceExchangeIn (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|Object
name|traceExchangeIn
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|traceExchange
argument_list|(
name|node
argument_list|,
name|target
argument_list|,
name|traceInterceptor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|traceExchangeOut (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange, Object traceState)
specifier|public
name|void
name|traceExchangeOut
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|traceState
parameter_list|)
throws|throws
name|Exception
block|{
name|traceExchange
argument_list|(
name|node
argument_list|,
name|target
argument_list|,
name|traceInterceptor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|traceEventProducer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|traceEventProducer
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|traceEventProducer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

