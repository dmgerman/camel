begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Implements a  *<a href="http://activemq.apache.org/camel/dead-letter-channel.html">Dead Letter Channel</a>  * after attempting to redeliver the message using the {@link RedeliveryPolicy}  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DeadLetterChannel
specifier|public
class|class
name|DeadLetterChannel
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|Processor
argument_list|<
name|E
argument_list|>
block|{
DECL|field|REDELIVERY_COUNT_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|REDELIVERY_COUNT_HEADER
init|=
literal|"org.apache.camel.redeliveryCount"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeadLetterChannel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|output
specifier|private
name|Processor
argument_list|<
name|E
argument_list|>
name|output
decl_stmt|;
DECL|field|deadLetter
specifier|private
name|Processor
argument_list|<
name|E
argument_list|>
name|deadLetter
decl_stmt|;
DECL|field|redeliveryPolicy
specifier|private
name|RedeliveryPolicy
name|redeliveryPolicy
decl_stmt|;
DECL|field|redeliveryCountHeader
specifier|private
name|String
name|redeliveryCountHeader
init|=
name|REDELIVERY_COUNT_HEADER
decl_stmt|;
DECL|method|DeadLetterChannel (Processor<E> output, Processor<E> deadLetter)
specifier|public
name|DeadLetterChannel
parameter_list|(
name|Processor
argument_list|<
name|E
argument_list|>
name|output
parameter_list|,
name|Processor
argument_list|<
name|E
argument_list|>
name|deadLetter
parameter_list|)
block|{
name|this
argument_list|(
name|output
argument_list|,
name|deadLetter
argument_list|,
operator|new
name|RedeliveryPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|DeadLetterChannel (Processor<E> output, Processor<E> deadLetter, RedeliveryPolicy redeliveryPolicy)
specifier|public
name|DeadLetterChannel
parameter_list|(
name|Processor
argument_list|<
name|E
argument_list|>
name|output
parameter_list|,
name|Processor
argument_list|<
name|E
argument_list|>
name|deadLetter
parameter_list|,
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|)
block|{
name|this
operator|.
name|deadLetter
operator|=
name|deadLetter
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|redeliveryPolicy
operator|=
name|redeliveryPolicy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DeadLetterChannel["
operator|+
name|output
operator|+
literal|", "
operator|+
name|deadLetter
operator|+
literal|", "
operator|+
name|redeliveryPolicy
operator|+
literal|"]"
return|;
block|}
DECL|method|onExchange (E exchange)
specifier|public
name|void
name|onExchange
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
name|int
name|redeliveryCounter
init|=
literal|0
decl_stmt|;
name|long
name|redeliveryDelay
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|redeliveryCounter
operator|++
operator|>
literal|0
condition|)
block|{
comment|// Figure out how long we should wait to resend this message.
name|redeliveryDelay
operator|=
name|redeliveryPolicy
operator|.
name|getRedeliveryDelay
argument_list|(
name|redeliveryDelay
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|redeliveryDelay
argument_list|)
expr_stmt|;
name|appendRedeliveryHeaders
argument_list|(
name|exchange
argument_list|,
name|redeliveryCounter
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|output
operator|.
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"On delivery attempt: "
operator|+
name|redeliveryCounter
operator|+
literal|" caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|redeliveryPolicy
operator|.
name|shouldRedeliver
argument_list|(
name|redeliveryCounter
argument_list|)
condition|)
do|;
comment|// now lets send to the dead letter queue
name|deadLetter
operator|.
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
comment|/**      * Returns the output processor      */
DECL|method|getOutput ()
specifier|public
name|Processor
argument_list|<
name|E
argument_list|>
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
comment|/**      * Returns the dead letter that message exchanges will be sent to if the redelivery attempts fail      */
DECL|method|getDeadLetter ()
specifier|public
name|Processor
argument_list|<
name|E
argument_list|>
name|getDeadLetter
parameter_list|()
block|{
return|return
name|deadLetter
return|;
block|}
DECL|method|getRedeliveryPolicy ()
specifier|public
name|RedeliveryPolicy
name|getRedeliveryPolicy
parameter_list|()
block|{
return|return
name|redeliveryPolicy
return|;
block|}
comment|/**      * Sets the redelivery policy      */
DECL|method|setRedeliveryPolicy (RedeliveryPolicy redeliveryPolicy)
specifier|public
name|void
name|setRedeliveryPolicy
parameter_list|(
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|)
block|{
name|this
operator|.
name|redeliveryPolicy
operator|=
name|redeliveryPolicy
expr_stmt|;
block|}
DECL|method|getRedeliveryCountHeader ()
specifier|public
name|String
name|getRedeliveryCountHeader
parameter_list|()
block|{
return|return
name|redeliveryCountHeader
return|;
block|}
comment|/**      * Sets the message header name to be used to append the redelivery count value when a message has been redelivered      *      * @param redeliveryCountHeader the header name to use to append the redelivery count or null if you wish to disable      * this feature      */
DECL|method|setRedeliveryCountHeader (String redeliveryCountHeader)
specifier|public
name|void
name|setRedeliveryCountHeader
parameter_list|(
name|String
name|redeliveryCountHeader
parameter_list|)
block|{
name|this
operator|.
name|redeliveryCountHeader
operator|=
name|redeliveryCountHeader
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|appendRedeliveryHeaders (E exchange, int redeliveryCounter)
specifier|protected
name|void
name|appendRedeliveryHeaders
parameter_list|(
name|E
name|exchange
parameter_list|,
name|int
name|redeliveryCounter
parameter_list|)
block|{
name|String
name|header
init|=
name|getRedeliveryCountHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|setHeader
argument_list|(
name|header
argument_list|,
name|redeliveryCounter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sleep (long redeliveryDelay)
specifier|protected
name|void
name|sleep
parameter_list|(
name|long
name|redeliveryDelay
parameter_list|)
block|{
if|if
condition|(
name|redeliveryDelay
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sleeping for: "
operator|+
name|redeliveryDelay
operator|+
literal|" until attempting redelivery"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|redeliveryDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Thread interupted: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

