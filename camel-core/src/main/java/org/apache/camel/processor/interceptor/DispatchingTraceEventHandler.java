begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_class
DECL|class|DispatchingTraceEventHandler
specifier|public
class|class
name|DispatchingTraceEventHandler
implements|implements
name|TraceEventHandler
block|{
DECL|field|handlers
specifier|private
name|Set
argument_list|<
name|TraceEventHandler
argument_list|>
name|handlers
init|=
operator|new
name|HashSet
argument_list|<
name|TraceEventHandler
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addHandler (TraceEventHandler handler)
specifier|public
name|void
name|addHandler
parameter_list|(
name|TraceEventHandler
name|handler
parameter_list|)
block|{
name|handlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
DECL|method|removeHandler (TraceEventHandler handler)
specifier|public
name|void
name|removeHandler
parameter_list|(
name|TraceEventHandler
name|handler
parameter_list|)
block|{
name|handlers
operator|.
name|remove
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|traceExchange (ProcessorDefinition node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|void
name|traceExchange
parameter_list|(
name|ProcessorDefinition
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|TraceEventHandler
name|handler
range|:
name|handlers
control|)
block|{
name|handler
operator|.
name|traceExchange
argument_list|(
name|node
argument_list|,
name|target
argument_list|,
name|traceInterceptor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|traceExchangeIn (ProcessorDefinition node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|Object
name|traceExchangeIn
parameter_list|(
name|ProcessorDefinition
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TraceEventHandler
name|handler
range|:
name|handlers
control|)
block|{
name|result
operator|=
name|handler
operator|.
name|traceExchangeIn
argument_list|(
name|node
argument_list|,
name|target
argument_list|,
name|traceInterceptor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|traceExchangeOut (ProcessorDefinition node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange, Object traceState)
specifier|public
name|void
name|traceExchangeOut
parameter_list|(
name|ProcessorDefinition
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|traceState
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|TraceEventHandler
name|handler
range|:
name|handlers
control|)
block|{
name|handler
operator|.
name|traceExchangeOut
argument_list|(
name|node
argument_list|,
name|target
argument_list|,
name|traceInterceptor
argument_list|,
name|exchange
argument_list|,
name|traceState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

