begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * This FailOverLoadBalancer will failover to use next processor when an exception occured  */
end_comment

begin_class
DECL|class|FailOverLoadBalancer
specifier|public
class|class
name|FailOverLoadBalancer
extends|extends
name|LoadBalancerSupport
block|{
DECL|field|exceptions
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|>
name|exceptions
decl_stmt|;
DECL|method|FailOverLoadBalancer ()
specifier|public
name|FailOverLoadBalancer
parameter_list|()
block|{
name|this
operator|.
name|exceptions
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|FailOverLoadBalancer (List<Class> exceptions)
specifier|public
name|FailOverLoadBalancer
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|>
name|exceptions
parameter_list|)
block|{
name|this
operator|.
name|exceptions
operator|=
name|exceptions
expr_stmt|;
for|for
control|(
name|Class
name|type
range|:
name|exceptions
control|)
block|{
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isAssignableFrom
argument_list|(
name|Throwable
operator|.
name|class
argument_list|,
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Class is not an instance of Trowable: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Should the given failed Exchange failover?      *      * @param exchange the exchange that failed      * @return<tt>true</tt> to failover      */
DECL|method|shouldFailOver (Exchange exchange)
specifier|protected
name|boolean
name|shouldFailOver
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exceptions
operator|==
literal|null
operator|||
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// always failover if no exceptions defined
return|return
literal|true
return|;
block|}
for|for
control|(
name|Class
name|exception
range|:
name|exceptions
control|)
block|{
comment|// will look in exception hierarchy
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|(
name|exception
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Processor
argument_list|>
name|list
init|=
name|getProcessors
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No processors available to process "
operator|+
name|exchange
argument_list|)
throw|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Processor
name|processor
init|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// process the first time
name|processExchange
argument_list|(
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// loop while we should fail over
while|while
condition|(
name|shouldFailOver
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// try again but prepare exchange before we failover
name|prepareExchangeForFailover
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|processor
operator|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|processExchange
argument_list|(
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no more processors to try
break|break;
block|}
block|}
block|}
comment|/**      * Prepares the exchange for failover      *      * @param exchange the exchange      */
DECL|method|prepareExchangeForFailover (Exchange exchange)
specifier|protected
name|void
name|prepareExchangeForFailover
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ERRORHANDLER_HANDLED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_HANDLED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERED
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_COUNTER
argument_list|)
expr_stmt|;
block|}
DECL|method|processExchange (Processor processor, Exchange exchange)
specifier|private
name|void
name|processExchange
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No processors could be chosen to process "
operator|+
name|exchange
argument_list|)
throw|;
block|}
try|try
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

