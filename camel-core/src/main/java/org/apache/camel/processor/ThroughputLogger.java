begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|ThroughputLogger
specifier|public
class|class
name|ThroughputLogger
extends|extends
name|Logger
block|{
DECL|field|groupSize
specifier|private
name|int
name|groupSize
init|=
literal|100
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|receivedCounter
specifier|private
name|AtomicInteger
name|receivedCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|numberFormat
specifier|private
name|NumberFormat
name|numberFormat
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
DECL|method|ThroughputLogger ()
specifier|public
name|ThroughputLogger
parameter_list|()
block|{     }
DECL|method|ThroughputLogger (Log log)
specifier|public
name|ThroughputLogger
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|super
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
DECL|method|ThroughputLogger (Log log, LoggingLevel level)
specifier|public
name|ThroughputLogger
parameter_list|(
name|Log
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|log
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
DECL|method|ThroughputLogger (String logName)
specifier|public
name|ThroughputLogger
parameter_list|(
name|String
name|logName
parameter_list|)
block|{
name|super
argument_list|(
name|logName
argument_list|)
expr_stmt|;
block|}
DECL|method|ThroughputLogger (String logName, LoggingLevel level)
specifier|public
name|ThroughputLogger
parameter_list|(
name|String
name|logName
parameter_list|,
name|LoggingLevel
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|logName
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
DECL|method|ThroughputLogger (String logName, LoggingLevel level, int groupSize)
specifier|public
name|ThroughputLogger
parameter_list|(
name|String
name|logName
parameter_list|,
name|LoggingLevel
name|level
parameter_list|,
name|int
name|groupSize
parameter_list|)
block|{
name|super
argument_list|(
name|logName
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|setGroupSize
argument_list|(
name|groupSize
argument_list|)
expr_stmt|;
block|}
DECL|method|ThroughputLogger (String logName, int groupSize)
specifier|public
name|ThroughputLogger
parameter_list|(
name|String
name|logName
parameter_list|,
name|int
name|groupSize
parameter_list|)
block|{
name|super
argument_list|(
name|logName
argument_list|)
expr_stmt|;
name|setGroupSize
argument_list|(
name|groupSize
argument_list|)
expr_stmt|;
block|}
DECL|method|ThroughputLogger (int groupSize)
specifier|public
name|ThroughputLogger
parameter_list|(
name|int
name|groupSize
parameter_list|)
block|{
name|setGroupSize
argument_list|(
name|groupSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|startTime
operator|==
literal|0
condition|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|int
name|receivedCount
init|=
name|receivedCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|receivedCount
operator|%
name|groupSize
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getGroupSize ()
specifier|public
name|int
name|getGroupSize
parameter_list|()
block|{
return|return
name|groupSize
return|;
block|}
DECL|method|setGroupSize (int groupSize)
specifier|public
name|void
name|setGroupSize
parameter_list|(
name|int
name|groupSize
parameter_list|)
block|{
if|if
condition|(
name|groupSize
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"groupSize cannot be zero!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|groupSize
operator|=
name|groupSize
expr_stmt|;
block|}
DECL|method|getNumberFormat ()
specifier|public
name|NumberFormat
name|getNumberFormat
parameter_list|()
block|{
return|return
name|numberFormat
return|;
block|}
DECL|method|setNumberFormat (NumberFormat numberFormat)
specifier|public
name|void
name|setNumberFormat
parameter_list|(
name|NumberFormat
name|numberFormat
parameter_list|)
block|{
name|this
operator|.
name|numberFormat
operator|=
name|numberFormat
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|logMessage (Exchange exchange)
specifier|protected
name|Object
name|logMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|elapsed
init|=
name|time
operator|-
name|startTime
decl_stmt|;
name|startTime
operator|=
name|time
expr_stmt|;
comment|// timeOneMessage = time / group
comment|// messagePerSend = 1000 / timeOneMessage
name|double
name|rate
init|=
name|groupSize
operator|*
literal|1000.0
decl_stmt|;
name|rate
operator|/=
name|elapsed
expr_stmt|;
return|return
literal|"Received: "
operator|+
name|receivedCounter
operator|.
name|get
argument_list|()
operator|+
literal|" messages so far. Last group took: "
operator|+
name|elapsed
operator|+
literal|" millis which is: "
operator|+
name|numberFormat
operator|.
name|format
argument_list|(
name|rate
argument_list|)
operator|+
literal|" messages per second"
return|;
block|}
block|}
end_class

end_unit

