begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_comment
comment|/**  * Represents a trace of an {@link org.apache.camel.Exchange}, intercepted at the given node  * that occured during routing.  *<p/>  * The IN body contains {@link TraceEventMessage} with trace details of the original IN message.  */
end_comment

begin_class
DECL|class|TraceEvent
specifier|public
class|class
name|TraceEvent
extends|extends
name|DefaultExchange
block|{
DECL|field|nodeId
specifier|private
name|String
name|nodeId
decl_stmt|;
DECL|field|exchangeId
specifier|private
name|String
name|exchangeId
decl_stmt|;
DECL|field|timestamp
specifier|private
name|Date
name|timestamp
decl_stmt|;
DECL|field|tracedExchange
specifier|private
name|Exchange
name|tracedExchange
decl_stmt|;
DECL|method|TraceEvent (Exchange parent)
specifier|public
name|TraceEvent
parameter_list|(
name|Exchange
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance ()
specifier|public
name|Exchange
name|newInstance
parameter_list|()
block|{
name|TraceEvent
name|answer
init|=
operator|new
name|TraceEvent
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExchangeId
argument_list|(
name|exchangeId
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setTracedExchange
argument_list|(
name|tracedExchange
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Get the id of the node of the trace interception      */
DECL|method|getNodeId ()
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
comment|/**      * Timestamp of the interception      */
DECL|method|getTimestamp ()
specifier|public
name|Date
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|setNodeId (String nodeId)
specifier|public
name|void
name|setNodeId
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
DECL|method|setTimestamp (Date timestamp)
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|Date
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
DECL|method|getTracedExchange ()
specifier|public
name|Exchange
name|getTracedExchange
parameter_list|()
block|{
return|return
name|tracedExchange
return|;
block|}
DECL|method|setTracedExchange (Exchange tracedExchange)
specifier|public
name|void
name|setTracedExchange
parameter_list|(
name|Exchange
name|tracedExchange
parameter_list|)
block|{
name|this
operator|.
name|tracedExchange
operator|=
name|tracedExchange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPattern ()
specifier|public
name|ExchangePattern
name|getPattern
parameter_list|()
block|{
return|return
name|ExchangePattern
operator|.
name|InOnly
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TraceEvent["
operator|+
name|tracedExchange
operator|.
name|getExchangeId
argument_list|()
operator|+
literal|"] on node: "
operator|+
name|nodeId
return|;
block|}
block|}
end_class

end_unit

