begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_comment
comment|/**  * A processor that processes the processor in a {@link org.apache.camel.spi.SubUnitOfWork} context.  *<p/>  * This processor ensures the {@link org.apache.camel.spi.UnitOfWork#beginSubUnitOfWork(org.apache.camel.Exchange)}  * and {@link org.apache.camel.spi.UnitOfWork#endSubUnitOfWork(org.apache.camel.Exchange)} is executed.  *  * @see org.apache.camel.spi.SubUnitOfWork  * @see org.apache.camel.spi.SubUnitOfWorkCallback  * @deprecated is to be removed in the future, as replaced by {@link CamelInternalProcessor}  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|SubUnitOfWorkProcessor
specifier|public
class|class
name|SubUnitOfWorkProcessor
extends|extends
name|UnitOfWorkProcessor
block|{
comment|// See code comment in DefaultUnitOfWork for reasons why this implementation is named SubUnitOfWorkProcessor
DECL|method|SubUnitOfWorkProcessor (Processor processor)
specifier|public
name|SubUnitOfWorkProcessor
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|SubUnitOfWorkProcessor (AsyncProcessor processor)
specifier|public
name|SubUnitOfWorkProcessor
parameter_list|(
name|AsyncProcessor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|SubUnitOfWorkProcessor (RouteContext routeContext, Processor processor)
specifier|public
name|SubUnitOfWorkProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|SubUnitOfWorkProcessor (RouteContext routeContext, AsyncProcessor processor)
specifier|public
name|SubUnitOfWorkProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|AsyncProcessor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// begin savepoint
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|beginSubUnitOfWork
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// process the exchange
return|return
name|super
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
try|try
block|{
comment|// end sub unit of work
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|endSubUnitOfWork
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// must ensure callback is invoked
name|callback
operator|.
name|done
argument_list|(
name|doneSync
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SubUnitOfWorkCallback"
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SubUnitOfWorkProcessor["
operator|+
name|processor
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

