begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|exceptionpolicy
operator|.
name|ExceptionPolicyStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * Default error handler  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultErrorHandler
specifier|public
class|class
name|DefaultErrorHandler
extends|extends
name|ErrorHandlerSupport
implements|implements
name|Processor
block|{
DECL|field|output
specifier|private
name|Processor
name|output
decl_stmt|;
DECL|method|DefaultErrorHandler (Processor output, ExceptionPolicyStrategy exceptionPolicyStrategy)
specifier|public
name|DefaultErrorHandler
parameter_list|(
name|Processor
name|output
parameter_list|,
name|ExceptionPolicyStrategy
name|exceptionPolicyStrategy
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|setExceptionPolicy
argument_list|(
name|exceptionPolicyStrategy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DefaultErrorHandler["
operator|+
name|output
operator|+
literal|"]"
return|;
block|}
DECL|method|supportTransacted ()
specifier|public
name|boolean
name|supportTransacted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|output
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// do not handle transacted exchanges as this error handler does not support it
name|boolean
name|handle
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|isTransacted
argument_list|()
operator|&&
operator|!
name|supportTransacted
argument_list|()
condition|)
block|{
name|handle
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"This error handler does not support transacted exchanges."
operator|+
literal|" Bypassing this error handler: "
operator|+
name|this
operator|+
literal|" for exchangeId: "
operator|+
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handle
operator|&&
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ExchangeHelper
operator|.
name|isFailureHandled
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|handleException
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleException (Exchange exchange)
specifier|private
name|void
name|handleException
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Exception
name|e
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// store the original caused exception in a property, so we can restore it later
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// find the error handler to use (if any)
name|OnExceptionDefinition
name|exceptionPolicy
init|=
name|getExceptionPolicy
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionPolicy
operator|!=
literal|null
condition|)
block|{
name|Predicate
name|handledPredicate
init|=
name|exceptionPolicy
operator|.
name|getHandledPolicy
argument_list|()
decl_stmt|;
name|Processor
name|processor
init|=
name|exceptionPolicy
operator|.
name|getErrorHandler
argument_list|()
decl_stmt|;
name|prepareExchangeBeforeOnException
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|deliverToFaultProcessor
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
name|prepareExchangeAfterOnException
argument_list|(
name|exchange
argument_list|,
name|handledPredicate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareExchangeBeforeOnException (Exchange exchange)
specifier|private
name|void
name|prepareExchangeBeforeOnException
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// okay lower the exception as we are handling it by onException
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// clear rollback flags
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ROLLBACK_ONLY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// reset cached streams so they can be read again
name|MessageHelper
operator|.
name|resetStreamCache
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|deliverToFaultProcessor (final Exchange exchange, final Processor failureProcessor)
specifier|private
name|void
name|deliverToFaultProcessor
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Processor
name|failureProcessor
parameter_list|)
throws|throws
name|Exception
block|{
name|failureProcessor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareExchangeAfterOnException (Exchange exchange, Predicate handledPredicate)
specifier|private
name|void
name|prepareExchangeAfterOnException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Predicate
name|handledPredicate
parameter_list|)
block|{
if|if
condition|(
name|handledPredicate
operator|==
literal|null
operator|||
operator|!
name|handledPredicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"This exchange is not handled so its marked as failed: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// exception not handled, put exception back in the exchange
name|exchange
operator|.
name|setException
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"This exchange is handled so its marked as not failed: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_HANDLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the output processor      */
DECL|method|getOutput ()
specifier|public
name|Processor
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

