begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|WeightedLoadBalancer
specifier|public
specifier|abstract
class|class
name|WeightedLoadBalancer
extends|extends
name|QueueLoadBalancer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WeightedLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|distributionRatioList
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionRatioList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|runtimeRatios
specifier|private
name|ArrayList
argument_list|<
name|DistributionRatio
argument_list|>
name|runtimeRatios
init|=
operator|new
name|ArrayList
argument_list|<
name|DistributionRatio
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|WeightedLoadBalancer (List<Integer> distributionRatios)
specifier|public
name|WeightedLoadBalancer
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionRatios
parameter_list|)
block|{
name|deepCloneDistributionRatios
argument_list|(
name|distributionRatios
argument_list|)
expr_stmt|;
name|loadRuntimeRatios
argument_list|(
name|distributionRatios
argument_list|)
expr_stmt|;
block|}
DECL|method|deepCloneDistributionRatios (List<Integer> distributionRatios)
specifier|protected
name|void
name|deepCloneDistributionRatios
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionRatios
parameter_list|)
block|{
for|for
control|(
name|Integer
name|value
range|:
name|distributionRatios
control|)
block|{
name|this
operator|.
name|distributionRatioList
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.apache.camel.processor.loadbalancer.LoadBalancerSupport#doStart()      */
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|getDistributionRatioList
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Listed Load Balance Processors do not match Distribution Ratio."
argument_list|)
throw|;
block|}
block|}
DECL|method|loadRuntimeRatios (List<Integer> distributionRatios)
specifier|protected
name|void
name|loadRuntimeRatios
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionRatios
parameter_list|)
block|{
name|int
name|position
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|value
range|:
name|distributionRatios
control|)
block|{
name|runtimeRatios
operator|.
name|add
argument_list|(
operator|new
name|DistributionRatio
argument_list|(
name|position
operator|++
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isRuntimeRatiosZeroed ()
specifier|protected
name|boolean
name|isRuntimeRatiosZeroed
parameter_list|()
block|{
name|boolean
name|cleared
init|=
literal|true
decl_stmt|;
for|for
control|(
name|DistributionRatio
name|runtimeRatio
range|:
name|runtimeRatios
control|)
block|{
if|if
condition|(
name|runtimeRatio
operator|.
name|getRuntimeWeight
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cleared
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|cleared
return|;
block|}
DECL|method|resetRuntimeRatios ()
specifier|protected
name|void
name|resetRuntimeRatios
parameter_list|()
block|{
for|for
control|(
name|DistributionRatio
name|runtimeRatio
range|:
name|runtimeRatios
control|)
block|{
name|runtimeRatio
operator|.
name|setRuntimeWeight
argument_list|(
name|runtimeRatio
operator|.
name|getDistributionWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDistributionRatioList ()
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getDistributionRatioList
parameter_list|()
block|{
return|return
name|distributionRatioList
return|;
block|}
DECL|method|setDistributionRatioList (List<Integer> distributionRatioList)
specifier|public
name|void
name|setDistributionRatioList
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionRatioList
parameter_list|)
block|{
name|this
operator|.
name|distributionRatioList
operator|=
name|distributionRatioList
expr_stmt|;
block|}
DECL|method|getRuntimeRatios ()
specifier|public
name|ArrayList
argument_list|<
name|DistributionRatio
argument_list|>
name|getRuntimeRatios
parameter_list|()
block|{
return|return
name|runtimeRatios
return|;
block|}
DECL|method|setRuntimeRatios (ArrayList<DistributionRatio> runtimeRatios)
specifier|public
name|void
name|setRuntimeRatios
parameter_list|(
name|ArrayList
argument_list|<
name|DistributionRatio
argument_list|>
name|runtimeRatios
parameter_list|)
block|{
name|this
operator|.
name|runtimeRatios
operator|=
name|runtimeRatios
expr_stmt|;
block|}
block|}
end_class

end_unit

