begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Traceable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AsyncProcessorConverterHelper
import|;
end_import

begin_class
DECL|class|CircuitBreakerLoadBalancer
specifier|public
class|class
name|CircuitBreakerLoadBalancer
extends|extends
name|LoadBalancerSupport
implements|implements
name|Traceable
implements|,
name|CamelContextAware
block|{
DECL|field|STATE_CLOSED
specifier|private
specifier|static
specifier|final
name|int
name|STATE_CLOSED
init|=
literal|0
decl_stmt|;
DECL|field|STATE_HALF_OPEN
specifier|private
specifier|static
specifier|final
name|int
name|STATE_HALF_OPEN
init|=
literal|1
decl_stmt|;
DECL|field|STATE_OPEN
specifier|private
specifier|static
specifier|final
name|int
name|STATE_OPEN
init|=
literal|2
decl_stmt|;
DECL|field|exceptions
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|exceptions
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|threshold
specifier|private
name|int
name|threshold
decl_stmt|;
DECL|field|halfOpenAfter
specifier|private
name|long
name|halfOpenAfter
decl_stmt|;
DECL|field|lastFailure
specifier|private
name|long
name|lastFailure
decl_stmt|;
comment|// stateful statistics
DECL|field|failures
specifier|private
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
name|AtomicInteger
name|state
init|=
operator|new
name|AtomicInteger
argument_list|(
name|STATE_CLOSED
argument_list|)
decl_stmt|;
DECL|field|statistics
specifier|private
specifier|final
name|ExceptionFailureStatistics
name|statistics
init|=
operator|new
name|ExceptionFailureStatistics
argument_list|()
decl_stmt|;
DECL|method|CircuitBreakerLoadBalancer ()
specifier|public
name|CircuitBreakerLoadBalancer
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CircuitBreakerLoadBalancer (List<Class<?>> exceptions)
specifier|public
name|CircuitBreakerLoadBalancer
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|exceptions
parameter_list|)
block|{
name|this
operator|.
name|exceptions
operator|=
name|exceptions
expr_stmt|;
name|statistics
operator|.
name|init
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|}
DECL|method|setHalfOpenAfter (long halfOpenAfter)
specifier|public
name|void
name|setHalfOpenAfter
parameter_list|(
name|long
name|halfOpenAfter
parameter_list|)
block|{
name|this
operator|.
name|halfOpenAfter
operator|=
name|halfOpenAfter
expr_stmt|;
block|}
DECL|method|getHalfOpenAfter ()
specifier|public
name|long
name|getHalfOpenAfter
parameter_list|()
block|{
return|return
name|halfOpenAfter
return|;
block|}
DECL|method|setThreshold (int threshold)
specifier|public
name|void
name|setThreshold
parameter_list|(
name|int
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
DECL|method|getThreshold ()
specifier|public
name|int
name|getThreshold
parameter_list|()
block|{
return|return
name|threshold
return|;
block|}
DECL|method|getState ()
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
name|state
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getExceptions ()
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getExceptions
parameter_list|()
block|{
return|return
name|exceptions
return|;
block|}
comment|/**      * Has the given Exchange failed      */
DECL|method|hasFailed (Exchange exchange)
specifier|protected
name|boolean
name|hasFailed
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exceptions
operator|==
literal|null
operator|||
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// always failover if no exceptions defined
name|answer
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|exception
range|:
name|exceptions
control|)
block|{
comment|// will look in exception hierarchy
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|(
name|exception
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|answer
condition|)
block|{
comment|// record the failure in the statistics
name|statistics
operator|.
name|onHandledFailure
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Failed: {} for exchangeId: {}"
argument_list|,
name|answer
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|isRunAllowed ()
specifier|public
name|boolean
name|isRunAllowed
parameter_list|()
block|{
name|boolean
name|forceShutdown
init|=
name|camelContext
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|forceShutdown
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceShutdown
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Run not allowed as ShutdownStrategy is forcing shutting down"
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|forceShutdown
operator|&&
name|super
operator|.
name|isRunAllowed
argument_list|()
return|;
block|}
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// can we still run
if|if
condition|(
operator|!
name|isRunAllowed
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Run not allowed, will reject executing exchange: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Run is not allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|calculateState
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
DECL|method|calculateState (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|boolean
name|calculateState
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|boolean
name|output
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|get
argument_list|()
operator|==
name|STATE_HALF_OPEN
condition|)
block|{
if|if
condition|(
name|failures
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|output
operator|=
name|closeCircuit
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
name|openCircuit
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|get
argument_list|()
operator|==
name|STATE_OPEN
condition|)
block|{
if|if
condition|(
name|failures
operator|.
name|get
argument_list|()
operator|>=
name|threshold
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastFailure
operator|<
name|halfOpenAfter
condition|)
block|{
name|output
operator|=
name|openCircuit
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
name|halfOpenCircuit
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|get
argument_list|()
operator|==
name|STATE_CLOSED
condition|)
block|{
if|if
condition|(
name|failures
operator|.
name|get
argument_list|()
operator|>=
name|threshold
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastFailure
operator|<
name|halfOpenAfter
condition|)
block|{
name|output
operator|=
name|openCircuit
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|failures
operator|.
name|get
argument_list|()
operator|>=
name|threshold
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastFailure
operator|>=
name|halfOpenAfter
condition|)
block|{
name|output
operator|=
name|halfOpenCircuit
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
name|closeCircuit
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unrecognised circuitBreaker state "
operator|+
name|state
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|output
return|;
block|}
DECL|method|openCircuit (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|boolean
name|openCircuit
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|boolean
name|output
init|=
name|rejectExchange
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|state
operator|.
name|set
argument_list|(
name|STATE_OPEN
argument_list|)
expr_stmt|;
name|logState
argument_list|()
expr_stmt|;
return|return
name|output
return|;
block|}
DECL|method|halfOpenCircuit (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|boolean
name|halfOpenCircuit
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|boolean
name|output
init|=
name|executeProcessor
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|state
operator|.
name|set
argument_list|(
name|STATE_HALF_OPEN
argument_list|)
expr_stmt|;
name|logState
argument_list|()
expr_stmt|;
return|return
name|output
return|;
block|}
DECL|method|closeCircuit (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|boolean
name|closeCircuit
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|boolean
name|output
init|=
name|executeProcessor
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|state
operator|.
name|set
argument_list|(
name|STATE_CLOSED
argument_list|)
expr_stmt|;
name|logState
argument_list|()
expr_stmt|;
return|return
name|output
return|;
block|}
DECL|method|logState ()
specifier|private
name|void
name|logState
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|dumpState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dumpState ()
specifier|public
name|String
name|dumpState
parameter_list|()
block|{
name|int
name|num
init|=
name|state
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|state
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
name|state
operator|=
literal|"closed"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|num
operator|==
literal|1
condition|)
block|{
name|state
operator|=
literal|"half open"
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
literal|"open"
expr_stmt|;
block|}
if|if
condition|(
name|lastFailure
operator|>
literal|0
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"State %s, failures %d, closed since %d"
argument_list|,
name|state
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastFailure
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"State %s, failures %d"
argument_list|,
name|state
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|executeProcessor (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|boolean
name|executeProcessor
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|Processor
name|processor
init|=
name|getProcessors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No processors could be chosen to process CircuitBreaker"
argument_list|)
throw|;
block|}
name|AsyncProcessor
name|albp
init|=
name|AsyncProcessorConverterHelper
operator|.
name|convert
argument_list|(
name|processor
argument_list|)
decl_stmt|;
comment|// Added a callback for processing the exchange in the callback
name|boolean
name|sync
init|=
name|albp
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|CircuitBreakerCallback
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
argument_list|)
decl_stmt|;
comment|// We need to check the exception here as albp is use sync call
if|if
condition|(
name|sync
condition|)
block|{
name|boolean
name|failed
init|=
name|hasFailed
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|failed
condition|)
block|{
name|failures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|lastFailure
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// CircuitBreakerCallback can take care of failure check of the
comment|// exchange
name|log
operator|.
name|trace
argument_list|(
literal|"Processing exchangeId: {} is continued being processed asynchronously"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Processing exchangeId: {} is continued being processed synchronously"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|rejectExchange (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|boolean
name|rejectExchange
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|(
literal|"CircuitBreaker Open: failures: "
operator|+
name|failures
operator|+
literal|", lastFailure: "
operator|+
name|lastFailure
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CircuitBreakerLoadBalancer["
operator|+
name|getProcessors
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|getTraceLabel ()
specifier|public
name|String
name|getTraceLabel
parameter_list|()
block|{
return|return
literal|"circuitbreaker"
return|;
block|}
DECL|method|getExceptionFailureStatistics ()
specifier|public
name|ExceptionFailureStatistics
name|getExceptionFailureStatistics
parameter_list|()
block|{
return|return
name|statistics
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// reset state
name|failures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|state
operator|.
name|set
argument_list|(
name|STATE_CLOSED
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// reset state
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
comment|// noop
block|}
DECL|class|CircuitBreakerCallback
class|class
name|CircuitBreakerCallback
implements|implements
name|AsyncCallback
block|{
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|method|CircuitBreakerCallback (Exchange exchange, AsyncCallback callback)
name|CircuitBreakerCallback
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|done (boolean doneSync)
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
if|if
condition|(
operator|!
name|doneSync
condition|)
block|{
name|boolean
name|failed
init|=
name|hasFailed
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|failed
condition|)
block|{
name|failures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|lastFailure
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|done
argument_list|(
name|doneSync
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

