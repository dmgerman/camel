begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.exceptionpolicy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|exceptionpolicy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ExceptionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The default strategy used in Camel to resolve the {@link org.apache.camel.model.ExceptionType} that should  * handle the thrown exception.  *<p/>  * This strategy applies the following rules:  *<ul>  *<li>The exception type must be configured with an Exception that is an instance of the thrown exception</li>  *<li>If the exception type has exactly the thrown exception then its selected</li>  *<li>Otherwise the type that has an exception that is super of the thrown exception is selected  *       (recurring up the exception hierarchy)  *</ul>  */
end_comment

begin_class
DECL|class|DefaultExceptionPolicyStrategy
specifier|public
class|class
name|DefaultExceptionPolicyStrategy
implements|implements
name|ExceptionPolicyStrategy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultExceptionPolicyStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getExceptionPolicy (Map<Class, ExceptionType> exceptionPolicices, Exchange exchange, Throwable exception)
specifier|public
name|ExceptionType
name|getExceptionPolicy
parameter_list|(
name|Map
argument_list|<
name|Class
argument_list|,
name|ExceptionType
argument_list|>
name|exceptionPolicices
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finding best suited exception policy for thrown exception "
operator|+
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the goal is to find the exception with the same/closet inheritance level as the target exception being thrown
name|int
name|targetLevel
init|=
name|getInheritanceLevel
argument_list|(
name|exception
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// candidate is the best candidate found so far to return
name|ExceptionType
name|candidate
init|=
literal|null
decl_stmt|;
comment|// difference in inheritance level between the current candidate and the thrown exception (target level)
name|int
name|candidateDiff
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// loop through all the entries and find the best candidates to use
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|,
name|ExceptionType
argument_list|>
argument_list|>
name|entries
init|=
name|exceptionPolicices
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|,
name|ExceptionType
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Class
name|clazz
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExceptionType
name|type
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// must be instance of check to ensure that the clazz is one type of the thrown exception
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|exception
argument_list|)
condition|)
block|{
comment|// exact match
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|exception
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|candidate
operator|=
name|type
expr_stmt|;
break|break;
block|}
comment|// not an exact match so find the best candidate
name|int
name|level
init|=
name|getInheritanceLevel
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|targetLevel
operator|-
name|level
decl_stmt|;
if|if
condition|(
name|diff
operator|<
name|candidateDiff
condition|)
block|{
comment|// replace with a much better candidate
name|candidate
operator|=
name|type
expr_stmt|;
name|candidateDiff
operator|=
name|diff
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using "
operator|+
name|candidate
operator|+
literal|" as the exception policy"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No candidate found to be used as exception policy"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|candidate
return|;
block|}
DECL|method|getInheritanceLevel (Class clazz)
specifier|private
specifier|static
name|int
name|getInheritanceLevel
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
literal|"java.lang.Object"
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
literal|1
operator|+
name|getInheritanceLevel
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

