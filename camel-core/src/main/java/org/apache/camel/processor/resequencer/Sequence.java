begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.resequencer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * A sorted set of elements with additional methods for obtaining immediate  * successors and immediate predecessors of a given element in the sequence.  * Successors and predecessors are calculated by using a  * {@link SequenceElementComparator}.  *   * @author Martin Krasser  *   * @version $Revision  */
end_comment

begin_class
DECL|class|Sequence
specifier|public
class|class
name|Sequence
parameter_list|<
name|E
parameter_list|>
extends|extends
name|TreeSet
argument_list|<
name|E
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5647393631147741711L
decl_stmt|;
DECL|field|comparator
specifier|private
name|SequenceElementComparator
argument_list|<
name|E
argument_list|>
name|comparator
decl_stmt|;
comment|/**      * Creates a new {@link Sequence} instance.      *       * @param comparator a strategy for comparing elements of this sequence.      */
DECL|method|Sequence (SequenceElementComparator<E> comparator)
specifier|public
name|Sequence
parameter_list|(
name|SequenceElementComparator
argument_list|<
name|E
argument_list|>
name|comparator
parameter_list|)
block|{
name|super
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
comment|/**      * Returns the immediate predecessor of the given element in this sequence      * or<code>null</code> if no predecessor exists.      *       * @param e an element which is compared to elements of this sequence.      * @return an element of this sequence or<code>null</code>.      */
DECL|method|predecessor (E e)
specifier|public
name|E
name|predecessor
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|E
name|elem
init|=
name|lower
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|elem
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|comparator
operator|.
name|predecessor
argument_list|(
name|elem
argument_list|,
name|e
argument_list|)
condition|)
block|{
return|return
name|elem
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the immediate successor of the given element in this sequence      * or<code>null</code> if no successor exists.      *       * @param e an element which is compared to elements of this sequence.      * @return an element of this sequence or<code>null</code>.      */
DECL|method|successor (E e)
specifier|public
name|E
name|successor
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|E
name|elem
init|=
name|higher
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|elem
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|comparator
operator|.
name|successor
argument_list|(
name|elem
argument_list|,
name|e
argument_list|)
condition|)
block|{
return|return
name|elem
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns this sequence's comparator.      *       * @return this sequence's comparator.      */
DECL|method|comparator ()
specifier|public
name|SequenceElementComparator
argument_list|<
name|E
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
comment|/**      * Returns the next higher element in the sequence to the given element. If      * the given element doesn't exist or if it is the last element in the      * sequence<code>null</code> is returned.<strong>Please note that this      * method is provided for compatibility with Java 5 SE. On a Java 6 SE      * platform the same method implemented by the {@link TreeSet}      * class should be used for better performance.</strong>      *       * @param e an element which is compared to elements of this sequence.      * @return an element of this sequence or<code>null</code>.      */
DECL|method|higher (E e)
specifier|public
name|E
name|higher
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|E
name|current
range|:
name|this
control|)
block|{
if|if
condition|(
name|found
condition|)
block|{
return|return
name|current
return|;
block|}
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|e
argument_list|,
name|current
argument_list|)
operator|==
literal|0
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the next lower element in the sequence to the given element. If      * the given element doesn't exist or if it is the first element in the      * sequence<code>null</code> is returned.<strong>Please note that this      * method is provided for compatibility with Java 5 SE. On a Java 6 SE      * platform the same method implemented by the {@link TreeSet}      * class should be used for better performance.</strong>      *       * @param e an element which is compared to elements of this sequence.      * @return an element of this sequence or<code>null</code>.      */
DECL|method|lower (E e)
specifier|public
name|E
name|lower
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|E
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|E
name|current
range|:
name|this
control|)
block|{
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|e
argument_list|,
name|current
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|last
return|;
block|}
name|last
operator|=
name|current
expr_stmt|;
block|}
return|return
name|last
return|;
block|}
block|}
end_class

end_unit

