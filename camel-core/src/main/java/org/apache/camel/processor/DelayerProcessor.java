begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExpressionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A<a href="http://activemq.apache.org/camel/delayer.html">Delayer</a> which delays  * processing the exchange until the correct amount of time has elapsed  * using an expression to determine the delivery time.  *  * For example if you wish to delay JMS messages by 25 seconds from their publish time you could create  * an instance of this class with the expression<code>header("JMSTimestamp")</code> and a delay value of 25000L.  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|DelayerProcessor
specifier|public
class|class
name|DelayerProcessor
extends|extends
name|ServiceSupport
implements|implements
name|Processor
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DelayerProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|timeExpression
specifier|private
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|timeExpression
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|field|delay
specifier|private
name|long
name|delay
init|=
literal|0L
decl_stmt|;
DECL|method|DelayerProcessor (Processor processor, Expression<Exchange> timeExpression, long delay)
specifier|public
name|DelayerProcessor
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|timeExpression
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|timeExpression
operator|=
name|timeExpression
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|time
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|timeExpression
operator|!=
literal|null
condition|)
block|{
name|Long
name|longValue
init|=
name|ExpressionHelper
operator|.
name|evaluateAsType
argument_list|(
name|timeExpression
argument_list|,
name|exchange
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|longValue
operator|!=
literal|null
condition|)
block|{
name|time
operator|=
name|longValue
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|time
operator|<=
literal|0
condition|)
block|{
name|time
operator|=
name|defaultProcessTime
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
name|time
operator|+=
name|delay
expr_stmt|;
name|waitUntil
argument_list|(
name|time
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getDelay ()
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
comment|/**      * Sets the delay from the publish time; which is typically the time from the expression      * or the current system time if none is available      */
DECL|method|setDelay (long delay)
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wait until the given system time before continuing      *      * @param time     the system time to wait for      * @param exchange the exchange being processed      */
DECL|method|waitUntil (long time, Exchange exchange)
specifier|protected
name|void
name|waitUntil
parameter_list|(
name|long
name|time
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|delay
init|=
name|time
operator|-
name|currentSystemTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|delay
operator|<
literal|0
condition|)
block|{
return|return;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|handleSleepInteruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Called when a sleep is interupted; allows derived classes to handle this case differently      */
DECL|method|handleSleepInteruptedException (InterruptedException e)
specifier|protected
name|void
name|handleSleepInteruptedException
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sleep interupted: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * A Strategy Method to allow derived implementations to decide the current system time or some other      * default exchange property      *      * @param exchange      */
DECL|method|defaultProcessTime (Exchange exchange)
specifier|protected
name|long
name|defaultProcessTime
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|currentSystemTime
argument_list|()
return|;
block|}
DECL|method|currentSystemTime ()
specifier|protected
name|long
name|currentSystemTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
end_class

end_unit

