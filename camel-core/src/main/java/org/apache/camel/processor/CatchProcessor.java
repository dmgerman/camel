begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A processor which catches exceptions.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|CatchProcessor
specifier|public
class|class
name|CatchProcessor
extends|extends
name|DelegateProcessor
block|{
DECL|field|exceptions
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|>
name|exceptions
decl_stmt|;
DECL|field|onWhen
specifier|private
specifier|final
name|Predicate
name|onWhen
decl_stmt|;
DECL|method|CatchProcessor (List<Class> exceptions, Processor processor, Predicate onWhen)
specifier|public
name|CatchProcessor
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|>
name|exceptions
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Predicate
name|onWhen
parameter_list|)
block|{
name|super
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|exceptions
operator|=
name|exceptions
expr_stmt|;
name|this
operator|.
name|onWhen
operator|=
name|onWhen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Catch["
operator|+
name|exceptions
operator|+
literal|" -> "
operator|+
name|getProcessor
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|catches (Exchange exchange, Throwable exception)
specifier|public
name|boolean
name|catches
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
comment|// use the exception iterator to walk the caused by hierachy
name|Iterator
argument_list|<
name|Throwable
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createExceptionIterator
argument_list|(
name|exception
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Throwable
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// see if we catch this type
for|for
control|(
name|Class
name|type
range|:
name|exceptions
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|e
argument_list|)
operator|&&
name|matchesWhen
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// not found
return|return
literal|false
return|;
block|}
DECL|method|getExceptions ()
specifier|public
name|List
argument_list|<
name|Class
argument_list|>
name|getExceptions
parameter_list|()
block|{
return|return
name|exceptions
return|;
block|}
comment|/**      * Strategy method for matching the exception type with the current exchange.      *<p/>      * This default implementation will match as:      *<ul>      *<li>Always true if no when predicate on the exception type      *<li>Otherwise the when predicate is matches against the current exchange      *</ul>      *      * @param exchange the current {@link org.apache.camel.Exchange}      * @return<tt>true</tt> if matched,<tt>false</tt> otherwise.      */
DECL|method|matchesWhen (Exchange exchange)
specifier|protected
name|boolean
name|matchesWhen
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|onWhen
operator|==
literal|null
condition|)
block|{
comment|// if no predicate then it's always a match
return|return
literal|true
return|;
block|}
return|return
name|onWhen
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
end_class

end_unit

