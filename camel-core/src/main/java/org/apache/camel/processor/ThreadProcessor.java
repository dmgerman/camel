begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AsyncProcessorHelper
import|;
end_import

begin_comment
comment|/**  * A processor that forces async processing of the exchange using a thread pool.  *   * @version $Revision$  */
end_comment

begin_class
DECL|class|ThreadProcessor
specifier|public
class|class
name|ThreadProcessor
implements|implements
name|AsyncProcessor
implements|,
name|Service
block|{
DECL|field|executor
specifier|private
name|ThreadPoolExecutor
name|executor
decl_stmt|;
DECL|field|stackSize
specifier|private
name|long
name|stackSize
decl_stmt|;
DECL|field|threadGroup
specifier|private
name|ThreadGroup
name|threadGroup
decl_stmt|;
DECL|field|priority
specifier|private
name|int
name|priority
init|=
name|Thread
operator|.
name|NORM_PRIORITY
decl_stmt|;
DECL|field|daemon
specifier|private
name|boolean
name|daemon
init|=
literal|true
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|"Thread Processor"
decl_stmt|;
DECL|field|taskQueue
specifier|private
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|taskQueue
decl_stmt|;
DECL|field|keepAliveTime
specifier|private
name|long
name|keepAliveTime
decl_stmt|;
DECL|field|maxSize
specifier|private
name|int
name|maxSize
init|=
literal|1
decl_stmt|;
DECL|field|coreSize
specifier|private
name|int
name|coreSize
init|=
literal|1
decl_stmt|;
DECL|field|shutdown
specifier|private
specifier|final
name|AtomicBoolean
name|shutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
empty_stmt|;
DECL|class|ProcessCall
class|class
name|ProcessCall
implements|implements
name|Runnable
block|{
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|method|ProcessCall (Exchange exchange, AsyncCallback callback)
specifier|public
name|ProcessCall
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|AsyncProcessorHelper
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
if|if
condition|(
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ThreadProcessor is not running."
argument_list|)
throw|;
block|}
name|ProcessCall
name|call
init|=
operator|new
name|ProcessCall
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|call
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdown
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getExecutor
argument_list|()
operator|.
name|setRejectedExecutionHandler
argument_list|(
operator|new
name|RejectedExecutionHandler
argument_list|()
block|{
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
name|ProcessCall
name|call
init|=
operator|(
name|ProcessCall
operator|)
name|runnable
decl_stmt|;
name|call
operator|.
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|getStackSize ()
specifier|public
name|long
name|getStackSize
parameter_list|()
block|{
return|return
name|stackSize
return|;
block|}
DECL|method|setStackSize (long stackSize)
specifier|public
name|void
name|setStackSize
parameter_list|(
name|long
name|stackSize
parameter_list|)
block|{
name|this
operator|.
name|stackSize
operator|=
name|stackSize
expr_stmt|;
block|}
DECL|method|getThreadGroup ()
specifier|public
name|ThreadGroup
name|getThreadGroup
parameter_list|()
block|{
return|return
name|threadGroup
return|;
block|}
DECL|method|setThreadGroup (ThreadGroup threadGroup)
specifier|public
name|void
name|setThreadGroup
parameter_list|(
name|ThreadGroup
name|threadGroup
parameter_list|)
block|{
name|this
operator|.
name|threadGroup
operator|=
name|threadGroup
expr_stmt|;
block|}
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|setPriority (int priority)
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
DECL|method|isDaemon ()
specifier|public
name|boolean
name|isDaemon
parameter_list|()
block|{
return|return
name|daemon
return|;
block|}
DECL|method|setDaemon (boolean daemon)
specifier|public
name|void
name|setDaemon
parameter_list|(
name|boolean
name|daemon
parameter_list|)
block|{
name|this
operator|.
name|daemon
operator|=
name|daemon
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getKeepAliveTime ()
specifier|public
name|long
name|getKeepAliveTime
parameter_list|()
block|{
return|return
name|keepAliveTime
return|;
block|}
DECL|method|setKeepAliveTime (long keepAliveTime)
specifier|public
name|void
name|setKeepAliveTime
parameter_list|(
name|long
name|keepAliveTime
parameter_list|)
block|{
name|this
operator|.
name|keepAliveTime
operator|=
name|keepAliveTime
expr_stmt|;
block|}
DECL|method|getMaxSize ()
specifier|public
name|int
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
DECL|method|setMaxSize (int maxSize)
specifier|public
name|void
name|setMaxSize
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
DECL|method|getCoreSize ()
specifier|public
name|int
name|getCoreSize
parameter_list|()
block|{
return|return
name|coreSize
return|;
block|}
DECL|method|setCoreSize (int coreSize)
specifier|public
name|void
name|setCoreSize
parameter_list|(
name|int
name|coreSize
parameter_list|)
block|{
name|this
operator|.
name|coreSize
operator|=
name|coreSize
expr_stmt|;
block|}
DECL|method|getTaskQueue ()
specifier|public
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|getTaskQueue
parameter_list|()
block|{
if|if
condition|(
name|taskQueue
operator|==
literal|null
condition|)
block|{
name|taskQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|taskQueue
return|;
block|}
DECL|method|setTaskQueue (BlockingQueue<Runnable> taskQueue)
specifier|public
name|void
name|setTaskQueue
parameter_list|(
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|taskQueue
parameter_list|)
block|{
name|this
operator|.
name|taskQueue
operator|=
name|taskQueue
expr_stmt|;
block|}
DECL|method|getExecutor ()
specifier|public
name|ThreadPoolExecutor
name|getExecutor
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|getCoreSize
argument_list|()
argument_list|,
name|getMaxSize
argument_list|()
argument_list|,
name|getKeepAliveTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|getTaskQueue
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
decl_stmt|;
if|if
condition|(
name|getStackSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|getThreadGroup
argument_list|()
argument_list|,
name|runnable
argument_list|,
name|getName
argument_list|()
argument_list|,
name|getStackSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|getThreadGroup
argument_list|()
argument_list|,
name|runnable
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|thread
operator|.
name|setDaemon
argument_list|(
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|executor
return|;
block|}
DECL|method|setExecutor (ThreadPoolExecutor executor)
specifier|public
name|void
name|setExecutor
parameter_list|(
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
block|}
end_class

end_unit

