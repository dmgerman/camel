begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Contract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@code CamelInternalProcessorAdvice} which performs Transformation and Validation  * according to the data type Contract.  *   * TODO add declarative validation  * @see CamelInternalProcessor, CamelInternalProcessorAdvice  */
end_comment

begin_class
DECL|class|ContractAdvice
specifier|public
class|class
name|ContractAdvice
implements|implements
name|CamelInternalProcessorAdvice
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelInternalProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|contract
specifier|private
name|Contract
name|contract
decl_stmt|;
DECL|method|ContractAdvice (Contract contract)
specifier|public
name|ContractAdvice
parameter_list|(
name|Contract
name|contract
parameter_list|)
block|{
name|this
operator|.
name|contract
operator|=
name|contract
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|before (Exchange exchange)
specifier|public
name|Object
name|before
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DataType
name|from
init|=
name|getCurrentType
argument_list|(
name|exchange
argument_list|,
name|Exchange
operator|.
name|INPUT_TYPE
argument_list|)
decl_stmt|;
name|DataType
name|to
init|=
name|contract
operator|.
name|getInputType
argument_list|()
decl_stmt|;
if|if
condition|(
name|to
operator|!=
literal|null
operator|&&
operator|!
name|to
operator|.
name|equals
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking for transformer for INPUT: from='{}', to='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|doTransform
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|INPUT_TYPE
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|after (Exchange exchange, Object data)
specifier|public
name|void
name|after
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|target
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|DataType
name|from
init|=
name|getCurrentType
argument_list|(
name|exchange
argument_list|,
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|Exchange
operator|.
name|OUTPUT_TYPE
else|:
name|Exchange
operator|.
name|INPUT_TYPE
argument_list|)
decl_stmt|;
name|DataType
name|to
init|=
name|contract
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
if|if
condition|(
name|to
operator|!=
literal|null
operator|&&
operator|!
name|to
operator|.
name|equals
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking for transformer for OUTPUT: from='{}', to='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|doTransform
argument_list|(
name|target
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|Exchange
operator|.
name|OUTPUT_TYPE
else|:
name|Exchange
operator|.
name|INPUT_TYPE
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTransform (Message message, DataType from, DataType to)
specifier|private
name|void
name|doTransform
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
comment|// transform into 'from' type before performing declared transformation
name|convertIfRequired
argument_list|(
name|message
argument_list|,
name|from
argument_list|)
expr_stmt|;
if|if
condition|(
name|applyExactlyMatchedTransformer
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
condition|)
block|{
comment|// Found exactly matched transformer. Java-Java transformer is also allowed.
return|return;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
literal|null
operator|||
name|from
operator|.
name|isJavaType
argument_list|()
condition|)
block|{
if|if
condition|(
name|convertIfRequired
argument_list|(
name|message
argument_list|,
name|to
argument_list|)
condition|)
block|{
comment|// Java->Java transformation just relies on TypeConverter if no explicit transformer
return|return;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
literal|null
condition|)
block|{
comment|// {undefined}->Other transformation - assuming it's already in expected shape
return|return;
block|}
elseif|else
if|if
condition|(
name|applyTransformerByToModel
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
condition|)
block|{
comment|// Java->Other transformation - found a transformer supports 'to' data model
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|to
operator|.
name|isJavaType
argument_list|()
condition|)
block|{
if|if
condition|(
name|applyTransformerByFromModel
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
condition|)
block|{
comment|// Other->Java transformation - found a transformer supprts 'from' data model
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|applyTransformerChain
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
condition|)
block|{
comment|// Other->Other transformation - found a transformer chain
return|return;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Transformer found for [from='"
operator|+
name|from
operator|+
literal|"', to='"
operator|+
name|to
operator|+
literal|"']"
argument_list|)
throw|;
block|}
DECL|method|convertIfRequired (Message message, DataType type)
specifier|private
name|boolean
name|convertIfRequired
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO for better performance it may be better to add TypeConveterTransformer
comment|// into transformer registry automatically to avoid unnecessary scan in transformer registry
name|CamelContext
name|context
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isJavaType
argument_list|()
operator|&&
name|type
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|typeJava
init|=
name|getClazz
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|typeJava
operator|.
name|isAssignableFrom
argument_list|(
name|message
operator|.
name|getBody
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting to '{}'"
argument_list|,
name|typeJava
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|typeJava
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|applyTransformer (Transformer transformer, Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyTransformer
parameter_list|(
name|Transformer
name|transformer
parameter_list|,
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|transformer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applying transformer: from='{}', to='{}', transformer='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|transformer
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|applyExactlyMatchedTransformer (Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyExactlyMatchedTransformer
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|Transformer
name|transformer
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|resolveTransformer
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
return|return
name|applyTransformer
argument_list|(
name|transformer
argument_list|,
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
DECL|method|applyTransformerByToModel (Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyTransformerByToModel
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|Transformer
name|transformer
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|resolveTransformer
argument_list|(
name|to
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|applyTransformer
argument_list|(
name|transformer
argument_list|,
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
DECL|method|applyTransformerByFromModel (Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyTransformerByFromModel
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|Transformer
name|transformer
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|resolveTransformer
argument_list|(
name|from
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|applyTransformer
argument_list|(
name|transformer
argument_list|,
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
DECL|method|applyTransformerChain (Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyTransformerChain
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Transformer
name|fromTransformer
init|=
name|context
operator|.
name|resolveTransformer
argument_list|(
name|from
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|Transformer
name|toTransformer
init|=
name|context
operator|.
name|resolveTransformer
argument_list|(
name|to
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromTransformer
operator|!=
literal|null
operator|&&
name|toTransformer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applying transformer 1/2: from='{}', to='{}', transformer='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|fromTransformer
argument_list|)
expr_stmt|;
name|fromTransformer
operator|.
name|transform
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
operator|new
name|DataType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applying transformer 2/2: from='{}', to='{}', transformer='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|toTransformer
argument_list|)
expr_stmt|;
name|toTransformer
operator|.
name|transform
argument_list|(
name|message
argument_list|,
operator|new
name|DataType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|to
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getClazz (String type, CamelContext context)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getClazz
parameter_list|(
name|String
name|type
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getCurrentType (Exchange exchange, String name)
specifier|private
name|DataType
name|getCurrentType
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Object
name|prop
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|instanceof
name|DataType
condition|)
block|{
return|return
operator|(
name|DataType
operator|)
name|prop
return|;
block|}
elseif|else
if|if
condition|(
name|prop
operator|instanceof
name|String
condition|)
block|{
name|DataType
name|answer
init|=
operator|new
name|DataType
argument_list|(
operator|(
name|String
operator|)
name|prop
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

