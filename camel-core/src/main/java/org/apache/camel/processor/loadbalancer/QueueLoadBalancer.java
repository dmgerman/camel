begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A base class for {@link LoadBalancer} implementations which choose a single destination for each exchange  * (rather like JMS Queues)  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|QueueLoadBalancer
specifier|public
specifier|abstract
class|class
name|QueueLoadBalancer
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
extends|extends
name|LoadBalancerSupport
argument_list|<
name|E
argument_list|>
block|{
DECL|method|process (E exchange)
specifier|public
name|void
name|process
parameter_list|(
name|E
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Processor
argument_list|<
name|E
argument_list|>
argument_list|>
name|list
init|=
name|getProcessors
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No processors available to process "
operator|+
name|exchange
argument_list|)
throw|;
block|}
name|Processor
argument_list|<
name|E
argument_list|>
name|processor
init|=
name|chooseProcessor
argument_list|(
name|list
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No processors could be chosen to process "
operator|+
name|exchange
argument_list|)
throw|;
block|}
else|else
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|chooseProcessor (List<Processor<E>> processors, E exchange)
specifier|protected
specifier|abstract
name|Processor
argument_list|<
name|E
argument_list|>
name|chooseProcessor
parameter_list|(
name|List
argument_list|<
name|Processor
argument_list|<
name|E
argument_list|>
argument_list|>
name|processors
parameter_list|,
name|E
name|exchange
parameter_list|)
function_decl|;
block|}
end_class

end_unit

