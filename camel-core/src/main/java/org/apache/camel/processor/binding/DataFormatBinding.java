begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.binding
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|MarshalProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|UnmarshalProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents a {@link org.apache.camel.spi.Binding} which Marshals the message in the ProduceProcessor and  * Unmarshals the message in the ConsumeProcessor  */
end_comment

begin_class
DECL|class|DataFormatBinding
specifier|public
class|class
name|DataFormatBinding
implements|implements
name|Binding
block|{
DECL|field|producerDataFormat
specifier|private
name|DataFormat
name|producerDataFormat
decl_stmt|;
DECL|field|consumerDataFormat
specifier|private
name|DataFormat
name|consumerDataFormat
decl_stmt|;
DECL|method|DataFormatBinding ()
specifier|public
name|DataFormatBinding
parameter_list|()
block|{     }
DECL|method|DataFormatBinding (DataFormat dataFormat)
specifier|public
name|DataFormatBinding
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|this
argument_list|(
name|dataFormat
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
block|}
DECL|method|DataFormatBinding (DataFormat consumerDataFormat, DataFormat producerDataFormat)
specifier|public
name|DataFormatBinding
parameter_list|(
name|DataFormat
name|consumerDataFormat
parameter_list|,
name|DataFormat
name|producerDataFormat
parameter_list|)
block|{
name|this
operator|.
name|consumerDataFormat
operator|=
name|consumerDataFormat
expr_stmt|;
name|this
operator|.
name|producerDataFormat
operator|=
name|producerDataFormat
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProduceProcessor ()
specifier|public
name|Processor
name|createProduceProcessor
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|producerDataFormat
argument_list|,
literal|"producerDataFormat"
argument_list|)
expr_stmt|;
return|return
operator|new
name|MarshalProcessor
argument_list|(
name|producerDataFormat
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumeProcessor ()
specifier|public
name|Processor
name|createConsumeProcessor
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|consumerDataFormat
argument_list|,
literal|"consumerDataFormat"
argument_list|)
expr_stmt|;
return|return
operator|new
name|UnmarshalProcessor
argument_list|(
name|consumerDataFormat
argument_list|)
return|;
block|}
comment|/**      * Sets the data format for both producer and consumer sides      */
DECL|method|setDataFormat (DataFormat dataFormat)
specifier|public
name|void
name|setDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|setConsumerDataFormat
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
name|setProducerDataFormat
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
block|}
DECL|method|getConsumerDataFormat ()
specifier|public
name|DataFormat
name|getConsumerDataFormat
parameter_list|()
block|{
return|return
name|consumerDataFormat
return|;
block|}
DECL|method|setConsumerDataFormat (DataFormat consumerDataFormat)
specifier|public
name|void
name|setConsumerDataFormat
parameter_list|(
name|DataFormat
name|consumerDataFormat
parameter_list|)
block|{
name|this
operator|.
name|consumerDataFormat
operator|=
name|consumerDataFormat
expr_stmt|;
block|}
DECL|method|getProducerDataFormat ()
specifier|public
name|DataFormat
name|getProducerDataFormat
parameter_list|()
block|{
return|return
name|producerDataFormat
return|;
block|}
DECL|method|setProducerDataFormat (DataFormat producerDataFormat)
specifier|public
name|void
name|setProducerDataFormat
parameter_list|(
name|DataFormat
name|producerDataFormat
parameter_list|)
block|{
name|this
operator|.
name|producerDataFormat
operator|=
name|producerDataFormat
expr_stmt|;
block|}
block|}
end_class

end_unit

