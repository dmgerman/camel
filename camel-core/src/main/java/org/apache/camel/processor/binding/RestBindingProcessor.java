begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.binding
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|UnmarshalProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AsyncProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_class
DECL|class|RestBindingProcessor
specifier|public
class|class
name|RestBindingProcessor
extends|extends
name|ServiceSupport
implements|implements
name|AsyncProcessor
block|{
DECL|field|jsonUnmarshal
specifier|private
specifier|final
name|AsyncProcessor
name|jsonUnmarshal
decl_stmt|;
DECL|field|xmlUnmarshal
specifier|private
specifier|final
name|AsyncProcessor
name|xmlUnmarshal
decl_stmt|;
DECL|method|RestBindingProcessor (DataFormat jsonDataFormat, DataFormat xmlDataFormat)
specifier|public
name|RestBindingProcessor
parameter_list|(
name|DataFormat
name|jsonDataFormat
parameter_list|,
name|DataFormat
name|xmlDataFormat
parameter_list|)
block|{
name|this
operator|.
name|jsonUnmarshal
operator|=
name|jsonDataFormat
operator|!=
literal|null
condition|?
operator|new
name|UnmarshalProcessor
argument_list|(
name|jsonDataFormat
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|xmlUnmarshal
operator|=
name|xmlDataFormat
operator|!=
literal|null
condition|?
operator|new
name|UnmarshalProcessor
argument_list|(
name|xmlDataFormat
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|AsyncProcessorHelper
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// is there any unmarshaller at all
if|if
condition|(
name|jsonUnmarshal
operator|==
literal|null
operator|&&
name|xmlUnmarshal
operator|==
literal|null
condition|)
block|{
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// check the header first if its xml or json
name|String
name|contentType
init|=
name|ExchangeHelper
operator|.
name|getContentType
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|boolean
name|isXml
init|=
name|contentType
operator|!=
literal|null
operator|&&
name|contentType
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
decl_stmt|;
name|boolean
name|isJson
init|=
name|contentType
operator|!=
literal|null
operator|&&
name|contentType
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
literal|"json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isXml
operator|&&
name|xmlUnmarshal
operator|!=
literal|null
condition|)
block|{
return|return
name|xmlUnmarshal
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isJson
operator|&&
name|jsonUnmarshal
operator|!=
literal|null
condition|)
block|{
return|return
name|jsonUnmarshal
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
comment|// read the content into memory so we can determine if its xml or json
name|String
name|body
init|=
name|MessageHelper
operator|.
name|extractBodyAsString
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
decl_stmt|;
name|isXml
operator|=
name|body
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
operator|||
name|body
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isXml
operator|&&
name|xmlUnmarshal
operator|!=
literal|null
condition|)
block|{
return|return
name|xmlUnmarshal
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|jsonUnmarshal
operator|!=
literal|null
condition|)
block|{
return|return
name|jsonUnmarshal
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
else|else
block|{
comment|// noop
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RestBindingProcessor"
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

