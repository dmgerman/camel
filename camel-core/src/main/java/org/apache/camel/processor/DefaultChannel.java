begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * DefaultChannel is the default {@link Channel}.  *<p/>  * The current implementation is just a composite containing the interceptors and error handler  * that beforehand was added to the route graph directly.  *<br/>  * With this {@link Channel} we can in the future implement better strategies for routing the  * {@link Exchange} in the route graph, as we have a {@link Channel} between each and every node  * in the graph.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultChannel
specifier|public
class|class
name|DefaultChannel
extends|extends
name|ServiceSupport
implements|implements
name|Processor
implements|,
name|Channel
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultChannel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|interceptors
specifier|private
specifier|final
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptStrategy
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|errorHandler
specifier|private
name|Processor
name|errorHandler
decl_stmt|;
comment|// the next processor (non wrapped)
DECL|field|nextProcessor
specifier|private
name|Processor
name|nextProcessor
decl_stmt|;
comment|// the real output to invoke that has been wrapped
DECL|field|output
specifier|private
name|Processor
name|output
decl_stmt|;
DECL|field|definition
specifier|private
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
decl_stmt|;
DECL|field|childDefinition
specifier|private
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|childDefinition
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|routeContext
specifier|private
name|RouteContext
name|routeContext
decl_stmt|;
DECL|method|next ()
specifier|public
name|List
argument_list|<
name|Processor
argument_list|>
name|next
parameter_list|()
block|{
name|List
argument_list|<
name|Processor
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|nextProcessor
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextProcessor
operator|!=
literal|null
return|;
block|}
DECL|method|setNextProcessor (Processor next)
specifier|public
name|void
name|setNextProcessor
parameter_list|(
name|Processor
name|next
parameter_list|)
block|{
name|this
operator|.
name|nextProcessor
operator|=
name|next
expr_stmt|;
block|}
DECL|method|getOutput ()
specifier|public
name|Processor
name|getOutput
parameter_list|()
block|{
comment|// the errorHandler is already decorated with interceptors
comment|// so it contain the entire chain of processors, so we can safely use it directly as output
comment|// if no error handler provided we use the output
return|return
name|errorHandler
operator|!=
literal|null
condition|?
name|errorHandler
else|:
name|output
return|;
block|}
DECL|method|setOutput (Processor output)
specifier|public
name|void
name|setOutput
parameter_list|(
name|Processor
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
DECL|method|getNextProcessor ()
specifier|public
name|Processor
name|getNextProcessor
parameter_list|()
block|{
return|return
name|nextProcessor
return|;
block|}
DECL|method|hasInterceptorStrategy (Class<?> type)
specifier|public
name|boolean
name|hasInterceptorStrategy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|interceptors
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|setErrorHandler (Processor errorHandler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|Processor
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
DECL|method|getErrorHandler ()
specifier|public
name|Processor
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
DECL|method|addInterceptStrategy (InterceptStrategy strategy)
specifier|public
name|void
name|addInterceptStrategy
parameter_list|(
name|InterceptStrategy
name|strategy
parameter_list|)
block|{
name|interceptors
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
DECL|method|addInterceptStrategies (List<InterceptStrategy> strategies)
specifier|public
name|void
name|addInterceptStrategies
parameter_list|(
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|strategies
parameter_list|)
block|{
name|interceptors
operator|.
name|addAll
argument_list|(
name|strategies
argument_list|)
expr_stmt|;
block|}
DECL|method|getInterceptStrategies ()
specifier|public
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|getInterceptStrategies
parameter_list|()
block|{
return|return
name|interceptors
return|;
block|}
DECL|method|getProcessorDefinition ()
specifier|public
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|getProcessorDefinition
parameter_list|()
block|{
return|return
name|definition
return|;
block|}
DECL|method|setChildDefinition (ProcessorDefinition<?> childDefinition)
specifier|public
name|void
name|setChildDefinition
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|childDefinition
parameter_list|)
block|{
name|this
operator|.
name|childDefinition
operator|=
name|childDefinition
expr_stmt|;
block|}
DECL|method|getRouteContext ()
specifier|public
name|RouteContext
name|getRouteContext
parameter_list|()
block|{
return|return
name|routeContext
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|errorHandler
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|output
argument_list|,
name|errorHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|initChannel (ProcessorDefinition<?> outputDefinition, RouteContext routeContext)
specifier|public
name|void
name|initChannel
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|outputDefinition
parameter_list|,
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|routeContext
operator|=
name|routeContext
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|outputDefinition
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
expr_stmt|;
name|Processor
name|target
init|=
name|nextProcessor
decl_stmt|;
name|Processor
name|next
decl_stmt|;
comment|// first wrap the output with the managed strategy if any
name|InterceptStrategy
name|managed
init|=
name|routeContext
operator|.
name|getManagedInterceptStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|managed
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|target
operator|==
name|nextProcessor
condition|?
literal|null
else|:
name|nextProcessor
expr_stmt|;
name|target
operator|=
name|managed
operator|.
name|wrapProcessorInInterceptors
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|outputDefinition
argument_list|,
name|target
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|// then wrap the output with the tracer
comment|// the tracer should have the fine grained definition so if a child is set then use it, if not then its the original output used
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|traceDef
init|=
name|childDefinition
operator|!=
literal|null
condition|?
name|childDefinition
else|:
name|outputDefinition
decl_stmt|;
name|TraceInterceptor
name|trace
init|=
operator|(
name|TraceInterceptor
operator|)
name|getOrCreateTracer
argument_list|()
operator|.
name|wrapProcessorInInterceptors
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|traceDef
argument_list|,
name|target
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// trace interceptor need to have a reference to route context so we at runtime can enable/disable tracing on-the-fly
name|trace
operator|.
name|setRouteContext
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
name|target
operator|=
name|trace
expr_stmt|;
comment|// wrap the output with the configured interceptors
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|interceptors
control|)
block|{
name|next
operator|=
name|target
operator|==
name|nextProcessor
condition|?
literal|null
else|:
name|nextProcessor
expr_stmt|;
comment|// skip tracer as we did the specially beforehand and it could potentially be added as an interceptor strategy
if|if
condition|(
name|strategy
operator|instanceof
name|Tracer
condition|)
block|{
continue|continue;
block|}
name|target
operator|=
name|strategy
operator|.
name|wrapProcessorInInterceptors
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|outputDefinition
argument_list|,
name|target
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|// sets the delegate to our wrapped output
name|output
operator|=
name|target
expr_stmt|;
block|}
DECL|method|getOrCreateTracer ()
specifier|private
name|InterceptStrategy
name|getOrCreateTracer
parameter_list|()
block|{
name|InterceptStrategy
name|tracer
init|=
name|Tracer
operator|.
name|getTracer
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// lookup in registry
name|Map
argument_list|<
name|String
argument_list|,
name|Tracer
argument_list|>
name|map
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByType
argument_list|(
name|Tracer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tracer
operator|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tracer
operator|==
literal|null
condition|)
block|{
comment|// fallback to use the default tracer
name|tracer
operator|=
name|camelContext
operator|.
name|getDefaultTracer
argument_list|()
expr_stmt|;
comment|// configure and use any trace formatter if any exists
name|Map
argument_list|<
name|String
argument_list|,
name|TraceFormatter
argument_list|>
name|formatters
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByType
argument_list|(
name|TraceFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|TraceFormatter
name|formatter
init|=
name|formatters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracer
operator|instanceof
name|Tracer
condition|)
block|{
operator|(
operator|(
name|Tracer
operator|)
name|tracer
operator|)
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// which we must manage as well
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
if|if
condition|(
name|tracer
operator|instanceof
name|Service
condition|)
block|{
name|strategy
operator|.
name|onServiceAdd
argument_list|(
name|camelContext
argument_list|,
operator|(
name|Service
operator|)
name|tracer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tracer
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// keep route context up to date
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|setRouteContext
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
name|Processor
name|processor
init|=
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
operator|&&
name|continueProcessing
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Strategy to determine if we should continue processing the {@link Exchange}.      */
DECL|method|continueProcessing (Exchange exchange)
specifier|protected
name|boolean
name|continueProcessing
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|stop
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|ROUTE_STOP
argument_list|)
decl_stmt|;
if|if
condition|(
name|stop
operator|!=
literal|null
condition|)
block|{
name|boolean
name|doStop
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|stop
argument_list|)
decl_stmt|;
if|if
condition|(
name|doStop
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exchange is marked to stop routing: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// just output the next processor as all the interceptors and error handler is just too verbose
return|return
literal|"Channel["
operator|+
name|nextProcessor
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

