begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.api.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_comment
comment|/**  * Various JMX openmbean types used by Camel.  */
end_comment

begin_class
DECL|class|CamelOpenMBeanTypes
specifier|public
specifier|final
class|class
name|CamelOpenMBeanTypes
block|{
DECL|method|CamelOpenMBeanTypes ()
specifier|private
name|CamelOpenMBeanTypes
parameter_list|()
block|{     }
DECL|method|listTypeConvertersTabularType ()
specifier|public
specifier|static
name|TabularType
name|listTypeConvertersTabularType
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|ct
init|=
name|listTypeConvertersCompositeType
argument_list|()
decl_stmt|;
return|return
operator|new
name|TabularType
argument_list|(
literal|"listTypeConverters"
argument_list|,
literal|"Lists all the type converters in the registry (from -> to)"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"from"
block|,
literal|"to"
block|}
argument_list|)
return|;
block|}
DECL|method|listTypeConvertersCompositeType ()
specifier|public
specifier|static
name|CompositeType
name|listTypeConvertersCompositeType
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
operator|new
name|CompositeType
argument_list|(
literal|"types"
argument_list|,
literal|"From/To types"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"from"
block|,
literal|"to"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"From type"
block|,
literal|"To type"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
return|;
block|}
DECL|method|listRestServicesTabularType ()
specifier|public
specifier|static
name|TabularType
name|listRestServicesTabularType
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|ct
init|=
name|listRestServicesCompositeType
argument_list|()
decl_stmt|;
return|return
operator|new
name|TabularType
argument_list|(
literal|"listRestServices"
argument_list|,
literal|"Lists all the rest services in the registry"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"url"
block|,
literal|"method"
block|}
argument_list|)
return|;
block|}
DECL|method|listRestServicesCompositeType ()
specifier|public
specifier|static
name|CompositeType
name|listRestServicesCompositeType
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
operator|new
name|CompositeType
argument_list|(
literal|"rests"
argument_list|,
literal|"Rest Services"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"url"
block|,
literal|"baseUrl"
block|,
literal|"basePath"
block|,
literal|"uriTemplate"
block|,
literal|"method"
block|,
literal|"consumes"
block|,
literal|"produces"
block|,
literal|"inType"
block|,
literal|"outType"
block|,
literal|"state"
block|,
literal|"routeId"
block|,
literal|"description"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Url"
block|,
literal|"Base Url"
block|,
literal|"Base Path"
block|,
literal|"Uri Template"
block|,
literal|"Method"
block|,
literal|"Consumes"
block|,
literal|"Produces"
block|,
literal|"Input Type"
block|,
literal|"Output Type"
block|,
literal|"State"
block|,
literal|"Route Id"
block|,
literal|"Description"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
return|;
block|}
DECL|method|listEndpointsTabularType ()
specifier|public
specifier|static
name|TabularType
name|listEndpointsTabularType
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|ct
init|=
name|listEndpointsCompositeType
argument_list|()
decl_stmt|;
return|return
operator|new
name|TabularType
argument_list|(
literal|"listEndpoints"
argument_list|,
literal|"Lists all the endpoints in the registry"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"url"
block|}
argument_list|)
return|;
block|}
DECL|method|listEndpointsCompositeType ()
specifier|public
specifier|static
name|CompositeType
name|listEndpointsCompositeType
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
operator|new
name|CompositeType
argument_list|(
literal|"url"
argument_list|,
literal|"Endpoints"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"url"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Url"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
return|;
block|}
DECL|method|explainEndpointTabularType ()
specifier|public
specifier|static
name|TabularType
name|explainEndpointTabularType
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|ct
init|=
name|explainEndpointsCompositeType
argument_list|()
decl_stmt|;
return|return
operator|new
name|TabularType
argument_list|(
literal|"explainEndpoint"
argument_list|,
literal|"Explain how this endpoint is configured"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"option"
block|}
argument_list|)
return|;
block|}
DECL|method|explainEndpointsCompositeType ()
specifier|public
specifier|static
name|CompositeType
name|explainEndpointsCompositeType
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
operator|new
name|CompositeType
argument_list|(
literal|"endpoint"
argument_list|,
literal|"Explain Endpoint"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"option"
block|,
literal|"kind"
block|,
literal|"type"
block|,
literal|"java type"
block|,
literal|"value"
block|,
literal|"default value"
block|,
literal|"description"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Option"
block|,
literal|"Kind"
block|,
literal|"Type"
block|,
literal|"Java Type"
block|,
literal|"Value"
block|,
literal|"Default Value"
block|,
literal|"Description"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
return|;
block|}
DECL|method|listComponentsTabularType ()
specifier|public
specifier|static
name|TabularType
name|listComponentsTabularType
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|CompositeType
name|ct
init|=
name|listComponentsCompositeType
argument_list|()
decl_stmt|;
return|return
operator|new
name|TabularType
argument_list|(
literal|"listComponents"
argument_list|,
literal|"Lists all the components"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|}
argument_list|)
return|;
block|}
DECL|method|listComponentsCompositeType ()
specifier|public
specifier|static
name|CompositeType
name|listComponentsCompositeType
parameter_list|()
throws|throws
name|OpenDataException
block|{
return|return
operator|new
name|CompositeType
argument_list|(
literal|"name"
argument_list|,
literal|"Components"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|,
literal|"description"
block|,
literal|"label"
block|,
literal|"status"
block|,
literal|"type"
block|,
literal|"groupId"
block|,
literal|"artifactId"
block|,
literal|"version"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Description"
block|,
literal|"Label"
block|,
literal|"Status"
block|,
literal|"Type"
block|,
literal|"GroupId"
block|,
literal|"ArtifactId"
block|,
literal|"Version"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

