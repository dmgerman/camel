begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.jsse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents {@link SSLContext} configuration options used in instantiating an  * {@code SSLContext} instance.  */
end_comment

begin_class
DECL|class|SSLContextParameters
specifier|public
class|class
name|SSLContextParameters
extends|extends
name|BaseSSLContextParameters
block|{
DECL|field|DEFAULT_SECURE_SOCKET_PROTOCOL
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_SECURE_SOCKET_PROTOCOL
init|=
literal|"TLS"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SSLContextParameters
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The optional key manager configuration for creating the      * {@link KeyManager}s used in constructing an {@link SSLContext}.      */
DECL|field|keyManagers
specifier|private
name|KeyManagersParameters
name|keyManagers
decl_stmt|;
comment|/**      * The optional trust manager configuration for creating the      * {@link TrustManager}s used in constructing an {@link SSLContext}.      */
DECL|field|trustManagers
specifier|private
name|TrustManagersParameters
name|trustManagers
decl_stmt|;
comment|/**      * The optional secure random configuration options to use for constructing      * the {@link SecureRandom} used in the creation of an {@link SSLContext].      */
DECL|field|secureRandom
specifier|private
name|SecureRandomParameters
name|secureRandom
decl_stmt|;
comment|/**      * The optional configuration options to be applied purely to the client side settings      * of the {@link SSLContext}.  Settings specified here override any duplicate settings      * provided at the overall level by this class.  These parameters apply to       * {@link SSLSocketFactory}s and {@link SSLEngine}s produced by the the {@code SSLContext}      * produced from this class as well as to the {@code SSLContext} itself.      */
DECL|field|clientParameters
specifier|private
name|SSLContextClientParameters
name|clientParameters
decl_stmt|;
comment|/**      * The optional configuration options to be applied purely to the server side settings      * of the {@link SSLContext}.  Settings specified here override any duplicate settings      * provided at the overall level by this class.  These parameters apply to       * {@link SSLServerSocketFactory}s and {@link SSLEngine}s produced by the the {@code SSLContext}      * produced from this class as well as to the {@code SSLContext} itself.      */
DECL|field|serverParameters
specifier|private
name|SSLContextServerParameters
name|serverParameters
decl_stmt|;
comment|/**      * The optional provider identifier for the JSSE implementation to use when      * constructing an {@link SSLContext}.      */
DECL|field|provider
specifier|private
name|String
name|provider
decl_stmt|;
comment|/**      * The optional protocol for the secure sockets created by the {@link SSLContext}      * represented by this instance's configuration. See Appendix A in the<a      * href="http://download.oracle.com/javase/6/docs/technotes/guides//security/jsse/JSSERefGuide.html#AppA"      *>Java Secure Socket Extension Reference Guide</a> for information about      * standard protocol names.      */
DECL|field|secureSocketProtocol
specifier|private
name|String
name|secureSocketProtocol
decl_stmt|;
DECL|method|getKeyManagers ()
specifier|public
name|KeyManagersParameters
name|getKeyManagers
parameter_list|()
block|{
return|return
name|keyManagers
return|;
block|}
comment|/**      * Sets the optional key manager configuration for creating the      * {@link KeyManager}s used in constructing an {@link SSLContext}.      *       * @param keyManagers the options or {@code null} to provide no      *            {@code KeyManager}s      */
DECL|method|setKeyManagers (KeyManagersParameters keyManagers)
specifier|public
name|void
name|setKeyManagers
parameter_list|(
name|KeyManagersParameters
name|keyManagers
parameter_list|)
block|{
name|this
operator|.
name|keyManagers
operator|=
name|keyManagers
expr_stmt|;
block|}
DECL|method|getTrustManagers ()
specifier|public
name|TrustManagersParameters
name|getTrustManagers
parameter_list|()
block|{
return|return
name|trustManagers
return|;
block|}
comment|/**      * Sets the optional trust manager configuration for creating the      * {@link TrustManager}s used in constructing an {@link SSLContext}.      *       * @param trustManagers the options or {@code null} to provide no      *            {@code TrustManager}s      */
DECL|method|setTrustManagers (TrustManagersParameters trustManagers)
specifier|public
name|void
name|setTrustManagers
parameter_list|(
name|TrustManagersParameters
name|trustManagers
parameter_list|)
block|{
name|this
operator|.
name|trustManagers
operator|=
name|trustManagers
expr_stmt|;
block|}
DECL|method|getSecureRandom ()
specifier|public
name|SecureRandomParameters
name|getSecureRandom
parameter_list|()
block|{
return|return
name|secureRandom
return|;
block|}
comment|/**      * Sets the optional secure random configuration options to use for       * constructing the {@link SecureRandom} used in the creation of an {@link SSLContext}.      *      * @param secureRandom the options or {@code null} to use the default      */
DECL|method|setSecureRandom (SecureRandomParameters secureRandom)
specifier|public
name|void
name|setSecureRandom
parameter_list|(
name|SecureRandomParameters
name|secureRandom
parameter_list|)
block|{
name|this
operator|.
name|secureRandom
operator|=
name|secureRandom
expr_stmt|;
block|}
DECL|method|getClientParameters ()
specifier|public
name|SSLContextClientParameters
name|getClientParameters
parameter_list|()
block|{
return|return
name|clientParameters
return|;
block|}
comment|/**      * The optional configuration options to be applied purely to the client side settings      * of the {@link SSLContext}.  Settings specified here override any duplicate settings      * provided at the overall level by this class.  These parameters apply to       * {@link SSLSocketFactory}s and {@link SSLEngine}s produced by the the {@code SSLContext}      * produced from this class as well as to the {@code SSLContext} itself.      *      * @param clientParameters the optional additional client-side parameters      */
DECL|method|setClientParameters (SSLContextClientParameters clientParameters)
specifier|public
name|void
name|setClientParameters
parameter_list|(
name|SSLContextClientParameters
name|clientParameters
parameter_list|)
block|{
name|this
operator|.
name|clientParameters
operator|=
name|clientParameters
expr_stmt|;
block|}
DECL|method|getServerParameters ()
specifier|public
name|SSLContextServerParameters
name|getServerParameters
parameter_list|()
block|{
return|return
name|serverParameters
return|;
block|}
comment|/**      * The optional configuration options to be applied purely to the server side settings      * of the {@link SSLContext}.  Settings specified here override any duplicate settings      * provided at the overall level by this class.  These parameters apply to       * {@link SSLServerSocketFactory}s and {@link SSLEngine}s produced by the the {@code SSLContext}      * produced from this class as well as to the {@code SSLContext} itself.      *      * @param serverParameters the optional additional client-side parameters      */
DECL|method|setServerParameters (SSLContextServerParameters serverParameters)
specifier|public
name|void
name|setServerParameters
parameter_list|(
name|SSLContextServerParameters
name|serverParameters
parameter_list|)
block|{
name|this
operator|.
name|serverParameters
operator|=
name|serverParameters
expr_stmt|;
block|}
DECL|method|getProvider ()
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
comment|/**      * Sets the optional provider identifier to use when constructing an      * {@link SSLContext}.      *       * @param provider the identifier (from the list of available providers      *            returned by {@link Security#getProviders()}) or {@code null}      *            to use the highest priority provider implementing the secure      *            socket protocol      *      * @see Security#getProviders(java.util.Map)      * @see #setSecureSocketProtocol(String)                  */
DECL|method|setProvider (String provider)
specifier|public
name|void
name|setProvider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
DECL|method|getSecureSocketProtocol ()
specifier|public
name|String
name|getSecureSocketProtocol
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|secureSocketProtocol
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_SECURE_SOCKET_PROTOCOL
return|;
block|}
return|return
name|this
operator|.
name|secureSocketProtocol
return|;
block|}
comment|/**      * Sets the optional protocol for the secure sockets created by the      * {@link SSLContext} represented by this instance's configuration. Defaults      * to TLS. See Appendix A in the<a href=      * "http://download.oracle.com/javase/6/docs/technotes/guides//security/jsse/JSSERefGuide.html#AppA"      *>Java Secure Socket Extension Reference Guide</a> for information about      * standard protocol names.      *       * @param secureSocketProtocol the name of the protocol or {@code null} to      *            use the default (TLS)      */
DECL|method|setSecureSocketProtocol (String secureSocketProtocol)
specifier|public
name|void
name|setSecureSocketProtocol
parameter_list|(
name|String
name|secureSocketProtocol
parameter_list|)
block|{
name|this
operator|.
name|secureSocketProtocol
operator|=
name|secureSocketProtocol
expr_stmt|;
block|}
comment|////////////////////////////////////////////
comment|/**      * Creates an {@link SSLContext} based on the related configuration options      * of this instance. Namely, {@link #keyManagers}, {@link #trustManagers}, and      * {@link #secureRandom}, but also respecting the chosen provider and secure      * socket protocol as well.      *       * @return a newly configured instance      *      * @throws GeneralSecurityException if there is a problem in this instances      *             configuration or that of its nested configuration options      * @throws IOException if there is an error reading a key/trust store      */
DECL|method|createSSLContext ()
specifier|public
name|SSLContext
name|createSSLContext
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating SSLContext from SSLContextParameters: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|KeyManager
index|[]
name|keyManagers
init|=
name|this
operator|.
name|keyManagers
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|keyManagers
operator|.
name|createKeyManagers
argument_list|()
decl_stmt|;
name|TrustManager
index|[]
name|trustManagers
init|=
name|this
operator|.
name|trustManagers
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|trustManagers
operator|.
name|createTrustManagers
argument_list|()
decl_stmt|;
name|SecureRandom
name|secureRandom
init|=
name|this
operator|.
name|secureRandom
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|secureRandom
operator|.
name|createSecureRandom
argument_list|()
decl_stmt|;
name|SSLContext
name|context
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getProvider
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|this
operator|.
name|getSecureSocketProtocol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|this
operator|.
name|getSecureSocketProtocol
argument_list|()
argument_list|)
argument_list|,
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|this
operator|.
name|getProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|init
argument_list|(
name|keyManagers
argument_list|,
name|trustManagers
argument_list|,
name|secureRandom
argument_list|)
expr_stmt|;
name|this
operator|.
name|configureSSLContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Decorate the context.
name|context
operator|=
operator|new
name|SSLContextDecorator
argument_list|(
operator|new
name|SSLContextSpiDecorator
argument_list|(
name|context
argument_list|,
name|this
operator|.
name|getSSLEngineConfigurers
argument_list|(
name|context
argument_list|)
argument_list|,
name|this
operator|.
name|getSSLSocketFactoryConfigurers
argument_list|(
name|context
argument_list|)
argument_list|,
name|this
operator|.
name|getSSLServerSocketFactoryConfigurers
argument_list|(
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created {}"
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|configureSSLContext (SSLContext context)
specifier|protected
name|void
name|configureSSLContext
parameter_list|(
name|SSLContext
name|context
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Configuring client and server side SSLContext parameters..."
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureSSLContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getClientParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Overriding client-side SSLContext parameters with configured client parameters."
argument_list|)
expr_stmt|;
name|this
operator|.
name|getClientParameters
argument_list|()
operator|.
name|configureSSLContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getServerParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Overriding server-side SSLContext parameters with configured server parameters."
argument_list|)
expr_stmt|;
name|this
operator|.
name|getServerParameters
argument_list|()
operator|.
name|configureSSLContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Configured client and server side SSLContext parameters."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSSLEngineConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
argument_list|>
name|getSSLEngineConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Collecting client and server side SSLEngine configurers..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
argument_list|>
name|configurers
init|=
name|super
operator|.
name|getSSLEngineConfigurers
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getClientParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Augmenting SSLEngine configurers with configurers from client parameters."
argument_list|)
expr_stmt|;
name|configurers
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getClientParameters
argument_list|()
operator|.
name|getSSLEngineConfigurers
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getServerParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Augmenting SSLEngine configurers with configurers from server parameters."
argument_list|)
expr_stmt|;
name|configurers
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getServerParameters
argument_list|()
operator|.
name|getSSLEngineConfigurers
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Collected client and server side SSLEngine configurers."
argument_list|)
expr_stmt|;
return|return
name|configurers
return|;
block|}
annotation|@
name|Override
DECL|method|getSSLSocketFactoryConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
argument_list|>
name|getSSLSocketFactoryConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Collecting SSLSocketFactory configurers..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
argument_list|>
name|configurers
init|=
name|super
operator|.
name|getSSLSocketFactoryConfigurers
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getClientParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Augmenting SSLSocketFactory configurers with configurers from client parameters."
argument_list|)
expr_stmt|;
name|configurers
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getClientParameters
argument_list|()
operator|.
name|getSSLSocketFactoryConfigurers
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Collected SSLSocketFactory configurers."
argument_list|)
expr_stmt|;
return|return
name|configurers
return|;
block|}
annotation|@
name|Override
DECL|method|getSSLServerSocketFactoryConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
argument_list|>
name|getSSLServerSocketFactoryConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Collecting SSLServerSocketFactory configurers..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
argument_list|>
name|configurers
init|=
name|super
operator|.
name|getSSLServerSocketFactoryConfigurers
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getServerParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Augmenting SSLServerSocketFactory configurers with configurers from server parameters."
argument_list|)
expr_stmt|;
name|configurers
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getServerParameters
argument_list|()
operator|.
name|getSSLServerSocketFactoryConfigurers
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Collected client and server side SSLServerSocketFactory configurers."
argument_list|)
expr_stmt|;
return|return
name|configurers
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"SSLContextParameters [keyManagers="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|keyManagers
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", trustManagers="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|trustManagers
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", secureRandom="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|secureRandom
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", clientParameters="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|clientParameters
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", serverParameters="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|serverParameters
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", provider="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", secureSocketProtocol="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|secureSocketProtocol
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", getCipherSuites()="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getCipherSuites
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", getCipherSuitesFilter()="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getCipherSuitesFilter
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", getSecureSocketProtocols()="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getSecureSocketProtocols
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", getSecureSocketProtocolsFilter()="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getSecureSocketProtocolsFilter
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", getSessionTimeout()="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getSessionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", getContext()="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

