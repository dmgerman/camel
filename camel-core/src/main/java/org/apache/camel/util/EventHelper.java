begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper for easily sending event notifications in a single line of code  *  * @version   */
end_comment

begin_class
DECL|class|EventHelper
specifier|public
specifier|final
class|class
name|EventHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EventHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|EventHelper ()
specifier|private
name|EventHelper
parameter_list|()
block|{     }
DECL|method|notifyCamelContextStarting (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextStarting
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextStartingEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextStarted (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextStarted
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextStartedEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextStartupFailed (CamelContext context, Throwable cause)
specifier|public
specifier|static
name|void
name|notifyCamelContextStartupFailed
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextStartupFailureEvent
argument_list|(
name|context
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextStopping (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextStopping
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextStoppingEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextStopped (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextStopped
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextStoppedEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextStopFailed (CamelContext context, Throwable cause)
specifier|public
specifier|static
name|void
name|notifyCamelContextStopFailed
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextStopFailureEvent
argument_list|(
name|context
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyServiceStopFailure (CamelContext context, Object service, Throwable cause)
specifier|public
specifier|static
name|void
name|notifyServiceStopFailure
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|service
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreServiceEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createServiceStopFailureEvent
argument_list|(
name|context
argument_list|,
name|service
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyServiceStartupFailure (CamelContext context, Object service, Throwable cause)
specifier|public
specifier|static
name|void
name|notifyServiceStartupFailure
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|service
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreServiceEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createServiceStartupFailureEvent
argument_list|(
name|context
argument_list|,
name|service
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyRouteStarted (CamelContext context, Route route)
specifier|public
specifier|static
name|void
name|notifyRouteStarted
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreRouteEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createRouteStartedEvent
argument_list|(
name|route
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyRouteStopped (CamelContext context, Route route)
specifier|public
specifier|static
name|void
name|notifyRouteStopped
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreRouteEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createRouteStoppedEvent
argument_list|(
name|route
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyRouteAdded (CamelContext context, Route route)
specifier|public
specifier|static
name|void
name|notifyRouteAdded
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreRouteEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createRouteAddedEvent
argument_list|(
name|route
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyRouteRemoved (CamelContext context, Route route)
specifier|public
specifier|static
name|void
name|notifyRouteRemoved
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreRouteEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createRouteRemovedEvent
argument_list|(
name|route
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyExchangeCreated (CamelContext context, Exchange exchange)
specifier|public
specifier|static
name|void
name|notifyExchangeCreated
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|NOTIFY_EVENT
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// do not generate events for an notify event
return|return;
block|}
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreExchangeEvents
argument_list|()
operator|||
name|notifier
operator|.
name|isIgnoreExchangeCreatedEvent
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createExchangeCreatedEvent
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyExchangeDone (CamelContext context, Exchange exchange)
specifier|public
specifier|static
name|void
name|notifyExchangeDone
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|NOTIFY_EVENT
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// do not generate events for an notify event
return|return;
block|}
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreExchangeEvents
argument_list|()
operator|||
name|notifier
operator|.
name|isIgnoreExchangeCompletedEvent
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createExchangeCompletedEvent
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyExchangeFailed (CamelContext context, Exchange exchange)
specifier|public
specifier|static
name|void
name|notifyExchangeFailed
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|NOTIFY_EVENT
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// do not generate events for an notify event
return|return;
block|}
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreExchangeEvents
argument_list|()
operator|||
name|notifier
operator|.
name|isIgnoreExchangeFailedEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createExchangeFailedEvent
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyExchangeFailureHandled (CamelContext context, Exchange exchange, Processor failureHandler, boolean deadLetterChannel)
specifier|public
specifier|static
name|void
name|notifyExchangeFailureHandled
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|failureHandler
parameter_list|,
name|boolean
name|deadLetterChannel
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|NOTIFY_EVENT
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// do not generate events for an notify event
return|return;
block|}
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreExchangeEvents
argument_list|()
operator|||
name|notifier
operator|.
name|isIgnoreExchangeFailedEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createExchangeFailureHandledEvent
argument_list|(
name|exchange
argument_list|,
name|failureHandler
argument_list|,
name|deadLetterChannel
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyExchangeRedelivery (CamelContext context, Exchange exchange, int attempt)
specifier|public
specifier|static
name|void
name|notifyExchangeRedelivery
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|int
name|attempt
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|NOTIFY_EVENT
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// do not generate events for an notify event
return|return;
block|}
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreExchangeEvents
argument_list|()
operator|||
name|notifier
operator|.
name|isIgnoreExchangeFailedEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createExchangeRedeliveryEvent
argument_list|(
name|exchange
argument_list|,
name|attempt
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyExchangeSending (CamelContext context, Exchange exchange, Endpoint endpoint)
specifier|public
specifier|static
name|void
name|notifyExchangeSending
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|NOTIFY_EVENT
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// do not generate events for an notify event
return|return;
block|}
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreExchangeEvents
argument_list|()
operator|||
name|notifier
operator|.
name|isIgnoreExchangeSentEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createExchangeSendingEvent
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyExchangeSent (CamelContext context, Exchange exchange, Endpoint endpoint, long timeTaken)
specifier|public
specifier|static
name|void
name|notifyExchangeSent
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|long
name|timeTaken
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|NOTIFY_EVENT
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// do not generate events for an notify event
return|return;
block|}
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreExchangeEvents
argument_list|()
operator|||
name|notifier
operator|.
name|isIgnoreExchangeSentEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createExchangeSentEvent
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|,
name|timeTaken
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextSuspending (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextSuspending
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextSuspendingEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextSuspended (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextSuspended
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextSuspendedEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextResuming (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextResuming
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextResumingEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextResumed (CamelContext context)
specifier|public
specifier|static
name|void
name|notifyCamelContextResumed
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextResumedEvent
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyCamelContextResumeFailed (CamelContext context, Throwable cause)
specifier|public
specifier|static
name|void
name|notifyCamelContextResumeFailed
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|ManagementStrategy
name|management
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|management
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|notifiers
init|=
name|management
operator|.
name|getEventNotifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|notifiers
operator|==
literal|null
operator|||
name|notifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|notifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isIgnoreCamelContextEvents
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|EventFactory
name|factory
init|=
name|management
operator|.
name|getEventFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EventObject
name|event
init|=
name|factory
operator|.
name|createCamelContextResumeFailureEvent
argument_list|(
name|context
argument_list|,
name|cause
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doNotifyEvent
argument_list|(
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doNotifyEvent (EventNotifier notifier, EventObject event)
specifier|private
specifier|static
name|void
name|doNotifyEvent
parameter_list|(
name|EventNotifier
name|notifier
parameter_list|,
name|EventObject
name|event
parameter_list|)
block|{
comment|// only notify if notifier is started
name|boolean
name|started
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|notifier
operator|instanceof
name|StatefulService
condition|)
block|{
name|started
operator|=
operator|(
operator|(
name|StatefulService
operator|)
name|notifier
operator|)
operator|.
name|isStarted
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring notifying event {}. The EventNotifier has not been started yet: {}"
argument_list|,
name|event
argument_list|,
name|notifier
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|notifier
operator|.
name|isEnabled
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Notifier: {} is not enabled for the event: {}"
argument_list|,
name|notifier
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|notifier
operator|.
name|notify
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error notifying event "
operator|+
name|event
operator|+
literal|". This exception will be ignored. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

