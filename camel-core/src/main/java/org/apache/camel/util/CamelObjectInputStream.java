begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_class
DECL|class|CamelObjectInputStream
specifier|public
class|class
name|CamelObjectInputStream
extends|extends
name|ObjectInputStream
block|{
DECL|field|classLoader
specifier|private
specifier|final
name|ClassLoader
name|classLoader
decl_stmt|;
DECL|method|CamelObjectInputStream (InputStream in, CamelContext context)
specifier|public
name|CamelObjectInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|classLoader
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|resolveClass (ObjectStreamClass desc)
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|resolveClass
parameter_list|(
name|ObjectStreamClass
name|desc
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
else|else
block|{
comment|// If the application classloader is not set we just fallback to use old behaivor
return|return
name|super
operator|.
name|resolveClass
argument_list|(
name|desc
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

