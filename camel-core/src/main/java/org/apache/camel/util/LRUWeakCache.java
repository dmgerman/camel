begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A Least Recently Used Cache which uses {@link java.lang.ref.WeakReference}.  *<p/>  * This implementation uses {@link java.lang.ref.WeakReference} for stored values in the cache, to support the JVM  * when it wants to reclaim objects for example during garbage collection. Therefore this implementation does  * not support<b>all</b> the {@link java.util.Map} methods.  *<p/>  * The following methods is<b>only</b> be be used:  *<ul>  *<li>containsKey - To determine if the key is in the cache and refers to a value</li>  *<li>entrySet - To return a set of all the entries (as key/value paris)</li>  *<li>get - To get a value from the cache</li>  *<li>isEmpty - To determine if the cache contains any values</li>  *<li>keySet - To return a set of the current keys which refers to a value</li>  *<li>put - To add a value to the cache</li>  *<li>putAll - To add values to the cache</li>  *<li>remove - To remove a value from the cache by its key</li>  *<li>size - To get the current size</li>  *<li>values - To return a copy of all the value in a list</li>  *</ul>  *<p/>  * The {@link #containsValue(Object)} method should<b>not</b> be used as it's not adjusted to check  * for the existence of a value without catering for the soft references.  *<p/>  * Notice that if the JVM reclaim memory the content of this cache may be garbage collected, without any  * eviction notifications.  *  * @see LRUCache  * @see LRUSoftCache  */
end_comment

begin_class
DECL|class|LRUWeakCache
specifier|public
class|class
name|LRUWeakCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LRUCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|LRUWeakCache (int maximumCacheSize)
specifier|public
name|LRUWeakCache
parameter_list|(
name|int
name|maximumCacheSize
parameter_list|)
block|{
name|super
argument_list|(
name|maximumCacheSize
argument_list|)
expr_stmt|;
block|}
DECL|method|LRUWeakCache (int initialCapacity, int maximumCacheSize)
specifier|public
name|LRUWeakCache
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|int
name|maximumCacheSize
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|maximumCacheSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|put (K key, V value)
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|V
argument_list|>
name|put
init|=
operator|new
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|WeakReference
argument_list|<
name|V
argument_list|>
name|prev
init|=
operator|(
name|WeakReference
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|V
operator|)
name|put
argument_list|)
decl_stmt|;
return|return
name|prev
operator|!=
literal|null
condition|?
name|prev
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (Object o)
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|V
argument_list|>
name|ref
init|=
operator|(
name|WeakReference
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|remove (Object o)
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|V
argument_list|>
name|ref
init|=
operator|(
name|WeakReference
argument_list|<
name|V
argument_list|>
operator|)
name|super
operator|.
name|remove
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
comment|// return a copy of all the active values
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|col
init|=
operator|(
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
operator|)
name|super
operator|.
name|values
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WeakReference
argument_list|<
name|V
argument_list|>
name|ref
range|:
name|col
control|)
block|{
name|V
name|value
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
comment|// only count as a size if there is a value
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|V
name|value
range|:
name|super
operator|.
name|values
argument_list|()
control|)
block|{
name|WeakReference
argument_list|<
name|?
argument_list|>
name|ref
init|=
operator|(
name|WeakReference
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
operator|&&
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (Object o)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// must lookup if the key has a value, as we only regard a key to be contained
comment|// if the value is still there (the JVM can remove the soft reference if it need memory)
return|return
name|get
argument_list|(
name|o
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|original
init|=
name|super
operator|.
name|entrySet
argument_list|()
decl_stmt|;
comment|// must use a copy to avoid concurrent modifications and be able to get/set value using
comment|// the soft reference so the returned set is without the soft reference, and thus is
comment|// use able for the caller to use
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|original
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|original
control|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|view
init|=
operator|new
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|V
name|getValue
parameter_list|()
block|{
name|WeakReference
argument_list|<
name|V
argument_list|>
name|ref
init|=
operator|(
name|WeakReference
argument_list|<
name|V
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|v
parameter_list|)
block|{
name|V
name|put
init|=
operator|(
name|V
operator|)
operator|new
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|WeakReference
argument_list|<
name|V
argument_list|>
name|prev
init|=
operator|(
name|WeakReference
argument_list|<
name|V
argument_list|>
operator|)
name|entry
operator|.
name|setValue
argument_list|(
name|put
argument_list|)
decl_stmt|;
return|return
name|prev
operator|!=
literal|null
condition|?
name|prev
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LRUWeakCache@"
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

