begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract base class for API Component Consumers.  */
end_comment

begin_class
DECL|class|AbstractApiConsumer
specifier|public
specifier|abstract
class|class
name|AbstractApiConsumer
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|<
name|E
parameter_list|>
operator|&
name|ApiName
parameter_list|,
name|T
parameter_list|>
extends|extends
name|ScheduledPollConsumer
block|{
comment|// logger
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// API Endpoint
DECL|field|endpoint
specifier|protected
specifier|final
name|AbstractApiEndpoint
argument_list|<
name|E
argument_list|,
name|T
argument_list|>
name|endpoint
decl_stmt|;
comment|// helpers
DECL|field|propertiesHelper
specifier|protected
specifier|final
name|ApiMethodPropertiesHelper
argument_list|<
name|T
argument_list|>
name|propertiesHelper
decl_stmt|;
DECL|field|methodHelper
specifier|protected
specifier|final
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|methodHelper
decl_stmt|;
comment|// API method to invoke
DECL|field|method
specifier|protected
specifier|final
name|ApiMethod
name|method
decl_stmt|;
comment|// properties used to invoke
DECL|field|endpointProperties
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|endpointProperties
decl_stmt|;
DECL|method|AbstractApiConsumer (AbstractApiEndpoint<E, T> endpoint, Processor processor)
specifier|public
name|AbstractApiConsumer
parameter_list|(
name|AbstractApiEndpoint
argument_list|<
name|E
argument_list|,
name|T
argument_list|>
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
comment|// cache helpers
name|this
operator|.
name|methodHelper
operator|=
name|endpoint
operator|.
name|getMethodHelper
argument_list|()
expr_stmt|;
name|this
operator|.
name|propertiesHelper
operator|=
name|endpoint
operator|.
name|getPropertiesHelper
argument_list|()
expr_stmt|;
comment|// get endpoint properties in a map
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|propertiesHelper
operator|.
name|getEndpointProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpointProperties
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|findMethod
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isGreedy ()
specifier|public
name|boolean
name|isGreedy
parameter_list|()
block|{
comment|// make this consumer not greedy to avoid making too many calls
return|return
literal|false
return|;
block|}
DECL|method|findMethod ()
specifier|private
name|ApiMethod
name|findMethod
parameter_list|()
block|{
name|ApiMethod
name|result
decl_stmt|;
comment|// find one that takes the largest subset of endpoint parameters
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|argNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|argNames
operator|.
name|addAll
argument_list|(
name|propertiesHelper
operator|.
name|getEndpointPropertyNames
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|interceptArgumentNames
argument_list|(
name|argNames
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|argNamesArray
init|=
name|argNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApiMethod
argument_list|>
name|filteredMethods
init|=
name|ApiMethodHelper
operator|.
name|filterMethods
argument_list|(
name|endpoint
operator|.
name|getCandidates
argument_list|()
argument_list|,
name|ApiMethodHelper
operator|.
name|MatchType
operator|.
name|SUPER_SET
argument_list|,
name|argNamesArray
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing properties for %s/%s, need one or more from %s"
argument_list|,
name|endpoint
operator|.
name|getApiName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|methodHelper
operator|.
name|getMissingProperties
argument_list|(
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|argNames
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|filteredMethods
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// single match
name|result
operator|=
name|filteredMethods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|ApiMethodHelper
operator|.
name|getHighestPriorityMethod
argument_list|(
name|filteredMethods
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Using highest priority operation {} from operations {}"
argument_list|,
name|method
argument_list|,
name|filteredMethods
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Intercept argument names used to find consumer method.      * Used to add any custom/hidden method arguments, which MUST be provided in getMethodArguments() override.      * @param argNames argument names.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|interceptArgumentNames (Set<String> argNames)
specifier|protected
name|void
name|interceptArgumentNames
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|argNames
parameter_list|)
block|{
comment|// do nothing by default
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// invoke the consumer method
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
init|=
name|getMethodArguments
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|result
init|=
name|doInvokeMethod
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// process result according to type
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|(
name|result
operator|instanceof
name|Collection
operator|||
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|)
condition|)
block|{
comment|// create an exchange for every element
specifier|final
name|Object
name|array
init|=
name|getResultAsArray
argument_list|(
name|result
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|processResult
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
else|else
block|{
name|processResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
comment|// number of messages polled
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
comment|/**      * Invoke the API method.      * This method can be overridden, for example to synchronize API calls for thread-unsafe proxies.      * Derived class MUST call super.doInvokeMethod() to invoke the API method.      * @param args method arguments from endpoint parameters.      * @return method invocation result.      */
DECL|method|doInvokeMethod (Map<String, Object> args)
specifier|protected
name|Object
name|doInvokeMethod
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
return|return
name|ApiMethodHelper
operator|.
name|invokeMethod
argument_list|(
name|endpoint
operator|.
name|getApiProxy
argument_list|()
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|processResult (Object result)
specifier|private
name|void
name|processResult
parameter_list|(
name|Object
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|doProcessResult
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
comment|// send message to next processor in the route
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// log exception if an exception occurred and was not handled
specifier|final
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Derived classes can do additional result exchange processing, for example, adding custom headers.      * @param resultExchange result as a Camel exchange.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|doProcessResult (Exchange resultExchange)
specifier|protected
name|void
name|doProcessResult
parameter_list|(
name|Exchange
name|resultExchange
parameter_list|)
block|{
comment|// do nothing by default
block|}
DECL|method|getResultAsArray (Object result)
specifier|private
name|Object
name|getResultAsArray
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// no conversion needed
return|return
name|result
return|;
block|}
comment|// must be a Collection
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|result
decl_stmt|;
return|return
name|collection
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Return method arguments to use in doInvokeMethod().      * Derived classes can override it to add custom arguments.      * Overriding method MUST first call super.getMethodArguments() to get endpoint properties.      * @return argument names mapped to argument values      */
DECL|method|getMethodArguments ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMethodArguments
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|arguments
operator|.
name|putAll
argument_list|(
name|endpointProperties
argument_list|)
expr_stmt|;
return|return
name|arguments
return|;
block|}
block|}
end_class

end_unit

