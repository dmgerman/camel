begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.concurrent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A sized {@link ScheduledExecutorService} which will reject executing tasks if the task queue is full.  *<p/>  * The {@link ScheduledThreadPoolExecutor} which is the default implementation of the {@link ScheduledExecutorService}  * has unbounded task queue, which mean you can keep scheduling tasks which may cause the system to run out of memory.  *<p/>  * This class is a wrapped for {@link ScheduledThreadPoolExecutor} to reject executing tasks if an upper limit  * of the task queue has been reached.  */
end_comment

begin_class
DECL|class|SizedScheduledExecutorService
specifier|public
class|class
name|SizedScheduledExecutorService
implements|implements
name|ScheduledExecutorService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SizedScheduledExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|delegate
decl_stmt|;
DECL|field|queueSize
specifier|private
specifier|final
name|long
name|queueSize
decl_stmt|;
comment|/**      * Creates a new sized {@link ScheduledExecutorService} with the given queue size as upper task limit.      *      * @param delegate   the delegate of the actual thread pool implementation      * @param queueSize  the upper queue size, use 0 or negative value for unlimited      */
DECL|method|SizedScheduledExecutorService (ScheduledThreadPoolExecutor delegate, long queueSize)
specifier|public
name|SizedScheduledExecutorService
parameter_list|(
name|ScheduledThreadPoolExecutor
name|delegate
parameter_list|,
name|long
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|queueSize
operator|=
name|queueSize
expr_stmt|;
block|}
comment|/**      * Gets the wrapped {@link ScheduledThreadPoolExecutor}      */
DECL|method|getScheduledThreadPoolExecutor ()
specifier|public
name|ScheduledThreadPoolExecutor
name|getScheduledThreadPoolExecutor
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|schedule (Callable<V> task, long delay, TimeUnit timeUnit)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|ScheduledFuture
argument_list|<
name|V
argument_list|>
name|schedule
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|task
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|schedule (Runnable task, long delay, TimeUnit timeUnit)
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|schedule
parameter_list|(
name|Runnable
name|task
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|scheduleAtFixedRate (Runnable task, long initialDelay, long period, TimeUnit timeUnit)
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleAtFixedRate
parameter_list|(
name|Runnable
name|task
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|period
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|initialDelay
argument_list|,
name|period
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|scheduleWithFixedDelay (Runnable task, long initialDelay, long period, TimeUnit timeUnit)
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|task
parameter_list|,
name|long
name|initialDelay
parameter_list|,
name|long
name|period
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|task
argument_list|,
name|initialDelay
argument_list|,
name|period
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|awaitTermination (long timeout, TimeUnit timeUnit)
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|delegate
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
DECL|method|getActiveCount ()
specifier|public
name|int
name|getActiveCount
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getActiveCount
argument_list|()
return|;
block|}
DECL|method|getCompletedTaskCount ()
specifier|public
name|long
name|getCompletedTaskCount
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCompletedTaskCount
argument_list|()
return|;
block|}
DECL|method|getCorePoolSize ()
specifier|public
name|int
name|getCorePoolSize
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCorePoolSize
argument_list|()
return|;
block|}
DECL|method|getKeepAliveTime (TimeUnit timeUnit)
specifier|public
name|long
name|getKeepAliveTime
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getKeepAliveTime
argument_list|(
name|timeUnit
argument_list|)
return|;
block|}
DECL|method|getLargestPoolSize ()
specifier|public
name|int
name|getLargestPoolSize
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getLargestPoolSize
argument_list|()
return|;
block|}
DECL|method|getMaximumPoolSize ()
specifier|public
name|int
name|getMaximumPoolSize
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getMaximumPoolSize
argument_list|()
return|;
block|}
DECL|method|getPoolSize ()
specifier|public
name|int
name|getPoolSize
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPoolSize
argument_list|()
return|;
block|}
DECL|method|getRejectedExecutionHandler ()
specifier|public
name|RejectedExecutionHandler
name|getRejectedExecutionHandler
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getRejectedExecutionHandler
argument_list|()
return|;
block|}
DECL|method|getTaskCount ()
specifier|public
name|long
name|getTaskCount
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getTaskCount
argument_list|()
return|;
block|}
DECL|method|getThreadFactory ()
specifier|public
name|ThreadFactory
name|getThreadFactory
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getThreadFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|invokeAll (Collection<? extends Callable<T>> tasks)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|invokeAll (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit timeUnit)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|invokeAny
argument_list|(
name|tasks
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit timeUnit)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|invokeAny
argument_list|(
name|tasks
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isShutdown
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isTerminated ()
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isTerminated
argument_list|()
return|;
block|}
DECL|method|isTerminating ()
specifier|public
name|boolean
name|isTerminating
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isTerminating
argument_list|()
return|;
block|}
DECL|method|prestartAllCoreThreads ()
specifier|public
name|int
name|prestartAllCoreThreads
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|prestartAllCoreThreads
argument_list|()
return|;
block|}
DECL|method|prestartCoreThread ()
specifier|public
name|boolean
name|prestartCoreThread
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|prestartCoreThread
argument_list|()
return|;
block|}
DECL|method|purge ()
specifier|public
name|void
name|purge
parameter_list|()
block|{
name|delegate
operator|.
name|purge
argument_list|()
expr_stmt|;
block|}
DECL|method|setCorePoolSize (int corePoolSize)
specifier|public
name|void
name|setCorePoolSize
parameter_list|(
name|int
name|corePoolSize
parameter_list|)
block|{
name|delegate
operator|.
name|setCorePoolSize
argument_list|(
name|corePoolSize
argument_list|)
expr_stmt|;
block|}
DECL|method|setKeepAliveTime (long keepAliveTime, TimeUnit timeUnit)
specifier|public
name|void
name|setKeepAliveTime
parameter_list|(
name|long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|delegate
operator|.
name|setKeepAliveTime
argument_list|(
name|keepAliveTime
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaximumPoolSize (int maximumPoolSize)
specifier|public
name|void
name|setMaximumPoolSize
parameter_list|(
name|int
name|maximumPoolSize
parameter_list|)
block|{
name|delegate
operator|.
name|setMaximumPoolSize
argument_list|(
name|maximumPoolSize
argument_list|)
expr_stmt|;
block|}
DECL|method|setRejectedExecutionHandler (RejectedExecutionHandler rejectedExecutionHandler)
specifier|public
name|void
name|setRejectedExecutionHandler
parameter_list|(
name|RejectedExecutionHandler
name|rejectedExecutionHandler
parameter_list|)
block|{
name|delegate
operator|.
name|setRejectedExecutionHandler
argument_list|(
name|rejectedExecutionHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|setThreadFactory (ThreadFactory threadFactory)
specifier|public
name|void
name|setThreadFactory
parameter_list|(
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|delegate
operator|.
name|setThreadFactory
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|delegate
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdownNow ()
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|shutdownNow
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Callable<T> task)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task)
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|submit
argument_list|(
name|task
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task, T result)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|,
name|T
name|result
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
return|return
name|delegate
operator|.
name|submit
argument_list|(
name|task
argument_list|,
name|result
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|execute (Runnable task)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
if|if
condition|(
name|canScheduleOrExecute
argument_list|()
condition|)
block|{
name|delegate
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Task rejected due queue size limit reached"
argument_list|)
throw|;
block|}
block|}
DECL|method|allowCoreThreadTimeOut (boolean value)
specifier|public
name|void
name|allowCoreThreadTimeOut
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|delegate
operator|.
name|allowCoreThreadTimeOut
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|allowsCoreThreadTimeOut ()
specifier|public
name|boolean
name|allowsCoreThreadTimeOut
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|allowsCoreThreadTimeOut
argument_list|()
return|;
block|}
comment|/**      * Can the task be scheduled or executed?      *      * @return<tt>true</tt> to accept,<tt>false</tt> to not accept      */
DECL|method|canScheduleOrExecute ()
specifier|protected
name|boolean
name|canScheduleOrExecute
parameter_list|()
block|{
if|if
condition|(
name|queueSize
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|size
init|=
name|delegate
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|answer
init|=
name|size
operator|<
name|queueSize
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"canScheduleOrExecute {}< {} -> {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|size
block|,
name|queueSize
block|,
name|answer
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// the thread factory often have more precise details what the thread pool is used for
if|if
condition|(
name|delegate
operator|.
name|getThreadFactory
argument_list|()
operator|instanceof
name|CamelThreadFactory
condition|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|CamelThreadFactory
operator|)
name|delegate
operator|.
name|getThreadFactory
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|"["
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

