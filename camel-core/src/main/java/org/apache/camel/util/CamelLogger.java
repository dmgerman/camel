begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MarkerFactory
import|;
end_import

begin_comment
comment|/**  * A logger which logs to a slf4j {@link Logger}.  *<p/>  * The name<tt>CamelLogger</tt> has been chosen to avoid any name clash with log kits  * which has a<tt>Logger</tt> class.  */
end_comment

begin_class
DECL|class|CamelLogger
specifier|public
class|class
name|CamelLogger
block|{
DECL|field|log
specifier|private
name|Logger
name|log
decl_stmt|;
DECL|field|level
specifier|private
name|LoggingLevel
name|level
decl_stmt|;
DECL|field|marker
specifier|private
name|Marker
name|marker
decl_stmt|;
DECL|method|CamelLogger ()
specifier|public
name|CamelLogger
parameter_list|()
block|{
name|this
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelLogger
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelLogger (Logger log)
specifier|public
name|CamelLogger
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|this
argument_list|(
name|log
argument_list|,
name|LoggingLevel
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelLogger (Logger log, LoggingLevel level)
specifier|public
name|CamelLogger
parameter_list|(
name|Logger
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|)
block|{
name|this
argument_list|(
name|log
argument_list|,
name|level
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelLogger (Logger log, LoggingLevel level, String marker)
specifier|public
name|CamelLogger
parameter_list|(
name|Logger
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|,
name|String
name|marker
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|setMarker
argument_list|(
name|marker
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelLogger (String logName)
specifier|public
name|CamelLogger
parameter_list|(
name|String
name|logName
parameter_list|)
block|{
name|this
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelLogger (String logName, LoggingLevel level)
specifier|public
name|CamelLogger
parameter_list|(
name|String
name|logName
parameter_list|,
name|LoggingLevel
name|level
parameter_list|)
block|{
name|this
argument_list|(
name|logName
argument_list|,
name|level
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelLogger (String logName, LoggingLevel level, String marker)
specifier|public
name|CamelLogger
parameter_list|(
name|String
name|logName
parameter_list|,
name|LoggingLevel
name|level
parameter_list|,
name|String
name|marker
parameter_list|)
block|{
name|this
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
argument_list|,
name|level
argument_list|,
name|marker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Logger["
operator|+
name|log
operator|+
literal|"]"
return|;
block|}
DECL|method|log (String message, LoggingLevel loggingLevel)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|,
name|LoggingLevel
name|loggingLevel
parameter_list|)
block|{
name|LoggingLevel
name|oldLogLevel
init|=
name|getLevel
argument_list|()
decl_stmt|;
name|setLevel
argument_list|(
name|loggingLevel
argument_list|)
expr_stmt|;
name|log
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|setLevel
argument_list|(
name|oldLogLevel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs the message<b>with</b> checking the {@link #shouldLog()} method first.      *      * @param message the message to log, if {@link #shouldLog()} returned<tt>true</tt>      */
DECL|method|log (String message)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|shouldLog
argument_list|(
name|log
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|log
argument_list|,
name|level
argument_list|,
name|marker
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Logs the message<b>without</b> checking the {@link #shouldLog()} method first.      *       * @param message the message to log      */
DECL|method|doLog (String message)
specifier|public
name|void
name|doLog
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|log
argument_list|(
name|log
argument_list|,
name|level
argument_list|,
name|marker
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|log (String message, Throwable exception, LoggingLevel loggingLevel)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|,
name|LoggingLevel
name|loggingLevel
parameter_list|)
block|{
name|log
argument_list|(
name|log
argument_list|,
name|loggingLevel
argument_list|,
name|marker
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
DECL|method|log (String message, Throwable exception)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
if|if
condition|(
name|shouldLog
argument_list|(
name|log
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|log
argument_list|,
name|level
argument_list|,
name|marker
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLog ()
specifier|public
name|Logger
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
DECL|method|setLog (Logger log)
specifier|public
name|void
name|setLog
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|getLevel ()
specifier|public
name|LoggingLevel
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
DECL|method|setLevel (LoggingLevel level)
specifier|public
name|void
name|setLevel
parameter_list|(
name|LoggingLevel
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Log level may not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
DECL|method|setLogName (String logName)
specifier|public
name|void
name|setLogName
parameter_list|(
name|String
name|logName
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
expr_stmt|;
block|}
DECL|method|getMarker ()
specifier|public
name|Marker
name|getMarker
parameter_list|()
block|{
return|return
name|marker
return|;
block|}
DECL|method|setMarker (Marker marker)
specifier|public
name|void
name|setMarker
parameter_list|(
name|Marker
name|marker
parameter_list|)
block|{
name|this
operator|.
name|marker
operator|=
name|marker
expr_stmt|;
block|}
DECL|method|setMarker (String marker)
specifier|public
name|void
name|setMarker
parameter_list|(
name|String
name|marker
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|marker
argument_list|)
condition|)
block|{
name|this
operator|.
name|marker
operator|=
name|MarkerFactory
operator|.
name|getMarker
argument_list|(
name|marker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|marker
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|log (Logger log, LoggingLevel level, String message)
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|DEBUG
case|:
name|log
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|log
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRACE
case|:
name|log
operator|.
name|trace
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
DECL|method|log (Logger log, LoggingLevel level, Marker marker, String message)
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|,
name|Marker
name|marker
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|marker
operator|==
literal|null
condition|)
block|{
name|log
argument_list|(
name|log
argument_list|,
name|level
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// marker must be provided
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|DEBUG
case|:
name|log
operator|.
name|debug
argument_list|(
name|marker
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|log
operator|.
name|error
argument_list|(
name|marker
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|log
operator|.
name|info
argument_list|(
name|marker
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRACE
case|:
name|log
operator|.
name|trace
argument_list|(
name|marker
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|log
operator|.
name|warn
argument_list|(
name|marker
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
DECL|method|log (Logger log, LoggingLevel level, String message, Throwable th)
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|DEBUG
case|:
name|log
operator|.
name|debug
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|log
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRACE
case|:
name|log
operator|.
name|trace
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|log
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
DECL|method|log (Logger log, LoggingLevel level, Marker marker, String message, Throwable th)
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|Logger
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|,
name|Marker
name|marker
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{
if|if
condition|(
name|marker
operator|==
literal|null
condition|)
block|{
name|log
argument_list|(
name|log
argument_list|,
name|level
argument_list|,
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// marker must be provided
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|DEBUG
case|:
name|log
operator|.
name|debug
argument_list|(
name|marker
argument_list|,
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|ERROR
case|:
name|log
operator|.
name|error
argument_list|(
name|marker
argument_list|,
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|log
operator|.
name|info
argument_list|(
name|marker
argument_list|,
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRACE
case|:
name|log
operator|.
name|trace
argument_list|(
name|marker
argument_list|,
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
case|case
name|WARN
case|:
name|log
operator|.
name|warn
argument_list|(
name|marker
argument_list|,
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
DECL|method|shouldLog ()
specifier|public
name|boolean
name|shouldLog
parameter_list|()
block|{
return|return
name|CamelLogger
operator|.
name|shouldLog
argument_list|(
name|log
argument_list|,
name|level
argument_list|)
return|;
block|}
DECL|method|shouldLog (Logger log, LoggingLevel level)
specifier|public
specifier|static
name|boolean
name|shouldLog
parameter_list|(
name|Logger
name|log
parameter_list|,
name|LoggingLevel
name|level
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|DEBUG
case|:
return|return
name|log
operator|.
name|isDebugEnabled
argument_list|()
return|;
case|case
name|ERROR
case|:
return|return
name|log
operator|.
name|isErrorEnabled
argument_list|()
return|;
case|case
name|INFO
case|:
return|return
name|log
operator|.
name|isInfoEnabled
argument_list|()
return|;
case|case
name|TRACE
case|:
return|return
name|log
operator|.
name|isTraceEnabled
argument_list|()
return|;
case|case
name|WARN
case|:
return|return
name|log
operator|.
name|isWarnEnabled
argument_list|()
return|;
default|default:
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

