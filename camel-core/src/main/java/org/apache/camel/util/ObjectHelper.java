begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Ordered
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WrappedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A number of useful helper methods for working with Objects  *  * @version   */
end_comment

begin_class
DECL|class|ObjectHelper
specifier|public
specifier|final
class|class
name|ObjectHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObjectHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DELIMITER
init|=
literal|","
decl_stmt|;
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|ObjectHelper ()
specifier|private
name|ObjectHelper
parameter_list|()
block|{     }
comment|/**      * A helper method for comparing objects for equality in which it uses type coercion to coerce      * types between the left and right values. This allows you test for equality for example with      * a String and Integer type as Camel will be able to coerce the types.      */
DECL|method|typeCoerceEquals (TypeConverter converter, Object leftValue, Object rightValue)
specifier|public
specifier|static
name|boolean
name|typeCoerceEquals
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Object
name|leftValue
parameter_list|,
name|Object
name|rightValue
parameter_list|)
block|{
comment|// sanity check
if|if
condition|(
name|leftValue
operator|==
literal|null
operator|&&
name|rightValue
operator|==
literal|null
condition|)
block|{
comment|// they are equal
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|leftValue
operator|==
literal|null
operator|||
name|rightValue
operator|==
literal|null
condition|)
block|{
comment|// only one of them is null so they are not equal
return|return
literal|false
return|;
block|}
comment|// try without type coerce
name|boolean
name|answer
init|=
name|equal
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// are they same type, if so return false as the equals returned false
if|if
condition|(
name|leftValue
operator|.
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|rightValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// convert left to right
name|Object
name|value
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|rightValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
name|answer
operator|=
name|equal
argument_list|(
name|value
argument_list|,
name|rightValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// convert right to left
name|value
operator|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|leftValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|rightValue
argument_list|)
expr_stmt|;
name|answer
operator|=
name|equal
argument_list|(
name|leftValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * A helper method for comparing objects for inequality in which it uses type coercion to coerce      * types between the left and right values.  This allows you test for inequality for example with      * a String and Integer type as Camel will be able to coerce the types.      */
DECL|method|typeCoerceNotEquals (TypeConverter converter, Object leftValue, Object rightValue)
specifier|public
specifier|static
name|boolean
name|typeCoerceNotEquals
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Object
name|leftValue
parameter_list|,
name|Object
name|rightValue
parameter_list|)
block|{
return|return
operator|!
name|typeCoerceEquals
argument_list|(
name|converter
argument_list|,
name|leftValue
argument_list|,
name|rightValue
argument_list|)
return|;
block|}
comment|/**      * A helper method for comparing objects ordering in which it uses type coercion to coerce      * types between the left and right values.  This allows you test for ordering for example with      * a String and Integer type as Camel will be able to coerce the types.      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|typeCoerceCompare (TypeConverter converter, Object leftValue, Object rightValue)
specifier|public
specifier|static
name|int
name|typeCoerceCompare
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Object
name|leftValue
parameter_list|,
name|Object
name|rightValue
parameter_list|)
block|{
comment|// if both values is numeric then compare using numeric
name|Long
name|leftNum
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
name|Long
name|rightNum
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|rightValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftNum
operator|!=
literal|null
operator|&&
name|rightNum
operator|!=
literal|null
condition|)
block|{
return|return
name|leftNum
operator|.
name|compareTo
argument_list|(
name|rightNum
argument_list|)
return|;
block|}
comment|// also try with floating point numbers
name|Double
name|leftDouble
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
name|Double
name|rightDouble
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|rightValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftDouble
operator|!=
literal|null
operator|&&
name|rightDouble
operator|!=
literal|null
condition|)
block|{
return|return
name|leftDouble
operator|.
name|compareTo
argument_list|(
name|rightDouble
argument_list|)
return|;
block|}
comment|// prefer to NOT coerce to String so use the type which is not String
comment|// for example if we are comparing String vs Integer then prefer to coerce to Integer
comment|// as all types can be converted to String which does not work well for comparison
comment|// as eg "10"< 6 would return true, where as 10< 6 will return false.
comment|// if they are both String then it doesn't matter
if|if
condition|(
name|rightValue
operator|instanceof
name|String
operator|&&
operator|(
operator|!
operator|(
name|leftValue
operator|instanceof
name|String
operator|)
operator|)
condition|)
block|{
comment|// if right is String and left is not then flip order (remember to * -1 the result then)
return|return
name|typeCoerceCompare
argument_list|(
name|converter
argument_list|,
name|rightValue
argument_list|,
name|leftValue
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
comment|// prefer to coerce to the right hand side at first
if|if
condition|(
name|rightValue
operator|instanceof
name|Comparable
condition|)
block|{
name|Object
name|value
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|rightValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|rightValue
operator|)
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
block|}
comment|// then fallback to the left hand side
if|if
condition|(
name|leftValue
operator|instanceof
name|Comparable
condition|)
block|{
name|Object
name|value
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|leftValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|rightValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|leftValue
operator|)
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|// use regular compare
return|return
name|compare
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|)
return|;
block|}
comment|/**      * A helper method for comparing objects for equality while handling nulls      */
DECL|method|equal (Object a, Object b)
specifier|public
specifier|static
name|boolean
name|equal
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
operator|&&
name|b
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|equalByteArray
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|b
argument_list|)
return|;
block|}
return|return
name|a
operator|!=
literal|null
operator|&&
name|b
operator|!=
literal|null
operator|&&
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**      * A helper method for comparing byte arrays for equality while handling      * nulls      */
DECL|method|equalByteArray (byte[] a, byte[] b)
specifier|public
specifier|static
name|boolean
name|equalByteArray
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// loop and compare each byte
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|b
operator|!=
literal|null
operator|&&
name|a
operator|.
name|length
operator|==
name|b
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|a
index|[
name|i
index|]
operator|!=
name|b
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// all bytes are equal
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if the given object is equal to any of the expected value      */
DECL|method|isEqualToAny (Object object, Object... values)
specifier|public
specifier|static
name|boolean
name|isEqualToAny
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|equal
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * A helper method for performing an ordered comparison on the objects      * handling nulls and objects which do not handle sorting gracefully      */
DECL|method|compare (Object a, Object b)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * A helper method for performing an ordered comparison on the objects      * handling nulls and objects which do not handle sorting gracefully      *      * @param a  the first object      * @param b  the second object      * @param ignoreCase  ignore case for string comparison      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|compare (Object a, Object b, boolean ignoreCase)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Ordered
operator|&&
name|b
operator|instanceof
name|Ordered
condition|)
block|{
return|return
operator|(
operator|(
name|Ordered
operator|)
name|a
operator|)
operator|.
name|getOrder
argument_list|()
operator|-
operator|(
operator|(
name|Ordered
operator|)
name|b
operator|)
operator|.
name|getOrder
argument_list|()
return|;
block|}
if|if
condition|(
name|ignoreCase
operator|&&
name|a
operator|instanceof
name|String
operator|&&
name|b
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|a
operator|)
operator|.
name|compareToIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|b
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Comparable
condition|)
block|{
name|Comparable
name|comparable
init|=
operator|(
name|Comparable
operator|)
name|a
decl_stmt|;
return|return
name|comparable
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
name|int
name|answer
init|=
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
name|answer
operator|=
name|a
operator|.
name|hashCode
argument_list|()
operator|-
name|b
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|toBoolean (Object value)
specifier|public
specifier|static
name|Boolean
name|toBoolean
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
operator|>
literal|0
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Asserts whether the value is<b>not</b><tt>null</tt>      *      * @param value  the value to test      * @param name   the key that resolved the value      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notNull (Object value, String name)
specifier|public
specifier|static
name|void
name|notNull
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Asserts whether the value is<b>not</b><tt>null</tt>      *      * @param value  the value to test      * @param on     additional description to indicate where this problem occurred (appended as toString())      * @param name   the key that resolved the value      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notNull (Object value, String name, Object on)
specifier|public
specifier|static
name|void
name|notNull
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|on
parameter_list|)
block|{
if|if
condition|(
name|on
operator|==
literal|null
condition|)
block|{
name|notNull
argument_list|(
name|value
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified on: "
operator|+
name|on
argument_list|)
throw|;
block|}
block|}
comment|/**      * Asserts whether the string is<b>not</b> empty.      *      * @param value  the string to test      * @param name   the key that resolved the value      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notEmpty (String value, String name)
specifier|public
specifier|static
name|void
name|notEmpty
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified and not empty"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Asserts whether the string is<b>not</b> empty.      *      * @param value  the string to test      * @param on     additional description to indicate where this problem occurred (appended as toString())      * @param name   the key that resolved the value      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notEmpty (String value, String name, Object on)
specifier|public
specifier|static
name|void
name|notEmpty
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|on
parameter_list|)
block|{
if|if
condition|(
name|on
operator|==
literal|null
condition|)
block|{
name|notNull
argument_list|(
name|value
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified and not empty on: "
operator|+
name|on
argument_list|)
throw|;
block|}
block|}
comment|/**      * Tests whether the value is<tt>null</tt> or an empty string.      *      * @param value  the value, if its a String it will be tested for text length as well      * @return true if empty      */
DECL|method|isEmpty (Object value)
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|!
name|isNotEmpty
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Tests whether the value is<b>not</b><tt>null</tt> or an empty string.      *      * @param value  the value, if its a String it will be tested for text length as well      * @return true if<b>not</b> empty      */
DECL|method|isNotEmpty (Object value)
specifier|public
specifier|static
name|boolean
name|isNotEmpty
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|text
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
return|return
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|splitOnCharacter (String value, String needle, int count)
specifier|public
specifier|static
name|String
index|[]
name|splitOnCharacter
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|needle
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|String
name|rc
index|[]
init|=
operator|new
name|String
index|[
name|count
index|]
decl_stmt|;
name|rc
index|[
literal|0
index|]
operator|=
name|value
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|v
init|=
name|rc
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|int
name|p
init|=
name|v
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
return|return
name|rc
return|;
block|}
name|rc
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|rc
index|[
name|i
index|]
operator|=
name|v
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Removes any starting characters on the given text which match the given      * character      *      * @param text the string      * @param ch the initial characters to remove      * @return either the original string or the new substring      */
DECL|method|removeStartingCharacters (String text, char ch)
specifier|public
specifier|static
name|String
name|removeStartingCharacters
parameter_list|(
name|String
name|text
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|text
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
name|ch
condition|)
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
return|return
name|text
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
return|;
block|}
return|return
name|text
return|;
block|}
DECL|method|capitalize (String text)
specifier|public
specifier|static
name|String
name|capitalize
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|text
return|;
block|}
name|String
name|answer
init|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|1
condition|)
block|{
name|answer
operator|+=
name|text
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|after (String text, String after)
specifier|public
specifier|static
name|String
name|after
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|after
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
name|after
argument_list|)
operator|+
name|after
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|before (String text, String before)
specifier|public
specifier|static
name|String
name|before
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|before
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
name|before
argument_list|)
argument_list|)
return|;
block|}
DECL|method|between (String text, String after, String before)
specifier|public
specifier|static
name|String
name|between
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|,
name|String
name|before
parameter_list|)
block|{
name|text
operator|=
name|after
argument_list|(
name|text
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|before
argument_list|(
name|text
argument_list|,
name|before
argument_list|)
return|;
block|}
comment|/**      * Returns true if the collection contains the specified value      */
DECL|method|contains (Object collectionOrArray, Object value)
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|Object
name|collectionOrArray
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|collectionOrArray
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|collectionOrArray
decl_stmt|;
return|return
name|collection
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|collectionOrArray
operator|instanceof
name|String
operator|&&
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|str
init|=
operator|(
name|String
operator|)
name|collectionOrArray
decl_stmt|;
name|String
name|subStr
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
return|return
name|str
operator|.
name|contains
argument_list|(
name|subStr
argument_list|)
return|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter
init|=
name|createIterator
argument_list|(
name|collectionOrArray
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|equal
argument_list|(
name|value
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Creates an iterator over the value if the value is a collection, an      * Object[], a String with values separated by comma,      * or a primitive type array; otherwise to simplify the caller's code,      * we just create a singleton collection iterator over a single value      *<p/>      * Will default use comma for String separating String values.      * This method does<b>not</b> allow empty values      *      * @param value  the value      * @return the iterator      */
DECL|method|createIterator (Object value)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Object
argument_list|>
name|createIterator
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|createIterator
argument_list|(
name|value
argument_list|,
name|DEFAULT_DELIMITER
argument_list|)
return|;
block|}
comment|/**      * Creates an iterator over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *<p/>      * This method does<b>not</b> allow empty values      *      * @param value      the value      * @param delimiter  delimiter for separating String values      * @return the iterator      */
DECL|method|createIterator (Object value, String delimiter)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Object
argument_list|>
name|createIterator
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
return|return
name|createIterator
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Creates an iterator over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *      * @param value             the value      * @param delimiter         delimiter for separating String values      * @param allowEmptyValues  whether to allow empty values      * @return the iterator      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createIterator (Object value, String delimiter, final boolean allowEmptyValues)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Object
argument_list|>
name|createIterator
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
specifier|final
name|boolean
name|allowEmptyValues
parameter_list|)
block|{
comment|// if its a message than we want to iterate its body
if|if
condition|(
name|value
operator|instanceof
name|Message
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|Message
operator|)
name|value
operator|)
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterator
condition|)
block|{
return|return
operator|(
name|Iterator
argument_list|<
name|Object
argument_list|>
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
condition|)
block|{
return|return
operator|(
operator|(
name|Iterable
argument_list|<
name|Object
argument_list|>
operator|)
name|value
operator|)
operator|.
name|iterator
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// TODO we should handle primitive array types?
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|NodeList
condition|)
block|{
comment|// lets iterate through DOM results after performing XPaths
specifier|final
name|NodeList
name|nodeList
init|=
operator|(
name|NodeList
operator|)
name|value
decl_stmt|;
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
operator|new
name|Iterator
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|idx
operator|+
literal|1
operator|)
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|Node
name|next
parameter_list|()
block|{
name|idx
operator|++
expr_stmt|;
return|return
name|nodeList
operator|.
name|item
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
specifier|final
name|String
name|s
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
comment|// this code is optimized to only use a Scanner if needed, eg there is a delimiter
if|if
condition|(
name|delimiter
operator|!=
literal|null
operator|&&
name|s
operator|.
name|contains
argument_list|(
name|delimiter
argument_list|)
condition|)
block|{
comment|// use a scanner if it contains the delimiter
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEFAULT_DELIMITER
operator|.
name|equals
argument_list|(
name|delimiter
argument_list|)
condition|)
block|{
comment|// we use the default delimiter which is a comma, then cater for bean expressions with OGNL
comment|// which may have balanced parentheses pairs as well.
comment|// if the value contains parentheses we need to balance those, to avoid iterating
comment|// in the middle of parentheses pair, so use this regular expression (a bit hard to read)
comment|// the regexp will split by comma, but honor parentheses pair that may include commas
comment|// as well, eg if value = "bean=foo?method=killer(a,b),bean=bar?method=great(a,b)"
comment|// then the regexp will split that into two:
comment|// -> bean=foo?method=killer(a,b)
comment|// -> bean=bar?method=great(a,b)
comment|// http://stackoverflow.com/questions/1516090/splitting-a-title-into-separate-parts
name|delimiter
operator|=
literal|",(?!(?:[^\\(,]|[^\\)],[^\\)])+\\))"
expr_stmt|;
block|}
name|scanner
operator|.
name|useDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
name|scanner
argument_list|)
return|;
block|}
else|else
block|{
comment|// use a plain iterator that returns the value as is as there are only a single value
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|+
literal|1
operator|==
literal|0
operator|&&
operator|(
name|allowEmptyValues
operator|||
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|s
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|next
parameter_list|()
block|{
name|idx
operator|++
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the predicate matching boolean on a {@link List} result set where      * if the first element is a boolean its value is used otherwise this method      * returns true if the collection is not empty      *      * @return<tt>true</tt> if the first element is a boolean and its value      *         is true or if the list is non empty      */
DECL|method|matches (List<?> list)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
else|else
block|{
comment|// lets assume non-empty results are true
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * A helper method to access a system property, catching any security exceptions      *      * @param name         the name of the system property required      * @param defaultValue the default value to use if the property is not      *                     available or a security exception prevents access      * @return the system property value or the default value if the property is      *         not available or security does not allow its access      */
DECL|method|getSystemProperty (String name, String defaultValue)
specifier|public
specifier|static
name|String
name|getSystemProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
try|try
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught security exception accessing system property: "
operator|+
name|name
operator|+
literal|". Will use default value: "
operator|+
name|defaultValue
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultValue
return|;
block|}
block|}
comment|/**      * A helper method to access a boolean system property, catching any      * security exceptions      *      * @param name         the name of the system property required      * @param defaultValue the default value to use if the property is not      *                     available or a security exception prevents access      * @return the boolean representation of the system property value or the      *         default value if the property is not available or security does      *         not allow its access      */
DECL|method|getSystemProperty (String name, Boolean defaultValue)
specifier|public
specifier|static
name|boolean
name|getSystemProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|result
init|=
name|getSystemProperty
argument_list|(
name|name
argument_list|,
name|defaultValue
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * A helper method to access a camel context properties with a prefix      *      * @param prefix       the prefix      * @param camelContext the camel context      * @return the properties which holds the camel context properties with the prefix,      *         and the key omit the prefix part      */
DECL|method|getCamelPropertiesWithPrefix (String prefix, CamelContext camelContext)
specifier|public
specifier|static
name|Properties
name|getCamelPropertiesWithPrefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|camelProperties
init|=
name|camelContext
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|camelProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Returns the type name of the given type or null if the type variable is      * null      */
DECL|method|name (Class<?> type)
specifier|public
specifier|static
name|String
name|name
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|!=
literal|null
condition|?
name|type
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Returns the type name of the given value      */
DECL|method|className (Object value)
specifier|public
specifier|static
name|String
name|className
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|name
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getClass
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns the canonical type name of the given value      */
DECL|method|classCanonicalName (Object value)
specifier|public
specifier|static
name|String
name|classCanonicalName
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Attempts to load the given class name using the thread context class      * loader or the class loader used to load this class      *      * @param name the name of the class to load      * @return the class or<tt>null</tt> if it could not be loaded      */
DECL|method|loadClass (String name)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|loadClass
argument_list|(
name|name
argument_list|,
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Attempts to load the given class name using the thread context class      * loader or the given class loader      *      * @param name the name of the class to load      * @param loader the class loader to use after the thread context class loader      * @return the class or<tt>null</tt> if it could not be loaded      */
DECL|method|loadClass (String name, ClassLoader loader)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
return|return
name|loadClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Attempts to load the given class name using the thread context class      * loader or the given class loader      *      * @param name the name of the class to load      * @param loader the class loader to use after the thread context class loader      * @param needToWarn when<tt>true</tt> logs a warning when a class with the given name could not be loaded      * @return the class or<tt>null</tt> if it could not be loaded      */
DECL|method|loadClass (String name, ClassLoader loader, boolean needToWarn)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|boolean
name|needToWarn
parameter_list|)
block|{
comment|// must clean the name so its pure java name, eg removing \n or whatever people can do in the Spring XML
name|name
operator|=
name|normalizeClassName
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// Try simple type first
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|loadSimpleType
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// try context class loader
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// then the provided loader
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// and fallback to the loader the loaded the ObjectHelper class
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|needToWarn
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot find class: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clazz
return|;
block|}
comment|/**      * Load a simple type      *      * @param name the name of the class to load      * @return the class or<tt>null</tt> if it could not be loaded      */
DECL|method|loadSimpleType (String name)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadSimpleType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for byte[] as its common to use
if|if
condition|(
literal|"java.lang.byte[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"byte[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|byte
index|[]
operator|.
name|class
return|;
comment|// and these is common as well
block|}
elseif|else
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"String"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|boolean
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Integer"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Integer"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|int
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|long
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Short
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|short
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Byte
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|byte
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|float
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|double
operator|.
name|class
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Loads the given class with the provided classloader (may be null).      * Will ignore any class not found and return null.      *      * @param name    the name of the class to load      * @param loader  a provided loader (may be null)      * @return the class, or null if it could not be loaded      */
DECL|method|doLoadClass (String name, ClassLoader loader)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|doLoadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Loading class: {} using classloader: {}"
argument_list|,
name|name
argument_list|,
name|loader
argument_list|)
expr_stmt|;
return|return
name|loader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot load class: "
operator|+
name|name
operator|+
literal|" using classloader: "
operator|+
name|loader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Attempts to load the given resource as a stream using the thread context      * class loader or the class loader used to load this class      *      * @param name the name of the resource to load      * @return the stream or null if it could not be loaded      */
DECL|method|loadResourceAsStream (String name)
specifier|public
specifier|static
name|InputStream
name|loadResourceAsStream
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|String
name|resolvedName
init|=
name|resolveUriPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
name|contextClassLoader
operator|.
name|getResourceAsStream
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
comment|/**      * Attempts to load the given resource as a stream using the thread context      * class loader or the class loader used to load this class      *      * @param name the name of the resource to load      * @return the stream or null if it could not be loaded      */
DECL|method|loadResourceAsURL (String name)
specifier|public
specifier|static
name|URL
name|loadResourceAsURL
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
name|String
name|resolvedName
init|=
name|resolveUriPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|contextClassLoader
operator|.
name|getResource
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
comment|/**      * Attempts to load the given resources from the given package name using the thread context      * class loader or the class loader used to load this class      *      * @param packageName the name of the package to load its resources      * @return the URLs for the resources or null if it could not be loaded      */
DECL|method|loadResourcesAsURL (String packageName)
specifier|public
specifier|static
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|loadResourcesAsURL
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|url
init|=
literal|null
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|url
operator|=
name|contextClassLoader
operator|.
name|getResources
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|url
operator|=
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|url
return|;
block|}
comment|/**      * Helper operation used to remove relative path notation from       * resources.  Most critical for resources on the Classpath      * as resource loaders will not resolve the relative paths correctly.      *       * @param name the name of the resource to load      * @return the modified or unmodified string if there were no changes      */
DECL|method|resolveUriPath (String name)
specifier|private
specifier|static
name|String
name|resolveUriPath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|answer
init|=
name|name
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|indexOf
argument_list|(
literal|"//"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"//"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|.
name|indexOf
argument_list|(
literal|"../"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"[A-Za-z0-9]*/\\.\\./"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|.
name|indexOf
argument_list|(
literal|"./"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"\\./"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * A helper method to invoke a method via reflection and wrap any exceptions      * as {@link RuntimeCamelException} instances      *      * @param method the method to invoke      * @param instance the object instance (or null for static methods)      * @param parameters the parameters to the method      * @return the result of the method invocation      */
DECL|method|invokeMethod (Method method, Object instance, Object... parameters)
specifier|public
specifier|static
name|Object
name|invokeMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|instance
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
block|{
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Tests whether the target method overrides the source method.      *<p/>      * Tests whether they have the same name, return type, and parameter list.      *      * @param source  the source method      * @param target  the target method      * @return<tt>true</tt> if it override,<tt>false</tt> otherwise      */
DECL|method|isOverridingMethod (Method source, Method target)
specifier|public
specifier|static
name|boolean
name|isOverridingMethod
parameter_list|(
name|Method
name|source
parameter_list|,
name|Method
name|target
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|source
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|&&
name|source
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
name|target
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|)
block|{
comment|// test if parameter types is the same as well
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|source
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// the have same name, return type and parameter list, so its overriding
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns a list of methods which are annotated with the given annotation      *      * @param type the type to reflect on      * @param annotationType the annotation type      * @return a list of the methods found      */
DECL|method|findMethodsWithAnnotation (Class<?> type, Class<? extends Annotation> annotationType)
specifier|public
specifier|static
name|List
argument_list|<
name|Method
argument_list|>
name|findMethodsWithAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|findMethodsWithAnnotation
argument_list|(
name|type
argument_list|,
name|annotationType
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns a list of methods which are annotated with the given annotation      *      * @param type the type to reflect on      * @param annotationType the annotation type      * @param checkMetaAnnotations check for meta annotations      * @return a list of the methods found      */
DECL|method|findMethodsWithAnnotation (Class<?> type, Class<? extends Annotation> annotationType, boolean checkMetaAnnotations)
specifier|public
specifier|static
name|List
argument_list|<
name|Method
argument_list|>
name|findMethodsWithAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|,
name|boolean
name|checkMetaAnnotations
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|Method
index|[]
name|methods
init|=
name|type
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|hasAnnotation
argument_list|(
name|method
argument_list|,
name|annotationType
argument_list|,
name|checkMetaAnnotations
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|type
operator|=
name|type
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|type
operator|!=
literal|null
condition|)
do|;
return|return
name|answer
return|;
block|}
comment|/**      * Checks if a Class or Method are annotated with the given annotation      *      * @param elem the Class or Method to reflect on      * @param annotationType the annotation type      * @param checkMetaAnnotations check for meta annotations      * @return true if annotations is present      */
DECL|method|hasAnnotation (AnnotatedElement elem, Class<? extends Annotation> annotationType, boolean checkMetaAnnotations)
specifier|public
specifier|static
name|boolean
name|hasAnnotation
parameter_list|(
name|AnnotatedElement
name|elem
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|,
name|boolean
name|checkMetaAnnotations
parameter_list|)
block|{
if|if
condition|(
name|elem
operator|.
name|isAnnotationPresent
argument_list|(
name|annotationType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|checkMetaAnnotations
condition|)
block|{
for|for
control|(
name|Annotation
name|a
range|:
name|elem
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
for|for
control|(
name|Annotation
name|meta
range|:
name|a
operator|.
name|annotationType
argument_list|()
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
if|if
condition|(
name|meta
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|annotationType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Turns the given object arrays into a meaningful string      *      * @param objects an array of objects or null      * @return a meaningful string      */
DECL|method|asString (Object[] objects)
specifier|public
specifier|static
name|String
name|asString
parameter_list|(
name|Object
index|[]
name|objects
parameter_list|)
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
else|else
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
if|if
condition|(
name|counter
operator|++
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|String
name|text
init|=
operator|(
name|object
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
name|object
operator|.
name|toString
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns true if a class is assignable from another class like the      * {@link Class#isAssignableFrom(Class)} method but which also includes      * coercion between primitive types to deal with Java 5 primitive type      * wrapping      */
DECL|method|isAssignableFrom (Class<?> a, Class<?> b)
specifier|public
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|a
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|b
parameter_list|)
block|{
name|a
operator|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|b
operator|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|isAssignableFrom
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**      * Converts primitive types such as int to its wrapper type like      * {@link Integer}      */
DECL|method|convertPrimitiveTypeToWrapperType (Class<?> type)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|convertPrimitiveTypeToWrapperType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rc
init|=
name|type
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|int
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|long
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Long
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|double
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Double
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|float
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Float
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|short
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Short
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|byte
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Byte
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Boolean
operator|.
name|class
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Helper method to return the default character set name      */
DECL|method|getDefaultCharacterSet ()
specifier|public
specifier|static
name|String
name|getDefaultCharacterSet
parameter_list|()
block|{
return|return
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
comment|/**      * Returns the Java Bean property name of the given method, if it is a      * setter      */
DECL|method|getPropertyName (Method method)
specifier|public
specifier|static
name|String
name|getPropertyName
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|String
name|propertyName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|propertyName
operator|=
name|propertyName
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|+
name|propertyName
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|propertyName
return|;
block|}
comment|/**      * Returns true if the given collection of annotations matches the given type      */
DECL|method|hasAnnotation (Annotation[] annotations, Class<?> type)
specifier|public
specifier|static
name|boolean
name|hasAnnotation
parameter_list|(
name|Annotation
index|[]
name|annotations
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets the annotation from the given instance.      *      * @param instance the instance      * @param type  the annotation      * @return the annotation, or<tt>null</tt> if the instance does not have the given annotation      */
DECL|method|getAnnotation (Object instance, Class<A> type)
specifier|public
specifier|static
parameter_list|<
name|A
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
parameter_list|>
name|A
name|getAnnotation
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Closes the given resource if it is available, logging any closing      * exceptions to the given log      *      * @param closeable the object to close      * @param name the name of the resource      * @param log the log to use when reporting closure warnings      * @deprecated will be removed in Camel 3.0. Instead use {@link org.apache.camel.util.IOHelper#close(java.io.Closeable, String, org.slf4j.Logger)} instead      */
annotation|@
name|Deprecated
DECL|method|close (Closeable closeable, String name, Logger log)
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|Closeable
name|closeable
parameter_list|,
name|String
name|name
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|closeable
argument_list|,
name|name
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the given value to the required type or throw a meaningful exception      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|cast (Class<T> toType, Object value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|cast
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|toType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|toType
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|cast
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|newType
init|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|toType
argument_list|)
decl_stmt|;
if|if
condition|(
name|newType
operator|!=
name|toType
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|cast
argument_list|(
name|newType
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
try|try
block|{
return|return
name|toType
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to convert: "
operator|+
name|value
operator|+
literal|" to type: "
operator|+
name|toType
operator|.
name|getName
argument_list|()
operator|+
literal|" due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * A helper method to create a new instance of a type using the default      * constructor arguments.      */
DECL|method|newInstance (Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|type
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * A helper method to create a new instance of a type using the default      * constructor arguments.      */
DECL|method|newInstance (Class<?> actualType, Class<T> expectedType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|actualType
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
try|try
block|{
name|Object
name|value
init|=
name|actualType
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|cast
argument_list|(
name|expectedType
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Does the given class have a default public no-arg constructor.      */
DECL|method|hasDefaultPublicNoArgConstructor (Class<?> type)
specifier|public
specifier|static
name|boolean
name|hasDefaultPublicNoArgConstructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
comment|// getConstructors() returns only public constructors
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|ctr
range|:
name|type
operator|.
name|getConstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|ctr
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if the given name is a valid java identifier      */
DECL|method|isJavaIdentifier (String name)
specifier|public
specifier|static
name|boolean
name|isJavaIdentifier
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|size
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns the type of the given object or null if the value is null      */
DECL|method|type (Object bean)
specifier|public
specifier|static
name|Object
name|type
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
return|return
name|bean
operator|!=
literal|null
condition|?
name|bean
operator|.
name|getClass
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Evaluate the value as a predicate which attempts to convert the value to      * a boolean otherwise true is returned if the value is not null      */
DECL|method|evaluateValuePredicate (Object value)
specifier|public
specifier|static
name|boolean
name|evaluateValuePredicate
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|NodeList
condition|)
block|{
comment|// is it an empty dom with empty attributes
if|if
condition|(
name|value
operator|instanceof
name|Node
operator|&&
operator|(
operator|(
name|Node
operator|)
name|value
operator|)
operator|.
name|hasAttributes
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|NodeList
name|list
init|=
operator|(
name|NodeList
operator|)
name|value
decl_stmt|;
return|return
name|list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
comment|// is it an empty collection
name|Collection
argument_list|<
name|?
argument_list|>
name|col
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
return|return
name|col
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
return|return
name|value
operator|!=
literal|null
return|;
block|}
comment|/**      * Wraps the caused exception in a {@link RuntimeCamelException} if its not      * already such an exception.      *      * @param e the caused exception      * @return the wrapper exception      */
DECL|method|wrapRuntimeCamelException (Throwable e)
specifier|public
specifier|static
name|RuntimeCamelException
name|wrapRuntimeCamelException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeCamelException
condition|)
block|{
comment|// don't double wrap
return|return
operator|(
name|RuntimeCamelException
operator|)
name|e
return|;
block|}
else|else
block|{
return|return
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**      * Wraps the caused exception in a {@link CamelExecutionException} if its not      * already such an exception.      *      * @param e the caused exception      * @return the wrapper exception      */
DECL|method|wrapCamelExecutionException (Exchange exchange, Throwable e)
specifier|public
specifier|static
name|CamelExecutionException
name|wrapCamelExecutionException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|CamelExecutionException
condition|)
block|{
comment|// don't double wrap
return|return
operator|(
name|CamelExecutionException
operator|)
name|e
return|;
block|}
else|else
block|{
return|return
operator|new
name|CamelExecutionException
argument_list|(
literal|"Exception occurred during execution"
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
comment|/**      * Cleans the string to a pure Java identifier so we can use it for loading class names.      *<p/>      * Especially from Spring DSL people can have \n \t or other characters that otherwise      * would result in ClassNotFoundException      *      * @param name the class name      * @return normalized classname that can be load by a class loader.      */
DECL|method|normalizeClassName (String name)
specifier|public
specifier|static
name|String
name|normalizeClassName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|name
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'['
operator|||
name|ch
operator|==
literal|']'
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Creates an iterator to walk the exception from the bottom up      * (the last caused by going upwards to the root exception).      *      * @param exception  the exception      * @return the iterator      */
DECL|method|createExceptionIterator (Throwable exception)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Throwable
argument_list|>
name|createExceptionIterator
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
return|return
operator|new
name|ExceptionIterator
argument_list|(
name|exception
argument_list|)
return|;
block|}
comment|/**      * Retrieves the given exception type from the exception.      *<p/>      * Is used to get the caused exception that typically have been wrapped in some sort      * of Camel wrapper exception      *<p/>      * The strategy is to look in the exception hierarchy to find the first given cause that matches the type.      * Will start from the bottom (the real cause) and walk upwards.      *      * @param type the exception type wanted to retrieve      * @param exception the caused exception      * @return the exception found (or<tt>null</tt> if not found in the exception hierarchy)      */
DECL|method|getException (Class<T> type, Throwable exception)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getException
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// walk the hierarchy and look for it
name|Iterator
argument_list|<
name|Throwable
argument_list|>
name|it
init|=
name|createExceptionIterator
argument_list|(
name|exception
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Throwable
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|// not found
return|return
literal|null
return|;
block|}
comment|/**      * Creates a {@link Scanner} for scanning the given value.      *      * @param exchange  the current exchange      * @param value     the value, typically the message IN body      * @return the scanner, is newer<tt>null</tt>      */
DECL|method|getScanner (Exchange exchange, Object value)
specifier|public
specifier|static
name|Scanner
name|getScanner
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|WrappedFile
condition|)
block|{
comment|// generic file is just a wrapper for the real file so call again with the real file
name|WrappedFile
argument_list|<
name|?
argument_list|>
name|gf
init|=
operator|(
name|WrappedFile
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
return|return
name|getScanner
argument_list|(
name|exchange
argument_list|,
name|gf
operator|.
name|getFile
argument_list|()
argument_list|)
return|;
block|}
name|String
name|charset
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Readable
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
operator|(
name|Readable
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|InputStream
condition|)
block|{
name|scanner
operator|=
name|charset
operator|==
literal|null
condition|?
operator|new
name|Scanner
argument_list|(
operator|(
name|InputStream
operator|)
name|value
argument_list|)
else|:
operator|new
name|Scanner
argument_list|(
operator|(
name|InputStream
operator|)
name|value
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|File
condition|)
block|{
try|try
block|{
name|scanner
operator|=
name|charset
operator|==
literal|null
condition|?
operator|new
name|Scanner
argument_list|(
operator|(
name|File
operator|)
name|value
argument_list|)
else|:
operator|new
name|Scanner
argument_list|(
operator|(
name|File
operator|)
name|value
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ReadableByteChannel
condition|)
block|{
name|scanner
operator|=
name|charset
operator|==
literal|null
condition|?
operator|new
name|Scanner
argument_list|(
operator|(
name|ReadableByteChannel
operator|)
name|value
argument_list|)
else|:
operator|new
name|Scanner
argument_list|(
operator|(
name|ReadableByteChannel
operator|)
name|value
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
comment|// value is not a suitable type, try to convert value to a string
name|String
name|text
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|scanner
return|;
block|}
DECL|method|getIdentityHashCode (Object object)
specifier|public
specifier|static
name|String
name|getIdentityHashCode
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
literal|"0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|object
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Lookup the constant field on the given class with the given name      *      * @param clazz  the class      * @param name   the name of the field to lookup      * @return the value of the constant field, or<tt>null</tt> if not found      */
DECL|method|lookupConstantFieldValue (Class<?> clazz, String name)
specifier|public
specifier|static
name|String
name|lookupConstantFieldValue
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|(
name|String
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// ignore
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Is the given value a numeric NaN type      *       * @param value the value      * @return<tt>true</tt> if its a {@link Float#NaN} or {@link Double#NaN}.      */
DECL|method|isNaN (Object value)
specifier|public
specifier|static
name|boolean
name|isNaN
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
operator|!
operator|(
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// value must be a number
return|return
name|value
operator|.
name|equals
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
return|;
block|}
DECL|class|ExceptionIterator
specifier|private
specifier|static
specifier|final
class|class
name|ExceptionIterator
implements|implements
name|Iterator
argument_list|<
name|Throwable
argument_list|>
block|{
DECL|field|tree
specifier|private
name|List
argument_list|<
name|Throwable
argument_list|>
name|tree
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|it
specifier|private
name|Iterator
argument_list|<
name|Throwable
argument_list|>
name|it
decl_stmt|;
DECL|method|ExceptionIterator (Throwable exception)
specifier|public
name|ExceptionIterator
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|Throwable
name|current
init|=
name|exception
decl_stmt|;
comment|// spool to the bottom of the caused by tree
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|tree
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
comment|// reverse tree so we go from bottom to top
name|Collections
operator|.
name|reverse
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|it
operator|=
name|tree
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
DECL|method|next ()
specifier|public
name|Throwable
name|next
parameter_list|()
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

