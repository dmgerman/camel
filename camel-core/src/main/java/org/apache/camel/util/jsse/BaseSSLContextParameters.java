begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.jsse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionHelper
operator|.
name|collectionAsCommaDelimitedString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyManagementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SNIServerName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContextSpi
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLParameters
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSessionContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|FilterParameters
operator|.
name|Patterns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents configuration options that can be applied in the client-side  * or server-side context depending on what they are applied to.  */
end_comment

begin_class
DECL|class|BaseSSLContextParameters
specifier|public
specifier|abstract
class|class
name|BaseSSLContextParameters
extends|extends
name|JsseParameters
block|{
DECL|field|DEFAULT_CIPHER_SUITES_FILTER_INCLUDE
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_CIPHER_SUITES_FILTER_INCLUDE
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|".*"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_CIPHER_SUITES_FILTER_EXCLUDE
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_CIPHER_SUITES_FILTER_EXCLUDE
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|".*_NULL_.*"
argument_list|,
literal|".*_anon_.*"
argument_list|,
literal|".*_EXPORT_.*"
argument_list|,
literal|".*_DES_.*"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SECURE_SOCKET_PROTOCOLS_FILTER_INCLUDE
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_SECURE_SOCKET_PROTOCOLS_FILTER_INCLUDE
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|".*"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SECURE_SOCKET_PROTOCOLS_FILTER_EXCLUDE
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_SECURE_SOCKET_PROTOCOLS_FILTER_EXCLUDE
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"SSL.*"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseSSLContextParameters
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LS
specifier|private
specifier|static
specifier|final
name|String
name|LS
init|=
name|System
operator|.
name|lineSeparator
argument_list|()
decl_stmt|;
DECL|field|SSL_ENGINE_CIPHER_SUITE_LOG_MSG
specifier|private
specifier|static
specifier|final
name|String
name|SSL_ENGINE_CIPHER_SUITE_LOG_MSG
init|=
name|createCipherSuiteLogMessage
argument_list|(
literal|"SSLEngine"
argument_list|)
decl_stmt|;
DECL|field|SSL_SOCKET_CIPHER_SUITE_LOG_MSG
specifier|private
specifier|static
specifier|final
name|String
name|SSL_SOCKET_CIPHER_SUITE_LOG_MSG
init|=
name|createCipherSuiteLogMessage
argument_list|(
literal|"SSLSocket"
argument_list|)
decl_stmt|;
DECL|field|SSL_SERVER_SOCKET_CIPHER_SUITE_LOG_MSG
specifier|private
specifier|static
specifier|final
name|String
name|SSL_SERVER_SOCKET_CIPHER_SUITE_LOG_MSG
init|=
name|createCipherSuiteLogMessage
argument_list|(
literal|"SSLServerSocket"
argument_list|)
decl_stmt|;
DECL|field|SSL_ENGINE_PROTOCOL_LOG_MSG
specifier|private
specifier|static
specifier|final
name|String
name|SSL_ENGINE_PROTOCOL_LOG_MSG
init|=
name|createProtocolLogMessage
argument_list|(
literal|"SSLEngine"
argument_list|)
decl_stmt|;
DECL|field|SSL_SOCKET_PROTOCOL_LOG_MSG
specifier|private
specifier|static
specifier|final
name|String
name|SSL_SOCKET_PROTOCOL_LOG_MSG
init|=
name|createProtocolLogMessage
argument_list|(
literal|"SSLSocket"
argument_list|)
decl_stmt|;
DECL|field|SSL_SERVER_SOCKET_PROTOCOL_LOG_MSG
specifier|private
specifier|static
specifier|final
name|String
name|SSL_SERVER_SOCKET_PROTOCOL_LOG_MSG
init|=
name|createProtocolLogMessage
argument_list|(
literal|"SSLServerSocket"
argument_list|)
decl_stmt|;
comment|/**      * The optional explicitly configured cipher suites for this configuration.      */
DECL|field|cipherSuites
specifier|private
name|CipherSuitesParameters
name|cipherSuites
decl_stmt|;
comment|/**      * The optional cipher suite filter configuration for this configuration.      */
DECL|field|cipherSuitesFilter
specifier|private
name|FilterParameters
name|cipherSuitesFilter
decl_stmt|;
comment|/**      * The optional explicitly configured secure socket protocol names for this configuration.      */
DECL|field|secureSocketProtocols
specifier|private
name|SecureSocketProtocolsParameters
name|secureSocketProtocols
decl_stmt|;
comment|/**      * The option secure socket protocol name filter configuration for this configuration.      */
DECL|field|secureSocketProtocolsFilter
specifier|private
name|FilterParameters
name|secureSocketProtocolsFilter
decl_stmt|;
comment|/**      * The optional {@link SSLSessionContext} timeout time for {@link javax.net.ssl.SSLSession}s in seconds.      */
DECL|field|sessionTimeout
specifier|private
name|String
name|sessionTimeout
decl_stmt|;
DECL|method|getSNIHostNames ()
specifier|protected
name|List
argument_list|<
name|SNIServerName
argument_list|>
name|getSNIHostNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Returns the optional explicitly configured cipher suites for this configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values override any filters supplied in {@link #setCipherSuitesFilter(FilterParameters)}      */
DECL|method|getCipherSuites ()
specifier|public
name|CipherSuitesParameters
name|getCipherSuites
parameter_list|()
block|{
return|return
name|cipherSuites
return|;
block|}
comment|/**      * Sets the optional explicitly configured cipher suites for this configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values override any filters supplied in {@link #setCipherSuitesFilter(FilterParameters)}      *       * @param cipherSuites the suite configuration      */
DECL|method|setCipherSuites (CipherSuitesParameters cipherSuites)
specifier|public
name|void
name|setCipherSuites
parameter_list|(
name|CipherSuitesParameters
name|cipherSuites
parameter_list|)
block|{
name|this
operator|.
name|cipherSuites
operator|=
name|cipherSuites
expr_stmt|;
block|}
comment|/**      * Returns the optional cipher suite filter for this configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values are ignored if {@link #setCipherSuites(CipherSuitesParameters)} is      * called with a non {@code null} argument.      */
DECL|method|getCipherSuitesFilter ()
specifier|public
name|FilterParameters
name|getCipherSuitesFilter
parameter_list|()
block|{
return|return
name|cipherSuitesFilter
return|;
block|}
comment|/**      * Sets the optional cipher suite filter for this JSSE configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values are ignored if {@link #setCipherSuites(CipherSuitesParameters)} is      * called with a non {@code null} argument.      *       * @param cipherSuitesFilter the filter configuration      */
DECL|method|setCipherSuitesFilter (FilterParameters cipherSuitesFilter)
specifier|public
name|void
name|setCipherSuitesFilter
parameter_list|(
name|FilterParameters
name|cipherSuitesFilter
parameter_list|)
block|{
name|this
operator|.
name|cipherSuitesFilter
operator|=
name|cipherSuitesFilter
expr_stmt|;
block|}
comment|/**      * Returns the explicitly configured secure socket protocol names for this configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values override any filters supplied in {@link #setSecureSocketProtocolsFilter(FilterParameters)}      */
DECL|method|getSecureSocketProtocols ()
specifier|public
name|SecureSocketProtocolsParameters
name|getSecureSocketProtocols
parameter_list|()
block|{
return|return
name|secureSocketProtocols
return|;
block|}
comment|/**      * Sets the explicitly configured secure socket protocol names for this configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values override any filters supplied in {@link #setSecureSocketProtocolsFilter(FilterParameters)}      */
DECL|method|setSecureSocketProtocols (SecureSocketProtocolsParameters secureSocketProtocols)
specifier|public
name|void
name|setSecureSocketProtocols
parameter_list|(
name|SecureSocketProtocolsParameters
name|secureSocketProtocols
parameter_list|)
block|{
name|this
operator|.
name|secureSocketProtocols
operator|=
name|secureSocketProtocols
expr_stmt|;
block|}
comment|/**      * Returns the optional secure socket protocol filter for this configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values are ignored if {@link #setSecureSocketProtocols(SecureSocketProtocolsParameters)} is      * called with a non-{@code null} argument.      */
DECL|method|getSecureSocketProtocolsFilter ()
specifier|public
name|FilterParameters
name|getSecureSocketProtocolsFilter
parameter_list|()
block|{
return|return
name|secureSocketProtocolsFilter
return|;
block|}
comment|/**      * Sets the optional secure socket protocol filter for this JSSE configuration.      * These options are used in the configuration of {@link SSLEngine},      * {@link SSLSocketFactory} and {@link SSLServerSocketFactory} depending      * on the context in which they are applied.      *<p/>      * These values are ignored if {@link #setSecureSocketProtocols(SecureSocketProtocolsParameters)} is      * called with a non-{@code null} argument.      *       * @param secureSocketProtocolsFilter the filter configuration      */
DECL|method|setSecureSocketProtocolsFilter (FilterParameters secureSocketProtocolsFilter)
specifier|public
name|void
name|setSecureSocketProtocolsFilter
parameter_list|(
name|FilterParameters
name|secureSocketProtocolsFilter
parameter_list|)
block|{
name|this
operator|.
name|secureSocketProtocolsFilter
operator|=
name|secureSocketProtocolsFilter
expr_stmt|;
block|}
comment|/**      * Returns the optional {@link SSLSessionContext} timeout time for {@link javax.net.ssl.SSLSession}s       * in seconds.      */
DECL|method|getSessionTimeout ()
specifier|public
name|String
name|getSessionTimeout
parameter_list|()
block|{
return|return
name|sessionTimeout
return|;
block|}
comment|/**      * Sets the optional {@link SSLSessionContext} timeout time for {@link javax.net.ssl.SSLSession}s      * in seconds.      *      * @param sessionTimeout the timeout value or {@code null} to use the default      */
DECL|method|setSessionTimeout (String sessionTimeout)
specifier|public
name|void
name|setSessionTimeout
parameter_list|(
name|String
name|sessionTimeout
parameter_list|)
block|{
name|this
operator|.
name|sessionTimeout
operator|=
name|sessionTimeout
expr_stmt|;
block|}
comment|/**      * Returns a flag indicating if default values should be applied in the event that no other property      * of the instance configures a particular aspect of the entity produced by the instance.      * This flag is used to allow instances of this class to produce a configurer that simply      * passes through the current configuration of a configured entity when the instance of this      * class would otherwise only apply some default configuration.      *      * @see SSLContextClientParameters      * @see SSLContextServerParameters      */
DECL|method|getAllowPassthrough ()
specifier|protected
name|boolean
name|getAllowPassthrough
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Configures the actual {@link SSLContext} itself with direct setter calls.  This method differs from      * configuration options that are handled by a configurer instance in that the options are part of the      * context itself and are not part of some factory or instance object returned by the context.      *       * @param context the context to configure      *      * @throws GeneralSecurityException if there is an error configuring the context      */
DECL|method|configureSSLContext (SSLContext context)
specifier|protected
name|void
name|configureSSLContext
parameter_list|(
name|SSLContext
name|context
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Configuring client and server side SSLContext parameters on SSLContext [{}]..."
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getSessionTimeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring client and server side SSLContext session timeout on SSLContext [{}] to [{}]"
argument_list|,
name|context
argument_list|,
name|this
operator|.
name|getSessionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|configureSessionContext
argument_list|(
name|context
operator|.
name|getClientSessionContext
argument_list|()
argument_list|,
name|this
operator|.
name|getSessionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|configureSessionContext
argument_list|(
name|context
operator|.
name|getServerSessionContext
argument_list|()
argument_list|,
name|this
operator|.
name|getSessionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Configured client and server side SSLContext parameters on SSLContext [{}]."
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultCipherSuitesFilter ()
specifier|protected
name|FilterParameters
name|getDefaultCipherSuitesFilter
parameter_list|()
block|{
name|FilterParameters
name|filter
init|=
operator|new
name|FilterParameters
argument_list|()
decl_stmt|;
name|filter
operator|.
name|getInclude
argument_list|()
operator|.
name|addAll
argument_list|(
name|DEFAULT_CIPHER_SUITES_FILTER_INCLUDE
argument_list|)
expr_stmt|;
name|filter
operator|.
name|getExclude
argument_list|()
operator|.
name|addAll
argument_list|(
name|DEFAULT_CIPHER_SUITES_FILTER_EXCLUDE
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
DECL|method|getDefaultSecureSocketProcotolFilter ()
specifier|protected
name|FilterParameters
name|getDefaultSecureSocketProcotolFilter
parameter_list|()
block|{
name|FilterParameters
name|filter
init|=
operator|new
name|FilterParameters
argument_list|()
decl_stmt|;
name|filter
operator|.
name|getInclude
argument_list|()
operator|.
name|addAll
argument_list|(
name|DEFAULT_SECURE_SOCKET_PROTOCOLS_FILTER_INCLUDE
argument_list|)
expr_stmt|;
name|filter
operator|.
name|getExclude
argument_list|()
operator|.
name|addAll
argument_list|(
name|DEFAULT_SECURE_SOCKET_PROTOCOLS_FILTER_EXCLUDE
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      * Returns the list of configurers to apply to an {@link SSLEngine} in order      * to fully configure it in compliance with the provided configuration options.      * The configurers are to be applied in the order in which they appear in the list.      *      * @param context the context that serves as the factory for {@code SSLEngine} instances      *       * @return the needed configurers      */
DECL|method|getSSLEngineConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
argument_list|>
name|getSSLEngineConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|enabledCipherSuites
init|=
name|this
operator|.
name|getCipherSuites
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|parsePropertyValues
argument_list|(
name|this
operator|.
name|getCipherSuites
argument_list|()
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Patterns
name|enabledCipherSuitePatterns
decl_stmt|;
specifier|final
name|Patterns
name|defaultEnabledCipherSuitePatterns
init|=
name|this
operator|.
name|getDefaultCipherSuitesFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enabledCipherSuitePatterns
operator|=
name|this
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enabledCipherSuitePatterns
operator|=
literal|null
expr_stmt|;
block|}
comment|///
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|enabledSecureSocketProtocols
init|=
name|this
operator|.
name|getSecureSocketProtocols
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|parsePropertyValues
argument_list|(
name|this
operator|.
name|getSecureSocketProtocols
argument_list|()
operator|.
name|getSecureSocketProtocol
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Patterns
name|enabledSecureSocketProtocolsPatterns
decl_stmt|;
specifier|final
name|Patterns
name|defaultEnabledSecureSocketProtocolsPatterns
init|=
name|this
operator|.
name|getDefaultSecureSocketProcotolFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enabledSecureSocketProtocolsPatterns
operator|=
name|this
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enabledSecureSocketProtocolsPatterns
operator|=
literal|null
expr_stmt|;
block|}
comment|//
specifier|final
name|boolean
name|allowPassthrough
init|=
name|getAllowPassthrough
argument_list|()
decl_stmt|;
comment|//////
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
name|sslEngineConfigurer
init|=
operator|new
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SSLEngine
name|configure
parameter_list|(
name|SSLEngine
name|engine
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|filteredCipherSuites
init|=
name|BaseSSLContextParameters
operator|.
name|this
operator|.
name|filter
argument_list|(
name|enabledCipherSuites
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getCipherSuites
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getEnabledCipherSuites
argument_list|()
argument_list|)
argument_list|,
name|enabledCipherSuitePatterns
argument_list|,
name|defaultEnabledCipherSuitePatterns
argument_list|,
operator|!
name|allowPassthrough
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|SSL_ENGINE_CIPHER_SUITE_LOG_MSG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engine
block|,
name|enabledCipherSuites
block|,
name|enabledCipherSuitePatterns
block|,
name|engine
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getCipherSuites
argument_list|()
block|,
name|engine
operator|.
name|getEnabledCipherSuites
argument_list|()
block|,
name|defaultEnabledCipherSuitePatterns
block|,
name|filteredCipherSuites
block|}
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|setEnabledCipherSuites
argument_list|(
name|filteredCipherSuites
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteredCipherSuites
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|filteredSecureSocketProtocols
init|=
name|BaseSSLContextParameters
operator|.
name|this
operator|.
name|filter
argument_list|(
name|enabledSecureSocketProtocols
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getProtocols
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
argument_list|,
name|enabledSecureSocketProtocolsPatterns
argument_list|,
name|defaultEnabledSecureSocketProtocolsPatterns
argument_list|,
operator|!
name|allowPassthrough
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|SSL_ENGINE_PROTOCOL_LOG_MSG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|engine
block|,
name|enabledSecureSocketProtocols
block|,
name|enabledSecureSocketProtocolsPatterns
block|,
name|engine
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getProtocols
argument_list|()
block|,
name|engine
operator|.
name|getEnabledProtocols
argument_list|()
block|,
name|defaultEnabledSecureSocketProtocolsPatterns
block|,
name|filteredSecureSocketProtocols
block|}
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|setEnabledProtocols
argument_list|(
name|filteredSecureSocketProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteredSecureSocketProtocols
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
argument_list|>
name|sslEngineConfigurers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|sslEngineConfigurers
operator|.
name|add
argument_list|(
name|sslEngineConfigurer
argument_list|)
expr_stmt|;
return|return
name|sslEngineConfigurers
return|;
block|}
comment|/**      * Returns the list of configurers to apply to an {@link SSLSocketFactory} in order      * to fully configure it in compliance with the provided configuration options.      * The configurers are to be applied in the order in which they appear in the list.      *<p/>      * It is preferred to use {@link #getSSLSocketFactorySSLSocketConfigurers(SSLContext)} instead      * of this method as {@code SSLSocketFactory} does not contain any configuration options that      * are non-proprietary.      *      * @param context the context that serves as the factory for {@code SSLSocketFactory} instances      *       * @return the needed configurers      *       * @see #getSSLSocketFactorySSLSocketConfigurers(SSLContext)      */
DECL|method|getSSLSocketFactoryConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
argument_list|>
name|getSSLSocketFactoryConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
argument_list|>
name|sslSocketConfigurers
init|=
name|this
operator|.
name|getSSLSocketFactorySSLSocketConfigurers
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
name|sslSocketFactoryConfigurer
init|=
operator|new
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SSLSocketFactory
name|configure
parameter_list|(
name|SSLSocketFactory
name|factory
parameter_list|)
block|{
return|return
operator|new
name|SSLSocketFactoryDecorator
argument_list|(
name|factory
argument_list|,
name|sslSocketConfigurers
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
argument_list|>
name|sslSocketFactoryConfigurers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|sslSocketFactoryConfigurers
operator|.
name|add
argument_list|(
name|sslSocketFactoryConfigurer
argument_list|)
expr_stmt|;
return|return
name|sslSocketFactoryConfigurers
return|;
block|}
comment|/**      * Returns the list of configurers to apply to an {@link SSLServerSocketFactory} in order      * to fully configure it in compliance with the provided configuration options.      * The configurers are to be applied in the order in which they appear in the list.      *<p/>      * It is preferred to use {@link #getSSLServerSocketFactorySSLServerSocketConfigurers(SSLContext)} instead      * of this method as {@code SSLServerSocketFactory} does not contain any configuration options that      * are non-proprietary.      *      * @param context the context that serves as the factory for {@code SSLServerSocketFactory} instances      *       * @return the needed configurers      *       * @see #getSSLServerSocketFactorySSLServerSocketConfigurers(SSLContext)      */
DECL|method|getSSLServerSocketFactoryConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
argument_list|>
name|getSSLServerSocketFactoryConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
argument_list|>
name|sslServerSocketConfigurers
init|=
name|this
operator|.
name|getSSLServerSocketFactorySSLServerSocketConfigurers
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
name|sslServerSocketFactoryConfigurer
init|=
operator|new
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SSLServerSocketFactory
name|configure
parameter_list|(
name|SSLServerSocketFactory
name|factory
parameter_list|)
block|{
return|return
operator|new
name|SSLServerSocketFactoryDecorator
argument_list|(
name|factory
argument_list|,
name|sslServerSocketConfigurers
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
argument_list|>
name|sslServerSocketFactoryConfigurers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|sslServerSocketFactoryConfigurers
operator|.
name|add
argument_list|(
name|sslServerSocketFactoryConfigurer
argument_list|)
expr_stmt|;
return|return
name|sslServerSocketFactoryConfigurers
return|;
block|}
comment|/**      * Returns the list of configurers to apply to an {@link SSLSocket} in order      * to fully configure it in compliance with the provided configuration      * options. These configurers are intended for sockets produced by a      * {@link SSLSocketFactory}, see      * {@link #getSSLServerSocketFactorySSLServerSocketConfigurers(SSLContext)} for      * configurers related to sockets produced by a      * {@link SSLServerSocketFactory}. The configurers are to be applied in      * the order in which they appear in the list.      *       * @param context the context that serves as the factory for      *            {@code SSLSocketFactory} instances      *      * @return the needed configurers      */
DECL|method|getSSLSocketFactorySSLSocketConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
argument_list|>
name|getSSLSocketFactorySSLSocketConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|enabledCipherSuites
init|=
name|this
operator|.
name|getCipherSuites
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|parsePropertyValues
argument_list|(
name|this
operator|.
name|getCipherSuites
argument_list|()
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Patterns
name|enabledCipherSuitePatterns
decl_stmt|;
specifier|final
name|Patterns
name|defaultEnabledCipherSuitePatterns
init|=
name|this
operator|.
name|getDefaultCipherSuitesFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enabledCipherSuitePatterns
operator|=
name|this
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enabledCipherSuitePatterns
operator|=
literal|null
expr_stmt|;
block|}
comment|///
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|enabledSecureSocketProtocols
init|=
name|this
operator|.
name|getSecureSocketProtocols
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|parsePropertyValues
argument_list|(
name|this
operator|.
name|getSecureSocketProtocols
argument_list|()
operator|.
name|getSecureSocketProtocol
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Patterns
name|enabledSecureSocketProtocolsPatterns
decl_stmt|;
specifier|final
name|Patterns
name|defaultEnabledSecureSocketProtocolsPatterns
init|=
name|this
operator|.
name|getDefaultSecureSocketProcotolFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enabledSecureSocketProtocolsPatterns
operator|=
name|this
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enabledSecureSocketProtocolsPatterns
operator|=
literal|null
expr_stmt|;
block|}
comment|//
specifier|final
name|boolean
name|allowPassthrough
init|=
name|getAllowPassthrough
argument_list|()
decl_stmt|;
comment|//////
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
name|sslSocketConfigurer
init|=
operator|new
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SSLSocket
name|configure
parameter_list|(
name|SSLSocket
name|socket
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSNIHostNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SSLParameters
name|sslParameters
init|=
name|socket
operator|.
name|getSSLParameters
argument_list|()
decl_stmt|;
name|sslParameters
operator|.
name|setServerNames
argument_list|(
name|getSNIHostNames
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setSSLParameters
argument_list|(
name|sslParameters
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|filteredCipherSuites
init|=
name|BaseSSLContextParameters
operator|.
name|this
operator|.
name|filter
argument_list|(
name|enabledCipherSuites
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getCipherSuites
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getEnabledCipherSuites
argument_list|()
argument_list|)
argument_list|,
name|enabledCipherSuitePatterns
argument_list|,
name|defaultEnabledCipherSuitePatterns
argument_list|,
operator|!
name|allowPassthrough
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|SSL_SOCKET_CIPHER_SUITE_LOG_MSG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|socket
block|,
name|enabledCipherSuites
block|,
name|enabledCipherSuitePatterns
block|,
name|socket
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getCipherSuites
argument_list|()
block|,
name|socket
operator|.
name|getEnabledCipherSuites
argument_list|()
block|,
name|defaultEnabledCipherSuitePatterns
block|,
name|filteredCipherSuites
block|}
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|setEnabledCipherSuites
argument_list|(
name|filteredCipherSuites
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteredCipherSuites
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|filteredSecureSocketProtocols
init|=
name|BaseSSLContextParameters
operator|.
name|this
operator|.
name|filter
argument_list|(
name|enabledSecureSocketProtocols
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getProtocols
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
argument_list|,
name|enabledSecureSocketProtocolsPatterns
argument_list|,
name|defaultEnabledSecureSocketProtocolsPatterns
argument_list|,
operator|!
name|allowPassthrough
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|SSL_SOCKET_PROTOCOL_LOG_MSG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|socket
block|,
name|enabledSecureSocketProtocols
block|,
name|enabledSecureSocketProtocolsPatterns
block|,
name|socket
operator|.
name|getSSLParameters
argument_list|()
operator|.
name|getProtocols
argument_list|()
block|,
name|socket
operator|.
name|getEnabledProtocols
argument_list|()
block|,
name|defaultEnabledSecureSocketProtocolsPatterns
block|,
name|filteredSecureSocketProtocols
block|}
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|setEnabledProtocols
argument_list|(
name|filteredSecureSocketProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteredSecureSocketProtocols
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
argument_list|>
name|sslSocketConfigurers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|sslSocketConfigurers
operator|.
name|add
argument_list|(
name|sslSocketConfigurer
argument_list|)
expr_stmt|;
return|return
name|sslSocketConfigurers
return|;
block|}
comment|/**      * Returns the list of configurers to apply to an {@link SSLServerSocket} in order      * to fully configure it in compliance with the provided configuration      * options. These configurers are intended for sockets produced by a      * {@link SSLServerSocketFactory}, see      * {@link #getSSLSocketFactorySSLSocketConfigurers(SSLContext)} for      * configurers related to sockets produced by a      * {@link SSLSocketFactory}. The configurers are to be applied in      * the order in which they appear in the list.      *       * @param context the context that serves as the factory for      *            {@code SSLServerSocketFactory} instances      * @return the needed configurers      */
DECL|method|getSSLServerSocketFactorySSLServerSocketConfigurers (SSLContext context)
specifier|protected
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
argument_list|>
name|getSSLServerSocketFactorySSLServerSocketConfigurers
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|enabledCipherSuites
init|=
name|this
operator|.
name|getCipherSuites
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|parsePropertyValues
argument_list|(
name|this
operator|.
name|getCipherSuites
argument_list|()
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Patterns
name|enabledCipherSuitePatterns
decl_stmt|;
specifier|final
name|Patterns
name|defaultEnabledCipherSuitePatterns
init|=
name|this
operator|.
name|getDefaultCipherSuitesFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enabledCipherSuitePatterns
operator|=
name|this
operator|.
name|getCipherSuitesFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enabledCipherSuitePatterns
operator|=
literal|null
expr_stmt|;
block|}
comment|///
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|enabledSecureSocketProtocols
init|=
name|this
operator|.
name|getSecureSocketProtocols
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|parsePropertyValues
argument_list|(
name|this
operator|.
name|getSecureSocketProtocols
argument_list|()
operator|.
name|getSecureSocketProtocol
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Patterns
name|enabledSecureSocketProtocolsPatterns
decl_stmt|;
specifier|final
name|Patterns
name|defaultEnabledSecureSocketProtocolsPatterns
init|=
name|this
operator|.
name|getDefaultSecureSocketProcotolFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enabledSecureSocketProtocolsPatterns
operator|=
name|this
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
operator|.
name|getPatterns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enabledSecureSocketProtocolsPatterns
operator|=
literal|null
expr_stmt|;
block|}
comment|//
specifier|final
name|boolean
name|allowPassthrough
init|=
name|getAllowPassthrough
argument_list|()
decl_stmt|;
comment|//////
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
name|sslServerSocketConfigurer
init|=
operator|new
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SSLServerSocket
name|configure
parameter_list|(
name|SSLServerSocket
name|socket
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|filteredCipherSuites
init|=
name|BaseSSLContextParameters
operator|.
name|this
operator|.
name|filter
argument_list|(
name|enabledCipherSuites
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getSupportedCipherSuites
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getEnabledCipherSuites
argument_list|()
argument_list|)
argument_list|,
name|enabledCipherSuitePatterns
argument_list|,
name|defaultEnabledCipherSuitePatterns
argument_list|,
operator|!
name|allowPassthrough
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|SSL_SERVER_SOCKET_CIPHER_SUITE_LOG_MSG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|socket
block|,
name|enabledCipherSuites
block|,
name|enabledCipherSuitePatterns
block|,
name|socket
operator|.
name|getSupportedCipherSuites
argument_list|()
block|,
name|socket
operator|.
name|getEnabledCipherSuites
argument_list|()
block|,
name|defaultEnabledCipherSuitePatterns
block|,
name|filteredCipherSuites
block|}
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|setEnabledCipherSuites
argument_list|(
name|filteredCipherSuites
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteredCipherSuites
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|filteredSecureSocketProtocols
init|=
name|BaseSSLContextParameters
operator|.
name|this
operator|.
name|filter
argument_list|(
name|enabledSecureSocketProtocols
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getSupportedProtocols
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|socket
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
argument_list|,
name|enabledSecureSocketProtocolsPatterns
argument_list|,
name|defaultEnabledSecureSocketProtocolsPatterns
argument_list|,
operator|!
name|allowPassthrough
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|SSL_SERVER_SOCKET_PROTOCOL_LOG_MSG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|socket
block|,
name|enabledSecureSocketProtocols
block|,
name|enabledSecureSocketProtocolsPatterns
block|,
name|socket
operator|.
name|getSupportedProtocols
argument_list|()
block|,
name|socket
operator|.
name|getEnabledProtocols
argument_list|()
block|,
name|defaultEnabledSecureSocketProtocolsPatterns
block|,
name|filteredSecureSocketProtocols
block|}
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|setEnabledProtocols
argument_list|(
name|filteredSecureSocketProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filteredSecureSocketProtocols
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
argument_list|>
name|sslServerSocketConfigurers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|sslServerSocketConfigurers
operator|.
name|add
argument_list|(
name|sslServerSocketConfigurer
argument_list|)
expr_stmt|;
return|return
name|sslServerSocketConfigurers
return|;
block|}
comment|/**      * Configures a {@link SSLSessionContext}, client or server, with the supplied session timeout.      *      * @param sessionContext the context to configure      * @param sessionTimeout the timeout time period      * @throws GeneralSecurityException if {@code sessionContext} is {@code null}      */
DECL|method|configureSessionContext ( SSLSessionContext sessionContext, String sessionTimeout)
specifier|protected
name|void
name|configureSessionContext
parameter_list|(
name|SSLSessionContext
name|sessionContext
parameter_list|,
name|String
name|sessionTimeout
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|int
name|sessionTimeoutInt
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|parsePropertyValue
argument_list|(
name|sessionTimeout
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|!=
literal|null
condition|)
block|{
name|sessionContext
operator|.
name|setSessionTimeout
argument_list|(
name|sessionTimeoutInt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
literal|"The SSLContext does not support SSLSessionContext, "
operator|+
literal|"but a session timeout is configured. Set sessionTimeout to null "
operator|+
literal|"to avoid this error."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Filters the values in {@code availableValues} returning only the values that      * are explicitly listed in {@code explicitValues} (returns them regardless      * of if they appear in {@code availableValues} or not) if {@code explicitValues} is not      * {@code null} or according to the following rules:      *<ol>      *<li>Match the include patterns in {@code patterns} and don't match the exclude patterns in {@code patterns}      * if patterns is not {@code null}.</li>      *<li>Match the include patterns in {@code defaultPatterns} and don't match the exclude patterns in {@code defaultPatterns}      * if patterns is {@code null} and {@code applyDefaults} is true.</li>      *<li>Are provided in currentValues if if patterns is {@code null} and {@code applyDefaults} is false.</li>      *</ol>      *       * @param explicitValues the optional explicit values to use      * @param availableValues the available values to filter from      * @param patterns the optional patterns to use when {@code explicitValues} is not used      * @param defaultPatterns the required patterns to use when {@code explicitValues} and {@code patterns} are not used      * @param applyDefaults flag indicating whether or not to apply defaults in the event that no explicit values and no      *              patterns apply      *       * @return the filtered values      *      * @see #filter(Collection, Collection, List, List)      */
DECL|method|filter ( Collection<String> explicitValues, Collection<String> availableValues, Collection<String> currentValues, Patterns patterns, Patterns defaultPatterns, boolean applyDefaults)
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|explicitValues
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|availableValues
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|currentValues
parameter_list|,
name|Patterns
name|patterns
parameter_list|,
name|Patterns
name|defaultPatterns
parameter_list|,
name|boolean
name|applyDefaults
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Pattern
argument_list|>
name|enabledIncludePatterns
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pattern
argument_list|>
name|enabledExcludePatterns
decl_stmt|;
if|if
condition|(
name|explicitValues
operator|==
literal|null
operator|&&
name|patterns
operator|==
literal|null
operator|&&
operator|!
name|applyDefaults
condition|)
block|{
return|return
name|currentValues
return|;
block|}
if|if
condition|(
name|patterns
operator|!=
literal|null
condition|)
block|{
name|enabledIncludePatterns
operator|=
name|patterns
operator|.
name|getIncludes
argument_list|()
expr_stmt|;
name|enabledExcludePatterns
operator|=
name|patterns
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enabledIncludePatterns
operator|=
name|defaultPatterns
operator|.
name|getIncludes
argument_list|()
expr_stmt|;
name|enabledExcludePatterns
operator|=
name|defaultPatterns
operator|.
name|getExcludes
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|filter
argument_list|(
name|explicitValues
argument_list|,
name|availableValues
argument_list|,
name|enabledIncludePatterns
argument_list|,
name|enabledExcludePatterns
argument_list|)
return|;
block|}
comment|/**      * Filters the values in {@code availableValues} returning only the values that      * are explicitly listed in {@code explicitValues} (returns them regardless      * of if they appear in {@code availableValues} or not) if {@code explicitValues} is not      * {@code null} or as match the patterns in {@code includePatterns} and do      * not match the patterns in {@code excludePatterns} if {@code explicitValues} is {@code null}.      *       * @param explicitValues the optional explicit values to use      * @param availableValues the available values to filter from if {@code explicitValues} is {@code null}      * @param includePatterns the patterns to use for inclusion filtering, required if {@code explicitValues} is {@code null}      * @param excludePatterns the patterns to use for exclusion filtering, required if {@code explicitValues} is {@code null}      *      * @return the filtered values      */
DECL|method|filter (Collection<String> explicitValues, Collection<String> availableValues, List<Pattern> includePatterns, List<Pattern> excludePatterns)
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|explicitValues
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|availableValues
parameter_list|,
name|List
argument_list|<
name|Pattern
argument_list|>
name|includePatterns
parameter_list|,
name|List
argument_list|<
name|Pattern
argument_list|>
name|excludePatterns
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|returnValues
decl_stmt|;
comment|// Explicit list has precedence over filters, even when the list is
comment|// empty.
if|if
condition|(
name|explicitValues
operator|!=
literal|null
condition|)
block|{
name|returnValues
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|explicitValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|returnValues
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|availableValues
control|)
block|{
if|if
condition|(
name|this
operator|.
name|matchesOneOf
argument_list|(
name|value
argument_list|,
name|includePatterns
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|matchesOneOf
argument_list|(
name|value
argument_list|,
name|excludePatterns
argument_list|)
condition|)
block|{
name|returnValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|returnValues
return|;
block|}
comment|/**      * Returns true if and only if the value is matched by one or more of the supplied patterns.      *      * @param value the value to match      * @param patterns the patterns to try to match against      */
DECL|method|matchesOneOf (String value, List<Pattern> patterns)
specifier|protected
name|boolean
name|matchesOneOf
parameter_list|(
name|String
name|value
parameter_list|,
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
parameter_list|)
block|{
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|patterns
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|matches
return|;
block|}
comment|/**      * Configures a {@code T} based on the related configuration options.      */
DECL|interface|Configurer
interface|interface
name|Configurer
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**          * Configures a {@code T} based on the related configuration options.          * The return value from this method may be {@code object} or it          * may be a decorated instance there of. Consequently, any subsequent          * actions on {@code object} must be performed using the returned value.          *          * @param object the object to configure          * @return {@code object} or a decorated instance there of          */
DECL|method|configure (T object)
name|T
name|configure
parameter_list|(
name|T
name|object
parameter_list|)
function_decl|;
block|}
comment|/**      * Makes a decorated {@link SSLContext} appear as a normal {@code SSLContext}.      */
DECL|class|SSLContextDecorator
specifier|protected
specifier|static
specifier|final
class|class
name|SSLContextDecorator
extends|extends
name|SSLContext
block|{
DECL|method|SSLContextDecorator (SSLContextSpiDecorator decorator)
specifier|public
name|SSLContextDecorator
parameter_list|(
name|SSLContextSpiDecorator
name|decorator
parameter_list|)
block|{
name|super
argument_list|(
name|decorator
argument_list|,
name|decorator
operator|.
name|getDelegate
argument_list|()
operator|.
name|getProvider
argument_list|()
argument_list|,
name|decorator
operator|.
name|getDelegate
argument_list|()
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SSLContextDecorator [{}] decorating SSLContext [{}]."
argument_list|,
name|this
argument_list|,
name|decorator
operator|.
name|getDelegate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"SSLContext[hash=%h, provider=%s, protocol=%s, needClientAuth=%s, "
operator|+
literal|"wantClientAuth=%s\n\tdefaultProtocols=%s\n\tdefaultChiperSuites=%s\n\tsupportedProtocols=%s\n\tsupportedChiperSuites=%s\n]"
argument_list|,
name|hashCode
argument_list|()
argument_list|,
name|getProvider
argument_list|()
argument_list|,
name|getProtocol
argument_list|()
argument_list|,
name|getDefaultSSLParameters
argument_list|()
operator|.
name|getNeedClientAuth
argument_list|()
argument_list|,
name|getDefaultSSLParameters
argument_list|()
operator|.
name|getWantClientAuth
argument_list|()
argument_list|,
name|collectionAsCommaDelimitedString
argument_list|(
name|getDefaultSSLParameters
argument_list|()
operator|.
name|getProtocols
argument_list|()
argument_list|)
argument_list|,
name|collectionAsCommaDelimitedString
argument_list|(
name|getDefaultSSLParameters
argument_list|()
operator|.
name|getCipherSuites
argument_list|()
argument_list|)
argument_list|,
name|collectionAsCommaDelimitedString
argument_list|(
name|getSupportedSSLParameters
argument_list|()
operator|.
name|getProtocols
argument_list|()
argument_list|)
argument_list|,
name|collectionAsCommaDelimitedString
argument_list|(
name|getSupportedSSLParameters
argument_list|()
operator|.
name|getCipherSuites
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Class needed to provide decoration of an existing {@link SSLContext}.      * Since {@code SSLContext} is an abstract class and requires an instance of      * {@link SSLContextSpi}, this class effectively wraps an      * {@code SSLContext} as if it were an {@code SSLContextSpi}, allowing us to      * achieve decoration.      */
DECL|class|SSLContextSpiDecorator
specifier|protected
specifier|static
specifier|final
class|class
name|SSLContextSpiDecorator
extends|extends
name|SSLContextSpi
block|{
DECL|field|context
specifier|private
specifier|final
name|SSLContext
name|context
decl_stmt|;
DECL|field|sslEngineConfigurers
specifier|private
specifier|final
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
argument_list|>
name|sslEngineConfigurers
decl_stmt|;
DECL|field|sslSocketFactoryConfigurers
specifier|private
specifier|final
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
argument_list|>
name|sslSocketFactoryConfigurers
decl_stmt|;
DECL|field|sslServerSocketFactoryConfigurers
specifier|private
specifier|final
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
argument_list|>
name|sslServerSocketFactoryConfigurers
decl_stmt|;
DECL|method|SSLContextSpiDecorator (SSLContext context, List<Configurer<SSLEngine>> sslEngineConfigurers, List<Configurer<SSLSocketFactory>> sslSocketFactoryConfigurers, List<Configurer<SSLServerSocketFactory>> sslServerSocketFactoryConfigurers)
specifier|public
name|SSLContextSpiDecorator
parameter_list|(
name|SSLContext
name|context
parameter_list|,
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
argument_list|>
name|sslEngineConfigurers
parameter_list|,
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
argument_list|>
name|sslSocketFactoryConfigurers
parameter_list|,
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
argument_list|>
name|sslServerSocketFactoryConfigurers
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|sslEngineConfigurers
operator|=
name|sslEngineConfigurers
expr_stmt|;
name|this
operator|.
name|sslSocketFactoryConfigurers
operator|=
name|sslSocketFactoryConfigurers
expr_stmt|;
name|this
operator|.
name|sslServerSocketFactoryConfigurers
operator|=
name|sslServerSocketFactoryConfigurers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|engineCreateSSLEngine ()
specifier|protected
name|SSLEngine
name|engineCreateSSLEngine
parameter_list|()
block|{
name|SSLEngine
name|engine
init|=
name|this
operator|.
name|context
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SSLEngine [{}] created from SSLContext [{}]."
argument_list|,
name|engine
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|configureSSLEngine
argument_list|(
name|engine
argument_list|)
expr_stmt|;
return|return
name|engine
return|;
block|}
annotation|@
name|Override
DECL|method|engineCreateSSLEngine (String peerHost, int peerPort)
specifier|protected
name|SSLEngine
name|engineCreateSSLEngine
parameter_list|(
name|String
name|peerHost
parameter_list|,
name|int
name|peerPort
parameter_list|)
block|{
name|SSLEngine
name|engine
init|=
name|this
operator|.
name|context
operator|.
name|createSSLEngine
argument_list|(
name|peerHost
argument_list|,
name|peerPort
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SSLEngine [{}] created from SSLContext [{}]."
argument_list|,
name|engine
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|configureSSLEngine
argument_list|(
name|engine
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|engineGetClientSessionContext ()
specifier|protected
name|SSLSessionContext
name|engineGetClientSessionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
operator|.
name|getClientSessionContext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|engineGetServerSessionContext ()
specifier|protected
name|SSLSessionContext
name|engineGetServerSessionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
operator|.
name|getServerSessionContext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|engineGetServerSocketFactory ()
specifier|protected
name|SSLServerSocketFactory
name|engineGetServerSocketFactory
parameter_list|()
block|{
name|SSLServerSocketFactory
name|factory
init|=
name|this
operator|.
name|context
operator|.
name|getServerSocketFactory
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SSLServerSocketFactoryEngine [{}] created from SSLContext [{}]."
argument_list|,
name|factory
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|configureSSLServerSocketFactory
argument_list|(
name|factory
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|engineGetSocketFactory ()
specifier|protected
name|SSLSocketFactory
name|engineGetSocketFactory
parameter_list|()
block|{
name|SSLSocketFactory
name|factory
init|=
name|this
operator|.
name|context
operator|.
name|getSocketFactory
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SSLSocketFactory [{}] created from SSLContext [{}]."
argument_list|,
name|factory
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|configureSSLSocketFactory
argument_list|(
name|factory
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|engineInit (KeyManager[] km, TrustManager[] tm, SecureRandom random)
specifier|protected
name|void
name|engineInit
parameter_list|(
name|KeyManager
index|[]
name|km
parameter_list|,
name|TrustManager
index|[]
name|tm
parameter_list|,
name|SecureRandom
name|random
parameter_list|)
throws|throws
name|KeyManagementException
block|{
name|this
operator|.
name|context
operator|.
name|init
argument_list|(
name|km
argument_list|,
name|tm
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
DECL|method|getDelegate ()
specifier|protected
name|SSLContext
name|getDelegate
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
comment|/**          * Configures an {@link SSLEngine} based on the configurers in instance.          * The return value from this method may be {@code engine} or it may be          * a decorated instance there of. Consequently, any subsequent actions          * on {@code engine} must be performed using the returned value.          *           * @param engine the engine to configure          * @return {@code engine} or a decorated instance there of          */
DECL|method|configureSSLEngine (SSLEngine engine)
specifier|protected
name|SSLEngine
name|configureSSLEngine
parameter_list|(
name|SSLEngine
name|engine
parameter_list|)
block|{
name|SSLEngine
name|workingEngine
init|=
name|engine
decl_stmt|;
for|for
control|(
name|Configurer
argument_list|<
name|SSLEngine
argument_list|>
name|configurer
range|:
name|this
operator|.
name|sslEngineConfigurers
control|)
block|{
name|workingEngine
operator|=
name|configurer
operator|.
name|configure
argument_list|(
name|workingEngine
argument_list|)
expr_stmt|;
block|}
return|return
name|workingEngine
return|;
block|}
comment|/**          * Configures an {@link SSLSocketFactory} based on the configurers in          * this instance. The return value from this method may be          * {@code factory} or it may be a decorated instance there of.          * Consequently, any subsequent actions on {@code factory} must be          * performed using the returned value.          *           * @param factory the factory to configure          * @return {@code factory} or a decorated instance there of          */
DECL|method|configureSSLSocketFactory (SSLSocketFactory factory)
specifier|protected
name|SSLSocketFactory
name|configureSSLSocketFactory
parameter_list|(
name|SSLSocketFactory
name|factory
parameter_list|)
block|{
name|SSLSocketFactory
name|workingFactory
init|=
name|factory
decl_stmt|;
for|for
control|(
name|Configurer
argument_list|<
name|SSLSocketFactory
argument_list|>
name|configurer
range|:
name|this
operator|.
name|sslSocketFactoryConfigurers
control|)
block|{
name|workingFactory
operator|=
name|configurer
operator|.
name|configure
argument_list|(
name|workingFactory
argument_list|)
expr_stmt|;
block|}
return|return
name|workingFactory
return|;
block|}
comment|/**          * Configures an {@link SSLServerSocketFactory} based on the          * configurers in this instance. The return value from this method may be          * {@code factory} or it may be a decorated instance there of.          * Consequently, any subsequent actions on {@code factory} must be          * performed using the returned value.          *           * @param factory the factory to configure          * @return {@code factory} or a decorated instance there of          */
DECL|method|configureSSLServerSocketFactory ( SSLServerSocketFactory factory)
specifier|protected
name|SSLServerSocketFactory
name|configureSSLServerSocketFactory
parameter_list|(
name|SSLServerSocketFactory
name|factory
parameter_list|)
block|{
name|SSLServerSocketFactory
name|workingFactory
init|=
name|factory
decl_stmt|;
for|for
control|(
name|Configurer
argument_list|<
name|SSLServerSocketFactory
argument_list|>
name|configurer
range|:
name|this
operator|.
name|sslServerSocketFactoryConfigurers
control|)
block|{
name|workingFactory
operator|=
name|configurer
operator|.
name|configure
argument_list|(
name|workingFactory
argument_list|)
expr_stmt|;
block|}
return|return
name|workingFactory
return|;
block|}
block|}
comment|/**      * A decorator that enables the application of configuration options to be      * applied to created sockets even after this factory has been created and      * turned over to client code.      */
DECL|class|SSLServerSocketFactoryDecorator
specifier|protected
specifier|static
specifier|final
class|class
name|SSLServerSocketFactoryDecorator
extends|extends
name|SSLServerSocketFactory
block|{
DECL|field|sslServerSocketFactory
specifier|private
specifier|final
name|SSLServerSocketFactory
name|sslServerSocketFactory
decl_stmt|;
DECL|field|sslServerSocketConfigurers
specifier|private
specifier|final
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
argument_list|>
name|sslServerSocketConfigurers
decl_stmt|;
DECL|method|SSLServerSocketFactoryDecorator (SSLServerSocketFactory sslServerSocketFactory, List<Configurer<SSLServerSocket>> sslServerSocketConfigurers)
specifier|public
name|SSLServerSocketFactoryDecorator
parameter_list|(
name|SSLServerSocketFactory
name|sslServerSocketFactory
parameter_list|,
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
argument_list|>
name|sslServerSocketConfigurers
parameter_list|)
block|{
name|this
operator|.
name|sslServerSocketFactory
operator|=
name|sslServerSocketFactory
expr_stmt|;
name|this
operator|.
name|sslServerSocketConfigurers
operator|=
name|sslServerSocketConfigurers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultCipherSuites ()
specifier|public
name|String
index|[]
name|getDefaultCipherSuites
parameter_list|()
block|{
return|return
name|this
operator|.
name|sslServerSocketFactory
operator|.
name|getDefaultCipherSuites
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSupportedCipherSuites ()
specifier|public
name|String
index|[]
name|getSupportedCipherSuites
parameter_list|()
block|{
return|return
name|this
operator|.
name|sslServerSocketFactory
operator|.
name|getSupportedCipherSuites
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createServerSocket ()
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|configureSocket
argument_list|(
name|this
operator|.
name|sslServerSocketFactory
operator|.
name|createServerSocket
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createServerSocket (int port, int backlog, InetAddress ifAddress)
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|(
name|int
name|port
parameter_list|,
name|int
name|backlog
parameter_list|,
name|InetAddress
name|ifAddress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|configureSocket
argument_list|(
name|this
operator|.
name|sslServerSocketFactory
operator|.
name|createServerSocket
argument_list|(
name|port
argument_list|,
name|backlog
argument_list|,
name|ifAddress
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createServerSocket (int port, int backlog)
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|(
name|int
name|port
parameter_list|,
name|int
name|backlog
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|configureSocket
argument_list|(
name|this
operator|.
name|sslServerSocketFactory
operator|.
name|createServerSocket
argument_list|(
name|port
argument_list|,
name|backlog
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createServerSocket (int port)
specifier|public
name|ServerSocket
name|createServerSocket
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|configureSocket
argument_list|(
name|this
operator|.
name|sslServerSocketFactory
operator|.
name|createServerSocket
argument_list|(
name|port
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDelegate ()
specifier|public
name|SSLServerSocketFactory
name|getDelegate
parameter_list|()
block|{
return|return
name|this
operator|.
name|sslServerSocketFactory
return|;
block|}
DECL|method|configureSocket (ServerSocket s)
specifier|private
name|ServerSocket
name|configureSocket
parameter_list|(
name|ServerSocket
name|s
parameter_list|)
block|{
name|SSLServerSocket
name|workingSocket
init|=
operator|(
name|SSLServerSocket
operator|)
name|s
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created ServerSocket [{}] from SslServerSocketFactory [{}]."
argument_list|,
name|s
argument_list|,
name|sslServerSocketFactory
argument_list|)
expr_stmt|;
for|for
control|(
name|Configurer
argument_list|<
name|SSLServerSocket
argument_list|>
name|configurer
range|:
name|this
operator|.
name|sslServerSocketConfigurers
control|)
block|{
name|workingSocket
operator|=
name|configurer
operator|.
name|configure
argument_list|(
name|workingSocket
argument_list|)
expr_stmt|;
block|}
return|return
name|workingSocket
return|;
block|}
block|}
comment|/**      * A decorator that enables the application of configuration options to be      * applied to created sockets even after this factory has been created and      * turned over to client code.      */
DECL|class|SSLSocketFactoryDecorator
specifier|protected
specifier|static
specifier|final
class|class
name|SSLSocketFactoryDecorator
extends|extends
name|SSLSocketFactory
block|{
DECL|field|sslSocketFactory
specifier|private
specifier|final
name|SSLSocketFactory
name|sslSocketFactory
decl_stmt|;
DECL|field|sslSocketConfigurers
specifier|private
specifier|final
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
argument_list|>
name|sslSocketConfigurers
decl_stmt|;
DECL|method|SSLSocketFactoryDecorator (SSLSocketFactory sslSocketFactory, List<Configurer<SSLSocket>> sslSocketConfigurers)
specifier|public
name|SSLSocketFactoryDecorator
parameter_list|(
name|SSLSocketFactory
name|sslSocketFactory
parameter_list|,
name|List
argument_list|<
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
argument_list|>
name|sslSocketConfigurers
parameter_list|)
block|{
name|this
operator|.
name|sslSocketFactory
operator|=
name|sslSocketFactory
expr_stmt|;
name|this
operator|.
name|sslSocketConfigurers
operator|=
name|sslSocketConfigurers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultCipherSuites ()
specifier|public
name|String
index|[]
name|getDefaultCipherSuites
parameter_list|()
block|{
return|return
name|sslSocketFactory
operator|.
name|getDefaultCipherSuites
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSupportedCipherSuites ()
specifier|public
name|String
index|[]
name|getSupportedCipherSuites
parameter_list|()
block|{
return|return
name|sslSocketFactory
operator|.
name|getSupportedCipherSuites
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createSocket ()
specifier|public
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|configureSocket
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSocket (Socket s, String host, int port, boolean autoClose)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|Socket
name|s
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|autoClose
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|configureSocket
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|s
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|autoClose
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSocket (String host, int port)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|configureSocket
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSocket (String host, int port, InetAddress localHost, int localPort)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localHost
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|configureSocket
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|localHost
argument_list|,
name|localPort
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSocket (InetAddress host, int port)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|configureSocket
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSocket (InetAddress address, int port, InetAddress localAddress, int localPort)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localAddress
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|configureSocket
argument_list|(
name|sslSocketFactory
operator|.
name|createSocket
argument_list|(
name|address
argument_list|,
name|port
argument_list|,
name|localAddress
argument_list|,
name|localPort
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDelegate ()
specifier|public
name|SSLSocketFactory
name|getDelegate
parameter_list|()
block|{
return|return
name|this
operator|.
name|sslSocketFactory
return|;
block|}
DECL|method|configureSocket (Socket s)
specifier|private
name|Socket
name|configureSocket
parameter_list|(
name|Socket
name|s
parameter_list|)
block|{
name|SSLSocket
name|workingSocket
init|=
operator|(
name|SSLSocket
operator|)
name|s
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created Socket [{}] from SocketFactory [{}]."
argument_list|,
name|s
argument_list|,
name|sslSocketFactory
argument_list|)
expr_stmt|;
for|for
control|(
name|Configurer
argument_list|<
name|SSLSocket
argument_list|>
name|configurer
range|:
name|this
operator|.
name|sslSocketConfigurers
control|)
block|{
name|workingSocket
operator|=
name|configurer
operator|.
name|configure
argument_list|(
name|workingSocket
argument_list|)
expr_stmt|;
block|}
return|return
name|workingSocket
return|;
block|}
block|}
DECL|method|createCipherSuiteLogMessage (String entityName)
specifier|private
specifier|static
name|String
name|createCipherSuiteLogMessage
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
literal|"Configuring "
operator|+
name|entityName
operator|+
literal|" [{}] with "
operator|+
name|LS
operator|+
literal|"\t explicitly set cipher suites [{}],"
operator|+
name|LS
operator|+
literal|"\t cipher suite patterns [{}],"
operator|+
name|LS
operator|+
literal|"\t available cipher suites [{}],"
operator|+
name|LS
operator|+
literal|"\t currently enabled cipher suites [{}],"
operator|+
name|LS
operator|+
literal|"\t and default cipher suite patterns [{}]."
operator|+
name|LS
operator|+
literal|"\t Resulting enabled cipher suites are [{}]."
return|;
block|}
DECL|method|createProtocolLogMessage (String entityName)
specifier|private
specifier|static
name|String
name|createProtocolLogMessage
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
literal|"Configuring "
operator|+
name|entityName
operator|+
literal|" [{}] with "
operator|+
name|LS
operator|+
literal|"\t explicitly set protocols [{}],"
operator|+
name|LS
operator|+
literal|"\t protocol patterns [{}],"
operator|+
name|LS
operator|+
literal|"\t available protocols [{}],"
operator|+
name|LS
operator|+
literal|"\t currently enabled protocols [{}],"
operator|+
name|LS
operator|+
literal|"\t and default protocol patterns [{}]."
operator|+
name|LS
operator|+
literal|"\t Resulting enabled protocols are [{}]."
return|;
block|}
block|}
end_class

end_unit

