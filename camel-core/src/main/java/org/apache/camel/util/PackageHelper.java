begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Some helper methods for working with Java packages and versioning.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|PackageHelper
specifier|public
specifier|final
class|class
name|PackageHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PackageHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PackageHelper ()
specifier|private
name|PackageHelper
parameter_list|()
block|{
comment|// Utility Class
block|}
comment|/**      * Returns true if the version number of the given package name can be found and is greater than or equal to the minimum version.      *      * For package names which include multiple dots, the dots are removed. So for example a spring version of 2.5.1 is converted to      * 2.51 so you can assert that its>= 2.51 (so above 2.50 and less than 2.52 etc).      *      * @param packageName the Java package name to compare      * @param minimumVersion the minimum version number      * @return true if the package name can be determined and if its greater than or equal to the minimum value      */
DECL|method|isValidVersion (String packageName, double minimumVersion)
specifier|public
specifier|static
name|boolean
name|isValidVersion
parameter_list|(
name|String
name|packageName
parameter_list|,
name|double
name|minimumVersion
parameter_list|)
block|{
try|try
block|{
name|Package
name|spring
init|=
name|Package
operator|.
name|getPackage
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|spring
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|spring
operator|.
name|getImplementationVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// lets remove any extra dots in the string...
name|int
name|idx
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|++
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|idx
decl_stmt|;
for|for
control|(
name|int
name|size
init|=
name|value
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
name|value
operator|=
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|double
name|number
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|number
operator|>=
name|minimumVersion
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to find out "
operator|+
name|packageName
operator|+
literal|" version: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

