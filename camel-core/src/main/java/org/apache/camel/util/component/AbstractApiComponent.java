begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Abstract base class for API Component Camel {@link org.apache.camel.Component} classes.  */
end_comment

begin_class
DECL|class|AbstractApiComponent
specifier|public
specifier|abstract
class|class
name|AbstractApiComponent
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|<
name|E
parameter_list|>
operator|&
name|ApiName
parameter_list|,
name|T
parameter_list|,
name|S
extends|extends
name|ApiCollection
parameter_list|<
name|E
parameter_list|,
name|T
parameter_list|>
parameter_list|>
extends|extends
name|UriEndpointComponent
implements|implements
name|EndpointCompleter
block|{
DECL|field|configuration
specifier|protected
name|T
name|configuration
decl_stmt|;
comment|// API collection
DECL|field|collection
specifier|protected
specifier|final
name|S
name|collection
decl_stmt|;
comment|// API name class
DECL|field|apiNameClass
specifier|protected
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|apiNameClass
decl_stmt|;
DECL|method|AbstractApiComponent (Class<? extends Endpoint> endpointClass, Class<E> apiNameClass, S collection)
specifier|public
name|AbstractApiComponent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|endpointClass
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|apiNameClass
parameter_list|,
name|S
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|endpointClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|apiNameClass
operator|=
name|apiNameClass
expr_stmt|;
block|}
DECL|method|AbstractApiComponent (CamelContext context, Class<? extends Endpoint> endpointClass, Class<E> apiNameClass, S collection)
specifier|public
name|AbstractApiComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|endpointClass
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|apiNameClass
parameter_list|,
name|S
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|endpointClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|apiNameClass
operator|=
name|apiNameClass
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// split remaining path to get API name and method
specifier|final
name|String
index|[]
name|pathElements
init|=
name|remaining
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|apiNameStr
decl_stmt|;
name|String
name|methodName
decl_stmt|;
switch|switch
condition|(
name|pathElements
operator|.
name|length
condition|)
block|{
case|case
literal|1
case|:
name|apiNameStr
operator|=
literal|""
expr_stmt|;
name|methodName
operator|=
name|pathElements
index|[
literal|0
index|]
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|apiNameStr
operator|=
name|pathElements
index|[
literal|0
index|]
expr_stmt|;
name|methodName
operator|=
name|pathElements
index|[
literal|1
index|]
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Invalid URI path ["
operator|+
name|remaining
operator|+
literal|"], must be of the format "
operator|+
name|collection
operator|.
name|getApiNames
argument_list|()
operator|+
literal|"/<operation-name>"
argument_list|)
throw|;
block|}
try|try
block|{
comment|// get API enum from apiName string
specifier|final
name|E
name|apiName
init|=
name|getApiName
argument_list|(
name|apiNameStr
argument_list|)
decl_stmt|;
specifier|final
name|T
name|endpointConfiguration
init|=
name|createEndpointConfiguration
argument_list|(
name|apiName
argument_list|)
decl_stmt|;
specifier|final
name|Endpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|uri
argument_list|,
name|methodName
argument_list|,
name|apiName
argument_list|,
name|endpointConfiguration
argument_list|)
decl_stmt|;
comment|// set endpoint property inBody
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// configure endpoint properties and initialize state
name|endpoint
operator|.
name|configureProperties
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Invalid URI path prefix ["
operator|+
name|remaining
operator|+
literal|"], must be one of "
operator|+
name|collection
operator|.
name|getApiNames
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getApiName (String apiNameStr)
specifier|protected
specifier|abstract
name|E
name|getApiName
parameter_list|(
name|String
name|apiNameStr
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
DECL|method|createEndpoint (String uri, String methodName, E apiName, T endpointConfiguration)
specifier|protected
specifier|abstract
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|methodName
parameter_list|,
name|E
name|apiName
parameter_list|,
name|T
name|endpointConfiguration
parameter_list|)
function_decl|;
DECL|method|createEndpointConfiguration (E name)
specifier|protected
name|T
name|createEndpointConfiguration
parameter_list|(
name|E
name|name
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|componentProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// copy component configuration, if set
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|configuration
argument_list|,
name|componentProperties
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// create endpoint configuration with component properties
specifier|final
name|T
name|endpointConfiguration
init|=
name|collection
operator|.
name|getEndpointConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|endpointConfiguration
argument_list|,
name|componentProperties
argument_list|)
expr_stmt|;
return|return
name|endpointConfiguration
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|T
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (T configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|T
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|completeEndpointPath (ComponentConfiguration configuration, String completionText)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|completeEndpointPath
parameter_list|(
name|ComponentConfiguration
name|configuration
parameter_list|,
name|String
name|completionText
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|apiNames
init|=
name|collection
operator|.
name|getApiNames
argument_list|()
decl_stmt|;
name|boolean
name|useDefaultName
init|=
name|apiNames
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|apiNames
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
decl_stmt|;
comment|// check if there is an API name present
name|completionText
operator|=
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|completionText
argument_list|)
condition|?
literal|""
else|:
name|completionText
expr_stmt|;
specifier|final
name|int
name|prefixEnd
init|=
name|completionText
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
specifier|final
name|int
name|pathEnd
init|=
name|completionText
operator|.
name|lastIndexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
comment|// empty or incomplete API prefix, and no options, add API names or method names if useDefaultName
specifier|final
name|Map
argument_list|<
name|E
argument_list|,
name|?
extends|extends
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|apiHelpers
init|=
name|collection
operator|.
name|getApiHelpers
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefixEnd
operator|==
operator|-
literal|1
operator|&&
name|pathEnd
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|useDefaultName
condition|)
block|{
comment|// complete method names for default API
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|apiMethods
init|=
name|collection
operator|.
name|getApiMethods
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|apiMethod
init|=
name|apiMethods
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|helper
init|=
name|apiHelpers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|getCompletedMethods
argument_list|(
name|result
argument_list|,
name|completionText
argument_list|,
name|apiMethod
argument_list|,
name|helper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// complete API names
for|for
control|(
name|String
name|name
range|:
name|apiNames
control|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|completionText
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// path with complete API name prefix, but no options
block|}
elseif|else
if|if
condition|(
name|prefixEnd
operator|!=
operator|-
literal|1
operator|&&
name|pathEnd
operator|==
operator|-
literal|1
condition|)
block|{
comment|// complete method names for specified API
specifier|final
name|E
name|apiName
init|=
name|getApiNameOrNull
argument_list|(
name|completionText
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefixEnd
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|apiName
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|helper
init|=
name|apiHelpers
operator|.
name|get
argument_list|(
name|apiName
argument_list|)
decl_stmt|;
name|completionText
operator|=
name|completionText
operator|.
name|substring
argument_list|(
name|prefixEnd
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|,
name|E
argument_list|>
name|entry
range|:
name|collection
operator|.
name|getApiMethods
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|apiName
argument_list|)
condition|)
block|{
name|getCompletedMethods
argument_list|(
name|result
argument_list|,
name|completionText
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|helper
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// complete options
block|}
else|else
block|{
comment|// get last option text
specifier|final
name|int
name|lastParam
init|=
name|completionText
operator|.
name|lastIndexOf
argument_list|(
literal|'&'
argument_list|)
decl_stmt|;
name|String
name|optionText
decl_stmt|;
if|if
condition|(
name|lastParam
operator|!=
operator|-
literal|1
condition|)
block|{
name|optionText
operator|=
name|completionText
operator|.
name|substring
argument_list|(
name|lastParam
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optionText
operator|=
name|completionText
operator|.
name|substring
argument_list|(
name|pathEnd
argument_list|)
expr_stmt|;
block|}
name|String
name|methodName
init|=
literal|null
decl_stmt|;
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|helper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useDefaultName
condition|)
block|{
comment|// get default endpoint configuration and helper
name|methodName
operator|=
name|completionText
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathEnd
argument_list|)
expr_stmt|;
name|helper
operator|=
name|apiHelpers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// get API name and method name, if they exist
specifier|final
name|String
index|[]
name|pathElements
init|=
name|completionText
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathEnd
argument_list|)
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathElements
operator|.
name|length
operator|==
literal|2
condition|)
block|{
specifier|final
name|E
name|apiName
init|=
name|getApiNameOrNull
argument_list|(
name|pathElements
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|methodName
operator|=
name|pathElements
index|[
literal|1
index|]
expr_stmt|;
name|helper
operator|=
name|collection
operator|.
name|getHelper
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|helper
operator|!=
literal|null
operator|&&
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
comment|// get other options from configuration
name|Set
argument_list|<
name|String
argument_list|>
name|existingOptions
init|=
name|configuration
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// get all method options
try|try
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
name|helper
operator|.
name|getArguments
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nArgs
init|=
name|arguments
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|nArgs
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|options
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|removeAll
argument_list|(
name|existingOptions
argument_list|)
expr_stmt|;
comment|// return matching options
for|for
control|(
name|String
name|option
range|:
name|options
control|)
block|{
if|if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
name|optionText
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignore
parameter_list|)
block|{
comment|// thrown from getArguments() when no matching methods,
comment|// return an empty result
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|// returns null instead of throwing IllegalArgumentException for invalid name
DECL|method|getApiNameOrNull (String nameStr)
specifier|protected
name|E
name|getApiNameOrNull
parameter_list|(
name|String
name|nameStr
parameter_list|)
block|{
try|try
block|{
return|return
name|getApiName
argument_list|(
name|nameStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignore
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getCompletedMethods (List<String> result, String completionText, Class<? extends ApiMethod> apiMethod, ApiMethodHelper<? extends ApiMethod> helper)
specifier|protected
name|void
name|getCompletedMethods
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|,
name|String
name|completionText
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|apiMethod
parameter_list|,
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|helper
parameter_list|)
block|{
comment|// add potential method names
specifier|final
name|ApiMethod
index|[]
name|methods
init|=
name|apiMethod
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
for|for
control|(
name|ApiMethod
name|method
range|:
name|methods
control|)
block|{
specifier|final
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|completionText
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add potential aliases
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|aliases
init|=
name|helper
operator|.
name|getAliases
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|alias
operator|.
name|startsWith
argument_list|(
name|completionText
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

