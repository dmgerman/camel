begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.concurrent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|AbstractQueuedSynchronizer
import|;
end_import

begin_comment
comment|/**  * An alternative to a {@link java.util.concurrent.CountDownLatch}.  *<p/>  * This implementation also supports incrementing the latch count while counting down.  * It can also be used to count up to 0 from a negative integer.  */
end_comment

begin_class
DECL|class|CountingLatch
specifier|public
class|class
name|CountingLatch
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|Sync
specifier|private
specifier|final
class|class
name|Sync
extends|extends
name|AbstractQueuedSynchronizer
block|{
DECL|method|Sync ()
specifier|private
name|Sync
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|getCount ()
name|int
name|getCount
parameter_list|()
block|{
return|return
name|getState
argument_list|()
return|;
block|}
DECL|method|tryAcquireShared (int acquires)
specifier|public
name|int
name|tryAcquireShared
parameter_list|(
name|int
name|acquires
parameter_list|)
block|{
return|return
name|getState
argument_list|()
operator|==
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
DECL|method|tryReleaseShared (int delta)
specifier|public
name|boolean
name|tryReleaseShared
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
comment|// Decrement count; signal when transition to zero
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|c
init|=
name|getState
argument_list|()
decl_stmt|;
name|int
name|nextc
init|=
name|c
operator|+
name|delta
decl_stmt|;
if|if
condition|(
name|compareAndSetState
argument_list|(
name|c
argument_list|,
name|nextc
argument_list|)
condition|)
block|{
return|return
name|nextc
operator|==
literal|0
return|;
block|}
block|}
block|}
block|}
DECL|field|sync
specifier|private
specifier|final
name|Sync
name|sync
decl_stmt|;
comment|/**      * Create a new counting latch (starting count is 0)      */
DECL|method|CountingLatch ()
specifier|public
name|CountingLatch
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|sync
operator|=
operator|new
name|Sync
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the current count      */
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|sync
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * Increment the count with 1      */
DECL|method|increment ()
specifier|public
name|void
name|increment
parameter_list|()
block|{
name|sync
operator|.
name|releaseShared
argument_list|(
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Decrement the count with 1      */
DECL|method|decrement ()
specifier|public
name|void
name|decrement
parameter_list|()
block|{
name|sync
operator|.
name|releaseShared
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Await the latch reaching the count of 0      *      * @throws InterruptedException if the threads gets interrupted while waiting      */
DECL|method|await ()
specifier|public
name|void
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|sync
operator|.
name|acquireSharedInterruptibly
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wait for a given timeout while checking if the latch reached the count of 0      *      * @param timeout the value of the timeout      * @param unit the unit in which the timeout is expressed      * @return<code>true</code> if the latch has reached the count of 0 in the given time      * @throws InterruptedException if the thread gets interrupted while waiting      */
DECL|method|await (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|await
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|sync
operator|.
name|tryAcquireSharedNanos
argument_list|(
literal|1
argument_list|,
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

