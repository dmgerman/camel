begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Some helper methods for working with {@link Endpoint} instances  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|EndpointHelper
specifier|public
specifier|final
class|class
name|EndpointHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EndpointHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|EndpointHelper ()
specifier|private
name|EndpointHelper
parameter_list|()
block|{
comment|//Utility Class
block|}
comment|/**      * Creates a {@link PollingConsumer} and polls all pending messages on the endpoint      * and invokes the given {@link Processor} to process each {@link Exchange} and then closes      * down the consumer and throws any exceptions thrown.      */
DECL|method|pollEndpoint (Endpoint endpoint, Processor processor, long timeout)
specifier|public
specifier|static
name|void
name|pollEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|PollingConsumer
name|consumer
init|=
name|endpoint
operator|.
name|createPollingConsumer
argument_list|()
decl_stmt|;
try|try
block|{
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Exchange
name|exchange
init|=
name|consumer
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
name|consumer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to stop PollingConsumer: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates a {@link PollingConsumer} and polls all pending messages on the      * endpoint and invokes the given {@link Processor} to process each      * {@link Exchange} and then closes down the consumer and throws any      * exceptions thrown.      */
DECL|method|pollEndpoint (Endpoint endpoint, Processor processor)
specifier|public
specifier|static
name|void
name|pollEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|pollEndpoint
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
block|}
comment|/**      * Matches the endpoint with the given pattern.      *<p/>      * The match rules are applied in this order:      *<ul>      *<li>excact match, returns true</li>      *<li>wildcard match (pattern ends with a * and the uri starts with the pattern), returns true</li>      *<li>regular expression match, returns true</li>      *<li>otherwise returns false</li>      *</ul>      *      * @param uri  the endpoint uri      * @param pattern a pattern to match      * @return<tt>true</tt> if match,<tt>false</tt> otherwise.      */
DECL|method|matchEndpoint (String uri, String pattern)
specifier|public
specifier|static
name|boolean
name|matchEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
comment|// we need to test with and without scheme separators (//)
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// try without :// also
name|String
name|scheme
init|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|uri
argument_list|,
literal|"://"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|uri
argument_list|,
literal|"://"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doMatchEndpoint
argument_list|(
name|scheme
operator|+
literal|":"
operator|+
name|path
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|// try with :// also
name|String
name|scheme
init|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doMatchEndpoint
argument_list|(
name|scheme
operator|+
literal|"://"
operator|+
name|path
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// and fallback to test with the uri as is
return|return
name|doMatchEndpoint
argument_list|(
name|uri
argument_list|,
name|pattern
argument_list|)
return|;
block|}
DECL|method|doMatchEndpoint (String uri, String pattern)
specifier|private
specifier|static
name|boolean
name|doMatchEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
comment|// excact match
return|return
literal|true
return|;
block|}
comment|// we have wildcard support in that hence you can match with: file* to match any file endpoints
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
operator|&&
name|uri
operator|.
name|startsWith
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// match by regular expression
try|try
block|{
if|if
condition|(
name|uri
operator|.
name|matches
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// no match
return|return
literal|false
return|;
block|}
comment|/**      * Sets the regular properties on the given bean      *      * @param context the camel context      * @param bean the bean      * @param parameters parameters      * @throws Exception is thrown if setting property fails      */
DECL|method|setProperties (CamelContext context, Object bean, Map parameters)
specifier|public
specifier|static
name|void
name|setProperties
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|bean
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|bean
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the reference properties on the given bean      *<p/>      * This is convention over configuration, setting all reference parameters (using {@link #isReferenceParameter(String)}      * by looking it up in registry and setting it on the bean if possible.      *      * @param context the camel context      * @param bean the bean      * @param parameters parameters      * @throws Exception is thrown if setting property fails      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setReferenceProperties (CamelContext context, Object bean, Map parameters)
specifier|public
specifier|static
name|void
name|setReferenceProperties
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|bean
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
name|it
init|=
name|parameters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|v
operator|!=
literal|null
condition|?
name|v
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|isReferenceParameter
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|Object
name|ref
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hit
init|=
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|bean
argument_list|,
name|name
argument_list|,
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|hit
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured property: "
operator|+
name|name
operator|+
literal|" on bean: "
operator|+
name|bean
operator|+
literal|" with value: "
operator|+
name|ref
argument_list|)
expr_stmt|;
block|}
comment|// must remove as its a valid option and we could configure it
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Is the given parameter a reference parameter (starting with a # char)      *      * @param parameter the parameter      * @return<tt>true</tt> if its a reference parameter      */
DECL|method|isReferenceParameter (String parameter)
specifier|public
specifier|static
name|boolean
name|isReferenceParameter
parameter_list|(
name|String
name|parameter
parameter_list|)
block|{
return|return
name|parameter
operator|!=
literal|null
operator|&&
name|parameter
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

