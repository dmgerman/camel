begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.jsse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_comment
comment|/**  * Represents a set of regular expression based filter patterns for  * including and excluding content of some type.  */
end_comment

begin_class
DECL|class|FilterParameters
specifier|public
class|class
name|FilterParameters
block|{
DECL|field|include
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|include
decl_stmt|;
DECL|field|exclude
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|exclude
decl_stmt|;
comment|/**      * Returns a live copy of the list of patterns to include.      * The list of excludes takes precedence over the include patterns.      *      * @return the list of patterns to include      */
DECL|method|getInclude ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getInclude
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|include
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|include
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|include
return|;
block|}
comment|/**      * Returns a live copy of the list of patterns to exclude.      * This list takes precedence over the include patterns.      *      * @return the list of patterns to exclude      */
DECL|method|getExclude ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExclude
parameter_list|()
block|{
if|if
condition|(
name|exclude
operator|==
literal|null
condition|)
block|{
name|exclude
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|exclude
return|;
block|}
comment|/**      * Returns a list of compiled {@code Pattern}s based on the      * values of the include list.      *      * @return the list of compiled expressions, never {@code null}      *      * @throws PatternSyntaxException if any of the expressions are invalid      */
DECL|method|getIncludePatterns ()
specifier|public
name|List
argument_list|<
name|Pattern
argument_list|>
name|getIncludePatterns
parameter_list|()
block|{
return|return
name|this
operator|.
name|getPattern
argument_list|(
name|this
operator|.
name|getInclude
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a list of compiled {@code Pattern}s based on the      * values of the exclude list.      *      * @return the list of compiled expressions, never {@code null}      *       * @throws PatternSyntaxException if any of the expressions are invalid      */
DECL|method|getExcludePatterns ()
specifier|public
name|List
argument_list|<
name|Pattern
argument_list|>
name|getExcludePatterns
parameter_list|()
block|{
return|return
name|this
operator|.
name|getPattern
argument_list|(
name|this
operator|.
name|getExclude
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns an immutable collection of compiled filter patterns based on      * the state of this instance at the time of invocation.      */
DECL|method|getPatterns ()
specifier|public
name|Patterns
name|getPatterns
parameter_list|()
block|{
return|return
operator|new
name|Patterns
argument_list|(
name|this
operator|.
name|getIncludePatterns
argument_list|()
argument_list|,
name|this
operator|.
name|getExcludePatterns
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Compiles {@code Pattern}s for each expression in {@code patternStrings}.      *      * @param patternStrings the list of regular expressions to compile      *      * @return the list of compiled patterns      *      * @throws PatternSyntaxException if any of the expressions are invalid      */
DECL|method|getPattern (List<String> patternStrings)
specifier|protected
name|List
argument_list|<
name|Pattern
argument_list|>
name|getPattern
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|patternStrings
parameter_list|)
block|{
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
init|=
operator|new
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
argument_list|(
name|patternStrings
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|expression
range|:
name|patternStrings
control|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|patterns
return|;
block|}
comment|/**      * An immutable collection of compiled includes and excludes filter {@link Pattern}s.      */
DECL|class|Patterns
specifier|public
specifier|static
class|class
name|Patterns
block|{
DECL|field|includes
specifier|final
name|List
argument_list|<
name|Pattern
argument_list|>
name|includes
decl_stmt|;
DECL|field|excludes
specifier|final
name|List
argument_list|<
name|Pattern
argument_list|>
name|excludes
decl_stmt|;
DECL|method|Patterns (List<Pattern> includes, List<Pattern> excludes)
specifier|public
name|Patterns
parameter_list|(
name|List
argument_list|<
name|Pattern
argument_list|>
name|includes
parameter_list|,
name|List
argument_list|<
name|Pattern
argument_list|>
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|includes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
argument_list|(
name|includes
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
argument_list|(
name|excludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getIncludes ()
specifier|public
name|List
argument_list|<
name|Pattern
argument_list|>
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
DECL|method|getExcludes ()
specifier|public
name|List
argument_list|<
name|Pattern
argument_list|>
name|getExcludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"FilterParameters [include="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|getInclude
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|getInclude
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", exclude="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|getExclude
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|getExclude
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

