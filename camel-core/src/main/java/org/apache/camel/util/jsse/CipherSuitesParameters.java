begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.jsse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a list of TLS/SSL cipher suite names.  */
end_comment

begin_class
DECL|class|CipherSuitesParameters
specifier|public
class|class
name|CipherSuitesParameters
block|{
DECL|field|cipherSuite
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|cipherSuite
decl_stmt|;
comment|/**      * Returns a live reference to the list of cipher suite names.      *      * @return a reference to the list, never {@code null}      */
DECL|method|getCipherSuite ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCipherSuite
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|cipherSuite
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|cipherSuite
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|cipherSuite
return|;
block|}
comment|/**      * Sets the cipher suite. It creates a copy of the given cipher suite.      *      * @param cipherSuite cipher suite      */
DECL|method|setCipherSuite (List<String> cipherSuite)
specifier|public
name|void
name|setCipherSuite
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cipherSuite
parameter_list|)
block|{
name|this
operator|.
name|cipherSuite
operator|=
name|cipherSuite
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cipherSuite
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"CipherSuitesParameters[cipherSuite="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|getCipherSuite
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

