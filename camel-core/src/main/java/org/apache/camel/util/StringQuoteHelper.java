begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utility class for parsing quoted string which is intended for parameters, separated by comma.  */
end_comment

begin_class
DECL|class|StringQuoteHelper
specifier|public
specifier|final
class|class
name|StringQuoteHelper
block|{
DECL|method|StringQuoteHelper ()
specifier|private
name|StringQuoteHelper
parameter_list|()
block|{     }
comment|/**      * Returns the text wrapped double quotes      */
DECL|method|doubleQuote (String text)
specifier|public
specifier|static
name|String
name|doubleQuote
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|quote
argument_list|(
name|text
argument_list|,
literal|"\""
argument_list|)
return|;
block|}
comment|/**      * Returns the text wrapped single quotes      */
DECL|method|singleQuote (String text)
specifier|public
specifier|static
name|String
name|singleQuote
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|quote
argument_list|(
name|text
argument_list|,
literal|"'"
argument_list|)
return|;
block|}
comment|/**      * Wraps the text in the given quote text      *      * @param text the text to wrap in quotes      * @param quote the quote text added to the prefix and postfix of the text      *      * @return the text wrapped in the given quotes      */
DECL|method|quote (String text, String quote)
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|quote
parameter_list|)
block|{
return|return
name|quote
operator|+
name|text
operator|+
name|quote
return|;
block|}
comment|/**      * Splits the input safely honoring if values is enclosed in quotes.      *<p/>      * Though this method does not support double quoting values. A quoted value      * must start with the same start and ending quote, which is either a single      * quote or double quote value.      *<p/>      * Will<i>trim</i> each splitted value by default.      *      * @param input    the input      * @param separator the separator char to split the input, for example a comma.      * @return the input splitted, or<tt>null</tt> if the input is null.      */
DECL|method|splitSafeQuote (String input, char separator)
specifier|public
specifier|static
name|String
index|[]
name|splitSafeQuote
parameter_list|(
name|String
name|input
parameter_list|,
name|char
name|separator
parameter_list|)
block|{
return|return
name|splitSafeQuote
argument_list|(
name|input
argument_list|,
name|separator
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Splits the input safely honoring if values is enclosed in quotes.      *<p/>      * Though this method does not support double quoting values. A quoted value      * must start with the same start and ending quote, which is either a single      * quote or double quote value.      * \      * @param input    the input      * @param separator the separator char to split the input, for example a comma.      * @param trim      whether to trim each splitted value      * @return the input splitted, or<tt>null</tt> if the input is null.      */
DECL|method|splitSafeQuote (String input, char separator, boolean trim)
specifier|public
specifier|static
name|String
index|[]
name|splitSafeQuote
parameter_list|(
name|String
name|input
parameter_list|,
name|char
name|separator
parameter_list|,
name|boolean
name|trim
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|input
operator|.
name|indexOf
argument_list|(
name|separator
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no separator in data, so return single string with input as is
return|return
operator|new
name|String
index|[]
block|{
name|trim
condition|?
name|input
operator|.
name|trim
argument_list|()
else|:
name|input
block|}
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|singleQuoted
init|=
literal|false
decl_stmt|;
name|boolean
name|doubleQuoted
init|=
literal|false
decl_stmt|;
name|boolean
name|skipLeadingWhitespace
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|char
name|prev
init|=
name|i
operator|>
literal|0
condition|?
name|input
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
else|:
literal|0
decl_stmt|;
name|boolean
name|isQuoting
init|=
name|singleQuoted
operator|||
name|doubleQuoted
decl_stmt|;
if|if
condition|(
operator|!
name|doubleQuoted
operator|&&
name|ch
operator|==
literal|'\''
condition|)
block|{
if|if
condition|(
name|singleQuoted
operator|&&
name|prev
operator|==
name|ch
operator|&&
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// its an empty quote so add empty text
name|answer
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// special logic needed if this quote is the end
if|if
condition|(
name|i
operator|==
name|input
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|singleQuoted
operator|&&
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|text
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// do not trim a quoted string
name|answer
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|singleQuoted
operator|=
operator|!
name|singleQuoted
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|singleQuoted
operator|&&
name|ch
operator|==
literal|'"'
condition|)
block|{
if|if
condition|(
name|doubleQuoted
operator|&&
name|prev
operator|==
name|ch
operator|&&
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// its an empty quote so add empty text
name|answer
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// special logic needed if this quote is the end
if|if
condition|(
name|i
operator|==
name|input
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|doubleQuoted
operator|&&
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|text
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// do not trim a quoted string
name|answer
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|doubleQuoted
operator|=
operator|!
name|doubleQuoted
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|isQuoting
operator|&&
name|ch
operator|==
literal|' '
condition|)
block|{
if|if
condition|(
name|skipLeadingWhitespace
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isQuoting
operator|&&
name|ch
operator|==
name|separator
condition|)
block|{
comment|// add as answer if we are not in a quote
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|text
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|trim
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
comment|// any leftover
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|text
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|trim
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|answer
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

