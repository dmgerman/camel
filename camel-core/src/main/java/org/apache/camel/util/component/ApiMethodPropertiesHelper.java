begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class to work with ApiMethod arguments to be extended by components.  */
end_comment

begin_class
DECL|class|ApiMethodPropertiesHelper
specifier|public
specifier|abstract
class|class
name|ApiMethodPropertiesHelper
parameter_list|<
name|C
parameter_list|>
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ApiMethodPropertiesHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set of field names which are specific to the api, to be excluded from method argument considerations
DECL|field|componentConfigFields
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|componentConfigFields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|componentConfigClass
specifier|protected
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|componentConfigClass
decl_stmt|;
DECL|field|propertyPrefix
specifier|protected
specifier|final
name|String
name|propertyPrefix
decl_stmt|;
DECL|field|prefixLength
specifier|private
specifier|final
name|int
name|prefixLength
decl_stmt|;
DECL|field|camelCasePrefix
specifier|private
specifier|final
name|String
name|camelCasePrefix
decl_stmt|;
DECL|method|ApiMethodPropertiesHelper (Class<C> componentConfiguration, String propertyPrefix)
specifier|protected
name|ApiMethodPropertiesHelper
parameter_list|(
name|Class
argument_list|<
name|C
argument_list|>
name|componentConfiguration
parameter_list|,
name|String
name|propertyPrefix
parameter_list|)
block|{
name|this
operator|.
name|componentConfigClass
operator|=
name|componentConfiguration
expr_stmt|;
name|this
operator|.
name|propertyPrefix
operator|=
name|propertyPrefix
expr_stmt|;
name|this
operator|.
name|prefixLength
operator|=
name|propertyPrefix
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|propertyPrefix
operator|.
name|charAt
argument_list|(
name|prefixLength
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|this
operator|.
name|camelCasePrefix
operator|=
name|propertyPrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefixLength
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|camelCasePrefix
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|componentConfiguration
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|componentConfigFields
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets exchange header properties that start with propertyPrefix.      *      * @param exchange Camel exchange      * @param properties map to collect properties with required prefix      */
DECL|method|getExchangeProperties (Exchange exchange, Map<String, Object> properties)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getExchangeProperties
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|int
name|nProperties
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|propertyPrefix
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|prefixLength
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|nProperties
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|camelCasePrefix
operator|!=
literal|null
operator|&&
name|key
operator|.
name|startsWith
argument_list|(
name|camelCasePrefix
argument_list|)
condition|)
block|{
comment|// assuming all property names start with a lowercase character
specifier|final
name|String
name|propertyName
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|key
operator|.
name|charAt
argument_list|(
name|prefixLength
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|+
name|key
operator|.
name|substring
argument_list|(
name|prefixLength
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|nProperties
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found {} properties in exchange"
argument_list|,
name|nProperties
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
DECL|method|getEndpointProperties (Object endpointConfiguration, Map<String, Object> properties)
specifier|public
name|void
name|getEndpointProperties
parameter_list|(
name|Object
name|endpointConfiguration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|endpointConfiguration
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|names
operator|=
name|properties
operator|.
name|keySet
argument_list|()
expr_stmt|;
comment|// remove component config properties so we only have endpoint properties
name|names
operator|.
name|removeAll
argument_list|(
name|componentConfigFields
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found endpoint properties {}"
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
DECL|method|getEndpointPropertyNames (Object endpointConfiguration)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEndpointPropertyNames
parameter_list|(
name|Object
name|endpointConfiguration
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|getEndpointProperties
argument_list|(
name|endpointConfiguration
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|properties
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getValidEndpointProperties (Object endpointConfiguration)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getValidEndpointProperties
parameter_list|(
name|Object
name|endpointConfiguration
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|endpointConfiguration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|fields
argument_list|)
return|;
block|}
block|}
end_class

end_unit

