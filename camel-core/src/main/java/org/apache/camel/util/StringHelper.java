begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Helper methods for working with Strings.   */
end_comment

begin_class
DECL|class|StringHelper
specifier|public
specifier|final
class|class
name|StringHelper
block|{
comment|/**      * Constructor of utility class should be private.      */
DECL|method|StringHelper ()
specifier|private
name|StringHelper
parameter_list|()
block|{     }
comment|/**      * Ensures that<code>s</code> is friendly for a URL or file system.      *       * @param s String to be sanitized.      * @return sanitized version of<code>s</code>.      * @throws NullPointerException if<code>s</code> is<code>null</code>.      */
DECL|method|sanitize (String s)
specifier|public
specifier|static
name|String
name|sanitize
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'-'
argument_list|)
return|;
block|}
comment|/**      * Counts the number of times the given char is in the string      *      * @param s  the string      * @param ch the char      * @return number of times char is located in the string      */
DECL|method|countChar (String s, char ch)
specifier|public
specifier|static
name|int
name|countChar
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|matches
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|c
condition|)
block|{
name|matches
operator|++
expr_stmt|;
block|}
block|}
return|return
name|matches
return|;
block|}
DECL|method|removeQuotes (String s)
specifier|public
specifier|static
name|String
name|removeQuotes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
DECL|method|removeLeadingAndEndingQuotes (String s)
specifier|public
specifier|static
name|String
name|removeLeadingAndEndingQuotes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|s
return|;
block|}
DECL|method|isQuoted (String s)
specifier|public
specifier|static
name|boolean
name|isQuoted
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Encodes the text into safe XML by replacing<> and& with XML tokens      *      * @param text  the text      * @return the encoded text      */
DECL|method|xmlEncode (String text)
specifier|public
specifier|static
name|String
name|xmlEncode
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// must replace amp first, so we dont replace&lt; to amp later
return|return
name|text
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|"&amp;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"&quot;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
return|;
block|}
comment|/**      * Determines if the string has at least one letter in upper case      * @param text the text      * @return<tt>true</tt> if at least one letter is upper case,<tt>false</tt> otherwise      */
DECL|method|hasUpperCase (String text)
specifier|public
specifier|static
name|boolean
name|hasUpperCase
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|ch
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Does the expression have the language start token?      *      * @param expression the expression      * @param language the name of the language, such as simple      * @return<tt>true</tt> if the expression contains the start token,<tt>false</tt> otherwise      */
DECL|method|hasStartToken (String expression, String language)
specifier|public
specifier|static
name|boolean
name|hasStartToken
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|expression
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
name|expression
operator|.
name|indexOf
argument_list|(
literal|"$"
operator|+
name|language
operator|+
literal|"{"
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

