begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringQuoteHelper
operator|.
name|doubleQuote
import|;
end_import

begin_comment
comment|/**  * Helper methods for working with Strings.  */
end_comment

begin_class
DECL|class|StringHelper
specifier|public
specifier|final
class|class
name|StringHelper
block|{
comment|/**      * Constructor of utility class should be private.      */
DECL|method|StringHelper ()
specifier|private
name|StringHelper
parameter_list|()
block|{     }
comment|/**      * Ensures that<code>s</code> is friendly for a URL or file system.      *      * @param s String to be sanitized.      * @return sanitized version of<code>s</code>.      * @throws NullPointerException if<code>s</code> is<code>null</code>.      */
DECL|method|sanitize (String s)
specifier|public
specifier|static
name|String
name|sanitize
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'-'
argument_list|)
return|;
block|}
comment|/**      * Counts the number of times the given char is in the string      *      * @param s  the string      * @param ch the char      * @return number of times char is located in the string      */
DECL|method|countChar (String s, char ch)
specifier|public
specifier|static
name|int
name|countChar
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|matches
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|c
condition|)
block|{
name|matches
operator|++
expr_stmt|;
block|}
block|}
return|return
name|matches
return|;
block|}
comment|/**      * Limits the length of a string      *       * @param s the string      * @param maxLength the maximum length of the returned string      * @return s if the length of s is less than maxLength or the first maxLength characters of s      * @deprecated use {@link #limitLength(String, int)}      */
annotation|@
name|Deprecated
DECL|method|limitLenght (String s, int maxLength)
specifier|public
specifier|static
name|String
name|limitLenght
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
return|return
name|limitLength
argument_list|(
name|s
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
comment|/**      * Limits the length of a string      *      * @param s the string      * @param maxLength the maximum length of the returned string      * @return s if the length of s is less than maxLength or the first maxLength characters of s      */
DECL|method|limitLength (String s, int maxLength)
specifier|public
specifier|static
name|String
name|limitLength
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
return|return
name|s
operator|.
name|length
argument_list|()
operator|<=
name|maxLength
condition|?
name|s
else|:
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
comment|/**      * Removes all quotes (single and double) from the string      *      * @param s  the string      * @return the string without quotes (single and double)      */
DECL|method|removeQuotes (String s)
specifier|public
specifier|static
name|String
name|removeQuotes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
name|s
operator|=
name|replaceAll
argument_list|(
name|s
argument_list|,
literal|"'"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|replaceAll
argument_list|(
name|s
argument_list|,
literal|"\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**      * Removes all leading and ending quotes (single and double) from the string      *      * @param s  the string      * @return the string without leading and ending quotes (single and double)      */
DECL|method|removeLeadingAndEndingQuotes (String s)
specifier|public
specifier|static
name|String
name|removeLeadingAndEndingQuotes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
name|String
name|copy
init|=
name|s
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|copy
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|copy
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
return|return
name|copy
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|copy
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
if|if
condition|(
name|copy
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|copy
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
name|copy
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|copy
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|// no quotes, so return as-is
return|return
name|s
return|;
block|}
comment|/**      * Whether the string starts and ends with either single or double quotes.      *      * @param s the string      * @return<tt>true</tt> if the string starts and ends with either single or double quotes.      */
DECL|method|isQuoted (String s)
specifier|public
specifier|static
name|boolean
name|isQuoted
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Encodes the text into safe XML by replacing<> and& with XML tokens      *      * @param text  the text      * @return the encoded text      */
DECL|method|xmlEncode (String text)
specifier|public
specifier|static
name|String
name|xmlEncode
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// must replace amp first, so we dont replace&lt; to amp later
name|text
operator|=
name|replaceAll
argument_list|(
name|text
argument_list|,
literal|"&"
argument_list|,
literal|"&amp;"
argument_list|)
expr_stmt|;
name|text
operator|=
name|replaceAll
argument_list|(
name|text
argument_list|,
literal|"\""
argument_list|,
literal|"&quot;"
argument_list|)
expr_stmt|;
name|text
operator|=
name|replaceAll
argument_list|(
name|text
argument_list|,
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
expr_stmt|;
name|text
operator|=
name|replaceAll
argument_list|(
name|text
argument_list|,
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
comment|/**      * Determines if the string has at least one letter in upper case      * @param text the text      * @return<tt>true</tt> if at least one letter is upper case,<tt>false</tt> otherwise      */
DECL|method|hasUpperCase (String text)
specifier|public
specifier|static
name|boolean
name|hasUpperCase
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|ch
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Determines if the string is a fully qualified class name      */
DECL|method|isClassName (String text)
specifier|public
specifier|static
name|boolean
name|isClassName
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|split
init|=
name|text
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|lastToken
init|=
name|split
index|[
name|split
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|lastToken
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|Character
operator|.
name|isUpperCase
argument_list|(
name|lastToken
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Does the expression have the language start token?      *      * @param expression the expression      * @param language the name of the language, such as simple      * @return<tt>true</tt> if the expression contains the start token,<tt>false</tt> otherwise      */
DECL|method|hasStartToken (String expression, String language)
specifier|public
specifier|static
name|boolean
name|hasStartToken
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// for the simple language the expression start token could be "${"
if|if
condition|(
literal|"simple"
operator|.
name|equalsIgnoreCase
argument_list|(
name|language
argument_list|)
operator|&&
name|expression
operator|.
name|contains
argument_list|(
literal|"${"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|language
operator|!=
literal|null
operator|&&
name|expression
operator|.
name|contains
argument_list|(
literal|"$"
operator|+
name|language
operator|+
literal|"{"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Replaces all the from tokens in the given input string.      *<p/>      * This implementation is not recursive, not does it check for tokens in the replacement string.      *      * @param input  the input string      * @param from   the from string, must<b>not</b> be<tt>null</tt> or empty      * @param to     the replacement string, must<b>not</b> be empty      * @return the replaced string, or the input string if no replacement was needed      * @throws IllegalArgumentException if the input arguments is invalid      */
DECL|method|replaceAll (String input, String from, String to)
specifier|public
specifier|static
name|String
name|replaceAll
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
name|input
return|;
block|}
if|if
condition|(
name|from
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"from cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|to
operator|==
literal|null
condition|)
block|{
comment|// to can be empty, so only check for null
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"to cannot be null"
argument_list|)
throw|;
block|}
comment|// fast check if there is any from at all
if|if
condition|(
operator|!
name|input
operator|.
name|contains
argument_list|(
name|from
argument_list|)
condition|)
block|{
return|return
name|input
return|;
block|}
specifier|final
name|int
name|len
init|=
name|from
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|max
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|max
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|+
name|len
operator|<=
name|max
condition|)
block|{
name|String
name|token
init|=
name|input
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|to
argument_list|)
expr_stmt|;
comment|// fast forward
name|i
operator|=
name|i
operator|+
name|len
expr_stmt|;
continue|continue;
block|}
block|}
comment|// append single char
name|sb
operator|.
name|append
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// forward to next
name|i
operator|++
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Creates a json tuple with the given name/value pair.      *      * @param name  the name      * @param value the value      * @param isMap whether the tuple should be map      * @return the json      */
DECL|method|toJson (String name, String value, boolean isMap)
specifier|public
specifier|static
name|String
name|toJson
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|isMap
parameter_list|)
block|{
if|if
condition|(
name|isMap
condition|)
block|{
return|return
literal|"{ "
operator|+
name|doubleQuote
argument_list|(
name|name
argument_list|)
operator|+
literal|": "
operator|+
name|doubleQuote
argument_list|(
name|value
argument_list|)
operator|+
literal|" }"
return|;
block|}
else|else
block|{
return|return
name|doubleQuote
argument_list|(
name|name
argument_list|)
operator|+
literal|": "
operator|+
name|doubleQuote
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Asserts whether the string is<b>not</b> empty.      *      * @param value  the string to test      * @param name   the key that resolved the value      * @return the passed {@code value} as is      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notEmpty (String value, String name)
specifier|public
specifier|static
name|String
name|notEmpty
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified and not empty"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Asserts whether the string is<b>not</b> empty.      *      * @param value  the string to test      * @param on     additional description to indicate where this problem occurred (appended as toString())      * @param name   the key that resolved the value      * @return the passed {@code value} as is      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notEmpty (String value, String name, Object on)
specifier|public
specifier|static
name|String
name|notEmpty
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|on
parameter_list|)
block|{
if|if
condition|(
name|on
operator|==
literal|null
condition|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|value
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified and not empty on: "
operator|+
name|on
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|// TODO: add javadoc
DECL|method|splitOnCharacter (String value, String needle, int count)
specifier|public
specifier|static
name|String
index|[]
name|splitOnCharacter
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|needle
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|String
name|rc
index|[]
init|=
operator|new
name|String
index|[
name|count
index|]
decl_stmt|;
name|rc
index|[
literal|0
index|]
operator|=
name|value
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|v
init|=
name|rc
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|int
name|p
init|=
name|v
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
return|return
name|rc
return|;
block|}
name|rc
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|rc
index|[
name|i
index|]
operator|=
name|v
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Removes any starting characters on the given text which match the given      * character      *      * @param text the string      * @param ch the initial characters to remove      * @return either the original string or the new substring      */
DECL|method|removeStartingCharacters (String text, char ch)
specifier|public
specifier|static
name|String
name|removeStartingCharacters
parameter_list|(
name|String
name|text
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|text
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
name|ch
condition|)
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
return|return
name|text
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
return|;
block|}
return|return
name|text
return|;
block|}
comment|/**      * Capitalize the string (upper case first character)      *      * @param text  the string      * @return the string capitalized (upper case first character)      */
DECL|method|capitalize (String text)
specifier|public
specifier|static
name|String
name|capitalize
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|text
return|;
block|}
name|String
name|answer
init|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|1
condition|)
block|{
name|answer
operator|+=
name|text
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Returns the string after the given token      *      * @param text  the text      * @param after the token      * @return the text after the token, or<tt>null</tt> if text does not contain the token      */
DECL|method|after (String text, String after)
specifier|public
specifier|static
name|String
name|after
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|after
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
name|after
argument_list|)
operator|+
name|after
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns an object after the given token      *      * @param text  the text      * @param after the token      * @param mapper a mapping function to convert the string after the token to type T      * @return an Optional describing the result of applying a mapping function to the text after the token.      */
DECL|method|after (String text, String after, Function<String, T> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|after
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mapper
parameter_list|)
block|{
name|String
name|result
init|=
name|after
argument_list|(
name|text
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the string before the given token      *      * @param text the text      * @param before the token      * @return the text before the token, or<tt>null</tt> if text does not      *         contain the token      */
DECL|method|before (String text, String before)
specifier|public
specifier|static
name|String
name|before
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|before
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
name|before
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object before the given token      *      * @param text  the text      * @param before the token      * @param mapper a mapping function to convert the string before the token to type T      * @return an Optional describing the result of applying a mapping function to the text before the token.      */
DECL|method|before (String text, String before, Function<String, T> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|before
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|before
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mapper
parameter_list|)
block|{
name|String
name|result
init|=
name|before
argument_list|(
name|text
argument_list|,
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the string between the given tokens      *      * @param text  the text      * @param after the before token      * @param before the after token      * @return the text between the tokens, or<tt>null</tt> if text does not contain the tokens      */
DECL|method|between (String text, String after, String before)
specifier|public
specifier|static
name|String
name|between
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|,
name|String
name|before
parameter_list|)
block|{
name|text
operator|=
name|after
argument_list|(
name|text
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|before
argument_list|(
name|text
argument_list|,
name|before
argument_list|)
return|;
block|}
comment|/**      * Returns an object between the given token      *      * @param text  the text      * @param after the before token      * @param before the after token      * @param mapper a mapping function to convert the string between the token to type T      * @return an Optional describing the result of applying a mapping function to the text between the token.      */
DECL|method|between (String text, String after, String before, Function<String, T> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|between
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|after
parameter_list|,
name|String
name|before
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mapper
parameter_list|)
block|{
name|String
name|result
init|=
name|between
argument_list|(
name|text
argument_list|,
name|after
argument_list|,
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the string between the most outer pair of tokens      *<p/>      * The number of token pairs must be evenly, eg there must be same number of before and after tokens, otherwise<tt>null</tt> is returned      *<p/>      * This implementation skips matching when the text is either single or double quoted.      * For example:      *<tt>${body.matches("foo('bar')")</tt>      * Will not match the parenthesis from the quoted text.      *      * @param text  the text      * @param after the before token      * @param before the after token      * @return the text between the outer most tokens, or<tt>null</tt> if text does not contain the tokens      */
DECL|method|betweenOuterPair (String text, char before, char after)
specifier|public
specifier|static
name|String
name|betweenOuterPair
parameter_list|(
name|String
name|text
parameter_list|,
name|char
name|before
parameter_list|,
name|char
name|after
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|pos2
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|count2
init|=
literal|0
decl_stmt|;
name|boolean
name|singleQuoted
init|=
literal|false
decl_stmt|;
name|boolean
name|doubleQuoted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doubleQuoted
operator|&&
name|ch
operator|==
literal|'\''
condition|)
block|{
name|singleQuoted
operator|=
operator|!
name|singleQuoted
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|singleQuoted
operator|&&
name|ch
operator|==
literal|'\"'
condition|)
block|{
name|doubleQuoted
operator|=
operator|!
name|doubleQuoted
expr_stmt|;
block|}
if|if
condition|(
name|singleQuoted
operator|||
name|doubleQuoted
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ch
operator|==
name|before
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|after
condition|)
block|{
name|count2
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|==
name|before
operator|&&
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|pos
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|after
condition|)
block|{
name|pos2
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
operator|||
name|pos2
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// must be even paris
if|if
condition|(
name|count
operator|!=
name|count2
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|text
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|,
name|pos2
argument_list|)
return|;
block|}
comment|/**      * Returns an object between the most outer pair of tokens      *      * @param text  the text      * @param after the before token      * @param before the after token      * @param mapper a mapping function to convert the string between the most outer pair of tokens to type T      * @return an Optional describing the result of applying a mapping function to the text between the most outer pair of tokens.      */
DECL|method|betweenOuterPair (String text, char before, char after, Function<String, T> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|betweenOuterPair
parameter_list|(
name|String
name|text
parameter_list|,
name|char
name|before
parameter_list|,
name|char
name|after
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|mapper
parameter_list|)
block|{
name|String
name|result
init|=
name|betweenOuterPair
argument_list|(
name|text
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns true if the given name is a valid java identifier      */
DECL|method|isJavaIdentifier (String name)
specifier|public
specifier|static
name|boolean
name|isJavaIdentifier
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|size
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Cleans the string to a pure Java identifier so we can use it for loading class names.      *<p/>      * Especially from Spring DSL people can have \n \t or other characters that otherwise      * would result in ClassNotFoundException      *      * @param name the class name      * @return normalized classname that can be load by a class loader.      */
DECL|method|normalizeClassName (String name)
specifier|public
specifier|static
name|String
name|normalizeClassName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|name
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'['
operator|||
name|ch
operator|==
literal|']'
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Compares old and new text content and report back which lines are changed      *      * @param oldText  the old text      * @param newText  the new text      * @return a list of line numbers that are changed in the new text      */
DECL|method|changedLines (String oldText, String newText)
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|changedLines
parameter_list|(
name|String
name|oldText
parameter_list|,
name|String
name|newText
parameter_list|)
block|{
if|if
condition|(
name|oldText
operator|==
literal|null
operator|||
name|oldText
operator|.
name|equals
argument_list|(
name|newText
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|changed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|oldLines
init|=
name|oldText
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|String
index|[]
name|newLines
init|=
name|newText
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|newLine
init|=
name|newLines
index|[
name|i
index|]
decl_stmt|;
name|String
name|oldLine
init|=
name|i
operator|<
name|oldLines
operator|.
name|length
condition|?
name|oldLines
index|[
name|i
index|]
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|oldLine
operator|==
literal|null
condition|)
block|{
name|changed
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|newLine
operator|.
name|equals
argument_list|(
name|oldLine
argument_list|)
condition|)
block|{
name|changed
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Removes the leading and trailing whitespace and if the resulting      * string is empty returns {@code null}. Examples:      *<p>      * Examples:      *<blockquote><pre>      * trimToNull("abc") -> "abc"      * trimToNull(" abc") -> "abc"      * trimToNull(" abc ") -> "abc"      * trimToNull(" ") -> null      * trimToNull("") -> null      *</pre></blockquote>      */
DECL|method|trimToNull (final String given)
specifier|public
specifier|static
name|String
name|trimToNull
parameter_list|(
specifier|final
name|String
name|given
parameter_list|)
block|{
if|if
condition|(
name|given
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|trimmed
init|=
name|given
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimmed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|trimmed
return|;
block|}
block|}
end_class

end_unit

