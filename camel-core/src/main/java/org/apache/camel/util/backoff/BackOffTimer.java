begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.backoff
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple timer utility that use a linked {@link BackOff} to determine when  * a task should be executed.  */
end_comment

begin_class
DECL|class|BackOffTimer
specifier|public
class|class
name|BackOffTimer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BackOffTimer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
DECL|method|BackOffTimer (ScheduledExecutorService scheduler)
specifier|public
name|BackOffTimer
parameter_list|(
name|ScheduledExecutorService
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
comment|/**      * Schedule the given function/task to be executed some time in the future      * according to the given backOff.      */
DECL|method|schedule (BackOff backOff, ThrowingFunction<BackOffContext, Boolean, Exception> function)
specifier|public
name|Task
name|schedule
parameter_list|(
name|BackOff
name|backOff
parameter_list|,
name|ThrowingFunction
argument_list|<
name|BackOffContext
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
parameter_list|)
block|{
specifier|final
name|TaskImpl
name|task
init|=
operator|new
name|TaskImpl
argument_list|(
name|backOff
argument_list|,
name|function
argument_list|)
decl_stmt|;
name|long
name|delay
init|=
name|task
operator|.
name|getContext
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|delay
operator|!=
name|BackOff
operator|.
name|NEVER
condition|)
block|{
name|scheduler
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
comment|// ****************************************
comment|// TimerTask
comment|// ****************************************
DECL|interface|Task
specifier|public
interface|interface
name|Task
block|{
comment|/**          * Gets the {@link BackOffContext} associated with this task.          */
DECL|method|getContext ()
name|BackOffContext
name|getContext
parameter_list|()
function_decl|;
comment|/**          * Cancel the task.          */
DECL|method|cancel ()
name|void
name|cancel
parameter_list|()
function_decl|;
comment|/**          * Action to execute when the context is completed (cancelled or exhausted)          *          * @param whenCompleted the consumer.          */
DECL|method|whenComplete (BiConsumer<BackOffContext, Throwable> whenCompleted)
name|void
name|whenComplete
parameter_list|(
name|BiConsumer
argument_list|<
name|BackOffContext
argument_list|,
name|Throwable
argument_list|>
name|whenCompleted
parameter_list|)
function_decl|;
block|}
comment|// ****************************************
comment|// TimerTask
comment|// ****************************************
DECL|class|TaskImpl
specifier|private
specifier|final
class|class
name|TaskImpl
implements|implements
name|Task
implements|,
name|Runnable
block|{
DECL|field|context
specifier|private
specifier|final
name|BackOffContext
name|context
decl_stmt|;
DECL|field|function
specifier|private
specifier|final
name|ThrowingFunction
argument_list|<
name|BackOffContext
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
decl_stmt|;
DECL|field|futureRef
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futureRef
decl_stmt|;
DECL|field|consumers
specifier|private
specifier|final
name|List
argument_list|<
name|BiConsumer
argument_list|<
name|BackOffContext
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|consumers
decl_stmt|;
DECL|method|TaskImpl (BackOff backOff, ThrowingFunction<BackOffContext, Boolean, Exception> function)
name|TaskImpl
parameter_list|(
name|BackOff
name|backOff
parameter_list|,
name|ThrowingFunction
argument_list|<
name|BackOffContext
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
operator|new
name|BackOffContext
argument_list|(
name|backOff
argument_list|)
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
name|this
operator|.
name|consumers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|futureRef
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|context
operator|.
name|getStatus
argument_list|()
operator|==
name|BackOffContext
operator|.
name|Status
operator|.
name|Active
condition|)
block|{
try|try
block|{
specifier|final
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|context
operator|.
name|setLastAttemptTime
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|function
operator|.
name|apply
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|long
name|delay
init|=
name|context
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getStatus
argument_list|()
operator|!=
name|BackOffContext
operator|.
name|Status
operator|.
name|Active
condition|)
block|{
comment|// if the call to next makes the context not more
comment|// active, signal task completion.
name|complete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|setNextAttemptTime
argument_list|(
name|currentTime
operator|+
name|delay
argument_list|)
expr_stmt|;
comment|// Cache the scheduled future so it can be cancelled
comment|// later by Task.cancel()
name|futureRef
operator|.
name|lazySet
argument_list|(
name|scheduler
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if the function return false no more attempts should
comment|// be made so stop the context.
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// and signal the task as completed.
name|complete
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|accept
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getContext ()
specifier|public
name|BackOffContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|cancel ()
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|futureRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// signal task completion on cancel.
name|complete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|whenComplete (BiConsumer<BackOffContext, Throwable> whenCompleted)
specifier|public
name|void
name|whenComplete
parameter_list|(
name|BiConsumer
argument_list|<
name|BackOffContext
argument_list|,
name|Throwable
argument_list|>
name|whenCompleted
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|consumers
init|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|whenCompleted
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|complete ()
name|void
name|complete
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|consumers
init|)
block|{
name|consumers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|accept
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

