begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.backoff
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingFunction
import|;
end_import

begin_comment
comment|/**  * A simple timer utility that use a linked {@link BackOff} to determine when  * a task should be executed.  */
end_comment

begin_class
DECL|class|BackOffTimer
specifier|public
class|class
name|BackOffTimer
block|{
DECL|field|scheduler
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
DECL|method|BackOffTimer (ScheduledExecutorService scheduler)
specifier|public
name|BackOffTimer
parameter_list|(
name|ScheduledExecutorService
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
comment|/**      * Schedule the given function/task to be executed some time in the future      * according to the given backOff.      */
DECL|method|schedule (BackOff backOff, ThrowingFunction<BackOffContext, Boolean, Exception> function)
specifier|public
name|CompletableFuture
argument_list|<
name|BackOffContext
argument_list|>
name|schedule
parameter_list|(
name|BackOff
name|backOff
parameter_list|,
name|ThrowingFunction
argument_list|<
name|BackOffContext
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
parameter_list|)
block|{
specifier|final
name|BackOffContext
name|context
init|=
operator|new
name|BackOffContext
argument_list|(
name|backOff
argument_list|)
decl_stmt|;
specifier|final
name|Task
name|task
init|=
operator|new
name|Task
argument_list|(
name|context
argument_list|,
name|function
argument_list|)
decl_stmt|;
name|long
name|delay
init|=
name|context
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|delay
operator|!=
name|BackOff
operator|.
name|NEVER
condition|)
block|{
name|scheduler
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
comment|// ****************************************
comment|// TimerTask
comment|// ****************************************
DECL|class|Task
specifier|private
specifier|final
class|class
name|Task
extends|extends
name|CompletableFuture
argument_list|<
name|BackOffContext
argument_list|>
implements|implements
name|Runnable
block|{
DECL|field|context
specifier|private
specifier|final
name|BackOffContext
name|context
decl_stmt|;
DECL|field|function
specifier|private
specifier|final
name|ThrowingFunction
argument_list|<
name|BackOffContext
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
decl_stmt|;
DECL|method|Task (BackOffContext context, ThrowingFunction<BackOffContext, Boolean, Exception> function)
name|Task
parameter_list|(
name|BackOffContext
name|context
parameter_list|,
name|ThrowingFunction
argument_list|<
name|BackOffContext
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|context
operator|.
name|isExhausted
argument_list|()
operator|||
name|isDone
argument_list|()
operator|||
name|isCancelled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isDone
argument_list|()
condition|)
block|{
name|complete
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
if|if
condition|(
name|function
operator|.
name|apply
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|long
name|delay
init|=
name|context
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isExhausted
argument_list|()
condition|)
block|{
name|complete
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|context
operator|.
name|isExhausted
argument_list|()
operator|&&
operator|!
name|isDone
argument_list|()
operator|&&
operator|!
name|isCancelled
argument_list|()
condition|)
block|{
name|scheduler
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|complete
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
return|;
block|}
DECL|method|complete ()
name|boolean
name|complete
parameter_list|()
block|{
return|return
name|super
operator|.
name|complete
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

