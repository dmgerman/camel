begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
DECL|class|WeakThreadLocal
specifier|public
specifier|final
class|class
name|WeakThreadLocal
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|T
argument_list|>
block|{
DECL|field|cache
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|WeakReference
argument_list|<
name|T
argument_list|>
argument_list|>
name|cache
decl_stmt|;
DECL|field|supplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
decl_stmt|;
DECL|method|WeakThreadLocal (Supplier<T> supplier)
specifier|public
name|WeakThreadLocal
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|supplier
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|supplier
argument_list|,
literal|"value supplier"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
block|{
name|T
name|value
init|=
literal|null
decl_stmt|;
name|WeakReference
argument_list|<
name|T
argument_list|>
name|ref
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
name|cache
operator|.
name|set
argument_list|(
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|withSupplier (Supplier<T> supplier)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|WeakThreadLocal
argument_list|<
name|T
argument_list|>
name|withSupplier
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
operator|new
name|WeakThreadLocal
argument_list|<>
argument_list|(
name|supplier
argument_list|)
return|;
block|}
block|}
end_class

end_unit

