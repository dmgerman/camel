begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
package|;
end_package

begin_comment
comment|/**  * @version $Revision: $  */
end_comment

begin_class
DECL|class|Expressions
specifier|public
class|class
name|Expressions
block|{
comment|/**      * Returns an expression for the header value with the given name      *      * @param headerName the name of the header the expression will return      * @return an expression object which will return the header value      */
DECL|method|headerExpression (final String headerName)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
name|Expression
argument_list|<
name|E
argument_list|>
name|headerExpression
parameter_list|(
specifier|final
name|String
name|headerName
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
name|Object
name|header
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
comment|// lets try the exchange header
name|header
operator|=
name|exchange
operator|.
name|getHeaders
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"header("
operator|+
name|headerName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the contant value      *      * @param value the value the expression will return      * @return an expression object which will return the constant value      */
DECL|method|constantExpression (final Object value)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
name|Expression
argument_list|<
name|E
argument_list|>
name|constantExpression
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|value
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

