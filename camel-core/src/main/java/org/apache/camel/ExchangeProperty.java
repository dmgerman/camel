begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Represents an instance and a type safe registry of well known Camel Exchange properties.  *<p/>  *<b>Usage pattern:</b>  *<br/>In your code register a property that you wish to pass via Camel Exchange:  *<pre>  *      public static final ExchangeProperty<Boolean> myProperty =  *            new ExchangeProperty<Boolean>("myProperty", "org.apache.myproject.mypackage.myproperty", Boolean.class);  *  *  Then in your code set this property's value:  *      myProperty.set(exchange, Boolean.TRUE);  *  *  Check the value of this property where required:  *      ExchangeProperty<?> property = ExchangeProperty.get("myProperty");  *      if (property != null&& property.get(exchange) == Boolean.TRUE) {  *           // do your thing ...  *       }  *  Or  *      Boolean value = myProperty.get(exchange);  *      if (value == Boolean.TRUE) {  *          // do your thing  *      }  *  *  When your code no longer requires this property then deregister it:  *      ExchangeProperty.deregister(myProperty);  *  Or  *      ExchangeProperty.deregister("myProperty");  *</pre>  *  *<b>Note:</b> that if ExchangeProperty instance get or set methods are used then type checks  *  of property's value are performed and a runtime exception can be thrown if type  *  safety is violated.  */
end_comment

begin_class
DECL|class|ExchangeProperty
specifier|public
class|class
name|ExchangeProperty
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
argument_list|>
name|VALUES
init|=
operator|new
name|ArrayList
argument_list|<
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LITERAL_MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
argument_list|>
name|LITERAL_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|NAME_MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
argument_list|>
name|NAME_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|literal
specifier|private
specifier|final
name|String
name|literal
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
DECL|method|ExchangeProperty (String literal, String name, Class<T> type)
specifier|public
name|ExchangeProperty
parameter_list|(
name|String
name|literal
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|literal
operator|=
name|literal
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|literal ()
specifier|public
name|String
name|literal
parameter_list|()
block|{
return|return
name|literal
return|;
block|}
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|type ()
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|get (Exchange exchange)
specifier|public
name|T
name|get
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|get (String literal)
specifier|public
specifier|static
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
name|get
parameter_list|(
name|String
name|literal
parameter_list|)
block|{
return|return
name|LITERAL_MAP
operator|.
name|get
argument_list|(
name|literal
argument_list|)
return|;
block|}
DECL|method|getByName (String name)
specifier|public
specifier|static
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
name|getByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|NAME_MAP
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|set (Exchange exchange, T value)
specifier|public
name|T
name|set
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|T
name|oldValue
init|=
name|get
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
DECL|method|remove (Exchange exchange)
specifier|public
name|T
name|remove
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|T
name|oldValue
init|=
name|get
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|oldValue
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|literal
argument_list|()
operator|+
literal|")"
return|;
block|}
DECL|method|register (ExchangeProperty<?> property)
specifier|public
specifier|static
specifier|synchronized
name|void
name|register
parameter_list|(
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
name|existingProperty
init|=
name|LITERAL_MAP
operator|.
name|get
argument_list|(
name|property
operator|.
name|literal
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingProperty
operator|!=
literal|null
operator|&&
name|existingProperty
operator|!=
name|property
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"An Exchange Property '"
operator|+
name|property
operator|.
name|literal
argument_list|()
operator|+
literal|"' has already been registered; its traits are: "
operator|+
name|existingProperty
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|VALUES
operator|.
name|add
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|LITERAL_MAP
operator|.
name|put
argument_list|(
name|property
operator|.
name|literal
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|NAME_MAP
operator|.
name|put
argument_list|(
name|property
operator|.
name|name
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
DECL|method|deregister (ExchangeProperty<?> property)
specifier|public
specifier|static
specifier|synchronized
name|void
name|deregister
parameter_list|(
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|VALUES
operator|.
name|remove
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|LITERAL_MAP
operator|.
name|remove
argument_list|(
name|property
operator|.
name|literal
argument_list|()
argument_list|)
expr_stmt|;
name|NAME_MAP
operator|.
name|put
argument_list|(
name|property
operator|.
name|name
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deregister (String literal)
specifier|public
specifier|static
specifier|synchronized
name|void
name|deregister
parameter_list|(
name|String
name|literal
parameter_list|)
block|{
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
name|property
init|=
name|LITERAL_MAP
operator|.
name|get
argument_list|(
name|literal
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|VALUES
operator|.
name|remove
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|LITERAL_MAP
operator|.
name|remove
argument_list|(
name|property
operator|.
name|literal
argument_list|()
argument_list|)
expr_stmt|;
name|NAME_MAP
operator|.
name|put
argument_list|(
name|property
operator|.
name|name
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|values ()
specifier|public
specifier|static
specifier|synchronized
name|ExchangeProperty
argument_list|<
name|?
argument_list|>
index|[]
name|values
parameter_list|()
block|{
return|return
name|VALUES
operator|.
name|toArray
argument_list|(
operator|new
name|ExchangeProperty
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

