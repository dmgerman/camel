begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|CompositeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SimpleRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_comment
comment|/**  * A command line tool for booting up a CamelContext  *  * @version   */
end_comment

begin_class
DECL|class|Main
specifier|public
class|class
name|Main
extends|extends
name|MainSupport
block|{
DECL|field|instance
specifier|protected
specifier|static
name|Main
name|instance
decl_stmt|;
DECL|field|registry
specifier|protected
specifier|final
name|SimpleRegistry
name|registry
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
DECL|method|Main ()
specifier|public
name|Main
parameter_list|()
block|{     }
DECL|method|main (String... args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Main
name|main
init|=
operator|new
name|Main
argument_list|()
decl_stmt|;
name|instance
operator|=
name|main
expr_stmt|;
name|main
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|main
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the currently executing main      *      * @return the current running instance      */
DECL|method|getInstance ()
specifier|public
specifier|static
name|Main
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/**      * Binds the given<code>name</code> to the<code>bean</code> object, so      * that it can be looked up inside the CamelContext this command line tool      * runs with.      *       * @param name the used name through which we do bind      * @param bean the object to bind      */
DECL|method|bind (String name, Object bean)
specifier|public
name|void
name|bind
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
name|registry
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
comment|/**      * Using the given<code>name</code> does lookup for the bean being already      * bound using the {@link #bind(String, Object)} method.      *       * @see Registry#lookupByName(String)      */
DECL|method|lookup (String name)
specifier|public
name|Object
name|lookup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|registry
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Using the given<code>name</code> and<code>type</code> does lookup for      * the bean being already bound using the {@link #bind(String, Object)}      * method.      *       * @see Registry#lookupByNameAndType(String, Class)      */
DECL|method|lookup (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Using the given<code>type</code> does lookup for the bean being already      * bound using the {@link #bind(String, Object)} method.      *       * @see Registry#findByTypeWithName(Class)      */
DECL|method|lookupByType (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|lookupByType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      *       * Gets or creates the {@link org.apache.camel.CamelContext} this main class is using.      *       * It just create a new CamelContextMap per call, please don't use it to access the camel context that will be ran by main.      * If you want to setup the CamelContext please use MainListener to get the new created camel context.      */
DECL|method|getOrCreateCamelContext ()
specifier|public
name|CamelContext
name|getOrCreateCamelContext
parameter_list|()
block|{
comment|// force init
name|Map
argument_list|<
name|String
argument_list|,
name|CamelContext
argument_list|>
name|map
init|=
name|getCamelContextMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
return|return
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error creating CamelContext"
argument_list|)
throw|;
block|}
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|postProcessContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|getCamelContexts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|getCamelContexts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// if we were veto started then mark as completed
block|}
finally|finally
block|{
if|if
condition|(
name|getCamelContexts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isVetoStarted
argument_list|()
condition|)
block|{
name|completed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|getCamelContexts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getCamelContexts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findOrCreateCamelTemplate ()
specifier|protected
name|ProducerTemplate
name|findOrCreateCamelTemplate
parameter_list|()
block|{
if|if
condition|(
name|getCamelContexts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|getCamelContexts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|createProducerTemplate
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getCamelContextMap ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|CamelContext
argument_list|>
name|getCamelContextMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CamelContext
argument_list|>
name|answer
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CamelContext
argument_list|>
argument_list|()
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|createContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|registry
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// set the registry through which we've already bound some beans
if|if
condition|(
name|DefaultCamelContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|camelContext
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|CompositeRegistry
name|compositeRegistry
init|=
operator|new
name|CompositeRegistry
argument_list|()
decl_stmt|;
comment|// make sure camel look up the Object from the registry first
name|compositeRegistry
operator|.
name|addRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
comment|// use the camel old registry as a fallback
name|compositeRegistry
operator|.
name|addRegistry
argument_list|(
operator|(
operator|(
name|DefaultCamelContext
operator|)
name|camelContext
operator|)
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DefaultCamelContext
operator|)
name|camelContext
operator|)
operator|.
name|setRegistry
argument_list|(
name|compositeRegistry
argument_list|)
expr_stmt|;
block|}
block|}
name|answer
operator|.
name|put
argument_list|(
literal|"camel-1"
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createContext ()
specifier|protected
name|CamelContext
name|createContext
parameter_list|()
block|{
return|return
operator|new
name|DefaultCamelContext
argument_list|()
return|;
block|}
block|}
end_class

end_unit

