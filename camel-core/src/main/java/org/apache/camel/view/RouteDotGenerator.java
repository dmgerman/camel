begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.view
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|view
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotNullAndNonEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNullOrBlank
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A<a href="http://www.graphviz.org/">DOT</a> file creator plugin which  * creates a DOT file showing the current routes  *  * @version $Revision: 523881 $  */
end_comment

begin_class
DECL|class|RouteDotGenerator
specifier|public
class|class
name|RouteDotGenerator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RouteDotGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dir
specifier|private
name|String
name|dir
decl_stmt|;
DECL|field|imagePrefix
specifier|private
name|String
name|imagePrefix
init|=
literal|"http://www.enterpriseintegrationpatterns.com/img/"
decl_stmt|;
DECL|field|nodeMap
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|NodeData
argument_list|>
name|nodeMap
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|NodeData
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|makeParentDirs
specifier|private
name|boolean
name|makeParentDirs
init|=
literal|true
decl_stmt|;
DECL|field|clusterCounter
specifier|private
name|int
name|clusterCounter
decl_stmt|;
DECL|field|routeGroupMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|routeGroupMap
decl_stmt|;
comment|/**      * lets insert a space before each upper case letter after a lowercase      *      * @param name      * @return      */
DECL|method|insertSpacesBetweenCamelCase (String name)
specifier|public
specifier|static
name|String
name|insertSpacesBetweenCamelCase
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|boolean
name|lastCharacterLowerCase
init|=
literal|false
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|name
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|ch
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastCharacterLowerCase
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|lastCharacterLowerCase
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|lastCharacterLowerCase
operator|=
literal|true
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|RouteDotGenerator ()
specifier|public
name|RouteDotGenerator
parameter_list|()
block|{
name|this
argument_list|(
literal|"CamelRoutes.dot"
argument_list|)
expr_stmt|;
block|}
DECL|method|RouteDotGenerator (String dir)
specifier|public
name|RouteDotGenerator
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
DECL|method|getDir ()
specifier|public
name|String
name|getDir
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
comment|/**      * Sets the destination directory in which to create the diagrams      */
DECL|method|setDir (String dir)
specifier|public
name|void
name|setDir
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
DECL|method|drawRoutes (CamelContext context)
specifier|public
name|void
name|drawRoutes
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|makeParentDirs
condition|)
block|{
name|parent
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RouteType
argument_list|>
name|routes
init|=
name|context
operator|.
name|getRouteDefinitions
argument_list|()
decl_stmt|;
name|routeGroupMap
operator|=
name|createRouteGroupMap
argument_list|(
name|routes
argument_list|)
expr_stmt|;
comment|// generate the global file
name|generateFile
argument_list|(
name|parent
argument_list|,
literal|"routes.dot"
argument_list|,
name|routeGroupMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|routeGroupMap
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|routeGroupMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// generate the file containing just the routes in this group
name|generateFile
argument_list|(
name|parent
argument_list|,
name|group
operator|+
literal|".dot"
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|generateFile (File parent, String fileName, Map<String, List<RouteType>> map)
specifier|private
name|void
name|generateFile
parameter_list|(
name|File
name|parent
parameter_list|,
name|String
name|fileName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|nodeMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clusterCounter
operator|=
literal|0
expr_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|fileName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|generateFile
argument_list|(
name|writer
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|class|NodeData
specifier|protected
class|class
name|NodeData
block|{
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
DECL|field|image
specifier|public
name|String
name|image
decl_stmt|;
DECL|field|label
specifier|public
name|String
name|label
decl_stmt|;
DECL|field|shape
specifier|public
name|String
name|shape
decl_stmt|;
DECL|field|edgeLabel
specifier|public
name|String
name|edgeLabel
decl_stmt|;
DECL|field|tooltop
specifier|public
name|String
name|tooltop
decl_stmt|;
DECL|field|nodeType
specifier|public
name|String
name|nodeType
decl_stmt|;
DECL|field|nodeWritten
specifier|public
name|boolean
name|nodeWritten
decl_stmt|;
DECL|field|url
specifier|public
name|String
name|url
decl_stmt|;
DECL|field|outputs
specifier|public
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
decl_stmt|;
block|}
DECL|method|generateFile (PrintWriter writer, Map<String, List<RouteType>> map)
specifier|protected
name|void
name|generateFile
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"digraph CamelRoutes {"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"node [style = \"rounded,filled\", fillcolor = yellow, "
operator|+
literal|"fontname=\"Helvetica-Oblique\"];"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
name|printRoutes
argument_list|(
name|writer
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|printRoutes (PrintWriter writer, Map<String, List<RouteType>> map)
specifier|protected
name|void
name|printRoutes
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|map
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|String
name|group
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|printRoutes
argument_list|(
name|writer
argument_list|,
name|group
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printRoutes (PrintWriter writer, String group, List<RouteType> routes)
specifier|protected
name|void
name|printRoutes
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|group
parameter_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
name|routes
parameter_list|)
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"subgraph cluster_"
operator|+
operator|(
name|clusterCounter
operator|++
operator|)
operator|+
literal|" {"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"label = \""
operator|+
name|group
operator|+
literal|"\";"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"color = grey;"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"style = \"dashed\";"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"URL = \""
operator|+
name|group
operator|+
literal|".html\";"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RouteType
name|route
range|:
name|routes
control|)
block|{
name|List
argument_list|<
name|FromType
argument_list|>
name|inputs
init|=
name|route
operator|.
name|getInputs
argument_list|()
decl_stmt|;
for|for
control|(
name|FromType
name|input
range|:
name|inputs
control|)
block|{
name|printRoute
argument_list|(
name|writer
argument_list|,
name|route
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|escapeNodeId (String text)
specifier|protected
name|String
name|escapeNodeId
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|text
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
DECL|method|printRoute (PrintWriter writer, final RouteType route, FromType input)
specifier|protected
name|void
name|printRoute
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
specifier|final
name|RouteType
name|route
parameter_list|,
name|FromType
name|input
parameter_list|)
block|{
name|NodeData
name|nodeData
init|=
name|getNodeData
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|printNode
argument_list|(
name|writer
argument_list|,
name|nodeData
argument_list|)
expr_stmt|;
comment|// TODO we should add a transactional client / event driven consumer / polling client
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
init|=
name|route
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|NodeData
name|from
init|=
name|nodeData
decl_stmt|;
for|for
control|(
name|ProcessorType
name|output
range|:
name|outputs
control|)
block|{
name|NodeData
name|newData
init|=
name|printNode
argument_list|(
name|writer
argument_list|,
name|from
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|from
operator|=
name|newData
expr_stmt|;
block|}
block|}
DECL|method|printNode (PrintWriter writer, NodeData fromData, ProcessorType node)
specifier|protected
name|NodeData
name|printNode
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|NodeData
name|fromData
parameter_list|,
name|ProcessorType
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|MulticastType
condition|)
block|{
comment|// no need for a multicast node
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
init|=
name|node
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorType
name|output
range|:
name|outputs
control|)
block|{
name|printNode
argument_list|(
name|writer
argument_list|,
name|fromData
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
return|return
name|fromData
return|;
block|}
name|NodeData
name|toData
init|=
name|getNodeData
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|printNode
argument_list|(
name|writer
argument_list|,
name|toData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromData
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|fromData
operator|.
name|id
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|toData
operator|.
name|id
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|" ["
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|fromData
operator|.
name|edgeLabel
decl_stmt|;
if|if
condition|(
name|isNotNullAndNonEmpty
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"label = \""
operator|+
name|label
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"];"
argument_list|)
expr_stmt|;
block|}
comment|// now lets write any children
comment|//List<ProcessorType> outputs = node.getOutputs();
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
init|=
name|toData
operator|.
name|outputs
decl_stmt|;
for|for
control|(
name|ProcessorType
name|output
range|:
name|outputs
control|)
block|{
name|NodeData
name|newData
init|=
name|printNode
argument_list|(
name|writer
argument_list|,
name|toData
argument_list|,
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isMulticastNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|toData
operator|=
name|newData
expr_stmt|;
block|}
block|}
return|return
name|toData
return|;
block|}
DECL|method|isMulticastNode (ProcessorType node)
specifier|protected
name|boolean
name|isMulticastNode
parameter_list|(
name|ProcessorType
name|node
parameter_list|)
block|{
return|return
name|node
operator|instanceof
name|MulticastType
operator|||
name|node
operator|instanceof
name|ChoiceType
return|;
block|}
DECL|method|printNode (PrintWriter writer, NodeData data)
specifier|protected
name|void
name|printNode
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|NodeData
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|nodeWritten
condition|)
block|{
name|data
operator|.
name|nodeWritten
operator|=
literal|true
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|data
operator|.
name|id
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|" ["
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"label = \""
operator|+
name|data
operator|.
name|label
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"tooltip = \""
operator|+
name|data
operator|.
name|tooltop
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|url
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"URL = \""
operator|+
name|data
operator|.
name|url
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|image
init|=
name|data
operator|.
name|image
decl_stmt|;
if|if
condition|(
name|image
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"shapefile = \""
operator|+
name|image
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"peripheries=0"
argument_list|)
expr_stmt|;
block|}
name|String
name|shape
init|=
name|data
operator|.
name|shape
decl_stmt|;
if|if
condition|(
name|shape
operator|==
literal|null
operator|&&
name|image
operator|!=
literal|null
condition|)
block|{
name|shape
operator|=
literal|"custom"
expr_stmt|;
block|}
if|if
condition|(
name|shape
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"shape = \""
operator|+
name|shape
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"];"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|configureNodeData (Object node, NodeData data)
specifier|protected
name|void
name|configureNodeData
parameter_list|(
name|Object
name|node
parameter_list|,
name|NodeData
name|data
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|ProcessorType
condition|)
block|{
name|ProcessorType
name|processorType
init|=
operator|(
name|ProcessorType
operator|)
name|node
decl_stmt|;
name|data
operator|.
name|edgeLabel
operator|=
name|processorType
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|FromType
condition|)
block|{
name|FromType
name|fromType
init|=
operator|(
name|FromType
operator|)
name|node
decl_stmt|;
name|data
operator|.
name|tooltop
operator|=
name|fromType
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|data
operator|.
name|label
operator|=
name|removeQueryString
argument_list|(
name|data
operator|.
name|tooltop
argument_list|)
expr_stmt|;
name|data
operator|.
name|url
operator|=
literal|"http://activemq.apache.org/camel/message-endpoint.html"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ToType
condition|)
block|{
name|ToType
name|toType
init|=
operator|(
name|ToType
operator|)
name|node
decl_stmt|;
name|data
operator|.
name|tooltop
operator|=
name|toType
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|data
operator|.
name|label
operator|=
name|removeQueryString
argument_list|(
name|data
operator|.
name|tooltop
argument_list|)
expr_stmt|;
name|data
operator|.
name|edgeLabel
operator|=
literal|""
expr_stmt|;
name|data
operator|.
name|url
operator|=
literal|"http://activemq.apache.org/camel/message-endpoint.html"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|FilterType
condition|)
block|{
name|data
operator|.
name|image
operator|=
name|imagePrefix
operator|+
literal|"MessageFilterIcon.gif"
expr_stmt|;
name|data
operator|.
name|nodeType
operator|=
literal|"Message Filter"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|WhenType
condition|)
block|{
name|data
operator|.
name|image
operator|=
name|imagePrefix
operator|+
literal|"MessageFilterIcon.gif"
expr_stmt|;
name|data
operator|.
name|nodeType
operator|=
literal|"When Filter"
expr_stmt|;
name|data
operator|.
name|url
operator|=
literal|"http://activemq.apache.org/camel/content-based-router.html"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|OtherwiseType
condition|)
block|{
name|data
operator|.
name|nodeType
operator|=
literal|"Otherwise"
expr_stmt|;
name|data
operator|.
name|edgeLabel
operator|=
literal|""
expr_stmt|;
name|data
operator|.
name|url
operator|=
literal|"http://activemq.apache.org/camel/content-based-router.html"
expr_stmt|;
name|data
operator|.
name|tooltop
operator|=
literal|"Otherwise"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ChoiceType
condition|)
block|{
name|data
operator|.
name|image
operator|=
name|imagePrefix
operator|+
literal|"ContentBasedRouterIcon.gif"
expr_stmt|;
name|data
operator|.
name|nodeType
operator|=
literal|"Content Based Router"
expr_stmt|;
name|data
operator|.
name|label
operator|=
literal|""
expr_stmt|;
name|data
operator|.
name|edgeLabel
operator|=
literal|""
expr_stmt|;
name|ChoiceType
name|choice
init|=
operator|(
name|ChoiceType
operator|)
name|node
decl_stmt|;
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorType
argument_list|>
argument_list|(
name|choice
operator|.
name|getWhenClauses
argument_list|()
argument_list|)
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|choice
operator|.
name|getOtherwise
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|RecipientListType
condition|)
block|{
name|data
operator|.
name|image
operator|=
name|imagePrefix
operator|+
literal|"RecipientListIcon.gif"
expr_stmt|;
name|data
operator|.
name|nodeType
operator|=
literal|"Recipient List"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|SplitterType
condition|)
block|{
name|data
operator|.
name|image
operator|=
name|imagePrefix
operator|+
literal|"SplitterIcon.gif"
expr_stmt|;
name|data
operator|.
name|nodeType
operator|=
literal|"Splitter"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|AggregatorType
condition|)
block|{
name|data
operator|.
name|image
operator|=
name|imagePrefix
operator|+
literal|"AggregatorIcon.gif"
expr_stmt|;
name|data
operator|.
name|nodeType
operator|=
literal|"Aggregator"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ResequencerType
condition|)
block|{
name|data
operator|.
name|image
operator|=
name|imagePrefix
operator|+
literal|"ResequencerIcon.gif"
expr_stmt|;
name|data
operator|.
name|nodeType
operator|=
literal|"Resequencer"
expr_stmt|;
block|}
comment|// lets auto-default as many values as we can
if|if
condition|(
name|isNullOrBlank
argument_list|(
name|data
operator|.
name|nodeType
argument_list|)
condition|)
block|{
comment|// TODO we could add this to the model?
name|String
name|name
init|=
name|node
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"Type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|nodeType
operator|=
name|insertSpacesBetweenCamelCase
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|label
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isNullOrBlank
argument_list|(
name|data
operator|.
name|image
argument_list|)
condition|)
block|{
name|data
operator|.
name|label
operator|=
name|data
operator|.
name|nodeType
expr_stmt|;
name|data
operator|.
name|shape
operator|=
literal|"box"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isNotNullAndNonEmpty
argument_list|(
name|data
operator|.
name|edgeLabel
argument_list|)
condition|)
block|{
name|data
operator|.
name|label
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|label
operator|=
name|node
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isNullOrBlank
argument_list|(
name|data
operator|.
name|tooltop
argument_list|)
condition|)
block|{
if|if
condition|(
name|isNotNullAndNonEmpty
argument_list|(
name|data
operator|.
name|nodeType
argument_list|)
condition|)
block|{
name|String
name|description
init|=
name|isNotNullAndNonEmpty
argument_list|(
name|data
operator|.
name|edgeLabel
argument_list|)
condition|?
name|data
operator|.
name|edgeLabel
else|:
name|data
operator|.
name|label
decl_stmt|;
name|data
operator|.
name|tooltop
operator|=
name|data
operator|.
name|nodeType
operator|+
literal|": "
operator|+
name|description
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|tooltop
operator|=
name|data
operator|.
name|label
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isNullOrBlank
argument_list|(
name|data
operator|.
name|url
argument_list|)
operator|&&
name|isNotNullAndNonEmpty
argument_list|(
name|data
operator|.
name|nodeType
argument_list|)
condition|)
block|{
name|data
operator|.
name|url
operator|=
literal|"http://activemq.apache.org/camel/"
operator|+
name|data
operator|.
name|nodeType
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'-'
argument_list|)
operator|+
literal|".html"
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|ProcessorType
operator|&&
name|data
operator|.
name|outputs
operator|==
literal|null
condition|)
block|{
name|ProcessorType
name|processorType
init|=
operator|(
name|ProcessorType
operator|)
name|node
decl_stmt|;
name|data
operator|.
name|outputs
operator|=
name|processorType
operator|.
name|getOutputs
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeQueryString (String text)
specifier|protected
name|String
name|removeQueryString
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|int
name|idx
init|=
name|text
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<=
literal|0
condition|)
block|{
return|return
name|text
return|;
block|}
else|else
block|{
return|return
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
block|}
DECL|method|getLabel (List<ExpressionType> expressions)
specifier|protected
name|String
name|getLabel
parameter_list|(
name|List
argument_list|<
name|ExpressionType
argument_list|>
name|expressions
parameter_list|)
block|{
name|CollectionStringBuffer
name|buffer
init|=
operator|new
name|CollectionStringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|ExpressionType
name|expression
range|:
name|expressions
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|getLabel
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getLabel (ExpressionType expression)
specifier|protected
name|String
name|getLabel
parameter_list|(
name|ExpressionType
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|getLabel
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|getNodeData (Object node)
specifier|protected
name|NodeData
name|getNodeData
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
name|Object
name|key
init|=
name|node
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|FromType
condition|)
block|{
name|FromType
name|fromType
init|=
operator|(
name|FromType
operator|)
name|node
decl_stmt|;
name|key
operator|=
name|fromType
operator|.
name|getUriOrRef
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ToType
condition|)
block|{
name|ToType
name|toType
init|=
operator|(
name|ToType
operator|)
name|node
decl_stmt|;
name|key
operator|=
name|toType
operator|.
name|getUriOrRef
argument_list|()
expr_stmt|;
block|}
name|NodeData
name|answer
init|=
name|nodeMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|NodeData
argument_list|()
expr_stmt|;
name|answer
operator|.
name|id
operator|=
literal|"node"
operator|+
operator|(
name|nodeMap
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
expr_stmt|;
name|configureNodeData
argument_list|(
name|node
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|nodeMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createRouteGroupMap (List<RouteType> routes)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|createRouteGroupMap
parameter_list|(
name|List
argument_list|<
name|RouteType
argument_list|>
name|routes
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RouteType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RouteType
name|route
range|:
name|routes
control|)
block|{
name|String
name|group
init|=
name|route
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
literal|"Camel Routes"
expr_stmt|;
block|}
name|List
argument_list|<
name|RouteType
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|RouteType
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

