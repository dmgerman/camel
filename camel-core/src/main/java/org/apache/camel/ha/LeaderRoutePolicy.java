begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.ha
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReferenceCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Route policy using ..."
argument_list|)
DECL|class|LeaderRoutePolicy
specifier|public
class|class
name|LeaderRoutePolicy
extends|extends
name|RoutePolicySupport
implements|implements
name|CamelContextAware
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LeaderRoutePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|leader
specifier|private
specifier|final
name|AtomicBoolean
name|leader
decl_stmt|;
DECL|field|startedRoutes
specifier|private
specifier|final
name|Set
argument_list|<
name|Route
argument_list|>
name|startedRoutes
decl_stmt|;
DECL|field|stoppedRoutes
specifier|private
specifier|final
name|Set
argument_list|<
name|Route
argument_list|>
name|stoppedRoutes
decl_stmt|;
DECL|field|refCount
specifier|private
specifier|final
name|ReferenceCount
name|refCount
decl_stmt|;
DECL|field|clusterView
specifier|private
specifier|final
name|CamelClusterView
name|clusterView
decl_stmt|;
DECL|field|clusterMember
specifier|private
specifier|final
name|CamelClusterMember
name|clusterMember
decl_stmt|;
DECL|field|clusterEventConsumer
specifier|private
specifier|final
name|BiConsumer
argument_list|<
name|CamelClusterView
operator|.
name|Event
argument_list|,
name|Object
argument_list|>
name|clusterEventConsumer
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|LeaderRoutePolicy (CamelClusterView clusterView, CamelClusterMember clusterMember)
specifier|public
name|LeaderRoutePolicy
parameter_list|(
name|CamelClusterView
name|clusterView
parameter_list|,
name|CamelClusterMember
name|clusterMember
parameter_list|)
block|{
name|this
operator|.
name|clusterMember
operator|=
name|clusterMember
expr_stmt|;
name|this
operator|.
name|clusterView
operator|=
name|clusterView
expr_stmt|;
name|this
operator|.
name|clusterEventConsumer
operator|=
name|this
operator|::
name|onClusterEvent
expr_stmt|;
name|this
operator|.
name|stoppedRoutes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|startedRoutes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|leader
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|refCount
operator|=
name|ReferenceCount
operator|.
name|on
argument_list|(
parameter_list|()
lambda|->
name|clusterView
operator|.
name|addEventListener
argument_list|(
name|clusterEventConsumer
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|clusterView
operator|.
name|removeEventListener
argument_list|(
name|clusterEventConsumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInit (Route route)
specifier|public
specifier|synchronized
name|void
name|onInit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|super
operator|.
name|onInit
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Route managed by {}. Setting route {} AutoStartup flag to false."
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getRoute
argument_list|()
operator|.
name|setAutoStartup
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|stoppedRoutes
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|this
operator|.
name|refCount
operator|.
name|retain
argument_list|()
expr_stmt|;
name|startManagedRoutes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|public
specifier|synchronized
name|void
name|doShutdown
parameter_list|()
block|{
name|this
operator|.
name|refCount
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
comment|// ****************************************************
comment|// Management
comment|// ****************************************************
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Is this route the master or a slave"
argument_list|)
DECL|method|isLeader ()
specifier|public
name|boolean
name|isLeader
parameter_list|()
block|{
return|return
name|leader
operator|.
name|get
argument_list|()
return|;
block|}
comment|// ****************************************************
comment|// Route managements
comment|// ****************************************************
DECL|method|onClusterEvent (CamelClusterView.Event event, Object payload)
specifier|private
name|void
name|onClusterEvent
parameter_list|(
name|CamelClusterView
operator|.
name|Event
name|event
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
name|CamelClusterView
operator|.
name|Event
operator|.
name|KEEP_ALIVE
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Got KEEP_ALIVE from cluster '{}' with payload '{}'"
argument_list|,
name|clusterView
operator|.
name|getCluster
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|Objects
operator|.
name|toString
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|==
name|CamelClusterView
operator|.
name|Event
operator|.
name|LEADERSHIP_CHANGED
condition|)
block|{
name|boolean
name|isLeader
init|=
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|clusterMember
operator|.
name|getId
argument_list|()
argument_list|,
name|clusterView
operator|.
name|getMaster
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLeader
operator|&&
name|leader
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
name|isLeader
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Leadership taken"
argument_list|)
expr_stmt|;
name|startManagedRoutes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isLeader
operator|&&
name|leader
operator|.
name|getAndSet
argument_list|(
name|isLeader
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Leadership lost"
argument_list|)
expr_stmt|;
name|stopManagedRoutes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|startManagedRoutes ()
specifier|private
specifier|synchronized
name|void
name|startManagedRoutes
parameter_list|()
block|{
if|if
condition|(
name|isLeader
argument_list|()
condition|)
block|{
name|doStartManagedRoutes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If the leadership has been lost in the meanwhile, stop any
comment|// eventually started route
name|doStopManagedRoutes
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doStartManagedRoutes ()
specifier|private
specifier|synchronized
name|void
name|doStartManagedRoutes
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|Route
name|route
range|:
name|stoppedRoutes
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Starting route {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|startRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|startedRoutes
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
name|stoppedRoutes
operator|.
name|removeAll
argument_list|(
name|startedRoutes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopManagedRoutes ()
specifier|private
specifier|synchronized
name|void
name|stopManagedRoutes
parameter_list|()
block|{
if|if
condition|(
name|isLeader
argument_list|()
condition|)
block|{
comment|// If became a leader in the meanwhile, start any eventually stopped
comment|// route
name|doStartManagedRoutes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doStopManagedRoutes
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doStopManagedRoutes ()
specifier|private
specifier|synchronized
name|void
name|doStopManagedRoutes
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|Route
name|route
range|:
name|startedRoutes
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Stopping route {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|stopRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|stoppedRoutes
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
name|startedRoutes
operator|.
name|removeAll
argument_list|(
name|stoppedRoutes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

