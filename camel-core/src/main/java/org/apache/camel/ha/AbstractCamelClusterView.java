begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.ha
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|StampedLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_class
DECL|class|AbstractCamelClusterView
specifier|public
specifier|abstract
class|class
name|AbstractCamelClusterView
implements|implements
name|CamelClusterView
block|{
DECL|field|cluster
specifier|private
specifier|final
name|CamelCluster
name|cluster
decl_stmt|;
DECL|field|namespace
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
DECL|field|consumers
specifier|private
specifier|final
name|List
argument_list|<
name|FilteringConsumer
argument_list|>
name|consumers
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|StampedLock
name|lock
decl_stmt|;
DECL|method|AbstractCamelClusterView (CamelCluster cluster, String namespace)
specifier|protected
name|AbstractCamelClusterView
parameter_list|(
name|CamelCluster
name|cluster
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|consumers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|lock
operator|=
operator|new
name|StampedLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCluster ()
specifier|public
name|CamelCluster
name|getCluster
parameter_list|()
block|{
return|return
name|this
operator|.
name|cluster
return|;
block|}
annotation|@
name|Override
DECL|method|getNamespace ()
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespace
return|;
block|}
annotation|@
name|Override
DECL|method|addEventListener (BiConsumer<Event, Object> consumer)
specifier|public
name|void
name|addEventListener
parameter_list|(
name|BiConsumer
argument_list|<
name|Event
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|consumers
operator|.
name|add
argument_list|(
operator|new
name|FilteringConsumer
argument_list|(
name|e
lambda|->
literal|true
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addEventListener (Predicate<Event> predicate, BiConsumer<Event, Object> consumer)
specifier|public
name|void
name|addEventListener
parameter_list|(
name|Predicate
argument_list|<
name|Event
argument_list|>
name|predicate
parameter_list|,
name|BiConsumer
argument_list|<
name|Event
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|consumers
operator|.
name|add
argument_list|(
operator|new
name|FilteringConsumer
argument_list|(
name|predicate
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeEventListener (BiConsumer<Event, Object> consumer)
specifier|public
name|void
name|removeEventListener
parameter_list|(
name|BiConsumer
argument_list|<
name|Event
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|consumers
operator|.
name|removeIf
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getConsumer
argument_list|()
operator|.
name|equals
argument_list|(
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// **************************************
comment|// Events
comment|// **************************************
DECL|method|fireEvent (CamelClusterView.Event event, Object payload)
specifier|protected
name|void
name|fireEvent
parameter_list|(
name|CamelClusterView
operator|.
name|Event
name|event
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|consumers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|accept
argument_list|(
name|event
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockRead
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// **************************************
comment|// Helpers
comment|// **************************************
DECL|class|FilteringConsumer
specifier|private
specifier|final
class|class
name|FilteringConsumer
implements|implements
name|BiConsumer
argument_list|<
name|Event
argument_list|,
name|Object
argument_list|>
block|{
DECL|field|predicate
specifier|private
specifier|final
name|Predicate
argument_list|<
name|Event
argument_list|>
name|predicate
decl_stmt|;
DECL|field|consumer
specifier|private
specifier|final
name|BiConsumer
argument_list|<
name|Event
argument_list|,
name|Object
argument_list|>
name|consumer
decl_stmt|;
DECL|method|FilteringConsumer (Predicate<Event> predicate, BiConsumer<Event, Object> consumer)
name|FilteringConsumer
parameter_list|(
name|Predicate
argument_list|<
name|Event
argument_list|>
name|predicate
parameter_list|,
name|BiConsumer
argument_list|<
name|Event
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept (CamelClusterView.Event event, Object payload)
specifier|public
name|void
name|accept
parameter_list|(
name|CamelClusterView
operator|.
name|Event
name|event
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|event
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConsumer ()
specifier|public
name|BiConsumer
argument_list|<
name|Event
argument_list|,
name|Object
argument_list|>
name|getConsumer
parameter_list|()
block|{
return|return
name|this
operator|.
name|consumer
return|;
block|}
block|}
block|}
end_class

end_unit

