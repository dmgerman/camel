begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ReloadStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for implementing custom {@link ReloadStrategy} SPI plugins.  */
end_comment

begin_class
DECL|class|ReloadStrategySupport
specifier|public
specifier|abstract
class|class
name|ReloadStrategySupport
extends|extends
name|ServiceSupport
implements|implements
name|ReloadStrategy
block|{
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|succeeded
specifier|private
name|int
name|succeeded
decl_stmt|;
DECL|field|failed
specifier|private
name|int
name|failed
decl_stmt|;
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onReloadCamelContext (CamelContext camelContext)
specifier|public
name|void
name|onReloadCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Reloading CamelContext: {}"
argument_list|,
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|++
expr_stmt|;
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Reloaded CamelContext: {}"
argument_list|,
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|succeeded
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onReloadRoutes (CamelContext camelContext, String name, InputStream resource)
specifier|public
name|void
name|onReloadRoutes
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|name
parameter_list|,
name|InputStream
name|resource
parameter_list|)
block|{
comment|// load the stream in as DOM and find out if its<routes><route> or<camelContext>
comment|// and if its<blueprint><beans> etc and then find inside the<camelContext> and grab what we support re-loading
name|log
operator|.
name|debug
argument_list|(
literal|"Reloading CamelContext: {} routes from resource: {}"
argument_list|,
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// assume the resource is XML routes
try|try
block|{
name|RoutesDefinition
name|routes
init|=
name|camelContext
operator|.
name|loadRoutesDefinition
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|addRouteDefinitions
argument_list|(
name|routes
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|++
expr_stmt|;
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Reloaded CamelContext: {} routes from resource: {}"
argument_list|,
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|succeeded
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReloadCounter ()
specifier|public
name|int
name|getReloadCounter
parameter_list|()
block|{
return|return
name|succeeded
return|;
block|}
annotation|@
name|Override
DECL|method|getFailedCounter ()
specifier|public
name|int
name|getFailedCounter
parameter_list|()
block|{
return|return
name|failed
return|;
block|}
block|}
end_class

end_unit

