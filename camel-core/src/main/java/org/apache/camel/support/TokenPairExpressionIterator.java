begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * {@link org.apache.camel.Expression} to walk a {@link org.apache.camel.Message} body  * using an {@link Iterator}, which grabs the content between a start and end token.  *<p/>  * The message body must be able to convert to {@link InputStream} type which is used as stream  * to access the message body.  *<p/>  * Can be used to split big XML files  */
end_comment

begin_class
DECL|class|TokenPairExpressionIterator
specifier|public
class|class
name|TokenPairExpressionIterator
extends|extends
name|ExpressionAdapter
block|{
DECL|field|startToken
specifier|private
specifier|final
name|String
name|startToken
decl_stmt|;
DECL|field|endToken
specifier|private
specifier|final
name|String
name|endToken
decl_stmt|;
DECL|method|TokenPairExpressionIterator (String startToken, String endToken)
specifier|public
name|TokenPairExpressionIterator
parameter_list|(
name|String
name|startToken
parameter_list|,
name|String
name|endToken
parameter_list|)
block|{
name|this
operator|.
name|startToken
operator|=
name|startToken
expr_stmt|;
name|this
operator|.
name|endToken
operator|=
name|endToken
expr_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|startToken
argument_list|,
literal|"startToken"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|endToken
argument_list|,
literal|"endToken"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
name|InputStream
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenPairIterator
argument_list|(
name|startToken
argument_list|,
name|endToken
argument_list|,
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"tokenize[body() using tokens: "
operator|+
name|startToken
operator|+
literal|"..."
operator|+
name|endToken
operator|+
literal|"]"
return|;
block|}
comment|/**      * Iterator to walk the input stream      */
DECL|class|TokenPairIterator
specifier|private
specifier|static
specifier|final
class|class
name|TokenPairIterator
implements|implements
name|Iterator
block|{
DECL|field|startToken
specifier|private
specifier|final
name|String
name|startToken
decl_stmt|;
DECL|field|endToken
specifier|private
specifier|final
name|String
name|endToken
decl_stmt|;
DECL|field|scanner
specifier|private
specifier|final
name|Scanner
name|scanner
decl_stmt|;
DECL|field|image
specifier|private
name|Object
name|image
decl_stmt|;
DECL|method|TokenPairIterator (String startToken, String endToken, InputStream in)
specifier|private
name|TokenPairIterator
parameter_list|(
name|String
name|startToken
parameter_list|,
name|String
name|endToken
parameter_list|,
name|InputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|startToken
operator|=
name|startToken
expr_stmt|;
name|this
operator|.
name|endToken
operator|=
name|endToken
expr_stmt|;
comment|// use end token as delimiter
name|this
operator|.
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
name|in
argument_list|)
operator|.
name|useDelimiter
argument_list|(
name|endToken
argument_list|)
expr_stmt|;
comment|// this iterator will do look ahead as we may have data
comment|// after the last end token, which the scanner would find
comment|// so we need to be one step ahead of the scanner
name|this
operator|.
name|image
operator|=
name|hasNext
argument_list|()
condition|?
name|next
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
comment|// must look a head
name|boolean
name|answer
init|=
name|scanner
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|answer
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Object
name|answer
init|=
name|image
decl_stmt|;
comment|// calculate next
name|image
operator|=
name|hasNext
argument_list|()
condition|?
name|getNext
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// first time the image may be null
name|answer
operator|=
name|image
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getNext ()
specifier|private
name|Object
name|getNext
parameter_list|()
block|{
name|String
name|next
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// only grab text after the start token
if|if
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|contains
argument_list|(
name|startToken
argument_list|)
condition|)
block|{
name|next
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|next
argument_list|,
name|startToken
argument_list|)
expr_stmt|;
block|}
comment|// include tokens in answer
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|next
operator|=
name|sb
operator|.
name|append
argument_list|(
name|startToken
argument_list|)
operator|.
name|append
argument_list|(
name|next
argument_list|)
operator|.
name|append
argument_list|(
name|endToken
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// noop
block|}
block|}
block|}
end_class

end_unit

