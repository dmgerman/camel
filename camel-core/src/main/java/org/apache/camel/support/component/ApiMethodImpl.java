begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Delegate class for {@link ApiMethod}.  * This class is instantiated by Enumerations for Api Proxy types.  *<p>  *     For example:  *</p>  *<pre>  * {@code  *     public enum HelloWorldMethod implements ApiMethod {  *         SAYHI(String.class, "sayHi", ApiMethodArg.from(String.class, "name");  *  *         private ApiMethodImpl apiMethod;  *  *         private HelloWorldMethods(Class<?> resultType, String name, ApiMethodArg... args) throws IllegalArgumentException {  *             this.apiMethod = new ApiMethod(HelloWorld.class, resultType, name, args);  *         }  *  *         // implement ApiMethod interface  *         String getName() { return apiMethod.getName(); }  *         Class<?> getResultType() {return apiMethod.getResultType(); }  *         List<String> getArgNames() { return apiMethod.getArgNames(); }  *         List<Class<?>> getArgTypes() {return apiMethod.getArgTypes(); }  *         Method getMethod() { return apiMethod.getMethod(); }  *     }  * }  *</pre>  */
end_comment

begin_class
DECL|class|ApiMethodImpl
specifier|public
specifier|final
class|class
name|ApiMethodImpl
implements|implements
name|ApiMethod
block|{
comment|// name, result class, ordered argument names and classes, and Method to invoke
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|resultType
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|resultType
decl_stmt|;
DECL|field|argNames
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|argNames
decl_stmt|;
DECL|field|argTypes
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|argTypes
decl_stmt|;
DECL|field|method
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
DECL|method|ApiMethodImpl (Class<?> proxyType, Class<?> resultType, String name, ApiMethodArg... args)
specifier|public
name|ApiMethodImpl
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|proxyType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|resultType
parameter_list|,
name|String
name|name
parameter_list|,
name|ApiMethodArg
modifier|...
name|args
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|resultType
operator|=
name|resultType
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|tmpArgNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|tmpArgTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|ApiMethodArg
name|arg
range|:
name|args
control|)
block|{
name|tmpArgTypes
operator|.
name|add
argument_list|(
name|arg
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|tmpArgNames
operator|.
name|add
argument_list|(
name|arg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|argNames
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|tmpArgNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|argTypes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|tmpArgTypes
argument_list|)
expr_stmt|;
comment|// find method in Proxy type
try|try
block|{
name|this
operator|.
name|method
operator|=
name|proxyType
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|argTypes
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
name|args
operator|.
name|length
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing method %s %s"
argument_list|,
name|name
argument_list|,
name|argTypes
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'['
argument_list|,
literal|'('
argument_list|)
operator|.
name|replace
argument_list|(
literal|']'
argument_list|,
literal|')'
argument_list|)
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getResultType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getResultType
parameter_list|()
block|{
return|return
name|resultType
return|;
block|}
annotation|@
name|Override
DECL|method|getArgNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getArgNames
parameter_list|()
block|{
return|return
name|argNames
return|;
block|}
annotation|@
name|Override
DECL|method|getArgTypes ()
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getArgTypes
parameter_list|()
block|{
return|return
name|argTypes
return|;
block|}
annotation|@
name|Override
DECL|method|getMethod ()
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
literal|"name="
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|", resultType="
argument_list|)
operator|.
name|append
argument_list|(
name|resultType
argument_list|)
operator|.
name|append
argument_list|(
literal|", argNames="
argument_list|)
operator|.
name|append
argument_list|(
name|argNames
argument_list|)
operator|.
name|append
argument_list|(
literal|", argTypes="
argument_list|)
operator|.
name|append
argument_list|(
name|argTypes
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

