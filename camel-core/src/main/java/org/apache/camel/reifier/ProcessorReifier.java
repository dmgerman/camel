begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ErrorHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|AggregateDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|CatchDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ChoiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ClaimCheckDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ConvertBodyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DelayDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DynamicRouterDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|EnrichDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FilterDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FinallyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdempotentConsumerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InOnlyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InOutDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptFromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LoadBalanceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LogDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LoopDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|MarshalDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|MulticastDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnFallbackDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OtherwiseDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PipelineDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PolicyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PollEnrichDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RecipientListDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RemoveHeaderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RemoveHeadersDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RemovePropertiesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RemovePropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ResequenceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RethrowDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RollbackDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutingSlipDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SamplingDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ScriptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetBodyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetExchangePatternDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetFaultBodyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetHeaderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetPropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SortDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SplitDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|StopDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThreadsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThrottleDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThrowExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ToDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ToDynamicDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransactedDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransformDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TryDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|UnmarshalDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ValidateDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|WhenDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|WhenSkipSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|WireTapDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|InterceptEndpointProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|DefaultChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ProcessorReifier
specifier|public
specifier|abstract
class|class
name|ProcessorReifier
parameter_list|<
name|T
extends|extends
name|ProcessorDefinition
parameter_list|<
name|?
parameter_list|>
parameter_list|>
block|{
DECL|field|PROCESSORS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Function
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|ProcessorReifier
argument_list|<
name|?
extends|extends
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|PROCESSORS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Function
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|ProcessorReifier
argument_list|<
name|?
extends|extends
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|AggregateDefinition
operator|.
name|class
argument_list|,
name|AggregateReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BeanDefinition
operator|.
name|class
argument_list|,
name|BeanReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CatchDefinition
operator|.
name|class
argument_list|,
name|CatchReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ChoiceDefinition
operator|.
name|class
argument_list|,
name|ChoiceReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ClaimCheckDefinition
operator|.
name|class
argument_list|,
name|ClaimCheckReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ConvertBodyDefinition
operator|.
name|class
argument_list|,
name|ConvertBodyReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DelayDefinition
operator|.
name|class
argument_list|,
name|DelayReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DynamicRouterDefinition
operator|.
name|class
argument_list|,
name|DynamicRouterReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|EnrichDefinition
operator|.
name|class
argument_list|,
name|EnrichReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|FilterDefinition
operator|.
name|class
argument_list|,
name|FilterReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|FinallyDefinition
operator|.
name|class
argument_list|,
name|FinallyReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|HystrixDefinition
operator|.
name|class
argument_list|,
name|HystrixReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|IdempotentConsumerDefinition
operator|.
name|class
argument_list|,
name|IdempotentConsumerReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InOnlyDefinition
operator|.
name|class
argument_list|,
name|SendReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InOutDefinition
operator|.
name|class
argument_list|,
name|SendReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InterceptDefinition
operator|.
name|class
argument_list|,
name|InterceptReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InterceptFromDefinition
operator|.
name|class
argument_list|,
name|InterceptFromReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InterceptSendToEndpointDefinition
operator|.
name|class
argument_list|,
name|InterceptSendToEndpointReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LoadBalanceDefinition
operator|.
name|class
argument_list|,
name|LoadBalanceReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LogDefinition
operator|.
name|class
argument_list|,
name|LogReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LoopDefinition
operator|.
name|class
argument_list|,
name|LoopReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|MarshalDefinition
operator|.
name|class
argument_list|,
name|MarshalReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|MulticastDefinition
operator|.
name|class
argument_list|,
name|MulticastReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OnCompletionDefinition
operator|.
name|class
argument_list|,
name|OnCompletionReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OnExceptionDefinition
operator|.
name|class
argument_list|,
name|OnExceptionReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OnFallbackDefinition
operator|.
name|class
argument_list|,
name|OnFallbackReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|OtherwiseDefinition
operator|.
name|class
argument_list|,
name|OtherwiseReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|PipelineDefinition
operator|.
name|class
argument_list|,
name|PipelineReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|PolicyDefinition
operator|.
name|class
argument_list|,
name|PolicyReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|PollEnrichDefinition
operator|.
name|class
argument_list|,
name|PollEnrichReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ProcessDefinition
operator|.
name|class
argument_list|,
name|ProcessReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RecipientListDefinition
operator|.
name|class
argument_list|,
name|RecipientListReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RemoveHeaderDefinition
operator|.
name|class
argument_list|,
name|RemoveHeaderReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RemoveHeadersDefinition
operator|.
name|class
argument_list|,
name|RemoveHeadersReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RemovePropertiesDefinition
operator|.
name|class
argument_list|,
name|RemovePropertiesReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RemovePropertyDefinition
operator|.
name|class
argument_list|,
name|RemovePropertyReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ResequenceDefinition
operator|.
name|class
argument_list|,
name|ResequenceReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RethrowDefinition
operator|.
name|class
argument_list|,
name|RethrowReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RollbackDefinition
operator|.
name|class
argument_list|,
name|RollbackReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RouteDefinition
operator|.
name|class
argument_list|,
name|RouteReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RoutingSlipDefinition
operator|.
name|class
argument_list|,
name|RoutingSlipReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SagaDefinition
operator|.
name|class
argument_list|,
name|SagaReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SamplingDefinition
operator|.
name|class
argument_list|,
name|SamplingReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ScriptDefinition
operator|.
name|class
argument_list|,
name|ScriptReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ServiceCallDefinition
operator|.
name|class
argument_list|,
name|ServiceCallReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SetBodyDefinition
operator|.
name|class
argument_list|,
name|SetBodyReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SetExchangePatternDefinition
operator|.
name|class
argument_list|,
name|SetExchangePatternReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SetFaultBodyDefinition
operator|.
name|class
argument_list|,
name|SetFaultBodyReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SetHeaderDefinition
operator|.
name|class
argument_list|,
name|SetHeaderReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SetPropertyDefinition
operator|.
name|class
argument_list|,
name|SetPropertyReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SortDefinition
operator|.
name|class
argument_list|,
name|SortReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SplitDefinition
operator|.
name|class
argument_list|,
name|SplitReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|StopDefinition
operator|.
name|class
argument_list|,
name|StopReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ThreadsDefinition
operator|.
name|class
argument_list|,
name|ThreadsReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ThrottleDefinition
operator|.
name|class
argument_list|,
name|ThrottleReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ThrowExceptionDefinition
operator|.
name|class
argument_list|,
name|ThrowExceptionReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ToDefinition
operator|.
name|class
argument_list|,
name|SendReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ToDynamicDefinition
operator|.
name|class
argument_list|,
name|ToDynamicReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|TransactedDefinition
operator|.
name|class
argument_list|,
name|TransactedReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|TransformDefinition
operator|.
name|class
argument_list|,
name|TransformReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|TryDefinition
operator|.
name|class
argument_list|,
name|TryReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|UnmarshalDefinition
operator|.
name|class
argument_list|,
name|UnmarshalReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ValidateDefinition
operator|.
name|class
argument_list|,
name|ValidateReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|WireTapDefinition
operator|.
name|class
argument_list|,
name|WireTapReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|WhenSkipSendToEndpointDefinition
operator|.
name|class
argument_list|,
name|WhenSkipSendToEndpointReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|WhenDefinition
operator|.
name|class
argument_list|,
name|WhenReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|PROCESSORS
operator|=
name|map
expr_stmt|;
block|}
DECL|method|reifier (ProcessorDefinition<?> definition)
specifier|public
specifier|static
name|ProcessorReifier
argument_list|<
name|?
extends|extends
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|reifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|Function
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|ProcessorReifier
argument_list|<
name|?
extends|extends
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|reifier
init|=
name|PROCESSORS
operator|.
name|get
argument_list|(
name|definition
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reifier
operator|!=
literal|null
condition|)
block|{
return|return
name|reifier
operator|.
name|apply
argument_list|(
name|definition
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported definition: "
operator|+
name|definition
argument_list|)
throw|;
block|}
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|definition
specifier|protected
specifier|final
name|T
name|definition
decl_stmt|;
DECL|method|ProcessorReifier (T definition)
specifier|public
name|ProcessorReifier
parameter_list|(
name|T
name|definition
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
block|}
comment|/**      * Override this in definition class and implement logic to create the processor      * based on the definition model.      */
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
specifier|abstract
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Prefer to use {#link #createChildProcessor}.      */
DECL|method|createOutputsProcessor (RouteContext routeContext)
specifier|protected
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
init|=
name|definition
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
return|return
name|createOutputsProcessor
argument_list|(
name|routeContext
argument_list|,
name|outputs
argument_list|)
return|;
block|}
comment|/**      * Creates the child processor (outputs) from the current definition      *      * @param routeContext   the route context      * @param mandatory      whether or not children is mandatory (ie the definition should have outputs)      * @return the created children, or<tt>null</tt> if definition had no output      * @throws Exception is thrown if error creating the child or if it was mandatory and there was no output defined on definition      */
DECL|method|createChildProcessor (RouteContext routeContext, boolean mandatory)
specifier|protected
name|Processor
name|createChildProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|children
init|=
literal|null
decl_stmt|;
comment|// at first use custom factory
if|if
condition|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|children
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|,
name|mandatory
argument_list|)
expr_stmt|;
block|}
comment|// fallback to default implementation if factory did not create the child
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
name|createOutputsProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|==
literal|null
operator|&&
name|mandatory
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Definition has no children on "
operator|+
name|definition
argument_list|)
throw|;
block|}
return|return
name|children
return|;
block|}
DECL|method|addRoutes (RouteContext routeContext, Collection<Route> routes)
specifier|public
name|void
name|addRoutes
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
name|Channel
name|processor
init|=
name|makeProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
comment|// no processor to add
return|return;
block|}
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isRouteAdded
argument_list|()
condition|)
block|{
comment|// are we routing to an endpoint interceptor, if so we should not add it as an event driven
comment|// processor as we use the producer to trigger the interceptor
name|boolean
name|endpointInterceptor
init|=
name|processor
operator|.
name|getNextProcessor
argument_list|()
operator|instanceof
name|InterceptEndpointProcessor
decl_stmt|;
comment|// only add regular processors as event driven
if|if
condition|(
name|endpointInterceptor
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Endpoint interceptor should not be added as an event driven consumer route: {}"
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Adding event driven processor: {}"
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|addEventDrivenProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Wraps the child processor in whatever necessary interceptors and error handlers      */
DECL|method|wrapProcessor (RouteContext routeContext, Processor processor)
specifier|public
name|Channel
name|wrapProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// dont double wrap
if|if
condition|(
name|processor
operator|instanceof
name|Channel
condition|)
block|{
return|return
operator|(
name|Channel
operator|)
name|processor
return|;
block|}
return|return
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|wrapChannel (RouteContext routeContext, Processor processor, ProcessorDefinition<?> child)
specifier|protected
name|Channel
name|wrapChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|child
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|,
name|child
argument_list|,
name|definition
operator|.
name|isInheritErrorHandler
argument_list|()
argument_list|)
return|;
block|}
DECL|method|wrapChannel (RouteContext routeContext, Processor processor, ProcessorDefinition<?> child, Boolean inheritErrorHandler)
specifier|protected
name|Channel
name|wrapChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|child
parameter_list|,
name|Boolean
name|inheritErrorHandler
parameter_list|)
throws|throws
name|Exception
block|{
comment|// put a channel in between this and each output to control the route flow logic
name|ModelChannel
name|channel
init|=
name|createChannel
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
name|channel
operator|.
name|setNextProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
comment|// add interceptor strategies to the channel must be in this order: camel context, route context, local
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|routeContext
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|definition
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the child before init the channel
name|channel
operator|.
name|setChildDefinition
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|channel
operator|.
name|initChannel
argument_list|(
name|definition
argument_list|,
name|routeContext
argument_list|)
expr_stmt|;
comment|// set the error handler, must be done after init as we can set the error handler as first in the chain
if|if
condition|(
name|definition
operator|instanceof
name|TryDefinition
operator|||
name|definition
operator|instanceof
name|CatchDefinition
operator|||
name|definition
operator|instanceof
name|FinallyDefinition
condition|)
block|{
comment|// do not use error handler for try .. catch .. finally blocks as it will handle errors itself
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of doTry .. doCatch .. doFinally so no error handler is applied"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|TryDefinition
operator|.
name|class
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|CatchDefinition
operator|.
name|class
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|FinallyDefinition
operator|.
name|class
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// do not use error handler for try .. catch .. finally blocks as it will handle errors itself
comment|// by checking that any of our parent(s) is not a try .. catch or finally type
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of doTry .. doCatch .. doFinally so no error handler is applied"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|definition
operator|instanceof
name|OnExceptionDefinition
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|OnExceptionDefinition
operator|.
name|class
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of OnException so no error handler is applied"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
comment|// do not use error handler for onExceptions blocks as it will handle errors itself
block|}
elseif|else
if|if
condition|(
name|definition
operator|instanceof
name|HystrixDefinition
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|HystrixDefinition
operator|.
name|class
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// do not use error handler for hystrix as it offers circuit breaking with fallback for its outputs
comment|// however if inherit error handler is enabled, we need to wrap an error handler on the hystrix parent
if|if
condition|(
name|inheritErrorHandler
operator|!=
literal|null
operator|&&
name|inheritErrorHandler
operator|&&
name|child
operator|==
literal|null
condition|)
block|{
comment|// only wrap the parent (not the children of the hystrix)
name|wrapChannelInErrorHandler
argument_list|(
name|channel
argument_list|,
name|routeContext
argument_list|,
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of HystrixCircuitBreaker so no error handler is applied"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|definition
operator|instanceof
name|MulticastDefinition
condition|)
block|{
comment|// do not use error handler for multicast as it offers fine grained error handlers for its outputs
comment|// however if share unit of work is enabled, we need to wrap an error handler on the multicast parent
name|MulticastDefinition
name|def
init|=
operator|(
name|MulticastDefinition
operator|)
name|definition
decl_stmt|;
name|boolean
name|isShareUnitOfWork
init|=
name|def
operator|.
name|getShareUnitOfWork
argument_list|()
operator|!=
literal|null
operator|&&
name|def
operator|.
name|getShareUnitOfWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|isShareUnitOfWork
operator|&&
name|child
operator|==
literal|null
condition|)
block|{
comment|// only wrap the parent (not the children of the multicast)
name|wrapChannelInErrorHandler
argument_list|(
name|channel
argument_list|,
name|routeContext
argument_list|,
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of multicast which have special error handling so no error handler is applied"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// use error handler by default or if configured to do so
name|wrapChannelInErrorHandler
argument_list|(
name|channel
argument_list|,
name|routeContext
argument_list|,
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
comment|// do post init at the end
name|channel
operator|.
name|postInitChannel
argument_list|(
name|definition
argument_list|,
name|routeContext
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"{} wrapped in Channel: {}"
argument_list|,
name|definition
argument_list|,
name|channel
argument_list|)
expr_stmt|;
return|return
name|channel
return|;
block|}
comment|/**      * Wraps the given channel in error handler (if error handler is inherited)      *      * @param channel             the channel      * @param routeContext        the route context      * @param inheritErrorHandler whether to inherit error handler      * @throws Exception can be thrown if failed to create error handler builder      */
DECL|method|wrapChannelInErrorHandler (Channel channel, RouteContext routeContext, Boolean inheritErrorHandler)
specifier|private
name|void
name|wrapChannelInErrorHandler
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|RouteContext
name|routeContext
parameter_list|,
name|Boolean
name|inheritErrorHandler
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|inheritErrorHandler
operator|==
literal|null
operator|||
name|inheritErrorHandler
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is configured to inheritErrorHandler"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|Processor
name|output
init|=
name|channel
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|Processor
name|errorHandler
init|=
name|wrapInErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// set error handler on channel
name|channel
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} is configured to not inheritErrorHandler."
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Wraps the given output in an error handler      *      * @param routeContext the route context      * @param output the output      * @return the output wrapped with the error handler      * @throws Exception can be thrown if failed to create error handler builder      */
DECL|method|wrapInErrorHandler (RouteContext routeContext, Processor output)
specifier|protected
name|Processor
name|wrapInErrorHandler
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|output
parameter_list|)
throws|throws
name|Exception
block|{
name|ErrorHandlerFactory
name|builder
init|=
operator|(
operator|(
name|RouteDefinition
operator|)
name|routeContext
operator|.
name|getRoute
argument_list|()
operator|)
operator|.
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
comment|// create error handler
name|Processor
name|errorHandler
init|=
name|builder
operator|.
name|createErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// invoke lifecycles so we can manage this error handler builder
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
name|strategy
operator|.
name|onErrorHandlerAdd
argument_list|(
name|routeContext
argument_list|,
name|errorHandler
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|errorHandler
return|;
block|}
comment|/**      * Adds the given list of interceptors to the channel.      *      * @param routeContext  the route context      * @param channel       the channel to add strategies      * @param strategies    list of strategies to add.      */
DECL|method|addInterceptStrategies (RouteContext routeContext, Channel channel, List<InterceptStrategy> strategies)
specifier|protected
name|void
name|addInterceptStrategies
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|strategies
parameter_list|)
block|{
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|strategies
control|)
block|{
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isHandleFault
argument_list|()
operator|&&
name|strategy
operator|instanceof
name|HandleFault
condition|)
block|{
comment|// handle fault is disabled so we should not add it
continue|continue;
block|}
comment|// add strategy
name|channel
operator|.
name|addInterceptStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new instance of some kind of composite processor which defaults      * to using a {@link Pipeline} but derived classes could change the behaviour      */
DECL|method|createCompositeProcessor (RouteContext routeContext, List<Processor> list)
specifier|protected
name|Processor
name|createCompositeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|List
argument_list|<
name|Processor
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Pipeline
operator|.
name|newInstance
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/**      * Creates a new instance of the {@link Channel}.      */
DECL|method|createChannel (RouteContext routeContext)
specifier|protected
name|ModelChannel
name|createChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultChannel
argument_list|()
return|;
block|}
DECL|method|createOutputsProcessor (RouteContext routeContext, Collection<ProcessorDefinition<?>> outputs)
specifier|protected
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
comment|// We will save list of actions to restore the outputs back to the original state.
name|Runnable
name|propertyPlaceholdersChangeReverter
init|=
name|ProcessorDefinitionHelper
operator|.
name|createPropertyPlaceholdersChangeReverter
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|createOutputsProcessorImpl
argument_list|(
name|routeContext
argument_list|,
name|outputs
argument_list|)
return|;
block|}
finally|finally
block|{
name|propertyPlaceholdersChangeReverter
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createOutputsProcessorImpl (RouteContext routeContext, Collection<ProcessorDefinition<?>> outputs)
specifier|protected
name|Processor
name|createOutputsProcessorImpl
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Processor
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
range|:
name|outputs
control|)
block|{
comment|// allow any custom logic before we create the processor
name|reifier
argument_list|(
name|output
argument_list|)
operator|.
name|preCreateProcessor
argument_list|()
expr_stmt|;
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|// also resolve properties and constant fields on embedded expressions
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|me
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|output
decl_stmt|;
if|if
condition|(
name|me
operator|instanceof
name|ExpressionNode
condition|)
block|{
name|ExpressionNode
name|exp
init|=
operator|(
name|ExpressionNode
operator|)
name|me
decl_stmt|;
name|ExpressionDefinition
name|expressionDefinition
init|=
name|exp
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|expressionDefinition
operator|!=
literal|null
condition|)
block|{
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|expressionDefinition
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|expressionDefinition
argument_list|)
expr_stmt|;
block|}
block|}
name|Processor
name|processor
init|=
name|createProcessor
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// inject id
if|if
condition|(
name|processor
operator|instanceof
name|IdAware
condition|)
block|{
name|String
name|id
init|=
name|output
operator|.
name|idOrCreate
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|IdAware
operator|)
name|processor
operator|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|instanceof
name|Channel
operator|&&
name|processor
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Processor
name|channel
init|=
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
comment|// if more than one output wrap than in a composite processor else just keep it as is
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|processor
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|=
name|createCompositeProcessor
argument_list|(
name|routeContext
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processor
return|;
block|}
DECL|method|createProcessor (RouteContext routeContext, ProcessorDefinition<?> output)
specifier|protected
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
comment|// at first use custom factory
if|if
condition|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processor
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|// fallback to default implementation if factory did not create the processor
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|processor
operator|=
name|reifier
argument_list|(
name|output
argument_list|)
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
return|return
name|processor
return|;
block|}
comment|/**      * Creates the processor and wraps it in any necessary interceptors and error handlers      */
DECL|method|makeProcessor (RouteContext routeContext)
specifier|protected
name|Channel
name|makeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// We will save list of actions to restore the definition back to the original state.
name|Runnable
name|propertyPlaceholdersChangeReverter
init|=
name|ProcessorDefinitionHelper
operator|.
name|createPropertyPlaceholdersChangeReverter
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|makeProcessorImpl
argument_list|(
name|routeContext
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// Lets restore
name|propertyPlaceholdersChangeReverter
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|makeProcessorImpl (RouteContext routeContext)
specifier|private
name|Channel
name|makeProcessorImpl
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
comment|// allow any custom logic before we create the processor
name|preCreateProcessor
argument_list|()
expr_stmt|;
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|definition
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|definition
argument_list|)
expr_stmt|;
comment|// also resolve properties and constant fields on embedded expressions
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|me
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|definition
decl_stmt|;
if|if
condition|(
name|me
operator|instanceof
name|ExpressionNode
condition|)
block|{
name|ExpressionNode
name|exp
init|=
operator|(
name|ExpressionNode
operator|)
name|me
decl_stmt|;
name|ExpressionDefinition
name|expressionDefinition
init|=
name|exp
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|expressionDefinition
operator|!=
literal|null
condition|)
block|{
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|expressionDefinition
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|expressionDefinition
argument_list|)
expr_stmt|;
block|}
block|}
comment|// at first use custom factory
if|if
condition|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processor
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
comment|// fallback to default implementation if factory did not create the processor
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|processor
operator|=
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
comment|// inject id
if|if
condition|(
name|processor
operator|instanceof
name|IdAware
condition|)
block|{
name|String
name|id
init|=
name|definition
operator|.
name|idOrCreate
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|IdAware
operator|)
name|processor
operator|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
comment|// no processor to make
return|return
literal|null
return|;
block|}
return|return
name|wrapProcessor
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|/**      * Strategy to execute any custom logic before the {@link Processor} is created.      */
DECL|method|preCreateProcessor ()
specifier|protected
name|void
name|preCreateProcessor
parameter_list|()
block|{
name|definition
operator|.
name|preCreateProcessor
argument_list|()
expr_stmt|;
block|}
comment|/**      * Strategy for children to do any custom configuration      *      * @param output the child to be added as output to this      */
DECL|method|configureChild (ProcessorDefinition<?> output)
specifier|public
name|void
name|configureChild
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
parameter_list|)
block|{
comment|// noop
block|}
block|}
end_class

end_unit

