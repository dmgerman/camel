begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|ConstantBeanHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|ConstantStaticTypeBeanHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|ConstantTypeBeanHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MethodNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|RegistryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|BeanReifier
class|class
name|BeanReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|BeanDefinition
argument_list|>
block|{
DECL|method|BeanReifier (ProcessorDefinition<?> definition)
name|BeanReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
name|BeanDefinition
operator|.
name|class
operator|.
name|cast
argument_list|(
name|definition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|bean
init|=
name|definition
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
name|definition
operator|.
name|getRef
argument_list|()
decl_stmt|;
name|String
name|method
init|=
name|definition
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|String
name|beanType
init|=
name|definition
operator|.
name|getBeanType
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
init|=
name|definition
operator|.
name|getBeanClass
argument_list|()
decl_stmt|;
name|BeanProcessor
name|answer
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|bean
operator|!=
literal|null
condition|?
name|bean
operator|.
name|getClass
argument_list|()
else|:
literal|null
decl_stmt|;
name|BeanHolder
name|beanHolder
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|ref
argument_list|)
condition|)
block|{
comment|// lets cache by default
if|if
condition|(
name|isCacheBean
argument_list|()
condition|)
block|{
comment|// cache the registry lookup which avoids repeat lookup in the registry
name|beanHolder
operator|=
operator|new
name|RegistryBean
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|ref
argument_list|)
operator|.
name|createCacheHolder
argument_list|()
expr_stmt|;
comment|// bean holder will check if the bean exists
name|bean
operator|=
name|beanHolder
operator|.
name|getBean
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// we do not cache so we invoke on-demand
name|beanHolder
operator|=
operator|new
name|RegistryBean
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
name|answer
operator|=
operator|new
name|BeanProcessor
argument_list|(
name|beanHolder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|beanType
operator|==
literal|null
operator|&&
name|beanClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bean, ref or beanType must be provided"
argument_list|)
throw|;
block|}
comment|// the clazz is either from beanType or beanClass
if|if
condition|(
name|beanType
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clazz
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|clazz
operator|=
name|beanClass
expr_stmt|;
block|}
comment|// attempt to create bean using injector which supports auto-wiring
if|if
condition|(
name|isCacheBean
argument_list|()
operator|&&
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getInjector
argument_list|()
operator|.
name|supportsAutoWiring
argument_list|()
condition|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Attempting to create new bean instance from class: {} via auto-wiring enabled"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|bean
operator|=
name|CamelContextHelper
operator|.
name|newInstance
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error creating new bean instance from class: "
operator|+
name|clazz
operator|+
literal|". This exception is ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create a bean if there is a default public no-arg constructor
if|if
condition|(
name|bean
operator|==
literal|null
operator|&&
name|isCacheBean
argument_list|()
operator|&&
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Class has default no-arg constructor so creating a new bean instance: {}"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|bean
operator|=
name|CamelContextHelper
operator|.
name|newInstance
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|bean
argument_list|,
literal|"bean"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|// validate the bean type is not from java so you by mistake think its a reference
comment|// to a bean name but the String is being invoke instead
if|if
condition|(
name|bean
operator|instanceof
name|String
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The bean instance is a java.lang.String type: "
operator|+
name|bean
operator|+
literal|". We suppose you want to refer to a bean instance by its id instead. Please use ref."
argument_list|)
throw|;
block|}
comment|// the holder should either be bean or type based
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
name|beanHolder
operator|=
operator|new
name|ConstantBeanHolder
argument_list|(
name|bean
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isCacheBean
argument_list|()
operator|&&
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
comment|// we can only cache if we can create an instance of the bean, and for that we need a public constructor
name|beanHolder
operator|=
operator|new
name|ConstantTypeBeanHolder
argument_list|(
name|clazz
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|createCacheHolder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|beanHolder
operator|=
operator|new
name|ConstantTypeBeanHolder
argument_list|(
name|clazz
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is only for invoking static methods on the bean
name|beanHolder
operator|=
operator|new
name|ConstantStaticTypeBeanHolder
argument_list|(
name|clazz
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|answer
operator|=
operator|new
name|BeanProcessor
argument_list|(
name|beanHolder
argument_list|)
expr_stmt|;
block|}
comment|// check for method exists
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
comment|// check there is a method with the given name, and leverage BeanInfo for that
comment|// which we only do if we are caching the bean as otherwise we will create a bean instance for this check
comment|// which we only want to do if we cache the bean
if|if
condition|(
name|isCacheBean
argument_list|()
condition|)
block|{
name|BeanInfo
name|beanInfo
init|=
name|beanHolder
operator|.
name|getBeanInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
comment|// there is a bean instance, so check for any methods
if|if
condition|(
operator|!
name|beanInfo
operator|.
name|hasMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
operator|new
name|MethodNotFoundException
argument_list|(
literal|null
argument_list|,
name|bean
argument_list|,
name|method
argument_list|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
comment|// there is no bean instance, so check for static methods only
if|if
condition|(
operator|!
name|beanInfo
operator|.
name|hasStaticMethod
argument_list|(
name|method
argument_list|)
condition|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
operator|new
name|MethodNotFoundException
argument_list|(
literal|null
argument_list|,
name|clazz
argument_list|,
name|method
argument_list|,
literal|true
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|isCacheBean ()
specifier|private
name|boolean
name|isCacheBean
parameter_list|()
block|{
return|return
name|definition
operator|.
name|getCache
argument_list|()
operator|==
literal|null
operator|||
name|definition
operator|.
name|getCache
argument_list|()
return|;
block|}
block|}
end_class

end_unit

