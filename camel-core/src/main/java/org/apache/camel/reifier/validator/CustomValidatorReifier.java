begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|validator
operator|.
name|CustomValidatorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|validator
operator|.
name|ValidatorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Validator
import|;
end_import

begin_class
DECL|class|CustomValidatorReifier
class|class
name|CustomValidatorReifier
extends|extends
name|ValidatorReifier
argument_list|<
name|CustomValidatorDefinition
argument_list|>
block|{
DECL|method|CustomValidatorReifier (ValidatorDefinition definition)
name|CustomValidatorReifier
parameter_list|(
name|ValidatorDefinition
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|CustomValidatorDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCreateValidator (CamelContext context)
specifier|protected
name|Validator
name|doCreateValidator
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|definition
operator|.
name|getRef
argument_list|()
operator|==
literal|null
operator|&&
name|definition
operator|.
name|getClassName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'ref' or 'type' must be specified for customValidator"
argument_list|)
throw|;
block|}
name|Validator
name|validator
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|getRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|validator
operator|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|definition
operator|.
name|getRef
argument_list|()
argument_list|,
name|Validator
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|validator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find validator with ref:"
operator|+
name|definition
operator|.
name|getRef
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|validator
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Validator '%s' is already in use. Please check if duplicate validator exists."
argument_list|,
name|definition
operator|.
name|getRef
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|Class
argument_list|<
name|Validator
argument_list|>
name|validatorClass
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|definition
operator|.
name|getClassName
argument_list|()
argument_list|,
name|Validator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|validatorClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find validator class: "
operator|+
name|definition
operator|.
name|getClassName
argument_list|()
argument_list|)
throw|;
block|}
name|validator
operator|=
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|validatorClass
argument_list|)
expr_stmt|;
block|}
name|validator
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|validator
operator|.
name|setType
argument_list|(
name|definition
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

