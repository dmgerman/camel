begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|timer
operator|.
name|TimerEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed Timer Endpoint"
argument_list|)
DECL|class|ManagedTimerEndpoint
specifier|public
class|class
name|ManagedTimerEndpoint
extends|extends
name|ManagedEndpoint
block|{
DECL|field|endpoint
specifier|private
name|TimerEndpoint
name|endpoint
decl_stmt|;
DECL|method|ManagedTimerEndpoint (TimerEndpoint endpoint)
specifier|public
name|ManagedTimerEndpoint
parameter_list|(
name|TimerEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|getEndpoint ()
specifier|public
name|TimerEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Name"
argument_list|)
DECL|method|getTimerName ()
specifier|public
name|String
name|getTimerName
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getTimerName
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Name"
argument_list|)
DECL|method|setTimerName (String timerName)
specifier|public
name|void
name|setTimerName
parameter_list|(
name|String
name|timerName
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setTimerName
argument_list|(
name|timerName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Daemon"
argument_list|)
DECL|method|getDaemon ()
specifier|public
name|boolean
name|getDaemon
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|isDaemon
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Daemon"
argument_list|)
DECL|method|setDaemon (boolean daemon)
specifier|public
name|void
name|setDaemon
parameter_list|(
name|boolean
name|daemon
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setDaemon
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Delay"
argument_list|)
DECL|method|getDelay ()
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getDelay
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Delay"
argument_list|)
DECL|method|setDelay (long delay)
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer FixedRate"
argument_list|)
DECL|method|getFixedRate ()
specifier|public
name|boolean
name|getFixedRate
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|isFixedRate
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer FixedRate"
argument_list|)
DECL|method|setFixedRate (boolean fixedRate)
specifier|public
name|void
name|setFixedRate
parameter_list|(
name|boolean
name|fixedRate
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setFixedRate
argument_list|(
name|fixedRate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Period"
argument_list|)
DECL|method|getPeriod ()
specifier|public
name|long
name|getPeriod
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getPeriod
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timer Period"
argument_list|)
DECL|method|setPeriod (long period)
specifier|public
name|void
name|setPeriod
parameter_list|(
name|long
name|period
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

