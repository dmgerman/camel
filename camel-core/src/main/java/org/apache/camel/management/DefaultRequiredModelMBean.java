begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanOperationInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|RuntimeOperationsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|ModelMBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|RequiredModelMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * A {@link RequiredModelMBean} which allows us to intercept invoking operations.  *<p/>  * For example if sanitize has been enabled on JMX, then we use this implementation  * to hide sensitive information from the returned JMX attributes / operations.  */
end_comment

begin_class
DECL|class|DefaultRequiredModelMBean
specifier|public
class|class
name|DefaultRequiredModelMBean
extends|extends
name|RequiredModelMBean
block|{
DECL|field|sanitize
specifier|private
name|boolean
name|sanitize
decl_stmt|;
DECL|method|DefaultRequiredModelMBean ()
specifier|public
name|DefaultRequiredModelMBean
parameter_list|()
throws|throws
name|MBeanException
throws|,
name|RuntimeOperationsException
block|{
comment|// must have default no-arg constructor
block|}
DECL|method|isSanitize ()
specifier|public
name|boolean
name|isSanitize
parameter_list|()
block|{
return|return
name|sanitize
return|;
block|}
DECL|method|setSanitize (boolean sanitize)
specifier|public
name|void
name|setSanitize
parameter_list|(
name|boolean
name|sanitize
parameter_list|)
block|{
name|this
operator|.
name|sanitize
operator|=
name|sanitize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke (String opName, Object[] opArgs, String[] sig)
specifier|public
name|Object
name|invoke
parameter_list|(
name|String
name|opName
parameter_list|,
name|Object
index|[]
name|opArgs
parameter_list|,
name|String
index|[]
name|sig
parameter_list|)
throws|throws
name|MBeanException
throws|,
name|ReflectionException
block|{
name|Object
name|answer
init|=
name|super
operator|.
name|invoke
argument_list|(
name|opName
argument_list|,
name|opArgs
argument_list|,
name|sig
argument_list|)
decl_stmt|;
comment|// sanitize the answer if enabled and it was a String type (we cannot sanitize other types)
if|if
condition|(
name|sanitize
operator|&&
name|answer
operator|instanceof
name|String
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|answer
argument_list|)
operator|&&
name|isSanitizedOperation
argument_list|(
name|opName
argument_list|)
condition|)
block|{
name|answer
operator|=
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
operator|(
name|String
operator|)
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|isSanitizedOperation (String opName)
specifier|protected
name|boolean
name|isSanitizedOperation
parameter_list|(
name|String
name|opName
parameter_list|)
block|{
for|for
control|(
name|MBeanOperationInfo
name|info
range|:
name|getMBeanInfo
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|opName
argument_list|)
condition|)
block|{
name|Descriptor
name|desc
init|=
name|info
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|desc
operator|.
name|getFieldValue
argument_list|(
literal|"sanitize"
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

