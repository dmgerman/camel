begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_class
DECL|class|CamelNamingStrategy
specifier|public
class|class
name|CamelNamingStrategy
block|{
DECL|field|VALUE_UNKNOWN
specifier|public
specifier|static
specifier|final
name|String
name|VALUE_UNKNOWN
init|=
literal|"unknown"
decl_stmt|;
DECL|field|KEY_CONTEXT
specifier|public
specifier|static
specifier|final
name|String
name|KEY_CONTEXT
init|=
literal|"context"
decl_stmt|;
DECL|field|KEY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|KEY_CLASS
init|=
literal|"class"
decl_stmt|;
DECL|field|KEY_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|KEY_TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|KEY_NAME
specifier|public
specifier|static
specifier|final
name|String
name|KEY_NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|KEY_ROUTE
specifier|public
specifier|static
specifier|final
name|String
name|KEY_ROUTE
init|=
literal|"route"
decl_stmt|;
DECL|field|CLASS_ENDPOINTS
specifier|public
specifier|static
specifier|final
name|String
name|CLASS_ENDPOINTS
init|=
literal|"endpoints"
decl_stmt|;
DECL|field|CLASS_SERVICES
specifier|public
specifier|static
specifier|final
name|String
name|CLASS_SERVICES
init|=
literal|"services"
decl_stmt|;
DECL|field|CLASS_ROUTES
specifier|public
specifier|static
specifier|final
name|String
name|CLASS_ROUTES
init|=
literal|"routes"
decl_stmt|;
DECL|field|domainName
specifier|protected
name|String
name|domainName
init|=
literal|"org.apache.camel"
decl_stmt|;
DECL|field|hostName
specifier|protected
name|String
name|hostName
init|=
literal|"locahost"
decl_stmt|;
DECL|method|CamelNamingStrategy (String domainName)
specifier|public
name|CamelNamingStrategy
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
if|if
condition|(
name|domainName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|domainName
operator|=
name|domainName
expr_stmt|;
block|}
try|try
block|{
name|hostName
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
comment|// ignore, use the default "locahost"
block|}
block|}
comment|/** 	 * Implements the naming strategy for a {@see CamelContext}. 	 * The convention used for a {@see CamelContext} ObjectName is 	 * "<domain>:context=<context>,name=camel". 	 *  	 * @param mbean 	 * @return generated ObjectName 	 * @throws MalformedObjectNameException 	 */
DECL|method|getObjectName (CamelContext context)
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|domainName
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CONTEXT
operator|+
literal|"="
operator|+
name|getContextId
argument_list|(
name|context
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_NAME
operator|+
literal|"="
operator|+
literal|"context"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Implements the naming strategy for a {@see ManagedEndpoint}. 	 * The convention used for a {@see ManagedEndpoint} ObjectName is 	 * "<domain>:context=<context>,type=Endpoints,endpoint=[urlPrefix]localPart". 	 *  	 * @param mbean 	 * @return generated ObjectName 	 * @throws MalformedObjectNameException 	 */
DECL|method|getObjectName (ManagedEndpoint mbean)
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|ManagedEndpoint
name|mbean
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|Endpoint
name|ep
init|=
name|mbean
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|domainName
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CONTEXT
operator|+
literal|"="
operator|+
name|getContextId
argument_list|(
name|ep
operator|.
name|getContext
argument_list|()
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CLASS
operator|+
literal|"="
operator|+
name|CLASS_ENDPOINTS
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_NAME
operator|+
literal|"="
operator|+
name|getEndpointId
argument_list|(
name|ep
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Implements the naming strategy for a {@see ServiceSpport Service}. 	 * The convention used for a {@see Service} ObjectName is 	 * "<domain>:context=<context>,type=Services,endpoint=[urlPrefix]localPart". 	 *  	 * @param mbean 	 * @return generated ObjectName 	 * @throws MalformedObjectNameException 	 */
DECL|method|getObjectName (CamelContext context, ManagedService mbean)
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ManagedService
name|mbean
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|domainName
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CONTEXT
operator|+
literal|"="
operator|+
name|getContextId
argument_list|(
name|context
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CLASS
operator|+
literal|"="
operator|+
name|CLASS_SERVICES
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_NAME
operator|+
literal|"="
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|mbean
operator|.
name|getService
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Implements the naming strategy for a {@see ManagedRoute}. 	 * The convention used for a {@see ManagedEndpoint} ObjectName is 	 * "<domain>:context=<context>,type=Routes,endpoint=[urlPrefix]localPart". 	 *  	 * @param mbean 	 * @return generated ObjectName 	 * @throws MalformedObjectNameException 	 */
DECL|method|getObjectName (ManagedRoute mbean)
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|ManagedRoute
name|mbean
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|Endpoint
name|ep
init|=
name|mbean
operator|.
name|getRoute
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|ctxid
init|=
name|ep
operator|!=
literal|null
condition|?
name|getContextId
argument_list|(
name|ep
operator|.
name|getContext
argument_list|()
argument_list|)
else|:
name|VALUE_UNKNOWN
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|domainName
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CONTEXT
operator|+
literal|"="
operator|+
name|ctxid
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CLASS
operator|+
literal|"="
operator|+
name|CLASS_ROUTES
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_ROUTE
operator|+
literal|"="
operator|+
name|getEndpointId
argument_list|(
name|ep
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Implements the naming strategy for a {@see PerformanceCounter}. 	 * The convention used for a {@see ManagedEndpoint} ObjectName is 	 * "<domain>:context=<context>,type=Routes,endpoint=[urlPrefix]localPart". 	 *  	 * @param mbean 	 * @return generated ObjectName 	 * @throws MalformedObjectNameException 	 */
DECL|method|getObjectName (CamelContext context, PerformanceCounter mbean)
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|PerformanceCounter
name|mbean
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|domainName
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CONTEXT
operator|+
literal|"="
operator|+
name|getContextId
argument_list|(
name|context
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_CLASS
operator|+
literal|"="
operator|+
name|CLASS_ROUTES
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|KEY_ROUTE
operator|+
literal|"="
operator|+
literal|"Route.Counter"
operator|+
literal|","
argument_list|)
expr_stmt|;
comment|// TODO: figure out the route id
name|buffer
operator|.
name|append
argument_list|(
name|KEY_NAME
operator|+
literal|"="
operator|+
literal|"Stats"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getContextId (CamelContext context)
specifier|protected
name|String
name|getContextId
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|String
name|id
init|=
name|context
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|toString
argument_list|(
name|context
operator|.
name|hashCode
argument_list|()
argument_list|)
else|:
name|VALUE_UNKNOWN
decl_stmt|;
return|return
name|hostName
operator|+
literal|"/"
operator|+
name|id
return|;
block|}
DECL|method|getEndpointId (Endpoint ep)
specifier|protected
name|String
name|getEndpointId
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
name|String
name|uri
init|=
name|ep
operator|.
name|getEndpointUri
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|id
init|=
operator|(
name|pos
operator|==
operator|-
literal|1
operator|)
condition|?
name|uri
else|:
literal|"["
operator|+
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|+
literal|"]"
operator|+
name|uri
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ep
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|id
operator|+=
literal|"."
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|ep
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

