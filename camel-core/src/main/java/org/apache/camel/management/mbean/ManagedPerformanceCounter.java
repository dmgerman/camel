begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|commons
operator|.
name|management
operator|.
name|Statistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"PerformanceCounter"
argument_list|)
DECL|class|ManagedPerformanceCounter
specifier|public
class|class
name|ManagedPerformanceCounter
extends|extends
name|ManagedCounter
block|{
DECL|field|exchangesCompleted
specifier|private
name|Statistic
name|exchangesCompleted
decl_stmt|;
DECL|field|exchangesFailed
specifier|private
name|Statistic
name|exchangesFailed
decl_stmt|;
DECL|field|minProcessingTime
specifier|private
name|Statistic
name|minProcessingTime
decl_stmt|;
DECL|field|maxProcessingTime
specifier|private
name|Statistic
name|maxProcessingTime
decl_stmt|;
DECL|field|totalProcessingTime
specifier|private
name|Statistic
name|totalProcessingTime
decl_stmt|;
DECL|field|lastProcessingTime
specifier|private
name|Statistic
name|lastProcessingTime
decl_stmt|;
DECL|field|firstExchangeCompletedTime
specifier|private
name|Statistic
name|firstExchangeCompletedTime
decl_stmt|;
DECL|field|firstExchangeFailureTime
specifier|private
name|Statistic
name|firstExchangeFailureTime
decl_stmt|;
DECL|field|lastExchangeCompletedTime
specifier|private
name|Statistic
name|lastExchangeCompletedTime
decl_stmt|;
DECL|field|lastExchangeFailureTime
specifier|private
name|Statistic
name|lastExchangeFailureTime
decl_stmt|;
DECL|field|statisticsEnabled
specifier|private
name|boolean
name|statisticsEnabled
init|=
literal|true
decl_stmt|;
DECL|method|ManagedPerformanceCounter (ManagementStrategy strategy)
specifier|public
name|ManagedPerformanceCounter
parameter_list|(
name|ManagementStrategy
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|this
operator|.
name|exchangesCompleted
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.exchangesCompleted"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|COUNTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|exchangesFailed
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.exchangesFailed"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|COUNTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|minProcessingTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.minimumProcessingTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|MINIMUM
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxProcessingTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.maximumProcessingTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|MAXIMUM
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalProcessingTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.totalProcessingTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|COUNTER
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastProcessingTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.lastProcessingTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstExchangeCompletedTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.firstExchangeCompletedTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstExchangeFailureTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.firstExchangeFailureTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastExchangeCompletedTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.lastExchangeCompletedTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastExchangeFailureTime
operator|=
name|strategy
operator|.
name|createStatistic
argument_list|(
literal|"org.apache.camel.lastExchangeFailureTime"
argument_list|,
name|this
argument_list|,
name|Statistic
operator|.
name|UpdateMode
operator|.
name|VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Reset counters"
argument_list|)
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exchangesCompleted
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exchangesFailed
operator|.
name|reset
argument_list|()
expr_stmt|;
name|minProcessingTime
operator|.
name|reset
argument_list|()
expr_stmt|;
name|maxProcessingTime
operator|.
name|reset
argument_list|()
expr_stmt|;
name|totalProcessingTime
operator|.
name|reset
argument_list|()
expr_stmt|;
name|lastProcessingTime
operator|.
name|reset
argument_list|()
expr_stmt|;
name|firstExchangeCompletedTime
operator|.
name|reset
argument_list|()
expr_stmt|;
name|firstExchangeFailureTime
operator|.
name|reset
argument_list|()
expr_stmt|;
name|lastExchangeCompletedTime
operator|.
name|reset
argument_list|()
expr_stmt|;
name|lastExchangeFailureTime
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of completed exchanges"
argument_list|)
DECL|method|getExchangesCompleted ()
specifier|public
name|long
name|getExchangesCompleted
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|exchangesCompleted
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of failed exchanges"
argument_list|)
DECL|method|getExchangesFailed ()
specifier|public
name|long
name|getExchangesFailed
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|exchangesFailed
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Min Processing Time [milliseconds]"
argument_list|)
DECL|method|getMinProcessingTime ()
specifier|public
name|long
name|getMinProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|minProcessingTime
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Mean Processing Time [milliseconds]"
argument_list|)
DECL|method|getMeanProcessingTime ()
specifier|public
name|long
name|getMeanProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|count
init|=
name|exchangesCompleted
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|totalProcessingTime
operator|.
name|getValue
argument_list|()
operator|/
name|count
else|:
literal|0
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Max Processing Time [milliseconds]"
argument_list|)
DECL|method|getMaxProcessingTime ()
specifier|public
name|long
name|getMaxProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|maxProcessingTime
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Total Processing Time [milliseconds]"
argument_list|)
DECL|method|getTotalProcessingTime ()
specifier|public
name|long
name|getTotalProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|totalProcessingTime
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Last Processing Time [milliseconds]"
argument_list|)
DECL|method|getLastProcessingTime ()
specifier|public
name|long
name|getLastProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|lastProcessingTime
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Last Exchange Completed Timestamp"
argument_list|)
DECL|method|getLastExchangeCompletedTime ()
specifier|public
name|Date
name|getLastExchangeCompletedTime
parameter_list|()
block|{
name|long
name|value
init|=
name|lastExchangeCompletedTime
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|value
operator|>
literal|0
condition|?
operator|new
name|Date
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"First Exchange Completed Timestamp"
argument_list|)
DECL|method|getFirstExchangeCompletedTime ()
specifier|public
name|Date
name|getFirstExchangeCompletedTime
parameter_list|()
block|{
name|long
name|value
init|=
name|firstExchangeCompletedTime
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|value
operator|>
literal|0
condition|?
operator|new
name|Date
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Last Exchange Failed Timestamp"
argument_list|)
DECL|method|getLastExchangeFailureTime ()
specifier|public
name|Date
name|getLastExchangeFailureTime
parameter_list|()
block|{
name|long
name|value
init|=
name|lastExchangeFailureTime
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|value
operator|>
literal|0
condition|?
operator|new
name|Date
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"First Exchange Failed Timestamp"
argument_list|)
DECL|method|getFirstExchangeFailureTime ()
specifier|public
name|Date
name|getFirstExchangeFailureTime
parameter_list|()
block|{
name|long
name|value
init|=
name|firstExchangeFailureTime
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|value
operator|>
literal|0
condition|?
operator|new
name|Date
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Statistics enabled"
argument_list|)
DECL|method|isStatisticsEnabled ()
specifier|public
name|boolean
name|isStatisticsEnabled
parameter_list|()
block|{
return|return
name|statisticsEnabled
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Statistics enabled"
argument_list|)
DECL|method|setStatisticsEnabled (boolean statisticsEnabled)
specifier|public
name|void
name|setStatisticsEnabled
parameter_list|(
name|boolean
name|statisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|statisticsEnabled
operator|=
name|statisticsEnabled
expr_stmt|;
block|}
comment|/**      * This method is called when an exchange has been processed successfully.      *       * @param time in milliseconds it spent on processing the exchange      */
DECL|method|completedExchange (long time)
specifier|public
specifier|synchronized
name|void
name|completedExchange
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|increment
argument_list|()
expr_stmt|;
name|exchangesCompleted
operator|.
name|increment
argument_list|()
expr_stmt|;
name|minProcessingTime
operator|.
name|updateValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|maxProcessingTime
operator|.
name|updateValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|totalProcessingTime
operator|.
name|updateValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|lastProcessingTime
operator|.
name|updateValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstExchangeCompletedTime
operator|.
name|getUpdateCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|firstExchangeCompletedTime
operator|.
name|updateValue
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
name|lastExchangeCompletedTime
operator|.
name|updateValue
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called when an exchange has been processed and failed.      */
DECL|method|failedExchange ()
specifier|public
specifier|synchronized
name|void
name|failedExchange
parameter_list|()
block|{
name|increment
argument_list|()
expr_stmt|;
name|exchangesFailed
operator|.
name|increment
argument_list|()
expr_stmt|;
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstExchangeFailureTime
operator|.
name|getUpdateCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|firstExchangeFailureTime
operator|.
name|updateValue
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
name|lastExchangeFailureTime
operator|.
name|updateValue
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

