begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|InvalidTargetObjectTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|ModelMBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|RequiredModelMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedCustomProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|AnnotationJmxAttributeSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|assembler
operator|.
name|MetadataMBeanInfoAssembler
import|;
end_import

begin_comment
comment|/**  * An assembler to assemble a {@link javax.management.modelmbean.RequiredModelMBean} which can be used  * to register the object in JMX. The assembler is capable of using the Spring JMX annotations to  * gather the list of JMX operations and attributes.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|JmxMBeanAssembler
specifier|public
class|class
name|JmxMBeanAssembler
block|{
DECL|field|assembler
specifier|private
specifier|final
name|MetadataMBeanInfoAssembler
name|assembler
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|MBeanServer
name|server
decl_stmt|;
DECL|method|JmxMBeanAssembler (MBeanServer server)
specifier|public
name|JmxMBeanAssembler
parameter_list|(
name|MBeanServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|assembler
operator|=
operator|new
name|MetadataMBeanInfoAssembler
argument_list|()
expr_stmt|;
name|this
operator|.
name|assembler
operator|.
name|setAttributeSource
argument_list|(
operator|new
name|AnnotationJmxAttributeSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assemble (Object obj, ObjectName name)
specifier|public
name|RequiredModelMBean
name|assemble
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectName
name|name
parameter_list|)
throws|throws
name|JMException
block|{
name|ModelMBeanInfo
name|mbi
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|ManagedCustomProcessor
condition|)
block|{
name|Object
name|custom
init|=
operator|(
operator|(
name|ManagedCustomProcessor
operator|)
name|obj
operator|)
operator|.
name|getManagedObject
argument_list|()
decl_stmt|;
comment|// get the mbean info from the custom managed object
name|mbi
operator|=
name|assembler
operator|.
name|getMBeanInfo
argument_list|(
name|custom
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// and let the custom object be registered in JMX
name|obj
operator|=
name|custom
expr_stmt|;
block|}
else|else
block|{
name|mbi
operator|=
name|assembler
operator|.
name|getMBeanInfo
argument_list|(
name|obj
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RequiredModelMBean
name|mbean
init|=
operator|(
name|RequiredModelMBean
operator|)
name|server
operator|.
name|instantiate
argument_list|(
name|RequiredModelMBean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|mbean
operator|.
name|setModelMBeanInfo
argument_list|(
name|mbi
argument_list|)
expr_stmt|;
try|try
block|{
name|mbean
operator|.
name|setManagedResource
argument_list|(
name|obj
argument_list|,
literal|"ObjectReference"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTargetObjectTypeException
name|itotex
parameter_list|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
name|itotex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|mbean
return|;
block|}
block|}
end_class

end_unit

