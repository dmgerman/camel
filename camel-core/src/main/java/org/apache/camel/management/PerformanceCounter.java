begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"PerformanceCounter"
argument_list|,
name|currencyTimeLimit
operator|=
literal|15
argument_list|)
DECL|class|PerformanceCounter
specifier|public
class|class
name|PerformanceCounter
extends|extends
name|Counter
block|{
DECL|field|numCompleted
specifier|private
name|AtomicLong
name|numCompleted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
DECL|field|minProcessingTime
specifier|private
name|long
name|minProcessingTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|maxProcessingTime
specifier|private
name|long
name|maxProcessingTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|totalProcessingTime
specifier|private
name|double
name|totalProcessingTime
decl_stmt|;
DECL|field|lastExchangeCompletionTime
specifier|private
name|Date
name|lastExchangeCompletionTime
decl_stmt|;
DECL|field|firstExchangeCompletionTime
specifier|private
name|Date
name|firstExchangeCompletionTime
decl_stmt|;
annotation|@
name|Override
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Reset counters"
argument_list|)
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|numCompleted
operator|.
name|set
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|minProcessingTime
operator|=
literal|0L
expr_stmt|;
name|maxProcessingTime
operator|=
literal|0L
expr_stmt|;
name|totalProcessingTime
operator|=
literal|0
expr_stmt|;
name|lastExchangeCompletionTime
operator|=
literal|null
expr_stmt|;
name|firstExchangeCompletionTime
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of successful exchanges"
argument_list|)
DECL|method|getNumCompleted ()
specifier|public
name|long
name|getNumCompleted
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|numCompleted
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of failed exchanges"
argument_list|)
DECL|method|getNumFailed ()
specifier|public
name|long
name|getNumFailed
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|numExchanges
operator|.
name|get
argument_list|()
operator|-
name|numCompleted
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Min Processing Time [ns]"
argument_list|)
DECL|method|getMinProcessingTime ()
specifier|public
specifier|synchronized
name|long
name|getMinProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|minProcessingTime
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Mean Processing Time [ns]"
argument_list|)
DECL|method|getMeanProcessingTime ()
specifier|public
specifier|synchronized
name|long
name|getMeanProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|count
init|=
name|numCompleted
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
operator|(
name|long
operator|)
name|totalProcessingTime
operator|/
name|count
else|:
literal|0L
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Max Processing Time [ns]"
argument_list|)
DECL|method|getMaxProcessingTime ()
specifier|public
specifier|synchronized
name|long
name|getMaxProcessingTime
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|maxProcessingTime
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Last Exchange Completed Timestamp"
argument_list|)
DECL|method|getLastExchangeCompletionTime ()
specifier|public
specifier|synchronized
name|Date
name|getLastExchangeCompletionTime
parameter_list|()
block|{
return|return
name|lastExchangeCompletionTime
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"First Exchange Completed Timestamp"
argument_list|)
DECL|method|getFirstExchangeCompletionTime ()
specifier|public
specifier|synchronized
name|Date
name|getFirstExchangeCompletionTime
parameter_list|()
block|{
return|return
name|firstExchangeCompletionTime
return|;
block|}
DECL|method|completedExchange (long time)
specifier|public
specifier|synchronized
name|void
name|completedExchange
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|increment
argument_list|()
expr_stmt|;
name|numCompleted
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|totalProcessingTime
operator|+=
name|time
expr_stmt|;
if|if
condition|(
name|minProcessingTime
operator|<
literal|0
operator|||
name|time
operator|<
name|minProcessingTime
condition|)
block|{
name|minProcessingTime
operator|=
name|time
expr_stmt|;
block|}
if|if
condition|(
name|time
operator|>
name|maxProcessingTime
condition|)
block|{
name|maxProcessingTime
operator|=
name|time
expr_stmt|;
block|}
name|Date
name|timestamp
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstExchangeCompletionTime
operator|==
literal|null
condition|)
block|{
name|firstExchangeCompletionTime
operator|=
name|timestamp
expr_stmt|;
block|}
name|lastExchangeCompletionTime
operator|=
name|timestamp
expr_stmt|;
block|}
DECL|method|completedExchange ()
specifier|public
name|void
name|completedExchange
parameter_list|()
block|{
name|numExchanges
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

