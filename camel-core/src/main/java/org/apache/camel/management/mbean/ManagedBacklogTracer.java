begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|BacklogTracerEventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedTracerBacklogMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|BacklogTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed BacklogTracer"
argument_list|)
DECL|class|ManagedBacklogTracer
specifier|public
class|class
name|ManagedBacklogTracer
implements|implements
name|ManagedTracerBacklogMBean
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|backlogTracer
specifier|private
specifier|final
name|BacklogTracer
name|backlogTracer
decl_stmt|;
DECL|method|ManagedBacklogTracer (CamelContext camelContext, BacklogTracer backlogTracer)
specifier|public
name|ManagedBacklogTracer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|BacklogTracer
name|backlogTracer
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|backlogTracer
operator|=
name|backlogTracer
expr_stmt|;
block|}
DECL|method|init (ManagementStrategy strategy)
specifier|public
name|void
name|init
parameter_list|(
name|ManagementStrategy
name|strategy
parameter_list|)
block|{
comment|// do nothing
block|}
DECL|method|getContext ()
specifier|public
name|CamelContext
name|getContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|getBacklogTracer ()
specifier|public
name|BacklogTracer
name|getBacklogTracer
parameter_list|()
block|{
return|return
name|backlogTracer
return|;
block|}
DECL|method|getEnabled ()
specifier|public
name|boolean
name|getEnabled
parameter_list|()
block|{
return|return
name|backlogTracer
operator|.
name|isEnabled
argument_list|()
return|;
block|}
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|backlogTracer
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|backlogTracer
operator|.
name|isEnabled
argument_list|()
return|;
block|}
DECL|method|getBacklogSize ()
specifier|public
name|int
name|getBacklogSize
parameter_list|()
block|{
return|return
name|backlogTracer
operator|.
name|getBacklogSize
argument_list|()
return|;
block|}
DECL|method|setBacklogSize (int backlogSize)
specifier|public
name|void
name|setBacklogSize
parameter_list|(
name|int
name|backlogSize
parameter_list|)
block|{
name|backlogTracer
operator|.
name|setBacklogSize
argument_list|(
name|backlogSize
argument_list|)
expr_stmt|;
block|}
DECL|method|setTracePattern (String pattern)
specifier|public
name|void
name|setTracePattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|backlogTracer
operator|.
name|setTracePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|getTracePattern ()
specifier|public
name|String
name|getTracePattern
parameter_list|()
block|{
return|return
name|backlogTracer
operator|.
name|getTracePattern
argument_list|()
return|;
block|}
DECL|method|getTraceCounter ()
specifier|public
name|long
name|getTraceCounter
parameter_list|()
block|{
return|return
name|backlogTracer
operator|.
name|getTraceCounter
argument_list|()
return|;
block|}
DECL|method|resetTraceCounter ()
specifier|public
name|void
name|resetTraceCounter
parameter_list|()
block|{
name|backlogTracer
operator|.
name|resetTraceCounter
argument_list|()
expr_stmt|;
block|}
DECL|method|dumpTracedMessages (String nodeId)
specifier|public
name|List
argument_list|<
name|BacklogTracerEventMessage
argument_list|>
name|dumpTracedMessages
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
return|return
name|backlogTracer
operator|.
name|dumpTracedMessages
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
DECL|method|dumpAllTracedMessages ()
specifier|public
name|List
argument_list|<
name|BacklogTracerEventMessage
argument_list|>
name|dumpAllTracedMessages
parameter_list|()
block|{
return|return
name|backlogTracer
operator|.
name|dumpAllTracedMessages
argument_list|()
return|;
block|}
DECL|method|dumpTracedMessagesAsXml (String nodeId)
specifier|public
name|String
name|dumpTracedMessagesAsXml
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
return|return
name|backlogTracer
operator|.
name|dumpTracedMessagesAsXml
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
DECL|method|dumpAllTracedMessagesAsXml ()
specifier|public
name|String
name|dumpAllTracedMessagesAsXml
parameter_list|()
block|{
return|return
name|backlogTracer
operator|.
name|dumpAllTracedMessagesAsXml
argument_list|()
return|;
block|}
block|}
end_class

end_unit

