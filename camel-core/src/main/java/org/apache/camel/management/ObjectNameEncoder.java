begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_comment
comment|/**  * Utility class providing RFC 1738 style encoding for ObjectName values.  * (see section 2.2).  *  * Key Property Values in ObjectName(s) may not contain one of :",=*?  * (see jmx_1.2_spec, Chapter 6)  *  * @author hzbarcea  *  */
end_comment

begin_class
DECL|class|ObjectNameEncoder
specifier|public
specifier|final
class|class
name|ObjectNameEncoder
block|{
DECL|method|ObjectNameEncoder ()
specifier|private
name|ObjectNameEncoder
parameter_list|()
block|{
comment|// Complete (utility class should not have instances)
block|}
DECL|method|encode (String on)
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|on
parameter_list|)
block|{
return|return
name|encode
argument_list|(
name|on
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|encode (String on, boolean ignoreWildcards)
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|on
parameter_list|,
name|boolean
name|ignoreWildcards
parameter_list|)
block|{
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
literal|"%25"
argument_list|)
expr_stmt|;
comment|// must be first
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"%3a"
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"%22"
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|"%2c"
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"="
argument_list|,
literal|"%3d"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreWildcards
condition|)
block|{
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"*"
argument_list|,
literal|"%2a"
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"?"
argument_list|,
literal|"%3f"
argument_list|)
expr_stmt|;
block|}
return|return
name|on
return|;
block|}
DECL|method|decode (String on)
specifier|public
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|on
parameter_list|)
block|{
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%25"
argument_list|,
literal|"%"
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%3a"
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%22"
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%2c"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%3d"
argument_list|,
literal|"="
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%2a"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|on
operator|=
name|on
operator|.
name|replace
argument_list|(
literal|"%3f"
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
return|return
name|on
return|;
block|}
block|}
end_class

end_unit

