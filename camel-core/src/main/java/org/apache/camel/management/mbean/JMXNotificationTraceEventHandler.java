begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Traceable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|NotificationSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|NotificationSenderAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_class
DECL|class|JMXNotificationTraceEventHandler
specifier|public
specifier|final
class|class
name|JMXNotificationTraceEventHandler
implements|implements
name|TraceEventHandler
implements|,
name|NotificationSenderAware
block|{
DECL|field|MAX_MESSAGE_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_MESSAGE_LENGTH
init|=
literal|60
decl_stmt|;
DECL|field|num
specifier|private
specifier|final
name|AtomicLong
name|num
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|tracer
specifier|private
specifier|final
name|Tracer
name|tracer
decl_stmt|;
DECL|field|notificationSender
specifier|private
name|NotificationSender
name|notificationSender
decl_stmt|;
DECL|method|JMXNotificationTraceEventHandler (Tracer tracer)
specifier|public
name|JMXNotificationTraceEventHandler
parameter_list|(
name|Tracer
name|tracer
parameter_list|)
block|{
name|this
operator|.
name|tracer
operator|=
name|tracer
expr_stmt|;
block|}
DECL|method|traceExchangeOut (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange, Object traceState)
specifier|public
name|void
name|traceExchangeOut
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|traceState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// We do nothing here
block|}
DECL|method|traceExchangeIn (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|Object
name|traceExchangeIn
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Just trace the exchange as usual
name|traceExchange
argument_list|(
name|node
argument_list|,
name|target
argument_list|,
name|traceInterceptor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|traceExchange (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|void
name|traceExchange
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|notificationSender
operator|!=
literal|null
operator|&&
name|tracer
operator|.
name|isJmxTraceNotifications
argument_list|()
condition|)
block|{
name|String
name|body
init|=
name|MessageHelper
operator|.
name|extractBodyForLogging
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|tracer
operator|.
name|getTraceBodySize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|body
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|message
init|=
name|body
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|body
operator|.
name|length
argument_list|()
argument_list|,
name|MAX_MESSAGE_LENGTH
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tm
init|=
name|createTraceMessage
argument_list|(
name|node
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|Notification
name|notification
init|=
operator|new
name|Notification
argument_list|(
literal|"TraceNotification"
argument_list|,
name|exchange
operator|.
name|toString
argument_list|()
argument_list|,
name|num
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|notification
operator|.
name|setUserData
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|notificationSender
operator|.
name|sendNotification
argument_list|(
name|notification
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTraceMessage (ProcessorDefinition<?> node, Exchange exchange, String body)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createTraceMessage
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|String
name|body
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mi
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|mi
operator|.
name|put
argument_list|(
literal|"ExchangeId"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|put
argument_list|(
literal|"EndpointURI"
argument_list|,
name|getEndpointUri
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|mi
operator|.
name|put
argument_list|(
literal|"TimeStamp"
argument_list|,
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mi
operator|.
name|put
argument_list|(
literal|"Body"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sHeaders
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sProperties
init|=
name|exchange
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|sHeaders
operator|.
name|keySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mi
operator|.
name|put
argument_list|(
literal|"Headers"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|sProperties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mi
operator|.
name|put
argument_list|(
literal|"Properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|mi
return|;
block|}
DECL|method|getEndpointUri (ProcessorDefinition<?> node)
specifier|private
name|String
name|getEndpointUri
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|Traceable
condition|)
block|{
name|Traceable
name|tr
init|=
operator|(
name|Traceable
operator|)
name|node
decl_stmt|;
return|return
name|tr
operator|.
name|getTraceLabel
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|node
operator|.
name|getLabel
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setNotificationSender (NotificationSender sender)
specifier|public
name|void
name|setNotificationSender
parameter_list|(
name|NotificationSender
name|sender
parameter_list|)
block|{
name|this
operator|.
name|notificationSender
operator|=
name|sender
expr_stmt|;
block|}
block|}
end_class

end_unit

