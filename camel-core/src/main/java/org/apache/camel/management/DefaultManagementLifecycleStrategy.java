begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ErrorHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ManagementStatisticsLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TimerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|VetoCamelContextStartException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|PerformanceCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ConsumerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|EndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|EventDrivenConsumerRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ProducerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ThrottlingInflightRoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedConsumerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedEndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedProducerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedThrottlingInflightRoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedTypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|AOPDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PolicyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementObjectStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|TimerListenerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|KeyValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default JMX managed lifecycle strategy that registered objects using the configured  * {@link org.apache.camel.spi.ManagementStrategy}.  *  * @see org.apache.camel.spi.ManagementStrategy  * @version   */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|DefaultManagementLifecycleStrategy
specifier|public
class|class
name|DefaultManagementLifecycleStrategy
extends|extends
name|ServiceSupport
implements|implements
name|LifecycleStrategy
implements|,
name|CamelContextAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultManagementLifecycleStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the wrapped processors is for performance counters, which are in use for the created routes
comment|// when a route is removed, we should remove the associated processors from this map
DECL|field|wrappedProcessors
specifier|private
specifier|final
name|Map
argument_list|<
name|Processor
argument_list|,
name|KeyValueHolder
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|InstrumentationProcessor
argument_list|>
argument_list|>
name|wrappedProcessors
init|=
operator|new
name|HashMap
argument_list|<
name|Processor
argument_list|,
name|KeyValueHolder
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|InstrumentationProcessor
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|preServices
specifier|private
specifier|final
name|List
argument_list|<
name|PreRegisterService
argument_list|>
name|preServices
init|=
operator|new
name|ArrayList
argument_list|<
name|PreRegisterService
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|timerListenerManager
specifier|private
specifier|final
name|TimerListenerManager
name|timerListenerManager
init|=
operator|new
name|TimerListenerManager
argument_list|()
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|initialized
specifier|private
specifier|volatile
name|boolean
name|initialized
decl_stmt|;
DECL|field|knowRouteIds
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|knowRouteIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|managedTracers
specifier|private
specifier|final
name|Map
argument_list|<
name|Tracer
argument_list|,
name|ManagedTracer
argument_list|>
name|managedTracers
init|=
operator|new
name|HashMap
argument_list|<
name|Tracer
argument_list|,
name|ManagedTracer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|managedThreadPools
specifier|private
specifier|final
name|Map
argument_list|<
name|ThreadPoolExecutor
argument_list|,
name|Object
argument_list|>
name|managedThreadPools
init|=
operator|new
name|HashMap
argument_list|<
name|ThreadPoolExecutor
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DefaultManagementLifecycleStrategy ()
specifier|public
name|DefaultManagementLifecycleStrategy
parameter_list|()
block|{     }
DECL|method|DefaultManagementLifecycleStrategy (CamelContext camelContext)
specifier|public
name|DefaultManagementLifecycleStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|onContextStart (CamelContext context)
specifier|public
name|void
name|onContextStart
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|VetoCamelContextStartException
block|{
name|Object
name|mc
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForCamelContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|context
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|managementName
init|=
name|context
operator|.
name|getManagementNameStrategy
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|ObjectName
name|on
init|=
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementNamingStrategy
argument_list|()
operator|.
name|getObjectNameForCamelContext
argument_list|(
name|managementName
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|mc
argument_list|,
name|on
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// okay there exists already a CamelContext with this name, we can try to fix it by finding a free name
name|boolean
name|fixed
init|=
literal|false
decl_stmt|;
comment|// if we use the default name strategy we can find a free name to use
name|String
name|newName
init|=
name|findFreeName
argument_list|(
name|mc
argument_list|,
name|context
operator|.
name|getManagementNameStrategy
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|newName
operator|!=
literal|null
condition|)
block|{
comment|// use this as the fixed name
name|fixed
operator|=
literal|true
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
name|managementName
operator|=
name|newName
expr_stmt|;
block|}
comment|// we could not fix it so veto starting camel
if|if
condition|(
operator|!
name|fixed
condition|)
block|{
throw|throw
operator|new
name|VetoCamelContextStartException
argument_list|(
literal|"CamelContext ("
operator|+
name|context
operator|.
name|getName
argument_list|()
operator|+
literal|") with ObjectName["
operator|+
name|on
operator|+
literal|"] is already registered."
operator|+
literal|" Make sure to use unique names on CamelContext when using multiple CamelContexts in the same MBeanServer."
argument_list|,
name|context
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"This CamelContext("
operator|+
name|context
operator|.
name|getName
argument_list|()
operator|+
literal|") will be registered using the name: "
operator|+
name|managementName
operator|+
literal|" due to clash with an existing name already registered in MBeanServer."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|VetoCamelContextStartException
name|e
parameter_list|)
block|{
comment|// rethrow veto
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// must rethrow to allow CamelContext fallback to non JMX agent to allow
comment|// Camel to continue to run
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// set the name we are going to use
if|if
condition|(
name|context
operator|instanceof
name|DefaultCamelContext
condition|)
block|{
operator|(
operator|(
name|DefaultCamelContext
operator|)
name|context
operator|)
operator|.
name|setManagementName
argument_list|(
name|managementName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|manageObject
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// must rethrow to allow CamelContext fallback to non JMX agent to allow
comment|// Camel to continue to run
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// yes we made it and are initialized
name|initialized
operator|=
literal|true
expr_stmt|;
comment|// register any pre registered now that we are initialized
name|enlistPreRegisteredServices
argument_list|()
expr_stmt|;
block|}
DECL|method|findFreeName (Object mc, ManagementNameStrategy strategy, String name)
specifier|private
name|String
name|findFreeName
parameter_list|(
name|Object
name|mc
parameter_list|,
name|ManagementNameStrategy
name|strategy
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
comment|// we cannot find a free name for fixed named strategies
if|if
condition|(
name|strategy
operator|.
name|isFixedName
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// okay try to find a free name
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|String
name|newName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
comment|// compute the next name
name|newName
operator|=
name|strategy
operator|.
name|getNextName
argument_list|()
expr_stmt|;
name|ObjectName
name|on
init|=
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementNamingStrategy
argument_list|()
operator|.
name|getObjectNameForCamelContext
argument_list|(
name|newName
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|done
operator|=
operator|!
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|mc
argument_list|,
name|on
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using name: {} in ObjectName[{}] exists? {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|on
block|,
name|done
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newName
return|;
block|}
comment|/**      * After {@link CamelContext} has been enlisted in JMX using {@link #onContextStart(org.apache.camel.CamelContext)}      * then we can enlist any pre registered services as well, as we had to wait for {@link CamelContext} to be      * enlisted first.      *<p/>      * A component/endpoint/service etc. can be pre registered when using dependency injection and annotations such as      * {@link org.apache.camel.Produce}, {@link org.apache.camel.EndpointInject}. Therefore we need to capture those      * registrations up front, and then afterwards enlist in JMX when {@link CamelContext} is being started.      */
DECL|method|enlistPreRegisteredServices ()
specifier|private
name|void
name|enlistPreRegisteredServices
parameter_list|()
block|{
if|if
condition|(
name|preServices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering {} pre registered services"
argument_list|,
name|preServices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PreRegisterService
name|pre
range|:
name|preServices
control|)
block|{
if|if
condition|(
name|pre
operator|.
name|getComponent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|onComponentAdd
argument_list|(
name|pre
operator|.
name|getName
argument_list|()
argument_list|,
name|pre
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pre
operator|.
name|getEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|onEndpointAdd
argument_list|(
name|pre
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pre
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|onServiceAdd
argument_list|(
name|pre
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|pre
operator|.
name|getService
argument_list|()
argument_list|,
name|pre
operator|.
name|getRoute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we are done so clear the list
name|preServices
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|onContextStop (CamelContext context)
specifier|public
name|void
name|onContextStop
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
comment|// the agent hasn't been started
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Object
name|mc
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForCamelContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// the context could have been removed already
if|if
condition|(
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|mc
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|unmanageObject
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not unregister CamelContext MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onComponentAdd (String name, Component component)
specifier|public
name|void
name|onComponentAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
comment|// always register components as there are only a few of those
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
comment|// pre register so we can register later when we have been initialized
name|PreRegisterService
name|pre
init|=
operator|new
name|PreRegisterService
argument_list|()
decl_stmt|;
name|pre
operator|.
name|onComponentAdd
argument_list|(
name|name
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|preServices
operator|.
name|add
argument_list|(
name|pre
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Object
name|mc
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForComponent
argument_list|(
name|camelContext
argument_list|,
name|component
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|manageObject
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not register Component MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onComponentRemove (String name, Component component)
specifier|public
name|void
name|onComponentRemove
parameter_list|(
name|String
name|name
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
comment|// the agent hasn't been started
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Object
name|mc
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForComponent
argument_list|(
name|camelContext
argument_list|,
name|component
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|unmanageObject
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not unregister Component MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If the endpoint is an instance of ManagedResource then register it with the      * mbean server, if it is not then wrap the endpoint in a {@link ManagedEndpoint} and      * register that with the mbean server.      *      * @param endpoint the Endpoint attempted to be added      */
DECL|method|onEndpointAdd (Endpoint endpoint)
specifier|public
name|void
name|onEndpointAdd
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
comment|// pre register so we can register later when we have been initialized
name|PreRegisterService
name|pre
init|=
operator|new
name|PreRegisterService
argument_list|()
decl_stmt|;
name|pre
operator|.
name|onEndpointAdd
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|preServices
operator|.
name|add
argument_list|(
name|pre
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|shouldRegister
argument_list|(
name|endpoint
argument_list|,
literal|null
argument_list|)
condition|)
block|{
comment|// avoid registering if not needed
return|return;
block|}
try|try
block|{
name|Object
name|me
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForEndpoint
argument_list|(
name|camelContext
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|me
operator|==
literal|null
condition|)
block|{
comment|// endpoint should not be managed
return|return;
block|}
name|manageObject
argument_list|(
name|me
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not register Endpoint MBean for uri: "
operator|+
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onEndpointRemove (Endpoint endpoint)
specifier|public
name|void
name|onEndpointRemove
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
comment|// the agent hasn't been started
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Object
name|me
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForEndpoint
argument_list|(
name|camelContext
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
name|unmanageObject
argument_list|(
name|me
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not unregister Endpoint MBean for uri: "
operator|+
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onServiceAdd (CamelContext context, Service service, Route route)
specifier|public
name|void
name|onServiceAdd
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Service
name|service
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
comment|// pre register so we can register later when we have been initialized
name|PreRegisterService
name|pre
init|=
operator|new
name|PreRegisterService
argument_list|()
decl_stmt|;
name|pre
operator|.
name|onServiceAdd
argument_list|(
name|context
argument_list|,
name|service
argument_list|,
name|route
argument_list|)
expr_stmt|;
name|preServices
operator|.
name|add
argument_list|(
name|pre
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// services can by any kind of misc type but also processors
comment|// so we have special logic when its a processor
if|if
condition|(
operator|!
name|shouldRegister
argument_list|(
name|service
argument_list|,
name|route
argument_list|)
condition|)
block|{
comment|// avoid registering if not needed
return|return;
block|}
name|Object
name|managedObject
init|=
name|getManagedObjectForService
argument_list|(
name|context
argument_list|,
name|service
argument_list|,
name|route
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedObject
operator|==
literal|null
condition|)
block|{
comment|// service should not be managed
return|return;
block|}
comment|// skip already managed services, for example if a route has been restarted
if|if
condition|(
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|managedObject
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The service is already managed: {}"
argument_list|,
name|service
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|manageObject
argument_list|(
name|managedObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not register service: "
operator|+
name|service
operator|+
literal|" as Service MBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onServiceRemove (CamelContext context, Service service, Route route)
specifier|public
name|void
name|onServiceRemove
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Service
name|service
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
comment|// the agent hasn't been started
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
name|Object
name|managedObject
init|=
name|getManagedObjectForService
argument_list|(
name|context
argument_list|,
name|service
argument_list|,
name|route
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedObject
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|unmanageObject
argument_list|(
name|managedObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not unregister service: "
operator|+
name|service
operator|+
literal|" as Service MBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getManagedObjectForService (CamelContext context, Service service, Route route)
specifier|private
name|Object
name|getManagedObjectForService
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Service
name|service
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
comment|// skip channel, UoW and dont double wrap instrumentation
if|if
condition|(
name|service
operator|instanceof
name|Channel
operator|||
name|service
operator|instanceof
name|UnitOfWork
operator|||
name|service
operator|instanceof
name|InstrumentationProcessor
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|service
operator|instanceof
name|ManagementAware
condition|)
block|{
return|return
operator|(
operator|(
name|ManagementAware
argument_list|<
name|Service
argument_list|>
operator|)
name|service
operator|)
operator|.
name|getManagedObject
argument_list|(
name|service
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|Tracer
condition|)
block|{
comment|// special for tracer
name|Tracer
name|tracer
init|=
operator|(
name|Tracer
operator|)
name|service
decl_stmt|;
name|ManagedTracer
name|mt
init|=
name|managedTracers
operator|.
name|get
argument_list|(
name|tracer
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt
operator|==
literal|null
condition|)
block|{
name|mt
operator|=
operator|new
name|ManagedTracer
argument_list|(
name|context
argument_list|,
name|tracer
argument_list|)
expr_stmt|;
name|mt
operator|.
name|init
argument_list|(
name|getManagementStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|managedTracers
operator|.
name|put
argument_list|(
name|tracer
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
return|return
name|mt
return|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|EventNotifier
condition|)
block|{
name|answer
operator|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForEventNotifier
argument_list|(
name|context
argument_list|,
operator|(
name|EventNotifier
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|Producer
condition|)
block|{
name|answer
operator|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForProducer
argument_list|(
name|context
argument_list|,
operator|(
name|Producer
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|Consumer
condition|)
block|{
name|answer
operator|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForConsumer
argument_list|(
name|context
argument_list|,
operator|(
name|Consumer
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|Processor
condition|)
block|{
comment|// special for processors as we need to do some extra work
return|return
name|getManagedObjectForProcessor
argument_list|(
name|context
argument_list|,
operator|(
name|Processor
operator|)
name|service
argument_list|,
name|route
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|ThrottlingInflightRoutePolicy
condition|)
block|{
name|answer
operator|=
operator|new
name|ManagedThrottlingInflightRoutePolicy
argument_list|(
name|context
argument_list|,
operator|(
name|ThrottlingInflightRoutePolicy
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|ConsumerCache
condition|)
block|{
name|answer
operator|=
operator|new
name|ManagedConsumerCache
argument_list|(
name|context
argument_list|,
operator|(
name|ConsumerCache
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|ProducerCache
condition|)
block|{
name|answer
operator|=
operator|new
name|ManagedProducerCache
argument_list|(
name|context
argument_list|,
operator|(
name|ProducerCache
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|EndpointRegistry
condition|)
block|{
name|answer
operator|=
operator|new
name|ManagedEndpointRegistry
argument_list|(
name|context
argument_list|,
operator|(
name|EndpointRegistry
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|TypeConverterRegistry
condition|)
block|{
name|answer
operator|=
operator|new
name|ManagedTypeConverterRegistry
argument_list|(
name|context
argument_list|,
operator|(
name|TypeConverterRegistry
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
comment|// fallback as generic service
name|answer
operator|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForService
argument_list|(
name|context
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|answer
operator|instanceof
name|ManagedService
condition|)
block|{
name|ManagedService
name|ms
init|=
operator|(
name|ManagedService
operator|)
name|answer
decl_stmt|;
name|ms
operator|.
name|setRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|ms
operator|.
name|init
argument_list|(
name|getManagementStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getManagedObjectForProcessor (CamelContext context, Processor processor, Route route)
specifier|private
name|Object
name|getManagedObjectForProcessor
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
comment|// a bit of magic here as the processors we want to manage have already been registered
comment|// in the wrapped processors map when Camel have instrumented the route on route initialization
comment|// so the idea is now to only manage the processors from the map
name|KeyValueHolder
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|InstrumentationProcessor
argument_list|>
name|holder
init|=
name|wrappedProcessors
operator|.
name|get
argument_list|(
name|processor
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
comment|// skip as its not an well known processor we want to manage anyway, such as Channel/UnitOfWork/Pipeline etc.
return|return
literal|null
return|;
block|}
comment|// get the managed object as it can be a specialized type such as a Delayer/Throttler etc.
name|Object
name|managedObject
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForProcessor
argument_list|(
name|context
argument_list|,
name|processor
argument_list|,
name|holder
operator|.
name|getKey
argument_list|()
argument_list|,
name|route
argument_list|)
decl_stmt|;
comment|// only manage if we have a name for it as otherwise we do not want to manage it anyway
if|if
condition|(
name|managedObject
operator|!=
literal|null
condition|)
block|{
comment|// is it a performance counter then we need to set our counter
if|if
condition|(
name|managedObject
operator|instanceof
name|PerformanceCounter
condition|)
block|{
name|InstrumentationProcessor
name|counter
init|=
name|holder
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
comment|// change counter to us
name|counter
operator|.
name|setCounter
argument_list|(
name|managedObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|managedObject
return|;
block|}
DECL|method|onRoutesAdd (Collection<Route> routes)
specifier|public
name|void
name|onRoutesAdd
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
for|for
control|(
name|Route
name|route
range|:
name|routes
control|)
block|{
comment|// if we are starting CamelContext or either of the two options has been
comment|// enabled, then enlist the route as a known route
if|if
condition|(
name|getCamelContext
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarting
argument_list|()
operator|||
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getRegisterAlways
argument_list|()
operator|||
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getRegisterNewRoutes
argument_list|()
condition|)
block|{
comment|// register as known route id
name|knowRouteIds
operator|.
name|add
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|shouldRegister
argument_list|(
name|route
argument_list|,
name|route
argument_list|)
condition|)
block|{
comment|// avoid registering if not needed, skip to next route
continue|continue;
block|}
name|Object
name|mr
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForRoute
argument_list|(
name|camelContext
argument_list|,
name|route
argument_list|)
decl_stmt|;
comment|// skip already managed routes, for example if the route has been restarted
if|if
condition|(
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|mr
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The route is already managed: {}"
argument_list|,
name|route
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// get the wrapped instrumentation processor from this route
comment|// and set me as the counter
if|if
condition|(
name|route
operator|instanceof
name|EventDrivenConsumerRoute
condition|)
block|{
name|EventDrivenConsumerRoute
name|edcr
init|=
operator|(
name|EventDrivenConsumerRoute
operator|)
name|route
decl_stmt|;
name|Processor
name|processor
init|=
name|edcr
operator|.
name|getProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|processor
operator|instanceof
name|InstrumentationProcessor
condition|)
block|{
name|InstrumentationProcessor
name|ip
init|=
operator|(
name|InstrumentationProcessor
operator|)
name|processor
decl_stmt|;
name|ip
operator|.
name|setCounter
argument_list|(
name|mr
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|manageObject
argument_list|(
name|mr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not register Route MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not create Route MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|onRoutesRemove (Collection<Route> routes)
specifier|public
name|void
name|onRoutesRemove
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
comment|// the agent hasn't been started
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Route
name|route
range|:
name|routes
control|)
block|{
name|Object
name|mr
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForRoute
argument_list|(
name|camelContext
argument_list|,
name|route
argument_list|)
decl_stmt|;
comment|// skip unmanaged routes
if|if
condition|(
operator|!
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|mr
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The route is not managed: {}"
argument_list|,
name|route
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|unmanageObject
argument_list|(
name|mr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not unregister Route MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// remove from known routes ids, as the route has been removed
name|knowRouteIds
operator|.
name|remove
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// after the routes has been removed, we should clear the wrapped processors as we no longer need them
comment|// as they were just a provisional map used during creation of routes
name|removeWrappedProcessorsForRoutes
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
DECL|method|onErrorHandlerAdd (RouteContext routeContext, Processor errorHandler, ErrorHandlerFactory errorHandlerBuilder)
specifier|public
name|void
name|onErrorHandlerAdd
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|errorHandler
parameter_list|,
name|ErrorHandlerFactory
name|errorHandlerBuilder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldRegister
argument_list|(
name|errorHandler
argument_list|,
literal|null
argument_list|)
condition|)
block|{
comment|// avoid registering if not needed
return|return;
block|}
name|Object
name|me
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForErrorHandler
argument_list|(
name|camelContext
argument_list|,
name|routeContext
argument_list|,
name|errorHandler
argument_list|,
name|errorHandlerBuilder
argument_list|)
decl_stmt|;
comment|// skip already managed services, for example if a route has been restarted
if|if
condition|(
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|me
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The error handler builder is already managed: {}"
argument_list|,
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|manageObject
argument_list|(
name|me
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not register error handler builder: "
operator|+
name|errorHandlerBuilder
operator|+
literal|" as ErrorHandler MBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onErrorHandlerRemove (RouteContext routeContext, Processor errorHandler, ErrorHandlerFactory errorHandlerBuilder)
specifier|public
name|void
name|onErrorHandlerRemove
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|errorHandler
parameter_list|,
name|ErrorHandlerFactory
name|errorHandlerBuilder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
name|Object
name|me
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForErrorHandler
argument_list|(
name|camelContext
argument_list|,
name|routeContext
argument_list|,
name|errorHandler
argument_list|,
name|errorHandlerBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|me
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|unmanageObject
argument_list|(
name|me
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not unregister error handler: "
operator|+
name|me
operator|+
literal|" as ErrorHandler MBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|onThreadPoolAdd (CamelContext camelContext, ThreadPoolExecutor threadPool, String id, String sourceId, String routeId, String threadPoolProfileId)
specifier|public
name|void
name|onThreadPoolAdd
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ThreadPoolExecutor
name|threadPool
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|sourceId
parameter_list|,
name|String
name|routeId
parameter_list|,
name|String
name|threadPoolProfileId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldRegister
argument_list|(
name|threadPool
argument_list|,
literal|null
argument_list|)
condition|)
block|{
comment|// avoid registering if not needed
return|return;
block|}
name|Object
name|mtp
init|=
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForThreadPool
argument_list|(
name|camelContext
argument_list|,
name|threadPool
argument_list|,
name|id
argument_list|,
name|sourceId
argument_list|,
name|routeId
argument_list|,
name|threadPoolProfileId
argument_list|)
decl_stmt|;
comment|// skip already managed services, for example if a route has been restarted
if|if
condition|(
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|mtp
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The thread pool is already managed: {}"
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|manageObject
argument_list|(
name|mtp
argument_list|)
expr_stmt|;
comment|// store a reference so we can unmanage from JMX when the thread pool is removed
comment|// we need to keep track here, as we cannot re-construct the thread pool ObjectName when removing the thread pool
name|managedThreadPools
operator|.
name|put
argument_list|(
name|threadPool
argument_list|,
name|mtp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not register thread pool: "
operator|+
name|threadPool
operator|+
literal|" as ThreadPool MBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onThreadPoolRemove (CamelContext camelContext, ThreadPoolExecutor threadPool)
specifier|public
name|void
name|onThreadPoolRemove
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ThreadPoolExecutor
name|threadPool
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
comment|// lookup the thread pool and remove it from JMX
name|Object
name|mtp
init|=
name|managedThreadPools
operator|.
name|remove
argument_list|(
name|threadPool
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtp
operator|!=
literal|null
condition|)
block|{
comment|// skip unmanaged routes
if|if
condition|(
operator|!
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|mtp
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The thread pool is not managed: {}"
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|unmanageObject
argument_list|(
name|mtp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not unregister ThreadPool MBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|onRouteContextCreate (RouteContext routeContext)
specifier|public
name|void
name|onRouteContextCreate
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return;
block|}
comment|// Create a map (ProcessorType -> PerformanceCounter)
comment|// to be passed to InstrumentationInterceptStrategy.
name|Map
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|PerformanceCounter
argument_list|>
name|registeredCounters
init|=
operator|new
name|HashMap
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|PerformanceCounter
argument_list|>
argument_list|()
decl_stmt|;
comment|// Each processor in a route will have its own performance counter.
comment|// These performance counter will be embedded to InstrumentationProcessor
comment|// and wrap the appropriate processor by InstrumentationInterceptStrategy.
name|RouteDefinition
name|route
init|=
name|routeContext
operator|.
name|getRoute
argument_list|()
decl_stmt|;
comment|// register performance counters for all processors and its children
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|processor
range|:
name|route
operator|.
name|getOutputs
argument_list|()
control|)
block|{
name|registerPerformanceCounters
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|,
name|registeredCounters
argument_list|)
expr_stmt|;
block|}
comment|// set this managed intercept strategy that executes the JMX instrumentation for performance metrics
comment|// so our registered counters can be used for fine grained performance instrumentation
name|routeContext
operator|.
name|setManagedInterceptStrategy
argument_list|(
operator|new
name|InstrumentationInterceptStrategy
argument_list|(
name|registeredCounters
argument_list|,
name|wrappedProcessors
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the wrapped processors for the given routes, as they are no longer in use.      *<p/>      * This is needed to avoid accumulating memory, if a lot of routes is being added and removed.      *      * @param routes the routes      */
DECL|method|removeWrappedProcessorsForRoutes (Collection<Route> routes)
specifier|private
name|void
name|removeWrappedProcessorsForRoutes
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
comment|// loop the routes, and remove the route associated wrapped processors, as they are no longer in use
for|for
control|(
name|Route
name|route
range|:
name|routes
control|)
block|{
name|String
name|id
init|=
name|route
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|KeyValueHolder
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|InstrumentationProcessor
argument_list|>
argument_list|>
name|it
init|=
name|wrappedProcessors
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValueHolder
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|InstrumentationProcessor
argument_list|>
name|holder
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|RouteDefinition
name|def
init|=
name|ProcessorDefinitionHelper
operator|.
name|getRoute
argument_list|(
name|holder
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|def
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|registerPerformanceCounters (RouteContext routeContext, ProcessorDefinition<?> processor, Map<ProcessorDefinition<?>, PerformanceCounter> registeredCounters)
specifier|private
name|void
name|registerPerformanceCounters
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|processor
parameter_list|,
name|Map
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|,
name|PerformanceCounter
argument_list|>
name|registeredCounters
parameter_list|)
block|{
comment|// traverse children if any exists
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
name|processor
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|child
range|:
name|children
control|)
block|{
name|registerPerformanceCounters
argument_list|(
name|routeContext
argument_list|,
name|child
argument_list|,
name|registeredCounters
argument_list|)
expr_stmt|;
block|}
comment|// skip processors that should not be registered
if|if
condition|(
operator|!
name|registerProcessor
argument_list|(
name|processor
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// okay this is a processor we would like to manage so create the
comment|// a delegate performance counter that acts as the placeholder in the interceptor
comment|// that then delegates to the real mbean which we register later in the onServiceAdd method
name|DelegatePerformanceCounter
name|pc
init|=
operator|new
name|DelegatePerformanceCounter
argument_list|()
decl_stmt|;
comment|// set statistics enabled depending on the option
name|boolean
name|enabled
init|=
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getStatisticsLevel
argument_list|()
operator|==
name|ManagementStatisticsLevel
operator|.
name|All
decl_stmt|;
name|pc
operator|.
name|setStatisticsEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
comment|// and add it as a a registered counter that will be used lazy when Camel
comment|// does the instrumentation of the route and adds the InstrumentationProcessor
comment|// that does the actual performance metrics gatherings at runtime
name|registeredCounters
operator|.
name|put
argument_list|(
name|processor
argument_list|,
name|pc
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should the given processor be registered.      */
DECL|method|registerProcessor (ProcessorDefinition<?> processor)
specifier|protected
name|boolean
name|registerProcessor
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|processor
parameter_list|)
block|{
comment|// skip on exception
if|if
condition|(
name|processor
operator|instanceof
name|OnExceptionDefinition
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// skip on completion
if|if
condition|(
name|processor
operator|instanceof
name|OnCompletionDefinition
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// skip intercept
if|if
condition|(
name|processor
operator|instanceof
name|InterceptDefinition
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// skip aop
if|if
condition|(
name|processor
operator|instanceof
name|AOPDefinition
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// skip policy
if|if
condition|(
name|processor
operator|instanceof
name|PolicyDefinition
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// only if custom id assigned
if|if
condition|(
name|getManagementStrategy
argument_list|()
operator|.
name|isOnlyManageProcessorWithCustomId
argument_list|()
condition|)
block|{
return|return
name|processor
operator|.
name|hasCustomIdAssigned
argument_list|()
return|;
block|}
comment|// use customer filter
return|return
name|getManagementStrategy
argument_list|()
operator|.
name|manageProcessor
argument_list|(
name|processor
argument_list|)
return|;
block|}
DECL|method|getManagementStrategy ()
specifier|private
name|ManagementStrategy
name|getManagementStrategy
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
return|return
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
return|;
block|}
DECL|method|getManagementObjectStrategy ()
specifier|private
name|ManagementObjectStrategy
name|getManagementObjectStrategy
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
return|return
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementObjectStrategy
argument_list|()
return|;
block|}
comment|/**      * Strategy for managing the object      *      * @param me the managed object      * @throws Exception is thrown if error registering the object for management      */
DECL|method|manageObject (Object me)
specifier|protected
name|void
name|manageObject
parameter_list|(
name|Object
name|me
parameter_list|)
throws|throws
name|Exception
block|{
name|getManagementStrategy
argument_list|()
operator|.
name|manageObject
argument_list|(
name|me
argument_list|)
expr_stmt|;
if|if
condition|(
name|timerListenerManager
operator|!=
literal|null
operator|&&
name|me
operator|instanceof
name|TimerListener
condition|)
block|{
name|TimerListener
name|timer
init|=
operator|(
name|TimerListener
operator|)
name|me
decl_stmt|;
name|timerListenerManager
operator|.
name|addTimerListener
argument_list|(
name|timer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Un-manages the object.      *      * @param me the managed object      * @throws Exception is thrown if error unregistering the managed object      */
DECL|method|unmanageObject (Object me)
specifier|protected
name|void
name|unmanageObject
parameter_list|(
name|Object
name|me
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|timerListenerManager
operator|!=
literal|null
operator|&&
name|me
operator|instanceof
name|TimerListener
condition|)
block|{
name|TimerListener
name|timer
init|=
operator|(
name|TimerListener
operator|)
name|me
decl_stmt|;
name|timerListenerManager
operator|.
name|removeTimerListener
argument_list|(
name|timer
argument_list|)
expr_stmt|;
block|}
name|getManagementStrategy
argument_list|()
operator|.
name|unmanageObject
argument_list|(
name|me
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whether or not to register the mbean.      *<p/>      * The {@link ManagementAgent} has options which controls when to register.      * This allows us to only register mbeans accordingly. For example by default any      * dynamic endpoints is not registered. This avoids to register excessive mbeans, which      * most often is not desired.      *      * @param service the object to register      * @param route   an optional route the mbean is associated with, can be<tt>null</tt>      * @return<tt>true</tt> to register,<tt>false</tt> to skip registering      */
DECL|method|shouldRegister (Object service, Route route)
specifier|protected
name|boolean
name|shouldRegister
parameter_list|(
name|Object
name|service
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
comment|// the agent hasn't been started
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Checking whether to register {} from route: {}"
argument_list|,
name|service
argument_list|,
name|route
argument_list|)
expr_stmt|;
name|ManagementAgent
name|agent
init|=
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
decl_stmt|;
if|if
condition|(
name|agent
operator|==
literal|null
condition|)
block|{
comment|// do not register if no agent
return|return
literal|false
return|;
block|}
comment|// always register if we are starting CamelContext
if|if
condition|(
name|getCamelContext
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarting
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// register if always is enabled
if|if
condition|(
name|agent
operator|.
name|getRegisterAlways
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// is it a known route then always accept
if|if
condition|(
name|route
operator|!=
literal|null
operator|&&
name|knowRouteIds
operator|.
name|contains
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// only register if we are starting a new route, and current thread is in starting routes mode
if|if
condition|(
name|agent
operator|.
name|getRegisterNewRoutes
argument_list|()
condition|)
block|{
comment|// no specific route, then fallback to see if this thread is starting routes
comment|// which is kept as state on the camel context
return|return
name|getCamelContext
argument_list|()
operator|.
name|isStartingRoutes
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
name|boolean
name|enabled
init|=
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getStatisticsLevel
argument_list|()
operator|!=
name|ManagementStatisticsLevel
operator|.
name|Off
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"StatisticsLevel at {} so enabling load performance statistics"
argument_list|,
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getStatisticsLevel
argument_list|()
argument_list|)
expr_stmt|;
name|ScheduledExecutorService
name|executorService
init|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"ManagementLoadTask"
argument_list|)
decl_stmt|;
name|timerListenerManager
operator|.
name|setExecutorService
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
comment|// must use 1 sec interval as the load statistics is based on 1 sec calculations
name|timerListenerManager
operator|.
name|setInterval
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|timerListenerManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|initialized
operator|=
literal|false
expr_stmt|;
name|knowRouteIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preServices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|wrappedProcessors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|managedTracers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|managedThreadPools
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|timerListenerManager
argument_list|)
expr_stmt|;
block|}
comment|/**      * Class which holds any pre registration details.      *      * @see org.apache.camel.management.DefaultManagementLifecycleStrategy#enlistPreRegisteredServices()      */
DECL|class|PreRegisterService
specifier|private
specifier|static
specifier|final
class|class
name|PreRegisterService
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|component
specifier|private
name|Component
name|component
decl_stmt|;
DECL|field|endpoint
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|service
specifier|private
name|Service
name|service
decl_stmt|;
DECL|field|route
specifier|private
name|Route
name|route
decl_stmt|;
DECL|method|onComponentAdd (String name, Component component)
specifier|public
name|void
name|onComponentAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
DECL|method|onEndpointAdd (Endpoint endpoint)
specifier|public
name|void
name|onEndpointAdd
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|onServiceAdd (CamelContext camelContext, Service service, Route route)
specifier|public
name|void
name|onServiceAdd
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Service
name|service
parameter_list|,
name|Route
name|route
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|route
operator|=
name|route
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getComponent ()
specifier|public
name|Component
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|getEndpoint ()
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|getService ()
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
DECL|method|getRoute ()
specifier|public
name|Route
name|getRoute
parameter_list|()
block|{
return|return
name|route
return|;
block|}
block|}
block|}
end_class

end_unit

