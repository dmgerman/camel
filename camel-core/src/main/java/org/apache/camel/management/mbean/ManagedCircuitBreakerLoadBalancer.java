begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|CamelOpenMBeanTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedCircuitBreakerLoadBalancerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LoadBalanceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
operator|.
name|CircuitBreakerLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
operator|.
name|ExceptionFailureStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed CircuitBreaker LoadBalancer"
argument_list|)
DECL|class|ManagedCircuitBreakerLoadBalancer
specifier|public
class|class
name|ManagedCircuitBreakerLoadBalancer
extends|extends
name|ManagedProcessor
implements|implements
name|ManagedCircuitBreakerLoadBalancerMBean
block|{
DECL|field|processor
specifier|private
specifier|final
name|CircuitBreakerLoadBalancer
name|processor
decl_stmt|;
DECL|field|exceptions
specifier|private
name|String
name|exceptions
decl_stmt|;
DECL|method|ManagedCircuitBreakerLoadBalancer (CamelContext context, CircuitBreakerLoadBalancer processor, LoadBalanceDefinition definition)
specifier|public
name|ManagedCircuitBreakerLoadBalancer
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|CircuitBreakerLoadBalancer
name|processor
parameter_list|,
name|LoadBalanceDefinition
name|definition
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|processor
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSize ()
specifier|public
name|Integer
name|getSize
parameter_list|()
block|{
return|return
name|processor
operator|.
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHalfOpenAfter ()
specifier|public
name|Long
name|getHalfOpenAfter
parameter_list|()
block|{
return|return
name|processor
operator|.
name|getHalfOpenAfter
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getThreshold ()
specifier|public
name|Integer
name|getThreshold
parameter_list|()
block|{
return|return
name|processor
operator|.
name|getThreshold
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getExceptions ()
specifier|public
name|String
name|getExceptions
parameter_list|()
block|{
if|if
condition|(
name|exceptions
operator|!=
literal|null
condition|)
block|{
return|return
name|exceptions
return|;
block|}
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|processor
operator|.
name|getExceptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
operator|||
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exceptions
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|classes
control|)
block|{
name|csb
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exceptions
operator|=
name|csb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|exceptions
return|;
block|}
annotation|@
name|Override
DECL|method|getCircuitBreakerState ()
specifier|public
name|String
name|getCircuitBreakerState
parameter_list|()
block|{
name|int
name|num
init|=
name|processor
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
return|return
literal|"closed"
return|;
block|}
elseif|else
if|if
condition|(
name|num
operator|==
literal|1
condition|)
block|{
return|return
literal|"half open"
return|;
block|}
else|else
block|{
return|return
literal|"open"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|dumpState ()
specifier|public
name|String
name|dumpState
parameter_list|()
block|{
return|return
name|processor
operator|.
name|dumpState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|exceptionStatistics ()
specifier|public
name|TabularData
name|exceptionStatistics
parameter_list|()
block|{
try|try
block|{
name|TabularData
name|answer
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|CamelOpenMBeanTypes
operator|.
name|loadbalancerExceptionsTabularType
argument_list|()
argument_list|)
decl_stmt|;
name|ExceptionFailureStatistics
name|statistics
init|=
name|processor
operator|.
name|getExceptionFailureStatistics
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|it
init|=
name|statistics
operator|.
name|getExceptions
argument_list|()
decl_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|empty
operator|=
literal|false
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|exception
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|ObjectHelper
operator|.
name|name
argument_list|(
name|exception
argument_list|)
decl_stmt|;
name|long
name|counter
init|=
name|statistics
operator|.
name|getFailureCounter
argument_list|(
name|exception
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|CamelOpenMBeanTypes
operator|.
name|loadbalancerExceptionsCompositeType
argument_list|()
decl_stmt|;
name|CompositeData
name|data
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"exception"
block|,
literal|"failures"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|counter
block|}
argument_list|)
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|empty
condition|)
block|{
comment|// use Exception as a single general
name|String
name|name
init|=
name|ObjectHelper
operator|.
name|name
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|counter
init|=
name|statistics
operator|.
name|getFailureCounter
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|CamelOpenMBeanTypes
operator|.
name|loadbalancerExceptionsCompositeType
argument_list|()
decl_stmt|;
name|CompositeData
name|data
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"exception"
block|,
literal|"failures"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|counter
block|}
argument_list|)
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

