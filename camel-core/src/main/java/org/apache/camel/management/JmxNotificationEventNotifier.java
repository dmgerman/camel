begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationBroadcasterSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A JMX based {@link EventNotifier} which broadcasts JMX {@link Notification}s.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|JmxNotificationEventNotifier
specifier|public
class|class
name|JmxNotificationEventNotifier
extends|extends
name|EventNotifierSupport
implements|implements
name|JmxNotificationBroadcasterAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JmxNotificationEventNotifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|counter
specifier|private
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|notificationBroadcaster
specifier|private
name|NotificationBroadcasterSupport
name|notificationBroadcaster
decl_stmt|;
DECL|field|source
specifier|private
name|String
name|source
init|=
literal|"Camel"
decl_stmt|;
DECL|method|setNotificationBroadcaster (NotificationBroadcasterSupport broadcaster)
specifier|public
name|void
name|setNotificationBroadcaster
parameter_list|(
name|NotificationBroadcasterSupport
name|broadcaster
parameter_list|)
block|{
name|notificationBroadcaster
operator|=
name|broadcaster
expr_stmt|;
block|}
DECL|method|notify (EventObject event)
specifier|public
name|void
name|notify
parameter_list|(
name|EventObject
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|notificationBroadcaster
operator|!=
literal|null
condition|)
block|{
comment|// its recommended to send light weight events and we don't want to have the entire Exchange/CamelContext etc
comment|// serialized as these are the typical source of the EventObject. So we use our own source which is just
comment|// a human readable name, which can be configured.
name|String
name|type
init|=
name|event
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|event
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Notification
name|notification
init|=
operator|new
name|Notification
argument_list|(
name|type
argument_list|,
name|source
argument_list|,
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Broadcasting JMX notification: "
operator|+
name|notification
argument_list|)
expr_stmt|;
block|}
name|notificationBroadcaster
operator|.
name|sendNotification
argument_list|(
name|notification
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isEnabled (EventObject event)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|EventObject
name|event
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|getSource ()
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**      * Sets the source to be used when broadcasting events.      * The source is just a readable identifier which helps the receiver see where the event is coming from.      * You can assign a value such a server or application name etc.      *<p/>      * By default<tt>Camel</tt> will be used as source.      *      * @param source  the source      */
DECL|method|setSource (String source)
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
block|}
end_class

end_unit

