begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link Statistic}  */
end_comment

begin_class
DECL|class|Statistic
specifier|public
class|class
name|Statistic
block|{
comment|/**      * Statistics mode      *<ul>      *<li>VALUE - A statistic with this update mode is a simple value that is a straight forward      * representation of the updated value.</li>      *<li>DELTA - A statistic with this update mode is a value that represents the delta      * between the last two recorded values (or the initial value if two updates have      * not been recorded). This value can be negative if the delta goes up or down.</li>      *<li>COUNTER - A statistic with this update mode interprets updates as increments (positive values)      * or decrements (negative values) to the current value.</li>      *<li>MAXIMUM - A statistic with this update mode is a value that represents the maximum value      * amongst the update values applied to this statistic.</li>      *<li>MINIMUM - A statistic with this update mode is a value that represents the minimum value      * amongst the update values applied to this statistic.</li>      *<ul>      */
DECL|enum|UpdateMode
specifier|public
enum|enum
name|UpdateMode
block|{
DECL|enumConstant|VALUE
DECL|enumConstant|DELTA
DECL|enumConstant|COUNTER
DECL|enumConstant|MAXIMUM
DECL|enumConstant|MINIMUM
name|VALUE
block|,
name|DELTA
block|,
name|COUNTER
block|,
name|MAXIMUM
block|,
name|MINIMUM
block|}
DECL|field|updateMode
specifier|private
specifier|final
name|UpdateMode
name|updateMode
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|AtomicLong
name|value
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|lastValue
specifier|private
specifier|final
name|AtomicLong
name|lastValue
decl_stmt|;
DECL|field|updateCount
specifier|private
specifier|final
name|LongAdder
name|updateCount
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
comment|/**      * Instantiates a new statistic.      *      * @param name  name of statistic      * @param owner owner      * @param updateMode The statistic update mode.      */
DECL|method|Statistic (String name, Object owner, UpdateMode updateMode)
specifier|public
name|Statistic
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|owner
parameter_list|,
name|UpdateMode
name|updateMode
parameter_list|)
block|{
name|this
operator|.
name|updateMode
operator|=
name|updateMode
expr_stmt|;
if|if
condition|(
name|UpdateMode
operator|.
name|DELTA
operator|==
name|updateMode
condition|)
block|{
name|this
operator|.
name|lastValue
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lastValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|updateValue (long newValue)
specifier|public
name|void
name|updateValue
parameter_list|(
name|long
name|newValue
parameter_list|)
block|{
switch|switch
condition|(
name|updateMode
condition|)
block|{
case|case
name|COUNTER
case|:
name|value
operator|.
name|addAndGet
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE
case|:
name|value
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELTA
case|:
if|if
condition|(
name|updateCount
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// remember previous value before updating it
name|lastValue
operator|.
name|set
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|value
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAXIMUM
case|:
name|value
operator|.
name|updateAndGet
argument_list|(
name|value
lambda|->
block|{
if|if
condition|(
name|updateCount
operator|.
name|longValue
argument_list|()
operator|==
literal|0
operator|||
name|value
operator|<
name|newValue
condition|)
block|{
return|return
name|newValue
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|MINIMUM
case|:
name|value
operator|.
name|updateAndGet
argument_list|(
name|value
lambda|->
block|{
if|if
condition|(
name|updateCount
operator|.
name|longValue
argument_list|()
operator|==
literal|0
operator|||
name|value
operator|>
name|newValue
condition|)
block|{
return|return
name|newValue
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
name|updateCount
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|increment ()
specifier|public
name|void
name|increment
parameter_list|()
block|{
name|updateValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|decrement ()
specifier|public
name|void
name|decrement
parameter_list|()
block|{
name|updateValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|long
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|updateMode
operator|==
name|UpdateMode
operator|.
name|DELTA
condition|)
block|{
if|if
condition|(
name|updateCount
operator|.
name|longValue
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|value
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|value
operator|.
name|get
argument_list|()
operator|-
name|lastValue
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
name|value
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getUpdateCount ()
specifier|public
name|long
name|getUpdateCount
parameter_list|()
block|{
return|return
name|updateCount
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|value
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastValue
operator|!=
literal|null
condition|)
block|{
name|lastValue
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|updateCount
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|value
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

