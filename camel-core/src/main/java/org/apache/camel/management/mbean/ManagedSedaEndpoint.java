begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|SedaEndpoint
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed SedaEndpoint"
argument_list|)
DECL|class|ManagedSedaEndpoint
specifier|public
class|class
name|ManagedSedaEndpoint
extends|extends
name|ManagedBrowsableEndpoint
block|{
DECL|method|ManagedSedaEndpoint (SedaEndpoint endpoint)
specifier|public
name|ManagedSedaEndpoint
parameter_list|(
name|SedaEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInstance ()
specifier|public
name|SedaEndpoint
name|getInstance
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|SedaEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|SedaEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Queue max capacity"
argument_list|)
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getSize
argument_list|()
return|;
block|}
DECL|method|setSize (int size)
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Current queue size"
argument_list|)
DECL|method|getCurrentQueueSize ()
specifier|public
name|int
name|getCurrentQueueSize
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getCurrentQueueSize
argument_list|()
return|;
block|}
DECL|method|setBlockWhenFull (boolean blockWhenFull)
specifier|public
name|void
name|setBlockWhenFull
parameter_list|(
name|boolean
name|blockWhenFull
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setBlockWhenFull
argument_list|(
name|blockWhenFull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether the caller will block sending to a full queue"
argument_list|)
DECL|method|isBlockWhenFull ()
specifier|public
name|boolean
name|isBlockWhenFull
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|isBlockWhenFull
argument_list|()
return|;
block|}
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setConcurrentConsumers
argument_list|(
name|concurrentConsumers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of concurrent consumers"
argument_list|)
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConcurrentConsumers
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getTimeout
argument_list|()
return|;
block|}
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isMultipleConsumers ()
specifier|public
name|boolean
name|isMultipleConsumers
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|isMultipleConsumers
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isMultipleConsumersSupported ()
specifier|public
name|boolean
name|isMultipleConsumersSupported
parameter_list|()
block|{
return|return
name|isMultipleConsumers
argument_list|()
return|;
block|}
DECL|method|setMultipleConsumers (boolean multipleConsumers)
specifier|public
name|void
name|setMultipleConsumers
parameter_list|(
name|boolean
name|multipleConsumers
parameter_list|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setMultipleConsumers
argument_list|(
name|multipleConsumers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Purges the queue      */
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Purges the seda queue"
argument_list|)
DECL|method|purgeQueue ()
specifier|public
name|void
name|purgeQueue
parameter_list|()
block|{
name|getEndpoint
argument_list|()
operator|.
name|purgeQueue
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

