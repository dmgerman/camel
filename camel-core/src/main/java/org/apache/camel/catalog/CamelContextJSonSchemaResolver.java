begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_comment
comment|/**  * Uses runtime {@link CamelContext} to resolve the JSon schema files.  */
end_comment

begin_class
DECL|class|CamelContextJSonSchemaResolver
specifier|public
class|class
name|CamelContextJSonSchemaResolver
implements|implements
name|JSonSchemaResolver
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|CamelContextJSonSchemaResolver (CamelContext camelContext)
specifier|public
name|CamelContextJSonSchemaResolver
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponentJSonSchema (String name)
specifier|public
name|String
name|getComponentJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|camelContext
operator|.
name|getComponentParameterJsonSchema
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatJSonSchema (String name)
specifier|public
name|String
name|getDataFormatJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|camelContext
operator|.
name|getDataFormatParameterJsonSchema
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getLanguageJSonSchema (String name)
specifier|public
name|String
name|getLanguageJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|camelContext
operator|.
name|getLanguageParameterJsonSchema
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getOtherJSonSchema (String name)
specifier|public
name|String
name|getOtherJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// not supported
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getModelJSonSchema (String name)
specifier|public
name|String
name|getModelJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|camelContext
operator|.
name|getEipParameterJsonSchema
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

