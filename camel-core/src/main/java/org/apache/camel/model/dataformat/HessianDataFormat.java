begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Hessian data format is used for marshalling and unmarshalling messages using Cauchoâs Hessian format.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|firstVersion
operator|=
literal|"2.17.0"
argument_list|,
name|label
operator|=
literal|"dataformat,transformation"
argument_list|,
name|title
operator|=
literal|"Hessian"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"hessian"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
annotation|@
name|Deprecated
DECL|class|HessianDataFormat
specifier|public
class|class
name|HessianDataFormat
extends|extends
name|DataFormatDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|whitelistEnabled
specifier|private
name|Boolean
name|whitelistEnabled
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|allowedUnmarshallObjects
specifier|private
name|String
name|allowedUnmarshallObjects
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|deniedUnmarshallObjects
specifier|private
name|String
name|deniedUnmarshallObjects
decl_stmt|;
DECL|method|HessianDataFormat ()
specifier|public
name|HessianDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"hessian"
argument_list|)
expr_stmt|;
block|}
DECL|method|getWhitelistEnabled ()
specifier|public
name|Boolean
name|getWhitelistEnabled
parameter_list|()
block|{
return|return
name|whitelistEnabled
return|;
block|}
comment|/**     * Define if Whitelist feature is enabled or not     */
DECL|method|setWhitelistEnabled (Boolean whitelistEnabled)
specifier|public
name|void
name|setWhitelistEnabled
parameter_list|(
name|Boolean
name|whitelistEnabled
parameter_list|)
block|{
name|this
operator|.
name|whitelistEnabled
operator|=
name|whitelistEnabled
expr_stmt|;
block|}
DECL|method|getAllowedUnmarshallObjects ()
specifier|public
name|String
name|getAllowedUnmarshallObjects
parameter_list|()
block|{
return|return
name|allowedUnmarshallObjects
return|;
block|}
comment|/**     * Define the allowed objects to be unmarshalled     */
DECL|method|setAllowedUnmarshallObjects (String allowedUnmarshallObjects)
specifier|public
name|void
name|setAllowedUnmarshallObjects
parameter_list|(
name|String
name|allowedUnmarshallObjects
parameter_list|)
block|{
name|this
operator|.
name|allowedUnmarshallObjects
operator|=
name|allowedUnmarshallObjects
expr_stmt|;
block|}
DECL|method|getDeniedUnmarshallObjects ()
specifier|public
name|String
name|getDeniedUnmarshallObjects
parameter_list|()
block|{
return|return
name|deniedUnmarshallObjects
return|;
block|}
comment|/**     * Define the denied objects to be unmarshalled     */
DECL|method|setDeniedUnmarshallObjects (String deniedUnmarshallObjects)
specifier|public
name|void
name|setDeniedUnmarshallObjects
parameter_list|(
name|String
name|deniedUnmarshallObjects
parameter_list|)
block|{
name|this
operator|.
name|deniedUnmarshallObjects
operator|=
name|deniedUnmarshallObjects
expr_stmt|;
block|}
block|}
end_class

end_unit

