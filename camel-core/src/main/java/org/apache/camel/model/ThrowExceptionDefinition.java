begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|ThrowExceptionProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Throws an exception  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"error"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"throwException"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ThrowExceptionDefinition
specifier|public
class|class
name|ThrowExceptionDefinition
extends|extends
name|NoOutputDefinition
argument_list|<
name|ThrowExceptionDefinition
argument_list|>
block|{
annotation|@
name|XmlAttribute
DECL|field|ref
specifier|private
name|String
name|ref
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|exception
specifier|private
name|Exception
name|exception
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|exceptionType
specifier|private
name|String
name|exceptionType
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|exceptionClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|exceptionClass
decl_stmt|;
DECL|method|ThrowExceptionDefinition ()
specifier|public
name|ThrowExceptionDefinition
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ThrowException["
operator|+
name|description
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|description ()
specifier|protected
name|String
name|description
parameter_list|()
block|{
return|return
name|exception
operator|!=
literal|null
condition|?
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
else|:
literal|"ref:"
operator|+
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"throwException"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"throwException["
operator|+
name|description
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|!=
literal|null
operator|&&
name|exception
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|exception
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|ref
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exceptionType
operator|!=
literal|null
operator|&&
name|exceptionClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|exceptionClass
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|exceptionType
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|exception
operator|==
literal|null
operator|&&
name|exceptionClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"exception or exceptionClass/exceptionType must be configured on: "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
operator|new
name|ThrowExceptionProcessor
argument_list|(
name|exception
argument_list|,
name|exceptionClass
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|getRef ()
specifier|public
name|String
name|getRef
parameter_list|()
block|{
return|return
name|ref
return|;
block|}
comment|/**      * Reference to the exception instance to lookup from the registry to throw      */
DECL|method|setRef (String ref)
specifier|public
name|void
name|setRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|ref
expr_stmt|;
block|}
DECL|method|getException ()
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
DECL|method|setException (Exception exception)
specifier|public
name|void
name|setException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
comment|/**      * To create a new exception instance and use the given message as caused message (supports simple language)      */
DECL|method|setMessage (String message)
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
DECL|method|getExceptionType ()
specifier|public
name|String
name|getExceptionType
parameter_list|()
block|{
return|return
name|exceptionType
return|;
block|}
comment|/**      * The class of the exception to create using the message.      *      * @see #setMessage(String)      */
DECL|method|setExceptionType (String exceptionType)
specifier|public
name|void
name|setExceptionType
parameter_list|(
name|String
name|exceptionType
parameter_list|)
block|{
name|this
operator|.
name|exceptionType
operator|=
name|exceptionType
expr_stmt|;
block|}
DECL|method|getExceptionClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|getExceptionClass
parameter_list|()
block|{
return|return
name|exceptionClass
return|;
block|}
comment|/**      * The class of the exception to create using the message.      *      * @see #setMessage(String)      */
DECL|method|setExceptionClass (Class<? extends Exception> exceptionClass)
specifier|public
name|void
name|setExceptionClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|exceptionClass
parameter_list|)
block|{
name|this
operator|.
name|exceptionClass
operator|=
name|exceptionClass
expr_stmt|;
block|}
block|}
end_class

end_unit

