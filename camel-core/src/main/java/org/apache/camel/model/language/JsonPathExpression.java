begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.language
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * To use JsonPath in Camel expressions or predicates.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|firstVersion
operator|=
literal|"2.13.0"
argument_list|,
name|label
operator|=
literal|"language,json"
argument_list|,
name|title
operator|=
literal|"JsonPath"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"jsonpath"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|JsonPathExpression
specifier|public
class|class
name|JsonPathExpression
extends|extends
name|ExpressionDefinition
block|{
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"resultType"
argument_list|)
DECL|field|resultTypeName
specifier|private
name|String
name|resultTypeName
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|resultType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|resultType
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|suppressExceptions
specifier|private
name|Boolean
name|suppressExceptions
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|allowSimple
specifier|private
name|Boolean
name|allowSimple
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|allowEasyPredicate
specifier|private
name|Boolean
name|allowEasyPredicate
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|writeAsString
specifier|private
name|Boolean
name|writeAsString
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|headerName
specifier|private
name|String
name|headerName
decl_stmt|;
DECL|method|JsonPathExpression ()
specifier|public
name|JsonPathExpression
parameter_list|()
block|{     }
DECL|method|JsonPathExpression (String expression)
specifier|public
name|JsonPathExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
DECL|method|getResultTypeName ()
specifier|public
name|String
name|getResultTypeName
parameter_list|()
block|{
return|return
name|resultTypeName
return|;
block|}
comment|/**      * Sets the class name of the result type (type from output)      */
DECL|method|setResultTypeName (String resultTypeName)
specifier|public
name|void
name|setResultTypeName
parameter_list|(
name|String
name|resultTypeName
parameter_list|)
block|{
name|this
operator|.
name|resultTypeName
operator|=
name|resultTypeName
expr_stmt|;
block|}
DECL|method|getResultType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getResultType
parameter_list|()
block|{
return|return
name|resultType
return|;
block|}
comment|/**      * Sets the class of the result type (type from output)      */
DECL|method|setResultType (Class<?> resultType)
specifier|public
name|void
name|setResultType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|resultType
parameter_list|)
block|{
name|this
operator|.
name|resultType
operator|=
name|resultType
expr_stmt|;
block|}
DECL|method|getSuppressExceptions ()
specifier|public
name|Boolean
name|getSuppressExceptions
parameter_list|()
block|{
return|return
name|suppressExceptions
return|;
block|}
DECL|method|getAllowSimple ()
specifier|public
name|Boolean
name|getAllowSimple
parameter_list|()
block|{
return|return
name|allowSimple
return|;
block|}
comment|/**      * Whether to allow in inlined simple exceptions in the JsonPath expression      */
DECL|method|setAllowSimple (Boolean allowSimple)
specifier|public
name|void
name|setAllowSimple
parameter_list|(
name|Boolean
name|allowSimple
parameter_list|)
block|{
name|this
operator|.
name|allowSimple
operator|=
name|allowSimple
expr_stmt|;
block|}
DECL|method|getAllowEasyPredicate ()
specifier|public
name|Boolean
name|getAllowEasyPredicate
parameter_list|()
block|{
return|return
name|allowEasyPredicate
return|;
block|}
comment|/**      * Whether to allow using the easy predicate parser to pre-parse predicates.      */
DECL|method|setAllowEasyPredicate (Boolean allowEasyPredicate)
specifier|public
name|void
name|setAllowEasyPredicate
parameter_list|(
name|Boolean
name|allowEasyPredicate
parameter_list|)
block|{
name|this
operator|.
name|allowEasyPredicate
operator|=
name|allowEasyPredicate
expr_stmt|;
block|}
comment|/**      * Whether to suppress exceptions such as PathNotFoundException.      */
DECL|method|setSuppressExceptions (Boolean suppressExceptions)
specifier|public
name|void
name|setSuppressExceptions
parameter_list|(
name|Boolean
name|suppressExceptions
parameter_list|)
block|{
name|this
operator|.
name|suppressExceptions
operator|=
name|suppressExceptions
expr_stmt|;
block|}
DECL|method|getWriteAsString ()
specifier|public
name|Boolean
name|getWriteAsString
parameter_list|()
block|{
return|return
name|writeAsString
return|;
block|}
comment|/**      * Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.      */
DECL|method|setWriteAsString (Boolean writeAsString)
specifier|public
name|void
name|setWriteAsString
parameter_list|(
name|Boolean
name|writeAsString
parameter_list|)
block|{
name|this
operator|.
name|writeAsString
operator|=
name|writeAsString
expr_stmt|;
block|}
DECL|method|getHeaderName ()
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
comment|/**      * Name of header to use as input, instead of the message body      */
DECL|method|setHeaderName (String headerName)
specifier|public
name|void
name|setHeaderName
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
name|this
operator|.
name|headerName
operator|=
name|headerName
expr_stmt|;
block|}
DECL|method|getLanguage ()
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"jsonpath"
return|;
block|}
annotation|@
name|Override
DECL|method|createExpression (CamelContext camelContext)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|resultType
operator|==
literal|null
operator|&&
name|resultTypeName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|resultType
operator|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|resultTypeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|createExpression
argument_list|(
name|camelContext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|configureExpression (CamelContext camelContext, Expression expression)
specifier|protected
name|void
name|configureExpression
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|resultType
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|expression
argument_list|,
literal|"resultType"
argument_list|,
name|resultType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suppressExceptions
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|expression
argument_list|,
literal|"suppressExceptions"
argument_list|,
name|suppressExceptions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowSimple
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|expression
argument_list|,
literal|"allowSimple"
argument_list|,
name|allowSimple
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowEasyPredicate
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|expression
argument_list|,
literal|"allowEasyPredicate"
argument_list|,
name|allowEasyPredicate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeAsString
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|expression
argument_list|,
literal|"writeAsString"
argument_list|,
name|writeAsString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headerName
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|expression
argument_list|,
literal|"headerName"
argument_list|,
name|headerName
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|configureExpression
argument_list|(
name|camelContext
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configurePredicate (CamelContext camelContext, Predicate predicate)
specifier|protected
name|void
name|configurePredicate
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|resultType
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|predicate
argument_list|,
literal|"resultType"
argument_list|,
name|resultType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suppressExceptions
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|predicate
argument_list|,
literal|"suppressExceptions"
argument_list|,
name|suppressExceptions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowSimple
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|predicate
argument_list|,
literal|"allowSimple"
argument_list|,
name|allowSimple
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowEasyPredicate
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|predicate
argument_list|,
literal|"allowEasyPredicate"
argument_list|,
name|allowEasyPredicate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeAsString
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|predicate
argument_list|,
literal|"writeAsString"
argument_list|,
name|writeAsString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headerName
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|predicate
argument_list|,
literal|"headerName"
argument_list|,
name|headerName
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|configurePredicate
argument_list|(
name|camelContext
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

