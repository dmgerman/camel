begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
operator|.
name|FIELD
import|;
end_import

begin_comment
comment|/**  * Represents the uniVocity CSV {@link org.apache.camel.spi.DataFormat}  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"univocity-csv"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|FIELD
argument_list|)
DECL|class|UniVocityCsvDataFormat
specifier|public
class|class
name|UniVocityCsvDataFormat
extends|extends
name|UniVocityAbstractDataFormat
block|{
annotation|@
name|XmlAttribute
DECL|field|quoteAllFields
specifier|protected
name|Boolean
name|quoteAllFields
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|quote
specifier|protected
name|String
name|quote
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|quoteEscape
specifier|protected
name|String
name|quoteEscape
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|delimiter
specifier|protected
name|String
name|delimiter
decl_stmt|;
DECL|method|UniVocityCsvDataFormat ()
specifier|public
name|UniVocityCsvDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"univocity-csv"
argument_list|)
expr_stmt|;
block|}
DECL|method|getQuoteAllFields ()
specifier|public
name|Boolean
name|getQuoteAllFields
parameter_list|()
block|{
return|return
name|quoteAllFields
return|;
block|}
DECL|method|setQuoteAllFields (Boolean quoteAllFields)
specifier|public
name|void
name|setQuoteAllFields
parameter_list|(
name|Boolean
name|quoteAllFields
parameter_list|)
block|{
name|this
operator|.
name|quoteAllFields
operator|=
name|quoteAllFields
expr_stmt|;
block|}
DECL|method|getQuote ()
specifier|public
name|String
name|getQuote
parameter_list|()
block|{
return|return
name|quote
return|;
block|}
DECL|method|setQuote (String quote)
specifier|public
name|void
name|setQuote
parameter_list|(
name|String
name|quote
parameter_list|)
block|{
name|this
operator|.
name|quote
operator|=
name|quote
expr_stmt|;
block|}
DECL|method|getQuoteEscape ()
specifier|public
name|String
name|getQuoteEscape
parameter_list|()
block|{
return|return
name|quoteEscape
return|;
block|}
DECL|method|setQuoteEscape (String quoteEscape)
specifier|public
name|void
name|setQuoteEscape
parameter_list|(
name|String
name|quoteEscape
parameter_list|)
block|{
name|this
operator|.
name|quoteEscape
operator|=
name|quoteEscape
expr_stmt|;
block|}
DECL|method|getDelimiter ()
specifier|public
name|String
name|getDelimiter
parameter_list|()
block|{
return|return
name|delimiter
return|;
block|}
DECL|method|setDelimiter (String delimiter)
specifier|public
name|void
name|setDelimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configureDataFormat (DataFormat dataFormat, CamelContext camelContext)
specifier|protected
name|void
name|configureDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
operator|.
name|configureDataFormat
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|quoteAllFields
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"quoteAllFields"
argument_list|,
name|quoteAllFields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quote
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"quote"
argument_list|,
name|singleCharOf
argument_list|(
literal|"quote"
argument_list|,
name|quote
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quoteEscape
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"quoteEscape"
argument_list|,
name|singleCharOf
argument_list|(
literal|"quoteEscape"
argument_list|,
name|quoteEscape
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delimiter
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"delimiter"
argument_list|,
name|singleCharOf
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

