begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.config
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|config
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|StreamResequencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
operator|.
name|DefaultExchangeComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
operator|.
name|ExpressionResultComparator
import|;
end_import

begin_comment
comment|/**  * Defines the configuration parameters for the {@link StreamResequencer}.  * Usage example:  *   *<pre>  * from(&quot;direct:start&quot;).resequencer(header(&quot;seqnum&quot;)).stream(  *         StreamResequencerConfig.getDefault()).to(&quot;mock:result&quot;)  *</pre>  *   * is equivalent to  *   *<pre>  * from(&quot;direct:start&quot;).resequencer(header(&quot;seqnum&quot;)).stream().to(&quot;mock:result&quot;)  *</pre>  *   * Custom values for<code>capacity</code> and<code>timeout</code> can be  * set like in this example:  *   *<pre>  * from(&quot;direct:start&quot;).resequencer(header(&quot;seqnum&quot;)).stream(  *         new StreamResequencerConfig(300, 400L)).to(&quot;mock:result&quot;)  *</pre>  *   * @author Martin Krasser  *   * @version $Revision$  */
end_comment

begin_class
annotation|@
name|XmlRootElement
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|StreamResequencerConfig
specifier|public
class|class
name|StreamResequencerConfig
block|{
annotation|@
name|XmlAttribute
DECL|field|capacity
specifier|private
name|Integer
name|capacity
decl_stmt|;
comment|// optional XML attribute requires wrapper object
annotation|@
name|XmlAttribute
DECL|field|timeout
specifier|private
name|Long
name|timeout
decl_stmt|;
comment|// optional XML attribute requires wrapper object
annotation|@
name|XmlTransient
DECL|field|comparator
specifier|private
name|ExpressionResultComparator
name|comparator
decl_stmt|;
comment|/**      * Creates a new {@link StreamResequencerConfig} instance using default      * values for<code>capacity</code> (1000) and<code>timeout</code>      * (1000L). Elements of the sequence are compared using the      * {@link DefaultExchangeComparator}.      */
DECL|method|StreamResequencerConfig ()
specifier|public
name|StreamResequencerConfig
parameter_list|()
block|{
name|this
argument_list|(
literal|1000
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@link BatchResequencerConfig} instance using the given      * values for<code>capacity</code> and<code>timeout</code>. Elements      * of the sequence are compared using the {@link DefaultExchangeComparator}.      *       * @param capacity   capacity of the resequencer's inbound queue.      * @param timeout    minimum time to wait for missing elements (messages).      */
DECL|method|StreamResequencerConfig (int capacity, long timeout)
specifier|public
name|StreamResequencerConfig
parameter_list|(
name|int
name|capacity
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|this
argument_list|(
name|capacity
argument_list|,
name|timeout
argument_list|,
operator|new
name|DefaultExchangeComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@link BatchResequencerConfig} instance using the given      * values for<code>capacity</code> and<code>timeout</code>. Elements      * of the sequence are compared with the given      * {@link ExpressionResultComparator}.      *       * @param capacity   capacity of the resequencer's inbound queue.      * @param timeout    minimum time to wait for missing elements (messages).      * @param comparator comparator for sequence comparision      */
DECL|method|StreamResequencerConfig (int capacity, long timeout, ExpressionResultComparator comparator)
specifier|public
name|StreamResequencerConfig
parameter_list|(
name|int
name|capacity
parameter_list|,
name|long
name|timeout
parameter_list|,
name|ExpressionResultComparator
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
comment|/**      * Returns a new {@link StreamResequencerConfig} instance using default      * values for<code>capacity</code> (1000) and<code>timeout</code>      * (1000L). Elements of the sequence are compared using the      * {@link DefaultExchangeComparator}.      *       * @return a default {@link StreamResequencerConfig}.      */
DECL|method|getDefault ()
specifier|public
specifier|static
name|StreamResequencerConfig
name|getDefault
parameter_list|()
block|{
return|return
operator|new
name|StreamResequencerConfig
argument_list|()
return|;
block|}
DECL|method|getCapacity ()
specifier|public
name|int
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
DECL|method|setCapacity (int capacity)
specifier|public
name|void
name|setCapacity
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getComparator ()
specifier|public
name|ExpressionResultComparator
name|getComparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
DECL|method|setComparator (ExpressionResultComparator comparator)
specifier|public
name|void
name|setComparator
parameter_list|(
name|ExpressionResultComparator
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
block|}
end_class

end_unit

