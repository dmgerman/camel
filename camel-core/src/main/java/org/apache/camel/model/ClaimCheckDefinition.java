begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|ClaimCheckProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategyBeanAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * The Claim Check EIP allows you to replace message content with a claim check (a unique key),  * which can be used to retrieve the message content at a later time.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"eip,routing"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"claimCheck"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ClaimCheckDefinition
specifier|public
class|class
name|ClaimCheckDefinition
extends|extends
name|NoOutputDefinition
argument_list|<
name|ClaimCheckDefinition
argument_list|>
block|{
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|operation
specifier|private
name|ClaimCheckOperation
name|operation
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|filter
specifier|private
name|String
name|filter
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"strategyRef"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|aggregationStrategyRef
specifier|private
name|String
name|aggregationStrategyRef
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"strategyMethodName"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|aggregationStrategyMethodName
specifier|private
name|String
name|aggregationStrategyMethodName
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|aggregationStrategy
specifier|private
name|AggregationStrategy
name|aggregationStrategy
decl_stmt|;
DECL|method|ClaimCheckDefinition ()
specifier|public
name|ClaimCheckDefinition
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|operation
operator|!=
literal|null
condition|)
block|{
return|return
literal|"ClaimCheck["
operator|+
name|operation
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"ClaimCheck"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"claimCheck"
return|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|operation
argument_list|,
literal|"operation"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ClaimCheckProcessor
name|claim
init|=
operator|new
name|ClaimCheckProcessor
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setOperation
argument_list|(
name|operation
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setKey
argument_list|(
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setFilter
argument_list|(
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|AggregationStrategy
name|strategy
init|=
name|createAggregationStrategy
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|!=
literal|null
condition|)
block|{
name|claim
operator|.
name|setAggregationStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|// only filter or aggregation strategy can be configured not both
if|if
condition|(
name|getFilter
argument_list|()
operator|!=
literal|null
operator|&&
name|strategy
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot use both filter and custom aggregation strategy on ClaimCheck EIP"
argument_list|)
throw|;
block|}
comment|// validate filter, we cannot have both +/- at the same time
if|if
condition|(
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterable
name|it
init|=
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|filter
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|boolean
name|includeBody
init|=
literal|false
decl_stmt|;
name|boolean
name|excludeBody
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|it
control|)
block|{
name|String
name|pattern
init|=
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"body"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
operator|||
literal|"+body"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|includeBody
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-body"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|excludeBody
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includeBody
operator|&&
name|excludeBody
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot have both include and exclude body at the same time in the filter: "
operator|+
name|filter
argument_list|)
throw|;
block|}
name|boolean
name|includeHeaders
init|=
literal|false
decl_stmt|;
name|boolean
name|excludeHeaders
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|it
control|)
block|{
name|String
name|pattern
init|=
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"headers"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
operator|||
literal|"+headers"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|includeHeaders
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-headers"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|excludeHeaders
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includeHeaders
operator|&&
name|excludeHeaders
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot have both include and exclude headers at the same time in the filter: "
operator|+
name|filter
argument_list|)
throw|;
block|}
name|boolean
name|includeHeader
init|=
literal|false
decl_stmt|;
name|boolean
name|excludeHeader
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|it
control|)
block|{
name|String
name|pattern
init|=
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"+header:"
argument_list|)
condition|)
block|{
name|includeHeader
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"-header:"
argument_list|)
condition|)
block|{
name|excludeHeader
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includeHeader
operator|&&
name|excludeHeader
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot have both include and exclude header at the same time in the filter: "
operator|+
name|filter
argument_list|)
throw|;
block|}
block|}
return|return
name|claim
return|;
block|}
DECL|method|createAggregationStrategy (RouteContext routeContext)
specifier|private
name|AggregationStrategy
name|createAggregationStrategy
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
name|AggregationStrategy
name|strategy
init|=
name|getAggregationStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|strategy
operator|==
literal|null
operator|&&
name|aggregationStrategyRef
operator|!=
literal|null
condition|)
block|{
name|Object
name|aggStrategy
init|=
name|routeContext
operator|.
name|lookup
argument_list|(
name|aggregationStrategyRef
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggStrategy
operator|instanceof
name|AggregationStrategy
condition|)
block|{
name|strategy
operator|=
operator|(
name|AggregationStrategy
operator|)
name|aggStrategy
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggStrategy
operator|!=
literal|null
condition|)
block|{
name|strategy
operator|=
operator|new
name|AggregationStrategyBeanAdapter
argument_list|(
name|aggStrategy
argument_list|,
name|getAggregationStrategyMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find AggregationStrategy in Registry with name: "
operator|+
name|aggregationStrategyRef
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|strategy
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|strategy
operator|)
operator|.
name|setCamelContext
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strategy
return|;
block|}
comment|// Fluent API
comment|//-------------------------------------------------------------------------
comment|/**      * The claim check operation to use.      * The following operations is supported:      *<ul>      *<li>Get</li> - Gets (does not remove) the claim check by the given key.      *<li>GetAndRemove</li> - Gets and remove the claim check by the given key.      *<li>Set</li> - Sets a new (will override if key already exists) claim check with the given key.      *<li>Push</li> - Sets a new claim check on the stack (does not use key).      *<li>Pop</li> - Gets the latest claim check from the stack (does not use key).      *</ul>      */
DECL|method|operation (ClaimCheckOperation operation)
specifier|public
name|ClaimCheckDefinition
name|operation
parameter_list|(
name|ClaimCheckOperation
name|operation
parameter_list|)
block|{
name|setOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a specific key for claim check id.      */
DECL|method|key (String key)
specifier|public
name|ClaimCheckDefinition
name|key
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specified a filter to control what data gets merging data back from the claim check repository.      *      * The following syntax is supported:      *<ul>      *<li>body</li> - to aggregate the message body      *<li>attachments</li> - to aggregate all the message attachments      *<li>headers</li> - to aggregate all the message headers      *<li>header:pattern</li> - to aggregate all the message headers that matches the pattern.      *     The pattern syntax is documented by: {@link EndpointHelper#matchPattern(String, String)}.      *</ul>      * You can specify multiple rules separated by comma. For example to include the message body and all headers starting with foo      *<tt>body,header:foo*</tt>.      * The syntax supports the following prefixes which can be used to specify include,exclude, or remove      *<ul>      *<li>+</li> - to include (which is the default mode)      *<li>-</li> - to exclude (exclude takes precedence over include)      *<li>--</li> - to remove (remove takes precedence)      *</ul>      * For example to exclude a header name foo, and remove all headers starting with bar      *<tt>-header:foo,--headers:bar*</tt>      * Note you cannot have both include and exclude<tt>header:pattern</tt> at the same time.      */
DECL|method|filter (String filter)
specifier|public
name|ClaimCheckDefinition
name|filter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a custom {@link AggregationStrategy} instead of the default implementation.      * Notice you cannot use both custom aggregation strategy and configure data at the same time.      */
DECL|method|aggregationStrategy (AggregationStrategy aggregationStrategy)
specifier|public
name|ClaimCheckDefinition
name|aggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a custom {@link AggregationStrategy} instead of the default implementation.      * Notice you cannot use both custom aggregation strategy and configure data at the same time.      */
DECL|method|aggregationStrategyRef (String aggregationStrategyRef)
specifier|public
name|ClaimCheckDefinition
name|aggregationStrategyRef
parameter_list|(
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
name|setAggregationStrategyRef
argument_list|(
name|aggregationStrategyRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.      */
DECL|method|aggregationStrategyMethodName (String aggregationStrategyMethodName)
specifier|public
name|ClaimCheckDefinition
name|aggregationStrategyMethodName
parameter_list|(
name|String
name|aggregationStrategyMethodName
parameter_list|)
block|{
name|setAggregationStrategyMethodName
argument_list|(
name|aggregationStrategyMethodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getOperation ()
specifier|public
name|ClaimCheckOperation
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
DECL|method|setOperation (ClaimCheckOperation operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|ClaimCheckOperation
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getFilter ()
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
DECL|method|setFilter (String filter)
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
DECL|method|getAggregationStrategyRef ()
specifier|public
name|String
name|getAggregationStrategyRef
parameter_list|()
block|{
return|return
name|aggregationStrategyRef
return|;
block|}
DECL|method|setAggregationStrategyRef (String aggregationStrategyRef)
specifier|public
name|void
name|setAggregationStrategyRef
parameter_list|(
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
name|this
operator|.
name|aggregationStrategyRef
operator|=
name|aggregationStrategyRef
expr_stmt|;
block|}
DECL|method|getAggregationStrategyMethodName ()
specifier|public
name|String
name|getAggregationStrategyMethodName
parameter_list|()
block|{
return|return
name|aggregationStrategyMethodName
return|;
block|}
DECL|method|setAggregationStrategyMethodName (String aggregationStrategyMethodName)
specifier|public
name|void
name|setAggregationStrategyMethodName
parameter_list|(
name|String
name|aggregationStrategyMethodName
parameter_list|)
block|{
name|this
operator|.
name|aggregationStrategyMethodName
operator|=
name|aggregationStrategyMethodName
expr_stmt|;
block|}
DECL|method|getAggregationStrategy ()
specifier|public
name|AggregationStrategy
name|getAggregationStrategy
parameter_list|()
block|{
return|return
name|aggregationStrategy
return|;
block|}
DECL|method|setAggregationStrategy (AggregationStrategy aggregationStrategy)
specifier|public
name|void
name|setAggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|this
operator|.
name|aggregationStrategy
operator|=
name|aggregationStrategy
expr_stmt|;
block|}
block|}
end_class

end_unit

