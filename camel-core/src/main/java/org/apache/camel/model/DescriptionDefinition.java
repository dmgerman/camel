begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * To provide comments about the node.  *  * @version   */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"description"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|DescriptionDefinition
specifier|public
class|class
name|DescriptionDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|lang
specifier|private
name|String
name|lang
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Deprecated
DECL|field|layoutX
specifier|private
name|Double
name|layoutX
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Deprecated
DECL|field|layoutY
specifier|private
name|Double
name|layoutY
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Deprecated
DECL|field|layoutWidth
specifier|private
name|Double
name|layoutWidth
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Deprecated
DECL|field|layoutHeight
specifier|private
name|Double
name|layoutHeight
decl_stmt|;
annotation|@
name|XmlValue
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|method|getLang ()
specifier|public
name|String
name|getLang
parameter_list|()
block|{
return|return
name|lang
return|;
block|}
comment|/**      * Language, such as en for english.      */
DECL|method|setLang (String lang)
specifier|public
name|void
name|setLang
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|this
operator|.
name|lang
operator|=
name|lang
expr_stmt|;
block|}
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
comment|/**      * The description as human readable text      */
DECL|method|setText (String text)
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
DECL|method|getLayoutHeight ()
specifier|public
name|Double
name|getLayoutHeight
parameter_list|()
block|{
return|return
name|layoutHeight
return|;
block|}
comment|/**      * Layout height      */
annotation|@
name|Deprecated
DECL|method|setLayoutHeight (Double layoutHeight)
specifier|public
name|void
name|setLayoutHeight
parameter_list|(
name|Double
name|layoutHeight
parameter_list|)
block|{
name|this
operator|.
name|layoutHeight
operator|=
name|layoutHeight
expr_stmt|;
block|}
DECL|method|getLayoutWidth ()
specifier|public
name|Double
name|getLayoutWidth
parameter_list|()
block|{
return|return
name|layoutWidth
return|;
block|}
comment|/**      * Layout width      */
annotation|@
name|Deprecated
DECL|method|setLayoutWidth (Double layoutWidth)
specifier|public
name|void
name|setLayoutWidth
parameter_list|(
name|Double
name|layoutWidth
parameter_list|)
block|{
name|this
operator|.
name|layoutWidth
operator|=
name|layoutWidth
expr_stmt|;
block|}
DECL|method|getLayoutX ()
specifier|public
name|Double
name|getLayoutX
parameter_list|()
block|{
return|return
name|layoutX
return|;
block|}
comment|/**      * Layout position X      */
annotation|@
name|Deprecated
DECL|method|setLayoutX (Double layoutX)
specifier|public
name|void
name|setLayoutX
parameter_list|(
name|Double
name|layoutX
parameter_list|)
block|{
name|this
operator|.
name|layoutX
operator|=
name|layoutX
expr_stmt|;
block|}
DECL|method|getLayoutY ()
specifier|public
name|Double
name|getLayoutY
parameter_list|()
block|{
return|return
name|layoutY
return|;
block|}
comment|/**      * Layout position Y      */
annotation|@
name|Deprecated
DECL|method|setLayoutY (Double layoutY)
specifier|public
name|void
name|setLayoutY
parameter_list|(
name|Double
name|layoutY
parameter_list|)
block|{
name|this
operator|.
name|layoutY
operator|=
name|layoutY
expr_stmt|;
block|}
block|}
end_class

end_unit

