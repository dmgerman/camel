begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElements
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_comment
comment|/**  * Represents the XML type for a collection of DataFormats.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"dataFormats"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|DataFormatsType
specifier|public
class|class
name|DataFormatsType
block|{
comment|// TODO cannot use @XmlElementRef as it doesn't allow optional properties
comment|// @XmlElementRef
annotation|@
name|XmlElements
argument_list|(
block|{
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"artixDS"
argument_list|,
name|type
operator|=
name|ArtixDSDataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"csv"
argument_list|,
name|type
operator|=
name|CsvDataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"flatpack"
argument_list|,
name|type
operator|=
name|FlatpackDataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"hl7"
argument_list|,
name|type
operator|=
name|HL7DataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"jaxb"
argument_list|,
name|type
operator|=
name|JaxbDataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"serialization"
argument_list|,
name|type
operator|=
name|SerializationDataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"string"
argument_list|,
name|type
operator|=
name|StringDataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"xmlBeans"
argument_list|,
name|type
operator|=
name|XMLBeansDataFormat
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"xstream"
argument_list|,
name|type
operator|=
name|XStreamDataFormat
operator|.
name|class
argument_list|)
block|}
argument_list|)
DECL|field|dataFormats
specifier|private
name|List
argument_list|<
name|DataFormatType
argument_list|>
name|dataFormats
decl_stmt|;
DECL|method|setDataFormats (List<DataFormatType> dataFormats)
specifier|public
name|void
name|setDataFormats
parameter_list|(
name|List
argument_list|<
name|DataFormatType
argument_list|>
name|dataFormats
parameter_list|)
block|{
name|this
operator|.
name|dataFormats
operator|=
name|dataFormats
expr_stmt|;
block|}
DECL|method|getDataFormats ()
specifier|public
name|List
argument_list|<
name|DataFormatType
argument_list|>
name|getDataFormats
parameter_list|()
block|{
return|return
name|dataFormats
return|;
block|}
comment|/***      * @return A Map of the contained DataFormatType's indexed by id.      */
DECL|method|asMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatType
argument_list|>
name|asMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatType
argument_list|>
name|dataFormatsAsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataFormatType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataFormatType
name|dataFormatType
range|:
name|getDataFormats
argument_list|()
control|)
block|{
name|dataFormatsAsMap
operator|.
name|put
argument_list|(
name|dataFormatType
operator|.
name|getId
argument_list|()
argument_list|,
name|dataFormatType
argument_list|)
expr_stmt|;
block|}
return|return
name|dataFormatsAsMap
return|;
block|}
block|}
end_class

end_unit

