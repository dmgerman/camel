begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElements
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoFactoryAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceChooser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceChooserAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDiscoveryAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceFilterAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|AllServiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceCallProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|HealthyServiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|RandomServiceChooser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|RoundRobinServiceChooser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|NoOutputDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Remote service call definition  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"eip,routing"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"serviceCall"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ServiceCallDefinition
specifier|public
class|class
name|ServiceCallDefinition
extends|extends
name|NoOutputDefinition
argument_list|<
name|ServiceCallDefinition
argument_list|>
block|{
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"http"
argument_list|)
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|component
specifier|private
name|String
name|component
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|pattern
specifier|private
name|ExchangePattern
name|pattern
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|configurationRef
specifier|private
name|String
name|configurationRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|serviceDiscoveryRef
specifier|private
name|String
name|serviceDiscoveryRef
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|serviceDiscovery
specifier|private
name|ServiceDiscovery
name|serviceDiscovery
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|serviceFilterRef
specifier|private
name|String
name|serviceFilterRef
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|serviceFilter
specifier|private
name|ServiceFilter
name|serviceFilter
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|serviceChooserRef
specifier|private
name|String
name|serviceChooserRef
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|serviceChooser
specifier|private
name|ServiceChooser
name|serviceChooser
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|loadBalancerRef
specifier|private
name|String
name|loadBalancerRef
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|loadBalancer
specifier|private
name|LoadBalancer
name|loadBalancer
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|expressionRef
specifier|private
name|String
name|expressionRef
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|expression
specifier|private
name|Expression
name|expression
decl_stmt|;
annotation|@
name|XmlElements
argument_list|(
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"cachingServiceDiscovery"
argument_list|,
name|type
operator|=
name|CachingServiceCallServiceDiscoveryConfiguration
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"consulServiceDiscovery"
argument_list|,
name|type
operator|=
name|ConsulServiceCallServiceDiscoveryConfiguration
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"dnsServiceDiscovery"
argument_list|,
name|type
operator|=
name|DnsServiceCallServiceDiscoveryConfiguration
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"etcdServiceDiscovery"
argument_list|,
name|type
operator|=
name|EtcdServiceCallServiceDiscoveryConfiguration
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"kubernetesServiceDiscovery"
argument_list|,
name|type
operator|=
name|KubernetesServiceCallServiceDiscoveryConfiguration
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"multiServiceDiscovery"
argument_list|,
name|type
operator|=
name|MultiServiceCallServiceDiscoveryConfiguration
operator|.
name|class
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"staticServiceDiscovery"
argument_list|,
name|type
operator|=
name|StaticServiceCallServiceDiscoveryConfiguration
operator|.
name|class
argument_list|)
block|}
argument_list|)
DECL|field|serviceDiscoveryConfiguration
specifier|private
name|ServiceCallServiceDiscoveryConfiguration
name|serviceDiscoveryConfiguration
decl_stmt|;
annotation|@
name|XmlElements
argument_list|(
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"ribbonLoadBalancer"
argument_list|,
name|type
operator|=
name|RibbonServiceCallLoadBalancerConfiguration
operator|.
name|class
argument_list|)
block|}
argument_list|)
DECL|field|loadBalancerConfiguration
specifier|private
name|ServiceCallLoadBalancerConfiguration
name|loadBalancerConfiguration
decl_stmt|;
annotation|@
name|XmlElements
argument_list|(
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"expressionCOnfiguration"
argument_list|,
name|type
operator|=
name|ServiceCallExpressionConfiguration
operator|.
name|class
argument_list|)
block|}
argument_list|)
DECL|field|expressionConfiguration
specifier|private
name|ServiceCallExpressionConfiguration
name|expressionConfiguration
decl_stmt|;
DECL|method|ServiceCallDefinition ()
specifier|public
name|ServiceCallDefinition
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ServiceCall["
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"serviceCall"
return|;
block|}
comment|// *****************************
comment|// Properties
comment|// *****************************
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the name of the service to use      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getPattern ()
specifier|public
name|ExchangePattern
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
comment|/**      * Sets the optional {@link ExchangePattern} used to invoke this endpoint      */
DECL|method|setPattern (ExchangePattern pattern)
specifier|public
name|void
name|setPattern
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|getConfigurationRef ()
specifier|public
name|String
name|getConfigurationRef
parameter_list|()
block|{
return|return
name|configurationRef
return|;
block|}
comment|/**      * Refers to a ServiceCall configuration to use      */
DECL|method|setConfigurationRef (String configurationRef)
specifier|public
name|void
name|setConfigurationRef
parameter_list|(
name|String
name|configurationRef
parameter_list|)
block|{
name|this
operator|.
name|configurationRef
operator|=
name|configurationRef
expr_stmt|;
block|}
DECL|method|getUri ()
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/**      * The uri of the endpoint to send to.      * The uri can be dynamic computed using the {@link org.apache.camel.language.simple.SimpleLanguage} expression.      */
DECL|method|setUri (String uri)
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
DECL|method|getComponent ()
specifier|public
name|String
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
comment|/**      * The component to use.      */
DECL|method|setComponent (String component)
specifier|public
name|void
name|setComponent
parameter_list|(
name|String
name|component
parameter_list|)
block|{
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
DECL|method|getServiceDiscoveryRef ()
specifier|public
name|String
name|getServiceDiscoveryRef
parameter_list|()
block|{
return|return
name|serviceDiscoveryRef
return|;
block|}
comment|/**      * Sets a reference to a custom {@link ServiceDiscovery} to use.      */
DECL|method|setServiceDiscoveryRef (String serviceDiscoveryRef)
specifier|public
name|void
name|setServiceDiscoveryRef
parameter_list|(
name|String
name|serviceDiscoveryRef
parameter_list|)
block|{
name|this
operator|.
name|serviceDiscoveryRef
operator|=
name|serviceDiscoveryRef
expr_stmt|;
block|}
DECL|method|getServiceDiscovery ()
specifier|public
name|ServiceDiscovery
name|getServiceDiscovery
parameter_list|()
block|{
return|return
name|serviceDiscovery
return|;
block|}
comment|/**      * Sets a custom {@link ServiceDiscovery} to use.      */
DECL|method|setServiceDiscovery (ServiceDiscovery serviceDiscovery)
specifier|public
name|void
name|setServiceDiscovery
parameter_list|(
name|ServiceDiscovery
name|serviceDiscovery
parameter_list|)
block|{
name|this
operator|.
name|serviceDiscovery
operator|=
name|serviceDiscovery
expr_stmt|;
block|}
DECL|method|getServiceFilterRef ()
specifier|public
name|String
name|getServiceFilterRef
parameter_list|()
block|{
return|return
name|serviceFilterRef
return|;
block|}
comment|/**      * Sets a reference to a custom {@link ServiceFilter} to use.      */
DECL|method|setServiceFilterRef (String serviceFilterRef)
specifier|public
name|void
name|setServiceFilterRef
parameter_list|(
name|String
name|serviceFilterRef
parameter_list|)
block|{
name|this
operator|.
name|serviceFilterRef
operator|=
name|serviceFilterRef
expr_stmt|;
block|}
DECL|method|getServiceFilter ()
specifier|public
name|ServiceFilter
name|getServiceFilter
parameter_list|()
block|{
return|return
name|serviceFilter
return|;
block|}
comment|/**      * Sets a custom {@link ServiceFilter} to use.      */
DECL|method|setServiceFilter (ServiceFilter serviceFilter)
specifier|public
name|void
name|setServiceFilter
parameter_list|(
name|ServiceFilter
name|serviceFilter
parameter_list|)
block|{
name|this
operator|.
name|serviceFilter
operator|=
name|serviceFilter
expr_stmt|;
block|}
DECL|method|getServiceChooserRef ()
specifier|public
name|String
name|getServiceChooserRef
parameter_list|()
block|{
return|return
name|serviceChooserRef
return|;
block|}
comment|/**      * Sets a reference to a custom {@link ServiceChooser} to use.      */
DECL|method|setServiceChooserRef (String serviceChooserRef)
specifier|public
name|void
name|setServiceChooserRef
parameter_list|(
name|String
name|serviceChooserRef
parameter_list|)
block|{
name|this
operator|.
name|serviceChooserRef
operator|=
name|serviceChooserRef
expr_stmt|;
block|}
DECL|method|getServiceChooser ()
specifier|public
name|ServiceChooser
name|getServiceChooser
parameter_list|()
block|{
return|return
name|serviceChooser
return|;
block|}
comment|/**      * Sets a custom {@link ServiceChooser} to use.      */
DECL|method|setServiceChooser (ServiceChooser serviceChooser)
specifier|public
name|void
name|setServiceChooser
parameter_list|(
name|ServiceChooser
name|serviceChooser
parameter_list|)
block|{
name|this
operator|.
name|serviceChooser
operator|=
name|serviceChooser
expr_stmt|;
block|}
DECL|method|getLoadBalancerRef ()
specifier|public
name|String
name|getLoadBalancerRef
parameter_list|()
block|{
return|return
name|loadBalancerRef
return|;
block|}
comment|/**      * Sets a reference to a custom {@link LoadBalancer} to use.      */
DECL|method|setLoadBalancerRef (String loadBalancerRef)
specifier|public
name|void
name|setLoadBalancerRef
parameter_list|(
name|String
name|loadBalancerRef
parameter_list|)
block|{
name|this
operator|.
name|loadBalancerRef
operator|=
name|loadBalancerRef
expr_stmt|;
block|}
DECL|method|getLoadBalancer ()
specifier|public
name|LoadBalancer
name|getLoadBalancer
parameter_list|()
block|{
return|return
name|loadBalancer
return|;
block|}
comment|/**      * Sets a custom {@link LoadBalancer} to use.      */
DECL|method|setLoadBalancer (LoadBalancer loadBalancer)
specifier|public
name|void
name|setLoadBalancer
parameter_list|(
name|LoadBalancer
name|loadBalancer
parameter_list|)
block|{
name|this
operator|.
name|loadBalancer
operator|=
name|loadBalancer
expr_stmt|;
block|}
DECL|method|getExpressionRef ()
specifier|public
name|String
name|getExpressionRef
parameter_list|()
block|{
return|return
name|expressionRef
return|;
block|}
comment|/**      * Set a reference to a custom {@link Expression} to use.      */
DECL|method|setExpressionRef (String expressionRef)
specifier|public
name|void
name|setExpressionRef
parameter_list|(
name|String
name|expressionRef
parameter_list|)
block|{
name|this
operator|.
name|expressionRef
operator|=
name|expressionRef
expr_stmt|;
block|}
DECL|method|getExpression ()
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
comment|/**      * Set a custom {@link Expression} to use.      */
DECL|method|setExpression (Expression expression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|getServiceDiscoveryConfiguration ()
specifier|public
name|ServiceCallServiceDiscoveryConfiguration
name|getServiceDiscoveryConfiguration
parameter_list|()
block|{
return|return
name|serviceDiscoveryConfiguration
return|;
block|}
comment|/**      * Configures the ServiceDiscovery using the given configuration.      */
DECL|method|setServiceDiscoveryConfiguration (ServiceCallServiceDiscoveryConfiguration serviceDiscoveryConfiguration)
specifier|public
name|void
name|setServiceDiscoveryConfiguration
parameter_list|(
name|ServiceCallServiceDiscoveryConfiguration
name|serviceDiscoveryConfiguration
parameter_list|)
block|{
name|this
operator|.
name|serviceDiscoveryConfiguration
operator|=
name|serviceDiscoveryConfiguration
expr_stmt|;
block|}
DECL|method|getLoadBalancerConfiguration ()
specifier|public
name|ServiceCallLoadBalancerConfiguration
name|getLoadBalancerConfiguration
parameter_list|()
block|{
return|return
name|loadBalancerConfiguration
return|;
block|}
comment|/**      * Configures the LoadBalancer using the given configuration.      */
DECL|method|setLoadBalancerConfiguration (ServiceCallLoadBalancerConfiguration loadBalancerConfiguration)
specifier|public
name|void
name|setLoadBalancerConfiguration
parameter_list|(
name|ServiceCallLoadBalancerConfiguration
name|loadBalancerConfiguration
parameter_list|)
block|{
name|this
operator|.
name|loadBalancerConfiguration
operator|=
name|loadBalancerConfiguration
expr_stmt|;
block|}
DECL|method|getExpressionConfiguration ()
specifier|public
name|ServiceCallExpressionConfiguration
name|getExpressionConfiguration
parameter_list|()
block|{
return|return
name|expressionConfiguration
return|;
block|}
comment|/**      * Configures the Expression using the given configuration.      */
DECL|method|setExpressionConfiguration (ServiceCallExpressionConfiguration expressionConfiguration)
specifier|public
name|void
name|setExpressionConfiguration
parameter_list|(
name|ServiceCallExpressionConfiguration
name|expressionConfiguration
parameter_list|)
block|{
name|this
operator|.
name|expressionConfiguration
operator|=
name|expressionConfiguration
expr_stmt|;
block|}
comment|// *****************************
comment|// Fluent API
comment|// *****************************
comment|/**      * Sets the optional {@link ExchangePattern} used to invoke this endpoint      */
DECL|method|pattern (ExchangePattern pattern)
specifier|public
name|ServiceCallDefinition
name|pattern
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the name of the service to use      */
DECL|method|name (String name)
specifier|public
name|ServiceCallDefinition
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the uri of the service to use      */
DECL|method|uri (String uri)
specifier|public
name|ServiceCallDefinition
name|uri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the component to use      */
DECL|method|component (String component)
specifier|public
name|ServiceCallDefinition
name|component
parameter_list|(
name|String
name|component
parameter_list|)
block|{
name|setComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Refers to a ServiceCall configuration to use      */
DECL|method|serviceCallConfiguration (String ref)
specifier|public
name|ServiceCallDefinition
name|serviceCallConfiguration
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|configurationRef
operator|=
name|ref
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a reference to a custom {@link ServiceDiscovery} to use.      */
DECL|method|serviceDiscovery (String serviceDiscoveryRef)
specifier|public
name|ServiceCallDefinition
name|serviceDiscovery
parameter_list|(
name|String
name|serviceDiscoveryRef
parameter_list|)
block|{
name|setServiceDiscoveryRef
argument_list|(
name|serviceDiscoveryRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a custom {@link ServiceDiscovery} to use.      */
DECL|method|serviceDiscovery (ServiceDiscovery serviceDiscovery)
specifier|public
name|ServiceCallDefinition
name|serviceDiscovery
parameter_list|(
name|ServiceDiscovery
name|serviceDiscovery
parameter_list|)
block|{
name|setServiceDiscovery
argument_list|(
name|serviceDiscovery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a reference to a custom {@link ServiceFilter} to use.      */
DECL|method|serviceFilter (String serviceFilterRef)
specifier|public
name|ServiceCallDefinition
name|serviceFilter
parameter_list|(
name|String
name|serviceFilterRef
parameter_list|)
block|{
name|setServiceDiscoveryRef
argument_list|(
name|serviceDiscoveryRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a custom {@link ServiceFilter} to use.      */
DECL|method|serviceFilter (ServiceFilter serviceFilter)
specifier|public
name|ServiceCallDefinition
name|serviceFilter
parameter_list|(
name|ServiceFilter
name|serviceFilter
parameter_list|)
block|{
name|setServiceFilter
argument_list|(
name|serviceFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a reference to a custom {@link ServiceChooser} to use.      */
DECL|method|serviceChooser (String serviceChooserRef)
specifier|public
name|ServiceCallDefinition
name|serviceChooser
parameter_list|(
name|String
name|serviceChooserRef
parameter_list|)
block|{
name|setServiceChooserRef
argument_list|(
name|serviceChooserRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a custom {@link ServiceChooser} to use.      */
DECL|method|serviceChooser (ServiceChooser serviceChooser)
specifier|public
name|ServiceCallDefinition
name|serviceChooser
parameter_list|(
name|ServiceChooser
name|serviceChooser
parameter_list|)
block|{
name|setServiceChooser
argument_list|(
name|serviceChooser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a reference to a custom {@link LoadBalancer} to use.      */
DECL|method|loadBalancer (String loadBalancerRef)
specifier|public
name|ServiceCallDefinition
name|loadBalancer
parameter_list|(
name|String
name|loadBalancerRef
parameter_list|)
block|{
name|setLoadBalancerRef
argument_list|(
name|loadBalancerRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a custom {@link LoadBalancer} to use.      */
DECL|method|loadBalancer (LoadBalancer loadBalancer)
specifier|public
name|ServiceCallDefinition
name|loadBalancer
parameter_list|(
name|LoadBalancer
name|loadBalancer
parameter_list|)
block|{
name|setLoadBalancer
argument_list|(
name|loadBalancer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a reference to a custom {@link Expression} to use.      */
DECL|method|expression (String expressionRef)
specifier|public
name|ServiceCallDefinition
name|expression
parameter_list|(
name|String
name|expressionRef
parameter_list|)
block|{
name|setExpressionRef
argument_list|(
name|loadBalancerRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a custom {@link Expression} to use.      */
DECL|method|expression (Expression expression)
specifier|public
name|ServiceCallDefinition
name|expression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the ServiceDiscovery using the given configuration.      */
DECL|method|serviceDiscoveryConfiguration (ServiceCallServiceDiscoveryConfiguration serviceDiscoveryConfiguration)
specifier|public
name|ServiceCallDefinition
name|serviceDiscoveryConfiguration
parameter_list|(
name|ServiceCallServiceDiscoveryConfiguration
name|serviceDiscoveryConfiguration
parameter_list|)
block|{
name|setServiceDiscoveryConfiguration
argument_list|(
name|serviceDiscoveryConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the LoadBalancer using the given configuration.      */
DECL|method|loadBalancerConfiguration (ServiceCallLoadBalancerConfiguration loadBalancerConfiguration)
specifier|public
name|ServiceCallDefinition
name|loadBalancerConfiguration
parameter_list|(
name|ServiceCallLoadBalancerConfiguration
name|loadBalancerConfiguration
parameter_list|)
block|{
name|setLoadBalancerConfiguration
argument_list|(
name|loadBalancerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the Expression using the given configuration.      */
DECL|method|expressionConfiguration (ServiceCallExpressionConfiguration expressionConfiguration)
specifier|public
name|ServiceCallDefinition
name|expressionConfiguration
parameter_list|(
name|ServiceCallExpressionConfiguration
name|expressionConfiguration
parameter_list|)
block|{
name|setExpressionConfiguration
argument_list|(
name|expressionConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// *****************************
comment|// Shortcuts - ServiceDiscovery
comment|// *****************************
DECL|method|cachingServiceDiscovery ()
specifier|public
name|CachingServiceCallServiceDiscoveryConfiguration
name|cachingServiceDiscovery
parameter_list|()
block|{
name|CachingServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|CachingServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|consulServiceDiscovery ()
specifier|public
name|ConsulServiceCallServiceDiscoveryConfiguration
name|consulServiceDiscovery
parameter_list|()
block|{
name|ConsulServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|ConsulServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|dnsServiceDiscovery ()
specifier|public
name|DnsServiceCallServiceDiscoveryConfiguration
name|dnsServiceDiscovery
parameter_list|()
block|{
name|DnsServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|DnsServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|dnsServiceDiscovery (String domain)
specifier|public
name|ServiceCallDefinition
name|dnsServiceDiscovery
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
name|DnsServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|DnsServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|dnsServiceDiscovery (String domain, String protocol)
specifier|public
name|ServiceCallDefinition
name|dnsServiceDiscovery
parameter_list|(
name|String
name|domain
parameter_list|,
name|String
name|protocol
parameter_list|)
block|{
name|DnsServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|DnsServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setProto
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|etcdServiceDiscovery ()
specifier|public
name|EtcdServiceCallServiceDiscoveryConfiguration
name|etcdServiceDiscovery
parameter_list|()
block|{
name|EtcdServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|EtcdServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|kubernetesServiceDiscovery ()
specifier|public
name|KubernetesServiceCallServiceDiscoveryConfiguration
name|kubernetesServiceDiscovery
parameter_list|()
block|{
name|KubernetesServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|KubernetesServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|kubernetesClientServiceDiscovery ()
specifier|public
name|KubernetesServiceCallServiceDiscoveryConfiguration
name|kubernetesClientServiceDiscovery
parameter_list|()
block|{
name|KubernetesServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|KubernetesServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLookup
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|kubernetesEnvServiceDiscovery ()
specifier|public
name|ServiceCallDefinition
name|kubernetesEnvServiceDiscovery
parameter_list|()
block|{
name|KubernetesServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|KubernetesServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLookup
argument_list|(
literal|"environment"
argument_list|)
expr_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|kubernetesDnsServiceDiscovery (String namespace, String domain)
specifier|public
name|ServiceCallDefinition
name|kubernetesDnsServiceDiscovery
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|domain
parameter_list|)
block|{
name|KubernetesServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|KubernetesServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLookup
argument_list|(
literal|"dns"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDnsDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|multiServiceDiscovery ()
specifier|public
name|MultiServiceCallServiceDiscoveryConfiguration
name|multiServiceDiscovery
parameter_list|()
block|{
name|MultiServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|MultiServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|staticServiceDiscovery ()
specifier|public
name|StaticServiceCallServiceDiscoveryConfiguration
name|staticServiceDiscovery
parameter_list|()
block|{
name|StaticServiceCallServiceDiscoveryConfiguration
name|conf
init|=
operator|new
name|StaticServiceCallServiceDiscoveryConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setServiceDiscoveryConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|// *****************************
comment|// Shortcuts - LoadBalancer
comment|// *****************************
DECL|method|ribbonLoadBalancer ()
specifier|public
name|ServiceCallDefinition
name|ribbonLoadBalancer
parameter_list|()
block|{
name|RibbonServiceCallLoadBalancerConfiguration
name|conf
init|=
operator|new
name|RibbonServiceCallLoadBalancerConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setLoadBalancerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ribbonLoadBalancer (String clientName)
specifier|public
name|ServiceCallDefinition
name|ribbonLoadBalancer
parameter_list|(
name|String
name|clientName
parameter_list|)
block|{
name|RibbonServiceCallLoadBalancerConfiguration
name|conf
init|=
operator|new
name|RibbonServiceCallLoadBalancerConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClientName
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
name|setLoadBalancerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// *****************************
comment|// Processor Factory
comment|// *****************************
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|camelContext
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|ServiceCallConfigurationDefinition
name|config
init|=
name|retrieveConfig
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|ServiceDiscovery
name|serviceDiscovery
init|=
name|retrieveServiceDiscovery
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|ServiceFilter
name|serviceFilter
init|=
name|retrieveServiceFilter
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|ServiceChooser
name|serviceChooser
init|=
name|retrieveServiceChooser
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|LoadBalancer
name|loadBalancer
init|=
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|Expression
name|expression
init|=
name|retrieveExpression
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadBalancer
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|loadBalancer
operator|)
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loadBalancer
operator|instanceof
name|ServiceDiscoveryAware
condition|)
block|{
operator|(
operator|(
name|ServiceDiscoveryAware
operator|)
name|loadBalancer
operator|)
operator|.
name|setServiceDiscovery
argument_list|(
name|serviceDiscovery
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loadBalancer
operator|instanceof
name|ServiceFilterAware
condition|)
block|{
operator|(
operator|(
name|ServiceFilterAware
operator|)
name|loadBalancer
operator|)
operator|.
name|setServiceFilter
argument_list|(
name|serviceFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loadBalancer
operator|instanceof
name|ServiceChooserAware
condition|)
block|{
operator|(
operator|(
name|ServiceChooserAware
operator|)
name|loadBalancer
operator|)
operator|.
name|setServiceChooser
argument_list|(
name|serviceChooser
argument_list|)
expr_stmt|;
block|}
comment|// The component is used to configure what the default scheme to use (eg camel component name).
comment|// The component configured on EIP takes precedence vs configured on configuration.
name|String
name|component
init|=
name|this
operator|.
name|component
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|component
operator|=
name|config
operator|!=
literal|null
condition|?
name|config
operator|.
name|getComponent
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|DefaultServiceCallProcessor
argument_list|(
name|camelContext
argument_list|,
name|name
argument_list|,
name|component
argument_list|,
name|uri
argument_list|,
name|pattern
argument_list|,
name|loadBalancer
argument_list|,
name|expression
argument_list|)
return|;
block|}
comment|// *****************************
comment|// Helpers
comment|// *****************************
DECL|method|retrieveConfig (CamelContext camelContext)
specifier|private
name|ServiceCallConfigurationDefinition
name|retrieveConfig
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|ServiceCallConfigurationDefinition
name|config
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configurationRef
operator|!=
literal|null
condition|)
block|{
comment|// lookup in registry first
name|config
operator|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|configurationRef
argument_list|,
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// and fallback as service configuration
name|config
operator|=
name|camelContext
operator|.
name|getServiceCallConfiguration
argument_list|(
name|configurationRef
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|camelContext
operator|.
name|getServiceCallConfiguration
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// if no default then try to find if there configuration in the registry of the given type
name|Set
argument_list|<
name|ServiceCallConfigurationDefinition
argument_list|>
name|set
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|config
operator|=
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|config
return|;
block|}
DECL|method|retrieveServiceDiscovery (CamelContext camelContext, ServiceCallConfigurationDefinition config)
specifier|private
name|ServiceDiscovery
name|retrieveServiceDiscovery
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceDiscovery
name|answer
decl_stmt|;
if|if
condition|(
name|serviceDiscoveryConfiguration
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|serviceDiscoveryConfiguration
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getServiceDiscoveryConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|config
operator|.
name|getServiceDiscoveryConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceDiscovery
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|this
operator|::
name|getServiceDiscovery
argument_list|,
name|this
operator|::
name|getServiceDiscoveryRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceDiscovery
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getServiceDiscovery
argument_list|,
name|config
operator|::
name|getServiceDiscoveryRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If there's no configuration, let's try to find a suitable implementation
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|ServiceCallServiceDiscoveryConfiguration
name|configuration
range|:
name|ServiceCallConstants
operator|.
name|SERVICE_DISCOVERY_CONFIGURATIONS
control|)
block|{
try|try
block|{
name|answer
operator|=
name|configuration
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// skip
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveServiceFilter (CamelContext camelContext, ServiceCallConfigurationDefinition config)
specifier|private
name|ServiceFilter
name|retrieveServiceFilter
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|)
block|{
name|ServiceFilter
name|answer
init|=
name|retrieve
argument_list|(
name|ServiceFilter
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|this
operator|::
name|getServiceFilter
argument_list|,
name|this
operator|::
name|getServiceFilterRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceFilter
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getServiceFilter
argument_list|,
name|config
operator|::
name|getServiceFilterRef
argument_list|)
expr_stmt|;
comment|// If the ServiceFilter is not found but a ref is set, try to determine
comment|// the implementation according to the ref name.
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|config
operator|.
name|getServiceFilterRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"healthy"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|HealthyServiceFilter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"all"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|AllServiceFilter
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// If there's no configuration, let's use the healthy strategy
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|HealthyServiceFilter
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveServiceChooser (CamelContext camelContext, ServiceCallConfigurationDefinition config)
specifier|private
name|ServiceChooser
name|retrieveServiceChooser
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|)
block|{
name|ServiceChooser
name|answer
init|=
name|retrieve
argument_list|(
name|ServiceChooser
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|this
operator|::
name|getServiceChooser
argument_list|,
name|this
operator|::
name|getServiceChooserRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceChooser
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getServiceChooser
argument_list|,
name|config
operator|::
name|getServiceChooserRef
argument_list|)
expr_stmt|;
comment|// If the ServiceChooser is not found but a ref is set, try to determine
comment|// the implementation according to the ref name.
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|config
operator|.
name|getServiceChooserRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"roundrobin"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|RoundRobinServiceChooser
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"round-robin"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|RoundRobinServiceChooser
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"random"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|RandomServiceChooser
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceChooser
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// If there's no configuration, let's use the round-robin strategy
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|RoundRobinServiceChooser
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveLoadBalancer (CamelContext camelContext, ServiceCallConfigurationDefinition config)
specifier|private
name|LoadBalancer
name|retrieveLoadBalancer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|LoadBalancer
name|answer
decl_stmt|;
if|if
condition|(
name|loadBalancerConfiguration
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|loadBalancerConfiguration
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getLoadBalancerConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|config
operator|.
name|getLoadBalancerConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|LoadBalancer
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|this
operator|::
name|getLoadBalancer
argument_list|,
name|this
operator|::
name|getLoadBalancerRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|LoadBalancer
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getLoadBalancer
argument_list|,
name|config
operator|::
name|getLoadBalancerRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If there's no configuration, let's try to find a suitable implementation
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|ServiceCallLoadBalancerConfiguration
name|configuration
range|:
name|ServiceCallConstants
operator|.
name|LOAD_BALANCER_CONFIGURATIONS
control|)
block|{
try|try
block|{
name|answer
operator|=
name|configuration
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// skip
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|DefaultLoadBalancer
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveExpression (CamelContext camelContext, ServiceCallConfigurationDefinition config)
specifier|private
name|Expression
name|retrieveExpression
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|Expression
name|answer
decl_stmt|;
if|if
condition|(
name|expressionConfiguration
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|expressionConfiguration
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getExpressionConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|config
operator|.
name|getExpressionConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|Expression
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|this
operator|::
name|getExpression
argument_list|,
name|this
operator|::
name|getExpressionRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|Expression
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getExpression
argument_list|,
name|config
operator|::
name|getExpressionRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|Expression
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|DefaultServiceCallExpression
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieve (Class<T> type, CamelContext camelContext, Supplier<T> instanceSupplier, Supplier<String> refSupplier)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|retrieve
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|instanceSupplier
parameter_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
name|refSupplier
parameter_list|)
block|{
name|T
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|instanceSupplier
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|instanceSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|refSupplier
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|refSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ref
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|findByType (CamelContext camelContext, Class<T> type)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|findByType
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|set
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

