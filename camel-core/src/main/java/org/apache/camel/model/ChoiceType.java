begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|ChoiceProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DelegateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|FilterProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"choice"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ChoiceType
specifier|public
class|class
name|ChoiceType
extends|extends
name|ProcessorType
block|{
annotation|@
name|XmlElementRef
DECL|field|interceptors
specifier|private
name|List
argument_list|<
name|InterceptorType
argument_list|>
name|interceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptorType
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElementRef
DECL|field|whenClauses
specifier|private
name|List
argument_list|<
name|WhenType
argument_list|>
name|whenClauses
init|=
operator|new
name|ArrayList
argument_list|<
name|WhenType
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|otherwise
specifier|private
name|OtherwiseType
name|otherwise
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Choice[ "
operator|+
name|getWhenClauses
argument_list|()
operator|+
literal|" "
operator|+
name|getOtherwise
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FilterProcessor
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|FilterProcessor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WhenType
name|whenClaus
range|:
name|whenClauses
control|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|whenClaus
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Processor
name|otherwiseProcessor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|otherwise
operator|!=
literal|null
condition|)
block|{
name|otherwiseProcessor
operator|=
name|otherwise
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ChoiceProcessor
argument_list|(
name|filters
argument_list|,
name|otherwiseProcessor
argument_list|)
return|;
block|}
comment|// Fluent API
comment|// -------------------------------------------------------------------------
DECL|method|when (Predicate predicate)
specifier|public
name|ChoiceType
name|when
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|getWhenClauses
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WhenType
argument_list|(
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|otherwise ()
specifier|public
name|OtherwiseType
name|otherwise
parameter_list|()
block|{
name|OtherwiseType
name|answer
init|=
operator|new
name|OtherwiseType
argument_list|()
decl_stmt|;
name|setOtherwise
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|proceed ()
specifier|public
name|ChoiceType
name|proceed
parameter_list|()
block|{
name|super
operator|.
name|proceed
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|to (Endpoint endpoint)
specifier|public
name|ChoiceType
name|to
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
operator|.
name|to
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|to (Collection<Endpoint> endpoints)
specifier|public
name|ChoiceType
name|to
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
name|super
operator|.
name|to
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|to (Endpoint... endpoints)
specifier|public
name|ChoiceType
name|to
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
name|super
operator|.
name|to
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|to (String uri)
specifier|public
name|ChoiceType
name|to
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|super
operator|.
name|to
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|to (String... uris)
specifier|public
name|ChoiceType
name|to
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
name|super
operator|.
name|to
argument_list|(
name|uris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|bean (Object bean)
specifier|public
name|ChoiceType
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
name|super
operator|.
name|bean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|bean (Object bean, String method)
specifier|public
name|ChoiceType
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|super
operator|.
name|bean
argument_list|(
name|bean
argument_list|,
name|method
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|beanRef (String ref)
specifier|public
name|ChoiceType
name|beanRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|super
operator|.
name|beanRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|beanRef (String ref, String method)
specifier|public
name|ChoiceType
name|beanRef
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|super
operator|.
name|beanRef
argument_list|(
name|ref
argument_list|,
name|method
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|convertBodyTo (Class type)
specifier|public
name|ChoiceType
name|convertBodyTo
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|super
operator|.
name|convertBodyTo
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|convertFaultBodyTo (Class type)
specifier|public
name|ChoiceType
name|convertFaultBodyTo
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|super
operator|.
name|convertFaultBodyTo
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|convertOutBodyTo (Class type)
specifier|public
name|ChoiceType
name|convertOutBodyTo
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|super
operator|.
name|convertOutBodyTo
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|inheritErrorHandler (boolean condition)
specifier|public
name|ChoiceType
name|inheritErrorHandler
parameter_list|(
name|boolean
name|condition
parameter_list|)
block|{
name|super
operator|.
name|inheritErrorHandler
argument_list|(
name|condition
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|intercept (DelegateProcessor interceptor)
specifier|public
name|ChoiceType
name|intercept
parameter_list|(
name|DelegateProcessor
name|interceptor
parameter_list|)
block|{
name|super
operator|.
name|intercept
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|interceptor (String ref)
specifier|public
name|ChoiceType
name|interceptor
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|super
operator|.
name|interceptor
argument_list|(
name|ref
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|interceptors (String... refs)
specifier|public
name|ChoiceType
name|interceptors
parameter_list|(
name|String
modifier|...
name|refs
parameter_list|)
block|{
name|super
operator|.
name|interceptors
argument_list|(
name|refs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|pipeline (Collection<Endpoint> endpoints)
specifier|public
name|ChoiceType
name|pipeline
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
name|super
operator|.
name|pipeline
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|pipeline (Endpoint... endpoints)
specifier|public
name|ChoiceType
name|pipeline
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
name|super
operator|.
name|pipeline
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|pipeline (String... uris)
specifier|public
name|ChoiceType
name|pipeline
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
name|super
operator|.
name|pipeline
argument_list|(
name|uris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|process (Processor processor)
specifier|public
name|ChoiceType
name|process
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|super
operator|.
name|process
argument_list|(
name|processor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|recipientList (Expression receipients)
specifier|public
name|ChoiceType
name|recipientList
parameter_list|(
name|Expression
name|receipients
parameter_list|)
block|{
name|super
operator|.
name|recipientList
argument_list|(
name|receipients
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|removeHeader (String name)
specifier|public
name|ChoiceType
name|removeHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
operator|.
name|removeHeader
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|removeOutHeader (String name)
specifier|public
name|ChoiceType
name|removeOutHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
operator|.
name|removeOutHeader
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|removeProperty (String name)
specifier|public
name|ChoiceType
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBody (Expression expression)
specifier|public
name|ChoiceType
name|setBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|super
operator|.
name|setBody
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setHeader (String name, Expression expression)
specifier|public
name|ChoiceType
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|super
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setOutBody (Expression expression)
specifier|public
name|ChoiceType
name|setOutBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|super
operator|.
name|setOutBody
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setOutHeader (String name, Expression expression)
specifier|public
name|ChoiceType
name|setOutHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|super
operator|.
name|setOutHeader
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setProperty (String name, Expression expression)
specifier|public
name|ChoiceType
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|super
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|trace ()
specifier|public
name|ChoiceType
name|trace
parameter_list|()
block|{
name|super
operator|.
name|trace
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|trace (String category)
specifier|public
name|ChoiceType
name|trace
parameter_list|(
name|String
name|category
parameter_list|)
block|{
name|super
operator|.
name|trace
argument_list|(
name|category
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
name|CollectionStringBuffer
name|buffer
init|=
operator|new
name|CollectionStringBuffer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WhenType
argument_list|>
name|list
init|=
name|getWhenClauses
argument_list|()
decl_stmt|;
for|for
control|(
name|WhenType
name|whenType
range|:
name|list
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|whenType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getWhenClauses ()
specifier|public
name|List
argument_list|<
name|WhenType
argument_list|>
name|getWhenClauses
parameter_list|()
block|{
return|return
name|whenClauses
return|;
block|}
DECL|method|setWhenClauses (List<WhenType> whenClauses)
specifier|public
name|void
name|setWhenClauses
parameter_list|(
name|List
argument_list|<
name|WhenType
argument_list|>
name|whenClauses
parameter_list|)
block|{
name|this
operator|.
name|whenClauses
operator|=
name|whenClauses
expr_stmt|;
block|}
DECL|method|getOutputs ()
specifier|public
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|getOutputs
parameter_list|()
block|{
if|if
condition|(
name|otherwise
operator|!=
literal|null
condition|)
block|{
return|return
name|otherwise
operator|.
name|getOutputs
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|whenClauses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
else|else
block|{
name|WhenType
name|when
init|=
name|whenClauses
operator|.
name|get
argument_list|(
name|whenClauses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|when
operator|.
name|getOutputs
argument_list|()
return|;
block|}
block|}
DECL|method|getOtherwise ()
specifier|public
name|OtherwiseType
name|getOtherwise
parameter_list|()
block|{
return|return
name|otherwise
return|;
block|}
DECL|method|setOtherwise (OtherwiseType otherwise)
specifier|public
name|void
name|setOtherwise
parameter_list|(
name|OtherwiseType
name|otherwise
parameter_list|)
block|{
name|this
operator|.
name|otherwise
operator|=
name|otherwise
expr_stmt|;
block|}
DECL|method|getInterceptors ()
specifier|public
name|List
argument_list|<
name|InterceptorType
argument_list|>
name|getInterceptors
parameter_list|()
block|{
return|return
name|interceptors
return|;
block|}
DECL|method|setInterceptors (List<InterceptorType> interceptors)
specifier|public
name|void
name|setInterceptors
parameter_list|(
name|List
argument_list|<
name|InterceptorType
argument_list|>
name|interceptors
parameter_list|)
block|{
name|this
operator|.
name|interceptors
operator|=
name|interceptors
expr_stmt|;
block|}
block|}
end_class

end_unit

