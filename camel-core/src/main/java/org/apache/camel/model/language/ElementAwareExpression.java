begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.language
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ElementAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * A useful base class for any expression which may be namespace or XML content aware  * such as {@link XPathExpression} or {@link XQueryExpression}  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ElementAwareExpression
specifier|public
specifier|abstract
class|class
name|ElementAwareExpression
extends|extends
name|ExpressionType
implements|implements
name|ElementAware
block|{
annotation|@
name|XmlTransient
DECL|field|element
specifier|private
name|Element
name|element
decl_stmt|;
DECL|method|ElementAwareExpression ()
specifier|public
name|ElementAwareExpression
parameter_list|()
block|{     }
DECL|method|ElementAwareExpression (String expression)
specifier|public
name|ElementAwareExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
DECL|method|getElement ()
specifier|public
name|Element
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
comment|/**      * Sets the XML element in which this XPath node is defined so that      * the namespace context can be reused by the XPath expression      *      * @param element the XML element node which defines this xpath expression      */
DECL|method|setElement (Element element)
specifier|public
name|void
name|setElement
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configureExpresion (RouteContext routeContext, Expression expression)
specifier|protected
name|void
name|configureExpresion
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|configureXPathBuilder
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configurePredicate (RouteContext routeContext, Predicate predicate)
specifier|protected
name|void
name|configurePredicate
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
block|{
name|configureXPathBuilder
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
DECL|method|configureXPathBuilder (Object builder)
specifier|protected
name|void
name|configureXPathBuilder
parameter_list|(
name|Object
name|builder
parameter_list|)
block|{
if|if
condition|(
name|element
operator|!=
literal|null
operator|&&
name|builder
operator|instanceof
name|ElementAware
condition|)
block|{
name|ElementAware
name|elementAware
init|=
operator|(
name|ElementAware
operator|)
name|builder
decl_stmt|;
name|elementAware
operator|.
name|setElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

