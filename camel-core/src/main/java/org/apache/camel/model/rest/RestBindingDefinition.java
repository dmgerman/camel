begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|NoOutputDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|binding
operator|.
name|RestBindingProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"restBinding"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RestBindingDefinition
specifier|public
class|class
name|RestBindingDefinition
extends|extends
name|NoOutputDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|jsonDataFormat
specifier|private
name|String
name|jsonDataFormat
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|xmlDataFormat
specifier|private
name|String
name|xmlDataFormat
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|classType
specifier|private
name|String
name|classType
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|resolvedClassType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|resolvedClassType
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RestBinding"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"rest"
return|;
block|}
comment|// TODO: allow to configure if json/jaxb is mandatory, or optional
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
comment|// setup json data format
name|String
name|name
init|=
name|jsonDataFormat
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"json-jackson"
expr_stmt|;
block|}
name|DataFormat
name|json
init|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DataFormat "
operator|+
name|name
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|resolvedClassType
operator|==
literal|null
operator|&&
name|classType
operator|!=
literal|null
condition|)
block|{
name|resolvedClassType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|classType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolvedClassType
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|json
argument_list|,
literal|"unmarshalType"
argument_list|,
name|resolvedClassType
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addService
argument_list|(
name|json
argument_list|)
expr_stmt|;
comment|// setup xml data format
name|name
operator|=
name|xmlDataFormat
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"jaxb"
expr_stmt|;
block|}
name|DataFormat
name|jaxb
init|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|jaxb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DataFormat "
operator|+
name|name
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|resolvedClassType
operator|==
literal|null
operator|&&
name|classType
operator|!=
literal|null
condition|)
block|{
name|resolvedClassType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|classType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolvedClassType
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|resolvedClassType
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|jaxb
argument_list|,
literal|"context"
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addService
argument_list|(
name|jaxb
argument_list|)
expr_stmt|;
return|return
operator|new
name|RestBindingProcessor
argument_list|(
name|json
argument_list|,
name|jaxb
argument_list|)
return|;
block|}
DECL|method|getClassType ()
specifier|public
name|String
name|getClassType
parameter_list|()
block|{
return|return
name|classType
return|;
block|}
DECL|method|setClassType (String classType)
specifier|public
name|void
name|setClassType
parameter_list|(
name|String
name|classType
parameter_list|)
block|{
name|this
operator|.
name|classType
operator|=
name|classType
expr_stmt|;
block|}
DECL|method|getResolvedClassType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getResolvedClassType
parameter_list|()
block|{
return|return
name|resolvedClassType
return|;
block|}
DECL|method|setResolvedClassType (Class<?> resolvedClassType)
specifier|public
name|void
name|setResolvedClassType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|resolvedClassType
parameter_list|)
block|{
name|this
operator|.
name|resolvedClassType
operator|=
name|resolvedClassType
expr_stmt|;
block|}
block|}
end_class

end_unit

