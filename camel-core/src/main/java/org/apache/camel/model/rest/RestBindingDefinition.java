begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|NoOutputDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|binding
operator|.
name|RestBindingProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"restBinding"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RestBindingDefinition
specifier|public
class|class
name|RestBindingDefinition
extends|extends
name|NoOutputDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|consumes
specifier|private
name|String
name|consumes
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|produces
specifier|private
name|String
name|produces
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|bindingMode
specifier|private
name|RestBindingMode
name|bindingMode
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|jsonDataFormat
specifier|private
name|String
name|jsonDataFormat
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|xmlDataFormat
specifier|private
name|String
name|xmlDataFormat
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|typeList
specifier|private
name|String
name|typeList
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|classType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|classType
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|useList
specifier|private
name|boolean
name|useList
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|outType
specifier|private
name|String
name|outType
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|outTypeList
specifier|private
name|String
name|outTypeList
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|outClassType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|outClassType
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|outUseList
specifier|private
name|boolean
name|outUseList
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RestBinding"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"rest"
return|;
block|}
comment|// TODO: allow to configure if json/xml only or auto detect (now)
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// type must be set
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|type
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|classType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type must be configured on "
operator|+
name|this
argument_list|)
throw|;
block|}
name|CamelContext
name|context
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
comment|// the default binding mode can be overridden per rest verb
name|String
name|mode
init|=
name|context
operator|.
name|getRestConfiguration
argument_list|()
operator|.
name|getBindingMode
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindingMode
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|bindingMode
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
comment|// setup json data format
name|String
name|name
init|=
name|jsonDataFormat
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"json-jackson"
expr_stmt|;
block|}
name|DataFormat
name|json
init|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// is json binding required?
if|if
condition|(
name|mode
operator|.
name|contains
argument_list|(
literal|"json"
argument_list|)
operator|&&
name|json
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JSon DataFormat "
operator|+
name|name
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|classType
operator|==
literal|null
operator|&&
name|type
operator|!=
literal|null
condition|)
block|{
name|classType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classType
operator|==
literal|null
operator|&&
name|typeList
operator|!=
literal|null
condition|)
block|{
name|classType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|typeList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classType
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|json
argument_list|,
literal|"unmarshalType"
argument_list|,
name|classType
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|json
argument_list|,
literal|"useList"
argument_list|,
name|useList
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addService
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|DataFormat
name|outJson
init|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|outClassType
operator|==
literal|null
operator|&&
name|outType
operator|!=
literal|null
condition|)
block|{
name|outClassType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|outType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outClassType
operator|==
literal|null
operator|&&
name|outTypeList
operator|!=
literal|null
condition|)
block|{
name|outClassType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|outTypeList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outClassType
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJson
argument_list|,
literal|"unmarshalType"
argument_list|,
name|outClassType
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJson
argument_list|,
literal|"useList"
argument_list|,
name|outUseList
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addService
argument_list|(
name|outJson
argument_list|)
expr_stmt|;
comment|// setup xml data format
name|name
operator|=
name|xmlDataFormat
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"jaxb"
expr_stmt|;
block|}
name|DataFormat
name|jaxb
init|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// is xml binding required?
if|if
condition|(
name|mode
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
operator|&&
name|jaxb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"XML DataFormat "
operator|+
name|name
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|classType
operator|==
literal|null
operator|&&
name|type
operator|!=
literal|null
condition|)
block|{
name|classType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classType
operator|==
literal|null
operator|&&
name|typeList
operator|!=
literal|null
condition|)
block|{
name|classType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classType
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|classType
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|jaxb
argument_list|,
literal|"context"
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addService
argument_list|(
name|jaxb
argument_list|)
expr_stmt|;
name|DataFormat
name|outJaxb
init|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|outClassType
operator|==
literal|null
operator|&&
name|outType
operator|!=
literal|null
condition|)
block|{
name|outClassType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|outType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outClassType
operator|==
literal|null
operator|&&
name|outTypeList
operator|!=
literal|null
condition|)
block|{
name|outClassType
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|outTypeList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outClassType
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|outClassType
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJaxb
argument_list|,
literal|"context"
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|classType
operator|!=
literal|null
condition|)
block|{
comment|// fallback and use the context from the input
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|classType
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJaxb
argument_list|,
literal|"context"
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addService
argument_list|(
name|outJaxb
argument_list|)
expr_stmt|;
return|return
operator|new
name|RestBindingProcessor
argument_list|(
name|json
argument_list|,
name|jaxb
argument_list|,
name|outJson
argument_list|,
name|outJaxb
argument_list|,
name|consumes
argument_list|,
name|produces
argument_list|,
name|mode
argument_list|)
return|;
block|}
DECL|method|getConsumes ()
specifier|public
name|String
name|getConsumes
parameter_list|()
block|{
return|return
name|consumes
return|;
block|}
DECL|method|setConsumes (String consumes)
specifier|public
name|void
name|setConsumes
parameter_list|(
name|String
name|consumes
parameter_list|)
block|{
name|this
operator|.
name|consumes
operator|=
name|consumes
expr_stmt|;
block|}
DECL|method|getProduces ()
specifier|public
name|String
name|getProduces
parameter_list|()
block|{
return|return
name|produces
return|;
block|}
DECL|method|setProduces (String produces)
specifier|public
name|void
name|setProduces
parameter_list|(
name|String
name|produces
parameter_list|)
block|{
name|this
operator|.
name|produces
operator|=
name|produces
expr_stmt|;
block|}
DECL|method|getBindingMode ()
specifier|public
name|RestBindingMode
name|getBindingMode
parameter_list|()
block|{
return|return
name|bindingMode
return|;
block|}
DECL|method|setBindingMode (RestBindingMode bindingMode)
specifier|public
name|void
name|setBindingMode
parameter_list|(
name|RestBindingMode
name|bindingMode
parameter_list|)
block|{
name|this
operator|.
name|bindingMode
operator|=
name|bindingMode
expr_stmt|;
block|}
DECL|method|getJsonDataFormat ()
specifier|public
name|String
name|getJsonDataFormat
parameter_list|()
block|{
return|return
name|jsonDataFormat
return|;
block|}
DECL|method|setJsonDataFormat (String jsonDataFormat)
specifier|public
name|void
name|setJsonDataFormat
parameter_list|(
name|String
name|jsonDataFormat
parameter_list|)
block|{
name|this
operator|.
name|jsonDataFormat
operator|=
name|jsonDataFormat
expr_stmt|;
block|}
DECL|method|getXmlDataFormat ()
specifier|public
name|String
name|getXmlDataFormat
parameter_list|()
block|{
return|return
name|xmlDataFormat
return|;
block|}
DECL|method|setXmlDataFormat (String xmlDataFormat)
specifier|public
name|void
name|setXmlDataFormat
parameter_list|(
name|String
name|xmlDataFormat
parameter_list|)
block|{
name|this
operator|.
name|xmlDataFormat
operator|=
name|xmlDataFormat
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (String type)
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|useList
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getTypeList ()
specifier|public
name|String
name|getTypeList
parameter_list|()
block|{
return|return
name|typeList
return|;
block|}
DECL|method|setTypeList (String typeList)
specifier|public
name|void
name|setTypeList
parameter_list|(
name|String
name|typeList
parameter_list|)
block|{
name|this
operator|.
name|typeList
operator|=
name|typeList
expr_stmt|;
name|this
operator|.
name|useList
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getClassType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClassType
parameter_list|()
block|{
return|return
name|classType
return|;
block|}
DECL|method|setClassType (Class<?> classType)
specifier|public
name|void
name|setClassType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
name|this
operator|.
name|classType
operator|=
name|classType
expr_stmt|;
block|}
DECL|method|isUseList ()
specifier|public
name|boolean
name|isUseList
parameter_list|()
block|{
return|return
name|useList
return|;
block|}
DECL|method|setUseList (boolean useList)
specifier|public
name|void
name|setUseList
parameter_list|(
name|boolean
name|useList
parameter_list|)
block|{
name|this
operator|.
name|useList
operator|=
name|useList
expr_stmt|;
block|}
DECL|method|getOutType ()
specifier|public
name|String
name|getOutType
parameter_list|()
block|{
return|return
name|outType
return|;
block|}
DECL|method|setOutType (String type)
specifier|public
name|void
name|setOutType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|outType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|outUseList
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getOutTypeList ()
specifier|public
name|String
name|getOutTypeList
parameter_list|()
block|{
return|return
name|outTypeList
return|;
block|}
DECL|method|setOutTypeList (String typeList)
specifier|public
name|void
name|setOutTypeList
parameter_list|(
name|String
name|typeList
parameter_list|)
block|{
name|this
operator|.
name|outTypeList
operator|=
name|typeList
expr_stmt|;
name|this
operator|.
name|outUseList
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getOutClassType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getOutClassType
parameter_list|()
block|{
return|return
name|outClassType
return|;
block|}
DECL|method|setOutClassType (Class<?> classType)
specifier|public
name|void
name|setOutClassType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
name|this
operator|.
name|outClassType
operator|=
name|classType
expr_stmt|;
block|}
DECL|method|isOutUseList ()
specifier|public
name|boolean
name|isOutUseList
parameter_list|()
block|{
return|return
name|outUseList
return|;
block|}
DECL|method|setOutUseList (boolean useList)
specifier|public
name|void
name|setOutUseList
parameter_list|(
name|boolean
name|useList
parameter_list|)
block|{
name|this
operator|.
name|outUseList
operator|=
name|useList
expr_stmt|;
block|}
block|}
end_class

end_unit

