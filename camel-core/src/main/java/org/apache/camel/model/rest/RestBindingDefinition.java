begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OptionalIdentifiedDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RestBindingAdvice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_comment
comment|/**  * To configure rest binding  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"rest"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"restBinding"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RestBindingDefinition
specifier|public
class|class
name|RestBindingDefinition
extends|extends
name|OptionalIdentifiedDefinition
argument_list|<
name|RestBindingDefinition
argument_list|>
block|{
annotation|@
name|XmlTransient
DECL|field|defaultValues
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultValues
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|requiredBody
specifier|private
name|Boolean
name|requiredBody
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|requiredHeaders
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|requiredHeaders
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|requiredQueryParameters
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|requiredQueryParameters
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|consumes
specifier|private
name|String
name|consumes
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|produces
specifier|private
name|String
name|produces
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"off"
argument_list|)
DECL|field|bindingMode
specifier|private
name|RestBindingMode
name|bindingMode
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|outType
specifier|private
name|String
name|outType
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|skipBindingOnErrorCode
specifier|private
name|Boolean
name|skipBindingOnErrorCode
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|clientRequestValidation
specifier|private
name|Boolean
name|clientRequestValidation
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|enableCORS
specifier|private
name|Boolean
name|enableCORS
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|component
specifier|private
name|String
name|component
decl_stmt|;
DECL|method|RestBindingDefinition ()
specifier|public
name|RestBindingDefinition
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RestBinding"
return|;
block|}
DECL|method|createRestBindingAdvice (RouteContext routeContext)
specifier|public
name|RestBindingAdvice
name|createRestBindingAdvice
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
name|RestConfiguration
name|config
init|=
name|context
operator|.
name|getRestConfiguration
argument_list|(
name|component
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// these options can be overridden per rest verb
name|String
name|mode
init|=
name|config
operator|.
name|getBindingMode
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindingMode
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|bindingMode
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
name|boolean
name|cors
init|=
name|config
operator|.
name|isEnableCORS
argument_list|()
decl_stmt|;
if|if
condition|(
name|enableCORS
operator|!=
literal|null
condition|)
block|{
name|cors
operator|=
name|enableCORS
expr_stmt|;
block|}
name|boolean
name|skip
init|=
name|config
operator|.
name|isSkipBindingOnErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|skipBindingOnErrorCode
operator|!=
literal|null
condition|)
block|{
name|skip
operator|=
name|skipBindingOnErrorCode
expr_stmt|;
block|}
name|boolean
name|validation
init|=
name|config
operator|.
name|isClientRequestValidation
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientRequestValidation
operator|!=
literal|null
condition|)
block|{
name|validation
operator|=
name|clientRequestValidation
expr_stmt|;
block|}
comment|// cors headers
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|corsHeaders
init|=
name|config
operator|.
name|getCorsHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
literal|null
operator|||
literal|"off"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
comment|// binding mode is off, so create a off mode binding processor
return|return
operator|new
name|RestBindingAdvice
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|consumes
argument_list|,
name|produces
argument_list|,
name|mode
argument_list|,
name|skip
argument_list|,
name|validation
argument_list|,
name|cors
argument_list|,
name|corsHeaders
argument_list|,
name|defaultValues
argument_list|,
name|requiredBody
operator|!=
literal|null
condition|?
name|requiredBody
else|:
literal|false
argument_list|,
name|requiredQueryParameters
argument_list|,
name|requiredHeaders
argument_list|)
return|;
block|}
comment|// setup json data format
name|DataFormat
name|json
init|=
literal|null
decl_stmt|;
name|DataFormat
name|outJson
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|.
name|contains
argument_list|(
literal|"json"
argument_list|)
operator|||
literal|"auto"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|config
operator|.
name|getJsonDataFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
comment|// must only be a name, not refer to an existing instance
name|Object
name|instance
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JsonDataFormat name: "
operator|+
name|name
operator|+
literal|" must not be an existing bean instance from the registry"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|name
operator|=
literal|"json-jackson"
expr_stmt|;
block|}
comment|// this will create a new instance as the name was not already pre-created
name|json
operator|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|outJson
operator|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|?
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
else|:
name|type
decl_stmt|;
name|clazz
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|json
argument_list|,
literal|"unmarshalType"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|json
argument_list|,
literal|"useList"
argument_list|,
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setAdditionalConfiguration
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|json
argument_list|,
literal|"json.in."
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|outClazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outType
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|outType
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|?
name|outType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|outType
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
else|:
name|outType
decl_stmt|;
name|outClazz
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outClazz
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJson
argument_list|,
literal|"unmarshalType"
argument_list|,
name|outClazz
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJson
argument_list|,
literal|"useList"
argument_list|,
name|outType
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setAdditionalConfiguration
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|outJson
argument_list|,
literal|"json.out."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// setup xml data format
name|DataFormat
name|jaxb
init|=
literal|null
decl_stmt|;
name|DataFormat
name|outJaxb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mode
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
operator|||
literal|"auto"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|config
operator|.
name|getXmlDataFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
comment|// must only be a name, not refer to an existing instance
name|Object
name|instance
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"XmlDataFormat name: "
operator|+
name|name
operator|+
literal|" must not be an existing bean instance from the registry"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|name
operator|=
literal|"jaxb"
expr_stmt|;
block|}
comment|// this will create a new instance as the name was not already pre-created
name|jaxb
operator|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|outJaxb
operator|=
name|context
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// is xml binding required?
if|if
condition|(
name|mode
operator|.
name|contains
argument_list|(
literal|"xml"
argument_list|)
operator|&&
name|jaxb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"XML DataFormat "
operator|+
name|name
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|jaxb
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|?
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
else|:
name|type
decl_stmt|;
name|clazz
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|jaxb
argument_list|,
literal|"context"
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
name|setAdditionalConfiguration
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|jaxb
argument_list|,
literal|"xml.in."
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|outClazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outType
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|outType
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|?
name|outType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|outType
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
else|:
name|outType
decl_stmt|;
name|outClazz
operator|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outClazz
operator|!=
literal|null
condition|)
block|{
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|outClazz
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJaxb
argument_list|,
literal|"context"
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
comment|// fallback and use the context from the input
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|outJaxb
argument_list|,
literal|"context"
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
name|setAdditionalConfiguration
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|outJaxb
argument_list|,
literal|"xml.out."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RestBindingAdvice
argument_list|(
name|context
argument_list|,
name|json
argument_list|,
name|jaxb
argument_list|,
name|outJson
argument_list|,
name|outJaxb
argument_list|,
name|consumes
argument_list|,
name|produces
argument_list|,
name|mode
argument_list|,
name|skip
argument_list|,
name|validation
argument_list|,
name|cors
argument_list|,
name|corsHeaders
argument_list|,
name|defaultValues
argument_list|,
name|requiredBody
operator|!=
literal|null
condition|?
name|requiredBody
else|:
literal|false
argument_list|,
name|requiredQueryParameters
argument_list|,
name|requiredHeaders
argument_list|)
return|;
block|}
DECL|method|setAdditionalConfiguration (RestConfiguration config, CamelContext context, DataFormat dataFormat, String prefix)
specifier|private
name|void
name|setAdditionalConfiguration
parameter_list|(
name|RestConfiguration
name|config
parameter_list|,
name|CamelContext
name|context
parameter_list|,
name|DataFormat
name|dataFormat
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|config
operator|.
name|getDataFormatProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getDataFormatProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// must use a copy as otherwise the options gets removed during introspection setProperties
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// filter keys on prefix
comment|// - either its a known prefix and must match the prefix parameter
comment|// - or its a common configuration that we should always use
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|config
operator|.
name|getDataFormatProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|copyKey
decl_stmt|;
name|boolean
name|known
init|=
name|isKeyKnownPrefix
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|known
condition|)
block|{
comment|// remove the prefix from the key to use
name|copyKey
operator|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use the key as is
name|copyKey
operator|=
name|key
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|known
operator|||
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|copyKey
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set reference properties first as they use # syntax that fools the regular properties setter
name|EndpointHelper
operator|.
name|setReferenceProperties
argument_list|(
name|context
argument_list|,
name|dataFormat
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setProperties
argument_list|(
name|context
argument_list|,
name|dataFormat
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isKeyKnownPrefix (String key)
specifier|private
name|boolean
name|isKeyKnownPrefix
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|startsWith
argument_list|(
literal|"json.in."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"json.out."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"xml.in."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"xml.out."
argument_list|)
return|;
block|}
DECL|method|getConsumes ()
specifier|public
name|String
name|getConsumes
parameter_list|()
block|{
return|return
name|consumes
return|;
block|}
comment|/**      * Adds a default value for the query parameter      *      * @param paramName   query parameter name      * @param defaultValue the default value      */
DECL|method|addDefaultValue (String paramName, String defaultValue)
specifier|public
name|void
name|addDefaultValue
parameter_list|(
name|String
name|paramName
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|defaultValues
operator|==
literal|null
condition|)
block|{
name|defaultValues
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|defaultValues
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a required query parameter      *      * @param paramName   query parameter name      */
DECL|method|addRequiredQueryParameter (String paramName)
specifier|public
name|void
name|addRequiredQueryParameter
parameter_list|(
name|String
name|paramName
parameter_list|)
block|{
if|if
condition|(
name|requiredQueryParameters
operator|==
literal|null
condition|)
block|{
name|requiredQueryParameters
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|requiredQueryParameters
operator|.
name|add
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a required HTTP header      *      * @param headerName   HTTP header name      */
DECL|method|addRequiredHeader (String headerName)
specifier|public
name|void
name|addRequiredHeader
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
if|if
condition|(
name|requiredHeaders
operator|==
literal|null
condition|)
block|{
name|requiredHeaders
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|requiredHeaders
operator|.
name|add
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequiredBody ()
specifier|public
name|Boolean
name|getRequiredBody
parameter_list|()
block|{
return|return
name|requiredBody
return|;
block|}
DECL|method|setRequiredBody (Boolean requiredBody)
specifier|public
name|void
name|setRequiredBody
parameter_list|(
name|Boolean
name|requiredBody
parameter_list|)
block|{
name|this
operator|.
name|requiredBody
operator|=
name|requiredBody
expr_stmt|;
block|}
comment|/**      * Gets the registered default values for query parameters      */
DECL|method|getDefaultValues ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDefaultValues
parameter_list|()
block|{
return|return
name|defaultValues
return|;
block|}
comment|/**      * Sets the component name that this definition will apply to        */
DECL|method|setComponent (String component)
specifier|public
name|void
name|setComponent
parameter_list|(
name|String
name|component
parameter_list|)
block|{
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
DECL|method|getComponent ()
specifier|public
name|String
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
comment|/**      * To define the content type what the REST service consumes (accept as input), such as application/xml or application/json      */
DECL|method|setConsumes (String consumes)
specifier|public
name|void
name|setConsumes
parameter_list|(
name|String
name|consumes
parameter_list|)
block|{
name|this
operator|.
name|consumes
operator|=
name|consumes
expr_stmt|;
block|}
DECL|method|getProduces ()
specifier|public
name|String
name|getProduces
parameter_list|()
block|{
return|return
name|produces
return|;
block|}
comment|/**      * To define the content type what the REST service produces (uses for output), such as application/xml or application/json      */
DECL|method|setProduces (String produces)
specifier|public
name|void
name|setProduces
parameter_list|(
name|String
name|produces
parameter_list|)
block|{
name|this
operator|.
name|produces
operator|=
name|produces
expr_stmt|;
block|}
DECL|method|getBindingMode ()
specifier|public
name|RestBindingMode
name|getBindingMode
parameter_list|()
block|{
return|return
name|bindingMode
return|;
block|}
comment|/**      * Sets the binding mode to use.      *<p/>      * The default value is off      */
DECL|method|setBindingMode (RestBindingMode bindingMode)
specifier|public
name|void
name|setBindingMode
parameter_list|(
name|RestBindingMode
name|bindingMode
parameter_list|)
block|{
name|this
operator|.
name|bindingMode
operator|=
name|bindingMode
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Sets the class name to use for binding from input to POJO for the incoming data      *<p/>      * The canonical name of the class of the input data. Append a [] to the end of the canonical name      * if you want the input to be an array type.      */
DECL|method|setType (String type)
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getOutType ()
specifier|public
name|String
name|getOutType
parameter_list|()
block|{
return|return
name|outType
return|;
block|}
comment|/**      * Sets the class name to use for binding from POJO to output for the outgoing data      *<p/>      * The canonical name of the class of the input data. Append a [] to the end of the canonical name      * if you want the input to be an array type.      */
DECL|method|setOutType (String outType)
specifier|public
name|void
name|setOutType
parameter_list|(
name|String
name|outType
parameter_list|)
block|{
name|this
operator|.
name|outType
operator|=
name|outType
expr_stmt|;
block|}
DECL|method|getSkipBindingOnErrorCode ()
specifier|public
name|Boolean
name|getSkipBindingOnErrorCode
parameter_list|()
block|{
return|return
name|skipBindingOnErrorCode
return|;
block|}
comment|/**      * Whether to skip binding on output if there is a custom HTTP error code header.      * This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.      */
DECL|method|setSkipBindingOnErrorCode (Boolean skipBindingOnErrorCode)
specifier|public
name|void
name|setSkipBindingOnErrorCode
parameter_list|(
name|Boolean
name|skipBindingOnErrorCode
parameter_list|)
block|{
name|this
operator|.
name|skipBindingOnErrorCode
operator|=
name|skipBindingOnErrorCode
expr_stmt|;
block|}
DECL|method|getClientRequestValidation ()
specifier|public
name|Boolean
name|getClientRequestValidation
parameter_list|()
block|{
return|return
name|clientRequestValidation
return|;
block|}
comment|/**      * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from      * the client is supported by the Rest-DSL configuration of its consumes/produces settings.      *<p/>      * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.      *<p/>      * The default value is false.      */
DECL|method|setClientRequestValidation (Boolean clientRequestValidation)
specifier|public
name|void
name|setClientRequestValidation
parameter_list|(
name|Boolean
name|clientRequestValidation
parameter_list|)
block|{
name|this
operator|.
name|clientRequestValidation
operator|=
name|clientRequestValidation
expr_stmt|;
block|}
DECL|method|getEnableCORS ()
specifier|public
name|Boolean
name|getEnableCORS
parameter_list|()
block|{
return|return
name|enableCORS
return|;
block|}
comment|/**      * Whether to enable CORS headers in the HTTP response.      *<p/>      * The default value is false.      */
DECL|method|setEnableCORS (Boolean enableCORS)
specifier|public
name|void
name|setEnableCORS
parameter_list|(
name|Boolean
name|enableCORS
parameter_list|)
block|{
name|this
operator|.
name|enableCORS
operator|=
name|enableCORS
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"restBinding"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

