begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|WhenSkipSendToEndpointDefinition
specifier|public
class|class
name|WhenSkipSendToEndpointDefinition
extends|extends
name|WhenDefinition
block|{
annotation|@
name|Override
DECL|method|createPredicate (RouteContext routeContext)
specifier|protected
name|Predicate
name|createPredicate
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
comment|// we need to keep track whether the when matches or not, so delegate
comment|// the predicate and add the matches result as a property on the exchange
specifier|final
name|Predicate
name|delegate
init|=
name|super
operator|.
name|createPredicate
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
return|return
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|boolean
name|matches
init|=
name|delegate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|INTERCEPT_SEND_TO_ENDPOINT_WHEN_MATCHED
argument_list|,
name|matches
argument_list|)
expr_stmt|;
return|return
name|matches
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

