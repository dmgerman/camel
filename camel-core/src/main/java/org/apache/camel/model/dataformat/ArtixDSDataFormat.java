begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Represents the<a href="http://activemq.apache.org/camel/artix-data-services.html">Artix Data Services</a>  * {@link DataFormat}  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"artixDS"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ArtixDSDataFormat
specifier|public
class|class
name|ArtixDSDataFormat
extends|extends
name|DataFormatType
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ArtixDSDataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|elementTypeName
specifier|private
name|String
name|elementTypeName
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|format
specifier|private
name|String
name|format
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|elementType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|elementType
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|contentType
specifier|private
name|ArtixDSContentType
name|contentType
decl_stmt|;
DECL|method|ArtixDSDataFormat ()
specifier|public
name|ArtixDSDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"org.apache.camel.artix.ds.ArtixDSFormat"
argument_list|)
expr_stmt|;
block|}
DECL|method|ArtixDSDataFormat (Class<?> elementType)
specifier|public
name|ArtixDSDataFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|elementType
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|elementType
operator|=
name|elementType
expr_stmt|;
block|}
DECL|method|ArtixDSDataFormat (Class<?> elementType, ArtixDSContentType contentType)
specifier|public
name|ArtixDSDataFormat
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|elementType
parameter_list|,
name|ArtixDSContentType
name|contentType
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|elementType
operator|=
name|elementType
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
DECL|method|ArtixDSDataFormat (ArtixDSContentType contentType)
specifier|public
name|ArtixDSDataFormat
parameter_list|(
name|ArtixDSContentType
name|contentType
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getElementTypeName ()
specifier|public
name|String
name|getElementTypeName
parameter_list|()
block|{
return|return
name|elementTypeName
return|;
block|}
DECL|method|setElementTypeName (String elementTypeName)
specifier|public
name|void
name|setElementTypeName
parameter_list|(
name|String
name|elementTypeName
parameter_list|)
block|{
name|this
operator|.
name|elementTypeName
operator|=
name|elementTypeName
expr_stmt|;
block|}
DECL|method|getContentType ()
specifier|public
name|ArtixDSContentType
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
DECL|method|setContentType (ArtixDSContentType contentType)
specifier|public
name|void
name|setContentType
parameter_list|(
name|ArtixDSContentType
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
DECL|method|getElementType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getElementType
parameter_list|()
block|{
if|if
condition|(
name|elementType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|elementTypeName
operator|!=
literal|null
condition|)
block|{
name|elementType
operator|=
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
name|elementTypeName
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|elementType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The ArtixDS Element class "
operator|+
name|elementTypeName
operator|+
literal|" is not on the classpath! Cannot use the dataFormat "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|elementType
return|;
block|}
DECL|method|setElementType (Class<?> elementType)
specifier|public
name|void
name|setElementType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|elementType
parameter_list|)
block|{
name|this
operator|.
name|elementType
operator|=
name|elementType
expr_stmt|;
block|}
DECL|method|getFormat ()
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
name|format
return|;
block|}
DECL|method|setFormat (String format)
specifier|public
name|void
name|setFormat
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|configureDataFormat (DataFormat dataFormat)
specifier|protected
name|void
name|configureDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|getElementType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
literal|"elementType"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|ArtixDSContentType
name|content
init|=
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
literal|"contentType"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

