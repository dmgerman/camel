begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Rest security OAuth2 definition  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"rest,security"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"oauth2"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RestSecurityOAuth2
specifier|public
class|class
name|RestSecurityOAuth2
extends|extends
name|RestSecurityDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|authorizationUrl
specifier|private
name|String
name|authorizationUrl
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|tokenUrl
specifier|private
name|String
name|tokenUrl
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|enums
operator|=
literal|"implicit,password,application,accessCode"
argument_list|)
DECL|field|flow
specifier|private
name|String
name|flow
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"scopes"
argument_list|)
DECL|field|scopes
specifier|private
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|scopes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|RestSecurityOAuth2 ()
specifier|public
name|RestSecurityOAuth2
parameter_list|()
block|{     }
DECL|method|RestSecurityOAuth2 (RestDefinition rest)
specifier|public
name|RestSecurityOAuth2
parameter_list|(
name|RestDefinition
name|rest
parameter_list|)
block|{
name|super
argument_list|(
name|rest
argument_list|)
expr_stmt|;
block|}
DECL|method|getAuthorizationUrl ()
specifier|public
name|String
name|getAuthorizationUrl
parameter_list|()
block|{
return|return
name|authorizationUrl
return|;
block|}
comment|/**      * The authorization URL to be used for this flow. This SHOULD be in the form of a URL.      * Required for implicit and access code flows      */
DECL|method|setAuthorizationUrl (String authorizationUrl)
specifier|public
name|void
name|setAuthorizationUrl
parameter_list|(
name|String
name|authorizationUrl
parameter_list|)
block|{
name|this
operator|.
name|authorizationUrl
operator|=
name|authorizationUrl
expr_stmt|;
block|}
DECL|method|getTokenUrl ()
specifier|public
name|String
name|getTokenUrl
parameter_list|()
block|{
return|return
name|tokenUrl
return|;
block|}
comment|/**      * The token URL to be used for this flow. This SHOULD be in the form of a URL.      * Required for password, application, and access code flows.      */
DECL|method|setTokenUrl (String tokenUrl)
specifier|public
name|void
name|setTokenUrl
parameter_list|(
name|String
name|tokenUrl
parameter_list|)
block|{
name|this
operator|.
name|tokenUrl
operator|=
name|tokenUrl
expr_stmt|;
block|}
DECL|method|getFlow ()
specifier|public
name|String
name|getFlow
parameter_list|()
block|{
return|return
name|flow
return|;
block|}
comment|/**      * The flow used by the OAuth2 security scheme.      * Valid values are "implicit", "password", "application" or "accessCode".      */
DECL|method|setFlow (String flow)
specifier|public
name|void
name|setFlow
parameter_list|(
name|String
name|flow
parameter_list|)
block|{
name|this
operator|.
name|flow
operator|=
name|flow
expr_stmt|;
block|}
DECL|method|getScopes ()
specifier|public
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|getScopes
parameter_list|()
block|{
return|return
name|scopes
return|;
block|}
comment|/**      * The available scopes for an OAuth2 security scheme      */
DECL|method|setScopes (List<RestPropertyDefinition> scopes)
specifier|public
name|void
name|setScopes
parameter_list|(
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|scopes
parameter_list|)
block|{
name|this
operator|.
name|scopes
operator|=
name|scopes
expr_stmt|;
block|}
DECL|method|authorizationUrl (String authorizationUrl)
specifier|public
name|RestSecurityOAuth2
name|authorizationUrl
parameter_list|(
name|String
name|authorizationUrl
parameter_list|)
block|{
name|setAuthorizationUrl
argument_list|(
name|authorizationUrl
argument_list|)
expr_stmt|;
name|setFlow
argument_list|(
literal|"implicit"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|password (String tokenUrl)
specifier|public
name|RestSecurityOAuth2
name|password
parameter_list|(
name|String
name|tokenUrl
parameter_list|)
block|{
name|setTokenUrl
argument_list|(
name|tokenUrl
argument_list|)
expr_stmt|;
name|setFlow
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|application (String tokenUrl)
specifier|public
name|RestSecurityOAuth2
name|application
parameter_list|(
name|String
name|tokenUrl
parameter_list|)
block|{
name|setTokenUrl
argument_list|(
name|tokenUrl
argument_list|)
expr_stmt|;
name|setFlow
argument_list|(
literal|"application"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|accessCode (String authorizationUrl, String tokenUrl)
specifier|public
name|RestSecurityOAuth2
name|accessCode
parameter_list|(
name|String
name|authorizationUrl
parameter_list|,
name|String
name|tokenUrl
parameter_list|)
block|{
name|setAuthorizationUrl
argument_list|(
name|authorizationUrl
argument_list|)
expr_stmt|;
name|setTokenUrl
argument_list|(
name|tokenUrl
argument_list|)
expr_stmt|;
name|setFlow
argument_list|(
literal|"accessCode"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withScope (String key, String description)
specifier|public
name|RestSecurityOAuth2
name|withScope
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|scopes
operator|.
name|add
argument_list|(
operator|new
name|RestPropertyDefinition
argument_list|(
name|key
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|end ()
specifier|public
name|RestSecuritiesDefinition
name|end
parameter_list|()
block|{
return|return
name|rest
operator|.
name|getSecurityDefinitions
argument_list|()
return|;
block|}
block|}
end_class

end_unit

