begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAnyAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ErrorHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DataFormatClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EnrichClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ProcessClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|CustomDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|LanguageExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|SimpleExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|InterceptEndpointProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|DefaultChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AsEndpointUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AsPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for processor types that most XML types extend.  *  * @version   */
end_comment

begin_class
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ProcessorDefinition
specifier|public
specifier|abstract
class|class
name|ProcessorDefinition
parameter_list|<
name|Type
extends|extends
name|ProcessorDefinition
parameter_list|<
name|Type
parameter_list|>
parameter_list|>
extends|extends
name|OptionalIdentifiedDefinition
argument_list|<
name|Type
argument_list|>
implements|implements
name|Block
implements|,
name|OtherAttributesAware
block|{
annotation|@
name|XmlTransient
DECL|field|COUNTER
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|inheritErrorHandler
specifier|protected
name|Boolean
name|inheritErrorHandler
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|blocks
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|parent
specifier|private
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|parent
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|interceptStrategies
specifier|private
specifier|final
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// use xs:any to support optional property placeholders
annotation|@
name|XmlAnyAttribute
DECL|field|otherAttributes
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|otherAttributes
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|index
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
DECL|method|ProcessorDefinition ()
specifier|protected
name|ProcessorDefinition
parameter_list|()
block|{
comment|// every time we create a definition we should inc the COUNTER counter
name|index
operator|=
name|COUNTER
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the unique index number for when this {@link ProcessorDefinition} was created by its constructor.      *<p/>      * This can be used to know the order in which the definition was created when assembled as a route.      *      * @return the index number      */
DECL|method|getIndex ()
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
comment|// else to use an optional attribute in JAXB2
DECL|method|getOutputs ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|getOutputs
parameter_list|()
function_decl|;
DECL|method|isOutputSupported ()
specifier|public
specifier|abstract
name|boolean
name|isOutputSupported
parameter_list|()
function_decl|;
comment|/**      * Whether this definition can only be added as top-level directly on the route itself (such as onException,onCompletion,intercept, etc.)      *<p/>      * If trying to add a top-level only definition to a nested output would fail in the {@link #addOutput(ProcessorDefinition)}      * method.      */
DECL|method|isTopLevelOnly ()
specifier|public
name|boolean
name|isTopLevelOnly
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Whether this model is abstract or not.      *<p/>      * An abstract model is something that is used for configuring cross cutting concerns such as      * error handling, transaction policies, interceptors etc.      *<p/>      * Regular definitions is what is part of the route, such as ToDefinition, WireTapDefinition and the likes.      *<p/>      * Will by default return<tt>false</tt> to indicate regular definition, so all the abstract definitions      * must override this method and return<tt>true</tt> instead.      *<p/>      * This information is used in camel-spring to let Camel work a bit on the model provided by JAXB from the      * Spring XML file. This is needed to handle those cross cutting concerns properly. The Java DSL does not      * have this issue as it can work this out directly using the fluent builder methods.      *      * @return<tt>true</tt> for abstract, otherwise<tt>false</tt> for regular.      */
DECL|method|isAbstract ()
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Whether this definition is wrapping the entire output.      *<p/>      * When a definition is wrapping the entire output, the check to ensure      * that a route definition is empty should be done on the wrapped output.      *      * @return<tt>true</tt> when wrapping the entire output.      */
DECL|method|isWrappingEntireOutput ()
specifier|public
name|boolean
name|isWrappingEntireOutput
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Override this in definition class and implement logic to create the processor      * based on the definition model.      */
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet for class: "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * Prefer to use {#link #createChildProcessor}.      */
DECL|method|createOutputsProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
init|=
name|getOutputs
argument_list|()
decl_stmt|;
return|return
name|createOutputsProcessor
argument_list|(
name|routeContext
argument_list|,
name|outputs
argument_list|)
return|;
block|}
comment|/**      * Creates the child processor (outputs) from the current definition      *      * @param routeContext   the route context      * @param mandatory      whether or not children is mandatory (ie the definition should have outputs)      * @return the created children, or<tt>null</tt> if definition had no output      * @throws Exception is thrown if error creating the child or if it was mandatory and there was no output defined on definition      */
DECL|method|createChildProcessor (RouteContext routeContext, boolean mandatory)
specifier|public
name|Processor
name|createChildProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|children
init|=
literal|null
decl_stmt|;
comment|// at first use custom factory
if|if
condition|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|children
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
name|this
argument_list|,
name|mandatory
argument_list|)
expr_stmt|;
block|}
comment|// fallback to default implementation if factory did not create the child
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
name|createOutputsProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|==
literal|null
operator|&&
name|mandatory
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Definition has no children on "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
name|children
return|;
block|}
annotation|@
name|Override
DECL|method|addOutput (ProcessorDefinition<?> output)
specifier|public
name|void
name|addOutput
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
parameter_list|)
block|{
if|if
condition|(
operator|!
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// let the Block deal with the output
name|Block
name|block
init|=
name|blocks
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|block
operator|.
name|addOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validate that top-level is only added on the route (eg top level)
name|boolean
name|parentIsRoute
init|=
name|RouteDefinition
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|isTopLevelOnly
argument_list|()
operator|&&
operator|!
name|parentIsRoute
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The output must be added as top-level on the route. Try moving "
operator|+
name|output
operator|+
literal|" to the top of route."
argument_list|)
throw|;
block|}
name|output
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|configureChild
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|clearOutput ()
specifier|public
name|void
name|clearOutput
parameter_list|()
block|{
name|getOutputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|addRoutes (RouteContext routeContext, Collection<Route> routes)
specifier|public
name|void
name|addRoutes
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|makeProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
comment|// no processor to add
return|return;
block|}
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isRouteAdded
argument_list|()
condition|)
block|{
name|boolean
name|endpointInterceptor
init|=
literal|false
decl_stmt|;
comment|// are we routing to an endpoint interceptor, if so we should not add it as an event driven
comment|// processor as we use the producer to trigger the interceptor
if|if
condition|(
name|processor
operator|instanceof
name|Channel
condition|)
block|{
name|Channel
name|channel
init|=
operator|(
name|Channel
operator|)
name|processor
decl_stmt|;
name|Processor
name|next
init|=
name|channel
operator|.
name|getNextProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|InterceptEndpointProcessor
condition|)
block|{
name|endpointInterceptor
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// only add regular processors as event driven
if|if
condition|(
name|endpointInterceptor
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Endpoint interceptor should not be added as an event driven consumer route: {}"
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Adding event driven processor: {}"
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|addEventDrivenProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Wraps the child processor in whatever necessary interceptors and error handlers      */
DECL|method|wrapProcessor (RouteContext routeContext, Processor processor)
specifier|public
name|Processor
name|wrapProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// dont double wrap
if|if
condition|(
name|processor
operator|instanceof
name|Channel
condition|)
block|{
return|return
name|processor
return|;
block|}
return|return
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|wrapChannel (RouteContext routeContext, Processor processor, ProcessorDefinition<?> child)
specifier|protected
name|Processor
name|wrapChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|child
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|,
name|child
argument_list|,
name|isInheritErrorHandler
argument_list|()
argument_list|)
return|;
block|}
DECL|method|wrapChannel (RouteContext routeContext, Processor processor, ProcessorDefinition<?> child, Boolean inheritErrorHandler)
specifier|protected
name|Processor
name|wrapChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|child
parameter_list|,
name|Boolean
name|inheritErrorHandler
parameter_list|)
throws|throws
name|Exception
block|{
comment|// put a channel in between this and each output to control the route flow logic
name|ModelChannel
name|channel
init|=
name|createChannel
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
name|channel
operator|.
name|setNextProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
comment|// add interceptor strategies to the channel must be in this order: camel context, route context, local
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|routeContext
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|this
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
comment|// must do this ugly cast to avoid compiler error on AIX/HP-UX
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|defn
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|this
decl_stmt|;
comment|// set the child before init the channel
name|channel
operator|.
name|setChildDefinition
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|channel
operator|.
name|initChannel
argument_list|(
name|defn
argument_list|,
name|routeContext
argument_list|)
expr_stmt|;
comment|// set the error handler, must be done after init as we can set the error handler as first in the chain
if|if
condition|(
name|defn
operator|instanceof
name|TryDefinition
operator|||
name|defn
operator|instanceof
name|CatchDefinition
operator|||
name|defn
operator|instanceof
name|FinallyDefinition
condition|)
block|{
comment|// do not use error handler for try .. catch .. finally blocks as it will handle errors itself
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of doTry .. doCatch .. doFinally so no error handler is applied"
argument_list|,
name|defn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|TryDefinition
operator|.
name|class
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|CatchDefinition
operator|.
name|class
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|FinallyDefinition
operator|.
name|class
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// do not use error handler for try .. catch .. finally blocks as it will handle errors itself
comment|// by checking that any of our parent(s) is not a try .. catch or finally type
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of doTry .. doCatch .. doFinally so no error handler is applied"
argument_list|,
name|defn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defn
operator|instanceof
name|OnExceptionDefinition
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|OnExceptionDefinition
operator|.
name|class
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of OnException so no error handler is applied"
argument_list|,
name|defn
argument_list|)
expr_stmt|;
comment|// do not use error handler for onExceptions blocks as it will handle errors itself
block|}
elseif|else
if|if
condition|(
name|defn
operator|instanceof
name|HystrixDefinition
operator|||
name|ProcessorDefinitionHelper
operator|.
name|isParentOfType
argument_list|(
name|HystrixDefinition
operator|.
name|class
argument_list|,
name|defn
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// do not use error handler for hystrix as it offers circuit breaking with fallback for its outputs
comment|// however if inherit error handler is enabled, we need to wrap an error handler on the hystrix parent
if|if
condition|(
name|inheritErrorHandler
operator|!=
literal|null
operator|&&
name|inheritErrorHandler
operator|&&
name|child
operator|==
literal|null
condition|)
block|{
comment|// only wrap the parent (not the children of the hystrix)
name|wrapChannelInErrorHandler
argument_list|(
name|channel
argument_list|,
name|routeContext
argument_list|,
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of HystrixCircuitBreaker so no error handler is applied"
argument_list|,
name|defn
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|defn
operator|instanceof
name|MulticastDefinition
condition|)
block|{
comment|// do not use error handler for multicast as it offers fine grained error handlers for its outputs
comment|// however if share unit of work is enabled, we need to wrap an error handler on the multicast parent
name|MulticastDefinition
name|def
init|=
operator|(
name|MulticastDefinition
operator|)
name|defn
decl_stmt|;
name|boolean
name|isShareUnitOfWork
init|=
name|def
operator|.
name|getShareUnitOfWork
argument_list|()
operator|!=
literal|null
operator|&&
name|def
operator|.
name|getShareUnitOfWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|isShareUnitOfWork
operator|&&
name|child
operator|==
literal|null
condition|)
block|{
comment|// only wrap the parent (not the children of the multicast)
name|wrapChannelInErrorHandler
argument_list|(
name|channel
argument_list|,
name|routeContext
argument_list|,
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is part of multicast which have special error handling so no error handler is applied"
argument_list|,
name|defn
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// use error handler by default or if configured to do so
name|wrapChannelInErrorHandler
argument_list|(
name|channel
argument_list|,
name|routeContext
argument_list|,
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
comment|// do post init at the end
name|channel
operator|.
name|postInitChannel
argument_list|(
name|defn
argument_list|,
name|routeContext
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"{} wrapped in Channel: {}"
argument_list|,
name|defn
argument_list|,
name|channel
argument_list|)
expr_stmt|;
return|return
name|channel
return|;
block|}
comment|/**      * Wraps the given channel in error handler (if error handler is inherited)      *      * @param channel             the channel      * @param routeContext        the route context      * @param inheritErrorHandler whether to inherit error handler      * @throws Exception can be thrown if failed to create error handler builder      */
DECL|method|wrapChannelInErrorHandler (Channel channel, RouteContext routeContext, Boolean inheritErrorHandler)
specifier|private
name|void
name|wrapChannelInErrorHandler
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|RouteContext
name|routeContext
parameter_list|,
name|Boolean
name|inheritErrorHandler
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|inheritErrorHandler
operator|==
literal|null
operator|||
name|inheritErrorHandler
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"{} is configured to inheritErrorHandler"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Processor
name|output
init|=
name|channel
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|Processor
name|errorHandler
init|=
name|wrapInErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// set error handler on channel
name|channel
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} is configured to not inheritErrorHandler."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Wraps the given output in an error handler      *      * @param routeContext the route context      * @param output the output      * @return the output wrapped with the error handler      * @throws Exception can be thrown if failed to create error handler builder      */
DECL|method|wrapInErrorHandler (RouteContext routeContext, Processor output)
specifier|protected
name|Processor
name|wrapInErrorHandler
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|output
parameter_list|)
throws|throws
name|Exception
block|{
name|ErrorHandlerFactory
name|builder
init|=
name|routeContext
operator|.
name|getRoute
argument_list|()
operator|.
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
comment|// create error handler
name|Processor
name|errorHandler
init|=
name|builder
operator|.
name|createErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// invoke lifecycles so we can manage this error handler builder
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
name|strategy
operator|.
name|onErrorHandlerAdd
argument_list|(
name|routeContext
argument_list|,
name|errorHandler
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|errorHandler
return|;
block|}
comment|/**      * Adds the given list of interceptors to the channel.      *      * @param routeContext  the route context      * @param channel       the channel to add strategies      * @param strategies    list of strategies to add.      */
DECL|method|addInterceptStrategies (RouteContext routeContext, Channel channel, List<InterceptStrategy> strategies)
specifier|protected
name|void
name|addInterceptStrategies
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|strategies
parameter_list|)
block|{
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|strategies
control|)
block|{
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isHandleFault
argument_list|()
operator|&&
name|strategy
operator|instanceof
name|HandleFault
condition|)
block|{
comment|// handle fault is disabled so we should not add it
continue|continue;
block|}
comment|// add strategy
name|channel
operator|.
name|addInterceptStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new instance of some kind of composite processor which defaults      * to using a {@link Pipeline} but derived classes could change the behaviour      */
DECL|method|createCompositeProcessor (RouteContext routeContext, List<Processor> list)
specifier|protected
name|Processor
name|createCompositeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|List
argument_list|<
name|Processor
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Pipeline
operator|.
name|newInstance
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/**      * Creates a new instance of the {@link Channel}.      */
DECL|method|createChannel (RouteContext routeContext)
specifier|protected
name|ModelChannel
name|createChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultChannel
argument_list|()
return|;
block|}
DECL|method|createOutputsProcessor (RouteContext routeContext, Collection<ProcessorDefinition<?>> outputs)
specifier|protected
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
comment|// We will save list of actions to restore the outputs back to the original state.
name|Runnable
name|propertyPlaceholdersChangeReverter
init|=
name|ProcessorDefinitionHelper
operator|.
name|createPropertyPlaceholdersChangeReverter
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|createOutputsProcessorImpl
argument_list|(
name|routeContext
argument_list|,
name|outputs
argument_list|)
return|;
block|}
finally|finally
block|{
name|propertyPlaceholdersChangeReverter
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createOutputsProcessorImpl (RouteContext routeContext, Collection<ProcessorDefinition<?>> outputs)
specifier|protected
name|Processor
name|createOutputsProcessorImpl
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Processor
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
range|:
name|outputs
control|)
block|{
comment|// allow any custom logic before we create the processor
name|output
operator|.
name|preCreateProcessor
argument_list|()
expr_stmt|;
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|// also resolve properties and constant fields on embedded expressions
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|me
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|output
decl_stmt|;
if|if
condition|(
name|me
operator|instanceof
name|ExpressionNode
condition|)
block|{
name|ExpressionNode
name|exp
init|=
operator|(
name|ExpressionNode
operator|)
name|me
decl_stmt|;
name|ExpressionDefinition
name|expressionDefinition
init|=
name|exp
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|expressionDefinition
operator|!=
literal|null
condition|)
block|{
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|expressionDefinition
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|expressionDefinition
argument_list|)
expr_stmt|;
block|}
block|}
name|Processor
name|processor
init|=
name|createProcessor
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// inject id
if|if
condition|(
name|processor
operator|instanceof
name|IdAware
condition|)
block|{
name|String
name|id
init|=
name|output
operator|.
name|idOrCreate
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|IdAware
operator|)
name|processor
operator|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|instanceof
name|Channel
operator|&&
name|processor
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Processor
name|channel
init|=
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
comment|// if more than one output wrap than in a composite processor else just keep it as is
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|processor
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|=
name|createCompositeProcessor
argument_list|(
name|routeContext
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processor
return|;
block|}
DECL|method|createProcessor (RouteContext routeContext, ProcessorDefinition<?> output)
specifier|protected
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
comment|// at first use custom factory
if|if
condition|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processor
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|// fallback to default implementation if factory did not create the processor
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|processor
operator|=
name|output
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
return|return
name|processor
return|;
block|}
comment|/**      * Creates the processor and wraps it in any necessary interceptors and error handlers      */
DECL|method|makeProcessor (RouteContext routeContext)
specifier|protected
name|Processor
name|makeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// We will save list of actions to restore the definition back to the original state.
name|Runnable
name|propertyPlaceholdersChangeReverter
init|=
name|ProcessorDefinitionHelper
operator|.
name|createPropertyPlaceholdersChangeReverter
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|makeProcessorImpl
argument_list|(
name|routeContext
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// Lets restore
name|propertyPlaceholdersChangeReverter
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|makeProcessorImpl (RouteContext routeContext)
specifier|private
name|Processor
name|makeProcessorImpl
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
comment|// allow any custom logic before we create the processor
name|preCreateProcessor
argument_list|()
expr_stmt|;
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// also resolve properties and constant fields on embedded expressions
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|me
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|this
decl_stmt|;
if|if
condition|(
name|me
operator|instanceof
name|ExpressionNode
condition|)
block|{
name|ExpressionNode
name|exp
init|=
operator|(
name|ExpressionNode
operator|)
name|me
decl_stmt|;
name|ExpressionDefinition
name|expressionDefinition
init|=
name|exp
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|expressionDefinition
operator|!=
literal|null
condition|)
block|{
comment|// resolve properties before we create the processor
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|expressionDefinition
argument_list|)
expr_stmt|;
comment|// resolve constant fields (eg Exchange.FILE_NAME)
name|ProcessorDefinitionHelper
operator|.
name|resolveKnownConstantFields
argument_list|(
name|expressionDefinition
argument_list|)
expr_stmt|;
block|}
block|}
comment|// at first use custom factory
if|if
condition|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processor
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getProcessorFactory
argument_list|()
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// fallback to default implementation if factory did not create the processor
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|processor
operator|=
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
comment|// inject id
if|if
condition|(
name|processor
operator|instanceof
name|IdAware
condition|)
block|{
name|String
name|id
init|=
name|this
operator|.
name|idOrCreate
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|IdAware
operator|)
name|processor
operator|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
comment|// no processor to make
return|return
literal|null
return|;
block|}
return|return
name|wrapProcessor
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|/**      * Strategy to execute any custom logic before the {@link Processor} is created.      */
DECL|method|preCreateProcessor ()
specifier|protected
name|void
name|preCreateProcessor
parameter_list|()
block|{
comment|// noop
block|}
comment|/**      * Strategy for children to do any custom configuration      *      * @param output the child to be added as output to this      */
DECL|method|configureChild (ProcessorDefinition<?> output)
specifier|public
name|void
name|configureChild
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
parameter_list|)
block|{
comment|// noop
block|}
comment|// Fluent API
comment|// -------------------------------------------------------------------------
comment|/**      * Adds a placeholder for the given option      *<p/>      * Requires using the {@link org.apache.camel.component.properties.PropertiesComponent}      *      * @param option  the name of the option      * @param key     the placeholder key      * @return the builder      */
DECL|method|placeholder (String option, String key)
specifier|public
name|Type
name|placeholder
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|Constants
operator|.
name|PLACEHOLDER_QNAME
argument_list|,
name|option
argument_list|)
decl_stmt|;
return|return
name|attribute
argument_list|(
name|name
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/**      * Adds an optional attribute      *      * @param name    the name of the attribute      * @param value   the value      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|attribute (QName name, Object value)
specifier|public
name|Type
name|attribute
parameter_list|(
name|QName
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|otherAttributes
operator|==
literal|null
condition|)
block|{
name|otherAttributes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|otherAttributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint      *      * @param uri  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (@sEndpointUri String uri)
specifier|public
name|Type
name|to
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given dynamic endpoint      *      * @param uri  the dynamic endpoint to send to (resolved using simple language by default)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toD (@sEndpointUri String uri)
specifier|public
name|Type
name|toD
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|ToDynamicDefinition
name|answer
init|=
operator|new
name|ToDynamicDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given dynamic endpoint      *      * @param uri  the dynamic endpoint to send to (resolved using simple language by default)      * @param cacheSize sets the maximum size used by the {@link org.apache.camel.impl.ConsumerCache} which is used to cache and reuse producers.      *      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toD (@sEndpointUri String uri, int cacheSize)
specifier|public
name|Type
name|toD
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|,
name|int
name|cacheSize
parameter_list|)
block|{
name|ToDynamicDefinition
name|answer
init|=
operator|new
name|ToDynamicDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setCacheSize
argument_list|(
name|cacheSize
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given dynamic endpoint      *      * @param uri  the dynamic endpoint to send to (resolved using simple language by default)      * @param ignoreInvalidEndpoint ignore the invalidate endpoint exception when try to create a producer with that endpoint      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toD (@sEndpointUri String uri, boolean ignoreInvalidEndpoint)
specifier|public
name|Type
name|toD
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|,
name|boolean
name|ignoreInvalidEndpoint
parameter_list|)
block|{
name|ToDynamicDefinition
name|answer
init|=
operator|new
name|ToDynamicDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setIgnoreInvalidEndpoint
argument_list|(
name|ignoreInvalidEndpoint
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint      *      * @param uri  the String formatted endpoint uri to send to      * @param args arguments for the string formatting of the uri      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toF (@sEndpointUri String uri, Object... args)
specifier|public
name|Type
name|toF
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|uri
argument_list|,
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Calls the service      *      * @return the builder      */
DECL|method|serviceCall ()
specifier|public
name|ServiceCallDefinition
name|serviceCall
parameter_list|()
block|{
name|ServiceCallDefinition
name|answer
init|=
operator|new
name|ServiceCallDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Calls the service      *      * @param name the service name      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|serviceCall (String name)
specifier|public
name|Type
name|serviceCall
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ServiceCallDefinition
name|answer
init|=
operator|new
name|ServiceCallDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Calls the service      *      * @param name the service name      * @param uri  the endpoint uri to use for calling the service      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|serviceCall (String name, @AsEndpointUri String uri)
specifier|public
name|Type
name|serviceCall
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|ServiceCallDefinition
name|answer
init|=
operator|new
name|ServiceCallDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint      *      * @param endpoint  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (Endpoint endpoint)
specifier|public
name|Type
name|to
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange with certain exchange pattern to the given endpoint      *<p/>      * Notice the existing MEP is preserved      *      * @param pattern the pattern to use for the message exchange      * @param uri  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, @AsEndpointUri String uri)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange with certain exchange pattern to the given endpoint      *<p/>      * Notice the existing MEP is preserved      *      * @param pattern the pattern to use for the message exchange      * @param endpoint  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, Endpoint endpoint)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param uris  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (@sEndpointUri String... uris)
specifier|public
name|Type
name|to
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (Endpoint... endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *<p/>      * Notice the existing MEP is preserved      *      * @param pattern the pattern to use for the message exchanges      * @param uris  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, @AsEndpointUri String... uris)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
annotation|@
name|AsEndpointUri
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *<p/>      * Notice the existing MEP is preserved      *      * @param pattern the pattern to use for the message exchanges      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, Endpoint... endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param pattern the pattern to use for the message exchanges      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exchange-pattern.html">ExchangePattern:</a>      * set the {@link ExchangePattern} into the {@link Exchange}.      *<p/>      * The pattern set on the {@link Exchange} will be changed from this point going foward.      *      * @param exchangePattern  instance of {@link ExchangePattern}      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setExchangePattern (ExchangePattern exchangePattern)
specifier|public
name|Type
name|setExchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|SetExchangePatternDefinition
argument_list|(
name|exchangePattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param uri The endpoint uri which is used for sending the exchange      * @return the builder      */
DECL|method|inOnly (@sEndpointUri String uri)
specifier|public
name|Type
name|inOnly
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|uri
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or       *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param endpoint The endpoint which is used for sending the exchange      * @return the builder      */
DECL|method|inOnly (Endpoint endpoint)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (@sEndpointUri String... uris)
specifier|public
name|Type
name|inOnly
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|uris
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (@sEndpointUri Endpoint... endpoints)
specifier|public
name|Type
name|inOnly
parameter_list|(
annotation|@
name|AsEndpointUri
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param uri The endpoint uri which is used for sending the exchange      * @return the builder      */
DECL|method|inOut (@sEndpointUri String uri)
specifier|public
name|Type
name|inOut
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|uri
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param endpoint The endpoint which is used for sending the exchange      * @return the builder      */
DECL|method|inOut (Endpoint endpoint)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (@sEndpointUri String... uris)
specifier|public
name|Type
name|inOut
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|uris
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (Endpoint... endpoints)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *<p/>      * Notice the existing MEP is restored after the message has been sent to the given endpoint.      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sets the id of this node.      *<p/>      *<b>Important:</b> If you want to set the id of the route,      * then you<b>must</b> use {@link #routeId(String)} instead.      *      * @param id  the id      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|id (String id)
specifier|public
name|Type
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|isOutputSupported
argument_list|()
operator|&&
name|getOutputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// set id on this
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set it on last output as this is what the user means to do
comment|// for Block(s) with non empty getOutputs() the id probably refers
comment|//  to the last definition in the current Block
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
init|=
name|getOutputs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|blocks
operator|.
name|getLast
argument_list|()
operator|instanceof
name|ProcessorDefinition
condition|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|block
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|blocks
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|getOutputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|outputs
operator|=
name|block
operator|.
name|getOutputs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|getOutputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|outputs
operator|.
name|get
argument_list|(
name|outputs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the output could be empty
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Set the route id for this route.      *<p/>      *<b>Important:</b> Each route in the same {@link org.apache.camel.CamelContext} must have an<b>unique</b> route id.      * If you use the API from {@link org.apache.camel.CamelContext} or {@link ModelCamelContext} to add routes, then any      * new routes which has a route id that matches an old route, then the old route is replaced by the new route.      *      * @param id  the route id, should be unique      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|routeId (String id)
specifier|public
name|Type
name|routeId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
name|RouteDefinition
name|route
init|=
name|ProcessorDefinitionHelper
operator|.
name|getRoute
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|route
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Set the route group for this route.      *      * @param group  the route group      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|routeGroup (String group)
specifier|public
name|Type
name|routeGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
name|RouteDefinition
name|route
init|=
name|ProcessorDefinitionHelper
operator|.
name|getRoute
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|route
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Set the route description for this route      *      * @param description the route description      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|routeDescription (String description)
specifier|public
name|Type
name|routeDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
name|RouteDefinition
name|route
init|=
name|ProcessorDefinitionHelper
operator|.
name|getRoute
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|DescriptionDefinition
name|desc
init|=
operator|new
name|DescriptionDefinition
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setText
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|route
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @return the builder      */
DECL|method|multicast ()
specifier|public
name|MulticastDefinition
name|multicast
parameter_list|()
block|{
name|MulticastDefinition
name|answer
init|=
operator|new
name|MulticastDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @param aggregationStrategy the strategy used to aggregate responses for      *          every part      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @return the builder      */
DECL|method|multicast (AggregationStrategy aggregationStrategy, boolean parallelProcessing)
specifier|public
name|MulticastDefinition
name|multicast
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|MulticastDefinition
name|answer
init|=
operator|new
name|MulticastDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @param aggregationStrategy the strategy used to aggregate responses for every part      * @return the builder      */
DECL|method|multicast (AggregationStrategy aggregationStrategy)
specifier|public
name|MulticastDefinition
name|multicast
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|MulticastDefinition
name|answer
init|=
operator|new
name|MulticastDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @return the builder      */
DECL|method|pipeline ()
specifier|public
name|PipelineDefinition
name|pipeline
parameter_list|()
block|{
name|PipelineDefinition
name|answer
init|=
operator|new
name|PipelineDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param uris  list of endpoints      * @return the builder      */
DECL|method|pipeline (@sEndpointUri String... uris)
specifier|public
name|Type
name|pipeline
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
modifier|...
name|uris
parameter_list|)
block|{
name|PipelineDefinition
name|answer
init|=
operator|new
name|PipelineDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|to
argument_list|(
name|uris
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param endpoints  list of endpoints      * @return the builder      */
DECL|method|pipeline (Endpoint... endpoints)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
name|PipelineDefinition
name|answer
init|=
operator|new
name|PipelineDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|to
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param endpoints  list of endpoints      * @return the builder      */
DECL|method|pipeline (Collection<Endpoint> endpoints)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
name|PipelineDefinition
name|answer
init|=
operator|new
name|PipelineDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|to
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Continues processing the {@link org.apache.camel.Exchange} using asynchronous routing engine.      *      * @return the builder      */
DECL|method|threads ()
specifier|public
name|ThreadsDefinition
name|threads
parameter_list|()
block|{
name|ThreadsDefinition
name|answer
init|=
operator|new
name|ThreadsDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Continues processing the {@link org.apache.camel.Exchange} using asynchronous routing engine.      *      * @param poolSize the core pool size      * @return the builder      */
DECL|method|threads (int poolSize)
specifier|public
name|ThreadsDefinition
name|threads
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|ThreadsDefinition
name|answer
init|=
operator|new
name|ThreadsDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Continues processing the {@link org.apache.camel.Exchange} using asynchronous routing engine.      *      * @param poolSize    the core pool size      * @param maxPoolSize the maximum pool size      * @return the builder      */
DECL|method|threads (int poolSize, int maxPoolSize)
specifier|public
name|ThreadsDefinition
name|threads
parameter_list|(
name|int
name|poolSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|)
block|{
name|ThreadsDefinition
name|answer
init|=
operator|new
name|ThreadsDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMaxPoolSize
argument_list|(
name|maxPoolSize
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Continues processing the {@link org.apache.camel.Exchange} using asynchronous routing engine.      *      * @param poolSize    the core pool size      * @param maxPoolSize the maximum pool size      * @param threadName the thread pool name      * @return the builder      */
DECL|method|threads (int poolSize, int maxPoolSize, String threadName)
specifier|public
name|ThreadsDefinition
name|threads
parameter_list|(
name|int
name|poolSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|,
name|String
name|threadName
parameter_list|)
block|{
name|ThreadsDefinition
name|answer
init|=
operator|new
name|ThreadsDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMaxPoolSize
argument_list|(
name|maxPoolSize
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setThreadName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Ends the current block      *      * @return the builder      */
DECL|method|end ()
specifier|public
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|end
parameter_list|()
block|{
comment|// must do this ugly cast to avoid compiler error on AIX/HP-UX
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|defn
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|this
decl_stmt|;
comment|// when using choice .. when .. otherwise - doTry .. doCatch .. doFinally we should always
comment|// end the choice/try definition to avoid having to use 2 x end() in the route
comment|// this is counter intuitive for end users
comment|// TODO (camel-3.0): this should be done inside of TryDefinition or even better
comment|//  in Block(s) in general, but the api needs to be revisited for that.
if|if
condition|(
name|defn
operator|instanceof
name|TryDefinition
operator|||
name|defn
operator|instanceof
name|ChoiceDefinition
condition|)
block|{
name|popBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|endParent
argument_list|()
return|;
block|}
return|return
name|parent
operator|.
name|endParent
argument_list|()
return|;
block|}
name|popBlock
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|endParent
argument_list|()
return|;
block|}
comment|/**      * Strategy to allow {@link ProcessorDefinition}s to have special logic when using end() in the DSL      * to return back to the intended parent.      *<p/>      * For example a content based router we return back to the {@link ChoiceDefinition} when we end()      * from a {@link WhenDefinition}.      *      * @return the end      */
DECL|method|endParent ()
specifier|public
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|endParent
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**      * Ends the current block and returns back to the {@link ChoiceDefinition choice()} DSL.      *<p/>      *<b>Important:</b> If you want to end the entire choice block, then use {@link #end()} instead.      * The purpose of {@link #endChoice()} is to return<i>control</i> back to the {@link ChoiceDefinition choice()} DSL,      * so you can add subsequent<tt>when</tt> and<tt>otherwise</tt> to the choice. There can be situations where      * you would need to use {@link #endChoice()} often when you add additional EIPs inside the<tt>when</tt>'s, and      * the DSL<t>looses</t> scope when using a regular {@link #end()}, and you would need to use this {@link #endChoice()}      * to return back the scope to the {@link ChoiceDefinition choice()} DSL.      *<p/>      * For more details and examples see also this FAQ:      *<a href="http://camel.apache.org/why-can-i-not-use-when-or-otherwise-in-a-java-camel-route.html">Why can I not use when or otherwise in a Java Camel route</a>.      *      * @return the choice builder      */
DECL|method|endChoice ()
specifier|public
name|ChoiceDefinition
name|endChoice
parameter_list|()
block|{
comment|// are we nested choice?
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|getParent
argument_list|()
operator|instanceof
name|WhenDefinition
condition|)
block|{
return|return
operator|(
name|ChoiceDefinition
operator|)
name|def
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
return|;
block|}
comment|// are we already a choice?
if|if
condition|(
name|def
operator|instanceof
name|ChoiceDefinition
condition|)
block|{
return|return
operator|(
name|ChoiceDefinition
operator|)
name|def
return|;
block|}
comment|// okay end this and get back to the choice
name|def
operator|=
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|def
operator|instanceof
name|WhenDefinition
condition|)
block|{
return|return
operator|(
name|ChoiceDefinition
operator|)
name|def
operator|.
name|getParent
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|def
operator|instanceof
name|OtherwiseDefinition
condition|)
block|{
return|return
operator|(
name|ChoiceDefinition
operator|)
name|def
operator|.
name|getParent
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|ChoiceDefinition
operator|)
name|def
return|;
block|}
block|}
comment|/**      * Ends the current block and returns back to the {@link org.apache.camel.model.rest.RestDefinition rest()} DSL.      *      * @return the builder      */
DECL|method|endRest ()
specifier|public
name|RestDefinition
name|endRest
parameter_list|()
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
name|RouteDefinition
name|route
init|=
name|ProcessorDefinitionHelper
operator|.
name|getRoute
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
return|return
name|route
operator|.
name|getRestDefinition
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find RouteDefinition to allow endRest"
argument_list|)
throw|;
block|}
comment|/**      * Ends the current block and returns back to the {@link TryDefinition doTry()} DSL.      *      * @return the builder      */
DECL|method|endDoTry ()
specifier|public
name|TryDefinition
name|endDoTry
parameter_list|()
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
comment|// are we already a try?
if|if
condition|(
name|def
operator|instanceof
name|TryDefinition
condition|)
block|{
return|return
operator|(
name|TryDefinition
operator|)
name|def
return|;
block|}
comment|// okay end this and get back to the try
name|def
operator|=
name|end
argument_list|()
expr_stmt|;
return|return
operator|(
name|TryDefinition
operator|)
name|def
return|;
block|}
comment|/**      * Ends the current block and returns back to the {@link HystrixDefinition hystrix()} DSL.      *      * @return the builder      */
DECL|method|endHystrix ()
specifier|public
name|HystrixDefinition
name|endHystrix
parameter_list|()
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
comment|// are we already a try?
if|if
condition|(
name|def
operator|instanceof
name|HystrixDefinition
condition|)
block|{
return|return
operator|(
name|HystrixDefinition
operator|)
name|def
return|;
block|}
comment|// okay end this and get back to the try
name|def
operator|=
name|end
argument_list|()
expr_stmt|;
return|return
operator|(
name|HystrixDefinition
operator|)
name|def
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer} using a fluent builder.      */
DECL|method|idempotentConsumer ()
specifier|public
name|ExpressionClause
argument_list|<
name|IdempotentConsumerDefinition
argument_list|>
name|idempotentConsumer
parameter_list|()
block|{
name|IdempotentConsumerDefinition
name|answer
init|=
operator|new
name|IdempotentConsumerDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *      * @param messageIdExpression  expression to test of duplicate messages      * @return the builder      */
DECL|method|idempotentConsumer (Expression messageIdExpression)
specifier|public
name|IdempotentConsumerDefinition
name|idempotentConsumer
parameter_list|(
name|Expression
name|messageIdExpression
parameter_list|)
block|{
name|IdempotentConsumerDefinition
name|answer
init|=
operator|new
name|IdempotentConsumerDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setExpression
argument_list|(
name|ExpressionNodeHelper
operator|.
name|toExpressionDefinition
argument_list|(
name|messageIdExpression
argument_list|)
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *      * @param messageIdExpression  expression to test of duplicate messages      * @param idempotentRepository  the repository to use for duplicate check      * @return the builder      */
DECL|method|idempotentConsumer (Expression messageIdExpression, IdempotentRepository<?> idempotentRepository)
specifier|public
name|IdempotentConsumerDefinition
name|idempotentConsumer
parameter_list|(
name|Expression
name|messageIdExpression
parameter_list|,
name|IdempotentRepository
argument_list|<
name|?
argument_list|>
name|idempotentRepository
parameter_list|)
block|{
name|IdempotentConsumerDefinition
name|answer
init|=
operator|new
name|IdempotentConsumerDefinition
argument_list|(
name|messageIdExpression
argument_list|,
name|idempotentRepository
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @return the clause used to create the filter expression      */
annotation|@
name|AsPredicate
DECL|method|filter ()
specifier|public
name|ExpressionClause
argument_list|<
name|?
extends|extends
name|FilterDefinition
argument_list|>
name|filter
parameter_list|()
block|{
name|FilterDefinition
name|filter
init|=
operator|new
name|FilterDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|filter
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate which is applied and only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param predicate  predicate to use      * @return the builder       */
DECL|method|filter (@sPredicate Predicate predicate)
specifier|public
name|FilterDefinition
name|filter
parameter_list|(
annotation|@
name|AsPredicate
name|Predicate
name|predicate
parameter_list|)
block|{
name|FilterDefinition
name|filter
init|=
operator|new
name|FilterDefinition
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param expression  the predicate expression to use      * @return the builder      */
DECL|method|filter (@sPredicate ExpressionDefinition expression)
specifier|public
name|FilterDefinition
name|filter
parameter_list|(
annotation|@
name|AsPredicate
name|ExpressionDefinition
name|expression
parameter_list|)
block|{
name|FilterDefinition
name|filter
init|=
operator|new
name|FilterDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate language expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param language     language for expression      * @param expression   the expression      * @return the builder      */
DECL|method|filter (String language, @AsPredicate String expression)
specifier|public
name|FilterDefinition
name|filter
parameter_list|(
name|String
name|language
parameter_list|,
annotation|@
name|AsPredicate
name|String
name|expression
parameter_list|)
block|{
return|return
name|filter
argument_list|(
operator|new
name|LanguageExpression
argument_list|(
name|language
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates a validation expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination.      * Otherwise a {@link org.apache.camel.processor.validation.PredicateValidationException} is thrown.      *      * @param expression  the expression      * @return the builder      */
DECL|method|validate (@sPredicate Expression expression)
specifier|public
name|ValidateDefinition
name|validate
parameter_list|(
annotation|@
name|AsPredicate
name|Expression
name|expression
parameter_list|)
block|{
name|ValidateDefinition
name|answer
init|=
operator|new
name|ValidateDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a validation expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination.      * Otherwise a {@link org.apache.camel.processor.validation.PredicateValidationException} is thrown.      *      * @param predicate  the predicate      * @return the builder      */
DECL|method|validate (@sPredicate Predicate predicate)
specifier|public
name|ValidateDefinition
name|validate
parameter_list|(
annotation|@
name|AsPredicate
name|Predicate
name|predicate
parameter_list|)
block|{
name|ValidateDefinition
name|answer
init|=
operator|new
name|ValidateDefinition
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a validation expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination.      * Otherwise a {@link org.apache.camel.processor.validation.PredicateValidationException} is thrown.      *      * @return the builder      */
annotation|@
name|AsPredicate
DECL|method|validate ()
specifier|public
name|ExpressionClause
argument_list|<
name|ValidateDefinition
argument_list|>
name|validate
parameter_list|()
block|{
name|ValidateDefinition
name|answer
init|=
operator|new
name|ValidateDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      * Creates a Hystrix Circuit Breaker EIP.      *<p/>      * This requires having camel-hystrix on the classpath.      *      * @return  the builder      */
DECL|method|hystrix ()
specifier|public
name|HystrixDefinition
name|hystrix
parameter_list|()
block|{
name|HystrixDefinition
name|answer
init|=
operator|new
name|HystrixDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/load-balancer.html">Load Balancer EIP:</a>      * Creates a loadbalance      *      * @return  the builder      */
DECL|method|loadBalance ()
specifier|public
name|LoadBalanceDefinition
name|loadBalance
parameter_list|()
block|{
name|LoadBalanceDefinition
name|answer
init|=
operator|new
name|LoadBalanceDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/load-balancer.html">Load Balancer EIP:</a>      * Creates a loadbalance      *      * @param loadBalancer a custom load balancer to use      * @return  the builder      */
DECL|method|loadBalance (LoadBalancer loadBalancer)
specifier|public
name|LoadBalanceDefinition
name|loadBalance
parameter_list|(
name|LoadBalancer
name|loadBalancer
parameter_list|)
block|{
name|LoadBalanceDefinition
name|answer
init|=
operator|new
name|LoadBalanceDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
operator|.
name|loadBalance
argument_list|(
name|loadBalancer
argument_list|)
return|;
block|}
comment|/**      * Creates a log message to be logged at INFO level.      *      * @param message the log message, (you can use {@link org.apache.camel.language.simple.SimpleLanguage} syntax)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|log (String message)
specifier|public
name|Type
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|LogDefinition
name|answer
init|=
operator|new
name|LogDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Creates a log message to be logged at the given level.      *      * @param loggingLevel the logging level to use      * @param message the log message, (you can use {@link org.apache.camel.language.simple.SimpleLanguage} syntax)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|log (LoggingLevel loggingLevel, String message)
specifier|public
name|Type
name|log
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|LogDefinition
name|answer
init|=
operator|new
name|LogDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setLoggingLevel
argument_list|(
name|loggingLevel
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Creates a log message to be logged at the given level and name.      *      * @param loggingLevel the logging level to use      * @param logName the log name to use      * @param message the log message, (you can use {@link org.apache.camel.language.simple.SimpleLanguage} syntax)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|log (LoggingLevel loggingLevel, String logName, String message)
specifier|public
name|Type
name|log
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|,
name|String
name|logName
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|LogDefinition
name|answer
init|=
operator|new
name|LogDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setLoggingLevel
argument_list|(
name|loggingLevel
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setLogName
argument_list|(
name|logName
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Creates a log message to be logged at the given level using provided logger.      *      * @param loggingLevel the logging level to use      * @param logger the logger to use      * @param message the log message, (you can use {@link org.apache.camel.language.simple.SimpleLanguage} syntax)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|log (LoggingLevel loggingLevel, Logger logger, String message)
specifier|public
name|Type
name|log
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|LogDefinition
name|answer
init|=
operator|new
name|LogDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setLoggingLevel
argument_list|(
name|loggingLevel
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setLogger
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Creates a log message to be logged at the given level and name.      *      *      * @param loggingLevel the logging level to use      * @param logName the log name to use      * @param marker  log marker name      * @param message the log message, (you can use {@link org.apache.camel.language.simple.SimpleLanguage} syntax)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|log (LoggingLevel loggingLevel, String logName, String marker, String message)
specifier|public
name|Type
name|log
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|,
name|String
name|logName
parameter_list|,
name|String
name|marker
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|LogDefinition
name|answer
init|=
operator|new
name|LogDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setLoggingLevel
argument_list|(
name|loggingLevel
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setLogName
argument_list|(
name|logName
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMarker
argument_list|(
name|marker
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Creates a log message to be logged at the given level using provided logger.      *      *      * @param loggingLevel the logging level to use      * @param logger the logger to use      * @param marker  log marker name      * @param message the log message, (you can use {@link org.apache.camel.language.simple.SimpleLanguage} syntax)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|log (LoggingLevel loggingLevel, Logger logger, String marker, String message)
specifier|public
name|Type
name|log
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|marker
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|LogDefinition
name|answer
init|=
operator|new
name|LogDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setLoggingLevel
argument_list|(
name|loggingLevel
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setLogger
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMarker
argument_list|(
name|marker
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/content-based-router.html">Content Based Router EIP:</a>      * Creates a choice of one or more predicates with an otherwise clause      *      * @return the builder for a choice expression      */
DECL|method|choice ()
specifier|public
name|ChoiceDefinition
name|choice
parameter_list|()
block|{
name|ChoiceDefinition
name|answer
init|=
operator|new
name|ChoiceDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a try/catch block      *      * @return the builder for a tryBlock expression      */
DECL|method|doTry ()
specifier|public
name|TryDefinition
name|doTry
parameter_list|()
block|{
name|TryDefinition
name|answer
init|=
operator|new
name|TryDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients.      *<p/>      * Will use comma as default delimiter.      *      * @param recipients expression to decide the destinations      * @return the builder      */
DECL|method|recipientList (@sEndpointUri Expression recipients)
specifier|public
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
name|recipientList
parameter_list|(
annotation|@
name|AsEndpointUri
name|Expression
name|recipients
parameter_list|)
block|{
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|RecipientListDefinition
argument_list|<>
argument_list|(
name|recipients
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients      *      * @param recipients expression to decide the destinations      * @param delimiter  a custom delimiter to use      * @return the builder      */
DECL|method|recipientList (@sEndpointUri Expression recipients, String delimiter)
specifier|public
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
name|recipientList
parameter_list|(
annotation|@
name|AsEndpointUri
name|Expression
name|recipients
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|RecipientListDefinition
argument_list|<>
argument_list|(
name|recipients
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients      *      * @param delimiter  a custom delimiter to use      * @return the builder      */
annotation|@
name|AsEndpointUri
DECL|method|recipientList (String delimiter)
specifier|public
name|ExpressionClause
argument_list|<
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|recipientList
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|RecipientListDefinition
argument_list|<>
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients      *      * @return the expression clause to configure the expression to decide the destinations      */
annotation|@
name|AsEndpointUri
DECL|method|recipientList ()
specifier|public
name|ExpressionClause
argument_list|<
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|recipientList
parameter_list|()
block|{
name|RecipientListDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|RecipientListDefinition
argument_list|<>
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/routing-slip.html">Routing Slip EIP:</a>      * Creates a routing slip allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *<p/>      * The route slip will be evaluated<i>once</i>, use {@link #dynamicRouter()} if you need even more dynamic routing.      *      * @param expression  to decide the destinations      * @param uriDelimiter  is the delimiter that will be used to split up      *                      the list of URIs in the routing slip.      * @return the builder      */
DECL|method|routingSlip (@sEndpointUri Expression expression, String uriDelimiter)
specifier|public
name|RoutingSlipDefinition
argument_list|<
name|Type
argument_list|>
name|routingSlip
parameter_list|(
annotation|@
name|AsEndpointUri
name|Expression
name|expression
parameter_list|,
name|String
name|uriDelimiter
parameter_list|)
block|{
name|RoutingSlipDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|RoutingSlipDefinition
argument_list|<>
argument_list|(
name|expression
argument_list|,
name|uriDelimiter
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/routing-slip.html">Routing Slip EIP:</a>      * Creates a routing slip allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *<p/>      * The list of URIs will be split based on the default delimiter {@link RoutingSlipDefinition#DEFAULT_DELIMITER}      *<p/>      * The route slip will be evaluated<i>once</i>, use {@link #dynamicRouter()} if you need even more dynamic routing.      *      * @param expression  to decide the destinations      * @return the builder      */
DECL|method|routingSlip (@sEndpointUri Expression expression)
specifier|public
name|RoutingSlipDefinition
argument_list|<
name|Type
argument_list|>
name|routingSlip
parameter_list|(
annotation|@
name|AsEndpointUri
name|Expression
name|expression
parameter_list|)
block|{
name|RoutingSlipDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|RoutingSlipDefinition
argument_list|<>
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/routing-slip.html">Routing Slip EIP:</a>      * Creates a routing slip allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *<p/>      * The list of URIs will be split based on the default delimiter {@link RoutingSlipDefinition#DEFAULT_DELIMITER}      *<p/>      * The route slip will be evaluated<i>once</i>, use {@link #dynamicRouter()} if you need even more dynamic routing.      *      * @return the expression clause to configure the expression to decide the destinations      */
DECL|method|routingSlip ()
specifier|public
name|ExpressionClause
argument_list|<
name|RoutingSlipDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|routingSlip
parameter_list|()
block|{
name|RoutingSlipDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|RoutingSlipDefinition
argument_list|<>
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/dynamic-router.html">Dynamic Router EIP:</a>      * Creates a dynamic router allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *<p/>      *<br/><b>Important:</b> The expression will be invoked repeatedly until it returns<tt>null</tt>, so be sure it does that,      * otherwise it will be invoked endlessly.      *      * @param expression  to decide the destinations, which will be invoked repeatedly      *                    until it evaluates<tt>null</tt> to indicate no more destinations.      * @return the builder      */
DECL|method|dynamicRouter (@sEndpointUri Expression expression)
specifier|public
name|DynamicRouterDefinition
argument_list|<
name|Type
argument_list|>
name|dynamicRouter
parameter_list|(
annotation|@
name|AsEndpointUri
name|Expression
name|expression
parameter_list|)
block|{
name|DynamicRouterDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|DynamicRouterDefinition
argument_list|<>
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/dynamic-router.html">Dynamic Router EIP:</a>      * Creates a dynamic router allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *<p/>      *<br/><b>Important:</b> The expression will be invoked repeatedly until it returns<tt>null</tt>, so be sure it does that,      * otherwise it will be invoked endlessly.      *      * @return the expression clause to configure the expression to decide the destinations,      * which will be invoked repeatedly until it evaluates<tt>null</tt> to indicate no more destinations.      */
annotation|@
name|AsEndpointUri
DECL|method|dynamicRouter ()
specifier|public
name|ExpressionClause
argument_list|<
name|DynamicRouterDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|dynamicRouter
parameter_list|()
block|{
name|DynamicRouterDefinition
argument_list|<
name|Type
argument_list|>
name|answer
init|=
operator|new
name|DynamicRouterDefinition
argument_list|<>
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/sampling.html">Sampling Throttler</a>      * Creates a sampling throttler allowing you to extract a sample of      * exchanges from the traffic on a route. It is configured with a sampling      * period, during which only a single exchange is allowed to pass through.      * All other exchanges will be stopped.      *<p/>      * Default period is one second.      *      * @return the builder      */
DECL|method|sample ()
specifier|public
name|SamplingDefinition
name|sample
parameter_list|()
block|{
return|return
name|sample
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/sampling.html">Sampling Throttler</a>      * Creates a sampling throttler allowing you to extract a sample of exchanges      * from the traffic through a route. It is configured with a sampling period      * during which only a single exchange is allowed to pass through.      * All other exchanges will be stopped.      *      * @param samplePeriod this is the sample interval, only one exchange is      *            allowed through in this interval      * @param unit this is the units for the samplePeriod e.g. Seconds      * @return the builder      */
DECL|method|sample (long samplePeriod, TimeUnit unit)
specifier|public
name|SamplingDefinition
name|sample
parameter_list|(
name|long
name|samplePeriod
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|SamplingDefinition
name|answer
init|=
operator|new
name|SamplingDefinition
argument_list|(
name|samplePeriod
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/sampling.html">Sampling Throttler</a>      * Creates a sampling throttler allowing you to extract a sample of exchanges      * from the traffic through a route. It is configured with a sampling message frequency      * during which only a single exchange is allowed to pass through.      * All other exchanges will be stopped.      *      * @param messageFrequency this is the sample message frequency, only one exchange is       *              allowed through for this many messages received      * @return the builder      */
DECL|method|sample (long messageFrequency)
specifier|public
name|SamplingDefinition
name|sample
parameter_list|(
name|long
name|messageFrequency
parameter_list|)
block|{
name|SamplingDefinition
name|answer
init|=
operator|new
name|SamplingDefinition
argument_list|(
name|messageFrequency
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * This splitter responds with the original input message. You can use a custom {@link AggregationStrategy} to      * control what to respond from the splitter.      *      * @return the expression clause builder for the expression on which to split      */
DECL|method|split ()
specifier|public
name|ExpressionClause
argument_list|<
name|SplitDefinition
argument_list|>
name|split
parameter_list|()
block|{
name|SplitDefinition
name|answer
init|=
operator|new
name|SplitDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * This splitter responds with the original input message. You can use a custom {@link AggregationStrategy} to      * control what to respond from the splitter.      *      * @param expression  the expression on which to split the message      * @return the builder      */
DECL|method|split (Expression expression)
specifier|public
name|SplitDefinition
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|SplitDefinition
name|answer
init|=
operator|new
name|SplitDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param expression  the expression on which to split      * @param aggregationStrategy  the strategy used to aggregate responses for every part      * @return the builder      */
DECL|method|split (Expression expression, AggregationStrategy aggregationStrategy)
specifier|public
name|SplitDefinition
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|SplitDefinition
name|answer
init|=
operator|new
name|SplitDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @return the expression clause for the expressions on which to compare messages in order      */
DECL|method|resequence ()
specifier|public
name|ExpressionClause
argument_list|<
name|ResequenceDefinition
argument_list|>
name|resequence
parameter_list|()
block|{
name|ResequenceDefinition
name|answer
init|=
operator|new
name|ResequenceDefinition
argument_list|()
decl_stmt|;
name|ExpressionClause
argument_list|<
name|ResequenceDefinition
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExpression
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @param expression the expression on which to compare messages in order      * @return the builder      */
DECL|method|resequence (Expression expression)
specifier|public
name|ResequenceDefinition
name|resequence
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|ResequenceDefinition
name|answer
init|=
operator|new
name|ResequenceDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @return the expression clause to be used as builder to configure the correlation expression      */
DECL|method|aggregate ()
specifier|public
name|ExpressionClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|aggregate
parameter_list|()
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|()
decl_stmt|;
name|ExpressionClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExpression
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param aggregationStrategy the strategy used for the aggregation      * @return the expression clause to be used as builder to configure the correlation expression      */
DECL|method|aggregate (AggregationStrategy aggregationStrategy)
specifier|public
name|ExpressionClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|aggregate
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|()
decl_stmt|;
name|ExpressionClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExpression
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param correlationExpression the expression used to calculate the      *                              correlation key. For a JMS message this could be the      *                              expression<code>header("JMSDestination")</code> or      *<code>header("JMSCorrelationID")</code>      * @return the builder      */
DECL|method|aggregate (Expression correlationExpression)
specifier|public
name|AggregateDefinition
name|aggregate
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|)
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|(
name|correlationExpression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param correlationExpression the expression used to calculate the      *                              correlation key. For a JMS message this could be the      *                              expression<code>header("JMSDestination")</code> or      *<code>header("JMSCorrelationID")</code>      * @param aggregationStrategy the strategy used for the aggregation      * @return the builder      */
DECL|method|aggregate (Expression correlationExpression, AggregationStrategy aggregationStrategy)
specifier|public
name|AggregateDefinition
name|aggregate
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|(
name|correlationExpression
argument_list|,
name|aggregationStrategy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @param delay  an expression to calculate the delay time in millis      * @return the builder      */
DECL|method|delay (Expression delay)
specifier|public
name|DelayDefinition
name|delay
parameter_list|(
name|Expression
name|delay
parameter_list|)
block|{
name|DelayDefinition
name|answer
init|=
operator|new
name|DelayDefinition
argument_list|(
name|delay
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @return the expression clause to create the expression      */
DECL|method|delay ()
specifier|public
name|ExpressionClause
argument_list|<
name|DelayDefinition
argument_list|>
name|delay
parameter_list|()
block|{
name|DelayDefinition
name|answer
init|=
operator|new
name|DelayDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @param delay  the delay in millis      * @return the builder      */
DECL|method|delay (long delay)
specifier|public
name|DelayDefinition
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
return|return
name|delay
argument_list|(
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|delay
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/throttler.html">Throttler EIP:</a>      * Creates a throttler using a fluent builder.       *      * @return the builder      */
DECL|method|throttle ()
specifier|public
name|ExpressionClause
argument_list|<
name|ThrottleDefinition
argument_list|>
name|throttle
parameter_list|()
block|{
name|ThrottleDefinition
name|answer
init|=
operator|new
name|ThrottleDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/throttler.html">Throttler EIP:</a>      * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,      * or that we don't exceed an agreed SLA with some external service.      *<p/>      * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10      * will default ensure at most 10 messages per second.       *      * @param maximumRequestCount  the maximum messages       * @return the builder      */
DECL|method|throttle (long maximumRequestCount)
specifier|public
name|ThrottleDefinition
name|throttle
parameter_list|(
name|long
name|maximumRequestCount
parameter_list|)
block|{
return|return
name|throttle
argument_list|(
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|maximumRequestCount
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/throttler.html">Throttler EIP:</a>      * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,      * or that we don't exceed an agreed SLA with some external service.      *<p/>      * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10      * will default ensure at most 10 messages per second.       *      * @param maximumRequestCount  an expression to calculate the maximum request count       * @return the builder      */
DECL|method|throttle (Expression maximumRequestCount)
specifier|public
name|ThrottleDefinition
name|throttle
parameter_list|(
name|Expression
name|maximumRequestCount
parameter_list|)
block|{
name|ThrottleDefinition
name|answer
init|=
operator|new
name|ThrottleDefinition
argument_list|(
name|maximumRequestCount
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/throttler.html">Throttler EIP:</a>      * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,      * or that we don't exceed an agreed SLA with some external service.      * Here another parameter correlationExpressionKey is introduced for the functionality which      * will throttle based on the key expression to group exchanges. This will make key-based throttling      * instead of overall throttling.      *<p/>      * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10      * will default ensure at most 10 messages per second.      *      * @param maximumRequestCount  an expression to calculate the maximum request count      * @param correlationExpressionKey  is a correlation key that can throttle by the given key instead of overall throttling      * @return the builder      */
DECL|method|throttle (Expression maximumRequestCount, long correlationExpressionKey)
specifier|public
name|ThrottleDefinition
name|throttle
parameter_list|(
name|Expression
name|maximumRequestCount
parameter_list|,
name|long
name|correlationExpressionKey
parameter_list|)
block|{
name|ThrottleDefinition
name|answer
init|=
operator|new
name|ThrottleDefinition
argument_list|(
name|maximumRequestCount
argument_list|,
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|correlationExpressionKey
argument_list|)
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/throttler.html">Throttler EIP:</a>      * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,      * or that we don't exceed an agreed SLA with some external service.      * Here another parameter correlationExpressionKey is introduced for the functionality which      * will throttle based on the key expression to group exchanges. This will make key-based throttling      * instead of overall throttling.      *<p/>      * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10      * will default ensure at most 10 messages per second.      *      * @param maximumRequestCount  an expression to calculate the maximum request count      * @param correlationExpressionKey  is a correlation key as an expression that can throttle by the given key instead of overall throttling      * @return the builder      */
DECL|method|throttle (Expression maximumRequestCount, Expression correlationExpressionKey)
specifier|public
name|ThrottleDefinition
name|throttle
parameter_list|(
name|Expression
name|maximumRequestCount
parameter_list|,
name|Expression
name|correlationExpressionKey
parameter_list|)
block|{
name|ThrottleDefinition
name|answer
init|=
operator|new
name|ThrottleDefinition
argument_list|(
name|maximumRequestCount
argument_list|,
name|correlationExpressionKey
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way. Useful mostly for testing.      *      * @return the clause used to create the loop expression      */
DECL|method|loop ()
specifier|public
name|ExpressionClause
argument_list|<
name|LoopDefinition
argument_list|>
name|loop
parameter_list|()
block|{
name|LoopDefinition
name|loop
init|=
operator|new
name|LoopDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|loop
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way.      *      * @param expression the loop expression      * @return the builder      */
DECL|method|loop (Expression expression)
specifier|public
name|LoopDefinition
name|loop
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|LoopDefinition
name|loop
init|=
operator|new
name|LoopDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|loop
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a while loop allowing to process the a message while the predicate matches      * and possibly process them in a different way.      *      * @param predicate the while loop predicate      * @return the builder      */
DECL|method|loopDoWhile (@sPredicate Predicate predicate)
specifier|public
name|LoopDefinition
name|loopDoWhile
parameter_list|(
annotation|@
name|AsPredicate
name|Predicate
name|predicate
parameter_list|)
block|{
name|LoopDefinition
name|loop
init|=
operator|new
name|LoopDefinition
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|loop
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way using a fluent builder.      *      * @return the builder      */
DECL|method|loopDoWhile ()
specifier|public
name|ExpressionClause
argument_list|<
name|LoopDefinition
argument_list|>
name|loopDoWhile
parameter_list|()
block|{
name|LoopDefinition
name|loop
init|=
operator|new
name|LoopDefinition
argument_list|()
decl_stmt|;
name|loop
operator|.
name|setDoWhile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|loop
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way.      *      * @param count  the number of times      * @return the builder      */
DECL|method|loop (int count)
specifier|public
name|LoopDefinition
name|loop
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|LoopDefinition
name|loop
init|=
operator|new
name|LoopDefinition
argument_list|(
operator|new
name|ConstantExpression
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|loop
return|;
block|}
comment|/**      * Sets the exception on the {@link org.apache.camel.Exchange}      *      * @param exception the exception to throw      * @return the builder      */
DECL|method|throwException (Exception exception)
specifier|public
name|Type
name|throwException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|ThrowExceptionDefinition
name|answer
init|=
operator|new
name|ThrowExceptionDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sets the exception on the {@link org.apache.camel.Exchange}      *      * @param type the exception class to use      * @param message the given message as caused message (supports simple language)      * @return the builder      */
DECL|method|throwException (Class<? extends Exception> type, String message)
specifier|public
name|Type
name|throwException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|type
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|ThrowExceptionDefinition
name|answer
init|=
operator|new
name|ThrowExceptionDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setExceptionClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Marks the exchange for rollback only.      *<p/>      * Does<b>not</b> set any exception as opposed to {@link #rollback()} methods.      *      * @return the builder      * @see #rollback()      * @see #rollback(String)      * @see #markRollbackOnlyLast()      */
DECL|method|markRollbackOnly ()
specifier|public
name|Type
name|markRollbackOnly
parameter_list|()
block|{
name|RollbackDefinition
name|answer
init|=
operator|new
name|RollbackDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setMarkRollbackOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Marks the exchange for rollback only, but only for the last (current) transaction.      *<p/>      * A last rollback is used when you have nested transactions and only want the last local transaction to rollback,      * where as the outer transaction can still be completed      *<p/>      * Does<b>not</b> set any exception as opposed to {@link #rollback()} methods.      *      * @return the builder      * @see #rollback()      * @see #rollback(String)      * @see #markRollbackOnly()      */
DECL|method|markRollbackOnlyLast ()
specifier|public
name|Type
name|markRollbackOnlyLast
parameter_list|()
block|{
name|RollbackDefinition
name|answer
init|=
operator|new
name|RollbackDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setMarkRollbackOnlyLast
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Marks the exchange for rollback only and sets an exception with a default message.      *<p/>      * This is done by setting a {@link org.apache.camel.RollbackExchangeException} on the Exchange      * and mark it for rollback.      *      * @return the builder      * @see #markRollbackOnly()      */
DECL|method|rollback ()
specifier|public
name|Type
name|rollback
parameter_list|()
block|{
return|return
name|rollback
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Marks the exchange for rollback and sets an exception with the provided message.      *<p/>      * This is done by setting a {@link org.apache.camel.RollbackExchangeException} on the Exchange      * and mark it for rollback.      *      * @param message an optional message used for logging purpose why the rollback was triggered      * @return the builder      * @see #markRollbackOnly()      */
DECL|method|rollback (String message)
specifier|public
name|Type
name|rollback
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|RollbackDefinition
name|answer
init|=
operator|new
name|RollbackDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/wiretap.html">WireTap EIP:</a>      * Sends messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other using {@link ExchangePattern#InOnly}.      *      * @param endpoint  the endpoint to wiretap to      * @return the builder      */
DECL|method|wireTap (Endpoint endpoint)
specifier|public
name|WireTapDefinition
argument_list|<
name|Type
argument_list|>
name|wireTap
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|WireTapDefinition
name|answer
init|=
operator|new
name|WireTapDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/wiretap.html">WireTap EIP:</a>      * Sends messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other using {@link ExchangePattern#InOnly}.      *      * @param uri  the dynamic endpoint to wiretap to (resolved using simple language by default)      * @return the builder      */
DECL|method|wireTap (@sEndpointUri String uri)
specifier|public
name|WireTapDefinition
argument_list|<
name|Type
argument_list|>
name|wireTap
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|WireTapDefinition
name|answer
init|=
operator|new
name|WireTapDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Pushes the given block on the stack as current block      *      * @param block  the block      */
DECL|method|pushBlock (Block block)
name|void
name|pushBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|blocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pops the block off the stack as current block      *      * @return the block      */
DECL|method|popBlock ()
name|Block
name|popBlock
parameter_list|()
block|{
return|return
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|blocks
operator|.
name|removeLast
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startupOrder (int startupOrder)
specifier|public
name|Type
name|startupOrder
parameter_list|(
name|int
name|startupOrder
parameter_list|)
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|def
init|=
name|this
decl_stmt|;
name|RouteDefinition
name|route
init|=
name|ProcessorDefinitionHelper
operator|.
name|getRoute
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|route
operator|.
name|startupOrder
argument_list|(
name|startupOrder
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Stops continue routing the current {@link org.apache.camel.Exchange} and marks it as completed.      *      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|stop ()
specifier|public
name|Type
name|stop
parameter_list|()
block|{
name|StopDefinition
name|stop
init|=
operator|new
name|StopDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|stop
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exception-clause.html">Exception clause</a>      * for catching certain exceptions and handling them.      *      * @param exceptionType  the exception to catch      * @return the exception builder to configure      */
DECL|method|onException (Class<? extends Throwable> exceptionType)
specifier|public
name|OnExceptionDefinition
name|onException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exceptionType
parameter_list|)
block|{
name|OnExceptionDefinition
name|answer
init|=
operator|new
name|OnExceptionDefinition
argument_list|(
name|exceptionType
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setRouteScoped
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exception-clause.html">Exception clause</a>      * for catching certain exceptions and handling them.      *      * @param exceptions list of exceptions to catch      * @return the exception builder to configure      */
DECL|method|onException (Class<? extends Throwable>.... exceptions)
specifier|public
name|OnExceptionDefinition
name|onException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
modifier|...
name|exceptions
parameter_list|)
block|{
name|OnExceptionDefinition
name|answer
init|=
operator|new
name|OnExceptionDefinition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|exceptions
argument_list|)
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setRouteScoped
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Apply a {@link Policy}.      *<p/>      * Policy can be used for transactional policies.      *      * @param policy  the policy to apply      * @return the policy builder to configure      */
DECL|method|policy (Policy policy)
specifier|public
name|PolicyDefinition
name|policy
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
name|PolicyDefinition
name|answer
init|=
operator|new
name|PolicyDefinition
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Apply a {@link Policy}.      *<p/>      * Policy can be used for transactional policies.      *      * @param ref  reference to lookup a policy in the registry      * @return the policy builder to configure      */
DECL|method|policy (String ref)
specifier|public
name|PolicyDefinition
name|policy
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|PolicyDefinition
name|answer
init|=
operator|new
name|PolicyDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Marks this route as transacted and uses the default transacted policy found in the registry.      *      * @return the policy builder to configure      */
DECL|method|transacted ()
specifier|public
name|TransactedDefinition
name|transacted
parameter_list|()
block|{
name|TransactedDefinition
name|answer
init|=
operator|new
name|TransactedDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Marks this route as transacted.      *      * @param ref  reference to lookup a transacted policy in the registry      * @return the policy builder to configure      */
DECL|method|transacted (String ref)
specifier|public
name|TransactedDefinition
name|transacted
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|TransactedDefinition
name|answer
init|=
operator|new
name|TransactedDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Marks this route as participating to a saga.      *      * @return the saga definition      */
DECL|method|saga ()
specifier|public
name|SagaDefinition
name|saga
parameter_list|()
block|{
name|SagaDefinition
name|answer
init|=
operator|new
name|SagaDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|// Transformers
comment|// -------------------------------------------------------------------------
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds the custom processor to this destination which could be a final      * destination, or could be a transformation in a pipeline      *      * @param processor  the custom {@link Processor}      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|process (Processor processor)
specifier|public
name|Type
name|process
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|ProcessDefinition
name|answer
init|=
operator|new
name|ProcessDefinition
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds the custom processor reference to this destination which could be a final      * destination, or could be a transformation in a pipeline      *      * @param ref   reference to a {@link Processor} to lookup in the registry      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|process (String ref)
specifier|public
name|Type
name|process
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|ProcessDefinition
name|answer
init|=
operator|new
name|ProcessDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds the custom processor using a fluent builder to this destination which could be a final      * destination, or could be a transformation in a pipeline      *      * @return the builder      */
DECL|method|process ()
specifier|public
name|ProcessClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|process
parameter_list|()
block|{
name|ProcessClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ProcessClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|ProcessDefinition
name|answer
init|=
operator|new
name|ProcessDefinition
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke, or a reference to a bean if the type is a String      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Object bean)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
name|bean
operator|instanceof
name|String
condition|)
block|{
name|answer
operator|.
name|setRef
argument_list|(
operator|(
name|String
operator|)
name|bean
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke, or a reference to a bean if the type is a String      * @param method  the method name to invoke on the bean (can be used to avoid ambiguity)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Object bean, String method)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
name|bean
operator|instanceof
name|String
condition|)
block|{
name|answer
operator|.
name|setRef
argument_list|(
operator|(
name|String
operator|)
name|bean
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke, or a reference to a bean if the type is a String      * @param cache  if enabled, Camel will cache the result of the first Registry look-up.      *               Cache can be enabled if the bean in the Registry is defined as a singleton scope.      *  the multi parameter      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Object bean, boolean cache)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|boolean
name|cache
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
name|bean
operator|instanceof
name|String
condition|)
block|{
name|answer
operator|.
name|setRef
argument_list|(
operator|(
name|String
operator|)
name|bean
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke, or a reference to a bean if the type is a String      * @param method  the method name to invoke on the bean (can be used to avoid ambiguity)      * @param cache  if enabled, Camel will cache the result of the first Registry look-up.      *               Cache can be enabled if the bean in the Registry is defined as a singleton scope.      *  the multi parameter      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Object bean, String method, boolean cache)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|method
parameter_list|,
name|boolean
name|cache
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
name|bean
operator|instanceof
name|String
condition|)
block|{
name|answer
operator|.
name|setRef
argument_list|(
operator|(
name|String
operator|)
name|bean
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param  beanType  the bean class, Camel will instantiate an object at runtime      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Class<?> beanType)
specifier|public
name|Type
name|bean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBeanType
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param  beanType  the bean class, Camel will instantiate an object at runtime      * @param method  the method name to invoke on the bean (can be used to avoid ambiguity)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Class<?> beanType, String method)
specifier|public
name|Type
name|bean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBeanType
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param  beanType  the bean class, Camel will instantiate an object at runtime      * @param method  the method name to invoke on the bean (can be used to avoid ambiguity)      * @param cache  if enabled, Camel will cache the result of the first Registry look-up.      *               Cache can be enabled if the bean in the Registry is defined as a singleton scope.      *  the multi parameter      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Class<?> beanType, String method, boolean cache)
specifier|public
name|Type
name|bean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|,
name|String
name|method
parameter_list|,
name|boolean
name|cache
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBeanType
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @return a expression builder clause to set the body      */
DECL|method|setBody ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setBody
parameter_list|()
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SetBodyDefinition
name|answer
init|=
operator|new
name|SetBodyDefinition
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @param expression   the expression used to set the body      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setBody (Expression expression)
specifier|public
name|Type
name|setBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|SetBodyDefinition
name|answer
init|=
operator|new
name|SetBodyDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @param supplier   the supplier that provides a value to the IN message body      * @return the builder      */
DECL|method|setBody (Supplier<Result> supplier)
specifier|public
parameter_list|<
name|Result
parameter_list|>
name|Type
name|setBody
parameter_list|(
name|Supplier
argument_list|<
name|Result
argument_list|>
name|supplier
parameter_list|)
block|{
name|SetBodyDefinition
name|answer
init|=
operator|new
name|SetBodyDefinition
argument_list|(
operator|new
name|ExpressionAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Result
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|supplier
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @param function   the function that provides a value to the IN message body      * @return the builder      */
DECL|method|setBody (Function<Exchange, Result> function)
specifier|public
parameter_list|<
name|Result
parameter_list|>
name|Type
name|setBody
parameter_list|(
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Result
argument_list|>
name|function
parameter_list|)
block|{
name|SetBodyDefinition
name|answer
init|=
operator|new
name|SetBodyDefinition
argument_list|(
operator|new
name|ExpressionAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Result
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|function
operator|.
name|apply
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the OUT message      *      * @param expression   the expression used to set the body      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|transform (Expression expression)
specifier|public
name|Type
name|transform
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|TransformDefinition
name|answer
init|=
operator|new
name|TransformDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the OUT message      *      * @return a expression builder clause to set the body      */
DECL|method|transform ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|transform
parameter_list|()
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|TransformDefinition
name|answer
init|=
operator|new
name|TransformDefinition
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Executes a script (do not change the message body).      *      * @param expression   the expression used as the script.      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|script (Expression expression)
specifier|public
name|Type
name|script
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|ScriptDefinition
name|answer
init|=
operator|new
name|ScriptDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Executes a script (do not change the message body).      *      * @return a expression builder clause to use as script.      */
DECL|method|script ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|script
parameter_list|()
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|ScriptDefinition
name|answer
init|=
operator|new
name|ScriptDefinition
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the body on the FAULT message      *      * @param expression   the expression used to set the body      * @return the builder      */
DECL|method|setFaultBody (Expression expression)
specifier|public
name|Type
name|setFaultBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setFaultBody
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      *      * @param name  the header name      * @return a expression builder clause to set the header      */
DECL|method|setHeader (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SetHeaderDefinition
name|answer
init|=
operator|new
name|SetHeaderDefinition
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      *      * @param name  the header name      * @param expression  the expression used to set the header      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setHeader (String name, Expression expression)
specifier|public
name|Type
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetHeaderDefinition
name|answer
init|=
operator|new
name|SetHeaderDefinition
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      *      * @param name  the header name      * @param supplier the supplier used to set the header      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setHeader (String name, final Supplier<Object> supplier)
specifier|public
name|Type
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|Supplier
argument_list|<
name|Object
argument_list|>
name|supplier
parameter_list|)
block|{
name|SetHeaderDefinition
name|answer
init|=
operator|new
name|SetHeaderDefinition
argument_list|(
name|name
argument_list|,
operator|new
name|ExpressionAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|supplier
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the exchange property      *      * @param name  the property name      * @param expression  the expression used to set the property      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setProperty (String name, Expression expression)
specifier|public
name|Type
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetPropertyDefinition
name|answer
init|=
operator|new
name|SetPropertyDefinition
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the exchange property      *      * @param name  the property name      * @return a expression builder clause to set the property      */
DECL|method|setProperty (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SetPropertyDefinition
name|answer
init|=
operator|new
name|SetPropertyDefinition
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which removes the header on the IN message      *      * @param name  the header name      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeHeader (String name)
specifier|public
name|Type
name|removeHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|RemoveHeaderDefinition
name|answer
init|=
operator|new
name|RemoveHeaderDefinition
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which removes the headers on the IN message      *      * @param pattern  a pattern to match header names to be removed      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeHeaders (String pattern)
specifier|public
name|Type
name|removeHeaders
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|RemoveHeadersDefinition
name|answer
init|=
operator|new
name|RemoveHeadersDefinition
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which removes the headers on the IN message      *      * @param pattern  a pattern to match header names to be removed      * @param excludePatterns one or more pattern of header names that should be excluded (= preserved)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeHeaders (String pattern, String... excludePatterns)
specifier|public
name|Type
name|removeHeaders
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
modifier|...
name|excludePatterns
parameter_list|)
block|{
name|RemoveHeadersDefinition
name|answer
init|=
operator|new
name|RemoveHeadersDefinition
argument_list|(
name|pattern
argument_list|,
name|excludePatterns
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which removes the exchange property      *      * @param name  the property name      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeProperty (String name)
specifier|public
name|Type
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|RemovePropertyDefinition
name|answer
init|=
operator|new
name|RemovePropertyDefinition
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which removes the properties in the exchange      *      * @param pattern a pattern to match properties names to be removed      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeProperties (String pattern)
specifier|public
name|Type
name|removeProperties
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|RemovePropertiesDefinition
name|answer
init|=
operator|new
name|RemovePropertiesDefinition
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which removes the properties in the exchange      *      * @param pattern a pattern to match properties names to be removed      * @param excludePatterns one or more pattern of properties names that should be excluded (= preserved)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeProperties (String pattern, String... excludePatterns)
specifier|public
name|Type
name|removeProperties
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
modifier|...
name|excludePatterns
parameter_list|)
block|{
name|RemovePropertiesDefinition
name|answer
init|=
operator|new
name|RemovePropertiesDefinition
argument_list|(
name|pattern
argument_list|,
name|excludePatterns
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Converts the IN message body to the specified type      *      * @param type the type to convert to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertBodyTo (Class<?> type)
specifier|public
name|Type
name|convertBodyTo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ConvertBodyDefinition
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Converts the IN message body to the specified type      *      * @param type the type to convert to      * @param charset the charset to use by type converters (not all converters support specifc charset)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertBodyTo (Class<?> type, String charset)
specifier|public
name|Type
name|convertBodyTo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|charset
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ConvertBodyDefinition
argument_list|(
name|type
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sorts the expression using a default sorting based on toString representation.      *      * @param expression  the expression, must be convertable to {@link List}      * @return the builder      */
DECL|method|sort (Expression expression)
specifier|public
name|Type
name|sort
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|sort
argument_list|(
name|expression
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Sorts the expression using the given comparator      *      * @param expression  the expression, must be convertable to {@link List}      * @param comparator  the comparator to use for sorting      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sort (Expression expression, Comparator<T> comparator)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Type
name|sort
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|SortDefinition
argument_list|<>
argument_list|(
name|expression
argument_list|,
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sorts the expression      *      * @return the builder      */
DECL|method|sort ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ExpressionClause
argument_list|<
name|SortDefinition
argument_list|<
name|T
argument_list|>
argument_list|>
name|sort
parameter_list|()
block|{
name|SortDefinition
argument_list|<
name|T
argument_list|>
name|answer
init|=
operator|new
name|SortDefinition
argument_list|<>
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/claim-check.html">Claim Check EIP</a>      * allows you to replace message content with a claim check (a unique key),      * which can be used to retrieve the message content at a later time.      */
DECL|method|claimCheck ()
specifier|public
name|ClaimCheckDefinition
name|claimCheck
parameter_list|()
block|{
name|ClaimCheckDefinition
name|answer
init|=
operator|new
name|ClaimCheckDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/claim-check.html">Claim Check EIP</a>      * allows you to replace message content with a claim check (a unique key),      * which can be used to retrieve the message content at a later time.      *      * @param operation the claim check operation to use.      */
DECL|method|claimCheck (ClaimCheckOperation operation)
specifier|public
name|Type
name|claimCheck
parameter_list|(
name|ClaimCheckOperation
name|operation
parameter_list|)
block|{
name|ClaimCheckDefinition
name|answer
init|=
operator|new
name|ClaimCheckDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/claim-check.html">Claim Check EIP</a>      * allows you to replace message content with a claim check (a unique key),      * which can be used to retrieve the message content at a later time.      *      * @param operation the claim check operation to use.      * @param key       the unique key to use for the get and set operations, can be<tt>null</tt> for push/pop operations      */
DECL|method|claimCheck (ClaimCheckOperation operation, String key)
specifier|public
name|Type
name|claimCheck
parameter_list|(
name|ClaimCheckOperation
name|operation
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|claimCheck
argument_list|(
name|operation
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/claim-check.html">Claim Check EIP</a>      * allows you to replace message content with a claim check (a unique key),      * which can be used to retrieve the message content at a later time.      *      * @param operation the claim check operation to use.      * @param key       the unique key to use for the get and set operations, can be<tt>null</tt> for push/pop operations      * @param filter    describes what data to include/exclude when merging data back when using get or pop operations.      */
DECL|method|claimCheck (ClaimCheckOperation operation, String key, String filter)
specifier|public
name|Type
name|claimCheck
parameter_list|(
name|ClaimCheckOperation
name|operation
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|ClaimCheckDefinition
name|answer
init|=
operator|new
name|ClaimCheckDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *<p/>      * The difference between this and {@link #pollEnrich(String)} is that this uses a producer      * to obatin the additional data, where as pollEnrich uses a polling consumer.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @return the builder      * @see org.apache.camel.processor.Enricher      */
DECL|method|enrich (@sEndpointUri String resourceUri)
specifier|public
name|Type
name|enrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|)
block|{
return|return
name|enrich
argument_list|(
name|resourceUri
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *       * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.Enricher      */
DECL|method|enrich (@sEndpointUri String resourceUri, AggregationStrategy aggregationStrategy)
specifier|public
name|Type
name|enrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
return|return
name|enrich
argument_list|(
name|resourceUri
argument_list|,
name|aggregationStrategy
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code> and       * with an aggregation strategy created using a fluent builder.      *           *<blockquote><pre>{@code      * fom("direct:start")      *     .enrichWith("direct:resource")      *         .body(String.class, (o, n) -> n + o);      * }</pre></blockquote>      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @return the builder      * @see org.apache.camel.processor.Enricher      */
DECL|method|enrichWith (@sEndpointUri String resourceUri)
specifier|public
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|enrichWith
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|)
block|{
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|EnrichClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|enrich
argument_list|(
name|resourceUri
argument_list|,
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code> and       * with an aggregation strategy created using a fluent builder.      */
DECL|method|enrichWith (@sEndpointUri String resourceUri, boolean aggregateOnException)
specifier|public
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|enrichWith
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|)
block|{
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|EnrichClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|enrich
argument_list|(
name|resourceUri
argument_list|,
name|clause
argument_list|,
name|aggregateOnException
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code> and       * with an aggregation strategy created using a fluent builder.      */
DECL|method|enrichWith (@sEndpointUri String resourceUri, boolean aggregateOnException, boolean shareUnitOfWork)
specifier|public
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|enrichWith
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|,
name|boolean
name|shareUnitOfWork
parameter_list|)
block|{
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|EnrichClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|enrich
argument_list|(
name|resourceUri
argument_list|,
name|clause
argument_list|,
name|aggregateOnException
argument_list|,
name|shareUnitOfWork
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @param aggregateOnException   whether to call {@link org.apache.camel.processor.aggregate.AggregationStrategy#aggregate(org.apache.camel.Exchange, org.apache.camel.Exchange)} if      *                               an exception was thrown.      * @return the builder      * @see org.apache.camel.processor.Enricher      */
DECL|method|enrich (@sEndpointUri String resourceUri, AggregationStrategy aggregationStrategy, boolean aggregateOnException)
specifier|public
name|Type
name|enrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|)
block|{
return|return
name|enrich
argument_list|(
name|resourceUri
argument_list|,
name|aggregationStrategy
argument_list|,
name|aggregateOnException
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @param aggregateOnException  whether to call {@link org.apache.camel.processor.aggregate.AggregationStrategy#aggregate(org.apache.camel.Exchange, org.apache.camel.Exchange)} if      *                              an exception was thrown.      * @param shareUnitOfWork       whether to share unit of work      * @return the builder      * @see org.apache.camel.processor.Enricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|enrich (@sEndpointUri String resourceUri, AggregationStrategy aggregationStrategy, boolean aggregateOnException, boolean shareUnitOfWork)
specifier|public
name|Type
name|enrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|,
name|boolean
name|shareUnitOfWork
parameter_list|)
block|{
name|EnrichDefinition
name|answer
init|=
operator|new
name|EnrichDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setExpression
argument_list|(
operator|new
name|ConstantExpression
argument_list|(
name|resourceUri
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregateOnException
argument_list|(
name|aggregateOnException
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setShareUnitOfWork
argument_list|(
name|shareUnitOfWork
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *<p/>      * The difference between this and {@link #pollEnrich(String)} is that this uses a producer      * to obtain the additional data, where as pollEnrich uses a polling consumer.      *      * @return a expression builder clause to set the expression to use for computing the endpoint to use      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|AsEndpointUri
DECL|method|enrich ()
specifier|public
name|ExpressionClause
argument_list|<
name|EnrichDefinition
argument_list|>
name|enrich
parameter_list|()
block|{
name|EnrichDefinition
name|answer
init|=
operator|new
name|EnrichDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * This method will<tt>block</tt> until data is available, use the method with timeout if you do not      * want to risk waiting a long time before data is available from the resourceUri.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
DECL|method|pollEnrich (@sEndpointUri String resourceUri)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|)
block|{
return|return
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * This method will<b>block</b> until data is available, use the method with timeout if you do not      * want to risk waiting a long time before data is available from the resourceUri.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
DECL|method|pollEnrich (@sEndpointUri String resourceUri, AggregationStrategy aggregationStrategy)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
return|return
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
operator|-
literal|1
argument_list|,
name|aggregationStrategy
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param timeout               timeout in millis to wait at most for data to be available.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
DECL|method|pollEnrich (@sEndpointUri String resourceUri, long timeout, AggregationStrategy aggregationStrategy)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
return|return
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
name|timeout
argument_list|,
name|aggregationStrategy
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceUri            URI of resource endpoint for obtaining additional data.      * @param timeout                timeout in millis to wait at most for data to be available.      * @param aggregationStrategyRef Reference of aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
DECL|method|pollEnrich (@sEndpointUri String resourceUri, long timeout, String aggregationStrategyRef)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|,
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
return|return
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
name|timeout
argument_list|,
name|aggregationStrategyRef
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>       * and with an aggregation strategy created using a fluent builder using       * a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      */
DECL|method|pollEnrichWith (@sEndpointUri String resourceUri)
specifier|public
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|pollEnrichWith
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|)
block|{
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|EnrichClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
operator|-
literal|1
argument_list|,
name|clause
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>       * and with an aggregation strategy created using a fluent builder using       * a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      */
DECL|method|pollEnrichWith (@sEndpointUri String resourceUri, long timeout)
specifier|public
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|pollEnrichWith
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|EnrichClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
name|timeout
argument_list|,
name|clause
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>       * and with an aggregation strategy created using a fluent builder using       * a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      */
DECL|method|pollEnrichWith (@sEndpointUri String resourceUri, long timeout, boolean aggregateOnException)
specifier|public
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|pollEnrichWith
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|)
block|{
name|EnrichClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|EnrichClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
name|timeout
argument_list|,
name|clause
argument_list|,
name|aggregateOnException
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param timeout               timeout in millis to wait at most for data to be available.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @param aggregateOnException  whether to call {@link org.apache.camel.processor.aggregate.AggregationStrategy#aggregate(org.apache.camel.Exchange, org.apache.camel.Exchange)} if      *                              an exception was thrown.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrich (@sEndpointUri String resourceUri, long timeout, AggregationStrategy aggregationStrategy, boolean aggregateOnException)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|)
block|{
name|PollEnrichDefinition
name|pollEnrich
init|=
operator|new
name|PollEnrichDefinition
argument_list|()
decl_stmt|;
name|pollEnrich
operator|.
name|setExpression
argument_list|(
operator|new
name|ConstantExpression
argument_list|(
name|resourceUri
argument_list|)
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setAggregateOnException
argument_list|(
name|aggregateOnException
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|pollEnrich
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceUri            URI of resource endpoint for obtaining additional data.      * @param timeout                timeout in millis to wait at most for data to be available.      * @param aggregationStrategyRef Reference of aggregation strategy to aggregate input data and additional data.      * @param aggregateOnException   whether to call {@link org.apache.camel.processor.aggregate.AggregationStrategy#aggregate(org.apache.camel.Exchange, org.apache.camel.Exchange)} if      *                               an exception was thrown.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrich (@sEndpointUri String resourceUri, long timeout, String aggregationStrategyRef, boolean aggregateOnException)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|,
name|String
name|aggregationStrategyRef
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|)
block|{
name|PollEnrichDefinition
name|pollEnrich
init|=
operator|new
name|PollEnrichDefinition
argument_list|()
decl_stmt|;
name|pollEnrich
operator|.
name|setExpression
argument_list|(
operator|new
name|ConstantExpression
argument_list|(
name|resourceUri
argument_list|)
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setAggregationStrategyRef
argument_list|(
name|aggregationStrategyRef
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setAggregateOnException
argument_list|(
name|aggregateOnException
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|pollEnrich
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param timeout               timeout in millis to wait at most for data to be available.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
DECL|method|pollEnrich (@sEndpointUri String resourceUri, long timeout)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
return|return
name|pollEnrich
argument_list|(
name|resourceUri
argument_list|,
name|timeout
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param expression             to use an expression to dynamically compute the endpoint to poll from      * @param timeout                timeout in millis to wait at most for data to be available.      * @param aggregationStrategyRef Reference of aggregation strategy to aggregate input data and additional data.      * @param aggregateOnException   whether to call {@link org.apache.camel.processor.aggregate.AggregationStrategy#aggregate(org.apache.camel.Exchange, org.apache.camel.Exchange)} if      *                               an exception was thrown.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrich (@sEndpointUri Expression expression, long timeout, String aggregationStrategyRef, boolean aggregateOnException)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
annotation|@
name|AsEndpointUri
name|Expression
name|expression
parameter_list|,
name|long
name|timeout
parameter_list|,
name|String
name|aggregationStrategyRef
parameter_list|,
name|boolean
name|aggregateOnException
parameter_list|)
block|{
name|PollEnrichDefinition
name|pollEnrich
init|=
operator|new
name|PollEnrichDefinition
argument_list|()
decl_stmt|;
name|pollEnrich
operator|.
name|setExpression
argument_list|(
operator|new
name|ExpressionDefinition
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setAggregationStrategyRef
argument_list|(
name|aggregationStrategyRef
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setAggregateOnException
argument_list|(
name|aggregateOnException
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|pollEnrich
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obtain the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @return a expression builder clause to set the expression to use for computing the endpoint to poll from      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|AsEndpointUri
DECL|method|pollEnrich ()
specifier|public
name|ExpressionClause
argument_list|<
name|PollEnrichDefinition
argument_list|>
name|pollEnrich
parameter_list|()
block|{
name|PollEnrichDefinition
name|answer
init|=
operator|new
name|PollEnrichDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      * Adds a onComplection {@link org.apache.camel.spi.Synchronization} hook that invoke this route as      * a callback when the {@link org.apache.camel.Exchange} has finished being processed.      * The hook invoke callbacks for either onComplete or onFailure.      *<p/>      * Will by default always trigger when the {@link org.apache.camel.Exchange} is complete      * (either with success or failed).      *<br/>      * You can limit the callback to either onComplete or onFailure but invoking the nested      * builder method.      *<p/>      * For onFailure the caused exception is stored as a property on the {@link org.apache.camel.Exchange}      * with the key {@link org.apache.camel.Exchange#EXCEPTION_CAUGHT}.      *      * @return the builder      */
DECL|method|onCompletion ()
specifier|public
name|OnCompletionDefinition
name|onCompletion
parameter_list|()
block|{
name|OnCompletionDefinition
name|answer
init|=
operator|new
name|OnCompletionDefinition
argument_list|()
decl_stmt|;
comment|// we must remove all existing on completion definition (as they are global)
comment|// and thus we are the only one as route scoped should override any global scoped
name|answer
operator|.
name|removeAllOnCompletionDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popBlock
argument_list|()
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|pushBlock
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|// DataFormat support
comment|// -------------------------------------------------------------------------
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using a {@link DataFormat} expression to define      * the format of the input message and the output will be set on the out message body.      *      * @return the expression to create the {@link DataFormat}      */
DECL|method|unmarshal ()
specifier|public
name|DataFormatClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|unmarshal
parameter_list|()
block|{
return|return
operator|new
name|DataFormatClause
argument_list|<>
argument_list|(
name|this
argument_list|,
name|DataFormatClause
operator|.
name|Operation
operator|.
name|Unmarshal
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormatType  the dataformat      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|unmarshal (DataFormatDefinition dataFormatType)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|DataFormatDefinition
name|dataFormatType
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|UnmarshalDefinition
argument_list|(
name|dataFormatType
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormat  the dataformat      * @return the builder      */
DECL|method|unmarshal (DataFormat dataFormat)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
return|return
name|unmarshal
argument_list|(
operator|new
name|DataFormatDefinition
argument_list|(
name|dataFormat
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * reference in the {@link org.apache.camel.spi.Registry} and sets      * the output on the out message body.      *      * @param dataTypeRef  reference to a {@link DataFormat} to lookup in the registry      * @return the builder      */
DECL|method|unmarshal (String dataTypeRef)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|String
name|dataTypeRef
parameter_list|)
block|{
return|return
name|unmarshal
argument_list|(
operator|new
name|CustomDataFormat
argument_list|(
name|dataTypeRef
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using a {@link DataFormat} expression to define      * the format of the output which will be added to the out body.      *      * @return the expression to create the {@link DataFormat}      */
DECL|method|marshal ()
specifier|public
name|DataFormatClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|marshal
parameter_list|()
block|{
return|return
operator|new
name|DataFormatClause
argument_list|<>
argument_list|(
name|this
argument_list|,
name|DataFormatClause
operator|.
name|Operation
operator|.
name|Marshal
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormatType  the dataformat      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|marshal (DataFormatDefinition dataFormatType)
specifier|public
name|Type
name|marshal
parameter_list|(
name|DataFormatDefinition
name|dataFormatType
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|MarshalDefinition
argument_list|(
name|dataFormatType
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormat  the dataformat      * @return the builder      */
DECL|method|marshal (DataFormat dataFormat)
specifier|public
name|Type
name|marshal
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
return|return
name|marshal
argument_list|(
operator|new
name|DataFormatDefinition
argument_list|(
name|dataFormat
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body the specified {@link DataFormat}      * reference in the {@link org.apache.camel.spi.Registry} and sets      * the output on the out message body.      *      * @param dataTypeRef  reference to a {@link DataFormat} to lookup in the registry      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|marshal (String dataTypeRef)
specifier|public
name|Type
name|marshal
parameter_list|(
name|String
name|dataTypeRef
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|MarshalDefinition
argument_list|(
operator|new
name|CustomDataFormat
argument_list|(
name|dataTypeRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sets whether or not to inherit the configured error handler.      *<br/>      * The default value is<tt>true</tt>.      *<p/>      * You can use this to disable using the inherited error handler for a given      * DSL such as a load balancer where you want to use a custom error handler strategy.      *      * @param inheritErrorHandler whether to not to inherit the error handler for this node      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|inheritErrorHandler (boolean inheritErrorHandler)
specifier|public
name|Type
name|inheritErrorHandler
parameter_list|(
name|boolean
name|inheritErrorHandler
parameter_list|)
block|{
comment|// set on last output
name|int
name|size
init|=
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
comment|// if no outputs then configure this DSL
name|setInheritErrorHandler
argument_list|(
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// configure on last output as its the intended
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
init|=
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|setInheritErrorHandler
argument_list|(
name|inheritErrorHandler
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getParent ()
specifier|public
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|setParent (ProcessorDefinition<?> parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|getInterceptStrategies ()
specifier|public
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|getInterceptStrategies
parameter_list|()
block|{
return|return
name|interceptStrategies
return|;
block|}
DECL|method|addInterceptStrategy (InterceptStrategy strategy)
specifier|public
name|void
name|addInterceptStrategy
parameter_list|(
name|InterceptStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|interceptStrategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
DECL|method|isInheritErrorHandler ()
specifier|public
name|Boolean
name|isInheritErrorHandler
parameter_list|()
block|{
return|return
name|inheritErrorHandler
return|;
block|}
DECL|method|setInheritErrorHandler (Boolean inheritErrorHandler)
specifier|public
name|void
name|setInheritErrorHandler
parameter_list|(
name|Boolean
name|inheritErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|inheritErrorHandler
operator|=
name|inheritErrorHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOtherAttributes ()
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|getOtherAttributes
parameter_list|()
block|{
return|return
name|otherAttributes
return|;
block|}
annotation|@
name|Override
DECL|method|setOtherAttributes (Map<QName, Object> otherAttributes)
specifier|public
name|void
name|setOtherAttributes
parameter_list|(
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|otherAttributes
parameter_list|)
block|{
name|this
operator|.
name|otherAttributes
operator|=
name|otherAttributes
expr_stmt|;
block|}
comment|/**      * Returns a label to describe this node such as the expression if some kind of expression node      */
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

