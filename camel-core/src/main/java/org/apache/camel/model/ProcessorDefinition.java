begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DataFormatClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|LanguageExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DefaultChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|InterceptEndpointProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Delayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|StreamCaching
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TransactedPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|Builder
operator|.
name|body
import|;
end_import

begin_comment
comment|/**  * Base class for processor types that most XML types extend.  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|PROPERTY
argument_list|)
DECL|class|ProcessorDefinition
specifier|public
specifier|abstract
class|class
name|ProcessorDefinition
parameter_list|<
name|Type
extends|extends
name|ProcessorDefinition
parameter_list|>
extends|extends
name|OptionalIdentifiedDefinition
implements|implements
name|Block
block|{
DECL|field|log
specifier|protected
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|errorHandlerBuilder
specifier|protected
name|ErrorHandlerBuilder
name|errorHandlerBuilder
decl_stmt|;
DECL|field|errorHandlerRef
specifier|protected
name|String
name|errorHandlerRef
decl_stmt|;
DECL|field|nodeFactory
specifier|private
name|NodeFactory
name|nodeFactory
decl_stmt|;
DECL|field|blocks
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
operator|new
name|LinkedList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|parent
specifier|private
name|ProcessorDefinition
name|parent
decl_stmt|;
DECL|field|interceptStrategies
specifier|private
specifier|final
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptStrategy
argument_list|>
argument_list|()
decl_stmt|;
comment|// else to use an optional attribute in JAXB2
DECL|method|getOutputs ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|getOutputs
parameter_list|()
function_decl|;
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet for class: "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|createOutputsProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|>
name|outputs
init|=
name|getOutputs
argument_list|()
decl_stmt|;
return|return
name|createOutputsProcessor
argument_list|(
name|routeContext
argument_list|,
name|outputs
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addOutput (ProcessorDefinition processorType)
specifier|public
name|void
name|addOutput
parameter_list|(
name|ProcessorDefinition
name|processorType
parameter_list|)
block|{
name|processorType
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|configureChild
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Block
name|block
init|=
name|blocks
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|block
operator|.
name|addOutput
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clearOutput ()
specifier|public
name|void
name|clearOutput
parameter_list|()
block|{
name|getOutputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|addRoutes (RouteContext routeContext, Collection<Route> routes)
specifier|public
name|void
name|addRoutes
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|makeProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
comment|// no processor to add
return|return;
block|}
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isRouteAdded
argument_list|()
condition|)
block|{
name|boolean
name|endpointInterceptor
init|=
literal|false
decl_stmt|;
comment|// are we routing to an endpoint interceptor, if so we should not add it as an event driven
comment|// processor as we use the producer to trigger the interceptor
if|if
condition|(
name|processor
operator|instanceof
name|Channel
condition|)
block|{
name|Channel
name|channel
init|=
operator|(
name|Channel
operator|)
name|processor
decl_stmt|;
name|Processor
name|next
init|=
name|channel
operator|.
name|getNextProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|InterceptEndpointProcessor
condition|)
block|{
name|endpointInterceptor
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// only add regular processors as event driven
if|if
condition|(
name|endpointInterceptor
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Endpoint interceptor should not be added as an event driven consumer route: "
operator|+
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Adding event driven processor: "
operator|+
name|processor
argument_list|)
expr_stmt|;
block|}
name|routeContext
operator|.
name|addEventDrivenProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Wraps the child processor in whatever necessary interceptors and error handlers      */
DECL|method|wrapProcessor (RouteContext routeContext, Processor processor)
specifier|public
name|Processor
name|wrapProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// dont double wrap
if|if
condition|(
name|processor
operator|instanceof
name|Channel
condition|)
block|{
return|return
name|processor
return|;
block|}
return|return
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|wrapChannel (RouteContext routeContext, Processor processor)
specifier|protected
name|Processor
name|wrapChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// put a channel in between this and each output to control the route flow logic
name|Channel
name|channel
init|=
name|createChannel
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
name|channel
operator|.
name|setNextProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
comment|// add interceptor strategies to the channel must be in this order: camel context, route context, local
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|routeContext
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|routeContext
operator|.
name|getManagedInterceptStrategy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|addInterceptStrategy
argument_list|(
name|routeContext
operator|.
name|getManagedInterceptStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addInterceptStrategies
argument_list|(
name|routeContext
argument_list|,
name|channel
argument_list|,
name|this
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
comment|// init the channel
name|channel
operator|.
name|initChannel
argument_list|(
name|this
argument_list|,
name|routeContext
argument_list|)
expr_stmt|;
comment|// must do this ugly cast to avoid compiler error on HP-UX
name|ProcessorDefinition
name|defn
init|=
operator|(
name|ProcessorDefinition
operator|)
name|this
decl_stmt|;
comment|// set the error handler, must be done after init as we can set the error handler as first in the chain
if|if
condition|(
name|defn
operator|instanceof
name|TryDefinition
operator|||
name|defn
operator|instanceof
name|CatchDefinition
operator|||
name|defn
operator|instanceof
name|FinallyDefinition
condition|)
block|{
comment|// do not use error handler for try .. catch .. finally blocks as it will handle errors itself
return|return
name|channel
return|;
block|}
else|else
block|{
comment|// regular definition so add the error handler
name|Processor
name|output
init|=
name|channel
operator|.
name|getOutput
argument_list|()
decl_stmt|;
comment|// create error handler
name|ErrorHandlerBuilder
name|builder
init|=
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
name|Processor
name|errorHandler
init|=
name|builder
operator|.
name|createErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// set error handler on channel
name|channel
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
comment|// invoke lifecycles so we can manage this error handler builder
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
name|strategy
operator|.
name|onErrorHandlerAdd
argument_list|(
name|routeContext
argument_list|,
name|errorHandler
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|channel
return|;
block|}
block|}
comment|/**      * Adds the given list of interceptors to the channel.      *      * @param routeContext  the route context      * @param channel       the channel to add strategies      * @param strategies    list of strategies to add.      */
DECL|method|addInterceptStrategies (RouteContext routeContext, Channel channel, List<InterceptStrategy> strategies)
specifier|protected
name|void
name|addInterceptStrategies
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|strategies
parameter_list|)
block|{
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|strategies
control|)
block|{
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isStreamCaching
argument_list|()
operator|&&
name|strategy
operator|instanceof
name|StreamCaching
condition|)
block|{
comment|// stream cache is disabled so we should not add it
continue|continue;
block|}
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isHandleFault
argument_list|()
operator|&&
name|strategy
operator|instanceof
name|HandleFault
condition|)
block|{
comment|// handle fault is disabled so we should not add it
continue|continue;
block|}
if|if
condition|(
name|strategy
operator|instanceof
name|Delayer
condition|)
block|{
if|if
condition|(
name|routeContext
operator|.
name|getDelayer
argument_list|()
operator|==
literal|null
operator|||
name|routeContext
operator|.
name|getDelayer
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// delayer is disabled so we should not add it
continue|continue;
block|}
else|else
block|{
comment|// replace existing delayer as delayer have individual configuration
name|Iterator
argument_list|<
name|InterceptStrategy
argument_list|>
name|it
init|=
name|channel
operator|.
name|getInterceptStrategies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|InterceptStrategy
name|existing
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|existing
operator|instanceof
name|Delayer
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// add the new correct delayer
name|channel
operator|.
name|addInterceptStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// add strategy
name|channel
operator|.
name|addInterceptStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new instance of some kind of composite processor which defaults      * to using a {@link Pipeline} but derived classes could change the behaviour      */
DECL|method|createCompositeProcessor (RouteContext routeContext, List<Processor> list)
specifier|protected
name|Processor
name|createCompositeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|List
argument_list|<
name|Processor
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|Pipeline
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/**      * Creates a new instance of the {@link Channel}.      */
DECL|method|createChannel (RouteContext routeContext)
specifier|protected
name|Channel
name|createChannel
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
return|return
operator|new
name|DefaultChannel
argument_list|()
return|;
block|}
DECL|method|createOutputsProcessor (RouteContext routeContext, Collection<ProcessorDefinition> outputs)
specifier|protected
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|ProcessorDefinition
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Processor
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
name|output
range|:
name|outputs
control|)
block|{
name|Processor
name|processor
init|=
name|output
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|instanceof
name|Channel
operator|&&
name|processor
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Processor
name|channel
init|=
name|wrapChannel
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
comment|// if more than one output wrap than in a composite processor else just keep it as is
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|processor
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|=
name|createCompositeProcessor
argument_list|(
name|routeContext
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processor
return|;
block|}
comment|/**      * Creates the processor and wraps it in any necessary interceptors and error handlers      */
DECL|method|makeProcessor (RouteContext routeContext)
specifier|protected
name|Processor
name|makeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
comment|// no processor to make
return|return
literal|null
return|;
block|}
return|return
name|wrapProcessor
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|createErrorHandlerBuilder ()
specifier|protected
name|ErrorHandlerBuilder
name|createErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerRef
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
return|;
block|}
comment|// return a reference to the default error handler
return|return
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|ErrorHandlerBuilderRef
operator|.
name|DEFAULT_ERROR_HANDLER_BUILDER
argument_list|)
return|;
block|}
DECL|method|configureChild (ProcessorDefinition output)
specifier|protected
name|void
name|configureChild
parameter_list|(
name|ProcessorDefinition
name|output
parameter_list|)
block|{
name|output
operator|.
name|setNodeFactory
argument_list|(
name|getNodeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|setErrorHandlerBuilder
argument_list|(
name|getErrorHandlerBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Fluent API
comment|// -------------------------------------------------------------------------
comment|/**      * Sends the exchange to the given endpoint      *      * @param uri  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (String uri)
specifier|public
name|Type
name|to
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint      *      * @param uri  the String formatted endpoint uri to send to      * @param args arguments for the string formatting of the uri      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toF (String uri, Object... args)
specifier|public
name|Type
name|toF
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|uri
argument_list|,
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint      *      * @param endpoint  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (Endpoint endpoint)
specifier|public
name|Type
name|to
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange with certain exchange pattern to the given endpoint      *      * @param pattern the pattern to use for the message exchange      * @param uri  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, String uri)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange with certain exchange pattern to the given endpoint      *      * @param pattern the pattern to use for the message exchange      * @param endpoint  the endpoint to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, Endpoint endpoint)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param uris  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (String... uris)
specifier|public
name|Type
name|to
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (Endpoint... endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param pattern the pattern to use for the message exchanges      * @param uris  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, String... uris)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param pattern the pattern to use for the message exchanges      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, Endpoint... endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param pattern the pattern to use for the message exchanges      * @param endpoints  list of endpoints to send to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|to (ExchangePattern pattern, Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint using synchronous mode.      *      * @param uri  the endpoint to send to      * @return the builder      * @see org.apache.camel.AsyncProcessor      */
DECL|method|toAsync (String uri)
specifier|public
name|ToDefinition
name|toAsync
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|ToDefinition
name|answer
init|=
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
comment|// must push a block so we have a child route for the async reply
comment|// routing which is separated from the caller route
name|pushBlock
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint using synchronous mode.      *      * @param uri  the endpoint to send to      * @param poolSize the core pool size      * @return the builder      * @see org.apache.camel.AsyncProcessor      */
DECL|method|toAsync (String uri, int poolSize)
specifier|public
name|ToDefinition
name|toAsync
parameter_list|(
name|String
name|uri
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
name|ToDefinition
name|answer
init|=
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
comment|// must push a block so we have a child route for the async reply
comment|// routing which is separated from the caller route
name|pushBlock
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint using synchronous mode.      *      * @param endpoint  the endpoint to send to      * @return the builder      * @see org.apache.camel.AsyncProcessor      */
DECL|method|toAsync (Endpoint endpoint)
specifier|public
name|ToDefinition
name|toAsync
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|ToDefinition
name|answer
init|=
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
comment|// must push a block so we have a child route for the async reply
comment|// routing which is separated from the caller route
name|pushBlock
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint using synchronous mode.      *      * @param endpoint  the endpoint to send to      * @param poolSize the core pool size      * @return the builder      * @see org.apache.camel.AsyncProcessor      */
DECL|method|toAsync (Endpoint endpoint, int poolSize)
specifier|public
name|ToDefinition
name|toAsync
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
name|ToDefinition
name|answer
init|=
operator|new
name|ToDefinition
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
comment|// must push a block so we have a child route for the async reply
comment|// routing which is separated from the caller route
name|pushBlock
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exchange-pattern.html">ExchangePattern:</a>      * set the ExchangePattern {@link ExchangePattern} into the exchange      *      * @param exchangePattern  instance of {@link ExchangePattern}      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setExchangePattern (ExchangePattern exchangePattern)
specifier|public
name|Type
name|setExchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|SetExchangePatternDefinition
argument_list|(
name|exchangePattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exchange-pattern.html">ExchangePattern:</a>      * set the exchange's ExchangePattern {@link ExchangePattern} to be InOnly      *      *      * @return the builder      */
DECL|method|inOnly ()
specifier|public
name|Type
name|inOnly
parameter_list|()
block|{
return|return
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param uri The endpoint uri which is used for sending the exchange      * @return the builder      */
DECL|method|inOnly (String uri)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|uri
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or       *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param endpoint The endpoint which is used for sending the exchange      * @return the builder      */
DECL|method|inOnly (Endpoint endpoint)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (String... uris)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|uris
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (Endpoint... endpoints)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exchange-pattern.html">ExchangePattern:</a>      * set the exchange's ExchangePattern {@link ExchangePattern} to be InOut      *      *      * @return the builder      */
DECL|method|inOut ()
specifier|public
name|Type
name|inOut
parameter_list|()
block|{
return|return
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param uri The endpoint uri which is used for sending the exchange      * @return the builder      */
DECL|method|inOut (String uri)
specifier|public
name|Type
name|inOut
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|uri
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param endpoint The endpoint which is used for sending the exchange      * @return the builder      */
DECL|method|inOut (Endpoint endpoint)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (String... uris)
specifier|public
name|Type
name|inOut
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|uris
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (Endpoint... endpoints)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sets the id of this node      *      * @param id  the id      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|id (String id)
specifier|public
name|Type
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|getOutputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// set id on this
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set it on last output as this is what the user means to do
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
name|getOutputs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Set the route id for this route      *      * @param id  the route id      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|routeId (String id)
specifier|public
name|Type
name|routeId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|ProcessorDefinition
name|def
init|=
name|this
decl_stmt|;
comment|// drill to the top
while|while
condition|(
name|def
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|def
operator|=
name|def
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|instanceof
name|RouteDefinition
condition|)
block|{
name|RouteDefinition
name|route
init|=
operator|(
name|RouteDefinition
operator|)
name|def
decl_stmt|;
name|route
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @return the builder      */
DECL|method|multicast ()
specifier|public
name|MulticastDefinition
name|multicast
parameter_list|()
block|{
name|MulticastDefinition
name|answer
init|=
operator|new
name|MulticastDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @param aggregationStrategy the strategy used to aggregate responses for      *          every part      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @return the builder      */
DECL|method|multicast (AggregationStrategy aggregationStrategy, boolean parallelProcessing)
specifier|public
name|MulticastDefinition
name|multicast
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|MulticastDefinition
name|answer
init|=
operator|new
name|MulticastDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @param aggregationStrategy the strategy used to aggregate responses for      *          every part      * @return the builder      */
DECL|method|multicast (AggregationStrategy aggregationStrategy)
specifier|public
name|MulticastDefinition
name|multicast
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|MulticastDefinition
name|answer
init|=
operator|new
name|MulticastDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @return the builder      */
DECL|method|pipeline ()
specifier|public
name|PipelineDefinition
name|pipeline
parameter_list|()
block|{
name|PipelineDefinition
name|answer
init|=
operator|new
name|PipelineDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param uris  list of endpoints      * @return the builder      */
DECL|method|pipeline (String... uris)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|uris
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param endpoints  list of endpoints      * @return the builder      */
DECL|method|pipeline (Endpoint... endpoints)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param endpoints  list of endpoints      * @return the builder      */
DECL|method|pipeline (Collection<Endpoint> endpoints)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Leverages a thread pool for multi threading processing exchanges.      *<p/>      * The caller thread will either wait for the async route      * to complete or imeddiately continue. If continue the OUT message will      * contain a {@link java.util.concurrent.Future} handle so you can get the real response      * later using this handle.      *<p/>      * Will default<tt>Always</tt> wait for the async route to complete, but this behavior can be overriden by:      *<ul>      *<li>Configuring the<tt>waitForTaskToComplete</tt> option</li>      *<li>Provide an IN header with the key {@link org.apache.camel.Exchange#ASYNC_WAIT} with the      * value containing a type {@link org.apache.camel.WaitForTaskToComplete}. The header will take precedence, if provided.</li>      *</ul>      *      * @return the builder      */
DECL|method|threads ()
specifier|public
name|ThreadsDefinition
name|threads
parameter_list|()
block|{
name|ThreadsDefinition
name|answer
init|=
operator|new
name|ThreadsDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Leverages a thread pool for multi threading processing exchanges.      *<p/>      * See {@link #threads()} for more details.      *      * @param poolSize the core pool size      * @return the builder      */
DECL|method|threads (int poolSize)
specifier|public
name|ThreadsDefinition
name|threads
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|ThreadsDefinition
name|answer
init|=
name|threads
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Wraps the sub route using AOP allowing you to do before and after work (AOP around).      *      * @return the builder      */
DECL|method|aop ()
specifier|public
name|AOPDefinition
name|aop
parameter_list|()
block|{
name|AOPDefinition
name|answer
init|=
operator|new
name|AOPDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Ends the current block      *      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|end ()
specifier|public
name|ProcessorDefinition
argument_list|<
name|?
extends|extends
name|ProcessorDefinition
argument_list|>
name|end
parameter_list|()
block|{
comment|// when using doTry .. doCatch .. doFinally we should always
comment|// end the try definition to avoid having to use 2 x end() in the route
comment|// this is counter intuitive for end users
name|ProcessorDefinition
name|defn
init|=
operator|(
name|ProcessorDefinition
operator|)
name|this
decl_stmt|;
if|if
condition|(
name|defn
operator|instanceof
name|TryDefinition
condition|)
block|{
name|popBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|parent
return|;
block|}
name|popBlock
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *            * @return the builder      */
DECL|method|idempotentConsumer ()
specifier|public
name|IdempotentConsumerDefinition
name|idempotentConsumer
parameter_list|()
block|{
name|IdempotentConsumerDefinition
name|answer
init|=
operator|new
name|IdempotentConsumerDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *      * @param messageIdExpression  expression to test of duplicate messages      * @param idempotentRepository  the repository to use for duplicate chedck      * @return the builder      */
DECL|method|idempotentConsumer (Expression messageIdExpression, IdempotentRepository idempotentRepository)
specifier|public
name|IdempotentConsumerDefinition
name|idempotentConsumer
parameter_list|(
name|Expression
name|messageIdExpression
parameter_list|,
name|IdempotentRepository
name|idempotentRepository
parameter_list|)
block|{
name|IdempotentConsumerDefinition
name|answer
init|=
operator|new
name|IdempotentConsumerDefinition
argument_list|(
name|messageIdExpression
argument_list|,
name|idempotentRepository
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *      * @param idempotentRepository the repository to use for duplicate chedck      * @return the builder used to create the expression      */
DECL|method|idempotentConsumer (IdempotentRepository idempotentRepository)
specifier|public
name|ExpressionClause
argument_list|<
name|IdempotentConsumerDefinition
argument_list|>
name|idempotentConsumer
parameter_list|(
name|IdempotentRepository
name|idempotentRepository
parameter_list|)
block|{
name|IdempotentConsumerDefinition
name|answer
init|=
operator|new
name|IdempotentConsumerDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setMessageIdRepository
argument_list|(
name|idempotentRepository
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @return the clause used to create the filter expression      */
DECL|method|filter ()
specifier|public
name|ExpressionClause
argument_list|<
name|FilterDefinition
argument_list|>
name|filter
parameter_list|()
block|{
name|FilterDefinition
name|filter
init|=
operator|new
name|FilterDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|filter
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate which is applied and only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param predicate  predicate to use      * @return the builder       */
DECL|method|filter (Predicate predicate)
specifier|public
name|FilterDefinition
name|filter
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|FilterDefinition
name|filter
init|=
operator|new
name|FilterDefinition
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param expression  the predicate expression to use      * @return the builder      */
DECL|method|filter (ExpressionDefinition expression)
specifier|public
name|FilterDefinition
name|filter
parameter_list|(
name|ExpressionDefinition
name|expression
parameter_list|)
block|{
name|FilterDefinition
name|filter
init|=
name|getNodeFactory
argument_list|()
operator|.
name|createFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate language expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param language     language for expression      * @param expression   the expression      * @return the builder      */
DECL|method|filter (String language, String expression)
specifier|public
name|FilterDefinition
name|filter
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
return|return
name|filter
argument_list|(
operator|new
name|LanguageExpression
argument_list|(
name|language
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/load-balancer.html">Load Balancer EIP:</a>      * Creates a loadbalance      *      * @return  the builder      */
DECL|method|loadBalance ()
specifier|public
name|LoadBalanceDefinition
name|loadBalance
parameter_list|()
block|{
name|LoadBalanceDefinition
name|answer
init|=
operator|new
name|LoadBalanceDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/load-balancer.html">Load Balancer EIP:</a>      * Creates a loadbalance      *      * @param loadBalancer a custom load balancer to use      * @return  the builder      */
DECL|method|loadBalance (LoadBalancer loadBalancer)
specifier|public
name|LoadBalanceDefinition
name|loadBalance
parameter_list|(
name|LoadBalancer
name|loadBalancer
parameter_list|)
block|{
name|LoadBalanceDefinition
name|answer
init|=
operator|new
name|LoadBalanceDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
operator|.
name|loadBalance
argument_list|(
name|loadBalancer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/content-based-router.html">Content Based Router EIP:</a>      * Creates a choice of one or more predicates with an otherwise clause      *      * @return the builder for a choice expression      */
DECL|method|choice ()
specifier|public
name|ChoiceDefinition
name|choice
parameter_list|()
block|{
name|ChoiceDefinition
name|answer
init|=
operator|new
name|ChoiceDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a try/catch block      *      * @return the builder for a tryBlock expression      */
DECL|method|doTry ()
specifier|public
name|TryDefinition
name|doTry
parameter_list|()
block|{
name|TryDefinition
name|answer
init|=
operator|new
name|TryDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients.      *<p/>      * Will use comma as default delimiter.      *      * @param recipients expression to decide the destinations      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|recipientList (Expression recipients)
specifier|public
name|Type
name|recipientList
parameter_list|(
name|Expression
name|recipients
parameter_list|)
block|{
name|RecipientListDefinition
name|answer
init|=
operator|new
name|RecipientListDefinition
argument_list|(
name|recipients
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients      *      * @param recipients expression to decide the destinations      * @param delimiter  a custom delimiter to use      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|recipientList (Expression recipients, String delimiter)
specifier|public
name|Type
name|recipientList
parameter_list|(
name|Expression
name|recipients
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
name|RecipientListDefinition
name|answer
init|=
operator|new
name|RecipientListDefinition
argument_list|(
name|recipients
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients      *      * @return the expression clause to configure the expression to decide the destinations      */
DECL|method|recipientList ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|recipientList
parameter_list|()
block|{
name|RecipientListDefinition
name|answer
init|=
operator|new
name|RecipientListDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExpression
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/routing-slip.html">Routing Slip EIP:</a>      * Creates a routing slip allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *      * @param header  is the header that the {@link org.apache.camel.processor.RoutingSlip RoutingSlip}      *                class will look in for the list of URIs to route the message to.      * @param uriDelimiter  is the delimiter that will be used to split up      *                      the list of URIs in the routing slip.      * @return the buiider      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|routingSlip (String header, String uriDelimiter)
specifier|public
name|Type
name|routingSlip
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|uriDelimiter
parameter_list|)
block|{
name|RoutingSlipDefinition
name|answer
init|=
operator|new
name|RoutingSlipDefinition
argument_list|(
name|header
argument_list|,
name|uriDelimiter
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/routing-slip.html">Routing Slip EIP:</a>      * Creates a routing slip allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *<p>      * The list of URIs will be split based on the default delimiter {@link RoutingSlipDefinition#DEFAULT_DELIMITER}      *      * @param header  is the header that the {@link org.apache.camel.processor.RoutingSlip RoutingSlip}      *                class will look in for the list of URIs to route the message to.      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|routingSlip (String header)
specifier|public
name|Type
name|routingSlip
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|RoutingSlipDefinition
name|answer
init|=
operator|new
name|RoutingSlipDefinition
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * This splitter responds with the latest message returned from destination      * endpoint.      *      * @return the expression clause builder for the expression on which to split      */
DECL|method|split ()
specifier|public
name|ExpressionClause
argument_list|<
name|SplitDefinition
argument_list|>
name|split
parameter_list|()
block|{
name|SplitDefinition
name|answer
init|=
operator|new
name|SplitDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * This splitter responds with the latest message returned from destination      * endpoint.      *      * @param expression  the expression on which to split the message      * @return the builder      */
DECL|method|split (Expression expression)
specifier|public
name|SplitDefinition
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|SplitDefinition
name|answer
init|=
operator|new
name|SplitDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param expression  the expression on which to split      * @param aggregationStrategy  the strategy used to aggregate responses for every part      * @return the builder      */
DECL|method|split (Expression expression, AggregationStrategy aggregationStrategy)
specifier|public
name|SplitDefinition
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|SplitDefinition
name|answer
init|=
operator|new
name|SplitDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @return the expression clause for the expressions on which to compare messages in order      */
DECL|method|resequence ()
specifier|public
name|ExpressionClause
argument_list|<
name|ResequenceDefinition
argument_list|>
name|resequence
parameter_list|()
block|{
name|ResequenceDefinition
name|answer
init|=
operator|new
name|ResequenceDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|ExpressionClause
argument_list|<
name|ResequenceDefinition
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ResequenceDefinition
argument_list|>
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|.
name|expression
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @param expression the expression on which to compare messages in order      * @return the builder      */
DECL|method|resequence (Expression expression)
specifier|public
name|ResequenceDefinition
name|resequence
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|resequence
argument_list|(
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|singletonList
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @param expressions the list of expressions on which to compare messages in order      * @return the builder      */
DECL|method|resequence (List<Expression> expressions)
specifier|public
name|ResequenceDefinition
name|resequence
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|ResequenceDefinition
name|answer
init|=
operator|new
name|ResequenceDefinition
argument_list|(
name|expressions
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a splitter allowing you to reorganise messages based on some comparator.      *      * @param expressions the list of expressions on which to compare messages in order      * @return the builder      */
DECL|method|resequencer (Expression... expressions)
specifier|public
name|ResequenceDefinition
name|resequencer
parameter_list|(
name|Expression
modifier|...
name|expressions
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expressions
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resequence
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @return the expression clause to be used as builder to configure the correlation expression      */
DECL|method|aggregate ()
specifier|public
name|ExpressionClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|aggregate
parameter_list|()
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
operator|.
name|createAndSetExpression
argument_list|()
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param aggregationStrategy the strategy used for the aggregation      * @return the expression clause to be used as builder to configure the correlation expression      */
DECL|method|aggregate (AggregationStrategy aggregationStrategy)
specifier|public
name|ExpressionClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|aggregate
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
operator|.
name|createAndSetExpression
argument_list|()
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param aggregationCollection the collection used to perform the aggregation      * @return the builder      */
DECL|method|aggregate (AggregationCollection aggregationCollection)
specifier|public
name|AggregateDefinition
name|aggregate
parameter_list|(
name|AggregationCollection
name|aggregationCollection
parameter_list|)
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setAggregationCollection
argument_list|(
name|aggregationCollection
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param correlationExpression the expression used to calculate the      *                              correlation key. For a JMS message this could be the      *                              expression<code>header("JMSDestination")</code> or      *<code>header("JMSCorrelationID")</code>      * @return the builder      */
DECL|method|aggregate (Expression correlationExpression)
specifier|public
name|AggregateDefinition
name|aggregate
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|)
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|(
name|correlationExpression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param correlationExpression the expression used to calculate the      *                              correlation key. For a JMS message this could be the      *                              expression<code>header("JMSDestination")</code> or      *<code>header("JMSCorrelationID")</code>      * @param aggregationStrategy the strategy used for the aggregation      * @return the builder      */
DECL|method|aggregate (Expression correlationExpression, AggregationStrategy aggregationStrategy)
specifier|public
name|AggregateDefinition
name|aggregate
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|AggregateDefinition
name|answer
init|=
operator|new
name|AggregateDefinition
argument_list|(
name|correlationExpression
argument_list|,
name|aggregationStrategy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @param delay  an expression to calculate the delay time in millis      * @return the builder      */
DECL|method|delay (Expression delay)
specifier|public
name|DelayDefinition
name|delay
parameter_list|(
name|Expression
name|delay
parameter_list|)
block|{
name|DelayDefinition
name|answer
init|=
operator|new
name|DelayDefinition
argument_list|(
name|delay
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @return the expression clause to create the expression      */
DECL|method|delay ()
specifier|public
name|ExpressionClause
argument_list|<
name|DelayDefinition
argument_list|>
name|delay
parameter_list|()
block|{
name|DelayDefinition
name|answer
init|=
operator|new
name|DelayDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @param delay  the delay in millis      * @return the builder      */
DECL|method|delay (long delay)
specifier|public
name|DelayDefinition
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
return|return
name|delay
argument_list|(
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|delay
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/throttler.html">Throttler EIP:</a>      * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,      * or that we don't exceed an agreed SLA with some external service.      *<p/>      * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10      * will default ensure at most 10 messages per second.       *      * @param maximumRequestCount  the maximum messages       * @return the builder      */
DECL|method|throttle (long maximumRequestCount)
specifier|public
name|ThrottleDefinition
name|throttle
parameter_list|(
name|long
name|maximumRequestCount
parameter_list|)
block|{
name|ThrottleDefinition
name|answer
init|=
operator|new
name|ThrottleDefinition
argument_list|(
name|maximumRequestCount
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way. Useful mostly for testing.      *      * @return the clause used to create the loop expression      */
DECL|method|loop ()
specifier|public
name|ExpressionClause
argument_list|<
name|LoopDefinition
argument_list|>
name|loop
parameter_list|()
block|{
name|LoopDefinition
name|loop
init|=
operator|new
name|LoopDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|loop
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way. Useful mostly for testing.      *      * @param expression the loop expression      * @return the builder      */
DECL|method|loop (Expression expression)
specifier|public
name|LoopDefinition
name|loop
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|LoopDefinition
name|loop
init|=
name|getNodeFactory
argument_list|()
operator|.
name|createLoop
argument_list|()
decl_stmt|;
name|loop
operator|.
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|loop
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way. Useful mostly for testing.      *      * @param count  the number of times      * @return the builder      */
DECL|method|loop (int count)
specifier|public
name|LoopDefinition
name|loop
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|LoopDefinition
name|loop
init|=
name|getNodeFactory
argument_list|()
operator|.
name|createLoop
argument_list|()
decl_stmt|;
name|loop
operator|.
name|setExpression
argument_list|(
operator|new
name|ConstantExpression
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|loop
return|;
block|}
comment|/**      * Sets the exception on the {@link org.apache.camel.Exchange}      *      * @param exception the exception to throw      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|throwException (Exception exception)
specifier|public
name|Type
name|throwException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|ThrowExceptionDefinition
name|answer
init|=
operator|new
name|ThrowExceptionDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Marks the exchange for rollback only.      *<p/>      * Does<b>not</b> set any exception as opposed to {@link #rollback()} methods.      *      * @return the builder      * @see #rollback()      * @see #rollback(String)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|markRollbackOnly ()
specifier|public
name|Type
name|markRollbackOnly
parameter_list|()
block|{
name|RollbackDefinition
name|answer
init|=
operator|new
name|RollbackDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setMarkRollbackOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Marks the exchange for rollback only and sets an exception with a default message.      *<p/>      * This is done by setting a {@link org.apache.camel.RollbackExchangeException} on the Exchange      * and mark it for rollback.      *      * @return the builder      * @see #markRollbackOnly()      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|rollback ()
specifier|public
name|Type
name|rollback
parameter_list|()
block|{
return|return
name|rollback
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Marks the exchange for rollback and sets an exception with the provided message.      *<p/>      * This is done by setting a {@link org.apache.camel.RollbackExchangeException} on the Exchange      * and mark it for rollback.      *      * @param message an optional message used for logging purpose why the rollback was triggered      * @return the builder      * @see #markRollbackOnly()      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|rollback (String message)
specifier|public
name|Type
name|rollback
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|RollbackDefinition
name|answer
init|=
operator|new
name|RollbackDefinition
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/wiretap.html">WireTap EIP:</a>      * Sends messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other using {@link ExchangePattern#InOnly}.      *      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|wireTap (String uri)
specifier|public
name|Type
name|wireTap
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|WireTapDefinition
name|answer
init|=
operator|new
name|WireTapDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/wiretap.html">WireTap EIP:</a>      * Sends a new {@link org.apache.camel.Exchange} to the destination      * using {@link ExchangePattern#InOnly}.      *      * @param uri  the destination      * @param body expression that creates the body to send      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|wireTap (String uri, Expression body)
specifier|public
name|Type
name|wireTap
parameter_list|(
name|String
name|uri
parameter_list|,
name|Expression
name|body
parameter_list|)
block|{
name|WireTapDefinition
name|answer
init|=
operator|new
name|WireTapDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setNewExchangeExpression
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/wiretap.html">WireTap EIP:</a>      * Sends a new {@link org.apache.camel.Exchange} to the destination      * using {@link ExchangePattern#InOnly}.      *      * @param uri  the destination      * @param processor  processor preparing the new exchange to send      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|wireTap (String uri, Processor processor)
specifier|public
name|Type
name|wireTap
parameter_list|(
name|String
name|uri
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|WireTapDefinition
name|answer
init|=
operator|new
name|WireTapDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setNewExchangeProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Pushes the given block on the stack as current block      * @param block  the block      */
DECL|method|pushBlock (Block block)
name|void
name|pushBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|blocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pops the block off the stack as current block      * @return the block      */
DECL|method|popBlock ()
name|Block
name|popBlock
parameter_list|()
block|{
return|return
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|blocks
operator|.
name|removeLast
argument_list|()
return|;
block|}
comment|/**      * Stops continue routing the current {@link org.apache.camel.Exchange} and marks it as completed.      *      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|stop ()
specifier|public
name|Type
name|stop
parameter_list|()
block|{
name|StopDefinition
name|stop
init|=
operator|new
name|StopDefinition
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|stop
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exception-clause.html">Exception clause</a>      * for cathing certain exceptions and handling them.      *      * @param exceptionType  the exception to catch      * @return the exception builder to configure      */
DECL|method|onException (Class exceptionType)
specifier|public
name|OnExceptionDefinition
name|onException
parameter_list|(
name|Class
name|exceptionType
parameter_list|)
block|{
name|OnExceptionDefinition
name|answer
init|=
operator|new
name|OnExceptionDefinition
argument_list|(
name|exceptionType
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Apply a {@link Policy}.      *<p/>      * Policy can be used for transactional policies.      *      * @param policy  the policy to apply      * @return the policy builder to configure      */
DECL|method|policy (Policy policy)
specifier|public
name|PolicyDefinition
name|policy
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
name|PolicyDefinition
name|answer
init|=
operator|new
name|PolicyDefinition
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Apply a {@link Policy}.      *<p/>      * Policy can be used for transactional policies.      *      * @param ref  reference to lookup a policy in the registry      * @return the policy builder to configure      */
DECL|method|policy (String ref)
specifier|public
name|PolicyDefinition
name|policy
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|PolicyDefinition
name|answer
init|=
operator|new
name|PolicyDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Marks this route as transacted and uses the default transacted policy found in the registry.      *      * @return the policy builder to configure      */
DECL|method|transacted ()
specifier|public
name|PolicyDefinition
name|transacted
parameter_list|()
block|{
name|PolicyDefinition
name|answer
init|=
operator|new
name|PolicyDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setType
argument_list|(
name|TransactedPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Marks this route as transacted.      *      * @param ref  reference to lookup a transacted policy in the registry      * @return the policy builder to configure      */
DECL|method|transacted (String ref)
specifier|public
name|PolicyDefinition
name|transacted
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|PolicyDefinition
name|answer
init|=
operator|new
name|PolicyDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setType
argument_list|(
name|TransactedPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|// Transformers
comment|// -------------------------------------------------------------------------
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds the custom processor to this destination which could be a final      * destination, or could be a transformation in a pipeline      *      * @param processor  the custom {@link Processor}      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|process (Processor processor)
specifier|public
name|Type
name|process
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|ProcessDefinition
name|answer
init|=
operator|new
name|ProcessDefinition
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds the custom processor reference to this destination which could be a final      * destination, or could be a transformation in a pipeline      *      * @param ref   reference to a {@link Processor} to lookup in the registry      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processRef (String ref)
specifier|public
name|Type
name|processRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|ProcessDefinition
name|answer
init|=
operator|new
name|ProcessDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Object bean)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke      * @param method  the method name to invoke on the bean (can be used to avoid ambiguty)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Object bean, String method)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param  beanType  the bean class, Camel will instantiate an object at runtime      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Class beanType)
specifier|public
name|Type
name|bean
parameter_list|(
name|Class
name|beanType
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBeanType
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param  beanType  the bean class, Camel will instantiate an object at runtime      * @param method  the method name to invoke on the bean (can be used to avoid ambiguty)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bean (Class beanType, String method)
specifier|public
name|Type
name|bean
parameter_list|(
name|Class
name|beanType
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBeanType
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param ref  reference to a bean to lookup in the registry      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|beanRef (String ref)
specifier|public
name|Type
name|beanRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param ref  reference to a bean to lookup in the registry      * @param method  the method name to invoke on the bean (can be used to avoid ambiguty)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|beanRef (String ref, String method)
specifier|public
name|Type
name|beanRef
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanDefinition
name|answer
init|=
operator|new
name|BeanDefinition
argument_list|(
name|ref
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @return a expression builder clause to set the body      */
DECL|method|setBody ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setBody
parameter_list|()
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SetBodyDefinition
name|answer
init|=
operator|new
name|SetBodyDefinition
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @param expression   the expression used to set the body      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setBody (Expression expression)
specifier|public
name|Type
name|setBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|SetBodyDefinition
name|answer
init|=
operator|new
name|SetBodyDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the OUT message      *      * @param expression   the expression used to set the body      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|transform (Expression expression)
specifier|public
name|Type
name|transform
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|TransformDefinition
name|answer
init|=
operator|new
name|TransformDefinition
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the OUT message      *      * @return a expression builder clause to set the body      */
DECL|method|transform ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|transform
parameter_list|()
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
operator|(
name|Type
operator|)
name|this
argument_list|)
decl_stmt|;
name|TransformDefinition
name|answer
init|=
operator|new
name|TransformDefinition
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the body on the FAULT message      *      * @param expression   the expression used to set the body      * @return the builder      */
DECL|method|setFaultBody (Expression expression)
specifier|public
name|Type
name|setFaultBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setFaultBody
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      *      * @param name  the header name      * @return a expression builder clause to set the header      */
DECL|method|setHeader (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SetHeaderDefinition
name|answer
init|=
operator|new
name|SetHeaderDefinition
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      *      * @param name  the header name      * @param expression  the expression used to set the header      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setHeader (String name, Expression expression)
specifier|public
name|Type
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetHeaderDefinition
name|answer
init|=
operator|new
name|SetHeaderDefinition
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the header on the OUT message      *      * @param name  the header name      * @return a expression builder clause to set the header      */
DECL|method|setOutHeader (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setOutHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SetOutHeaderDefinition
name|answer
init|=
operator|new
name|SetOutHeaderDefinition
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the header on the OUT message      *      * @param name  the header name      * @param expression  the expression used to set the header      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setOutHeader (String name, Expression expression)
specifier|public
name|Type
name|setOutHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetOutHeaderDefinition
name|answer
init|=
operator|new
name|SetOutHeaderDefinition
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the header on the FAULT message      *      * @param name  the header name      * @param expression  the expression used to set the header      * @return the builder      */
DECL|method|setFaultHeader (String name, Expression expression)
specifier|public
name|Type
name|setFaultHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setFaultHeader
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the exchange property      *      * @param name  the property name      * @param expression  the expression used to set the property      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setProperty (String name, Expression expression)
specifier|public
name|Type
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetPropertyDefinition
name|answer
init|=
operator|new
name|SetPropertyDefinition
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the exchange property      *      * @param name  the property name      * @return a expression builder clause to set the property      */
DECL|method|setProperty (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SetPropertyDefinition
name|answer
init|=
operator|new
name|SetPropertyDefinition
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which removes the header on the IN message      *      * @param name  the header name      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeHeader (String name)
specifier|public
name|Type
name|removeHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|RemoveHeaderDefinition
name|answer
init|=
operator|new
name|RemoveHeaderDefinition
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which removes the header on the FAULT message      *      * @param name  the header name      * @return the builder      */
DECL|method|removeFaultHeader (String name)
specifier|public
name|Type
name|removeFaultHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|removeFaultHeader
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which removes the exchange property      *      * @param name  the property name      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|removeProperty (String name)
specifier|public
name|Type
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|RemovePropertyDefinition
name|answer
init|=
operator|new
name|RemovePropertyDefinition
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Converts the IN message body to the specified type      *      * @param type the type to convert to      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertBodyTo (Class type)
specifier|public
name|Type
name|convertBodyTo
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ConvertBodyDefinition
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Converts the IN message body to the specified type      *      * @param type the type to convert to      * @param charset the charset to use by type converters (not all converters support specifc charset)      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertBodyTo (Class type, String charset)
specifier|public
name|Type
name|convertBodyTo
parameter_list|(
name|Class
name|type
parameter_list|,
name|String
name|charset
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ConvertBodyDefinition
argument_list|(
name|type
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sorts the IN message body using the given comparator.      * The IN body mut be convertable to {@link List}.      *      * @param comparator  the comparator to use for sorting      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sortBody (Comparator comparator)
specifier|public
name|Type
name|sortBody
parameter_list|(
name|Comparator
name|comparator
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|SortDefinition
argument_list|(
name|body
argument_list|()
argument_list|,
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sorts the IN message body using a default sorting based on toString representation.      * The IN body mut be convertable to {@link List}.      *      * @return the builder      */
DECL|method|sortBody ()
specifier|public
name|Type
name|sortBody
parameter_list|()
block|{
return|return
name|sortBody
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Sorts the expression using the given comparator      *      * @param expression  the expression, must be convertable to {@link List}      * @param comparator  the comparator to use for sorting      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sort (Expression expression, Comparator comparator)
specifier|public
name|Type
name|sort
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|Comparator
name|comparator
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|SortDefinition
argument_list|(
name|expression
argument_list|,
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sorts the expression using a default sorting based on toString representation.       *      * @param expression  the expression, must be convertable to {@link List}      * @return the builder      */
DECL|method|sort (Expression expression)
specifier|public
name|Type
name|sort
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|sort
argument_list|(
name|expression
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *       * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.Enricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|enrich (String resourceUri, AggregationStrategy aggregationStrategy)
specifier|public
name|Type
name|enrich
parameter_list|(
name|String
name|resourceUri
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|EnrichDefinition
argument_list|(
name|aggregationStrategy
argument_list|,
name|resourceUri
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *<p/>      * The difference between this and {@link #pollEnrich(String)} is that this uses a producer      * to obatin the additional data, where as pollEnrich uses a polling consumer.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @return the builder      * @see org.apache.camel.processor.Enricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|enrich (String resourceUri)
specifier|public
name|Type
name|enrich
parameter_list|(
name|String
name|resourceUri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|EnrichDefinition
argument_list|(
name|resourceUri
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>.      *<p/>      * The difference between this and {@link #pollEnrich(String)} is that this uses a producer      * to obatin the additional data, where as pollEnrich uses a polling consumer.      *      * @param resourceRef            Reference of resource endpoint for obtaining additional data.      * @param aggregationStrategyRef Reference of aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.Enricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|enrichRef (String resourceRef, String aggregationStrategyRef)
specifier|public
name|Type
name|enrichRef
parameter_list|(
name|String
name|resourceRef
parameter_list|,
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
name|EnrichDefinition
name|enrich
init|=
operator|new
name|EnrichDefinition
argument_list|()
decl_stmt|;
name|enrich
operator|.
name|setResourceRef
argument_list|(
name|resourceRef
argument_list|)
expr_stmt|;
name|enrich
operator|.
name|setAggregationStrategyRef
argument_list|(
name|aggregationStrategyRef
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|enrich
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obatin the additional data, where as enrich uses a producer.      *<p/>      * This method will block until data is avialable, use the method with timeout if you do not      * want to risk waiting a long time before data is available from the resourceUri.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrich (String resourceUri)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
name|String
name|resourceUri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|PollEnrichDefinition
argument_list|(
literal|null
argument_list|,
name|resourceUri
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obatin the additional data, where as enrich uses a producer.      *<p/>      * This method will block until data is avialable, use the method with timeout if you do not      * want to risk waiting a long time before data is available from the resourceUri.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrich (String resourceUri, AggregationStrategy aggregationStrategy)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
name|String
name|resourceUri
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|PollEnrichDefinition
argument_list|(
name|aggregationStrategy
argument_list|,
name|resourceUri
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obatin the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param timeout               timeout in millis to wait at most for data to be available.      * @param aggregationStrategy   aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrich (String resourceUri, long timeout, AggregationStrategy aggregationStrategy)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|PollEnrichDefinition
argument_list|(
name|aggregationStrategy
argument_list|,
name|resourceUri
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obatin the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceUri           URI of resource endpoint for obtaining additional data.      * @param timeout               timeout in millis to wait at most for data to be available.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrich (String resourceUri, long timeout)
specifier|public
name|Type
name|pollEnrich
parameter_list|(
name|String
name|resourceUri
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|PollEnrichDefinition
argument_list|(
literal|null
argument_list|,
name|resourceUri
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * The<a href="http://camel.apache.org/content-enricher.html">Content Enricher EIP</a>      * enriches an exchange with additional data obtained from a<code>resourceUri</code>      * using a {@link org.apache.camel.PollingConsumer} to poll the endpoint.      *<p/>      * The difference between this and {@link #enrich(String)} is that this uses a consumer      * to obatin the additional data, where as enrich uses a producer.      *<p/>      * The timeout controls which operation to use on {@link org.apache.camel.PollingConsumer}.      * If timeout is negative, we use<tt>receive</tt>. If timeout is 0 then we use<tt>receiveNoWait</tt>      * otherwise we use<tt>receive(timeout)</tt>.      *      * @param resourceRef            Reference of resource endpoint for obtaining additional data.      * @param timeout                timeout in millis to wait at most for data to be available.      * @param aggregationStrategyRef Reference of aggregation strategy to aggregate input data and additional data.      * @return the builder      * @see org.apache.camel.processor.PollEnricher      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pollEnrichRef (String resourceRef, long timeout, String aggregationStrategyRef)
specifier|public
name|Type
name|pollEnrichRef
parameter_list|(
name|String
name|resourceRef
parameter_list|,
name|long
name|timeout
parameter_list|,
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
name|PollEnrichDefinition
name|pollEnrich
init|=
operator|new
name|PollEnrichDefinition
argument_list|()
decl_stmt|;
name|pollEnrich
operator|.
name|setResourceRef
argument_list|(
name|resourceRef
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|pollEnrich
operator|.
name|setAggregationStrategyRef
argument_list|(
name|aggregationStrategyRef
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|pollEnrich
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a onComplection {@link org.apache.camel.spi.Synchronization} hook that invoke this route as      * a callback when the {@link org.apache.camel.Exchange} has finished being processed.      * The hook invoke callbacks for either onComplete or onFailure.      *<p/>      * Will by default always trigger when the {@link org.apache.camel.Exchange} is complete      * (either with success or failed).      *<br/>      * You can limit the callback to either onComplete or onFailure but invoking the nested      * builder method.      *<p/>      * For onFailure the caused exception is stored as a property on the {@link org.apache.camel.Exchange}      * with the key {@link org.apache.camel.Exchange#EXCEPTION_CAUGHT}.      *      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|onCompletion ()
specifier|public
name|OnCompletionDefinition
name|onCompletion
parameter_list|()
block|{
name|OnCompletionDefinition
name|answer
init|=
operator|new
name|OnCompletionDefinition
argument_list|()
decl_stmt|;
comment|// we must remove all existing on completion definition (as they are global)
comment|// and thus we are the only one as route scoped should override any global scoped
name|answer
operator|.
name|removeAllOnCompletionDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|popBlock
argument_list|()
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|pushBlock
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|// DataFormat support
comment|// -------------------------------------------------------------------------
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using a {@link DataFormat} expression to define      * the format of the input message and the output will be set on the out message body.      *      * @return the expression to create the {@link DataFormat}      */
DECL|method|unmarshal ()
specifier|public
name|DataFormatClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|unmarshal
parameter_list|()
block|{
return|return
operator|new
name|DataFormatClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|,
name|DataFormatClause
operator|.
name|Operation
operator|.
name|Unmarshal
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormatType  the dataformat      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|unmarshal (DataFormatDefinition dataFormatType)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|DataFormatDefinition
name|dataFormatType
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|UnmarshalDefinition
argument_list|(
name|dataFormatType
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormat  the dataformat      * @return the builder      */
DECL|method|unmarshal (DataFormat dataFormat)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
return|return
name|unmarshal
argument_list|(
operator|new
name|DataFormatDefinition
argument_list|(
name|dataFormat
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * reference in the {@link org.apache.camel.spi.Registry} and sets      * the output on the out message body.      *      * @param dataTypeRef  reference to a {@link DataFormat} to lookup in the registry      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|unmarshal (String dataTypeRef)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|String
name|dataTypeRef
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|UnmarshalDefinition
argument_list|(
name|dataTypeRef
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using a {@link DataFormat} expression to define      * the format of the output which will be added to the out body.      *      * @return the expression to create the {@link DataFormat}      */
DECL|method|marshal ()
specifier|public
name|DataFormatClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
name|marshal
parameter_list|()
block|{
return|return
operator|new
name|DataFormatClause
argument_list|<
name|ProcessorDefinition
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|,
name|DataFormatClause
operator|.
name|Operation
operator|.
name|Marshal
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormatType  the dataformat      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|marshal (DataFormatDefinition dataFormatType)
specifier|public
name|Type
name|marshal
parameter_list|(
name|DataFormatDefinition
name|dataFormatType
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|MarshalDefinition
argument_list|(
name|dataFormatType
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormat  the dataformat      * @return the builder      */
DECL|method|marshal (DataFormat dataFormat)
specifier|public
name|Type
name|marshal
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
return|return
name|marshal
argument_list|(
operator|new
name|DataFormatDefinition
argument_list|(
name|dataFormat
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body the specified {@link DataFormat}      * reference in the {@link org.apache.camel.spi.Registry} and sets      * the output on the out message body.      *      * @param dataTypeRef  reference to a {@link DataFormat} to lookup in the registry      * @return the builder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|marshal (String dataTypeRef)
specifier|public
name|Type
name|marshal
parameter_list|(
name|String
name|dataTypeRef
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|MarshalDefinition
argument_list|(
name|dataTypeRef
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
annotation|@
name|XmlTransient
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getParent ()
specifier|public
name|ProcessorDefinition
argument_list|<
name|?
extends|extends
name|ProcessorDefinition
argument_list|>
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|setParent (ProcessorDefinition<? extends ProcessorDefinition> parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
extends|extends
name|ProcessorDefinition
argument_list|>
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|XmlTransient
DECL|method|getErrorHandlerBuilder ()
specifier|public
name|ErrorHandlerBuilder
name|getErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerBuilder
operator|==
literal|null
condition|)
block|{
name|errorHandlerBuilder
operator|=
name|createErrorHandlerBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|errorHandlerBuilder
return|;
block|}
comment|/**      * Sets the error handler to use with processors created by this builder      */
DECL|method|setErrorHandlerBuilder (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilder
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerBuilder
operator|=
name|errorHandlerBuilder
expr_stmt|;
block|}
annotation|@
name|XmlTransient
DECL|method|getNodeFactory ()
specifier|public
name|NodeFactory
name|getNodeFactory
parameter_list|()
block|{
if|if
condition|(
name|nodeFactory
operator|==
literal|null
condition|)
block|{
name|nodeFactory
operator|=
operator|new
name|NodeFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeFactory
return|;
block|}
DECL|method|setNodeFactory (NodeFactory nodeFactory)
specifier|public
name|void
name|setNodeFactory
parameter_list|(
name|NodeFactory
name|nodeFactory
parameter_list|)
block|{
name|this
operator|.
name|nodeFactory
operator|=
name|nodeFactory
expr_stmt|;
block|}
annotation|@
name|XmlTransient
DECL|method|getInterceptStrategies ()
specifier|public
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|getInterceptStrategies
parameter_list|()
block|{
return|return
name|interceptStrategies
return|;
block|}
DECL|method|addInterceptStrategy (InterceptStrategy strategy)
specifier|public
name|void
name|addInterceptStrategy
parameter_list|(
name|InterceptStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|interceptStrategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a label to describe this node such as the expression if some kind of expression node      */
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

