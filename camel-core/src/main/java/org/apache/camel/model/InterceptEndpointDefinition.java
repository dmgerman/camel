begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|InterceptEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|InterceptEndpointProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_comment
comment|/**  * Represents an XML&lt;interceptEndpoint/&gt; element  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"interceptEndpoint"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|InterceptEndpointDefinition
specifier|public
class|class
name|InterceptEndpointDefinition
extends|extends
name|InterceptDefinition
block|{
comment|// TODO: Support lookup endpoint by ref (requires a bit more work)
comment|// TODO: Support wildcards for endpoints so you can match by scheme, eg jms:*
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
DECL|method|InterceptEndpointDefinition ()
specifier|public
name|InterceptEndpointDefinition
parameter_list|()
block|{     }
DECL|method|InterceptEndpointDefinition (String uri)
specifier|public
name|InterceptEndpointDefinition
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InterceptEndpoint["
operator|+
name|uri
operator|+
literal|" -> "
operator|+
name|getOutputs
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"interceptEndpoint"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"interceptEndpoint"
return|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// we have to reuse the createProcessor method to build the detour route
comment|// afterwards we remove this interceptor from the route so the route will
comment|// not use regular intercptor. The interception by endpoint is triggered
comment|// by the InterceptEndpoint that handles the intercept routing logic
name|Endpoint
name|endpoint
init|=
name|lookupEndpoint
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
decl_stmt|;
comment|// create the detour
name|Processor
name|detour
init|=
name|routeContext
operator|.
name|createProcessor
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// set the detour on the endpoint proxy
name|InterceptEndpoint
name|proxy
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|InterceptEndpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setDetour
argument_list|(
name|detour
argument_list|)
expr_stmt|;
comment|// remove the original intercepted route from the outputs as we do not intercept as the regular interceptor
comment|// instead we use the proxy endpoints producer do the triggering. That is we trigger when someone sends
comment|// an exchange to the endpoint, see InterceptEndpoint for details.
name|RouteDefinition
name|route
init|=
name|routeContext
operator|.
name|getRoute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|outputs
init|=
name|route
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|outputs
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|InterceptEndpointProcessor
argument_list|(
name|uri
argument_list|,
name|detour
argument_list|)
return|;
block|}
DECL|method|proxyEndpoint (CamelContext context)
specifier|public
name|void
name|proxyEndpoint
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
comment|// proxy the endpoint by using the InterceptEndpoint that will proxy
comment|// the producer so it processes the detour first
name|Endpoint
name|endpoint
init|=
name|lookupEndpoint
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// decorate endpoint with our proxy
name|boolean
name|skip
init|=
name|stopIntercept
operator|!=
literal|null
condition|?
name|stopIntercept
else|:
literal|false
decl_stmt|;
name|InterceptEndpoint
name|proxy
init|=
operator|new
name|InterceptEndpoint
argument_list|(
name|endpoint
argument_list|,
name|skip
argument_list|)
decl_stmt|;
try|try
block|{
comment|// add will replace the old one
name|context
operator|.
name|addEndpoint
argument_list|(
name|proxy
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method is<b>only</b> for handling some post configuration      * that is needed from the Spring DSL side as JAXB does not invoke the fluent      * builders, so we need to manually handle this afterwards, and since this is      * an interceptor it has to do a bit of magic logic to fixup to handle predicates      * with or without proceed/stop set as well.      */
DECL|method|afterPropertiesSet ()
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
block|{
name|super
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
comment|// okay the intercept endpoint works a bit differently than the regular interceptors
comment|// so we must fix the route definiton yet again
comment|// we need to fix if the interceptor should only trigger based on a predicate
comment|// as the regular interceptor will prepare the route "reverse" we gotta move
comment|// from this output to the otherwise output
if|if
condition|(
name|usePredicate
operator|!=
literal|null
operator|&&
name|usePredicate
condition|)
block|{
name|ChoiceDefinition
name|choice
init|=
name|ProcessorDefinitionHelper
operator|.
name|findFirstTypeInOutputs
argument_list|(
name|outputs
argument_list|,
name|ChoiceDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|choice
operator|!=
literal|null
operator|&&
name|outputs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// move this outputs to the otherwise, expect the first one
comment|// as the first one is the interceptor itself
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|outputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ProcessorDefinition
name|out
init|=
name|outputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|choice
operator|.
name|getOtherwise
argument_list|()
operator|.
name|addOutput
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// remove the moved from the original output, by just keeping the first one
name|ProcessorDefinition
name|keep
init|=
name|outputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|clearOutput
argument_list|()
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|keep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|lookupEndpoint (CamelContext context)
specifier|private
name|Endpoint
name|lookupEndpoint
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
end_class

end_unit

