begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchEndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultRouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Delayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|StreamCaching
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_comment
comment|/**  * Represents an XML&lt;route/&gt; element  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"route"
argument_list|)
annotation|@
name|XmlType
argument_list|(
name|propOrder
operator|=
block|{
literal|"inputs"
block|,
literal|"outputs"
block|}
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|PROPERTY
argument_list|)
DECL|class|RouteDefinition
specifier|public
class|class
name|RouteDefinition
extends|extends
name|ProcessorDefinition
argument_list|<
name|ProcessorDefinition
argument_list|>
implements|implements
name|CamelContextAware
block|{
DECL|field|inputs
specifier|private
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<
name|FromDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|outputs
specifier|private
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|streamCache
specifier|private
name|Boolean
name|streamCache
decl_stmt|;
DECL|field|trace
specifier|private
name|Boolean
name|trace
decl_stmt|;
DECL|field|handleFault
specifier|private
name|Boolean
name|handleFault
decl_stmt|;
DECL|field|delayer
specifier|private
name|Long
name|delayer
decl_stmt|;
DECL|field|autoStartup
specifier|private
name|Boolean
name|autoStartup
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
DECL|field|startupOrder
specifier|private
name|Integer
name|startupOrder
decl_stmt|;
DECL|method|RouteDefinition ()
specifier|public
name|RouteDefinition
parameter_list|()
block|{     }
DECL|method|RouteDefinition (String uri)
specifier|public
name|RouteDefinition
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|from
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|RouteDefinition (Endpoint endpoint)
specifier|public
name|RouteDefinition
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|from
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Route["
operator|+
name|inputs
operator|+
literal|" -> "
operator|+
name|outputs
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"route"
return|;
block|}
comment|/**      * Returns the status of the route if it has been registered with a {@link CamelContext}      */
DECL|method|getStatus ()
specifier|public
name|ServiceStatus
name|getStatus
parameter_list|()
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|ServiceStatus
name|answer
init|=
name|camelContext
operator|.
name|getRouteStatus
argument_list|(
name|this
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|ServiceStatus
operator|.
name|Stopped
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|isStartable ()
specifier|public
name|boolean
name|isStartable
parameter_list|()
block|{
name|ServiceStatus
name|status
init|=
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|status
operator|.
name|isStartable
argument_list|()
return|;
block|}
block|}
DECL|method|isStoppable ()
specifier|public
name|boolean
name|isStoppable
parameter_list|()
block|{
name|ServiceStatus
name|status
init|=
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|status
operator|.
name|isStoppable
argument_list|()
return|;
block|}
block|}
DECL|method|addRoutes (CamelContext context, Collection<Route> routes)
specifier|public
name|List
argument_list|<
name|RouteContext
argument_list|>
name|addRoutes
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RouteContext
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteContext
argument_list|>
argument_list|()
decl_stmt|;
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ErrorHandlerBuilder
name|handler
init|=
name|context
operator|.
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|setErrorHandlerBuilderIfNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FromDefinition
name|fromType
range|:
name|inputs
control|)
block|{
name|RouteContext
name|routeContext
init|=
name|addRoutes
argument_list|(
name|routes
argument_list|,
name|fromType
argument_list|)
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|resolveEndpoint (String uri)
specifier|public
name|Endpoint
name|resolveEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|NoSuchEndpointException
block|{
name|CamelContext
name|context
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CamelContext has not been injected!"
argument_list|)
throw|;
block|}
return|return
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|context
argument_list|,
name|uri
argument_list|)
return|;
block|}
comment|// Fluent API
comment|// -----------------------------------------------------------------------
comment|/**      * Creates an input to the route      *      * @param uri  the from uri      * @return the builder      */
DECL|method|from (String uri)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates an input to the route      *      * @param endpoint  the from endpoint      * @return the builder      */
DECL|method|from (Endpoint endpoint)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates inputs to the route      *      * @param uris  the from uris      * @return the builder      */
DECL|method|from (String... uris)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Creates inputs to the route      *      * @param endpoints  the from endpoints      * @return the builder      */
DECL|method|from (Endpoint... endpoints)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Set the group name for this route      *      * @param name  the group name      * @return the builder      */
DECL|method|group (String name)
specifier|public
name|RouteDefinition
name|group
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable stream caching for this route.      */
DECL|method|noStreamCaching ()
specifier|public
name|RouteDefinition
name|noStreamCaching
parameter_list|()
block|{
name|setStreamCache
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|StreamCaching
operator|.
name|noStreamCaching
argument_list|(
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable stream caching for this route.      */
DECL|method|streamCaching ()
specifier|public
name|RouteDefinition
name|streamCaching
parameter_list|()
block|{
name|setStreamCache
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|StreamCaching
name|cache
init|=
name|StreamCaching
operator|.
name|getStreamCaching
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
operator|new
name|StreamCaching
argument_list|()
expr_stmt|;
block|}
name|getInterceptStrategies
argument_list|()
operator|.
name|add
argument_list|(
name|cache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable tracing for this route.      */
DECL|method|noTracing ()
specifier|public
name|RouteDefinition
name|noTracing
parameter_list|()
block|{
name|setTrace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable tracing for this route.      */
DECL|method|tracing ()
specifier|public
name|RouteDefinition
name|tracing
parameter_list|()
block|{
name|setTrace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable handle fault for this route.      */
DECL|method|noHandleFault ()
specifier|public
name|RouteDefinition
name|noHandleFault
parameter_list|()
block|{
name|setHandleFault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable handle fault for this route.      */
DECL|method|handleFault ()
specifier|public
name|RouteDefinition
name|handleFault
parameter_list|()
block|{
name|setHandleFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable delayer for this route.      */
DECL|method|noDelayer ()
specifier|public
name|RouteDefinition
name|noDelayer
parameter_list|()
block|{
name|setDelayer
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable delayer for this route.      *      * @param delay delay in millis      */
DECL|method|delayer (long delay)
specifier|public
name|RouteDefinition
name|delayer
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setDelayer
argument_list|(
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Installs the given<a href="http://camel.apache.org/error-handler.html">error handler</a> builder.      *      * @param errorHandlerBuilder the error handler to be used by default for all child routes      * @return the current builder with the error handler configured      */
DECL|method|errorHandler (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|RouteDefinition
name|errorHandler
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disables this route from being auto started when Camel starts.      */
DECL|method|noAutoStartup ()
specifier|public
name|RouteDefinition
name|noAutoStartup
parameter_list|()
block|{
name|setAutoStartup
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the startup order for this route      *<p/>      * Camel will reorder routes and star them ordered by 0..N where 0 is the lowest number and N the highest number.      * Camel will stop routes in reverse order when its stopping.      *      * @param order the order represented as a number      * @return this builder      */
DECL|method|startupOrder (int order)
specifier|public
name|RouteDefinition
name|startupOrder
parameter_list|(
name|int
name|order
parameter_list|)
block|{
name|setStartupOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getInputs ()
specifier|public
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
annotation|@
name|XmlElementRef
DECL|method|setInputs (List<FromDefinition> inputs)
specifier|public
name|void
name|setInputs
parameter_list|(
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
DECL|method|getOutputs ()
specifier|public
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
annotation|@
name|XmlElementRef
DECL|method|setOutputs (List<ProcessorDefinition> outputs)
specifier|public
name|void
name|setOutputs
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
if|if
condition|(
name|outputs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProcessorDefinition
name|output
range|:
name|outputs
control|)
block|{
name|configureChild
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
comment|/**      * The group that this route belongs to; could be the name of the RouteBuilder class      * or be explicitly configured in the XML.      *      * May be null.      */
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
annotation|@
name|XmlAttribute
DECL|method|setGroup (String group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
DECL|method|isStreamCache ()
specifier|public
name|Boolean
name|isStreamCache
parameter_list|()
block|{
return|return
name|streamCache
return|;
block|}
annotation|@
name|XmlAttribute
DECL|method|setStreamCache (Boolean streamCache)
specifier|public
name|void
name|setStreamCache
parameter_list|(
name|Boolean
name|streamCache
parameter_list|)
block|{
name|this
operator|.
name|streamCache
operator|=
name|streamCache
expr_stmt|;
block|}
DECL|method|isTrace ()
specifier|public
name|Boolean
name|isTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
annotation|@
name|XmlAttribute
DECL|method|setTrace (Boolean trace)
specifier|public
name|void
name|setTrace
parameter_list|(
name|Boolean
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
DECL|method|isHandleFault ()
specifier|public
name|Boolean
name|isHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
annotation|@
name|XmlAttribute
DECL|method|setHandleFault (Boolean handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|Boolean
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
DECL|method|getDelayer ()
specifier|public
name|Long
name|getDelayer
parameter_list|()
block|{
return|return
name|delayer
return|;
block|}
annotation|@
name|XmlAttribute
DECL|method|setDelayer (Long delayer)
specifier|public
name|void
name|setDelayer
parameter_list|(
name|Long
name|delayer
parameter_list|)
block|{
name|this
operator|.
name|delayer
operator|=
name|delayer
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|Boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
annotation|@
name|XmlAttribute
DECL|method|setAutoStartup (Boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|Boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|getStartupOrder ()
specifier|public
name|Integer
name|getStartupOrder
parameter_list|()
block|{
return|return
name|startupOrder
return|;
block|}
annotation|@
name|XmlAttribute
DECL|method|setStartupOrder (Integer startupOrder)
specifier|public
name|void
name|setStartupOrder
parameter_list|(
name|Integer
name|startupOrder
parameter_list|)
block|{
name|this
operator|.
name|startupOrder
operator|=
name|startupOrder
expr_stmt|;
block|}
comment|/**      * Sets the bean ref name of the error handler builder to use on this route      */
annotation|@
name|XmlAttribute
DECL|method|setErrorHandlerRef (String errorHandlerRef)
specifier|public
name|void
name|setErrorHandlerRef
parameter_list|(
name|String
name|errorHandlerRef
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerRef
operator|=
name|errorHandlerRef
expr_stmt|;
comment|// we use an specific error handler ref (from Spring DSL) then wrap that
comment|// with a error handler build ref so Camel knows its not just the default one
name|setErrorHandlerBuilder
argument_list|(
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getErrorHandlerRef ()
specifier|public
name|String
name|getErrorHandlerRef
parameter_list|()
block|{
return|return
name|errorHandlerRef
return|;
block|}
comment|/**      * Sets the error handler if one is not already set      */
DECL|method|setErrorHandlerBuilderIfNull (ErrorHandlerBuilder errorHandlerBuilder)
specifier|protected
name|void
name|setErrorHandlerBuilderIfNull
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|errorHandlerBuilder
operator|==
literal|null
condition|)
block|{
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
DECL|method|addRoutes (Collection<Route> routes, FromDefinition fromType)
specifier|protected
name|RouteContext
name|addRoutes
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|,
name|FromDefinition
name|fromType
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteContext
name|routeContext
init|=
operator|new
name|DefaultRouteContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
argument_list|,
name|fromType
argument_list|,
name|routes
argument_list|)
decl_stmt|;
comment|// configure tracing
if|if
condition|(
name|trace
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setTracing
argument_list|(
name|isTrace
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTrace
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Tracing is enabled on route: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
comment|// tracing is added in the DefaultChannel so we can enable it on the fly
block|}
block|}
comment|// configure stream caching
if|if
condition|(
name|streamCache
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setStreamCaching
argument_list|(
name|isStreamCache
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStreamCache
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"StramCaching is enabled on route: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
comment|// only add a new stream cache if not already a global configured on camel context
if|if
condition|(
name|StreamCaching
operator|.
name|getStreamCaching
argument_list|(
name|camelContext
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addInterceptStrategy
argument_list|(
operator|new
name|StreamCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// configure handle fault
if|if
condition|(
name|handleFault
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setHandleFault
argument_list|(
name|isHandleFault
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHandleFault
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"HandleFault is enabled on route: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
comment|// only add a new handle fault if not already a global configured on camel context
if|if
condition|(
name|HandleFault
operator|.
name|getHandleFault
argument_list|(
name|camelContext
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addInterceptStrategy
argument_list|(
operator|new
name|HandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// configure delayer
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setDelayer
argument_list|(
name|getDelayer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDelayer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|millis
init|=
name|getDelayer
argument_list|()
decl_stmt|;
if|if
condition|(
name|millis
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Delayer is enabled with: "
operator|+
name|millis
operator|+
literal|" ms. on route: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
name|addInterceptStrategy
argument_list|(
operator|new
name|Delayer
argument_list|(
name|millis
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Delayer is disabled on route: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// configure auto startup
if|if
condition|(
name|autoStartup
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setAutoStartup
argument_list|(
name|isAutoStartup
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// should inherit the intercept strategies we have defined
name|routeContext
operator|.
name|setInterceptStrategies
argument_list|(
name|this
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
comment|// force endpoint resolution
name|routeContext
operator|.
name|getEndpoint
argument_list|()
expr_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
name|strategy
operator|.
name|onRouteContextCreate
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|>
argument_list|(
name|outputs
argument_list|)
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
name|output
range|:
name|list
control|)
block|{
name|output
operator|.
name|addRoutes
argument_list|(
name|routeContext
argument_list|,
name|routes
argument_list|)
expr_stmt|;
block|}
name|routeContext
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|routeContext
return|;
block|}
block|}
end_class

end_unit

