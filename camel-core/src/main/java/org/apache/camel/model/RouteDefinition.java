begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ErrorHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToCreateRouteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchEndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|AdviceWithRouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|AdviceWithTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultRouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents an XML&lt;route/&gt; element  *  * @version  */
end_comment

begin_class
annotation|@
name|Label
argument_list|(
literal|"configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"route"
argument_list|)
annotation|@
name|XmlType
argument_list|(
name|propOrder
operator|=
block|{
literal|"inputs"
block|,
literal|"outputs"
block|}
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|PROPERTY
argument_list|)
comment|// must use XmlAccessType.PROPERTY as there is some custom logic needed to be executed in the setter methods
DECL|class|RouteDefinition
specifier|public
class|class
name|RouteDefinition
extends|extends
name|ProcessorDefinition
argument_list|<
name|RouteDefinition
argument_list|>
block|{
DECL|field|prepared
specifier|private
specifier|final
name|AtomicBoolean
name|prepared
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|inputs
specifier|private
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<
name|FromDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|outputs
specifier|private
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|streamCache
specifier|private
name|String
name|streamCache
decl_stmt|;
DECL|field|trace
specifier|private
name|String
name|trace
decl_stmt|;
DECL|field|messageHistory
specifier|private
name|String
name|messageHistory
decl_stmt|;
DECL|field|handleFault
specifier|private
name|String
name|handleFault
decl_stmt|;
DECL|field|delayer
specifier|private
name|String
name|delayer
decl_stmt|;
DECL|field|autoStartup
specifier|private
name|String
name|autoStartup
decl_stmt|;
DECL|field|startupOrder
specifier|private
name|Integer
name|startupOrder
decl_stmt|;
DECL|field|routePolicies
specifier|private
name|List
argument_list|<
name|RoutePolicy
argument_list|>
name|routePolicies
decl_stmt|;
DECL|field|routePolicyRef
specifier|private
name|String
name|routePolicyRef
decl_stmt|;
DECL|field|shutdownRoute
specifier|private
name|ShutdownRoute
name|shutdownRoute
decl_stmt|;
DECL|field|shutdownRunningTask
specifier|private
name|ShutdownRunningTask
name|shutdownRunningTask
decl_stmt|;
DECL|field|errorHandlerRef
specifier|private
name|String
name|errorHandlerRef
decl_stmt|;
DECL|field|errorHandlerBuilder
specifier|private
name|ErrorHandlerFactory
name|errorHandlerBuilder
decl_stmt|;
comment|// keep state whether the error handler is context scoped or not
comment|// (will by default be context scoped of no explicit error handler configured)
DECL|field|contextScopedErrorHandler
specifier|private
name|boolean
name|contextScopedErrorHandler
init|=
literal|true
decl_stmt|;
DECL|field|rest
specifier|private
name|Boolean
name|rest
decl_stmt|;
DECL|field|restDefinition
specifier|private
name|RestDefinition
name|restDefinition
decl_stmt|;
DECL|method|RouteDefinition ()
specifier|public
name|RouteDefinition
parameter_list|()
block|{     }
DECL|method|RouteDefinition (String uri)
specifier|public
name|RouteDefinition
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|from
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|RouteDefinition (Endpoint endpoint)
specifier|public
name|RouteDefinition
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|from
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * This route is created from the REST DSL.      */
DECL|method|fromRest (String uri)
specifier|public
name|void
name|fromRest
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|from
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|rest
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Prepares the route definition to be ready to be added to {@link CamelContext}      *      * @param context the camel context      */
DECL|method|prepare (ModelCamelContext context)
specifier|public
name|void
name|prepare
parameter_list|(
name|ModelCamelContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|prepared
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|RouteDefinitionHelper
operator|.
name|prepareRoute
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Marks the route definition as prepared.      *<p/>      * This is needed if routes have been created by components such as      *<tt>camel-spring</tt> or<tt>camel-blueprint</tt>.      * Usually they share logic in the<tt>camel-core-xml</tt> module which prepares the routes.      */
DECL|method|markPrepared ()
specifier|public
name|void
name|markPrepared
parameter_list|()
block|{
name|prepared
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Route("
operator|+
name|getId
argument_list|()
operator|+
literal|")["
operator|+
name|inputs
operator|+
literal|" -> "
operator|+
name|outputs
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"Route["
operator|+
name|inputs
operator|+
literal|" -> "
operator|+
name|outputs
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Returns the status of the route if it has been registered with a {@link CamelContext}      */
DECL|method|getStatus (CamelContext camelContext)
specifier|public
name|ServiceStatus
name|getStatus
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|ServiceStatus
name|answer
init|=
name|camelContext
operator|.
name|getRouteStatus
argument_list|(
name|this
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|ServiceStatus
operator|.
name|Stopped
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|isStartable (CamelContext camelContext)
specifier|public
name|boolean
name|isStartable
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|ServiceStatus
name|status
init|=
name|getStatus
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|status
operator|.
name|isStartable
argument_list|()
return|;
block|}
block|}
DECL|method|isStoppable (CamelContext camelContext)
specifier|public
name|boolean
name|isStoppable
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|ServiceStatus
name|status
init|=
name|getStatus
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|status
operator|.
name|isStoppable
argument_list|()
return|;
block|}
block|}
DECL|method|addRoutes (ModelCamelContext camelContext, Collection<Route> routes)
specifier|public
name|List
argument_list|<
name|RouteContext
argument_list|>
name|addRoutes
parameter_list|(
name|ModelCamelContext
name|camelContext
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RouteContext
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteContext
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|ErrorHandlerFactory
name|handler
init|=
name|camelContext
operator|.
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|setErrorHandlerBuilderIfNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FromDefinition
name|fromType
range|:
name|inputs
control|)
block|{
name|RouteContext
name|routeContext
decl_stmt|;
try|try
block|{
name|routeContext
operator|=
name|addRoutes
argument_list|(
name|camelContext
argument_list|,
name|routes
argument_list|,
name|fromType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedToCreateRouteException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// wrap in exception which provide more details about which route was failing
throw|throw
operator|new
name|FailedToCreateRouteException
argument_list|(
name|getId
argument_list|()
argument_list|,
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|resolveEndpoint (CamelContext camelContext, String uri)
specifier|public
name|Endpoint
name|resolveEndpoint
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|NoSuchEndpointException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
return|return
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|adviceWith (CamelContext camelContext, RouteBuilder builder)
specifier|public
name|RouteDefinition
name|adviceWith
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|adviceWith
argument_list|(
operator|(
name|ModelCamelContext
operator|)
name|camelContext
argument_list|,
name|builder
argument_list|)
return|;
block|}
comment|/**      * Advices this route with the route builder.      *<p/>      *<b>Important:</b> It is recommended to only advice a given route once (you can of course advice multiple routes).      * If you do it multiple times, then it may not work as expected, especially when any kind of error handling is involved.      * The Camel team plan for Camel 3.0 to support this as internal refactorings in the routing engine is needed to support this properly.      *<p/>      * You can use a regular {@link RouteBuilder} but the specialized {@link org.apache.camel.builder.AdviceWithRouteBuilder}      * has additional features when using the<a href="http://camel.apache.org/advicewith.html">advice with</a> feature.      * We therefore suggest you to use the {@link org.apache.camel.builder.AdviceWithRouteBuilder}.      *<p/>      * The advice process will add the interceptors, on exceptions, on completions etc. configured      * from the route builder to this route.      *<p/>      * This is mostly used for testing purpose to add interceptors and the likes to an existing route.      *<p/>      * Will stop and remove the old route from camel context and add and start this new advised route.      *      * @param camelContext the camel context      * @param builder      the route builder      * @return a new route which is this route merged with the route builder      * @throws Exception can be thrown from the route builder      * @see AdviceWithRouteBuilder      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|adviceWith (ModelCamelContext camelContext, RouteBuilder builder)
specifier|public
name|RouteDefinition
name|adviceWith
parameter_list|(
name|ModelCamelContext
name|camelContext
parameter_list|,
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|builder
argument_list|,
literal|"RouteBuilder"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"AdviceWith route before: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// inject this route into the advice route builder so it can access this route
comment|// and offer features to manipulate the route directly
if|if
condition|(
name|builder
operator|instanceof
name|AdviceWithRouteBuilder
condition|)
block|{
operator|(
operator|(
name|AdviceWithRouteBuilder
operator|)
name|builder
operator|)
operator|.
name|setOriginalRoute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// configure and prepare the routes from the builder
name|RoutesDefinition
name|routes
init|=
name|builder
operator|.
name|configureRoutes
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"AdviceWith routes: {}"
argument_list|,
name|routes
argument_list|)
expr_stmt|;
comment|// we can only advice with a route builder without any routes
if|if
condition|(
operator|!
name|builder
operator|.
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You can only advice from a RouteBuilder which has no existing routes."
operator|+
literal|" Remove all routes from the route builder."
argument_list|)
throw|;
block|}
comment|// we can not advice with error handlers (if you added a new error handler in the route builder)
comment|// we must check the error handler on builder is not the same as on camel context, as that would be the default
comment|// context scoped error handler, in case no error handlers was configured
if|if
condition|(
name|builder
operator|.
name|getRouteCollection
argument_list|()
operator|.
name|getErrorHandlerBuilder
argument_list|()
operator|!=
literal|null
operator|&&
name|camelContext
operator|.
name|getErrorHandlerBuilder
argument_list|()
operator|!=
name|builder
operator|.
name|getRouteCollection
argument_list|()
operator|.
name|getErrorHandlerBuilder
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You can not advice with error handlers. Remove the error handlers from the route builder."
argument_list|)
throw|;
block|}
comment|// stop and remove this existing route
name|camelContext
operator|.
name|removeRouteDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// any advice with tasks we should execute first?
if|if
condition|(
name|builder
operator|instanceof
name|AdviceWithRouteBuilder
condition|)
block|{
name|List
argument_list|<
name|AdviceWithTask
argument_list|>
name|tasks
init|=
operator|(
operator|(
name|AdviceWithRouteBuilder
operator|)
name|builder
operator|)
operator|.
name|getAdviceWithTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|AdviceWithTask
name|task
range|:
name|tasks
control|)
block|{
name|task
operator|.
name|task
argument_list|()
expr_stmt|;
block|}
block|}
comment|// now merge which also ensures that interceptors and the likes get mixed in correctly as well
name|RouteDefinition
name|merged
init|=
name|routes
operator|.
name|route
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// add the new merged route
name|camelContext
operator|.
name|getRouteDefinitions
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|merged
argument_list|)
expr_stmt|;
comment|// log the merged route at info level to make it easier to end users to spot any mistakes they may have made
name|log
operator|.
name|info
argument_list|(
literal|"AdviceWith route after: "
operator|+
name|merged
argument_list|)
expr_stmt|;
comment|// If the camel context is started then we start the route
if|if
condition|(
name|camelContext
operator|instanceof
name|StatefulService
condition|)
block|{
name|StatefulService
name|service
init|=
operator|(
name|StatefulService
operator|)
name|camelContext
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|camelContext
operator|.
name|startRoute
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|merged
return|;
block|}
comment|// Fluent API
comment|// -----------------------------------------------------------------------
comment|/**      * Creates an input to the route      *      * @param uri the from uri      * @return the builder      */
DECL|method|from (String uri)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates an input to the route      *      * @param endpoint the from endpoint      * @return the builder      */
DECL|method|from (Endpoint endpoint)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates inputs to the route      *      * @param uris the from uris      * @return the builder      */
DECL|method|from (String... uris)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Creates inputs to the route      *      * @param endpoints the from endpoints      * @return the builder      */
DECL|method|from (Endpoint... endpoints)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Set the group name for this route      *      * @param name the group name      * @return the builder      */
DECL|method|group (String name)
specifier|public
name|RouteDefinition
name|group
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the route id for this route      *      * @param id the route id      * @return the builder      */
DECL|method|routeId (String id)
specifier|public
name|RouteDefinition
name|routeId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable stream caching for this route.      *      * @return the builder      */
DECL|method|noStreamCaching ()
specifier|public
name|RouteDefinition
name|noStreamCaching
parameter_list|()
block|{
name|setStreamCache
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable stream caching for this route.      *      * @return the builder      */
DECL|method|streamCaching ()
specifier|public
name|RouteDefinition
name|streamCaching
parameter_list|()
block|{
name|setStreamCache
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable tracing for this route.      *      * @return the builder      */
DECL|method|noTracing ()
specifier|public
name|RouteDefinition
name|noTracing
parameter_list|()
block|{
name|setTrace
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable tracing for this route.      *      * @return the builder      */
DECL|method|tracing ()
specifier|public
name|RouteDefinition
name|tracing
parameter_list|()
block|{
name|setTrace
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable message history for this route.      *      * @return the builder      */
DECL|method|messageHistory ()
specifier|public
name|RouteDefinition
name|messageHistory
parameter_list|()
block|{
name|setMessageHistory
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable message history for this route.      *      * @return the builder      */
DECL|method|noMessageHistory ()
specifier|public
name|RouteDefinition
name|noMessageHistory
parameter_list|()
block|{
name|setMessageHistory
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable handle fault for this route.      *      * @return the builder      */
DECL|method|noHandleFault ()
specifier|public
name|RouteDefinition
name|noHandleFault
parameter_list|()
block|{
name|setHandleFault
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable handle fault for this route.      *      * @return the builder      */
DECL|method|handleFault ()
specifier|public
name|RouteDefinition
name|handleFault
parameter_list|()
block|{
name|setHandleFault
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable delayer for this route.      *      * @return the builder      */
DECL|method|noDelayer ()
specifier|public
name|RouteDefinition
name|noDelayer
parameter_list|()
block|{
name|setDelayer
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable delayer for this route.      *      * @param delay delay in millis      * @return the builder      */
DECL|method|delayer (long delay)
specifier|public
name|RouteDefinition
name|delayer
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setDelayer
argument_list|(
literal|""
operator|+
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Installs the given<a href="http://camel.apache.org/error-handler.html">error handler</a> builder.      *      * @param errorHandlerBuilder the error handler to be used by default for all child routes      * @return the current builder with the error handler configured      */
DECL|method|errorHandler (ErrorHandlerFactory errorHandlerBuilder)
specifier|public
name|RouteDefinition
name|errorHandler
parameter_list|(
name|ErrorHandlerFactory
name|errorHandlerBuilder
parameter_list|)
block|{
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
comment|// we are now using a route scoped error handler
name|contextScopedErrorHandler
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disables this route from being auto started when Camel starts.      *      * @return the builder      */
DECL|method|noAutoStartup ()
specifier|public
name|RouteDefinition
name|noAutoStartup
parameter_list|()
block|{
name|setAutoStartup
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the auto startup property on this route.      *      * @param autoStartup - String indicator ("true" or "false")      * @return the builder      */
DECL|method|autoStartup (String autoStartup)
specifier|public
name|RouteDefinition
name|autoStartup
parameter_list|(
name|String
name|autoStartup
parameter_list|)
block|{
name|setAutoStartup
argument_list|(
name|autoStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the auto startup property on this route.      *      * @param autoStartup - boolean indicator      * @return the builder      */
DECL|method|autoStartup (boolean autoStartup)
specifier|public
name|RouteDefinition
name|autoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|setAutoStartup
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|autoStartup
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the startup order for this route      *<p/>      * Camel will reorder routes and star them ordered by 0..N where 0 is the lowest number and N the highest number.      * Camel will stop routes in reverse order when its stopping.      *      * @param order the order represented as a number      * @return the builder      */
DECL|method|startupOrder (int order)
specifier|public
name|RouteDefinition
name|startupOrder
parameter_list|(
name|int
name|order
parameter_list|)
block|{
name|setStartupOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures route policies for this route      *      * @param policies the route policies      * @return the builder      */
DECL|method|routePolicy (RoutePolicy... policies)
specifier|public
name|RouteDefinition
name|routePolicy
parameter_list|(
name|RoutePolicy
modifier|...
name|policies
parameter_list|)
block|{
if|if
condition|(
name|routePolicies
operator|==
literal|null
condition|)
block|{
name|routePolicies
operator|=
operator|new
name|ArrayList
argument_list|<
name|RoutePolicy
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RoutePolicy
name|policy
range|:
name|policies
control|)
block|{
name|routePolicies
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configures a route policy for this route      *      * @param routePolicyRef reference to a {@link RoutePolicy} to lookup and use.      *                       You can specify multiple references by separating using comma.      * @return the builder      */
DECL|method|routePolicyRef (String routePolicyRef)
specifier|public
name|RouteDefinition
name|routePolicyRef
parameter_list|(
name|String
name|routePolicyRef
parameter_list|)
block|{
name|setRoutePolicyRef
argument_list|(
name|routePolicyRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures a shutdown route option.      *      * @param shutdownRoute the option to use when shutting down this route      * @return the builder      */
DECL|method|shutdownRoute (ShutdownRoute shutdownRoute)
specifier|public
name|RouteDefinition
name|shutdownRoute
parameter_list|(
name|ShutdownRoute
name|shutdownRoute
parameter_list|)
block|{
name|setShutdownRoute
argument_list|(
name|shutdownRoute
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures a shutdown running task option.      *      * @param shutdownRunningTask the option to use when shutting down and how to act upon running tasks.      * @return the builder      */
DECL|method|shutdownRunningTask (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|RouteDefinition
name|shutdownRunningTask
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
name|setShutdownRunningTask
argument_list|(
name|shutdownRunningTask
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getInputs ()
specifier|public
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
comment|/**      * Input to the route.      */
annotation|@
name|XmlElementRef
DECL|method|setInputs (List<FromDefinition> inputs)
specifier|public
name|void
name|setInputs
parameter_list|(
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
DECL|method|getOutputs ()
specifier|public
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
comment|/**      * Outputs are processors that determines how messages are processed by this route.      */
annotation|@
name|XmlElementRef
DECL|method|setOutputs (List<ProcessorDefinition<?>> outputs)
specifier|public
name|void
name|setOutputs
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
if|if
condition|(
name|outputs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
range|:
name|outputs
control|)
block|{
name|configureChild
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isOutputSupported ()
specifier|public
name|boolean
name|isOutputSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * The group that this route belongs to; could be the name of the RouteBuilder class      * or be explicitly configured in the XML.      *<p/>      * May be null.      */
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
comment|/**      * The group that this route belongs to; could be the name of the RouteBuilder class      * or be explicitly configured in the XML.      *<p/>      * May be null.      */
annotation|@
name|XmlAttribute
DECL|method|setGroup (String group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
comment|/**      * Whether stream caching is enabled on this route.      */
DECL|method|getStreamCache ()
specifier|public
name|String
name|getStreamCache
parameter_list|()
block|{
return|return
name|streamCache
return|;
block|}
comment|/**      * Whether stream caching is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setStreamCache (String streamCache)
specifier|public
name|void
name|setStreamCache
parameter_list|(
name|String
name|streamCache
parameter_list|)
block|{
name|this
operator|.
name|streamCache
operator|=
name|streamCache
expr_stmt|;
block|}
comment|/**      * Whether tracing is enabled on this route.      */
DECL|method|getTrace ()
specifier|public
name|String
name|getTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
comment|/**      * Whether tracing is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setTrace (String trace)
specifier|public
name|void
name|setTrace
parameter_list|(
name|String
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
comment|/**      * Whether message history is enabled on this route.      */
DECL|method|getMessageHistory ()
specifier|public
name|String
name|getMessageHistory
parameter_list|()
block|{
return|return
name|messageHistory
return|;
block|}
comment|/**      * Whether message history is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setMessageHistory (String messageHistory)
specifier|public
name|void
name|setMessageHistory
parameter_list|(
name|String
name|messageHistory
parameter_list|)
block|{
name|this
operator|.
name|messageHistory
operator|=
name|messageHistory
expr_stmt|;
block|}
comment|/**      * Whether handle fault is enabled on this route.      */
DECL|method|getHandleFault ()
specifier|public
name|String
name|getHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
comment|/**      * Whether handle fault is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setHandleFault (String handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|String
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
comment|/**      * Whether to slow down processing messages by a given delay in msec.      */
DECL|method|getDelayer ()
specifier|public
name|String
name|getDelayer
parameter_list|()
block|{
return|return
name|delayer
return|;
block|}
comment|/**      * Whether to slow down processing messages by a given delay in msec.      */
annotation|@
name|XmlAttribute
DECL|method|setDelayer (String delayer)
specifier|public
name|void
name|setDelayer
parameter_list|(
name|String
name|delayer
parameter_list|)
block|{
name|this
operator|.
name|delayer
operator|=
name|delayer
expr_stmt|;
block|}
comment|/**      * Whether to auto start this route      */
DECL|method|getAutoStartup ()
specifier|public
name|String
name|getAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
DECL|method|isAutoStartup (CamelContext camelContext)
specifier|public
name|boolean
name|isAutoStartup
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getAutoStartup
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// should auto startup by default
return|return
literal|true
return|;
block|}
name|Boolean
name|isAutoStartup
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|getAutoStartup
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|isAutoStartup
operator|!=
literal|null
operator|&&
name|isAutoStartup
return|;
block|}
comment|/**      * Whether to auto start this route      */
annotation|@
name|XmlAttribute
DECL|method|setAutoStartup (String autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|String
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
comment|/**      * To configure the ordering of the routes being started      */
DECL|method|getStartupOrder ()
specifier|public
name|Integer
name|getStartupOrder
parameter_list|()
block|{
return|return
name|startupOrder
return|;
block|}
comment|/**      * To configure the ordering of the routes being started      */
annotation|@
name|XmlAttribute
DECL|method|setStartupOrder (Integer startupOrder)
specifier|public
name|void
name|setStartupOrder
parameter_list|(
name|Integer
name|startupOrder
parameter_list|)
block|{
name|this
operator|.
name|startupOrder
operator|=
name|startupOrder
expr_stmt|;
block|}
comment|/**      * Sets the bean ref name of the error handler builder to use on this route      */
annotation|@
name|XmlAttribute
DECL|method|setErrorHandlerRef (String errorHandlerRef)
specifier|public
name|void
name|setErrorHandlerRef
parameter_list|(
name|String
name|errorHandlerRef
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerRef
operator|=
name|errorHandlerRef
expr_stmt|;
comment|// we use an specific error handler ref (from Spring DSL) then wrap that
comment|// with a error handler build ref so Camel knows its not just the default one
name|setErrorHandlerBuilder
argument_list|(
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the bean ref name of the error handler builder to use on this route      */
DECL|method|getErrorHandlerRef ()
specifier|public
name|String
name|getErrorHandlerRef
parameter_list|()
block|{
return|return
name|errorHandlerRef
return|;
block|}
comment|/**      * Sets the error handler if one is not already set      */
DECL|method|setErrorHandlerBuilderIfNull (ErrorHandlerFactory errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilderIfNull
parameter_list|(
name|ErrorHandlerFactory
name|errorHandlerBuilder
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|errorHandlerBuilder
operator|==
literal|null
condition|)
block|{
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reference to custom {@link org.apache.camel.spi.RoutePolicy} to use by the route.      * Multiple policies can be configured by separating values using comma.      */
annotation|@
name|XmlAttribute
DECL|method|setRoutePolicyRef (String routePolicyRef)
specifier|public
name|void
name|setRoutePolicyRef
parameter_list|(
name|String
name|routePolicyRef
parameter_list|)
block|{
name|this
operator|.
name|routePolicyRef
operator|=
name|routePolicyRef
expr_stmt|;
block|}
comment|/**      * Reference to custom {@link org.apache.camel.spi.RoutePolicy} to use by the route.      * Multiple policies can be configured by separating values using comma.      */
DECL|method|getRoutePolicyRef ()
specifier|public
name|String
name|getRoutePolicyRef
parameter_list|()
block|{
return|return
name|routePolicyRef
return|;
block|}
DECL|method|getRoutePolicies ()
specifier|public
name|List
argument_list|<
name|RoutePolicy
argument_list|>
name|getRoutePolicies
parameter_list|()
block|{
return|return
name|routePolicies
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|setRoutePolicies (List<RoutePolicy> routePolicies)
specifier|public
name|void
name|setRoutePolicies
parameter_list|(
name|List
argument_list|<
name|RoutePolicy
argument_list|>
name|routePolicies
parameter_list|)
block|{
name|this
operator|.
name|routePolicies
operator|=
name|routePolicies
expr_stmt|;
block|}
DECL|method|getShutdownRoute ()
specifier|public
name|ShutdownRoute
name|getShutdownRoute
parameter_list|()
block|{
return|return
name|shutdownRoute
return|;
block|}
comment|/**      * To control how to shutdown the route.      */
annotation|@
name|XmlAttribute
DECL|method|setShutdownRoute (ShutdownRoute shutdownRoute)
specifier|public
name|void
name|setShutdownRoute
parameter_list|(
name|ShutdownRoute
name|shutdownRoute
parameter_list|)
block|{
name|this
operator|.
name|shutdownRoute
operator|=
name|shutdownRoute
expr_stmt|;
block|}
comment|/**      * To control how to shutdown the route.      */
DECL|method|getShutdownRunningTask ()
specifier|public
name|ShutdownRunningTask
name|getShutdownRunningTask
parameter_list|()
block|{
return|return
name|shutdownRunningTask
return|;
block|}
comment|/**      * To control how to shutdown the route.      */
annotation|@
name|XmlAttribute
DECL|method|setShutdownRunningTask (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|void
name|setShutdownRunningTask
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
name|this
operator|.
name|shutdownRunningTask
operator|=
name|shutdownRunningTask
expr_stmt|;
block|}
DECL|method|createErrorHandlerBuilder ()
specifier|private
name|ErrorHandlerFactory
name|createErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerRef
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
return|;
block|}
comment|// return a reference to the default error handler
return|return
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|ErrorHandlerBuilderRef
operator|.
name|DEFAULT_ERROR_HANDLER_BUILDER
argument_list|)
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|getErrorHandlerBuilder ()
specifier|public
name|ErrorHandlerFactory
name|getErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerBuilder
operator|==
literal|null
condition|)
block|{
name|errorHandlerBuilder
operator|=
name|createErrorHandlerBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|errorHandlerBuilder
return|;
block|}
comment|/**      * Sets the error handler to use with processors created by this builder      */
DECL|method|setErrorHandlerBuilder (ErrorHandlerFactory errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilder
parameter_list|(
name|ErrorHandlerFactory
name|errorHandlerBuilder
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerBuilder
operator|=
name|errorHandlerBuilder
expr_stmt|;
block|}
annotation|@
name|XmlAttribute
DECL|method|isRest ()
specifier|public
name|Boolean
name|isRest
parameter_list|()
block|{
return|return
name|rest
return|;
block|}
DECL|method|getRestDefinition ()
specifier|public
name|RestDefinition
name|getRestDefinition
parameter_list|()
block|{
return|return
name|restDefinition
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|setRestDefinition (RestDefinition restDefinition)
specifier|public
name|void
name|setRestDefinition
parameter_list|(
name|RestDefinition
name|restDefinition
parameter_list|)
block|{
name|this
operator|.
name|restDefinition
operator|=
name|restDefinition
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|isContextScopedErrorHandler (CamelContext context)
specifier|public
name|boolean
name|isContextScopedErrorHandler
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|contextScopedErrorHandler
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if error handler ref is configured it may refer to a context scoped, so we need to check this first
comment|// the XML DSL will configure error handlers using refs, so we need this additional test
if|if
condition|(
name|errorHandlerRef
operator|!=
literal|null
condition|)
block|{
name|ErrorHandlerFactory
name|routeScoped
init|=
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
name|ErrorHandlerFactory
name|contextScoped
init|=
name|context
operator|.
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
return|return
name|routeScoped
operator|!=
literal|null
operator|&&
name|contextScoped
operator|!=
literal|null
operator|&&
name|routeScoped
operator|==
name|contextScoped
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
DECL|method|addRoutes (CamelContext camelContext, Collection<Route> routes, FromDefinition fromType)
specifier|protected
name|RouteContext
name|addRoutes
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|,
name|FromDefinition
name|fromType
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteContext
name|routeContext
init|=
operator|new
name|DefaultRouteContext
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
name|fromType
argument_list|,
name|routes
argument_list|)
decl_stmt|;
comment|// configure tracing
if|if
condition|(
name|trace
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|isTrace
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|getTrace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTrace
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setTracing
argument_list|(
name|isTrace
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTrace
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Tracing is enabled on route: {}"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// tracing is added in the DefaultChannel so we can enable it on the fly
block|}
block|}
block|}
comment|// configure message history
if|if
condition|(
name|messageHistory
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|isMessageHistory
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|getMessageHistory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMessageHistory
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setMessageHistory
argument_list|(
name|isMessageHistory
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMessageHistory
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Message history is enabled on route: {}"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// configure stream caching
if|if
condition|(
name|streamCache
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|isStreamCache
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|getStreamCache
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStreamCache
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setStreamCaching
argument_list|(
name|isStreamCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStreamCache
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"StreamCaching is enabled on route: {}"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// configure handle fault
if|if
condition|(
name|handleFault
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|isHandleFault
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|getHandleFault
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHandleFault
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setHandleFault
argument_list|(
name|isHandleFault
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHandleFault
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"HandleFault is enabled on route: {}"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// only add a new handle fault if not already a global configured on camel context
if|if
condition|(
name|HandleFault
operator|.
name|getHandleFault
argument_list|(
name|camelContext
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addInterceptStrategy
argument_list|(
operator|new
name|HandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// configure delayer
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|Long
name|delayer
init|=
name|CamelContextHelper
operator|.
name|parseLong
argument_list|(
name|camelContext
argument_list|,
name|getDelayer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|routeContext
operator|.
name|setDelayer
argument_list|(
name|delayer
argument_list|)
expr_stmt|;
if|if
condition|(
name|delayer
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Delayer is enabled with: {} ms. on route: {}"
argument_list|,
name|delayer
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Delayer is disabled on route: {}"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// configure route policy
if|if
condition|(
name|routePolicies
operator|!=
literal|null
operator|&&
operator|!
name|routePolicies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RoutePolicy
name|policy
range|:
name|routePolicies
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"RoutePolicy is enabled: {} on route: {}"
argument_list|,
name|policy
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|getRoutePolicyList
argument_list|()
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|routePolicyRef
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|policyTokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|routePolicyRef
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|policyTokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|ref
init|=
name|policyTokens
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|RoutePolicy
name|policy
init|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|camelContext
argument_list|,
name|ref
argument_list|,
name|RoutePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"RoutePolicy is enabled: {} on route: {}"
argument_list|,
name|policy
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|getRoutePolicyList
argument_list|()
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|camelContext
operator|.
name|getRoutePolicyFactories
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoutePolicyFactory
name|factory
range|:
name|camelContext
operator|.
name|getRoutePolicyFactories
argument_list|()
control|)
block|{
name|RoutePolicy
name|policy
init|=
name|factory
operator|.
name|createRoutePolicy
argument_list|(
name|camelContext
argument_list|,
name|getId
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"RoutePolicy is enabled: {} on route: {}"
argument_list|,
name|policy
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|getRoutePolicyList
argument_list|()
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// configure auto startup
name|Boolean
name|isAutoStartup
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|getAutoStartup
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAutoStartup
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using AutoStartup {} on route: {}"
argument_list|,
name|isAutoStartup
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|setAutoStartup
argument_list|(
name|isAutoStartup
argument_list|)
expr_stmt|;
block|}
comment|// configure shutdown
if|if
condition|(
name|shutdownRoute
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using ShutdownRoute {} on route: {}"
argument_list|,
name|getShutdownRoute
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|setShutdownRoute
argument_list|(
name|getShutdownRoute
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shutdownRunningTask
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using ShutdownRunningTask {} on route: {}"
argument_list|,
name|getShutdownRunningTask
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|setShutdownRunningTask
argument_list|(
name|getShutdownRunningTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// should inherit the intercept strategies we have defined
name|routeContext
operator|.
name|setInterceptStrategies
argument_list|(
name|this
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
comment|// force endpoint resolution
name|routeContext
operator|.
name|getEndpoint
argument_list|()
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
name|strategy
operator|.
name|onRouteContextCreate
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
comment|// validate route has output processors
if|if
condition|(
operator|!
name|ProcessorDefinitionHelper
operator|.
name|hasOutputs
argument_list|(
name|outputs
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|RouteDefinition
name|route
init|=
name|routeContext
operator|.
name|getRoute
argument_list|()
decl_stmt|;
name|String
name|at
init|=
name|fromType
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Exception
name|cause
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Route "
operator|+
name|route
operator|.
name|getId
argument_list|()
operator|+
literal|" has no output processors."
operator|+
literal|" You need to add outputs to the route such as to(\"log:foo\")."
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|FailedToCreateRouteException
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|route
operator|.
name|toString
argument_list|()
argument_list|,
name|at
argument_list|,
name|cause
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|outputs
argument_list|)
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
range|:
name|list
control|)
block|{
try|try
block|{
name|output
operator|.
name|addRoutes
argument_list|(
name|routeContext
argument_list|,
name|routes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RouteDefinition
name|route
init|=
name|routeContext
operator|.
name|getRoute
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|FailedToCreateRouteException
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|route
operator|.
name|toString
argument_list|()
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|routeContext
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|routeContext
return|;
block|}
block|}
end_class

end_unit

