begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PatternHelper
import|;
end_import

begin_comment
comment|/**  * To configure rest  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"rest"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"restConfiguration"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RestConfigurationDefinition
specifier|public
class|class
name|RestConfigurationDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|component
specifier|private
name|String
name|component
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"swagger"
argument_list|)
DECL|field|apiComponent
specifier|private
name|String
name|apiComponent
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|producerComponent
specifier|private
name|String
name|producerComponent
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|apiHost
specifier|private
name|String
name|apiHost
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|port
specifier|private
name|String
name|port
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|producerApiDoc
specifier|private
name|String
name|producerApiDoc
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|contextPath
specifier|private
name|String
name|contextPath
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|apiContextPath
specifier|private
name|String
name|apiContextPath
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|apiContextRouteId
specifier|private
name|String
name|apiContextRouteId
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|apiContextIdPattern
specifier|private
name|String
name|apiContextIdPattern
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|apiContextListing
specifier|private
name|Boolean
name|apiContextListing
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|apiVendorExtension
specifier|private
name|Boolean
name|apiVendorExtension
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|hostNameResolver
specifier|private
name|RestHostNameResolver
name|hostNameResolver
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"off"
argument_list|)
DECL|field|bindingMode
specifier|private
name|RestBindingMode
name|bindingMode
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|skipBindingOnErrorCode
specifier|private
name|Boolean
name|skipBindingOnErrorCode
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|clientRequestValidation
specifier|private
name|Boolean
name|clientRequestValidation
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|enableCORS
specifier|private
name|Boolean
name|enableCORS
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|jsonDataFormat
specifier|private
name|String
name|jsonDataFormat
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|xmlDataFormat
specifier|private
name|String
name|xmlDataFormat
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"componentProperty"
argument_list|)
DECL|field|componentProperties
specifier|private
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|componentProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"endpointProperty"
argument_list|)
DECL|field|endpointProperties
specifier|private
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|endpointProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"consumerProperty"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|consumerProperties
specifier|private
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|consumerProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"dataFormatProperty"
argument_list|)
DECL|field|dataFormatProperties
specifier|private
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|dataFormatProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"apiProperty"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|apiProperties
specifier|private
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|apiProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"corsHeaders"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|corsHeaders
specifier|private
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|corsHeaders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getComponent ()
specifier|public
name|String
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
comment|/**      * The Camel Rest component to use for the REST transport (consumer), such as restlet, spark-rest.      * If no component has been explicit configured, then Camel will lookup if there is a Camel component      * that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry.      * If either one is found, then that is being used.      */
DECL|method|setComponent (String component)
specifier|public
name|void
name|setComponent
parameter_list|(
name|String
name|component
parameter_list|)
block|{
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
DECL|method|getApiComponent ()
specifier|public
name|String
name|getApiComponent
parameter_list|()
block|{
return|return
name|apiComponent
return|;
block|}
comment|/**      * The name of the Camel component to use as the REST API (such as swagger)      */
DECL|method|setApiComponent (String apiComponent)
specifier|public
name|void
name|setApiComponent
parameter_list|(
name|String
name|apiComponent
parameter_list|)
block|{
name|this
operator|.
name|apiComponent
operator|=
name|apiComponent
expr_stmt|;
block|}
DECL|method|getProducerComponent ()
specifier|public
name|String
name|getProducerComponent
parameter_list|()
block|{
return|return
name|producerComponent
return|;
block|}
comment|/**      * Sets the name of the Camel component to use as the REST producer      */
DECL|method|setProducerComponent (String producerComponent)
specifier|public
name|void
name|setProducerComponent
parameter_list|(
name|String
name|producerComponent
parameter_list|)
block|{
name|this
operator|.
name|producerComponent
operator|=
name|producerComponent
expr_stmt|;
block|}
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
comment|/**      * The scheme to use for exposing the REST service. Usually http or https is supported.      *<p/>      * The default value is http      */
DECL|method|setScheme (String scheme)
specifier|public
name|void
name|setScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * The hostname to use for exposing the REST service.      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getApiHost ()
specifier|public
name|String
name|getApiHost
parameter_list|()
block|{
return|return
name|apiHost
return|;
block|}
comment|/**      * To use an specific hostname for the API documentation (eg swagger)      *<p/>      * This can be used to override the generated host with this configured hostname      */
DECL|method|setApiHost (String apiHost)
specifier|public
name|void
name|setApiHost
parameter_list|(
name|String
name|apiHost
parameter_list|)
block|{
name|this
operator|.
name|apiHost
operator|=
name|apiHost
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|String
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * The port number to use for exposing the REST service.      * Notice if you use servlet component then the port number configured here does not apply,      * as the port number in use is the actual port number the servlet component is using.      * eg if using Apache Tomcat its the tomcat http port, if using Apache Karaf its the HTTP service in Karaf      * that uses port 8181 by default etc. Though in those situations setting the port number here,      * allows tooling and JMX to know the port number, so its recommended to set the port number      * to the number that the servlet engine uses.      */
DECL|method|setPort (String port)
specifier|public
name|void
name|setPort
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getProducerApiDoc ()
specifier|public
name|String
name|getProducerApiDoc
parameter_list|()
block|{
return|return
name|producerApiDoc
return|;
block|}
comment|/**      * Sets the location of the api document (swagger api) the REST producer will use      * to validate the REST uri and query parameters are valid accordingly to the api document.      * This requires adding camel-swagger-java to the classpath, and any miss configuration      * will let Camel fail on startup and report the error(s).      *<p/>      * The location of the api document is loaded from classpath by default, but you can use      *<tt>file:</tt> or<tt>http:</tt> to refer to resources to load from file or http url.      */
DECL|method|setProducerApiDoc (String producerApiDoc)
specifier|public
name|void
name|setProducerApiDoc
parameter_list|(
name|String
name|producerApiDoc
parameter_list|)
block|{
name|this
operator|.
name|producerApiDoc
operator|=
name|producerApiDoc
expr_stmt|;
block|}
DECL|method|getContextPath ()
specifier|public
name|String
name|getContextPath
parameter_list|()
block|{
return|return
name|contextPath
return|;
block|}
comment|/**      * Sets a leading context-path the REST services will be using.      *<p/>      * This can be used when using components such as<tt>camel-servlet</tt> where the deployed web application      * is deployed using a context-path. Or for components such as<tt>camel-jetty</tt> or<tt>camel-netty4-http</tt>      * that includes a HTTP server.      */
DECL|method|setContextPath (String contextPath)
specifier|public
name|void
name|setContextPath
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|this
operator|.
name|contextPath
operator|=
name|contextPath
expr_stmt|;
block|}
DECL|method|getApiContextPath ()
specifier|public
name|String
name|getApiContextPath
parameter_list|()
block|{
return|return
name|apiContextPath
return|;
block|}
comment|/**      * Sets a leading API context-path the REST API services will be using.      *<p/>      * This can be used when using components such as<tt>camel-servlet</tt> where the deployed web application      * is deployed using a context-path.      *      * @param contextPath the API context path      */
DECL|method|setApiContextPath (String contextPath)
specifier|public
name|void
name|setApiContextPath
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|this
operator|.
name|apiContextPath
operator|=
name|contextPath
expr_stmt|;
block|}
DECL|method|getApiContextRouteId ()
specifier|public
name|String
name|getApiContextRouteId
parameter_list|()
block|{
return|return
name|apiContextRouteId
return|;
block|}
comment|/**      * Sets the route id to use for the route that services the REST API.      *<p/>      * The route will by default use an auto assigned route id.      *      * @param apiContextRouteId  the route id      */
DECL|method|setApiContextRouteId (String apiContextRouteId)
specifier|public
name|void
name|setApiContextRouteId
parameter_list|(
name|String
name|apiContextRouteId
parameter_list|)
block|{
name|this
operator|.
name|apiContextRouteId
operator|=
name|apiContextRouteId
expr_stmt|;
block|}
DECL|method|getApiContextIdPattern ()
specifier|public
name|String
name|getApiContextIdPattern
parameter_list|()
block|{
return|return
name|apiContextIdPattern
return|;
block|}
comment|/**      * Sets an CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.      *<p/>      * The pattern<tt>#name#</tt> refers to the CamelContext name, to match on the current CamelContext only.      * For any other value, the pattern uses the rules from {@link PatternHelper#matchPattern(String, String)}      *      * @param apiContextIdPattern  the pattern      */
DECL|method|setApiContextIdPattern (String apiContextIdPattern)
specifier|public
name|void
name|setApiContextIdPattern
parameter_list|(
name|String
name|apiContextIdPattern
parameter_list|)
block|{
name|this
operator|.
name|apiContextIdPattern
operator|=
name|apiContextIdPattern
expr_stmt|;
block|}
DECL|method|getApiContextListing ()
specifier|public
name|Boolean
name|getApiContextListing
parameter_list|()
block|{
return|return
name|apiContextListing
return|;
block|}
comment|/**      * Sets whether listing of all available CamelContext's with REST services in the JVM is enabled. If enabled it allows to discover      * these contexts, if<tt>false</tt> then only the current CamelContext is in use.      */
DECL|method|setApiContextListing (Boolean apiContextListing)
specifier|public
name|void
name|setApiContextListing
parameter_list|(
name|Boolean
name|apiContextListing
parameter_list|)
block|{
name|this
operator|.
name|apiContextListing
operator|=
name|apiContextListing
expr_stmt|;
block|}
DECL|method|getApiVendorExtension ()
specifier|public
name|Boolean
name|getApiVendorExtension
parameter_list|()
block|{
return|return
name|apiVendorExtension
return|;
block|}
comment|/**      * Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information      * as vendor extension (eg keys starting with x-) such as route ids, class names etc.      * Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.      */
DECL|method|setApiVendorExtension (Boolean apiVendorExtension)
specifier|public
name|void
name|setApiVendorExtension
parameter_list|(
name|Boolean
name|apiVendorExtension
parameter_list|)
block|{
name|this
operator|.
name|apiVendorExtension
operator|=
name|apiVendorExtension
expr_stmt|;
block|}
DECL|method|getHostNameResolver ()
specifier|public
name|RestHostNameResolver
name|getHostNameResolver
parameter_list|()
block|{
return|return
name|hostNameResolver
return|;
block|}
comment|/**      * If no hostname has been explicit configured, then this resolver is used to compute the hostname the REST service will be using.      */
DECL|method|setHostNameResolver (RestHostNameResolver hostNameResolver)
specifier|public
name|void
name|setHostNameResolver
parameter_list|(
name|RestHostNameResolver
name|hostNameResolver
parameter_list|)
block|{
name|this
operator|.
name|hostNameResolver
operator|=
name|hostNameResolver
expr_stmt|;
block|}
DECL|method|getBindingMode ()
specifier|public
name|RestBindingMode
name|getBindingMode
parameter_list|()
block|{
return|return
name|bindingMode
return|;
block|}
comment|/**      * Sets the binding mode to use.      *<p/>      * The default value is off      */
DECL|method|setBindingMode (RestBindingMode bindingMode)
specifier|public
name|void
name|setBindingMode
parameter_list|(
name|RestBindingMode
name|bindingMode
parameter_list|)
block|{
name|this
operator|.
name|bindingMode
operator|=
name|bindingMode
expr_stmt|;
block|}
DECL|method|getSkipBindingOnErrorCode ()
specifier|public
name|Boolean
name|getSkipBindingOnErrorCode
parameter_list|()
block|{
return|return
name|skipBindingOnErrorCode
return|;
block|}
comment|/**      * Whether to skip binding on output if there is a custom HTTP error code header.      * This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.      */
DECL|method|setSkipBindingOnErrorCode (Boolean skipBindingOnErrorCode)
specifier|public
name|void
name|setSkipBindingOnErrorCode
parameter_list|(
name|Boolean
name|skipBindingOnErrorCode
parameter_list|)
block|{
name|this
operator|.
name|skipBindingOnErrorCode
operator|=
name|skipBindingOnErrorCode
expr_stmt|;
block|}
DECL|method|getClientRequestValidation ()
specifier|public
name|Boolean
name|getClientRequestValidation
parameter_list|()
block|{
return|return
name|clientRequestValidation
return|;
block|}
comment|/**      * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from      * the client is supported by the Rest-DSL configuration of its consumes/produces settings.      *<p/>      * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.      *<p/>      * The default value is false.      */
DECL|method|setClientRequestValidation (Boolean clientRequestValidation)
specifier|public
name|void
name|setClientRequestValidation
parameter_list|(
name|Boolean
name|clientRequestValidation
parameter_list|)
block|{
name|this
operator|.
name|clientRequestValidation
operator|=
name|clientRequestValidation
expr_stmt|;
block|}
DECL|method|getEnableCORS ()
specifier|public
name|Boolean
name|getEnableCORS
parameter_list|()
block|{
return|return
name|enableCORS
return|;
block|}
comment|/**      * Whether to enable CORS headers in the HTTP response.      *<p/>      * The default value is false.      */
DECL|method|setEnableCORS (Boolean enableCORS)
specifier|public
name|void
name|setEnableCORS
parameter_list|(
name|Boolean
name|enableCORS
parameter_list|)
block|{
name|this
operator|.
name|enableCORS
operator|=
name|enableCORS
expr_stmt|;
block|}
DECL|method|getJsonDataFormat ()
specifier|public
name|String
name|getJsonDataFormat
parameter_list|()
block|{
return|return
name|jsonDataFormat
return|;
block|}
comment|/**      * Name of specific json data format to use.      * By default json-jackson will be used.      * Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      */
DECL|method|setJsonDataFormat (String jsonDataFormat)
specifier|public
name|void
name|setJsonDataFormat
parameter_list|(
name|String
name|jsonDataFormat
parameter_list|)
block|{
name|this
operator|.
name|jsonDataFormat
operator|=
name|jsonDataFormat
expr_stmt|;
block|}
DECL|method|getXmlDataFormat ()
specifier|public
name|String
name|getXmlDataFormat
parameter_list|()
block|{
return|return
name|xmlDataFormat
return|;
block|}
comment|/**      * Name of specific XML data format to use.      * By default jaxb will be used.      * Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      */
DECL|method|setXmlDataFormat (String xmlDataFormat)
specifier|public
name|void
name|setXmlDataFormat
parameter_list|(
name|String
name|xmlDataFormat
parameter_list|)
block|{
name|this
operator|.
name|xmlDataFormat
operator|=
name|xmlDataFormat
expr_stmt|;
block|}
DECL|method|getComponentProperties ()
specifier|public
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|getComponentProperties
parameter_list|()
block|{
return|return
name|componentProperties
return|;
block|}
comment|/**      * Allows to configure as many additional properties for the rest component in use.      */
DECL|method|setComponentProperties (List<RestPropertyDefinition> componentProperties)
specifier|public
name|void
name|setComponentProperties
parameter_list|(
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|componentProperties
parameter_list|)
block|{
name|this
operator|.
name|componentProperties
operator|=
name|componentProperties
expr_stmt|;
block|}
DECL|method|getEndpointProperties ()
specifier|public
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|getEndpointProperties
parameter_list|()
block|{
return|return
name|endpointProperties
return|;
block|}
comment|/**      * Allows to configure as many additional properties for the rest endpoint in use.      */
DECL|method|setEndpointProperties (List<RestPropertyDefinition> endpointProperties)
specifier|public
name|void
name|setEndpointProperties
parameter_list|(
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|endpointProperties
parameter_list|)
block|{
name|this
operator|.
name|endpointProperties
operator|=
name|endpointProperties
expr_stmt|;
block|}
DECL|method|getConsumerProperties ()
specifier|public
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|getConsumerProperties
parameter_list|()
block|{
return|return
name|consumerProperties
return|;
block|}
comment|/**      * Allows to configure as many additional properties for the rest consumer in use.      */
DECL|method|setConsumerProperties (List<RestPropertyDefinition> consumerProperties)
specifier|public
name|void
name|setConsumerProperties
parameter_list|(
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|consumerProperties
parameter_list|)
block|{
name|this
operator|.
name|consumerProperties
operator|=
name|consumerProperties
expr_stmt|;
block|}
DECL|method|getDataFormatProperties ()
specifier|public
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|getDataFormatProperties
parameter_list|()
block|{
return|return
name|dataFormatProperties
return|;
block|}
comment|/**      * Allows to configure as many additional properties for the data formats in use.      * For example set property prettyPrint to true to have json outputted in pretty mode.      * The properties can be prefixed to denote the option is only for either JSON or XML and for either the IN or the OUT.      * The prefixes are:      *<ul>      *<li>json.in.</li>      *<li>json.out.</li>      *<li>xml.in.</li>      *<li>xml.out.</li>      *</ul>      * For example a key with value "xml.out.mustBeJAXBElement" is only for the XML data format for the outgoing.      * A key without a prefix is a common key for all situations.      */
DECL|method|setDataFormatProperties (List<RestPropertyDefinition> dataFormatProperties)
specifier|public
name|void
name|setDataFormatProperties
parameter_list|(
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|dataFormatProperties
parameter_list|)
block|{
name|this
operator|.
name|dataFormatProperties
operator|=
name|dataFormatProperties
expr_stmt|;
block|}
DECL|method|getApiProperties ()
specifier|public
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|getApiProperties
parameter_list|()
block|{
return|return
name|apiProperties
return|;
block|}
comment|/**      * Allows to configure as many additional properties for the api documentation (swagger).      * For example set property api.title to my cool stuff      */
DECL|method|setApiProperties (List<RestPropertyDefinition> apiProperties)
specifier|public
name|void
name|setApiProperties
parameter_list|(
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|apiProperties
parameter_list|)
block|{
name|this
operator|.
name|apiProperties
operator|=
name|apiProperties
expr_stmt|;
block|}
DECL|method|getCorsHeaders ()
specifier|public
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|getCorsHeaders
parameter_list|()
block|{
return|return
name|corsHeaders
return|;
block|}
comment|/**      * Allows to configure custom CORS headers.      */
DECL|method|setCorsHeaders (List<RestPropertyDefinition> corsHeaders)
specifier|public
name|void
name|setCorsHeaders
parameter_list|(
name|List
argument_list|<
name|RestPropertyDefinition
argument_list|>
name|corsHeaders
parameter_list|)
block|{
name|this
operator|.
name|corsHeaders
operator|=
name|corsHeaders
expr_stmt|;
block|}
comment|// Fluent API
comment|//-------------------------------------------------------------------------
comment|/**      * To use a specific Camel rest component (consumer)      */
DECL|method|component (String componentId)
specifier|public
name|RestConfigurationDefinition
name|component
parameter_list|(
name|String
name|componentId
parameter_list|)
block|{
name|setComponent
argument_list|(
name|componentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a specific Camel rest API component      */
DECL|method|apiComponent (String componentId)
specifier|public
name|RestConfigurationDefinition
name|apiComponent
parameter_list|(
name|String
name|componentId
parameter_list|)
block|{
name|setApiComponent
argument_list|(
name|componentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a specific Camel rest component (producer)      */
DECL|method|producerComponent (String componentId)
specifier|public
name|RestConfigurationDefinition
name|producerComponent
parameter_list|(
name|String
name|componentId
parameter_list|)
block|{
name|setProducerComponent
argument_list|(
name|componentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a specific scheme such as http/https      */
DECL|method|scheme (String scheme)
specifier|public
name|RestConfigurationDefinition
name|scheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|setScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To define the host to use, such as 0.0.0.0 or localhost      */
DECL|method|host (String host)
specifier|public
name|RestConfigurationDefinition
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To define a specific host to use for API documentation (eg swagger) instead      * of using a generated API hostname that is relative to the REST service host.      */
DECL|method|apiHost (String host)
specifier|public
name|RestConfigurationDefinition
name|apiHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setApiHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To specify the port number to use for the REST service      */
DECL|method|port (int port)
specifier|public
name|RestConfigurationDefinition
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setPort
argument_list|(
literal|""
operator|+
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To specify the port number to use for the REST service      */
DECL|method|port (String port)
specifier|public
name|RestConfigurationDefinition
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the location of the api document (swagger api) the REST producer will use      * to validate the REST uri and query parameters are valid accordingly to the api document.      * This requires adding camel-swagger-java to the classpath, and any miss configuration      * will let Camel fail on startup and report the error(s).      *<p/>      * The location of the api document is loaded from classpath by default, but you can use      *<tt>file:</tt> or<tt>http:</tt> to refer to resources to load from file or http url.      */
DECL|method|producerApiDoc (String apiDoc)
specifier|public
name|RestConfigurationDefinition
name|producerApiDoc
parameter_list|(
name|String
name|apiDoc
parameter_list|)
block|{
name|setProducerApiDoc
argument_list|(
name|apiDoc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a leading context-path the REST services will be using.      *<p/>      * This can be used when using components such as<tt>camel-servlet</tt> where the deployed web application      * is deployed using a context-path. Or for components such as<tt>camel-jetty</tt> or<tt>camel-netty4-http</tt>      * that includes a HTTP server.      */
DECL|method|apiContextPath (String contextPath)
specifier|public
name|RestConfigurationDefinition
name|apiContextPath
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|setApiContextPath
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the route id to use for the route that services the REST API.      */
DECL|method|apiContextRouteId (String routeId)
specifier|public
name|RestConfigurationDefinition
name|apiContextRouteId
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
name|setApiContextRouteId
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets an CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.      *<p/>      * The pattern uses the following rules are applied in this order:      *<ul>      *<li>exact match, returns true</li>      *<li>wildcard match (pattern ends with a * and the name starts with the pattern), returns true</li>      *<li>regular expression match, returns true</li>      *<li>otherwise returns false</li>      *</ul>      */
DECL|method|apiContextIdPattern (String pattern)
specifier|public
name|RestConfigurationDefinition
name|apiContextIdPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|setApiContextIdPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether listing of all available CamelContext's with REST services in the JVM is enabled. If enabled it allows to discover      * these contexts, if<tt>false</tt> then only the current CamelContext is in use.      */
DECL|method|apiContextListing (boolean listing)
specifier|public
name|RestConfigurationDefinition
name|apiContextListing
parameter_list|(
name|boolean
name|listing
parameter_list|)
block|{
name|setApiContextListing
argument_list|(
name|listing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information      * as vendor extension (eg keys starting with x-) such as route ids, class names etc.      * Some API tooling may not support vendor extensions and this option can then be turned off.      */
DECL|method|apiVendorExtension (boolean vendorExtension)
specifier|public
name|RestConfigurationDefinition
name|apiVendorExtension
parameter_list|(
name|boolean
name|vendorExtension
parameter_list|)
block|{
name|setApiVendorExtension
argument_list|(
name|vendorExtension
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a leading context-path the REST services will be using.      *<p/>      * This can be used when using components such as<tt>camel-servlet</tt> where the deployed web application      * is deployed using a context-path.      */
DECL|method|contextPath (String contextPath)
specifier|public
name|RestConfigurationDefinition
name|contextPath
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|setContextPath
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To specify the hostname resolver      */
DECL|method|hostNameResolver (RestHostNameResolver hostNameResolver)
specifier|public
name|RestConfigurationDefinition
name|hostNameResolver
parameter_list|(
name|RestHostNameResolver
name|hostNameResolver
parameter_list|)
block|{
name|setHostNameResolver
argument_list|(
name|hostNameResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To specify the binding mode      */
DECL|method|bindingMode (RestBindingMode bindingMode)
specifier|public
name|RestConfigurationDefinition
name|bindingMode
parameter_list|(
name|RestBindingMode
name|bindingMode
parameter_list|)
block|{
name|setBindingMode
argument_list|(
name|bindingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To specify whether to skip binding output if there is a custom HTTP error code      */
DECL|method|skipBindingOnErrorCode (boolean skipBindingOnErrorCode)
specifier|public
name|RestConfigurationDefinition
name|skipBindingOnErrorCode
parameter_list|(
name|boolean
name|skipBindingOnErrorCode
parameter_list|)
block|{
name|setSkipBindingOnErrorCode
argument_list|(
name|skipBindingOnErrorCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from      * the client is supported by the Rest-DSL configuration of its consumes/produces settings.      */
DECL|method|clientRequestValidation (boolean clientRequestValidation)
specifier|public
name|RestConfigurationDefinition
name|clientRequestValidation
parameter_list|(
name|boolean
name|clientRequestValidation
parameter_list|)
block|{
name|setClientRequestValidation
argument_list|(
name|clientRequestValidation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response.      */
DECL|method|enableCORS (boolean enableCORS)
specifier|public
name|RestConfigurationDefinition
name|enableCORS
parameter_list|(
name|boolean
name|enableCORS
parameter_list|)
block|{
name|setEnableCORS
argument_list|(
name|enableCORS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a specific json data format      *<p/>      *<b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      *      * @param name  name of the data format to {@link org.apache.camel.CamelContext#resolveDataFormat(java.lang.String) resolve}      */
DECL|method|jsonDataFormat (String name)
specifier|public
name|RestConfigurationDefinition
name|jsonDataFormat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setJsonDataFormat
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a specific XML data format      *<p/>      *<b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.      *      * @param name  name of the data format to {@link org.apache.camel.CamelContext#resolveDataFormat(java.lang.String) resolve}      */
DECL|method|xmlDataFormat (String name)
specifier|public
name|RestConfigurationDefinition
name|xmlDataFormat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setXmlDataFormat
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * For additional configuration options on component level      *<p/>      * The value can use<tt>#</tt> to refer to a bean to lookup in the registry.      */
DECL|method|componentProperty (String key, String value)
specifier|public
name|RestConfigurationDefinition
name|componentProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|RestPropertyDefinition
name|prop
init|=
operator|new
name|RestPropertyDefinition
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getComponentProperties
argument_list|()
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * For additional configuration options on endpoint level      *<p/>      * The value can use<tt>#</tt> to refer to a bean to lookup in the registry.      */
DECL|method|endpointProperty (String key, String value)
specifier|public
name|RestConfigurationDefinition
name|endpointProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|RestPropertyDefinition
name|prop
init|=
operator|new
name|RestPropertyDefinition
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getEndpointProperties
argument_list|()
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * For additional configuration options on consumer level      *<p/>      * The value can use<tt>#</tt> to refer to a bean to lookup in the registry.      */
DECL|method|consumerProperty (String key, String value)
specifier|public
name|RestConfigurationDefinition
name|consumerProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|RestPropertyDefinition
name|prop
init|=
operator|new
name|RestPropertyDefinition
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getConsumerProperties
argument_list|()
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * For additional configuration options on data format level      *<p/>      * The value can use<tt>#</tt> to refer to a bean to lookup in the registry.      */
DECL|method|dataFormatProperty (String key, String value)
specifier|public
name|RestConfigurationDefinition
name|dataFormatProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|RestPropertyDefinition
name|prop
init|=
operator|new
name|RestPropertyDefinition
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getDataFormatProperties
argument_list|()
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * For configuring an api property, such as<tt>api.title</tt>, or<tt>api.version</tt>.      */
DECL|method|apiProperty (String key, String value)
specifier|public
name|RestConfigurationDefinition
name|apiProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|RestPropertyDefinition
name|prop
init|=
operator|new
name|RestPropertyDefinition
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getApiProperties
argument_list|()
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * For configuring CORS headers      */
DECL|method|corsHeaderProperty (String key, String value)
specifier|public
name|RestConfigurationDefinition
name|corsHeaderProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|RestPropertyDefinition
name|prop
init|=
operator|new
name|RestPropertyDefinition
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getCorsHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Shortcut for setting the {@code Access-Control-Allow-Credentials} header.      */
DECL|method|corsAllowCredentials (boolean corsAllowCredentials)
specifier|public
name|RestConfigurationDefinition
name|corsAllowCredentials
parameter_list|(
name|boolean
name|corsAllowCredentials
parameter_list|)
block|{
return|return
name|corsHeaderProperty
argument_list|(
literal|"Access-Control-Allow-Credentials"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|corsAllowCredentials
argument_list|)
argument_list|)
return|;
block|}
comment|// Implementation
comment|//-------------------------------------------------------------------------
comment|/**      * Creates a {@link org.apache.camel.spi.RestConfiguration} instance based on the definition      *      * @param context     the camel context      * @return the configuration      * @throws Exception is thrown if error creating the configuration      */
DECL|method|asRestConfiguration (CamelContext context)
specifier|public
name|RestConfiguration
name|asRestConfiguration
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|RestConfiguration
name|answer
init|=
operator|new
name|RestConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setComponent
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|component
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|apiComponent
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setApiComponent
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|apiComponent
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producerComponent
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setProducerComponent
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|producerComponent
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scheme
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setScheme
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|scheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setHost
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|host
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|apiHost
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setApiHost
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|apiHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setPort
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|context
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producerApiDoc
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setProducerApiDoc
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|producerApiDoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|apiContextPath
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setApiContextPath
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|apiContextPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|apiContextRouteId
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setApiContextRouteId
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|apiContextRouteId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|apiContextIdPattern
operator|!=
literal|null
condition|)
block|{
comment|// special to allow #name# to refer to itself
if|if
condition|(
literal|"#name#"
operator|.
name|equals
argument_list|(
name|apiComponent
argument_list|)
condition|)
block|{
name|answer
operator|.
name|setApiContextIdPattern
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setApiContextIdPattern
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|apiContextIdPattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|apiContextListing
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setApiContextListing
argument_list|(
name|apiContextListing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|apiVendorExtension
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setApiVendorExtension
argument_list|(
name|apiVendorExtension
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextPath
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setContextPath
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|contextPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostNameResolver
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setHostNameResolver
argument_list|(
name|hostNameResolver
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bindingMode
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setBindingMode
argument_list|(
name|bindingMode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipBindingOnErrorCode
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setSkipBindingOnErrorCode
argument_list|(
name|skipBindingOnErrorCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientRequestValidation
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setClientRequestValidation
argument_list|(
name|clientRequestValidation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableCORS
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setEnableCORS
argument_list|(
name|enableCORS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonDataFormat
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setJsonDataFormat
argument_list|(
name|jsonDataFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|xmlDataFormat
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setXmlDataFormat
argument_list|(
name|xmlDataFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|componentProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|componentProperties
control|)
block|{
name|String
name|key
init|=
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setComponentProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|endpointProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|endpointProperties
control|)
block|{
name|String
name|key
init|=
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setEndpointProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|consumerProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|consumerProperties
control|)
block|{
name|String
name|key
init|=
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setConsumerProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dataFormatProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|dataFormatProperties
control|)
block|{
name|String
name|key
init|=
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setDataFormatProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|apiProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|apiProperties
control|)
block|{
name|String
name|key
init|=
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setApiProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|corsHeaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|corsHeaders
control|)
block|{
name|String
name|key
init|=
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setCorsHeaders
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

