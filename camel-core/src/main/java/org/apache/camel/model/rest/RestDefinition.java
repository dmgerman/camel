begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ToDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * Represents an XML&lt;rest/&gt; element  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"rest"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RestDefinition
specifier|public
class|class
name|RestDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
annotation|@
name|XmlElementRef
DECL|field|verbs
specifier|private
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
init|=
operator|new
name|ArrayList
argument_list|<
name|VerbDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getUri ()
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|setUri (String uri)
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
DECL|method|getVerbs ()
specifier|public
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|getVerbs
parameter_list|()
block|{
return|return
name|verbs
return|;
block|}
DECL|method|setVerbs (List<VerbDefinition> verbs)
specifier|public
name|void
name|setVerbs
parameter_list|(
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
parameter_list|)
block|{
name|this
operator|.
name|verbs
operator|=
name|verbs
expr_stmt|;
block|}
comment|// Fluent API
comment|//-------------------------------------------------------------------------
comment|/**      * To set the uri      */
DECL|method|uri (String uri)
specifier|public
name|RestDefinition
name|uri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|get ()
specifier|public
name|RestDefinition
name|get
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"get"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|get (String uri)
specifier|public
name|RestDefinition
name|get
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"get"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|post ()
specifier|public
name|RestDefinition
name|post
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"post"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|post (String uri)
specifier|public
name|RestDefinition
name|post
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"post"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|put ()
specifier|public
name|RestDefinition
name|put
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"put"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|put (String uri)
specifier|public
name|RestDefinition
name|put
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"put"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|delete ()
specifier|public
name|RestDefinition
name|delete
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"delete"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|delete (String uri)
specifier|public
name|RestDefinition
name|delete
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"delete"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|head ()
specifier|public
name|RestDefinition
name|head
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"head"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|head (String uri)
specifier|public
name|RestDefinition
name|head
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"head"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|verb (String verb)
specifier|public
name|RestDefinition
name|verb
parameter_list|(
name|String
name|verb
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
name|verb
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|verb (String verb, String uri)
specifier|public
name|RestDefinition
name|verb
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
name|verb
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|consumes (String mediaType)
specifier|public
name|RestDefinition
name|consumes
parameter_list|(
name|String
name|mediaType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setConsumes
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|produces (String mediaType)
specifier|public
name|RestDefinition
name|produces
parameter_list|(
name|String
name|mediaType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setProduces
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|type (String classType)
specifier|public
name|RestDefinition
name|type
parameter_list|(
name|String
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|type (Class<?> classType)
specifier|public
name|RestDefinition
name|type
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setClassType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setType
argument_list|(
name|classType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeList (String classType)
specifier|public
name|RestDefinition
name|typeList
parameter_list|(
name|String
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setTypeList
argument_list|(
name|classType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeList (Class<?> classType)
specifier|public
name|RestDefinition
name|typeList
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setClassType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setTypeList
argument_list|(
name|classType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|outType (String classType)
specifier|public
name|RestDefinition
name|outType
parameter_list|(
name|String
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setOutType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|outType (Class<?> classType)
specifier|public
name|RestDefinition
name|outType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setOutClassType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setOutType
argument_list|(
name|classType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|outTypeList (String classType)
specifier|public
name|RestDefinition
name|outTypeList
parameter_list|(
name|String
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setOutTypeList
argument_list|(
name|classType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|outTypeList (Class<?> classType)
specifier|public
name|RestDefinition
name|outTypeList
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setOutClassType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
name|verb
operator|.
name|setOutTypeList
argument_list|(
name|classType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|bindingMode (RestBindingMode mode)
specifier|public
name|RestDefinition
name|bindingMode
parameter_list|(
name|RestBindingMode
name|mode
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setBindingMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Routes directly to the given endpoint.      *<p/>      * If you need additional routing capabilities, then use {@link #route()} instead.      *      * @param uri the uri of the endpoint      * @return this builder      */
DECL|method|to (String uri)
specifier|public
name|RestDefinition
name|to
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|ToDefinition
name|to
init|=
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setTo
argument_list|(
name|to
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|route ()
specifier|public
name|RouteDefinition
name|route
parameter_list|()
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
comment|// link them together so we can navigate using Java DSL
name|RouteDefinition
name|route
init|=
operator|new
name|RouteDefinition
argument_list|()
decl_stmt|;
name|route
operator|.
name|setRestDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
return|return
name|route
return|;
block|}
comment|// Implementation
comment|//-------------------------------------------------------------------------
DECL|method|addVerb (String verb, String uri)
specifier|private
name|RestDefinition
name|addVerb
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|VerbDefinition
name|answer
decl_stmt|;
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|GetVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"post"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|PostVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|DeleteVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"head"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|HeadVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"put"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|PutVerbDefinition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|VerbDefinition
argument_list|()
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|verb
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setRest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|getVerbs
argument_list|()
operator|.
name|add
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Transforms this REST definition into a list of {@link org.apache.camel.model.RouteDefinition} which      * Camel routing engine can add and run. This allows us to define REST services using this      * REST DSL and turn those into regular Camel routes.      */
DECL|method|asRouteDefinition (CamelContext camelContext)
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|asRouteDefinition
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|VerbDefinition
name|verb
range|:
name|getVerbs
argument_list|()
control|)
block|{
name|String
name|from
init|=
literal|"rest:"
operator|+
name|verb
operator|.
name|asVerb
argument_list|()
operator|+
literal|":"
operator|+
name|buildUri
argument_list|(
name|verb
argument_list|)
decl_stmt|;
comment|// append options
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|verb
operator|.
name|getConsumes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"consumes"
argument_list|,
name|verb
operator|.
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|from
operator|=
name|from
operator|+
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
comment|// either the verb has a singular to or a embedded route
name|RouteDefinition
name|route
init|=
name|verb
operator|.
name|getRoute
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|==
literal|null
condition|)
block|{
comment|// it was a singular to, so add a new route and add the singular
comment|// to as output to this route
name|route
operator|=
operator|new
name|RouteDefinition
argument_list|()
expr_stmt|;
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|verb
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add the binding
if|if
condition|(
name|verb
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|||
name|verb
operator|.
name|getClassType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RestBindingDefinition
name|binding
init|=
operator|new
name|RestBindingDefinition
argument_list|()
decl_stmt|;
name|binding
operator|.
name|setType
argument_list|(
name|verb
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setTypeList
argument_list|(
name|verb
operator|.
name|getTypeList
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setClassType
argument_list|(
name|verb
operator|.
name|getClassType
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setUseList
argument_list|(
name|verb
operator|.
name|isUseList
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setOutType
argument_list|(
name|verb
operator|.
name|getOutType
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setOutTypeList
argument_list|(
name|verb
operator|.
name|getOutTypeList
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setOutClassType
argument_list|(
name|verb
operator|.
name|getOutClassType
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setOutUseList
argument_list|(
name|verb
operator|.
name|isOutUseList
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setConsumes
argument_list|(
name|verb
operator|.
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setProduces
argument_list|(
name|verb
operator|.
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setBindingMode
argument_list|(
name|verb
operator|.
name|getBindingMode
argument_list|()
argument_list|)
expr_stmt|;
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
comment|// the route should be from this rest endpoint
name|route
operator|.
name|fromRest
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|route
operator|.
name|setRestDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|buildUri (VerbDefinition verb)
specifier|private
name|String
name|buildUri
parameter_list|(
name|VerbDefinition
name|verb
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|verb
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// make sure there is only one / slash separator between the two
name|String
name|s
init|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|verb
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|s
operator|+
literal|"/"
operator|+
name|s2
return|;
block|}
elseif|else
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
elseif|else
if|if
condition|(
name|verb
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|verb
operator|.
name|getUri
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

