begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OptionalIdentifiedDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ToDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ToDynamicDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * Defines a rest service using the rest-dsl  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"rest"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"rest"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RestDefinition
specifier|public
class|class
name|RestDefinition
extends|extends
name|OptionalIdentifiedDefinition
argument_list|<
name|RestDefinition
argument_list|>
block|{
annotation|@
name|XmlAttribute
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|tag
specifier|private
name|String
name|tag
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|consumes
specifier|private
name|String
name|consumes
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|produces
specifier|private
name|String
name|produces
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"auto"
argument_list|)
DECL|field|bindingMode
specifier|private
name|RestBindingMode
name|bindingMode
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|skipBindingOnErrorCode
specifier|private
name|Boolean
name|skipBindingOnErrorCode
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|clientRequestValidation
specifier|private
name|Boolean
name|clientRequestValidation
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|enableCORS
specifier|private
name|Boolean
name|enableCORS
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|apiDocs
specifier|private
name|Boolean
name|apiDocs
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"securityDefinitions"
argument_list|)
comment|// use the name swagger uses
DECL|field|securityDefinitions
specifier|private
name|RestSecuritiesDefinition
name|securityDefinitions
decl_stmt|;
annotation|@
name|XmlElementRef
DECL|field|verbs
specifier|private
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"rest"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"rest"
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**      * Path of the rest service, such as "/foo"      */
DECL|method|setPath (String path)
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getTag ()
specifier|public
name|String
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
comment|/**      * To configure a special tag for the operations within this rest definition.      */
DECL|method|setTag (String tag)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
DECL|method|getConsumes ()
specifier|public
name|String
name|getConsumes
parameter_list|()
block|{
return|return
name|consumes
return|;
block|}
comment|/**      * To define the content type what the REST service consumes (accept as input), such as application/xml or application/json.      * This option will override what may be configured on a parent level      */
DECL|method|setConsumes (String consumes)
specifier|public
name|void
name|setConsumes
parameter_list|(
name|String
name|consumes
parameter_list|)
block|{
name|this
operator|.
name|consumes
operator|=
name|consumes
expr_stmt|;
block|}
DECL|method|getProduces ()
specifier|public
name|String
name|getProduces
parameter_list|()
block|{
return|return
name|produces
return|;
block|}
comment|/**      * To define the content type what the REST service produces (uses for output), such as application/xml or application/json      * This option will override what may be configured on a parent level      */
DECL|method|setProduces (String produces)
specifier|public
name|void
name|setProduces
parameter_list|(
name|String
name|produces
parameter_list|)
block|{
name|this
operator|.
name|produces
operator|=
name|produces
expr_stmt|;
block|}
DECL|method|getBindingMode ()
specifier|public
name|RestBindingMode
name|getBindingMode
parameter_list|()
block|{
return|return
name|bindingMode
return|;
block|}
comment|/**      * Sets the binding mode to use.      * This option will override what may be configured on a parent level      *<p/>      * The default value is auto      */
DECL|method|setBindingMode (RestBindingMode bindingMode)
specifier|public
name|void
name|setBindingMode
parameter_list|(
name|RestBindingMode
name|bindingMode
parameter_list|)
block|{
name|this
operator|.
name|bindingMode
operator|=
name|bindingMode
expr_stmt|;
block|}
DECL|method|getVerbs ()
specifier|public
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|getVerbs
parameter_list|()
block|{
return|return
name|verbs
return|;
block|}
DECL|method|getSecurityDefinitions ()
specifier|public
name|RestSecuritiesDefinition
name|getSecurityDefinitions
parameter_list|()
block|{
return|return
name|securityDefinitions
return|;
block|}
comment|/**      * Sets the security definitions such as Basic, OAuth2 etc.      */
DECL|method|setSecurityDefinitions (RestSecuritiesDefinition securityDefinitions)
specifier|public
name|void
name|setSecurityDefinitions
parameter_list|(
name|RestSecuritiesDefinition
name|securityDefinitions
parameter_list|)
block|{
name|this
operator|.
name|securityDefinitions
operator|=
name|securityDefinitions
expr_stmt|;
block|}
comment|/**      * The HTTP verbs this REST service accepts and uses      */
DECL|method|setVerbs (List<VerbDefinition> verbs)
specifier|public
name|void
name|setVerbs
parameter_list|(
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
parameter_list|)
block|{
name|this
operator|.
name|verbs
operator|=
name|verbs
expr_stmt|;
block|}
DECL|method|getSkipBindingOnErrorCode ()
specifier|public
name|Boolean
name|getSkipBindingOnErrorCode
parameter_list|()
block|{
return|return
name|skipBindingOnErrorCode
return|;
block|}
comment|/**      * Whether to skip binding on output if there is a custom HTTP error code header.      * This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.      * This option will override what may be configured on a parent level      */
DECL|method|setSkipBindingOnErrorCode (Boolean skipBindingOnErrorCode)
specifier|public
name|void
name|setSkipBindingOnErrorCode
parameter_list|(
name|Boolean
name|skipBindingOnErrorCode
parameter_list|)
block|{
name|this
operator|.
name|skipBindingOnErrorCode
operator|=
name|skipBindingOnErrorCode
expr_stmt|;
block|}
DECL|method|getClientRequestValidation ()
specifier|public
name|Boolean
name|getClientRequestValidation
parameter_list|()
block|{
return|return
name|clientRequestValidation
return|;
block|}
comment|/**      * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from      * the client is supported by the Rest-DSL configuration of its consumes/produces settings.      *<p/>      * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.      *<p/>      * The default value is false.      */
DECL|method|setClientRequestValidation (Boolean clientRequestValidation)
specifier|public
name|void
name|setClientRequestValidation
parameter_list|(
name|Boolean
name|clientRequestValidation
parameter_list|)
block|{
name|this
operator|.
name|clientRequestValidation
operator|=
name|clientRequestValidation
expr_stmt|;
block|}
DECL|method|getEnableCORS ()
specifier|public
name|Boolean
name|getEnableCORS
parameter_list|()
block|{
return|return
name|enableCORS
return|;
block|}
comment|/**      * Whether to enable CORS headers in the HTTP response.      * This option will override what may be configured on a parent level      *<p/>      * The default value is false.      */
DECL|method|setEnableCORS (Boolean enableCORS)
specifier|public
name|void
name|setEnableCORS
parameter_list|(
name|Boolean
name|enableCORS
parameter_list|)
block|{
name|this
operator|.
name|enableCORS
operator|=
name|enableCORS
expr_stmt|;
block|}
DECL|method|getApiDocs ()
specifier|public
name|Boolean
name|getApiDocs
parameter_list|()
block|{
return|return
name|apiDocs
return|;
block|}
comment|/**      * Whether to include or exclude the VerbDefinition in API documentation.      * This option will override what may be configured on a parent level      *<p/>      * The default value is true.      */
DECL|method|setApiDocs (Boolean apiDocs)
specifier|public
name|void
name|setApiDocs
parameter_list|(
name|Boolean
name|apiDocs
parameter_list|)
block|{
name|this
operator|.
name|apiDocs
operator|=
name|apiDocs
expr_stmt|;
block|}
comment|// Fluent API
comment|//-------------------------------------------------------------------------
comment|/**      * To set the base path of this REST service      */
DECL|method|path (String path)
specifier|public
name|RestDefinition
name|path
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To set the tag to use of this REST service      */
DECL|method|tag (String tag)
specifier|public
name|RestDefinition
name|tag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|get ()
specifier|public
name|RestDefinition
name|get
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"get"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|get (String uri)
specifier|public
name|RestDefinition
name|get
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"get"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|post ()
specifier|public
name|RestDefinition
name|post
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"post"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|post (String uri)
specifier|public
name|RestDefinition
name|post
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"post"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|put ()
specifier|public
name|RestDefinition
name|put
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"put"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|put (String uri)
specifier|public
name|RestDefinition
name|put
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"put"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|patch ()
specifier|public
name|RestDefinition
name|patch
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"patch"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|patch (String uri)
specifier|public
name|RestDefinition
name|patch
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"patch"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|delete ()
specifier|public
name|RestDefinition
name|delete
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"delete"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|delete (String uri)
specifier|public
name|RestDefinition
name|delete
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"delete"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|head ()
specifier|public
name|RestDefinition
name|head
parameter_list|()
block|{
return|return
name|addVerb
argument_list|(
literal|"head"
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|head (String uri)
specifier|public
name|RestDefinition
name|head
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
literal|"head"
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|verb (String verb)
specifier|public
name|RestDefinition
name|verb
parameter_list|(
name|String
name|verb
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
name|verb
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|verb (String verb, String uri)
specifier|public
name|RestDefinition
name|verb
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
return|return
name|addVerb
argument_list|(
name|verb
argument_list|,
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|id (String id)
specifier|public
name|RestDefinition
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|super
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|description (String text)
specifier|public
name|RestDefinition
name|description
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|super
operator|.
name|description
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|description
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|description (String id, String text, String lang)
specifier|public
name|RestDefinition
name|description
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|super
operator|.
name|description
argument_list|(
name|id
argument_list|,
name|text
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|description
argument_list|(
name|id
argument_list|,
name|text
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|consumes (String mediaType)
specifier|public
name|RestDefinition
name|consumes
parameter_list|(
name|String
name|mediaType
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|consumes
operator|=
name|mediaType
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setConsumes
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|param ()
specifier|public
name|RestOperationParamDefinition
name|param
parameter_list|()
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|param
argument_list|(
name|verb
argument_list|)
return|;
block|}
DECL|method|param (RestOperationParamDefinition param)
specifier|public
name|RestDefinition
name|param
parameter_list|(
name|RestOperationParamDefinition
name|param
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|getParams
argument_list|()
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|params (List<RestOperationParamDefinition> params)
specifier|public
name|RestDefinition
name|params
parameter_list|(
name|List
argument_list|<
name|RestOperationParamDefinition
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|getParams
argument_list|()
operator|.
name|addAll
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|param (VerbDefinition verb)
specifier|public
name|RestOperationParamDefinition
name|param
parameter_list|(
name|VerbDefinition
name|verb
parameter_list|)
block|{
return|return
operator|new
name|RestOperationParamDefinition
argument_list|(
name|verb
argument_list|)
return|;
block|}
DECL|method|responseMessage (RestOperationResponseMsgDefinition msg)
specifier|public
name|RestDefinition
name|responseMessage
parameter_list|(
name|RestOperationResponseMsgDefinition
name|msg
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|getResponseMsgs
argument_list|()
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|responseMessage ()
specifier|public
name|RestOperationResponseMsgDefinition
name|responseMessage
parameter_list|()
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|responseMessage
argument_list|(
name|verb
argument_list|)
return|;
block|}
DECL|method|responseMessage (VerbDefinition verb)
specifier|public
name|RestOperationResponseMsgDefinition
name|responseMessage
parameter_list|(
name|VerbDefinition
name|verb
parameter_list|)
block|{
return|return
operator|new
name|RestOperationResponseMsgDefinition
argument_list|(
name|verb
argument_list|)
return|;
block|}
DECL|method|responseMessages (List<RestOperationResponseMsgDefinition> msgs)
specifier|public
name|RestDefinition
name|responseMessages
parameter_list|(
name|List
argument_list|<
name|RestOperationResponseMsgDefinition
argument_list|>
name|msgs
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|getResponseMsgs
argument_list|()
operator|.
name|addAll
argument_list|(
name|msgs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To configure security definitions.      */
DECL|method|securityDefinitions ()
specifier|public
name|RestSecuritiesDefinition
name|securityDefinitions
parameter_list|()
block|{
if|if
condition|(
name|securityDefinitions
operator|==
literal|null
condition|)
block|{
name|securityDefinitions
operator|=
operator|new
name|RestSecuritiesDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|securityDefinitions
return|;
block|}
DECL|method|produces (String mediaType)
specifier|public
name|RestDefinition
name|produces
parameter_list|(
name|String
name|mediaType
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|produces
operator|=
name|mediaType
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setProduces
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|type (Class<?> classType)
specifier|public
name|RestDefinition
name|type
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setType
argument_list|(
name|classType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|outType (Class<?> classType)
specifier|public
name|RestDefinition
name|outType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setOutType
argument_list|(
name|classType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|bindingMode (RestBindingMode mode)
specifier|public
name|RestDefinition
name|bindingMode
parameter_list|(
name|RestBindingMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|bindingMode
operator|=
name|mode
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setBindingMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|skipBindingOnErrorCode (boolean skipBindingOnErrorCode)
specifier|public
name|RestDefinition
name|skipBindingOnErrorCode
parameter_list|(
name|boolean
name|skipBindingOnErrorCode
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|skipBindingOnErrorCode
operator|=
name|skipBindingOnErrorCode
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setSkipBindingOnErrorCode
argument_list|(
name|skipBindingOnErrorCode
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|clientRequestValidation (boolean clientRequestValidation)
specifier|public
name|RestDefinition
name|clientRequestValidation
parameter_list|(
name|boolean
name|clientRequestValidation
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|clientRequestValidation
operator|=
name|clientRequestValidation
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setClientRequestValidation
argument_list|(
name|clientRequestValidation
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|enableCORS (boolean enableCORS)
specifier|public
name|RestDefinition
name|enableCORS
parameter_list|(
name|boolean
name|enableCORS
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|enableCORS
operator|=
name|enableCORS
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setEnableCORS
argument_list|(
name|enableCORS
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Include or exclude the current Rest Definition in API documentation.      *<p/>      * The default value is true.      */
DECL|method|apiDocs (Boolean apiDocs)
specifier|public
name|RestDefinition
name|apiDocs
parameter_list|(
name|Boolean
name|apiDocs
parameter_list|)
block|{
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|apiDocs
operator|=
name|apiDocs
expr_stmt|;
block|}
else|else
block|{
comment|// add on last verb as that is how the Java DSL works
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setApiDocs
argument_list|(
name|apiDocs
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Sets the security setting for this verb.      */
DECL|method|security (String key)
specifier|public
name|RestDefinition
name|security
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|security
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Sets the security setting for this verb.      */
DECL|method|security (String key, String scopes)
specifier|public
name|RestDefinition
name|security
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|scopes
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SecurityDefinition
name|sd
init|=
operator|new
name|SecurityDefinition
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setScopes
argument_list|(
name|scopes
argument_list|)
expr_stmt|;
name|verb
operator|.
name|getSecurity
argument_list|()
operator|.
name|add
argument_list|(
name|sd
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Routes directly to the given static endpoint.      *<p/>      * If you need additional routing capabilities, then use {@link #route()} instead.      *      * @param uri the uri of the endpoint      * @return this builder      */
DECL|method|to (String uri)
specifier|public
name|RestDefinition
name|to
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|ToDefinition
name|to
init|=
operator|new
name|ToDefinition
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setTo
argument_list|(
name|to
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Routes directly to the given dynamic endpoint.      *<p/>      * If you need additional routing capabilities, then use {@link #route()} instead.      *      * @param uri the uri of the endpoint      * @return this builder      */
DECL|method|toD (String uri)
specifier|public
name|RestDefinition
name|toD
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
name|ToDynamicDefinition
name|to
init|=
operator|new
name|ToDynamicDefinition
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setToD
argument_list|(
name|to
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|route ()
specifier|public
name|RouteDefinition
name|route
parameter_list|()
block|{
comment|// add to last verb
if|if
condition|(
name|getVerbs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must add verb first, such as get/post/delete"
argument_list|)
throw|;
block|}
comment|// link them together so we can navigate using Java DSL
name|RouteDefinition
name|route
init|=
operator|new
name|RouteDefinition
argument_list|()
decl_stmt|;
name|route
operator|.
name|setRestDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|VerbDefinition
name|verb
init|=
name|getVerbs
argument_list|()
operator|.
name|get
argument_list|(
name|getVerbs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|verb
operator|.
name|setRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
return|return
name|route
return|;
block|}
comment|// Implementation
comment|//-------------------------------------------------------------------------
DECL|method|addVerb (String verb, String uri)
specifier|private
name|RestDefinition
name|addVerb
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|VerbDefinition
name|answer
decl_stmt|;
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|GetVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"post"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|PostVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|DeleteVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"head"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|HeadVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"put"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|PutVerbDefinition
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"patch"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|PatchVerbDefinition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|VerbDefinition
argument_list|()
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|verb
argument_list|)
expr_stmt|;
block|}
name|getVerbs
argument_list|()
operator|.
name|add
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setRest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Transforms this REST definition into a list of {@link org.apache.camel.model.RouteDefinition} which      * Camel routing engine can add and run. This allows us to define REST services using this      * REST DSL and turn those into regular Camel routes.      *      * @param camelContext The Camel context      */
DECL|method|asRouteDefinition (CamelContext camelContext)
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|asRouteDefinition
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
comment|// sanity check this rest definition do not have duplicates
name|validateUniquePaths
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|.
name|getRestConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// make sure to initialize a rest configuration when its empty
comment|// lookup a global which may have been setup via camel-spring-boot etc
name|RestConfiguration
name|conf
init|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|RestConstants
operator|.
name|DEFAULT_REST_CONFIGURATION_ID
argument_list|,
name|RestConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|CamelContextHelper
operator|.
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|RestConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setRestConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|camelContext
operator|.
name|setRestConfiguration
argument_list|(
operator|new
name|RestConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RestConfiguration
name|config
range|:
name|camelContext
operator|.
name|getRestConfigurations
argument_list|()
control|)
block|{
name|addRouteDefinition
argument_list|(
name|camelContext
argument_list|,
name|answer
argument_list|,
name|config
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Transforms this REST definition into a list of {@link org.apache.camel.model.RouteDefinition} which      * Camel routing engine can add and run. This allows us to define REST services using this      * REST DSL and turn those into regular Camel routes.      *      * @param camelContext        The Camel context      * @param restConfiguration   The rest configuration to use      */
DECL|method|asRouteDefinition (CamelContext camelContext, RestConfiguration restConfiguration)
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|asRouteDefinition
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|RestConfiguration
name|restConfiguration
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|restConfiguration
argument_list|,
literal|"RestConfiguration"
argument_list|)
expr_stmt|;
comment|// sanity check this rest definition do not have duplicates
name|validateUniquePaths
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addRouteDefinition
argument_list|(
name|camelContext
argument_list|,
name|answer
argument_list|,
name|restConfiguration
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|validateUniquePaths ()
specifier|protected
name|void
name|validateUniquePaths
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|VerbDefinition
name|verb
range|:
name|verbs
control|)
block|{
name|String
name|path
init|=
name|verb
operator|.
name|asVerb
argument_list|()
decl_stmt|;
if|if
condition|(
name|verb
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|path
operator|+=
literal|":"
operator|+
name|verb
operator|.
name|getUri
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate verb detected in rest-dsl: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Transforms the rest api configuration into a {@link org.apache.camel.model.RouteDefinition} which      * Camel routing engine uses to service the rest api docs.      */
DECL|method|asRouteApiDefinition (CamelContext camelContext, RestConfiguration configuration)
specifier|public
specifier|static
name|RouteDefinition
name|asRouteApiDefinition
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|)
block|{
name|RouteDefinition
name|answer
init|=
operator|new
name|RouteDefinition
argument_list|()
decl_stmt|;
comment|// create the from endpoint uri which is using the rest-api component
name|String
name|from
init|=
literal|"rest-api:"
operator|+
name|configuration
operator|.
name|getApiContextPath
argument_list|()
decl_stmt|;
comment|// append options
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|routeId
init|=
name|configuration
operator|.
name|getApiContextRouteId
argument_list|()
decl_stmt|;
if|if
condition|(
name|routeId
operator|==
literal|null
condition|)
block|{
name|routeId
operator|=
name|answer
operator|.
name|idOrCreate
argument_list|(
name|camelContext
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|put
argument_list|(
literal|"routeId"
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getComponent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|configuration
operator|.
name|getComponent
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"componentName"
argument_list|,
name|configuration
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getApiContextIdPattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"contextIdPattern"
argument_list|,
name|configuration
operator|.
name|getApiContextIdPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|query
decl_stmt|;
try|try
block|{
name|query
operator|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|from
operator|=
name|from
operator|+
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
comment|// we use the same uri as the producer (so we have a little route for the rest api)
name|String
name|to
init|=
name|from
decl_stmt|;
name|answer
operator|.
name|fromRest
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|answer
operator|.
name|id
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
name|answer
operator|.
name|to
argument_list|(
name|to
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|addRouteDefinition (CamelContext camelContext, List<RouteDefinition> answer, String component)
specifier|private
name|void
name|addRouteDefinition
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|answer
parameter_list|,
name|String
name|component
parameter_list|)
block|{
for|for
control|(
name|VerbDefinition
name|verb
range|:
name|getVerbs
argument_list|()
control|)
block|{
comment|// either the verb has a singular to or a embedded route
name|RouteDefinition
name|route
init|=
name|verb
operator|.
name|getRoute
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|==
literal|null
condition|)
block|{
comment|// it was a singular to, so add a new route and add the singular
comment|// to as output to this route
name|route
operator|=
operator|new
name|RouteDefinition
argument_list|()
expr_stmt|;
name|ProcessorDefinition
name|def
init|=
name|verb
operator|.
name|getTo
argument_list|()
operator|!=
literal|null
condition|?
name|verb
operator|.
name|getTo
argument_list|()
else|:
name|verb
operator|.
name|getToD
argument_list|()
decl_stmt|;
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
comment|// ensure property placeholders is resolved on the verb
try|try
block|{
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|camelContext
argument_list|,
name|verb
argument_list|)
expr_stmt|;
for|for
control|(
name|RestOperationParamDefinition
name|param
range|:
name|verb
operator|.
name|getParams
argument_list|()
control|)
block|{
name|ProcessorDefinitionHelper
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|camelContext
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// add the binding
name|RestBindingDefinition
name|binding
init|=
operator|new
name|RestBindingDefinition
argument_list|()
decl_stmt|;
name|binding
operator|.
name|setComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setType
argument_list|(
name|verb
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setOutType
argument_list|(
name|verb
operator|.
name|getOutType
argument_list|()
argument_list|)
expr_stmt|;
comment|// verb takes precedence over configuration on rest
if|if
condition|(
name|verb
operator|.
name|getConsumes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|binding
operator|.
name|setConsumes
argument_list|(
name|verb
operator|.
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binding
operator|.
name|setConsumes
argument_list|(
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verb
operator|.
name|getProduces
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|binding
operator|.
name|setProduces
argument_list|(
name|verb
operator|.
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binding
operator|.
name|setProduces
argument_list|(
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verb
operator|.
name|getBindingMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|binding
operator|.
name|setBindingMode
argument_list|(
name|verb
operator|.
name|getBindingMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binding
operator|.
name|setBindingMode
argument_list|(
name|getBindingMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verb
operator|.
name|getSkipBindingOnErrorCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|binding
operator|.
name|setSkipBindingOnErrorCode
argument_list|(
name|verb
operator|.
name|getSkipBindingOnErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binding
operator|.
name|setSkipBindingOnErrorCode
argument_list|(
name|getSkipBindingOnErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verb
operator|.
name|getClientRequestValidation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|binding
operator|.
name|setClientRequestValidation
argument_list|(
name|verb
operator|.
name|getClientRequestValidation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binding
operator|.
name|setClientRequestValidation
argument_list|(
name|getClientRequestValidation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verb
operator|.
name|getEnableCORS
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|binding
operator|.
name|setEnableCORS
argument_list|(
name|verb
operator|.
name|getEnableCORS
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binding
operator|.
name|setEnableCORS
argument_list|(
name|getEnableCORS
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RestOperationParamDefinition
name|param
range|:
name|verb
operator|.
name|getParams
argument_list|()
control|)
block|{
comment|// register all the default values for the query parameters
if|if
condition|(
name|RestParamType
operator|.
name|query
operator|==
name|param
operator|.
name|getType
argument_list|()
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|param
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
name|binding
operator|.
name|addDefaultValue
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|param
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// register which parameters are required
if|if
condition|(
name|param
operator|.
name|getRequired
argument_list|()
condition|)
block|{
if|if
condition|(
name|RestParamType
operator|.
name|query
operator|==
name|param
operator|.
name|getType
argument_list|()
condition|)
block|{
name|binding
operator|.
name|addRequiredQueryParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RestParamType
operator|.
name|header
operator|==
name|param
operator|.
name|getType
argument_list|()
condition|)
block|{
name|binding
operator|.
name|addRequiredHeader
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RestParamType
operator|.
name|body
operator|==
name|param
operator|.
name|getType
argument_list|()
condition|)
block|{
name|binding
operator|.
name|setRequiredBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|route
operator|.
name|setRestBindingDefinition
argument_list|(
name|binding
argument_list|)
expr_stmt|;
comment|// create the from endpoint uri which is using the rest component
name|String
name|from
init|=
literal|"rest:"
operator|+
name|verb
operator|.
name|asVerb
argument_list|()
operator|+
literal|":"
operator|+
name|buildUri
argument_list|(
name|verb
argument_list|)
decl_stmt|;
comment|// append options
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// verb takes precedence over configuration on rest
if|if
condition|(
name|verb
operator|.
name|getConsumes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"consumes"
argument_list|,
name|verb
operator|.
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getConsumes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"consumes"
argument_list|,
name|getConsumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verb
operator|.
name|getProduces
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"produces"
argument_list|,
name|verb
operator|.
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getProduces
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"produces"
argument_list|,
name|getProduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// append optional type binding information
name|String
name|inType
init|=
name|binding
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|inType
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"inType"
argument_list|,
name|inType
argument_list|)
expr_stmt|;
block|}
name|String
name|outType
init|=
name|binding
operator|.
name|getOutType
argument_list|()
decl_stmt|;
if|if
condition|(
name|outType
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"outType"
argument_list|,
name|outType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|component
operator|!=
literal|null
operator|&&
operator|!
name|component
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"componentName"
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
comment|// include optional description, which we favor from 1) to/route description 2) verb description 3) rest description
comment|// this allows end users to define general descriptions and override then per to/route or verb
name|String
name|description
init|=
name|verb
operator|.
name|getTo
argument_list|()
operator|!=
literal|null
condition|?
name|verb
operator|.
name|getTo
argument_list|()
operator|.
name|getDescriptionText
argument_list|()
else|:
name|route
operator|.
name|getDescriptionText
argument_list|()
decl_stmt|;
if|if
condition|(
name|description
operator|==
literal|null
condition|)
block|{
name|description
operator|=
name|verb
operator|.
name|getDescriptionText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|description
operator|==
literal|null
condition|)
block|{
name|description
operator|=
name|getDescriptionText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|query
decl_stmt|;
try|try
block|{
name|query
operator|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|from
operator|=
name|from
operator|+
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|String
name|s1
init|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|verb
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|allPath
decl_stmt|;
if|if
condition|(
name|s1
operator|!=
literal|null
operator|&&
name|s2
operator|!=
literal|null
condition|)
block|{
name|allPath
operator|=
name|s1
operator|+
literal|"/"
operator|+
name|s2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|allPath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|allPath
operator|=
name|verb
operator|.
name|getUri
argument_list|()
expr_stmt|;
block|}
comment|// each {} is a parameter (url templating)
if|if
condition|(
name|allPath
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|allPath
operator|.
name|split
argument_list|(
literal|"\\/"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|arr
control|)
block|{
comment|// need to resolve property placeholders first
try|try
block|{
name|a
operator|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|a
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
operator|&&
name|a
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|a
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|//  merge if exists
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RestOperationParamDefinition
name|param
range|:
name|verb
operator|.
name|getParams
argument_list|()
control|)
block|{
comment|// name is mandatory
name|String
name|name
init|=
name|param
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"parameter name"
argument_list|)
expr_stmt|;
comment|// need to resolve property placeholders first
try|try
block|{
name|name
operator|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|param
operator|.
name|type
argument_list|(
name|RestParamType
operator|.
name|path
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|param
argument_list|(
name|verb
argument_list|)
operator|.
name|name
argument_list|(
name|key
argument_list|)
operator|.
name|type
argument_list|(
name|RestParamType
operator|.
name|path
argument_list|)
operator|.
name|endParam
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|verb
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|bodyType
init|=
name|verb
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|bodyType
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|bodyType
operator|=
literal|"List["
operator|+
name|bodyType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bodyType
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
name|RestOperationParamDefinition
name|param
init|=
name|findParam
argument_list|(
name|verb
argument_list|,
name|RestParamType
operator|.
name|body
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|==
literal|null
condition|)
block|{
comment|// must be body type and set the model class as data type
name|param
argument_list|(
name|verb
argument_list|)
operator|.
name|name
argument_list|(
name|RestParamType
operator|.
name|body
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|RestParamType
operator|.
name|body
argument_list|)
operator|.
name|dataType
argument_list|(
name|bodyType
argument_list|)
operator|.
name|endParam
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// must be body type and set the model class as data type
name|param
operator|.
name|type
argument_list|(
name|RestParamType
operator|.
name|body
argument_list|)
operator|.
name|dataType
argument_list|(
name|bodyType
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the route should be from this rest endpoint
name|route
operator|.
name|fromRest
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|route
operator|.
name|setRestDefinition
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildUri (VerbDefinition verb)
specifier|private
name|String
name|buildUri
parameter_list|(
name|VerbDefinition
name|verb
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|verb
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|path
operator|+
literal|":"
operator|+
name|verb
operator|.
name|getUri
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
return|return
name|path
return|;
block|}
elseif|else
if|if
condition|(
name|verb
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|verb
operator|.
name|getUri
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|findParam (VerbDefinition verb, String name)
specifier|private
name|RestOperationParamDefinition
name|findParam
parameter_list|(
name|VerbDefinition
name|verb
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|RestOperationParamDefinition
name|param
range|:
name|verb
operator|.
name|getParams
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|param
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

