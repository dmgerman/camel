begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NamespaceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
import|;
end_import

begin_comment
comment|/**  * Helper for the Camel {@link org.apache.camel.model model} classes.  */
end_comment

begin_class
DECL|class|ModelHelper
specifier|public
specifier|final
class|class
name|ModelHelper
block|{
DECL|method|ModelHelper ()
specifier|private
name|ModelHelper
parameter_list|()
block|{
comment|// utility class
block|}
comment|/**      * Dumps the definition as XML      *      * @param context    the CamelContext, if<tt>null</tt> then {@link org.apache.camel.spi.ModelJAXBContextFactory} is not in use      * @param definition the definition, such as a {@link org.apache.camel.NamedNode}      * @return the output in XML (is formatted)      * @throws JAXBException is throw if error marshalling to XML      */
DECL|method|dumpModelAsXml (CamelContext context, NamedNode definition)
specifier|public
specifier|static
name|String
name|dumpModelAsXml
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|NamedNode
name|definition
parameter_list|)
throws|throws
name|JAXBException
block|{
name|JAXBContext
name|jaxbContext
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|jaxbContext
operator|=
name|createJAXBContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jaxbContext
operator|=
name|context
operator|.
name|getModelJAXBContextFactory
argument_list|()
operator|.
name|newJAXBContext
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// gather all namespaces from the routes or route which is stored on the expression nodes
if|if
condition|(
name|definition
operator|instanceof
name|RoutesDefinition
condition|)
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
init|=
operator|(
operator|(
name|RoutesDefinition
operator|)
name|definition
operator|)
operator|.
name|getRoutes
argument_list|()
decl_stmt|;
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routes
control|)
block|{
name|extractNamespaces
argument_list|(
name|route
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|definition
operator|instanceof
name|RouteDefinition
condition|)
block|{
name|RouteDefinition
name|route
init|=
operator|(
name|RouteDefinition
operator|)
name|definition
decl_stmt|;
name|extractNamespaces
argument_list|(
name|route
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
comment|// TODO: add all namespaces to the root node so the xml output includes those
name|Marshaller
name|marshaller
init|=
name|jaxbContext
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|definition
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Marshal the xml to the model definition      *      * @param context the CamelContext, if<tt>null</tt> then {@link org.apache.camel.spi.ModelJAXBContextFactory} is not in use      * @param xml     the xml      * @param type    the definition type to return, will throw a {@link ClassCastException} if not the expected type      * @return the model definition      * @throws javax.xml.bind.JAXBException is thrown if error unmarshalling from xml to model      */
DECL|method|createModelFromXml (CamelContext context, String xml, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|NamedNode
parameter_list|>
name|T
name|createModelFromXml
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|xml
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|JAXBException
block|{
comment|// TODO: support injecting namespaces into each namespace aware node
name|JAXBContext
name|jaxbContext
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|jaxbContext
operator|=
name|createJAXBContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jaxbContext
operator|=
name|context
operator|.
name|getModelJAXBContextFactory
argument_list|()
operator|.
name|newJAXBContext
argument_list|()
expr_stmt|;
block|}
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|Object
name|result
decl_stmt|;
try|try
block|{
name|Unmarshaller
name|unmarshaller
init|=
name|jaxbContext
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|result
operator|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JAXBException
argument_list|(
literal|"Cannot unmarshal to "
operator|+
name|type
operator|+
literal|" using JAXB from XML: "
operator|+
name|xml
argument_list|)
throw|;
block|}
return|return
name|type
operator|.
name|cast
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * Marshal the xml to the model definition      *      * @param context the CamelContext, if<tt>null</tt> then {@link org.apache.camel.spi.ModelJAXBContextFactory} is not in use      * @param stream  the xml stream      * @param type    the definition type to return, will throw a {@link ClassCastException} if not the expected type      * @return the model definition      * @throws javax.xml.bind.JAXBException is thrown if error unmarshalling from xml to model      */
DECL|method|createModelFromXml (CamelContext context, InputStream stream, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|NamedNode
parameter_list|>
name|T
name|createModelFromXml
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|JAXBException
block|{
comment|// TODO: support injecting namespaces into each namespace aware node
name|JAXBContext
name|jaxbContext
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|jaxbContext
operator|=
name|createJAXBContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jaxbContext
operator|=
name|context
operator|.
name|getModelJAXBContextFactory
argument_list|()
operator|.
name|newJAXBContext
argument_list|()
expr_stmt|;
block|}
name|Unmarshaller
name|unmarshaller
init|=
name|jaxbContext
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|stream
argument_list|)
decl_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|createJAXBContext ()
specifier|private
specifier|static
name|JAXBContext
name|createJAXBContext
parameter_list|()
throws|throws
name|JAXBException
block|{
comment|// must use classloader from CamelContext to have JAXB working
return|return
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Constants
operator|.
name|JAXB_CONTEXT_PACKAGES
argument_list|,
name|CamelContext
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Extract all XML namespaces from the expressions in the route      *      * @param route       the route      * @param namespaces  the map of namespace to add new found XML namespaces      */
DECL|method|extractNamespaces (RouteDefinition route, Map<String, String> namespaces)
specifier|private
specifier|static
name|void
name|extractNamespaces
parameter_list|(
name|RouteDefinition
name|route
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|Iterator
argument_list|<
name|ExpressionNode
argument_list|>
name|it
init|=
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ExpressionNode
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExpressionNode
name|en
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExpressionDefinition
name|ed
init|=
name|en
operator|.
name|getExpression
argument_list|()
decl_stmt|;
comment|// java-dsl sets directly expression so try this first
name|NamespaceAware
name|na
init|=
literal|null
decl_stmt|;
name|Expression
name|exp
init|=
name|ed
operator|.
name|getExpressionValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|!=
literal|null
operator|&&
name|exp
operator|instanceof
name|NamespaceAware
condition|)
block|{
name|na
operator|=
operator|(
name|NamespaceAware
operator|)
name|exp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ed
operator|instanceof
name|NamespaceAware
condition|)
block|{
name|na
operator|=
operator|(
name|NamespaceAware
operator|)
name|ed
expr_stmt|;
block|}
if|if
condition|(
name|na
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|na
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
operator|&&
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|namespaces
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

