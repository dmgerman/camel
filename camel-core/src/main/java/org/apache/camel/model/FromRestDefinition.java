begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"fromRest"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|FromRestDefinition
specifier|public
class|class
name|FromRestDefinition
extends|extends
name|FromDefinition
block|{
comment|// TODO: verb should be an enum
annotation|@
name|XmlAttribute
DECL|field|verb
specifier|private
name|String
name|verb
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|accept
specifier|private
name|String
name|accept
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|endpoint
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
DECL|method|FromRestDefinition ()
specifier|public
name|FromRestDefinition
parameter_list|()
block|{     }
DECL|method|FromRestDefinition (String verb, String path)
specifier|public
name|FromRestDefinition
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|verb
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FromRestDefinition (String verb, String path, String accept)
specifier|public
name|FromRestDefinition
parameter_list|(
name|String
name|verb
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
name|this
operator|.
name|verb
operator|=
name|verb
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|accept
operator|=
name|accept
expr_stmt|;
block|}
DECL|method|resolveEndpoint (RouteContext context)
specifier|public
name|Endpoint
name|resolveEndpoint
parameter_list|(
name|RouteContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|accept
operator|!=
literal|null
condition|)
block|{
return|return
name|context
operator|.
name|resolveEndpoint
argument_list|(
literal|"rest-binding:"
operator|+
name|verb
operator|+
literal|":"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|context
operator|.
name|resolveEndpoint
argument_list|(
literal|"rest-binding:"
operator|+
name|verb
operator|+
literal|":"
operator|+
name|path
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|endpoint
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"fromRest["
operator|+
name|getLabel
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"fromRest"
return|;
block|}
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|verb
operator|+
literal|"("
operator|+
literal|"/"
operator|+
name|path
operator|+
literal|")"
return|;
block|}
DECL|method|getVerb ()
specifier|public
name|String
name|getVerb
parameter_list|()
block|{
return|return
name|verb
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getAccept ()
specifier|public
name|String
name|getAccept
parameter_list|()
block|{
return|return
name|accept
return|;
block|}
block|}
end_class

end_unit

