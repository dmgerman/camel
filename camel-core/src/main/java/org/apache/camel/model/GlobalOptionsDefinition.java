begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Models a series of string key/value pairs for configuring some global options  * on {@link CamelContext} such as {@link Exchange#LOG_DEBUG_BODY_MAX_CHARS}.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"globalOptions"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|GlobalOptionsDefinition
specifier|public
class|class
name|GlobalOptionsDefinition
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"globalOption"
argument_list|)
DECL|field|globalOptions
specifier|private
name|List
argument_list|<
name|GlobalOptionDefinition
argument_list|>
name|globalOptions
decl_stmt|;
DECL|method|GlobalOptionsDefinition ()
specifier|public
name|GlobalOptionsDefinition
parameter_list|()
block|{     }
DECL|method|setGlobalOptions (List<GlobalOptionDefinition> globalOptions)
specifier|public
name|void
name|setGlobalOptions
parameter_list|(
name|List
argument_list|<
name|GlobalOptionDefinition
argument_list|>
name|globalOptions
parameter_list|)
block|{
name|this
operator|.
name|globalOptions
operator|=
name|globalOptions
expr_stmt|;
block|}
DECL|method|getGlobalOptions ()
specifier|public
name|List
argument_list|<
name|GlobalOptionDefinition
argument_list|>
name|getGlobalOptions
parameter_list|()
block|{
return|return
name|globalOptions
return|;
block|}
DECL|method|asMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|asMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalOptionsAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GlobalOptionDefinition
name|globalOption
range|:
name|getGlobalOptions
argument_list|()
control|)
block|{
name|globalOptionsAsMap
operator|.
name|put
argument_list|(
name|globalOption
operator|.
name|getKey
argument_list|()
argument_list|,
name|globalOption
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|globalOptionsAsMap
return|;
block|}
block|}
end_class

end_unit

