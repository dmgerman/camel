begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_comment
comment|/**  * Represents a CSV (Comma Separated Values) {@link org.apache.camel.spi.DataFormat}  *  * @version   */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"csv"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|CsvDataFormat
specifier|public
class|class
name|CsvDataFormat
extends|extends
name|DataFormatDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|autogenColumns
specifier|private
name|Boolean
name|autogenColumns
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|delimiter
specifier|private
name|String
name|delimiter
decl_stmt|;
DECL|method|CsvDataFormat ()
specifier|public
name|CsvDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"csv"
argument_list|)
expr_stmt|;
block|}
DECL|method|CsvDataFormat (String delimiter)
specifier|public
name|CsvDataFormat
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
DECL|method|isAutogenColumns ()
specifier|public
name|boolean
name|isAutogenColumns
parameter_list|()
block|{
return|return
name|autogenColumns
return|;
block|}
DECL|method|setAutogenColumns (boolean autogenColumns)
specifier|public
name|void
name|setAutogenColumns
parameter_list|(
name|boolean
name|autogenColumns
parameter_list|)
block|{
name|this
operator|.
name|autogenColumns
operator|=
name|autogenColumns
expr_stmt|;
block|}
DECL|method|getDelimiter ()
specifier|public
name|String
name|getDelimiter
parameter_list|()
block|{
return|return
name|delimiter
return|;
block|}
DECL|method|setDelimiter (String delimiter)
specifier|public
name|void
name|setDelimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configureDataFormat (DataFormat dataFormat)
specifier|protected
name|void
name|configureDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
if|if
condition|(
name|autogenColumns
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
literal|"autogenColumns"
argument_list|,
name|autogenColumns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delimiter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|delimiter
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Delimiter must have a length of one!"
argument_list|)
throw|;
block|}
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the default delimiter is ','
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
literal|"delimiter"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

