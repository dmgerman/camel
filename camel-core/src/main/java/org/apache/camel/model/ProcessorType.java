begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DataFormatClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DeadLetterChannelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NoErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|DataFormatType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|LanguageExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DelegateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Enricher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ErrorHandlerWrappingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Base class for processor types that most XML types extend.  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|PROPERTY
argument_list|)
DECL|class|ProcessorType
specifier|public
specifier|abstract
class|class
name|ProcessorType
parameter_list|<
name|Type
extends|extends
name|ProcessorType
parameter_list|>
extends|extends
name|OptionalIdentifiedType
argument_list|<
name|Type
argument_list|>
implements|implements
name|Block
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcessorType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|errorHandlerBuilder
specifier|private
name|ErrorHandlerBuilder
name|errorHandlerBuilder
decl_stmt|;
DECL|field|inheritErrorHandlerFlag
specifier|private
name|Boolean
name|inheritErrorHandlerFlag
decl_stmt|;
DECL|field|nodeFactory
specifier|private
name|NodeFactory
name|nodeFactory
decl_stmt|;
DECL|field|blocks
specifier|private
name|LinkedList
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
operator|new
name|LinkedList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|parent
specifier|private
name|ProcessorType
name|parent
decl_stmt|;
DECL|field|interceptors
specifier|private
name|List
argument_list|<
name|InterceptorType
argument_list|>
name|interceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptorType
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|errorHandlerRef
specifier|private
name|String
name|errorHandlerRef
decl_stmt|;
comment|// else to use an optional attribute in JAXB2
DECL|method|getOutputs ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|getOutputs
parameter_list|()
function_decl|;
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet for class: "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|createOutputsProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
init|=
name|getOutputs
argument_list|()
decl_stmt|;
return|return
name|createOutputsProcessor
argument_list|(
name|routeContext
argument_list|,
name|outputs
argument_list|)
return|;
block|}
DECL|method|addRoutes (RouteContext routeContext, Collection<Route> routes)
specifier|public
name|void
name|addRoutes
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|makeProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|routeContext
operator|.
name|isRouteAdded
argument_list|()
condition|)
block|{
name|routeContext
operator|.
name|addEventDrivenProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Wraps the child processor in whatever necessary interceptors and error      * handlers      */
DECL|method|wrapProcessor (RouteContext routeContext, Processor processor)
specifier|public
name|Processor
name|wrapProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|processor
operator|=
name|wrapProcessorInInterceptors
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
return|return
name|wrapInErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|// Fluent API
comment|// -------------------------------------------------------------------------
comment|/**      * Sends the exchange to the given endpoint      *      * @param uri  the endpoint to send to      * @return the builder      */
DECL|method|to (String uri)
specifier|public
name|Type
name|to
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint      *      * @param endpoint  the endpoint to send to      * @return the builder      */
DECL|method|to (Endpoint endpoint)
specifier|public
name|Type
name|to
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange with certain exchange pattern to the given endpoint      *      * @param pattern the pattern to use for the message exchange      * @param uri  the endpoint to send to      * @return the builder      */
DECL|method|to (ExchangePattern pattern, String uri)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|uri
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange with certain exchange pattern to the given endpoint      *      * @param pattern the pattern to use for the message exchange      * @param endpoint  the endpoint to send to      * @return the builder      */
DECL|method|to (ExchangePattern pattern, Endpoint endpoint)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|to (String... uris)
specifier|public
name|Type
name|to
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|to (Endpoint... endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|to (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param pattern the pattern to use for the message exchanges      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|to (ExchangePattern pattern, String... uris)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|uri
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param pattern the pattern to use for the message exchanges      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|to (ExchangePattern pattern, Endpoint... endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints      *      * @param pattern the pattern to use for the message exchanges      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|to (ExchangePattern pattern, Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|to
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exchange-pattern.html">ExchangePattern:</a>      * set the ExchangePattern {@link ExchangePattern} into the exchange      *      * @param exchangePattern  instance of {@link ExchangePattern}      * @return the builder      */
DECL|method|setExchangePattern (ExchangePattern exchangePattern)
specifier|public
name|Type
name|setExchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|SetExchangePatternType
argument_list|(
name|exchangePattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exchange-pattern.html">ExchangePattern:</a>      * set the exchange's ExchangePattern {@link ExchangePattern} to be InOnly      *      *      * @return the builder      */
DECL|method|inOnly ()
specifier|public
name|Type
name|inOnly
parameter_list|()
block|{
return|return
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param uri The endpoint uri which is used for sending the exchange      * @return the builder      */
DECL|method|inOnly (String uri)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|uri
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or       *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param endpoint The endpoint which is used for sending the exchange      * @return the builder      */
DECL|method|inOnly (Endpoint endpoint)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (String... uris)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|uris
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (Endpoint... endpoints)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/event-message.html">Event Message</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOnly exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOnly (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|inOnly
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exchange-pattern.html">ExchangePattern:</a>      * set the exchange's ExchangePattern {@link ExchangePattern} to be InOut      *      *      * @return the builder      */
DECL|method|inOut ()
specifier|public
name|Type
name|inOut
parameter_list|()
block|{
return|return
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param uri The endpoint uri which is used for sending the exchange      * @return the builder      */
DECL|method|inOut (String uri)
specifier|public
name|Type
name|inOut
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|uri
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoint using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param endpoint The endpoint which is used for sending the exchange      * @return the builder      */
DECL|method|inOut (Endpoint endpoint)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param uris  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (String... uris)
specifier|public
name|Type
name|inOut
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|uris
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (Endpoint... endpoints)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Sends the message to the given endpoints using an      *<a href="http://camel.apache.org/request-reply.html">Request Reply</a> or      *<a href="http://camel.apache.org/exchange-pattern.html">InOut exchange pattern</a>      *      * @param endpoints  list of endpoints to send to      * @return the builder      */
DECL|method|inOut (Iterable<Endpoint> endpoints)
specifier|public
name|Type
name|inOut
parameter_list|(
name|Iterable
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @return the builder      */
DECL|method|multicast ()
specifier|public
name|MulticastType
name|multicast
parameter_list|()
block|{
name|MulticastType
name|answer
init|=
operator|new
name|MulticastType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @param aggregationStrategy the strategy used to aggregate responses for      *          every part      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @return the builder      */
DECL|method|multicast (AggregationStrategy aggregationStrategy, boolean parallelProcessing)
specifier|public
name|MulticastType
name|multicast
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|MulticastType
name|answer
init|=
operator|new
name|MulticastType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/multicast.html">Multicast EIP:</a>      * Multicasts messages to all its child outputs; so that each processor and      * destination gets a copy of the original message to avoid the processors      * interfering with each other.      *      * @param aggregationStrategy the strategy used to aggregate responses for      *          every part      * @return the builder      */
DECL|method|multicast (AggregationStrategy aggregationStrategy)
specifier|public
name|MulticastType
name|multicast
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|MulticastType
name|answer
init|=
operator|new
name|MulticastType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param uris  list of endpoints      * @return the builder      */
DECL|method|pipeline (String... uris)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|uris
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param endpoints  list of endpoints      * @return the builder      */
DECL|method|pipeline (Endpoint... endpoints)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/pipes-nd-filters.html">Pipes and Filters EIP:</a>      * Creates a {@link Pipeline} of the list of endpoints so that the message      * will get processed by each endpoint in turn and for request/response the      * output of one endpoint will be the input of the next endpoint      *      * @param endpoints  list of endpoints      * @return the builder      */
DECL|method|pipeline (Collection<Endpoint> endpoints)
specifier|public
name|Type
name|pipeline
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Ends the current block      *      * @return the builder      */
DECL|method|end ()
specifier|public
name|ProcessorType
argument_list|<
name|?
extends|extends
name|ProcessorType
argument_list|>
name|end
parameter_list|()
block|{
if|if
condition|(
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Root node with no active block"
argument_list|)
throw|;
block|}
return|return
name|parent
return|;
block|}
name|popBlock
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Causes subsequent processors to be called asynchronously      *      * @param coreSize the number of threads that will be used to process      *                 messages in subsequent processors.      * @return a ThreadType builder that can be used to further configure the      *         the thread pool.      */
DECL|method|thread (int coreSize)
specifier|public
name|ThreadType
name|thread
parameter_list|(
name|int
name|coreSize
parameter_list|)
block|{
name|ThreadType
name|answer
init|=
operator|new
name|ThreadType
argument_list|(
name|coreSize
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Causes subsequent processors to be called asynchronously      *      * @param executor the executor that will be used to process      *                 messages in subsequent processors.      * @return a ThreadType builder that can be used to further configure the      *         the thread pool.      */
DECL|method|thread (Executor executor)
specifier|public
name|ProcessorType
argument_list|<
name|Type
argument_list|>
name|thread
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|ThreadType
name|answer
init|=
operator|new
name|ThreadType
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *            * @return the builder      */
DECL|method|idempotentConsumer ()
specifier|public
name|IdempotentConsumerType
name|idempotentConsumer
parameter_list|()
block|{
name|IdempotentConsumerType
name|answer
init|=
operator|new
name|IdempotentConsumerType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *      * @param messageIdExpression  expression to test of duplicate messages      * @param idempotentRepository  the repository to use for duplicate chedck      * @return the builder      */
DECL|method|idempotentConsumer (Expression messageIdExpression, IdempotentRepository idempotentRepository)
specifier|public
name|IdempotentConsumerType
name|idempotentConsumer
parameter_list|(
name|Expression
name|messageIdExpression
parameter_list|,
name|IdempotentRepository
name|idempotentRepository
parameter_list|)
block|{
name|IdempotentConsumerType
name|answer
init|=
operator|new
name|IdempotentConsumerType
argument_list|(
name|messageIdExpression
argument_list|,
name|idempotentRepository
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/idempotent-consumer.html">Idempotent consumer EIP:</a>      * Creates an {@link org.apache.camel.processor.idempotent.IdempotentConsumer IdempotentConsumer}      * to avoid duplicate messages      *      * @param idempotentRepository the repository to use for duplicate chedck      * @return the builder used to create the expression      */
DECL|method|idempotentConsumer (IdempotentRepository idempotentRepository)
specifier|public
name|ExpressionClause
argument_list|<
name|IdempotentConsumerType
argument_list|>
name|idempotentConsumer
parameter_list|(
name|IdempotentRepository
name|idempotentRepository
parameter_list|)
block|{
name|IdempotentConsumerType
name|answer
init|=
operator|new
name|IdempotentConsumerType
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setMessageIdRepository
argument_list|(
name|idempotentRepository
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @return the clause used to create the filter expression      */
DECL|method|filter ()
specifier|public
name|ExpressionClause
argument_list|<
name|FilterType
argument_list|>
name|filter
parameter_list|()
block|{
name|FilterType
name|filter
init|=
operator|new
name|FilterType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|filter
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate which is applied and only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param predicate  predicate to use      * @return the builder       */
DECL|method|filter (Predicate predicate)
specifier|public
name|FilterType
name|filter
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|FilterType
name|filter
init|=
operator|new
name|FilterType
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param expression  the predicate expression to use      * @return the builder      */
DECL|method|filter (ExpressionType expression)
specifier|public
name|FilterType
name|filter
parameter_list|(
name|ExpressionType
name|expression
parameter_list|)
block|{
name|FilterType
name|filter
init|=
name|getNodeFactory
argument_list|()
operator|.
name|createFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-filter.html">Message Filter EIP:</a>      * Creates a predicate language expression which only if it is<tt>true</tt> then the      * exchange is forwarded to the destination      *      * @param language     language for expression      * @param expression   the expression      * @return the builder      */
DECL|method|filter (String language, String expression)
specifier|public
name|FilterType
name|filter
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
return|return
name|filter
argument_list|(
operator|new
name|LanguageExpression
argument_list|(
name|language
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/load-balancer.html">Load Balancer EIP:</a>      * Creates a loadbalance      *      * @return  the builder      */
DECL|method|loadBalance ()
specifier|public
name|LoadBalanceType
name|loadBalance
parameter_list|()
block|{
name|LoadBalanceType
name|answer
init|=
operator|new
name|LoadBalanceType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/content-based-router.html">Content Based Router EIP:</a>      * Creates a choice of one or more predicates with an otherwise clause      *      * @return the builder for a choice expression      */
DECL|method|choice ()
specifier|public
name|ChoiceType
name|choice
parameter_list|()
block|{
name|ChoiceType
name|answer
init|=
operator|new
name|ChoiceType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a try/catch block      *      * @return the builder for a tryBlock expression      */
DECL|method|tryBlock ()
specifier|public
name|TryType
name|tryBlock
parameter_list|()
block|{
name|TryType
name|answer
init|=
operator|new
name|TryType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients      *      * @param recipients expression to decide the destinations      * @return the builder      */
DECL|method|recipientList (Expression recipients)
specifier|public
name|Type
name|recipientList
parameter_list|(
name|Expression
name|recipients
parameter_list|)
block|{
name|RecipientListType
name|answer
init|=
operator|new
name|RecipientListType
argument_list|(
name|recipients
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/recipient-list.html">Recipient List EIP:</a>      * Creates a dynamic recipient list allowing you to route messages to a number of dynamically specified recipients      *      * @return the expression clause to configure the expression to decide the destinations      */
DECL|method|recipientList ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|recipientList
parameter_list|()
block|{
name|RecipientListType
name|answer
init|=
operator|new
name|RecipientListType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
operator|(
name|Type
operator|)
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExpression
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/routing-slip.html">Routing Slip EIP:</a>      * Creates a routing slip allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *      * @param header  is the header that the {@link org.apache.camel.processor.RoutingSlip RoutingSlip}      *                class will look in for the list of URIs to route the message to.      * @param uriDelimiter  is the delimiter that will be used to split up      *                      the list of URIs in the routing slip.      * @return the buiider      */
DECL|method|routingSlip (String header, String uriDelimiter)
specifier|public
name|Type
name|routingSlip
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|uriDelimiter
parameter_list|)
block|{
name|RoutingSlipType
name|answer
init|=
operator|new
name|RoutingSlipType
argument_list|(
name|header
argument_list|,
name|uriDelimiter
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/routing-slip.html">Routing Slip EIP:</a>      * Creates a routing slip allowing you to route a message consecutively through a series of processing      * steps where the sequence of steps is not known at design time and can vary for each message.      *<p>      * The list of URIs will be split based on the default delimiter {@link RoutingSlipType#DEFAULT_DELIMITER}      *      * @param header  is the header that the {@link org.apache.camel.processor.RoutingSlip RoutingSlip}      *                class will look in for the list of URIs to route the message to.      * @return the builder      */
DECL|method|routingSlip (String header)
specifier|public
name|Type
name|routingSlip
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|RoutingSlipType
name|answer
init|=
operator|new
name|RoutingSlipType
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * This splitter responds with the latest message returned from destination      * endpoint.      *      * @return the expression clause builder for the expression on which to split      */
DECL|method|split ()
specifier|public
name|ExpressionClause
argument_list|<
name|SplitterType
argument_list|>
name|split
parameter_list|()
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * This splitter responds with the latest message returned from destination      * endpoint.      *      * @param expression  the expression on which to split the message      * @return the builder      */
DECL|method|split (Expression expression)
specifier|public
name|SplitterType
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param expression  the expression on which to split      * @param aggregationStrategy  the strategy used to aggregate responses for every part      * @return the builder      */
DECL|method|split (Expression expression, AggregationStrategy aggregationStrategy)
specifier|public
name|SplitterType
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param aggregationStrategy  the strategy used to aggregate responses for every part      * @return the expression clause for the expression on which to split      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (AggregationStrategy aggregationStrategy)
specifier|public
name|ExpressionClause
argument_list|<
name|SplitterType
argument_list|>
name|split
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param expression the expression on which to split      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @return the builder      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (Expression expression, boolean parallelProcessing)
specifier|public
name|SplitterType
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param expression the expression on which to split      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @param executor override the default {@link Executor}      * @return the builder      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (Expression expression, boolean parallelProcessing, Executor executor)
specifier|public
name|SplitterType
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @return the expression clause for the expression on which to split      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (boolean parallelProcessing)
specifier|public
name|ExpressionClause
argument_list|<
name|SplitterType
argument_list|>
name|split
parameter_list|(
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      /**       *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>       * Creates a splitter allowing you split a message into a number of pieces and process them individually.       *<p>       * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @param executor override the default {@link Executor}      * @return the expression clause for the expression on which to split      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (boolean parallelProcessing, Executor executor)
specifier|public
name|ExpressionClause
argument_list|<
name|SplitterType
argument_list|>
name|split
parameter_list|(
name|boolean
name|parallelProcessing
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param expression the expression on which to split      * @param aggregationStrategy the strategy used to aggregate responses for every part      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @return the builder      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (Expression expression, AggregationStrategy aggregationStrategy, boolean parallelProcessing)
specifier|public
name|SplitterType
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param expression the expression on which to split      * @param aggregationStrategy the strategy used to aggregate responses for every part      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @param executor override the default {@link Executor}      * @return the builder      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (Expression expression, AggregationStrategy aggregationStrategy, boolean parallelProcessing, Executor executor)
specifier|public
name|SplitterType
name|split
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param aggregationStrategy the strategy used to aggregate responses for every part      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @return the expression clause for the expression on which to split      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (AggregationStrategy aggregationStrategy, boolean parallelProcessing)
specifier|public
name|ExpressionClause
argument_list|<
name|SplitterType
argument_list|>
name|split
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/splitter.html">Splitter EIP:</a>      * Creates a splitter allowing you split a message into a number of pieces and process them individually.      *<p>      * The splitter responds with the answer produced by the given {@link AggregationStrategy}.      *      * @param aggregationStrategy the strategy used to aggregate responses for every part      * @param parallelProcessing if is<tt>true</tt> camel will fork thread to call the endpoint producer      * @param executor override the default {@link Executor}      * @return the expression clause for the expression on which to split      * @deprecated will be removed in Camel 2.0      */
DECL|method|split (AggregationStrategy aggregationStrategy, boolean parallelProcessing, Executor executor)
specifier|public
name|ExpressionClause
argument_list|<
name|SplitterType
argument_list|>
name|split
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|,
name|boolean
name|parallelProcessing
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @return the expression clause for the expressions on which to compare messages in order      */
DECL|method|resequence ()
specifier|public
name|ExpressionClause
argument_list|<
name|ResequencerType
argument_list|>
name|resequence
parameter_list|()
block|{
name|ResequencerType
name|answer
init|=
operator|new
name|ResequencerType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|ExpressionClause
argument_list|<
name|ResequencerType
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ResequencerType
argument_list|>
argument_list|(
name|answer
argument_list|)
decl_stmt|;
name|answer
operator|.
name|expression
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @param expression the expression on which to compare messages in order      * @return the builder      */
DECL|method|resequence (Expression expression)
specifier|public
name|ResequencerType
name|resequence
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|resequence
argument_list|(
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|singletonList
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a resequencer allowing you to reorganize messages based on some comparator.      *      * @param expressions the list of expressions on which to compare messages in order      * @return the builder      */
DECL|method|resequence (List<Expression> expressions)
specifier|public
name|ResequencerType
name|resequence
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|ResequencerType
name|answer
init|=
operator|new
name|ResequencerType
argument_list|(
name|expressions
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/resequencer.html">Resequencer EIP:</a>      * Creates a splitter allowing you to reorganise messages based on some comparator.      *      * @param expressions the list of expressions on which to compare messages in order      * @return the builder      */
DECL|method|resequencer (Expression... expressions)
specifier|public
name|ResequencerType
name|resequencer
parameter_list|(
name|Expression
modifier|...
name|expressions
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expressions
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resequence
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @return the expression clause to be used as builder to configure the correlation expression      */
DECL|method|aggregate ()
specifier|public
name|ExpressionClause
argument_list|<
name|AggregatorType
argument_list|>
name|aggregate
parameter_list|()
block|{
name|AggregatorType
name|answer
init|=
operator|new
name|AggregatorType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
operator|.
name|createAndSetExpression
argument_list|()
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param aggregationStrategy the strategy used for the aggregation      * @return the expression clause to be used as builder to configure the correlation expression      */
DECL|method|aggregate (AggregationStrategy aggregationStrategy)
specifier|public
name|ExpressionClause
argument_list|<
name|AggregatorType
argument_list|>
name|aggregate
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|AggregatorType
name|answer
init|=
operator|new
name|AggregatorType
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
operator|.
name|createAndSetExpression
argument_list|()
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param aggregationCollection the collection used to perform the aggregation      * @return the builder      */
DECL|method|aggregate (AggregationCollection aggregationCollection)
specifier|public
name|AggregatorType
name|aggregate
parameter_list|(
name|AggregationCollection
name|aggregationCollection
parameter_list|)
block|{
name|AggregatorType
name|answer
init|=
operator|new
name|AggregatorType
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setAggregationCollection
argument_list|(
name|aggregationCollection
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param correlationExpression the expression used to calculate the      *                              correlation key. For a JMS message this could be the      *                              expression<code>header("JMSDestination")</code> or      *<code>header("JMSCorrelationID")</code>      * @return the builder      */
DECL|method|aggregate (Expression correlationExpression)
specifier|public
name|AggregatorType
name|aggregate
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|)
block|{
name|AggregatorType
name|answer
init|=
operator|new
name|AggregatorType
argument_list|(
name|correlationExpression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/aggregator.html">Aggregator EIP:</a>      * Creates an aggregator allowing you to combine a number of messages together into a single message.      *      * @param correlationExpression the expression used to calculate the      *                              correlation key. For a JMS message this could be the      *                              expression<code>header("JMSDestination")</code> or      *<code>header("JMSCorrelationID")</code>      * @param aggregationStrategy the strategy used for the aggregation      * @return the builder      */
DECL|method|aggregate (Expression correlationExpression, AggregationStrategy aggregationStrategy)
specifier|public
name|AggregatorType
name|aggregate
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|AggregatorType
name|answer
init|=
operator|new
name|AggregatorType
argument_list|(
name|correlationExpression
argument_list|,
name|aggregationStrategy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @param processAtExpression  an expression to calculate the time at which the messages should be processed,      *                             should be convertable to long as time in millis      * @return the builder      */
DECL|method|delay (Expression processAtExpression)
specifier|public
name|DelayerType
name|delay
parameter_list|(
name|Expression
name|processAtExpression
parameter_list|)
block|{
return|return
name|delay
argument_list|(
name|processAtExpression
argument_list|,
literal|0L
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @param processAtExpression  an expression to calculate the time at which the messages should be processed,      *                             should be convertable to long as time in millis      * @param delay                the delay in milliseconds which is added to the processAtExpression      * @return the builder      */
DECL|method|delay (Expression processAtExpression, long delay)
specifier|public
name|DelayerType
name|delay
parameter_list|(
name|Expression
name|processAtExpression
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|DelayerType
name|answer
init|=
operator|new
name|DelayerType
argument_list|(
name|processAtExpression
argument_list|,
name|delay
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @return the expression clause to create the expression      */
DECL|method|delay ()
specifier|public
name|ExpressionClause
argument_list|<
name|DelayerType
argument_list|>
name|delay
parameter_list|()
block|{
name|DelayerType
name|answer
init|=
operator|new
name|DelayerType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/delayer.html">Delayer EIP:</a>      * Creates a delayer allowing you to delay the delivery of messages to some destination.      *      * @param delay  the default delay in millis      * @return the builder      */
DECL|method|delay (long delay)
specifier|public
name|DelayerType
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
return|return
name|delay
argument_list|(
literal|null
argument_list|,
name|delay
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/throttler.html">Throttler EIP:</a>      * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,      * or that we don't exceed an agreed SLA with some external service.      *<p/>      * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10      * will default ensure at most 10 messages per second.       *      * @param maximumRequestCount  the maximum messages       * @return the builder      */
DECL|method|throttle (long maximumRequestCount)
specifier|public
name|ThrottlerType
name|throttle
parameter_list|(
name|long
name|maximumRequestCount
parameter_list|)
block|{
name|ThrottlerType
name|answer
init|=
operator|new
name|ThrottlerType
argument_list|(
name|maximumRequestCount
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way. Useful mostly for testing.      *      * @return the clause used to create the loop expression      */
DECL|method|loop ()
specifier|public
name|ExpressionClause
argument_list|<
name|LoopType
argument_list|>
name|loop
parameter_list|()
block|{
name|LoopType
name|loop
init|=
operator|new
name|LoopType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|ExpressionClause
operator|.
name|createAndSetExpression
argument_list|(
name|loop
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way. Useful mostly for testing.      *      * @param expression the loop expression      * @return the builder      */
DECL|method|loop (Expression expression)
specifier|public
name|LoopType
name|loop
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|LoopType
name|loop
init|=
name|getNodeFactory
argument_list|()
operator|.
name|createLoop
argument_list|()
decl_stmt|;
name|loop
operator|.
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|loop
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/loop.html">Loop EIP:</a>      * Creates a loop allowing to process the a message a number of times and possibly process them      * in a different way. Useful mostly for testing.      *      * @param count  the number of times      * @return the builder      */
DECL|method|loop (int count)
specifier|public
name|LoopType
name|loop
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|LoopType
name|loop
init|=
name|getNodeFactory
argument_list|()
operator|.
name|createLoop
argument_list|()
decl_stmt|;
name|loop
operator|.
name|setExpression
argument_list|(
operator|new
name|ConstantExpression
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|loop
argument_list|)
expr_stmt|;
return|return
name|loop
return|;
block|}
comment|/**      * Creates a fault message based on the given throwable.      *      * @param fault   the fault      * @return the builder      */
DECL|method|throwFault (Throwable fault)
specifier|public
name|Type
name|throwFault
parameter_list|(
name|Throwable
name|fault
parameter_list|)
block|{
name|ThrowFaultType
name|answer
init|=
operator|new
name|ThrowFaultType
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setFault
argument_list|(
name|fault
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Creates a fault message based on the given message.      *      * @param message  the fault message      * @return the builder      */
DECL|method|throwFault (String message)
specifier|public
name|Type
name|throwFault
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
name|throwFault
argument_list|(
operator|new
name|CamelException
argument_list|(
name|message
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Intercepts outputs added to this node in the future (i.e. intercepts outputs added after this statement)      *      * @param ref  a reference in the registry to lookup the interceptor that must be of type {@link DelegateProcessor}      * @return the builder      */
DECL|method|interceptor (String ref)
specifier|public
name|Type
name|interceptor
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|InterceptorRef
name|interceptor
init|=
operator|new
name|InterceptorRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Intercepts outputs added to this node in the future (i.e. intercepts outputs added after this statement)      *      * @param refs  a list of reference in the registry to lookup the interceptor that must      *              be of type {@link DelegateProcessor}      * @return the builder      */
DECL|method|interceptors (String... refs)
specifier|public
name|Type
name|interceptors
parameter_list|(
name|String
modifier|...
name|refs
parameter_list|)
block|{
for|for
control|(
name|String
name|ref
range|:
name|refs
control|)
block|{
name|interceptor
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Intercepts outputs added to this node in the future (i.e. intercepts outputs added after this statement)      *      * @param interceptor  the interceptor      * @return the builder      */
DECL|method|intercept (DelegateProcessor interceptor)
specifier|public
name|Type
name|intercept
parameter_list|(
name|DelegateProcessor
name|interceptor
parameter_list|)
block|{
name|intercept
argument_list|(
operator|new
name|InterceptorRef
argument_list|(
name|interceptor
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Intercepts outputs added to this node in the future (i.e. intercepts outputs added after this statement)      *      * @return the intercept builder to configure      */
DECL|method|intercept ()
specifier|public
name|InterceptType
name|intercept
parameter_list|()
block|{
name|InterceptType
name|answer
init|=
operator|new
name|InterceptType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Intercepts outputs added to this node in the future (i.e. intercepts outputs added after this statement)      *      * @param  interceptor  the interceptor      */
DECL|method|intercept (InterceptorType interceptor)
specifier|public
name|void
name|intercept
parameter_list|(
name|InterceptorType
name|interceptor
parameter_list|)
block|{
name|addOutput
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
name|pushBlock
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an interceptor around the whole of this nodes processing      *      * @param interceptor  the interceptor      */
DECL|method|addInterceptor (InterceptorType interceptor)
specifier|public
name|void
name|addInterceptor
parameter_list|(
name|InterceptorType
name|interceptor
parameter_list|)
block|{
name|interceptors
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an interceptor around the whole of this nodes processing      *      * @param interceptor  the interceptor      */
DECL|method|addInterceptor (DelegateProcessor interceptor)
specifier|public
name|void
name|addInterceptor
parameter_list|(
name|DelegateProcessor
name|interceptor
parameter_list|)
block|{
name|addInterceptor
argument_list|(
operator|new
name|InterceptorRef
argument_list|(
name|interceptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pushes the given block on the stack as current block      * @param block  the block      */
DECL|method|pushBlock (Block block)
specifier|public
name|void
name|pushBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|blocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pops the block off the stack as current block      * @return the block      */
DECL|method|popBlock ()
specifier|public
name|Block
name|popBlock
parameter_list|()
block|{
return|return
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|blocks
operator|.
name|removeLast
argument_list|()
return|;
block|}
comment|/**      * Procceeds the given intercepted route.      *<p/>      * Proceed is used in conjunction with intercept where calling proceed will route the message through the      * original route path from the point of interception. This can be used to implement the      *<a href="http://www.enterpriseintegrationpatterns.com/Detour.html">detour</a> pattern.      *      * @return the builder      * @see ProcessorType#proceed()      */
DECL|method|proceed ()
specifier|public
name|Type
name|proceed
parameter_list|()
block|{
name|ProceedType
name|proceed
init|=
literal|null
decl_stmt|;
name|ProcessorType
name|currentProcessor
init|=
name|this
decl_stmt|;
if|if
condition|(
name|currentProcessor
operator|instanceof
name|InterceptType
condition|)
block|{
name|proceed
operator|=
operator|(
operator|(
name|InterceptType
operator|)
name|currentProcessor
operator|)
operator|.
name|getProceed
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"proceed() is the implied and hence not needed for an intercept()"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proceed
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|ProcessorType
name|node
init|=
name|parent
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|InterceptType
condition|)
block|{
name|InterceptType
name|intercept
init|=
operator|(
name|InterceptType
operator|)
name|node
decl_stmt|;
name|proceed
operator|=
name|intercept
operator|.
name|getProceed
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|proceed
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot use proceed() without being within an intercept() block"
argument_list|)
throw|;
block|}
block|}
name|addOutput
argument_list|(
name|proceed
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Stops the given intercepted route.      *<p/>      * As opposed to {@link #proceed()} calling stop will stop the message route and<b>not</b> continue      * from the interepted origin.      *      * @return the builder      * @see #proceed()      */
DECL|method|stop ()
specifier|public
name|Type
name|stop
parameter_list|()
block|{
name|ProcessorType
name|currentProcessor
init|=
name|this
decl_stmt|;
if|if
condition|(
name|currentProcessor
operator|instanceof
name|InterceptType
condition|)
block|{
operator|(
operator|(
name|InterceptType
operator|)
name|currentProcessor
operator|)
operator|.
name|stopIntercept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ProcessorType
name|node
decl_stmt|;
for|for
control|(
name|node
operator|=
name|parent
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|InterceptType
condition|)
block|{
operator|(
operator|(
name|InterceptType
operator|)
name|node
operator|)
operator|.
name|stopIntercept
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot use stop() without being within an intercept() block"
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exception-clause.html">Exception clause</a>      * for cathing certain exceptions and handling them.      *      * @param exceptionType  the exception to catch      * @return the exception builder to configure      */
DECL|method|onException (Class exceptionType)
specifier|public
name|ExceptionType
name|onException
parameter_list|(
name|Class
name|exceptionType
parameter_list|)
block|{
name|ExceptionType
name|answer
init|=
operator|new
name|ExceptionType
argument_list|(
name|exceptionType
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Apply an interceptor route if the predicate is true.      *      * @param predicate the predicate to test      * @return  the choice builder to configure      */
DECL|method|intercept (Predicate predicate)
specifier|public
name|ChoiceType
name|intercept
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|InterceptType
name|answer
init|=
operator|new
name|InterceptType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
operator|.
name|when
argument_list|(
name|predicate
argument_list|)
return|;
block|}
comment|/**      * Creates a policy.      *<p/>      * Policy can be used for transactional policies.      *      * @return the policy builder to configure      */
DECL|method|policies ()
specifier|public
name|PolicyRef
name|policies
parameter_list|()
block|{
name|PolicyRef
name|answer
init|=
operator|new
name|PolicyRef
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Apply a {@link Policy}.      *<p/>      * Policy can be used for transactional policies.      *      * @param policy  the policy to apply      * @return the policy builder to configure      */
DECL|method|policy (Policy policy)
specifier|public
name|PolicyRef
name|policy
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
name|PolicyRef
name|answer
init|=
operator|new
name|PolicyRef
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Forces handling of faults as exceptions      *      * @return the current builder with the fault handler configured      */
DECL|method|handleFault ()
specifier|public
name|Type
name|handleFault
parameter_list|()
block|{
name|intercept
argument_list|(
operator|new
name|HandleFaultType
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Installs the given<a href="http://camel.apache.org/error-handler.html">error handler</a> builder.      *      * @param errorHandlerBuilder the error handler to be used by default for all child routes      * @return the current builder with the error handler configured      */
DECL|method|errorHandler (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|Type
name|errorHandler
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Configures whether or not the<a href="http://camel.apache.org/error-handler.html">error handler</a>      * is inherited by every processing node (or just the top most one)      *      * @param condition the flag as to whether error handlers should be inherited or not      * @return the current builder      */
DECL|method|inheritErrorHandler (boolean condition)
specifier|public
name|Type
name|inheritErrorHandler
parameter_list|(
name|boolean
name|condition
parameter_list|)
block|{
name|setInheritErrorHandlerFlag
argument_list|(
name|condition
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|// Transformers
comment|// -------------------------------------------------------------------------
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds the custom processor to this destination which could be a final      * destination, or could be a transformation in a pipeline      *      * @param processor  the custom {@link Processor}      * @return the builder      */
DECL|method|process (Processor processor)
specifier|public
name|Type
name|process
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|ProcessorRef
name|answer
init|=
operator|new
name|ProcessorRef
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds the custom processor reference to this destination which could be a final      * destination, or could be a transformation in a pipeline      *      * @param ref   reference to a {@link Processor} to lookup in the registry      * @return the builder      */
DECL|method|processRef (String ref)
specifier|public
name|Type
name|processRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|ProcessorRef
name|answer
init|=
operator|new
name|ProcessorRef
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke      * @return the builder      */
DECL|method|bean (Object bean)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
name|BeanRef
name|answer
init|=
operator|new
name|BeanRef
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param bean  the bean to invoke      * @param method  the method name to invoke on the bean (can be used to avoid ambiguty)      * @return the builder      */
DECL|method|bean (Object bean, String method)
specifier|public
name|Type
name|bean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanRef
name|answer
init|=
operator|new
name|BeanRef
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param  beanType  the bean class, Camel will instantiate an object at runtime      * @return the builder      */
DECL|method|bean (Class beanType)
specifier|public
name|Type
name|bean
parameter_list|(
name|Class
name|beanType
parameter_list|)
block|{
name|BeanRef
name|answer
init|=
operator|new
name|BeanRef
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBeanType
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param  beanType  the bean class, Camel will instantiate an object at runtime      * @param method  the method name to invoke on the bean (can be used to avoid ambiguty)      * @return the builder      */
DECL|method|bean (Class beanType, String method)
specifier|public
name|Type
name|bean
parameter_list|(
name|Class
name|beanType
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanRef
name|answer
init|=
operator|new
name|BeanRef
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBeanType
argument_list|(
name|beanType
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param ref  reference to a bean to lookup in the registry      * @return the builder      */
DECL|method|beanRef (String ref)
specifier|public
name|Type
name|beanRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|BeanRef
name|answer
init|=
operator|new
name|BeanRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a bean which is invoked which could be a final destination, or could be a transformation in a pipeline      *      * @param ref  reference to a bean to lookup in the registry      * @param method  the method name to invoke on the bean (can be used to avoid ambiguty)      * @return the builder      */
DECL|method|beanRef (String ref, String method)
specifier|public
name|Type
name|beanRef
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|BeanRef
name|answer
init|=
operator|new
name|BeanRef
argument_list|(
name|ref
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @return a expression builder clause to set the body      */
DECL|method|setBody ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setBody
parameter_list|()
block|{
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
operator|(
name|Type
operator|)
name|this
argument_list|)
decl_stmt|;
name|SetBodyType
name|answer
init|=
operator|new
name|SetBodyType
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the IN message      *      * @param expression   the expression used to set the body      * @return the builder      */
DECL|method|setBody (Expression expression)
specifier|public
name|Type
name|setBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|SetBodyType
name|answer
init|=
operator|new
name|SetBodyType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the OUT message      *      * @param expression   the expression used to set the body      * @return the builder      */
DECL|method|transform (Expression expression)
specifier|public
name|Type
name|transform
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|TransformType
name|answer
init|=
operator|new
name|TransformType
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/message-translator.html">Message Translator EIP:</a>      * Adds a processor which sets the body on the OUT message      *      * @return a expression builder clause to set the body      */
DECL|method|transform ()
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|transform
parameter_list|()
block|{
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
operator|(
name|Type
operator|)
name|this
argument_list|)
decl_stmt|;
name|TransformType
name|answer
init|=
operator|new
name|TransformType
argument_list|(
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the body on the FAULT message      *      * @param expression   the expression used to set the body      * @return the builder      */
DECL|method|setFaultBody (Expression expression)
specifier|public
name|Type
name|setFaultBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setFaultBody
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      *      * @param name  the header name      * @return a expression builder clause to set the header      */
DECL|method|setHeader (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
operator|(
name|Type
operator|)
name|this
argument_list|)
decl_stmt|;
name|SetHeaderType
name|answer
init|=
operator|new
name|SetHeaderType
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      *      * @param name  the header name      * @param expression  the expression used to set the header      * @return the builder      */
DECL|method|setHeader (String name, Expression expression)
specifier|public
name|Type
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetHeaderType
name|answer
init|=
operator|new
name|SetHeaderType
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the header on the OUT message      *      * @param name  the header name      * @return a expression builder clause to set the header      */
DECL|method|setOutHeader (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setOutHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
operator|(
name|Type
operator|)
name|this
argument_list|)
decl_stmt|;
name|SetOutHeaderType
name|answer
init|=
operator|new
name|SetOutHeaderType
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which sets the header on the OUT message      *      * @param name  the header name      * @param expression  the expression used to set the header      * @return the builder      */
DECL|method|setOutHeader (String name, Expression expression)
specifier|public
name|Type
name|setOutHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetOutHeaderType
name|answer
init|=
operator|new
name|SetOutHeaderType
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the header on the FAULT message      *      * @param name  the header name      * @param expression  the expression used to set the header      * @return the builder      */
DECL|method|setFaultHeader (String name, Expression expression)
specifier|public
name|Type
name|setFaultHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setFaultHeader
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the exchange property      *      * @param name  the property name      * @param expression  the expression used to set the property      * @return the builder      */
DECL|method|setProperty (String name, Expression expression)
specifier|public
name|Type
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|SetPropertyType
name|answer
init|=
operator|new
name|SetPropertyType
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the exchange property      *      * @param name  the property name      * @return a expression builder clause to set the property      */
DECL|method|setProperty (String name)
specifier|public
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|clause
init|=
operator|new
name|ExpressionClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
operator|(
name|Type
operator|)
name|this
argument_list|)
decl_stmt|;
name|SetPropertyType
name|answer
init|=
operator|new
name|SetPropertyType
argument_list|(
name|name
argument_list|,
name|clause
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds a processor which removes the header on the IN message      *      * @param name  the header name      * @return the builder      */
DECL|method|removeHeader (String name)
specifier|public
name|Type
name|removeHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|RemoveHeaderType
name|answer
init|=
operator|new
name|RemoveHeaderType
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Adds a processor which removes the header on the FAULT message      *      * @param name  the header name      * @return the builder      */
DECL|method|removeFaultHeader (String name)
specifier|public
name|Type
name|removeFaultHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|removeFaultHeader
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which removes the exchange property      *      * @param name  the property name      * @return the builder      */
DECL|method|removeProperty (String name)
specifier|public
name|Type
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|RemovePropertyType
name|answer
init|=
operator|new
name|RemovePropertyType
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Converts the IN message body to the specified type      *      * @param type the type to convert to      * @return the builder      */
DECL|method|convertBodyTo (Class type)
specifier|public
name|Type
name|convertBodyTo
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ConvertBodyType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Converts the IN message body to the specified class type      *      * @param typeString the type to convert to as a fully qualified classname      * @return the builder      */
DECL|method|convertBodyTo (String typeString)
specifier|public
name|Type
name|convertBodyTo
parameter_list|(
name|String
name|typeString
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ConvertBodyType
argument_list|(
name|typeString
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      * Enriches an exchange with additional data obtained from a      *<code>resourceUri</code>.      *       * @param resourceUri      *            URI of resource endpoint for obtaining additional data.      * @param aggregationStrategy      *            aggregation strategy to aggregate input data and additional      *            data.      * @return this processor type      * @see Enricher      *       */
DECL|method|enrich (String resourceUri, AggregationStrategy aggregationStrategy)
specifier|public
name|Type
name|enrich
parameter_list|(
name|String
name|resourceUri
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|EnricherType
argument_list|(
name|aggregationStrategy
argument_list|,
name|resourceUri
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|// DataFormat support
comment|// -------------------------------------------------------------------------
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using a {@link DataFormat} expression to define      * the format of the input message and the output will be set on the out message body.      *      * @return the expression to create the {@link DataFormat}      */
DECL|method|unmarshal ()
specifier|public
name|DataFormatClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|unmarshal
parameter_list|()
block|{
return|return
operator|new
name|DataFormatClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|,
name|DataFormatClause
operator|.
name|Operation
operator|.
name|Unmarshal
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormatType  the dataformat      * @return the builder      */
DECL|method|unmarshal (DataFormatType dataFormatType)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|DataFormatType
name|dataFormatType
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|UnmarshalType
argument_list|(
name|dataFormatType
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormat  the dataformat      * @return the builder      */
DECL|method|unmarshal (DataFormat dataFormat)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
return|return
name|unmarshal
argument_list|(
operator|new
name|DataFormatType
argument_list|(
name|dataFormat
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Unmarshals the in body using the specified {@link DataFormat}      * reference in the {@link org.apache.camel.spi.Registry} and sets      * the output on the out message body.      *      * @param dataTypeRef  reference to a {@link DataFormat} to lookup in the registry      * @return the builder      */
DECL|method|unmarshal (String dataTypeRef)
specifier|public
name|Type
name|unmarshal
parameter_list|(
name|String
name|dataTypeRef
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|UnmarshalType
argument_list|(
name|dataTypeRef
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using a {@link DataFormat} expression to define      * the format of the output which will be added to the out body.      *      * @return the expression to create the {@link DataFormat}      */
DECL|method|marshal ()
specifier|public
name|DataFormatClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
name|marshal
parameter_list|()
block|{
return|return
operator|new
name|DataFormatClause
argument_list|<
name|ProcessorType
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|,
name|DataFormatClause
operator|.
name|Operation
operator|.
name|Marshal
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormatType  the dataformat      * @return the builder      */
DECL|method|marshal (DataFormatType dataFormatType)
specifier|public
name|Type
name|marshal
parameter_list|(
name|DataFormatType
name|dataFormatType
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|MarshalType
argument_list|(
name|dataFormatType
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body using the specified {@link DataFormat}      * and sets the output on the out message body.      *      * @param dataFormat  the dataformat      * @return the builder      */
DECL|method|marshal (DataFormat dataFormat)
specifier|public
name|Type
name|marshal
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
return|return
name|marshal
argument_list|(
operator|new
name|DataFormatType
argument_list|(
name|dataFormat
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/data-format.html">DataFormat:</a>      * Marshals the in body the specified {@link DataFormat}      * reference in the {@link org.apache.camel.spi.Registry} and sets      * the output on the out message body.      *      * @param dataTypeRef  reference to a {@link DataFormat} to lookup in the registry      * @return the builder      */
DECL|method|marshal (String dataTypeRef)
specifier|public
name|Type
name|marshal
parameter_list|(
name|String
name|dataTypeRef
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|MarshalType
argument_list|(
name|dataTypeRef
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|this
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
annotation|@
name|XmlTransient
DECL|method|getParent ()
specifier|public
name|ProcessorType
argument_list|<
name|?
extends|extends
name|ProcessorType
argument_list|>
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|setParent (ProcessorType<? extends ProcessorType> parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|ProcessorType
argument_list|<
name|?
extends|extends
name|ProcessorType
argument_list|>
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|XmlTransient
DECL|method|getErrorHandlerBuilder ()
specifier|public
name|ErrorHandlerBuilder
name|getErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerBuilder
operator|==
literal|null
condition|)
block|{
name|errorHandlerBuilder
operator|=
name|createErrorHandlerBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|errorHandlerBuilder
return|;
block|}
comment|/**      * Sets the error handler to use with processors created by this builder      */
DECL|method|setErrorHandlerBuilder (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilder
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerBuilder
operator|=
name|errorHandlerBuilder
expr_stmt|;
block|}
comment|/**      * Sets the error handler if one is not already set      */
DECL|method|setErrorHandlerBuilderIfNull (ErrorHandlerBuilder errorHandlerBuilder)
specifier|protected
name|void
name|setErrorHandlerBuilderIfNull
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|errorHandlerBuilder
operator|==
literal|null
condition|)
block|{
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getErrorHandlerRef ()
specifier|public
name|String
name|getErrorHandlerRef
parameter_list|()
block|{
return|return
name|errorHandlerRef
return|;
block|}
comment|/**      * Sets the bean ref name of the error handler builder to use on this route      */
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|method|setErrorHandlerRef (String errorHandlerRef)
specifier|public
name|void
name|setErrorHandlerRef
parameter_list|(
name|String
name|errorHandlerRef
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerRef
operator|=
name|errorHandlerRef
expr_stmt|;
name|setErrorHandlerBuilder
argument_list|(
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|XmlTransient
DECL|method|isInheritErrorHandler ()
specifier|public
name|boolean
name|isInheritErrorHandler
parameter_list|()
block|{
return|return
name|isInheritErrorHandler
argument_list|(
name|getInheritErrorHandlerFlag
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Lets default the inherit value to be true if there is none specified      */
DECL|method|isInheritErrorHandler (Boolean value)
specifier|public
specifier|static
name|boolean
name|isInheritErrorHandler
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|booleanValue
argument_list|()
return|;
block|}
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"inheritErrorHandler"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|method|getInheritErrorHandlerFlag ()
specifier|public
name|Boolean
name|getInheritErrorHandlerFlag
parameter_list|()
block|{
return|return
name|inheritErrorHandlerFlag
return|;
block|}
DECL|method|setInheritErrorHandlerFlag (Boolean inheritErrorHandlerFlag)
specifier|public
name|void
name|setInheritErrorHandlerFlag
parameter_list|(
name|Boolean
name|inheritErrorHandlerFlag
parameter_list|)
block|{
name|this
operator|.
name|inheritErrorHandlerFlag
operator|=
name|inheritErrorHandlerFlag
expr_stmt|;
block|}
annotation|@
name|XmlTransient
DECL|method|getNodeFactory ()
specifier|public
name|NodeFactory
name|getNodeFactory
parameter_list|()
block|{
if|if
condition|(
name|nodeFactory
operator|==
literal|null
condition|)
block|{
name|nodeFactory
operator|=
operator|new
name|NodeFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|nodeFactory
return|;
block|}
DECL|method|setNodeFactory (NodeFactory nodeFactory)
specifier|public
name|void
name|setNodeFactory
parameter_list|(
name|NodeFactory
name|nodeFactory
parameter_list|)
block|{
name|this
operator|.
name|nodeFactory
operator|=
name|nodeFactory
expr_stmt|;
block|}
comment|/**      * Returns a label to describe this node such as the expression if some kind of expression node      */
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * Creates the processor and wraps it in any necessary interceptors and      * error handlers      */
DECL|method|makeProcessor (RouteContext routeContext)
specifier|protected
name|Processor
name|makeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
return|return
name|wrapProcessor
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|/**      * A strategy method which allows derived classes to wrap the child      * processor in some kind of interceptor      *      * @param routeContext the route context      * @param target       the processor which can be wrapped      * @return the original processor or a new wrapped interceptor      */
DECL|method|wrapProcessorInInterceptors (RouteContext routeContext, Processor target)
specifier|protected
name|Processor
name|wrapProcessorInInterceptors
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|strategies
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptStrategy
argument_list|>
argument_list|()
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|instanceof
name|DefaultCamelContext
condition|)
block|{
name|DefaultCamelContext
name|defaultCamelContext
init|=
operator|(
name|DefaultCamelContext
operator|)
name|camelContext
decl_stmt|;
name|strategies
operator|.
name|addAll
argument_list|(
name|defaultCamelContext
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|strategies
operator|.
name|addAll
argument_list|(
name|routeContext
operator|.
name|getInterceptStrategies
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|strategies
control|)
block|{
if|if
condition|(
name|strategy
operator|!=
literal|null
condition|)
block|{
name|target
operator|=
name|strategy
operator|.
name|wrapProcessorInInterceptors
argument_list|(
name|this
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|InterceptorType
argument_list|>
name|list
init|=
name|routeContext
operator|.
name|getRoute
argument_list|()
operator|.
name|getInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|interceptors
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
comment|// lets reverse the list so we apply the inner interceptors first
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Processor
argument_list|>
name|interceptors
init|=
operator|new
name|HashSet
argument_list|<
name|Processor
argument_list|>
argument_list|()
decl_stmt|;
name|interceptors
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|InterceptorType
name|interceptorType
range|:
name|list
control|)
block|{
name|DelegateProcessor
name|interceptor
init|=
name|interceptorType
operator|.
name|createInterceptor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interceptors
operator|.
name|contains
argument_list|(
name|interceptor
argument_list|)
condition|)
block|{
name|interceptors
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|interceptor
operator|.
name|getProcessor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interceptor "
operator|+
name|interceptor
operator|+
literal|" currently wraps target "
operator|+
name|interceptor
operator|.
name|getProcessor
argument_list|()
operator|+
literal|" is attempting to change target "
operator|+
name|target
operator|+
literal|" new wrapping has been denied."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|interceptor
operator|.
name|setProcessor
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|=
name|interceptor
expr_stmt|;
block|}
block|}
block|}
return|return
name|target
return|;
block|}
comment|/**      * A strategy method to allow newly created processors to be wrapped in an      * error handler.      */
DECL|method|wrapInErrorHandler (RouteContext routeContext, Processor target)
specifier|protected
name|Processor
name|wrapInErrorHandler
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ErrorHandlerWrappingStrategy
name|strategy
init|=
name|routeContext
operator|.
name|getErrorHandlerWrappingStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|strategy
operator|!=
literal|null
condition|)
block|{
return|return
name|strategy
operator|.
name|wrapProcessorInErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|this
argument_list|,
name|target
argument_list|)
return|;
block|}
return|return
name|getErrorHandlerBuilder
argument_list|()
operator|.
name|createErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|target
argument_list|)
return|;
block|}
DECL|method|createErrorHandlerBuilder ()
specifier|protected
name|ErrorHandlerBuilder
name|createErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerRef
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
return|;
block|}
if|if
condition|(
name|isInheritErrorHandler
argument_list|()
condition|)
block|{
return|return
operator|new
name|DeadLetterChannelBuilder
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|NoErrorHandlerBuilder
argument_list|()
return|;
block|}
block|}
DECL|method|configureChild (ProcessorType output)
specifier|protected
name|void
name|configureChild
parameter_list|(
name|ProcessorType
name|output
parameter_list|)
block|{
name|output
operator|.
name|setNodeFactory
argument_list|(
name|getNodeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addOutput (ProcessorType processorType)
specifier|public
name|void
name|addOutput
parameter_list|(
name|ProcessorType
name|processorType
parameter_list|)
block|{
name|processorType
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|configureChild
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Block
name|block
init|=
name|blocks
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|block
operator|.
name|addOutput
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new instance of some kind of composite processor which defaults      * to using a {@link Pipeline} but derived classes could change the      * behaviour      */
DECL|method|createCompositeProcessor (RouteContext routeContext, List<Processor> list)
specifier|protected
name|Processor
name|createCompositeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|List
argument_list|<
name|Processor
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|Pipeline
argument_list|(
name|list
argument_list|)
return|;
block|}
DECL|method|createOutputsProcessor (RouteContext routeContext, Collection<ProcessorType> outputs)
specifier|protected
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Processor
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorType
name|output
range|:
name|outputs
control|)
block|{
name|Processor
name|processor
init|=
name|output
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
comment|// if the ProceedType create processor is null we keep on going
if|if
condition|(
name|output
operator|instanceof
name|ProceedType
operator|&&
name|processor
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|processor
operator|=
name|output
operator|.
name|wrapProcessorInInterceptors
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|ProcessorType
name|currentProcessor
init|=
name|this
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|currentProcessor
operator|instanceof
name|ExceptionType
operator|||
name|currentProcessor
operator|instanceof
name|TryType
operator|)
condition|)
block|{
name|processor
operator|=
name|output
operator|.
name|wrapInErrorHandler
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|processor
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|=
name|createCompositeProcessor
argument_list|(
name|routeContext
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processor
return|;
block|}
DECL|method|clearOutput ()
specifier|public
name|void
name|clearOutput
parameter_list|()
block|{
name|getOutputs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

