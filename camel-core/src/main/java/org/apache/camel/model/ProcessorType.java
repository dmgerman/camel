begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DeadLetterChannelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|FromBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|IdempotentConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NoErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|ObjectConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|LanguageExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DelegateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|MulticastProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RecipientList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
operator|.
name|IdempotentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
operator|.
name|MessageIdRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|ProcessorType
specifier|public
specifier|abstract
class|class
name|ProcessorType
block|{
DECL|field|DEFAULT_TRACE_CATEGORY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TRACE_CATEGORY
init|=
literal|"org.apache.camel.TRACE"
decl_stmt|;
DECL|field|errorHandlerBuilder
specifier|private
name|ErrorHandlerBuilder
name|errorHandlerBuilder
decl_stmt|;
DECL|field|inheritErrorHandlerFlag
specifier|private
name|Boolean
name|inheritErrorHandlerFlag
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
comment|// TODO not sure how else to use an optional attribute in JAXB2
DECL|method|getOutputs ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|getOutputs
parameter_list|()
function_decl|;
DECL|method|getInterceptors ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|InterceptorRef
argument_list|>
name|getInterceptors
parameter_list|()
function_decl|;
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet for class: "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|createOutputsProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createOutputsProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ProcessorType
argument_list|>
name|outputs
init|=
name|getOutputs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Processor
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorType
name|output
range|:
name|outputs
control|)
block|{
name|Processor
name|processor
init|=
name|output
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|processor
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|=
name|createCompositeProcessor
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processor
return|;
block|}
DECL|method|addRoutes (RouteContext routeContext, Collection<Route> routes)
specifier|public
name|void
name|addRoutes
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|makeProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
name|routeContext
operator|.
name|addEventDrivenProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wraps the child processor in whatever necessary interceptors and error handlers      */
DECL|method|wrapProcessor (RouteContext routeContext, Processor processor)
specifier|public
name|Processor
name|wrapProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|processor
operator|=
name|wrapProcessorInInterceptors
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
expr_stmt|;
return|return
name|wrapInErrorHandler
argument_list|(
name|processor
argument_list|)
return|;
block|}
comment|// Fluent API
comment|//-------------------------------------------------------------------------
comment|/**      * Sends the exchange to the given endpoint URI      */
DECL|method|to (String uri)
specifier|public
name|ProcessorType
name|to
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sends the exchange to the given endpoint      */
DECL|method|to (Endpoint endpoint)
specifier|public
name|ProcessorType
name|to
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints using the {@link MulticastProcessor} pattern      */
DECL|method|to (String... uris)
specifier|public
name|ProcessorType
name|to
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoints using the {@link MulticastProcessor} pattern      */
DECL|method|to (Endpoint... endpoints)
specifier|public
name|ProcessorType
name|to
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Sends the exchange to a list of endpoint using the {@link MulticastProcessor} pattern      */
DECL|method|to (Collection<Endpoint> endpoints)
specifier|public
name|ProcessorType
name|to
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|addOutput
argument_list|(
operator|new
name|ToType
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Multicasts messages to all its child outputs; so that each processor and destination gets a copy of the original message      * to avoid the processors interfering with each other.      */
DECL|method|multicast ()
specifier|public
name|MulticastType
name|multicast
parameter_list|()
block|{
name|MulticastType
name|answer
init|=
operator|new
name|MulticastType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a {@link Pipeline} of the list of endpoints so that the message will get processed by each endpoint in turn      * and for request/response the output of one endpoint will be the input of the next endpoint      */
DECL|method|pipeline (String... uris)
specifier|public
name|ProcessorType
name|pipeline
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
comment|// TODO pipeline v mulicast
return|return
name|to
argument_list|(
name|uris
argument_list|)
return|;
block|}
comment|/**      * Creates a {@link Pipeline} of the list of endpoints so that the message will get processed by each endpoint in turn      * and for request/response the output of one endpoint will be the input of the next endpoint      */
DECL|method|pipeline (Endpoint... endpoints)
specifier|public
name|ProcessorType
name|pipeline
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
comment|// TODO pipeline v mulicast
return|return
name|to
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Creates a {@link Pipeline} of the list of endpoints so that the message will get processed by each endpoint in turn      * and for request/response the output of one endpoint will be the input of the next endpoint      */
DECL|method|pipeline (Collection<Endpoint> endpoints)
specifier|public
name|ProcessorType
name|pipeline
parameter_list|(
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
comment|// TODO pipeline v mulicast
return|return
name|to
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
comment|/**      * Creates an {@link IdempotentConsumer} to avoid duplicate messages      */
DECL|method|idempotentConsumer (Expression messageIdExpression, MessageIdRepository messageIdRepository)
specifier|public
name|IdempotentConsumerType
name|idempotentConsumer
parameter_list|(
name|Expression
name|messageIdExpression
parameter_list|,
name|MessageIdRepository
name|messageIdRepository
parameter_list|)
block|{
name|IdempotentConsumerType
name|answer
init|=
operator|new
name|IdempotentConsumerType
argument_list|(
name|messageIdExpression
argument_list|,
name|messageIdRepository
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a predicate which is applied and only if it is true then      * the exchange is forwarded to the destination      *      * @return the builder for a predicate      */
DECL|method|filter (Predicate predicate)
specifier|public
name|FilterType
name|filter
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|FilterType
name|filter
init|=
operator|new
name|FilterType
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
comment|/**      * Creates a choice of one or more predicates with an otherwise clause      *      * @return the builder for a choice expression      */
DECL|method|choice ()
specifier|public
name|ChoiceType
name|choice
parameter_list|()
block|{
name|ChoiceType
name|answer
init|=
operator|new
name|ChoiceType
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a dynamic<a href="http://activemq.apache.org/camel/recipient-list.html">Recipient List</a> pattern.      *      * @param receipients is the builder of the expression used in the {@link RecipientList} to decide the destinations      */
DECL|method|recipientList (Expression receipients)
specifier|public
name|ProcessorType
name|recipientList
parameter_list|(
name|Expression
name|receipients
parameter_list|)
block|{
name|RecipientListType
name|answer
init|=
operator|new
name|RecipientListType
argument_list|(
name|receipients
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/splitter.html">Splitter</a> pattern      * where an expression is evaluated to iterate through each of the parts of a message and then each part is then send to some endpoint.      *      * @param receipients the expression on which to split      * @return the builder      */
DECL|method|splitter (Expression receipients)
specifier|public
name|SplitterType
name|splitter
parameter_list|(
name|Expression
name|receipients
parameter_list|)
block|{
name|SplitterType
name|answer
init|=
operator|new
name|SplitterType
argument_list|(
name|receipients
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/resequencer.html">Resequencer</a> pattern      * where an expression is evaluated to be able to compare the message exchanges to reorder them. e.g. you      * may wish to sort by some header      *      * @param expression the expression on which to compare messages in order      * @return the builder      */
DECL|method|resequencer (Expression<Exchange> expression)
specifier|public
name|ResequencerType
name|resequencer
parameter_list|(
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|expression
parameter_list|)
block|{
return|return
name|resequencer
argument_list|(
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|singletonList
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/resequencer.html">Resequencer</a> pattern      * where a list of expressions are evaluated to be able to compare the message exchanges to reorder them. e.g. you      * may wish to sort by some headers      *      * @param expressions the expressions on which to compare messages in order      * @return the builder      */
DECL|method|resequencer (List<Expression> expressions)
specifier|public
name|ResequencerType
name|resequencer
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|ResequencerType
name|answer
init|=
operator|new
name|ResequencerType
argument_list|(
name|expressions
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/resequencer.html">Resequencer</a> pattern      * where a list of expressions are evaluated to be able to compare the message exchanges to reorder them. e.g. you      * may wish to sort by some headers      *      * @param expressions the expressions on which to compare messages in order      * @return the builder      */
DECL|method|resequencer (Expression... expressions)
specifier|public
name|ResequencerType
name|resequencer
parameter_list|(
name|Expression
modifier|...
name|expressions
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
return|return
name|resequencer
argument_list|(
name|list
argument_list|)
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/aggregator.html">Aggregator</a> pattern      * where a batch of messages are processed (up to a maximum amount or until some timeout is reached)      * and messages for the same correlation key are combined together using some kind of      * {@link AggregationStrategy ) (by default the latest message is used) to compress many message exchanges      * into a smaller number of exchanges.      *<p/>      * A good example of this is stock market data; you may be receiving 30,000 messages/second and you may want to      * throttle it right down so that multiple messages for the same stock are combined (or just the latest      * message is used and older prices are discarded). Another idea is to combine line item messages together      * into a single invoice message.      *      * @param correlationExpression the expression used to calculate the correlation key. For a JMS message this could      *                              be the expression<code>header("JMSDestination")</code> or<code>header("JMSCorrelationID")</code>      */
DECL|method|aggregator (Expression correlationExpression)
specifier|public
name|AggregatorType
name|aggregator
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|)
block|{
name|AggregatorType
name|answer
init|=
operator|new
name|AggregatorType
argument_list|(
name|correlationExpression
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/aggregator.html">Aggregator</a> pattern      * where a batch of messages are processed (up to a maximum amount or until some timeout is reached)      * and messages for the same correlation key are combined together using some kind of      * {@link AggregationStrategy ) (by default the latest message is used) to compress many message exchanges      * into a smaller number of exchanges.      *<p/>      * A good example of this is stock market data; you may be receiving 30,000 messages/second and you may want to      * throttle it right down so that multiple messages for the same stock are combined (or just the latest      * message is used and older prices are discarded). Another idea is to combine line item messages together      * into a single invoice message.      *      * @param correlationExpression the expression used to calculate the correlation key. For a JMS message this could      *                              be the expression<code>header("JMSDestination")</code> or<code>header("JMSCorrelationID")</code>      */
DECL|method|aggregator (Expression correlationExpression, AggregationStrategy aggregationStrategy)
specifier|public
name|AggregatorType
name|aggregator
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|AggregatorType
name|answer
init|=
operator|new
name|AggregatorType
argument_list|(
name|correlationExpression
argument_list|,
name|aggregationStrategy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/delayer.html">Delayer</a> pattern      * where an expression is used to calculate the time which the message will be dispatched on      *      * @param processAtExpression an expression to calculate the time at which the messages should be processed      * @return the builder      */
DECL|method|delayer (Expression<Exchange> processAtExpression)
specifier|public
name|DelayerType
name|delayer
parameter_list|(
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|processAtExpression
parameter_list|)
block|{
return|return
name|delayer
argument_list|(
name|processAtExpression
argument_list|,
literal|0L
argument_list|)
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/delayer.html">Delayer</a> pattern      * where an expression is used to calculate the time which the message will be dispatched on      *      * @param processAtExpression an expression to calculate the time at which the messages should be processed      * @param delay               the delay in milliseconds which is added to the processAtExpression to determine the time the      *                            message should be processed      * @return the builder      */
DECL|method|delayer (Expression<Exchange> processAtExpression, long delay)
specifier|public
name|DelayerType
name|delayer
parameter_list|(
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|processAtExpression
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|DelayerType
name|answer
init|=
operator|new
name|DelayerType
argument_list|(
name|processAtExpression
argument_list|,
name|delay
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/delayer.html">Delayer</a> pattern      * where a fixed amount of milliseconds are used to delay processing of a message exchange      *      * @param delay the default delay in milliseconds      * @return the builder      */
DECL|method|delayer (long delay)
specifier|public
name|DelayerType
name|delayer
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
return|return
name|delayer
argument_list|(
literal|null
argument_list|,
name|delay
argument_list|)
return|;
block|}
comment|/**      * A builder for the<a href="http://activemq.apache.org/camel/delayer.html">Delayer</a> pattern      * where an expression is used to calculate the time which the message will be dispatched on      *      * @return the builder      */
DECL|method|throttler (long maximumRequestCount)
specifier|public
name|ThrottlerType
name|throttler
parameter_list|(
name|long
name|maximumRequestCount
parameter_list|)
block|{
name|ThrottlerType
name|answer
init|=
operator|new
name|ThrottlerType
argument_list|(
name|maximumRequestCount
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|interceptor (String ref)
specifier|public
name|ProcessorType
name|interceptor
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|getInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|InterceptorRef
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|interceptors (String... refs)
specifier|public
name|ProcessorType
name|interceptors
parameter_list|(
name|String
modifier|...
name|refs
parameter_list|)
block|{
for|for
control|(
name|String
name|ref
range|:
name|refs
control|)
block|{
name|interceptor
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|filter (ExpressionType expression)
specifier|public
name|FilterType
name|filter
parameter_list|(
name|ExpressionType
name|expression
parameter_list|)
block|{
name|FilterType
name|filter
init|=
operator|new
name|FilterType
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|addOutput
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
DECL|method|filter (String language, String expression)
specifier|public
name|FilterType
name|filter
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
return|return
name|filter
argument_list|(
operator|new
name|LanguageExpression
argument_list|(
name|language
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Trace logs the exchange before it goes to the next processing step using the {@link #DEFAULT_TRACE_CATEGORY} logging      * category.      *      * @return      */
DECL|method|trace ()
specifier|public
name|ProcessorType
name|trace
parameter_list|()
block|{
return|return
name|trace
argument_list|(
name|DEFAULT_TRACE_CATEGORY
argument_list|)
return|;
block|}
comment|/**      * Trace logs the exchange before it goes to the next processing step using the specified logging      * category.      *      * @param category the logging category trace messages will sent to.      * @return      */
DECL|method|trace (String category)
specifier|public
name|ProcessorType
name|trace
parameter_list|(
name|String
name|category
parameter_list|)
block|{
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|category
argument_list|)
decl_stmt|;
return|return
name|intercept
argument_list|(
operator|new
name|DelegateProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|trace
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|processNext
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|policies ()
specifier|public
name|PolicyRef
name|policies
parameter_list|()
block|{
name|PolicyRef
name|answer
init|=
operator|new
name|PolicyRef
argument_list|()
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|policy (Policy policy)
specifier|public
name|PolicyRef
name|policy
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
name|PolicyRef
name|answer
init|=
operator|new
name|PolicyRef
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|intercept (DelegateProcessor interceptor)
specifier|public
name|ProcessorType
name|intercept
parameter_list|(
name|DelegateProcessor
name|interceptor
parameter_list|)
block|{
name|getInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|InterceptorRef
argument_list|(
name|interceptor
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Installs the given error handler builder      *      * @param errorHandlerBuilder the error handler to be used by default for all child routes      * @return the current builder with the error handler configured      */
DECL|method|errorHandler (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|ProcessorType
name|errorHandler
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures whether or not the error handler is inherited by every processing node (or just the top most one)      *      * @param condition the falg as to whether error handlers should be inherited or not      * @return the current builder      */
DECL|method|inheritErrorHandler (boolean condition)
specifier|public
name|ProcessorType
name|inheritErrorHandler
parameter_list|(
name|boolean
name|condition
parameter_list|)
block|{
name|setInheritErrorHandlerFlag
argument_list|(
name|condition
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Transformers
comment|//-------------------------------------------------------------------------
comment|/**      * Adds the custom processor to this destination which could be a final destination, or could be a transformation in a pipeline      */
DECL|method|process (Processor processor)
specifier|public
name|ProcessorType
name|process
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|ProcessorRef
name|answer
init|=
operator|new
name|ProcessorRef
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|addOutput
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a processor which sets the body on the IN message      */
DECL|method|setBody (Expression expression)
specifier|public
name|ProcessorType
name|setBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setBody
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the body on the OUT message      */
DECL|method|setOutBody (Expression expression)
specifier|public
name|ProcessorType
name|setOutBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setOutBody
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the header on the IN message      */
DECL|method|setHeader (String name, Expression expression)
specifier|public
name|ProcessorType
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the header on the OUT message      */
DECL|method|setOutHeader (String name, Expression expression)
specifier|public
name|ProcessorType
name|setOutHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setOutHeader
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a processor which sets the exchange property      */
DECL|method|setProperty (String name, Expression expression)
specifier|public
name|ProcessorType
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts the IN message body to the specified type      */
DECL|method|convertBodyTo (Class type)
specifier|public
name|ProcessorType
name|convertBodyTo
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setBody
argument_list|(
name|Builder
operator|.
name|body
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts the OUT message body to the specified type      */
DECL|method|convertOutBodyTo (Class type)
specifier|public
name|ProcessorType
name|convertOutBodyTo
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
return|return
name|process
argument_list|(
name|ProcessorBuilder
operator|.
name|setOutBody
argument_list|(
name|Builder
operator|.
name|outBody
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
annotation|@
name|XmlTransient
DECL|method|getErrorHandlerBuilder ()
specifier|public
name|ErrorHandlerBuilder
name|getErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerBuilder
operator|==
literal|null
condition|)
block|{
name|errorHandlerBuilder
operator|=
name|createErrorHandlerBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|errorHandlerBuilder
return|;
block|}
comment|/**      * Sets the error handler to use with processors created by this builder      */
DECL|method|setErrorHandlerBuilder (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilder
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerBuilder
operator|=
name|errorHandlerBuilder
expr_stmt|;
block|}
annotation|@
name|XmlTransient
DECL|method|isInheritErrorHandler ()
specifier|public
name|boolean
name|isInheritErrorHandler
parameter_list|()
block|{
return|return
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
name|getInheritErrorHandlerFlag
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"inheritErrorHandler"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|method|getInheritErrorHandlerFlag ()
specifier|public
name|Boolean
name|getInheritErrorHandlerFlag
parameter_list|()
block|{
return|return
name|inheritErrorHandlerFlag
return|;
block|}
DECL|method|setInheritErrorHandlerFlag (Boolean inheritErrorHandlerFlag)
specifier|public
name|void
name|setInheritErrorHandlerFlag
parameter_list|(
name|Boolean
name|inheritErrorHandlerFlag
parameter_list|)
block|{
name|this
operator|.
name|inheritErrorHandlerFlag
operator|=
name|inheritErrorHandlerFlag
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
comment|/**      * Creates the processor and wraps it in any necessary interceptors and error handlers      */
DECL|method|makeProcessor (RouteContext routeContext)
specifier|protected
name|Processor
name|makeProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|createProcessor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
return|return
name|wrapProcessor
argument_list|(
name|routeContext
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|/**      * A strategy method which allows derived classes to wrap the child processor in some kind of interceptor such as      * a filter for the {@link IdempotentConsumerBuilder}.      *      * @param routeContext      * @param target       the processor which can be wrapped @return the original processor or a new wrapped interceptor      */
DECL|method|wrapProcessorInInterceptors (RouteContext routeContext, Processor target)
specifier|protected
name|Processor
name|wrapProcessorInInterceptors
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|target
parameter_list|)
block|{
comment|// The target is required.
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"target provided."
argument_list|)
throw|;
block|}
comment|// Interceptors are optional
name|DelegateProcessor
name|first
init|=
literal|null
decl_stmt|;
name|DelegateProcessor
name|last
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|InterceptorRef
argument_list|>
name|interceptors
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptorRef
argument_list|>
argument_list|(
name|routeContext
operator|.
name|getRoute
argument_list|()
operator|.
name|getInterceptors
argument_list|()
argument_list|)
decl_stmt|;
name|interceptors
operator|.
name|addAll
argument_list|(
name|getInterceptors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|interceptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InterceptorRef
name|interceptorRef
range|:
name|interceptors
control|)
block|{
name|DelegateProcessor
name|p
init|=
name|interceptorRef
operator|.
name|createInterceptor
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|p
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setProcessor
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|p
expr_stmt|;
block|}
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setProcessor
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|first
operator|==
literal|null
condition|?
name|target
else|:
name|first
return|;
block|}
comment|/**      * A strategy method to allow newly created processors to be wrapped in an error handler. This feature      * could be disabled for child builders such as {@link IdempotentConsumerBuilder} which will rely on the      * {@link FromBuilder} to perform the error handling to avoid doubly-wrapped processors with 2 nested error handlers      */
DECL|method|wrapInErrorHandler (Processor processor)
specifier|protected
name|Processor
name|wrapInErrorHandler
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getErrorHandlerBuilder
argument_list|()
operator|.
name|createErrorHandler
argument_list|(
name|processor
argument_list|)
return|;
block|}
DECL|method|createErrorHandlerBuilder ()
specifier|protected
name|ErrorHandlerBuilder
name|createErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|isInheritErrorHandler
argument_list|()
condition|)
block|{
return|return
operator|new
name|DeadLetterChannelBuilder
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|NoErrorHandlerBuilder
argument_list|()
return|;
block|}
block|}
DECL|method|configureChild (ProcessorType output)
specifier|protected
name|void
name|configureChild
parameter_list|(
name|ProcessorType
name|output
parameter_list|)
block|{     }
DECL|method|addOutput (ProcessorType processorType)
specifier|protected
name|void
name|addOutput
parameter_list|(
name|ProcessorType
name|processorType
parameter_list|)
block|{
name|configureChild
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|processorType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of some kind of composite processor which defaults      * to using a {@link Pipeline} but derived classes could change the behaviour      */
DECL|method|createCompositeProcessor (List<Processor> list)
specifier|protected
name|Processor
name|createCompositeProcessor
parameter_list|(
name|List
argument_list|<
name|Processor
argument_list|>
name|list
parameter_list|)
block|{
comment|//return new MulticastProcessor(list);
return|return
operator|new
name|Pipeline
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
end_class

end_unit

