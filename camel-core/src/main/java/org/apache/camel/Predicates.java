begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
package|;
end_package

begin_comment
comment|/**  * A helper class for working with predicates  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|Predicates
specifier|public
class|class
name|Predicates
block|{
DECL|method|notNull (Object value, String name)
specifier|public
specifier|static
name|void
name|notNull
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"No "
operator|+
name|name
operator|+
literal|" specified"
argument_list|)
throw|;
block|}
block|}
comment|/**      * A helper method to combine multiple predicates by a logical AND      */
DECL|method|and (final Predicate<E> left, final Predicate<E> right)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Predicate
argument_list|<
name|E
argument_list|>
name|and
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|E
argument_list|>
name|left
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|E
argument_list|>
name|right
parameter_list|)
block|{
name|notNull
argument_list|(
name|left
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|notNull
argument_list|(
name|right
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Predicate
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
return|return
name|left
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
operator|&&
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * A helper method to combine multiple predicates by a logical OR      */
DECL|method|or (final Predicate<E> left, final Predicate<E> right)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Predicate
argument_list|<
name|E
argument_list|>
name|or
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|E
argument_list|>
name|left
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|E
argument_list|>
name|right
parameter_list|)
block|{
name|notNull
argument_list|(
name|left
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|notNull
argument_list|(
name|right
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Predicate
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
return|return
name|left
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
operator|||
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

