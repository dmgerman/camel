begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple.ast
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleIllegalSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleToken
import|;
end_import

begin_comment
comment|/**  * Starts a function  */
end_comment

begin_class
DECL|class|SimpleFunctionStart
specifier|public
class|class
name|SimpleFunctionStart
extends|extends
name|BaseSimpleNode
implements|implements
name|BlockStart
block|{
DECL|field|block
specifier|private
name|CompositeNodes
name|block
decl_stmt|;
DECL|method|SimpleFunctionStart (SimpleToken token)
specifier|public
name|SimpleFunctionStart
parameter_list|(
name|SimpleToken
name|token
parameter_list|)
block|{
name|super
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|this
operator|.
name|block
operator|=
operator|new
name|CompositeNodes
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// output a nice toString so it makes debugging easier as we can see the entire block
return|return
literal|"${"
operator|+
name|block
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|createExpression (String expression)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
comment|// a function can either be a simple literal function, or contain nested functions
if|if
condition|(
name|block
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|block
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|LiteralNode
condition|)
block|{
return|return
name|doCreateLiteralExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|doCreateCompositeExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
block|}
DECL|method|doCreateLiteralExpression (final String expression)
specifier|private
name|Expression
name|doCreateLiteralExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|)
block|{
name|SimpleFunctionExpression
name|function
init|=
operator|new
name|SimpleFunctionExpression
argument_list|(
name|this
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|LiteralNode
name|literal
init|=
operator|(
name|LiteralNode
operator|)
name|block
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|function
operator|.
name|addText
argument_list|(
name|literal
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|function
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
DECL|method|doCreateCompositeExpression (final String expression)
specifier|private
name|Expression
name|doCreateCompositeExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|)
block|{
specifier|final
name|SimpleToken
name|token
init|=
name|getToken
argument_list|()
decl_stmt|;
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// we need to concat the block so we have the expression
for|for
control|(
name|SimpleNode
name|child
range|:
name|block
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|LiteralNode
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|LiteralNode
operator|)
name|child
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|SimpleFunctionStart
condition|)
block|{
try|try
block|{
comment|// pass in null when we evaluate the nested expressions
name|Expression
name|nested
init|=
name|child
operator|.
name|createExpression
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|nested
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SimpleParserException
name|e
parameter_list|)
block|{
comment|// must rethrow parser exception as illegal syntax with details about the location
throw|throw
operator|new
name|SimpleIllegalSyntaxException
argument_list|(
name|expression
argument_list|,
name|e
operator|.
name|getIndex
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// we have now concat the block as a String which contains the function expression
comment|// which we then need to evaluate as a function
name|String
name|exp
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|SimpleFunctionExpression
name|function
init|=
operator|new
name|SimpleFunctionExpression
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|function
operator|.
name|addText
argument_list|(
name|exp
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|function
operator|.
name|createExpression
argument_list|(
name|exp
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SimpleParserException
name|e
parameter_list|)
block|{
comment|// must rethrow parser exception as illegal syntax with details about the location
throw|throw
operator|new
name|SimpleIllegalSyntaxException
argument_list|(
name|expression
argument_list|,
name|e
operator|.
name|getIndex
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|acceptAndAddNode (SimpleNode node)
specifier|public
name|boolean
name|acceptAndAddNode
parameter_list|(
name|SimpleNode
name|node
parameter_list|)
block|{
comment|// only accept literals or embedded functions
if|if
condition|(
name|node
operator|instanceof
name|LiteralNode
operator|||
name|node
operator|instanceof
name|SimpleFunctionStart
condition|)
block|{
name|block
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

