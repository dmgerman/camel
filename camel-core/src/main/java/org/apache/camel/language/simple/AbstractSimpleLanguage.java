begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|PredicateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_comment
comment|/**  * Abstract base class for Simple languages.  */
end_comment

begin_class
DECL|class|AbstractSimpleLanguage
specifier|public
specifier|abstract
class|class
name|AbstractSimpleLanguage
implements|implements
name|Language
block|{
DECL|method|createPredicate (String expression)
specifier|public
name|Predicate
name|createPredicate
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
name|PredicateBuilder
operator|.
name|toPredicate
argument_list|(
name|createExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createExpression (String expression)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|createComplexExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
return|return
name|createSimpleExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
DECL|method|createComplexExpression (String expression)
specifier|protected
name|Expression
name|createComplexExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|pivot
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|expression
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|pivot
operator|<
name|size
condition|)
block|{
name|int
name|idx
init|=
name|expression
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|,
name|pivot
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|createConstantExpression
argument_list|(
name|expression
argument_list|,
name|pivot
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|pivot
operator|<
name|idx
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|createConstantExpression
argument_list|(
name|expression
argument_list|,
name|pivot
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pivot
operator|=
name|idx
operator|+
literal|2
expr_stmt|;
name|int
name|endIdx
init|=
name|expression
operator|.
name|indexOf
argument_list|(
literal|"}"
argument_list|,
name|pivot
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIdx
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting } but found end of string for simple expression: "
operator|+
name|expression
argument_list|)
throw|;
block|}
name|String
name|simpleText
init|=
name|expression
operator|.
name|substring
argument_list|(
name|pivot
argument_list|,
name|endIdx
argument_list|)
decl_stmt|;
name|Expression
name|simpleExpression
init|=
name|createSimpleExpression
argument_list|(
name|simpleText
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|simpleExpression
argument_list|)
expr_stmt|;
name|pivot
operator|=
name|endIdx
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
name|ExpressionBuilder
operator|.
name|concatExpression
argument_list|(
name|results
argument_list|,
name|expression
argument_list|)
return|;
block|}
DECL|method|createConstantExpression (String expression, int start, int end)
specifier|protected
name|Expression
name|createConstantExpression
parameter_list|(
name|String
name|expression
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|expression
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates the simple expression based on the extracted content from the ${ } place holders      *      * @param expression  the content between ${ and }      * @return the expression      */
DECL|method|createSimpleExpression (String expression)
specifier|protected
specifier|abstract
name|Expression
name|createSimpleExpression
parameter_list|(
name|String
name|expression
parameter_list|)
function_decl|;
DECL|method|ifStartsWithReturnRemainder (String prefix, String text)
specifier|protected
name|String
name|ifStartsWithReturnRemainder
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|remainder
init|=
name|text
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|remainder
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

