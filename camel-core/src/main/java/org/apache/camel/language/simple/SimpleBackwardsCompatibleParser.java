begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|ast
operator|.
name|SimpleFunctionExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|TokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExpressionToPredicateAdapter
import|;
end_import

begin_comment
comment|/**  * A backwards compatible parser, which supports the old simple language  * syntax by which simple functions can be given without using start and  * end tokens.  *<p/>  * For example "body" would be parsed as the body function, where as the  * new parser would require that to be entered as "${body}".  *<p/>  * This parser is to be removed when the old syntax is no longer supported.  *  * @deprecated will be removed in Camel 3.0  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|SimpleBackwardsCompatibleParser
specifier|public
specifier|final
class|class
name|SimpleBackwardsCompatibleParser
block|{
DECL|method|SimpleBackwardsCompatibleParser ()
specifier|private
name|SimpleBackwardsCompatibleParser
parameter_list|()
block|{
comment|// static methods
block|}
DECL|method|parseExpression (String expression)
specifier|public
specifier|static
name|Expression
name|parseExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
name|doParseExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
DECL|method|parsePredicate (String expression)
specifier|public
specifier|static
name|Predicate
name|parsePredicate
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|Expression
name|answer
init|=
name|doParseExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|ExpressionToPredicateAdapter
operator|.
name|toPredicate
argument_list|(
name|answer
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|doParseExpression (String expression)
specifier|private
specifier|static
name|Expression
name|doParseExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
comment|// should have no function tokens
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleToken
name|token
init|=
name|SimpleTokenizer
operator|.
name|nextToken
argument_list|(
name|expression
argument_list|,
name|i
argument_list|,
name|TokenType
operator|.
name|functionStart
argument_list|,
name|TokenType
operator|.
name|functionEnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|TokenType
operator|.
name|functionStart
operator|||
name|token
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|TokenType
operator|.
name|functionEnd
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// okay there is no function tokens, then try to parse it as a simple function expression
name|SimpleToken
name|token
init|=
operator|new
name|SimpleToken
argument_list|(
operator|new
name|SimpleTokenType
argument_list|(
name|TokenType
operator|.
name|functionStart
argument_list|,
name|expression
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SimpleFunctionExpression
name|function
init|=
operator|new
name|SimpleFunctionExpression
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|function
operator|.
name|addText
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|function
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

