begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.tokenizer.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|tokenizer
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * For expressions and predicates using a body or header tokenizer.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.language.tokenize"
argument_list|)
DECL|class|TokenizeLanguageConfiguration
specifier|public
class|class
name|TokenizeLanguageConfiguration
block|{
comment|/**      * The (start) token to use as tokenizer for example \n for a new line      * token. You can use simple language as the token to support dynamic      * tokens.      */
DECL|field|token
specifier|private
name|String
name|token
decl_stmt|;
comment|/**      * The end token to use as tokenizer if using start/end token pairs. You can      * use simple language as the token to support dynamic tokens.      */
DECL|field|endToken
specifier|private
name|String
name|endToken
decl_stmt|;
comment|/**      * To inherit namespaces from a root/parent tag name when using XML You can      * use simple language as the tag name to support dynamic names.      */
DECL|field|inheritNamespaceTagName
specifier|private
name|String
name|inheritNamespaceTagName
decl_stmt|;
comment|/**      * Name of header to tokenize instead of using the message body.      */
DECL|field|headerName
specifier|private
name|String
name|headerName
decl_stmt|;
comment|/**      * If the token is a regular expression pattern. The default value is false      */
DECL|field|regex
specifier|private
name|Boolean
name|regex
init|=
literal|false
decl_stmt|;
comment|/**      * Whether the input is XML messages. This option must be set to true if      * working with XML payloads.      */
DECL|field|xml
specifier|private
name|Boolean
name|xml
init|=
literal|false
decl_stmt|;
comment|/**      * Whether to include the tokens in the parts when using pairs The default      * value is false      */
DECL|field|includeTokens
specifier|private
name|Boolean
name|includeTokens
init|=
literal|false
decl_stmt|;
comment|/**      * To group N parts together for example to split big files into chunks of      * 1000 lines.      */
DECL|field|group
specifier|private
name|Integer
name|group
decl_stmt|;
comment|/**      * To skip the very first element      */
DECL|field|skipFirst
specifier|private
name|Boolean
name|skipFirst
init|=
literal|false
decl_stmt|;
comment|/**      * Whether to trim the value to remove leading and trailing whitespaces and      * line breaks      */
DECL|field|trim
specifier|private
name|Boolean
name|trim
init|=
literal|true
decl_stmt|;
DECL|method|getToken ()
specifier|public
name|String
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
DECL|method|setToken (String token)
specifier|public
name|void
name|setToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
DECL|method|getEndToken ()
specifier|public
name|String
name|getEndToken
parameter_list|()
block|{
return|return
name|endToken
return|;
block|}
DECL|method|setEndToken (String endToken)
specifier|public
name|void
name|setEndToken
parameter_list|(
name|String
name|endToken
parameter_list|)
block|{
name|this
operator|.
name|endToken
operator|=
name|endToken
expr_stmt|;
block|}
DECL|method|getInheritNamespaceTagName ()
specifier|public
name|String
name|getInheritNamespaceTagName
parameter_list|()
block|{
return|return
name|inheritNamespaceTagName
return|;
block|}
DECL|method|setInheritNamespaceTagName (String inheritNamespaceTagName)
specifier|public
name|void
name|setInheritNamespaceTagName
parameter_list|(
name|String
name|inheritNamespaceTagName
parameter_list|)
block|{
name|this
operator|.
name|inheritNamespaceTagName
operator|=
name|inheritNamespaceTagName
expr_stmt|;
block|}
DECL|method|getHeaderName ()
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
DECL|method|setHeaderName (String headerName)
specifier|public
name|void
name|setHeaderName
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
name|this
operator|.
name|headerName
operator|=
name|headerName
expr_stmt|;
block|}
DECL|method|getRegex ()
specifier|public
name|Boolean
name|getRegex
parameter_list|()
block|{
return|return
name|regex
return|;
block|}
DECL|method|setRegex (Boolean regex)
specifier|public
name|void
name|setRegex
parameter_list|(
name|Boolean
name|regex
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|regex
expr_stmt|;
block|}
DECL|method|getXml ()
specifier|public
name|Boolean
name|getXml
parameter_list|()
block|{
return|return
name|xml
return|;
block|}
DECL|method|setXml (Boolean xml)
specifier|public
name|void
name|setXml
parameter_list|(
name|Boolean
name|xml
parameter_list|)
block|{
name|this
operator|.
name|xml
operator|=
name|xml
expr_stmt|;
block|}
DECL|method|getIncludeTokens ()
specifier|public
name|Boolean
name|getIncludeTokens
parameter_list|()
block|{
return|return
name|includeTokens
return|;
block|}
DECL|method|setIncludeTokens (Boolean includeTokens)
specifier|public
name|void
name|setIncludeTokens
parameter_list|(
name|Boolean
name|includeTokens
parameter_list|)
block|{
name|this
operator|.
name|includeTokens
operator|=
name|includeTokens
expr_stmt|;
block|}
DECL|method|getGroup ()
specifier|public
name|Integer
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
DECL|method|setGroup (Integer group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|Integer
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
DECL|method|getSkipFirst ()
specifier|public
name|Boolean
name|getSkipFirst
parameter_list|()
block|{
return|return
name|skipFirst
return|;
block|}
DECL|method|setSkipFirst (Boolean skipFirst)
specifier|public
name|void
name|setSkipFirst
parameter_list|(
name|Boolean
name|skipFirst
parameter_list|)
block|{
name|this
operator|.
name|skipFirst
operator|=
name|skipFirst
expr_stmt|;
block|}
DECL|method|getTrim ()
specifier|public
name|Boolean
name|getTrim
parameter_list|()
block|{
return|return
name|trim
return|;
block|}
DECL|method|setTrim (Boolean trim)
specifier|public
name|void
name|setTrim
parameter_list|(
name|Boolean
name|trim
parameter_list|)
block|{
name|this
operator|.
name|trim
operator|=
name|trim
expr_stmt|;
block|}
block|}
end_class

end_unit

