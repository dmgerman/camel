begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
package|;
end_package

begin_comment
comment|/**  * Operators supported by simple language  *<ul>  *<li>EQ : ==</li>  *<li>GT :></li>  *<li>GTE :>=</li>  *<li>LT :<</li>  *<li>LTE :<=</li>  *<li>NOT : !=</li>  *<li>contains : tested for if it contains the value</li>  *<li>not contains : tested for if it does not contain the value</li>  *<li>regex : matching a regular expression</li>  *<li>not regex : not matching a regular expression</li>  *<li>in : tested for in a list of values separated by comma</li>  *<li>not in : tested for not in a list of values separated by comma</li>  *</ul>  */
end_comment

begin_enum
DECL|enum|SimpleLangaugeOperator
specifier|public
enum|enum
name|SimpleLangaugeOperator
block|{
DECL|enumConstant|EQ
DECL|enumConstant|GT
DECL|enumConstant|GTE
DECL|enumConstant|LT
DECL|enumConstant|LTE
DECL|enumConstant|NOT
DECL|enumConstant|CONTAINS
DECL|enumConstant|NOT_CONTAINS
DECL|enumConstant|REGEX
DECL|enumConstant|NOT_REGEX
DECL|enumConstant|IN
DECL|enumConstant|NOT_IN
name|EQ
block|,
name|GT
block|,
name|GTE
block|,
name|LT
block|,
name|LTE
block|,
name|NOT
block|,
name|CONTAINS
block|,
name|NOT_CONTAINS
block|,
name|REGEX
block|,
name|NOT_REGEX
block|,
name|IN
block|,
name|NOT_IN
block|;
DECL|method|asOperator (String text)
specifier|public
specifier|static
name|SimpleLangaugeOperator
name|asOperator
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
literal|"=="
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|EQ
return|;
block|}
elseif|else
if|if
condition|(
literal|">"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|GT
return|;
block|}
elseif|else
if|if
condition|(
literal|">="
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|GTE
return|;
block|}
elseif|else
if|if
condition|(
literal|"<"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|LT
return|;
block|}
elseif|else
if|if
condition|(
literal|"<="
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|LTE
return|;
block|}
elseif|else
if|if
condition|(
literal|"!="
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|NOT
return|;
block|}
elseif|else
if|if
condition|(
literal|"contains"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|CONTAINS
return|;
block|}
elseif|else
if|if
condition|(
literal|"not contains"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|NOT_CONTAINS
return|;
block|}
elseif|else
if|if
condition|(
literal|"regex"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|REGEX
return|;
block|}
elseif|else
if|if
condition|(
literal|"not regex"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|NOT_REGEX
return|;
block|}
elseif|else
if|if
condition|(
literal|"in"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|IN
return|;
block|}
elseif|else
if|if
condition|(
literal|"not in"
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|NOT_IN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Operator not supported: "
operator|+
name|text
argument_list|)
throw|;
block|}
DECL|method|getOperatorText (SimpleLangaugeOperator operator)
specifier|public
name|String
name|getOperatorText
parameter_list|(
name|SimpleLangaugeOperator
name|operator
parameter_list|)
block|{
if|if
condition|(
name|operator
operator|==
name|EQ
condition|)
block|{
return|return
literal|"=="
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|GT
condition|)
block|{
return|return
literal|">"
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|GTE
condition|)
block|{
return|return
literal|">="
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|LT
condition|)
block|{
return|return
literal|"<"
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|LTE
condition|)
block|{
return|return
literal|"<="
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|NOT
condition|)
block|{
return|return
literal|"!="
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|CONTAINS
condition|)
block|{
return|return
literal|"contains"
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|NOT_CONTAINS
condition|)
block|{
return|return
literal|"not contains"
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|REGEX
condition|)
block|{
return|return
literal|"regex"
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|NOT_REGEX
condition|)
block|{
return|return
literal|"not regex"
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|IN
condition|)
block|{
return|return
literal|"in"
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|NOT_IN
condition|)
block|{
return|return
literal|"not in"
return|;
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getOperatorText
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

