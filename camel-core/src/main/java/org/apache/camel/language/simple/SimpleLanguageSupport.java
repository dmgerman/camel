begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|IsSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|PredicateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ValueBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|KeyValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleLanguageOperator
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Abstract base class for Simple languages.  */
end_comment

begin_class
DECL|class|SimpleLanguageSupport
specifier|public
specifier|abstract
class|class
name|SimpleLanguageSupport
implements|implements
name|Language
implements|,
name|IsSingleton
block|{
comment|// this is a regex for a given group in a simple expression that uses operators
DECL|field|OPERATOR_REGEX
specifier|protected
specifier|static
specifier|final
name|String
name|OPERATOR_REGEX
init|=
literal|"\\$\\{(\\S+)\\}\\s+(==|>|>=|<|<=|!=|contains|not contains|regex|not regex|in|not in|is|not is|range|not range)\\s+('.*?'|\\S+)"
decl_stmt|;
comment|// this is the operator reg ex pattern used to match if a given expression is operator based or not
DECL|field|OPERATOR_PATTERN
specifier|protected
specifier|static
specifier|final
name|Pattern
name|OPERATOR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|OPERATOR_REGEX
argument_list|)
decl_stmt|;
comment|// two specialized pattern for matching/finding multiple expressions combined using multiple and|or operators
DECL|field|ANDOR_PATTERN
specifier|protected
specifier|static
specifier|final
name|Pattern
name|ANDOR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\s+(and|or)\\s+"
operator|+
name|OPERATOR_REGEX
argument_list|)
decl_stmt|;
DECL|field|START_ANDOR_PATTERN
specifier|protected
specifier|static
specifier|final
name|Pattern
name|START_ANDOR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|OPERATOR_REGEX
operator|+
literal|"\\s+(and|or)\\s+.*$"
argument_list|)
decl_stmt|;
comment|// this is special for the range operator where you define the range as from..to (where from and to are numbers)
DECL|field|RANGE_PATTERN
specifier|protected
specifier|static
specifier|final
name|Pattern
name|RANGE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)(\\.\\.)(\\d+)$"
argument_list|)
decl_stmt|;
DECL|field|log
specifier|protected
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * A holder class to hold an operator and the expression.      *<p/>      * This is used for expression with multiple expressions grouped using and/or operators      */
DECL|class|ExpressionGroup
specifier|private
specifier|final
class|class
name|ExpressionGroup
extends|extends
name|KeyValueHolder
argument_list|<
name|SimpleLanguageOperator
argument_list|,
name|Expression
argument_list|>
block|{
DECL|method|ExpressionGroup (SimpleLanguageOperator key, Expression value)
specifier|public
name|ExpressionGroup
parameter_list|(
name|SimpleLanguageOperator
name|key
parameter_list|,
name|Expression
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|getValue
argument_list|()
return|;
block|}
block|}
DECL|method|createPredicate (String expression)
specifier|public
name|Predicate
name|createPredicate
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
name|PredicateBuilder
operator|.
name|toPredicate
argument_list|(
name|createExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createExpression (String expression)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|OPERATOR_PATTERN
operator|.
name|matcher
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|Matcher
name|startMatcher
init|=
name|START_ANDOR_PATTERN
operator|.
name|matcher
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
operator|||
name|startMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Expression is evaluated as simple (with operator) expression: "
operator|+
name|expression
argument_list|)
expr_stmt|;
block|}
return|return
name|createOperatorExpression
argument_list|(
name|matcher
argument_list|,
name|startMatcher
argument_list|,
name|expression
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|SimpleLanguage
operator|.
name|hasStartToken
argument_list|(
name|expression
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Expression is evaluated as simple (strict) expression: "
operator|+
name|expression
argument_list|)
expr_stmt|;
block|}
return|return
name|createComplexConcatExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Expression is evaluated as simple (non strict) expression: "
operator|+
name|expression
argument_list|)
expr_stmt|;
block|}
return|return
name|createSimpleExpression
argument_list|(
name|expression
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
DECL|method|createOperatorExpression (Matcher matcher, Matcher startMatcher, String expression)
specifier|private
name|Expression
name|createOperatorExpression
parameter_list|(
name|Matcher
name|matcher
parameter_list|,
name|Matcher
name|startMatcher
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
name|Expression
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|startMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|answer
operator|=
name|doCreateOperatorExpression
argument_list|(
name|expression
argument_list|,
name|startMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|startMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
name|startMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|answer
operator|=
name|doCreateOperatorExpression
argument_list|(
name|expression
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// append any additional operators
name|answer
operator|=
name|appendAdditionalOperatorExpressions
argument_list|(
name|answer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|appendAdditionalOperatorExpressions (final Expression answer, final String expression)
specifier|private
name|Expression
name|appendAdditionalOperatorExpressions
parameter_list|(
specifier|final
name|Expression
name|answer
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|ANDOR_PATTERN
operator|.
name|matcher
argument_list|(
name|expression
argument_list|)
decl_stmt|;
comment|// now go through the and/or and append those sub expressions
specifier|final
name|List
argument_list|<
name|ExpressionGroup
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionGroup
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|dumpMatcher
argument_list|(
name|matcher
argument_list|)
expr_stmt|;
comment|// we only support AND/OR operator between expression groups
specifier|final
name|SimpleLanguageOperator
name|operator
init|=
name|asOperator
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|!=
name|AND
operator|&&
name|operator
operator|!=
name|OR
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Syntax error in expression: "
operator|+
name|expression
operator|+
literal|". Expected operator as either and/or but was: "
operator|+
name|operator
argument_list|)
throw|;
block|}
specifier|final
name|Expression
name|exp
init|=
name|doCreateOperatorExpression
argument_list|(
name|expression
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
comment|// add this group
name|expressions
operator|.
name|add
argument_list|(
operator|new
name|ExpressionGroup
argument_list|(
name|operator
argument_list|,
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// return the expression that evaluates the entire expression with multiple groups
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|boolean
name|matches
init|=
name|PredicateBuilder
operator|.
name|toPredicate
argument_list|(
name|answer
argument_list|)
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpressionGroup
name|group
range|:
name|expressions
control|)
block|{
name|boolean
name|result
init|=
name|PredicateBuilder
operator|.
name|toPredicate
argument_list|(
name|group
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getKey
argument_list|()
operator|==
name|AND
condition|)
block|{
name|matches
operator|&=
name|result
expr_stmt|;
block|}
else|else
block|{
name|matches
operator||=
name|result
expr_stmt|;
block|}
block|}
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|matches
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
name|answer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpressionGroup
name|group
range|:
name|expressions
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|group
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|group
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|dumpMatcher (Matcher matcher)
specifier|private
name|void
name|dumpMatcher
parameter_list|(
name|Matcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Matcher start: "
operator|+
name|matcher
operator|.
name|start
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Matcher end: "
operator|+
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Matcher group: "
operator|+
name|matcher
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Matcher group count: "
operator|+
name|matcher
operator|.
name|groupCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matcher
operator|.
name|groupCount
argument_list|()
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|group
init|=
name|matcher
operator|.
name|group
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Matcher group #"
operator|+
name|i
operator|+
literal|": "
operator|+
name|group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doCreateOperatorExpression (final String expression, final String leftText, final String operatorText, final String rightText)
specifier|private
name|Expression
name|doCreateOperatorExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|String
name|leftText
parameter_list|,
specifier|final
name|String
name|operatorText
parameter_list|,
specifier|final
name|String
name|rightText
parameter_list|)
block|{
comment|// left value is always a simple expression
specifier|final
name|Expression
name|left
init|=
name|createSimpleExpression
argument_list|(
name|leftText
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SimpleLanguageOperator
name|operator
init|=
name|asOperator
argument_list|(
name|operatorText
argument_list|)
decl_stmt|;
comment|// the right hand side expression can either be a constant expression with or without enclosing ' '
comment|// or another simple expression using ${ } placeholders
specifier|final
name|Expression
name|right
decl_stmt|;
specifier|final
name|Boolean
name|isNull
decl_stmt|;
comment|// special null handling
if|if
condition|(
literal|"null"
operator|.
name|equals
argument_list|(
name|rightText
argument_list|)
operator|||
literal|"'null'"
operator|.
name|equals
argument_list|(
name|rightText
argument_list|)
condition|)
block|{
name|isNull
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
name|right
operator|=
name|createSimpleOrConstantExpression
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isNull
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
name|right
operator|=
name|createSimpleOrConstantExpression
argument_list|(
name|rightText
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Predicate
name|predicate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|EQ
operator|&&
name|isNull
condition|)
block|{
comment|// special for EQ null
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|NOT
operator|&&
name|isNull
condition|)
block|{
comment|// special for not EQ null
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isNotNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|EQ
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isEqualTo
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|GT
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isGreaterThan
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|GTE
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|LT
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isLessThan
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|LTE
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|NOT
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isNotEqualTo
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|CONTAINS
operator|||
name|operator
operator|==
name|NOT_CONTAINS
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|contains
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|operator
operator|==
name|NOT_CONTAINS
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|REGEX
operator|||
name|operator
operator|==
name|NOT_REGEX
condition|)
block|{
comment|// reg ex should use String pattern, so we evaluate the right hand side as a String
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|regex
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|operator
operator|==
name|NOT_REGEX
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|IN
operator|||
name|operator
operator|==
name|NOT_IN
condition|)
block|{
comment|// okay the in operator is a bit more complex as we need to build a list of values
comment|// from the right handside expression.
comment|// each element on the right handside must be separated by comma (default for create iterator)
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then reuse value builder to create the in predicate with the list of values
name|ValueBuilder
name|vb
init|=
operator|new
name|ValueBuilder
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|predicate
operator|=
name|vb
operator|.
name|in
argument_list|(
name|values
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|operator
operator|==
name|NOT_IN
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|IS
operator|||
name|operator
operator|==
name|NOT_IS
condition|)
block|{
name|String
name|name
init|=
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|rightType
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Syntax error in "
operator|+
name|operatorText
operator|+
literal|" operator: "
operator|+
name|expression
operator|+
literal|" cannot find class with name: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isInstanceOf
argument_list|(
name|left
argument_list|,
name|rightType
argument_list|)
expr_stmt|;
if|if
condition|(
name|operator
operator|==
name|NOT_IS
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|RANGE
operator|||
name|operator
operator|==
name|NOT_RANGE
condition|)
block|{
name|String
name|range
init|=
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|RANGE_PATTERN
operator|.
name|matcher
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// wrap as constant expression for the from and to values
name|Expression
name|from
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|to
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
comment|// build a compound predicate for the range
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|left
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|and
argument_list|(
name|predicate
argument_list|,
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|left
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Syntax error in "
operator|+
name|operatorText
operator|+
literal|" operator: "
operator|+
name|expression
operator|+
literal|" is not valid. Valid syntax:from..to(where from and to are numbers)."
argument_list|)
throw|;
block|}
if|if
condition|(
name|operator
operator|==
name|NOT_RANGE
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|predicate
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operator: "
operator|+
name|operatorText
operator|+
literal|" for expression: "
operator|+
name|expression
argument_list|)
throw|;
block|}
name|boolean
name|matches
init|=
name|predicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|matches
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|operator
operator|+
literal|" "
operator|+
name|right
return|;
block|}
block|}
return|;
block|}
DECL|method|createComplexConcatExpression (String expression)
specifier|protected
name|Expression
name|createComplexConcatExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|pivot
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|expression
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|pivot
operator|<
name|size
condition|)
block|{
comment|// look for start tokens
name|int
name|delta
init|=
literal|2
decl_stmt|;
name|int
name|idx
init|=
name|expression
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|,
name|pivot
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
name|expression
operator|.
name|indexOf
argument_list|(
literal|"$simple{"
argument_list|,
name|pivot
argument_list|)
expr_stmt|;
name|delta
operator|=
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|createConstantExpression
argument_list|(
name|expression
argument_list|,
name|pivot
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|pivot
operator|<
name|idx
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|createConstantExpression
argument_list|(
name|expression
argument_list|,
name|pivot
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pivot
operator|=
name|idx
operator|+
name|delta
expr_stmt|;
name|int
name|endIdx
init|=
name|expression
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|,
name|pivot
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIdx
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting } but found end of string for simple expression: "
operator|+
name|expression
argument_list|)
throw|;
block|}
name|String
name|simpleText
init|=
name|expression
operator|.
name|substring
argument_list|(
name|pivot
argument_list|,
name|endIdx
argument_list|)
decl_stmt|;
name|Expression
name|simpleExpression
init|=
name|createSimpleExpression
argument_list|(
name|simpleText
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|simpleExpression
argument_list|)
expr_stmt|;
name|pivot
operator|=
name|endIdx
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|// only concat if there is more than one expression
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|concatExpression
argument_list|(
name|results
argument_list|,
name|expression
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|createSimpleOrConstantExpression (String text)
specifier|protected
name|Expression
name|createSimpleOrConstantExpression
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|String
name|simple
init|=
name|ObjectHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"${"
argument_list|,
literal|"}"
argument_list|)
decl_stmt|;
if|if
condition|(
name|simple
operator|==
literal|null
condition|)
block|{
name|simple
operator|=
name|ObjectHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"$simple{"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simple
operator|!=
literal|null
condition|)
block|{
return|return
name|createSimpleExpression
argument_list|(
name|simple
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|simple
operator|=
name|ObjectHelper
operator|.
name|between
argument_list|(
name|text
argument_list|,
literal|"'"
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|simple
operator|!=
literal|null
condition|)
block|{
return|return
name|createConstantExpression
argument_list|(
name|simple
argument_list|)
return|;
block|}
block|}
return|return
name|createConstantExpression
argument_list|(
name|text
argument_list|)
return|;
block|}
DECL|method|createConstantExpression (String expression, int start, int end)
specifier|protected
name|Expression
name|createConstantExpression
parameter_list|(
name|String
name|expression
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|expression
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createConstantExpression (String expression)
specifier|protected
name|Expression
name|createConstantExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
comment|/**      * Creates the simple expression based on the extracted content from the ${ } place holders      *      * @param expression  the content between ${ and }      * @param strict whether it is strict mode or not, if strict it will throw a      * {@link org.apache.camel.ExpressionIllegalSyntaxException} if the expression was not known.      * Set to<tt>false</tt> to support constant expressions      * @return the expression      */
DECL|method|createSimpleExpression (String expression, boolean strict)
specifier|protected
specifier|abstract
name|Expression
name|createSimpleExpression
parameter_list|(
name|String
name|expression
parameter_list|,
name|boolean
name|strict
parameter_list|)
function_decl|;
DECL|method|ifStartsWithReturnRemainder (String prefix, String text)
specifier|protected
name|String
name|ifStartsWithReturnRemainder
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|remainder
init|=
name|text
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|remainder
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

