begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple.ast
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|UnaryOperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents an unary expression in the AST  */
end_comment

begin_class
DECL|class|UnaryExpression
specifier|public
class|class
name|UnaryExpression
extends|extends
name|BaseSimpleNode
block|{
DECL|field|operator
specifier|private
name|UnaryOperatorType
name|operator
decl_stmt|;
DECL|field|left
specifier|private
name|SimpleNode
name|left
decl_stmt|;
DECL|method|UnaryExpression (SimpleToken token)
specifier|public
name|UnaryExpression
parameter_list|(
name|SimpleToken
name|token
parameter_list|)
block|{
name|super
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|operator
operator|=
name|UnaryOperatorType
operator|.
name|asOperator
argument_list|(
name|token
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
return|return
name|left
operator|+
name|token
operator|.
name|getText
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|token
operator|.
name|getText
argument_list|()
return|;
block|}
block|}
comment|/**      * Accepts the left node to this operator      *      * @param left  the left node to accept      */
DECL|method|acceptLeft (SimpleNode left)
specifier|public
name|void
name|acceptLeft
parameter_list|(
name|SimpleNode
name|left
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
block|}
DECL|method|getOperator ()
specifier|public
name|UnaryOperatorType
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
annotation|@
name|Override
DECL|method|createExpression (String expression)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|left
argument_list|,
literal|"left node"
argument_list|,
name|this
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|leftExp
init|=
name|left
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|UnaryOperatorType
operator|.
name|INC
condition|)
block|{
return|return
name|createIncExpression
argument_list|(
name|leftExp
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|UnaryOperatorType
operator|.
name|DEC
condition|)
block|{
return|return
name|createDecExpression
argument_list|(
name|leftExp
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SimpleParserException
argument_list|(
literal|"Unknown unary operator "
operator|+
name|operator
argument_list|,
name|token
operator|.
name|getIndex
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|createIncExpression (final Expression leftExp)
specifier|private
name|Expression
name|createIncExpression
parameter_list|(
specifier|final
name|Expression
name|leftExp
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Number
name|num
init|=
name|leftExp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Number
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|!=
literal|null
condition|)
block|{
name|long
name|val
init|=
name|num
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|val
operator|++
expr_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|val
argument_list|)
return|;
block|}
comment|// cannot convert the expression as a number
name|Exception
name|cause
init|=
operator|new
name|CamelExchangeException
argument_list|(
literal|"Cannot evaluate "
operator|+
name|leftExp
operator|+
literal|" as a number"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
name|operator
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|createDecExpression (final Expression leftExp)
specifier|private
name|Expression
name|createDecExpression
parameter_list|(
specifier|final
name|Expression
name|leftExp
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Number
name|num
init|=
name|leftExp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Number
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|!=
literal|null
condition|)
block|{
name|long
name|val
init|=
name|num
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|val
operator|--
expr_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|val
argument_list|)
return|;
block|}
comment|// cannot convert the expression as a number
name|Exception
name|cause
init|=
operator|new
name|CamelExchangeException
argument_list|(
literal|"Cannot evaluate "
operator|+
name|leftExp
operator|+
literal|" as a number"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
name|operator
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

