begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements {@link EndpointConfiguration} for Endpoint implementations  * which are annotated with {@link org.apache.camel.spi.UriEndpoint} to use the {@link UriParam} and {@link UriParams} annotations  * to denote its parameters which can be specified via URI query parameters.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|UriEndpointConfiguration
specifier|public
class|class
name|UriEndpointConfiguration
implements|implements
name|EndpointConfiguration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UriEndpointConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|Endpoint
name|endpoint
decl_stmt|;
DECL|field|uriText
specifier|private
name|String
name|uriText
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|propertyMap
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|propertyMap
decl_stmt|;
DECL|method|UriEndpointConfiguration (CamelContext camelContext, Endpoint endpoint, String uriText)
specifier|public
name|UriEndpointConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|uriText
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|uriText
operator|=
name|uriText
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getURI ()
specifier|public
name|URI
name|getURI
parameter_list|()
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
comment|// lazily create the URI which may fail as not all camel uriText are valid URI text
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uriText
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|uri
return|;
block|}
DECL|method|setURI (URI uri)
specifier|public
name|void
name|setURI
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uriText
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParameter (String name)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
name|ParameterConfiguration
name|config
init|=
name|getPropertyConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// lets try get the property regardless of if this maps to a valid property name
comment|// then if the introspection fails we will get a valid error otherwise
comment|// lets raise a warning afterwards that we should update the metadata on the endpoint class
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|answer
init|=
operator|(
name|T
operator|)
name|IntrospectionSupport
operator|.
name|getProperty
argument_list|(
name|endpoint
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|warnMissingUriParamOnProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to get property '"
operator|+
name|name
operator|+
literal|"' on "
operator|+
name|endpoint
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|warnMissingUriParamOnProperty (String name)
specifier|protected
name|void
name|warnMissingUriParamOnProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using property "
operator|+
name|name
operator|+
literal|" on endpoint "
operator|+
name|getEndpointClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" which does not have a @UriParam annotation! "
operator|+
literal|"Please add the @UriParam annotation to the "
operator|+
name|name
operator|+
literal|" field"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setParameter (String name, T value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|setParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|value
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
name|ParameterConfiguration
name|config
init|=
name|getPropertyConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// lets try set the property regardless of if this maps to a valid property name
comment|// then if the injection fails we will get a valid error otherwise
comment|// lets raise a warning afterwards that we should update the metadata on the endpoint class
try|try
block|{
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|endpoint
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to set property '"
operator|+
name|name
operator|+
literal|"' on "
operator|+
name|endpoint
operator|+
literal|" to value "
operator|+
name|value
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|warnMissingUriParamOnProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toUriString (UriFormat format)
specifier|public
name|String
name|toUriString
parameter_list|(
name|UriFormat
name|format
parameter_list|)
block|{
comment|// TODO
return|return
literal|null
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|getEndpointClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|getEndpointClass
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getClass
argument_list|()
return|;
block|}
comment|/**      * Returns the property configuration for the given property name or null if it does not exist      */
DECL|method|getPropertyConfiguration (String name)
specifier|public
name|ParameterConfiguration
name|getPropertyConfiguration
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getPropertyConfigurationMap
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the sorted map of all the property names to their {@link ParameterConfiguration} objects      */
DECL|method|getPropertyConfigurationMap ()
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|getPropertyConfigurationMap
parameter_list|()
block|{
if|if
condition|(
name|propertyMap
operator|==
literal|null
condition|)
block|{
name|propertyMap
operator|=
name|UriEndpointComponent
operator|.
name|createParameterConfigurationMap
argument_list|(
name|getEndpointClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|propertyMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

