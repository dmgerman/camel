begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToCreateConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|IsSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * A {@link ConsumerCache} which is always empty and does not cache any {@link org.apache.camel.Consumer}s.  */
end_comment

begin_class
DECL|class|EmptyConsumerCache
specifier|public
class|class
name|EmptyConsumerCache
extends|extends
name|ConsumerCache
block|{
DECL|method|EmptyConsumerCache (Object source, CamelContext camelContext)
specifier|public
name|EmptyConsumerCache
parameter_list|(
name|Object
name|source
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|,
name|camelContext
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acquirePollingConsumer (Endpoint endpoint)
specifier|public
name|PollingConsumer
name|acquirePollingConsumer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
comment|// always create a new consumer
name|PollingConsumer
name|answer
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|endpoint
operator|.
name|createPollingConsumer
argument_list|()
expr_stmt|;
name|boolean
name|singleton
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|answer
operator|instanceof
name|IsSingleton
condition|)
block|{
name|singleton
operator|=
operator|(
operator|(
name|IsSingleton
operator|)
name|answer
operator|)
operator|.
name|isSingleton
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|isStartingRoutes
argument_list|()
operator|&&
name|singleton
condition|)
block|{
comment|// if we are currently starting a route, then add as service and enlist in JMX
comment|// - but do not enlist non-singletons in JMX
comment|// - note addService will also start the service
name|getCamelContext
argument_list|()
operator|.
name|addService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// must then start service so producer is ready to be used
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToCreateConsumerException
argument_list|(
name|endpoint
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|releasePollingConsumer (Endpoint endpoint, PollingConsumer pollingConsumer)
specifier|public
name|void
name|releasePollingConsumer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|PollingConsumer
name|pollingConsumer
parameter_list|)
block|{
comment|// stop and shutdown the consumer as its not cache or reused
try|try
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownService
argument_list|(
name|pollingConsumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"EmptyConsumerCache for source: "
operator|+
name|getSource
argument_list|()
return|;
block|}
block|}
end_class

end_unit

