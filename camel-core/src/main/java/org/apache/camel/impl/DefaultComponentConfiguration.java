begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_comment
comment|/**  * Default implementation for components which do not inherit from {@link UriEndpointComponent} and  * do not have Endpoint classes annotated with {@link org.apache.camel.spi.UriEndpoint}  */
end_comment

begin_class
DECL|class|DefaultComponentConfiguration
specifier|public
class|class
name|DefaultComponentConfiguration
extends|extends
name|ComponentConfigurationSupport
block|{
DECL|method|DefaultComponentConfiguration (Component component)
specifier|public
name|DefaultComponentConfiguration
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpointParameter (Endpoint endpoint, String name)
specifier|public
name|Object
name|getEndpointParameter
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
try|try
block|{
return|return
name|IntrospectionSupport
operator|.
name|getProperty
argument_list|(
name|endpoint
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to get property "
operator|+
name|name
operator|+
literal|" on endpoint "
operator|+
name|endpoint
operator|+
literal|" due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|setEndpointParameter (Endpoint endpoint, String name, Object value)
specifier|public
name|void
name|setEndpointParameter
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
name|boolean
name|answer
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|endpoint
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to set property "
operator|+
name|name
operator|+
literal|" with value "
operator|+
name|value
operator|+
literal|" on endpoint "
operator|+
name|endpoint
operator|+
literal|" due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|answer
condition|)
block|{
throw|throw
operator|new
name|InvalidPropertyException
argument_list|(
name|endpoint
argument_list|,
name|name
argument_list|)
throw|;
block|}
block|}
comment|/**      * Since we have no parameter metadata lets just return parameter configurations for each parameter we      * have right now.      *      * @return configurations for each current property value      */
annotation|@
name|Override
DECL|method|getParameterConfigurationMap ()
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|getParameterConfigurationMap
parameter_list|()
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|answer
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|getParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
operator|.
name|getClass
argument_list|()
else|:
name|String
operator|.
name|class
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ParameterConfiguration
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

