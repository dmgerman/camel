begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceHealth
import|;
end_import

begin_class
DECL|class|DefaultServiceDefinition
specifier|public
class|class
name|DefaultServiceDefinition
implements|implements
name|ServiceDefinition
block|{
DECL|field|DEFAULT_SERVICE_HEALTH
specifier|private
specifier|static
specifier|final
name|ServiceHealth
name|DEFAULT_SERVICE_HEALTH
init|=
operator|new
name|DefaultServiceHealth
argument_list|()
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|meta
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
decl_stmt|;
DECL|field|health
specifier|private
specifier|final
name|ServiceHealth
name|health
decl_stmt|;
DECL|method|DefaultServiceDefinition (String name, String host, int port)
specifier|public
name|DefaultServiceDefinition
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|meta
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|health
operator|=
name|DEFAULT_SERVICE_HEALTH
expr_stmt|;
block|}
DECL|method|DefaultServiceDefinition (String name, String host, int port, ServiceHealth health)
specifier|public
name|DefaultServiceDefinition
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|ServiceHealth
name|health
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|meta
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|health
operator|=
name|health
expr_stmt|;
block|}
DECL|method|DefaultServiceDefinition (String name, String host, int port, Map<String, String> meta)
specifier|public
name|DefaultServiceDefinition
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|meta
operator|=
name|meta
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|meta
argument_list|)
argument_list|)
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|health
operator|=
name|DEFAULT_SERVICE_HEALTH
expr_stmt|;
block|}
DECL|method|DefaultServiceDefinition (String name, String host, int port, Map<String, String> meta, ServiceHealth health)
specifier|public
name|DefaultServiceDefinition
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
parameter_list|,
name|ServiceHealth
name|health
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|meta
operator|=
name|meta
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|meta
argument_list|)
argument_list|)
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|health
operator|=
name|health
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
annotation|@
name|Override
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
annotation|@
name|Override
DECL|method|getHealth ()
specifier|public
name|ServiceHealth
name|getHealth
parameter_list|()
block|{
return|return
name|health
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadata ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|this
operator|.
name|meta
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DefaultServiceCallService["
operator|+
name|name
operator|+
literal|"@"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DefaultServiceDefinition
name|that
init|=
operator|(
name|DefaultServiceDefinition
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|port
operator|!=
name|that
operator|.
name|port
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|?
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
else|:
name|that
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|host
operator|!=
literal|null
condition|?
name|host
operator|.
name|equals
argument_list|(
name|that
operator|.
name|host
argument_list|)
else|:
name|that
operator|.
name|host
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|name
operator|!=
literal|null
condition|?
name|name
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|host
operator|!=
literal|null
condition|?
name|host
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|port
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

