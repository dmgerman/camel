begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A simple processor which just sends the message exchange to the default endpoint of the {@link ProducerTemplate}  *  * @version $Revision$  * @deprecated not used will be removed in Camel 2.2  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|ProducerTemplateProcessor
specifier|public
class|class
name|ProducerTemplateProcessor
implements|implements
name|Processor
block|{
DECL|field|producerTemplate
specifier|private
specifier|final
name|ProducerTemplate
name|producerTemplate
decl_stmt|;
DECL|method|ProducerTemplateProcessor (ProducerTemplate producerTemplate)
specifier|public
name|ProducerTemplateProcessor
parameter_list|(
name|ProducerTemplate
name|producerTemplate
parameter_list|)
block|{
name|this
operator|.
name|producerTemplate
operator|=
name|producerTemplate
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|producerTemplate
argument_list|,
literal|"producerTemplate"
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|producerTemplate
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ProducerTemplateProcessor["
operator|+
name|producerTemplate
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

