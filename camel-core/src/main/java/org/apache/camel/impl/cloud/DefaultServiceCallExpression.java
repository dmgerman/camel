begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceCallExpressionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Support class for custom implementations of {@link ServiceCallDefinition ServiceCall EIP} components.  *<p/>  * Below are some examples how to call a service and what Camel endpoint URI is constructed based on the input:  *<pre>  serviceCall("myService") -> http4://hostname:port  serviceCall("myService/foo") -> http4://hostname:port/foo  serviceCall("http4:myService/foo") -> http4:hostname:port/foo  serviceCall("myService", "http4:myService.host:myService.port/foo") -> http4:hostname:port/foo  serviceCall("myService", "netty4:tcp:myService?connectTimeout=1000") -> netty:tcp:hostname:port?connectTimeout=1000  *</pre>  */
end_comment

begin_class
DECL|class|DefaultServiceCallExpression
specifier|public
class|class
name|DefaultServiceCallExpression
extends|extends
name|ServiceCallExpressionSupport
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultServiceCallExpression
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DefaultServiceCallExpression ()
specifier|public
name|DefaultServiceCallExpression
parameter_list|()
block|{     }
DECL|method|DefaultServiceCallExpression (String hostHeader, String portHeader)
specifier|public
name|DefaultServiceCallExpression
parameter_list|(
name|String
name|hostHeader
parameter_list|,
name|String
name|portHeader
parameter_list|)
block|{
name|super
argument_list|(
name|hostHeader
argument_list|,
name|portHeader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildCamelEndpointUri (String name, String host, Integer port, String uri, String contextPath, String scheme)
specifier|protected
name|String
name|buildCamelEndpointUri
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|Integer
name|port
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
comment|// build basic uri if none provided
name|String
name|answer
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
comment|// use http/https by default if no scheme or port have been configured
if|if
condition|(
name|port
operator|==
literal|null
condition|)
block|{
name|scheme
operator|=
literal|"http4"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|port
operator|==
literal|443
condition|)
block|{
name|scheme
operator|=
literal|"https4"
expr_stmt|;
block|}
else|else
block|{
name|scheme
operator|=
literal|"http4"
expr_stmt|;
block|}
block|}
name|answer
operator|=
name|scheme
operator|+
literal|"://"
operator|+
name|host
expr_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|answer
operator|+
literal|":"
operator|+
name|port
expr_stmt|;
block|}
if|if
condition|(
name|contextPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|contextPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|contextPath
operator|=
literal|"/"
operator|+
name|contextPath
expr_stmt|;
block|}
name|answer
operator|+=
name|contextPath
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we have existing uri, then replace the serviceName with ip:port
if|if
condition|(
name|answer
operator|.
name|contains
argument_list|(
name|name
operator|+
literal|".host"
argument_list|)
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
name|name
operator|+
literal|"\\.host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|.
name|contains
argument_list|(
name|name
operator|+
literal|".port"
argument_list|)
operator|&&
name|port
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
name|name
operator|+
literal|"\\.port"
argument_list|,
literal|""
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|&&
name|port
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
name|name
argument_list|,
name|host
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|&&
name|port
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
name|name
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Camel endpoint uri: {} for calling service: {} on server {}:{}"
argument_list|,
name|answer
argument_list|,
name|name
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

