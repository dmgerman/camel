begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.saga
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|saga
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaStep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A in-memory implementation of a saga coordinator.  */
end_comment

begin_class
DECL|class|InMemorySagaCoordinator
specifier|public
class|class
name|InMemorySagaCoordinator
implements|implements
name|CamelSagaCoordinator
block|{
DECL|enum|Status
specifier|private
enum|enum
name|Status
block|{
DECL|enumConstant|RUNNING
name|RUNNING
block|,
DECL|enumConstant|COMPENSATING
name|COMPENSATING
block|,
DECL|enumConstant|COMPENSATED
name|COMPENSATED
block|,
DECL|enumConstant|COMPLETING
name|COMPLETING
block|,
DECL|enumConstant|COMPLETED
name|COMPLETED
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemorySagaCoordinator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|sagaService
specifier|private
name|InMemorySagaService
name|sagaService
decl_stmt|;
DECL|field|sagaId
specifier|private
name|String
name|sagaId
decl_stmt|;
DECL|field|steps
specifier|private
name|List
argument_list|<
name|CamelSagaStep
argument_list|>
name|steps
decl_stmt|;
DECL|field|optionValues
specifier|private
name|Map
argument_list|<
name|CamelSagaStep
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|optionValues
decl_stmt|;
DECL|field|currentStatus
specifier|private
name|AtomicReference
argument_list|<
name|Status
argument_list|>
name|currentStatus
decl_stmt|;
DECL|method|InMemorySagaCoordinator (CamelContext camelContext, InMemorySagaService sagaService, String sagaId)
specifier|public
name|InMemorySagaCoordinator
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|InMemorySagaService
name|sagaService
parameter_list|,
name|String
name|sagaId
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|this
operator|.
name|sagaService
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|sagaService
argument_list|,
literal|"sagaService"
argument_list|)
expr_stmt|;
name|this
operator|.
name|sagaId
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|sagaId
argument_list|,
literal|"sagaId"
argument_list|)
expr_stmt|;
name|this
operator|.
name|steps
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|optionValues
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentStatus
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|Status
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|sagaId
return|;
block|}
annotation|@
name|Override
DECL|method|beginStep (Exchange exchange, CamelSagaStep step)
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|beginStep
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|CamelSagaStep
name|step
parameter_list|)
block|{
name|this
operator|.
name|steps
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|step
operator|.
name|getOptions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|optionValues
operator|.
name|putIfAbsent
argument_list|(
name|step
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|optionValues
operator|.
name|get
argument_list|(
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|option
range|:
name|step
operator|.
name|getOptions
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Expression
name|expression
init|=
name|step
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
try|try
block|{
name|values
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot evaluate saga option '"
operator|+
name|option
operator|+
literal|"'"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|step
operator|.
name|getTimeoutInMilliseconds
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|sagaService
operator|.
name|getExecutorService
argument_list|()
operator|.
name|schedule
argument_list|(
parameter_list|()
lambda|->
block|{
name|boolean
name|doAction
init|=
name|currentStatus
operator|.
name|compareAndSet
argument_list|(
name|Status
operator|.
name|RUNNING
argument_list|,
name|Status
operator|.
name|COMPENSATING
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAction
condition|)
block|{
name|doCompensate
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|step
operator|.
name|getTimeoutInMilliseconds
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compensate ()
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compensate
parameter_list|()
block|{
name|boolean
name|doAction
init|=
name|currentStatus
operator|.
name|compareAndSet
argument_list|(
name|Status
operator|.
name|RUNNING
argument_list|,
name|Status
operator|.
name|COMPENSATING
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAction
condition|)
block|{
name|doCompensate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Status
name|status
init|=
name|currentStatus
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|Status
operator|.
name|COMPENSATING
operator|&&
name|status
operator|!=
name|Status
operator|.
name|COMPENSATED
condition|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|res
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|res
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot compensate: status is "
operator|+
name|status
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|complete ()
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|complete
parameter_list|()
block|{
name|boolean
name|doAction
init|=
name|currentStatus
operator|.
name|compareAndSet
argument_list|(
name|Status
operator|.
name|RUNNING
argument_list|,
name|Status
operator|.
name|COMPLETING
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAction
condition|)
block|{
name|doComplete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Status
name|status
init|=
name|currentStatus
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|Status
operator|.
name|COMPLETING
operator|&&
name|status
operator|!=
name|Status
operator|.
name|COMPLETED
condition|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|res
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|res
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot complete: status is "
operator|+
name|status
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|doCompensate ()
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|doCompensate
parameter_list|()
block|{
return|return
name|doFinalize
argument_list|(
name|CamelSagaStep
operator|::
name|getCompensation
argument_list|,
literal|"compensation"
argument_list|)
operator|.
name|thenApply
argument_list|(
name|res
lambda|->
block|{
name|currentStatus
operator|.
name|set
argument_list|(
name|Status
operator|.
name|COMPENSATED
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|doComplete ()
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|doComplete
parameter_list|()
block|{
return|return
name|doFinalize
argument_list|(
name|CamelSagaStep
operator|::
name|getCompletion
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|thenApply
argument_list|(
name|res
lambda|->
block|{
name|currentStatus
operator|.
name|set
argument_list|(
name|Status
operator|.
name|COMPLETED
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|doFinalize (Function<CamelSagaStep, Optional<Endpoint>> endpointExtractor, String description)
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|doFinalize
parameter_list|(
name|Function
argument_list|<
name|CamelSagaStep
argument_list|,
name|Optional
argument_list|<
name|Endpoint
argument_list|>
argument_list|>
name|endpointExtractor
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|result
init|=
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|CamelSagaStep
name|step
range|:
name|reversed
argument_list|(
name|steps
argument_list|)
control|)
block|{
name|Optional
argument_list|<
name|Endpoint
argument_list|>
name|endpoint
init|=
name|endpointExtractor
operator|.
name|apply
argument_list|(
name|step
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|thenCompose
argument_list|(
name|prevResult
lambda|->
name|doFinalize
argument_list|(
name|endpoint
operator|.
name|get
argument_list|()
argument_list|,
name|step
argument_list|,
literal|0
argument_list|,
name|description
argument_list|)
operator|.
name|thenApply
argument_list|(
name|res
lambda|->
name|prevResult
operator|&&
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|done
parameter_list|,
name|ex
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot finalize "
operator|+
name|description
operator|+
literal|" the saga"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to finalize "
operator|+
name|description
operator|+
literal|" for all required steps of the saga "
operator|+
name|sagaId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|doFinalize (Endpoint endpoint, CamelSagaStep step, int doneAttempts, String description)
specifier|private
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|doFinalize
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|CamelSagaStep
name|step
parameter_list|,
name|int
name|doneAttempts
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|endpoint
argument_list|,
name|step
argument_list|)
decl_stmt|;
return|return
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
block|{
name|Exchange
name|res
init|=
name|camelContext
operator|.
name|createFluentProducerTemplate
argument_list|()
operator|.
name|to
argument_list|(
name|endpoint
argument_list|)
operator|.
name|withExchange
argument_list|(
name|exchange
argument_list|)
operator|.
name|send
argument_list|()
decl_stmt|;
name|Exception
name|ex
init|=
name|res
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|res
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
argument_list|,
name|sagaService
operator|.
name|getExecutorService
argument_list|()
argument_list|)
operator|.
name|exceptionally
argument_list|(
name|ex
lambda|->
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception thrown during "
operator|+
name|description
operator|+
literal|" at "
operator|+
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|+
literal|". Attempt "
operator|+
operator|(
name|doneAttempts
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|sagaService
operator|.
name|getMaxRetryAttempts
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|executed
lambda|->
block|{
name|int
name|currentAttempt
init|=
name|doneAttempts
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|executed
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|currentAttempt
operator|>=
name|sagaService
operator|.
name|getMaxRetryAttempts
argument_list|()
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|false
argument_list|)
return|;
block|}
else|else
block|{
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|sagaService
operator|.
name|getExecutorService
argument_list|()
operator|.
name|schedule
argument_list|(
parameter_list|()
lambda|->
block|{
name|doFinalize
argument_list|(
name|endpoint
argument_list|,
name|step
argument_list|,
name|currentAttempt
argument_list|,
name|description
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|res
parameter_list|,
name|ex
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|sagaService
operator|.
name|getRetryDelayInMilliseconds
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|createExchange (Endpoint endpoint, CamelSagaStep step)
specifier|private
name|Exchange
name|createExchange
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|CamelSagaStep
name|step
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|optionValues
operator|.
name|get
argument_list|(
name|step
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exchange
return|;
block|}
DECL|method|reversed (List<T> list)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|reversed
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|reversed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|reversed
argument_list|)
expr_stmt|;
return|return
name|reversed
return|;
block|}
block|}
end_class

end_unit

