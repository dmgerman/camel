begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * {@link org.apache.camel.spi.RoutePolicy} which executes for a duration and then triggers an action.  *<p/>  * This can be used to stop the route after it has processed a number of messages, or has been running for N seconds.  */
end_comment

begin_class
DECL|class|DurationRoutePolicy
specifier|public
class|class
name|DurationRoutePolicy
extends|extends
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
implements|implements
name|CamelContextAware
block|{
DECL|enum|Action
enum|enum
name|Action
block|{
DECL|enumConstant|STOP_CAMEL_CONTEXT
DECL|enumConstant|STOP_ROUTE
DECL|enumConstant|SUSPEND_ROUTE
DECL|enumConstant|SUSPEND_ALL_ROUTES
name|STOP_CAMEL_CONTEXT
block|,
name|STOP_ROUTE
block|,
name|SUSPEND_ROUTE
block|,
name|SUSPEND_ALL_ROUTES
block|}
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|routeId
specifier|private
name|String
name|routeId
decl_stmt|;
DECL|field|executorService
specifier|private
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|task
specifier|private
specifier|volatile
name|ScheduledFuture
name|task
decl_stmt|;
DECL|field|doneMessages
specifier|private
specifier|volatile
name|int
name|doneMessages
decl_stmt|;
DECL|field|actionDone
specifier|private
name|AtomicBoolean
name|actionDone
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|action
specifier|private
name|Action
name|action
init|=
name|Action
operator|.
name|STOP_ROUTE
decl_stmt|;
DECL|field|maxMessages
specifier|private
name|int
name|maxMessages
decl_stmt|;
DECL|field|maxSeconds
specifier|private
name|int
name|maxSeconds
decl_stmt|;
DECL|method|DurationRoutePolicy ()
specifier|public
name|DurationRoutePolicy
parameter_list|()
block|{     }
DECL|method|DurationRoutePolicy (CamelContext camelContext, String routeId)
specifier|public
name|DurationRoutePolicy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|routeId
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|routeId
operator|=
name|routeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getMaxMessages ()
specifier|public
name|int
name|getMaxMessages
parameter_list|()
block|{
return|return
name|maxMessages
return|;
block|}
comment|/**      * Maximum number of messages to process before the action is triggered      */
DECL|method|setMaxMessages (int maxMessages)
specifier|public
name|void
name|setMaxMessages
parameter_list|(
name|int
name|maxMessages
parameter_list|)
block|{
name|this
operator|.
name|maxMessages
operator|=
name|maxMessages
expr_stmt|;
block|}
DECL|method|getMaxSeconds ()
specifier|public
name|int
name|getMaxSeconds
parameter_list|()
block|{
return|return
name|maxSeconds
return|;
block|}
comment|/**      * Maximum seconds Camel is running before the action is triggered      */
DECL|method|setMaxSeconds (int maxSeconds)
specifier|public
name|void
name|setMaxSeconds
parameter_list|(
name|int
name|maxSeconds
parameter_list|)
block|{
name|this
operator|.
name|maxSeconds
operator|=
name|maxSeconds
expr_stmt|;
block|}
DECL|method|getAction ()
specifier|public
name|Action
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * What action to perform when maximum is triggered.      */
DECL|method|setAction (Action action)
specifier|public
name|void
name|setAction
parameter_list|(
name|Action
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInit (Route route)
specifier|public
name|void
name|onInit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|super
operator|.
name|onInit
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxMessages
operator|==
literal|0
operator|&&
name|maxSeconds
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The options maxMessages or maxSeconds must be configured"
argument_list|)
throw|;
block|}
if|if
condition|(
name|routeId
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|routeId
operator|=
name|route
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|executorService
operator|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"DurationRoutePolicy["
operator|+
name|routeId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxSeconds
operator|>
literal|0
condition|)
block|{
name|task
operator|=
name|performMaxDurationAction
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onExchangeDone (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeDone
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|doneMessages
operator|++
expr_stmt|;
if|if
condition|(
name|maxMessages
operator|>
literal|0
operator|&&
name|doneMessages
operator|>=
name|maxMessages
condition|)
block|{
if|if
condition|(
name|actionDone
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|performMaxMessagesAction
argument_list|()
expr_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
operator|!
name|task
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|task
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
operator|!
name|task
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|task
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|performMaxMessagesAction ()
specifier|protected
name|void
name|performMaxMessagesAction
parameter_list|()
block|{
name|executorService
operator|.
name|submit
argument_list|(
name|createTask
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|performMaxDurationAction ()
specifier|protected
name|ScheduledFuture
name|performMaxDurationAction
parameter_list|()
block|{
return|return
name|executorService
operator|.
name|schedule
argument_list|(
name|createTask
argument_list|(
literal|false
argument_list|)
argument_list|,
name|maxSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|createTask (boolean maxMessagesHit)
specifier|private
name|Runnable
name|createTask
parameter_list|(
name|boolean
name|maxMessagesHit
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
block|{
try|try
block|{
name|String
name|tail
decl_stmt|;
if|if
condition|(
name|maxMessagesHit
condition|)
block|{
name|tail
operator|=
literal|" due max messages "
operator|+
name|getMaxMessages
argument_list|()
operator|+
literal|" processed"
expr_stmt|;
block|}
else|else
block|{
name|tail
operator|=
literal|" due max seconds "
operator|+
name|getMaxSeconds
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|==
name|Action
operator|.
name|STOP_CAMEL_CONTEXT
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping CamelContext {}"
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|Action
operator|.
name|STOP_ROUTE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping route: {}{}"
argument_list|,
name|routeId
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|stopRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|Action
operator|.
name|SUSPEND_ROUTE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Suspending route: {}{}"
argument_list|,
name|routeId
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|suspendRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|Action
operator|.
name|SUSPEND_ALL_ROUTES
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Suspending all routes {}"
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error performing action: {}"
argument_list|,
name|action
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

