begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|AnnotationTypeConverterLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|TypeConverterLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|osgi
operator|.
name|tracker
operator|.
name|BundleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|osgi
operator|.
name|tracker
operator|.
name|BundleTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|scan
operator|.
name|AnnotatedWithPackageScanFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ComponentResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_class
DECL|class|Activator
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
implements|,
name|BundleTrackerCustomizer
block|{
DECL|field|META_INF_COMPONENT
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_COMPONENT
init|=
literal|"META-INF/services/org/apache/camel/component/"
decl_stmt|;
DECL|field|META_INF_LANGUAGE
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_LANGUAGE
init|=
literal|"META-INF/services/org/apache/camel/language/"
decl_stmt|;
DECL|field|META_INF_LANGUAGE_RESOLVER
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_LANGUAGE_RESOLVER
init|=
literal|"META-INF/services/org/apache/camel/language/resolver/"
decl_stmt|;
DECL|field|META_INF_DATAFORMAT
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_DATAFORMAT
init|=
literal|"META-INF/services/org/apache/camel/dataformat/"
decl_stmt|;
DECL|field|META_INF_TYPE_CONVERTER
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_TYPE_CONVERTER
init|=
literal|"META-INF/services/org/apache/camel/TypeConverter"
decl_stmt|;
DECL|field|META_INF_FALLBACK_TYPE_CONVERTER
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_FALLBACK_TYPE_CONVERTER
init|=
literal|"META-INF/services/org/apache/camel/FallbackTypeConverter"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tracker
specifier|private
name|BundleTracker
name|tracker
decl_stmt|;
DECL|field|resolvers
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|BaseService
argument_list|>
argument_list|>
name|resolvers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|BaseService
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|start (BundleContext context)
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator starting"
argument_list|)
expr_stmt|;
name|tracker
operator|=
operator|new
name|BundleTracker
argument_list|(
name|context
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator started"
argument_list|)
expr_stmt|;
block|}
DECL|method|stop (BundleContext context)
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator stopping"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator stopped"
argument_list|)
expr_stmt|;
block|}
DECL|method|addingBundle (Bundle bundle, BundleEvent event)
specifier|public
name|Object
name|addingBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bundle started: "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BaseService
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|BaseService
argument_list|>
argument_list|()
decl_stmt|;
name|registerComponents
argument_list|(
name|bundle
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|registerLanguages
argument_list|(
name|bundle
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|registerDataFormats
argument_list|(
name|bundle
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|registerTypeConverterLoader
argument_list|(
name|bundle
argument_list|,
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseService
name|service
range|:
name|r
control|)
block|{
name|service
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
name|resolvers
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
DECL|method|modifiedBundle (Bundle bundle, BundleEvent event, Object object)
specifier|public
name|void
name|modifiedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|,
name|Object
name|object
parameter_list|)
block|{     }
DECL|method|removedBundle (Bundle bundle, BundleEvent event, Object object)
specifier|public
name|void
name|removedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bundle stopped: "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BaseService
argument_list|>
name|r
init|=
name|resolvers
operator|.
name|remove
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BaseService
name|service
range|:
name|r
control|)
block|{
name|service
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|registerComponents (Bundle bundle, List<BaseService> resolvers)
specifier|protected
name|void
name|registerComponents
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|List
argument_list|<
name|BaseService
argument_list|>
name|resolvers
parameter_list|)
block|{
if|if
condition|(
name|checkCompat
argument_list|(
name|bundle
argument_list|,
name|Component
operator|.
name|class
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|components
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|bundle
operator|.
name|getEntryPaths
argument_list|(
name|META_INF_COMPONENT
argument_list|)
init|;
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|components
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|BundleComponentResolver
argument_list|(
name|bundle
argument_list|,
name|components
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|registerLanguages (Bundle bundle, List<BaseService> resolvers)
specifier|protected
name|void
name|registerLanguages
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|List
argument_list|<
name|BaseService
argument_list|>
name|resolvers
parameter_list|)
block|{
if|if
condition|(
name|checkCompat
argument_list|(
name|bundle
argument_list|,
name|Language
operator|.
name|class
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|languages
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|bundle
operator|.
name|getEntryPaths
argument_list|(
name|META_INF_LANGUAGE
argument_list|)
init|;
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|languages
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|languages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|BundleLanguageResolver
argument_list|(
name|bundle
argument_list|,
name|languages
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|bundle
operator|.
name|getEntryPaths
argument_list|(
name|META_INF_LANGUAGE_RESOLVER
argument_list|)
init|;
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|BundleMetaLanguageResolver
argument_list|(
name|bundle
argument_list|,
name|name
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|registerDataFormats (Bundle bundle, List<BaseService> resolvers)
specifier|protected
name|void
name|registerDataFormats
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|List
argument_list|<
name|BaseService
argument_list|>
name|resolvers
parameter_list|)
block|{
if|if
condition|(
name|checkCompat
argument_list|(
name|bundle
argument_list|,
name|DataFormat
operator|.
name|class
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dataformats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|bundle
operator|.
name|getEntryPaths
argument_list|(
name|META_INF_DATAFORMAT
argument_list|)
init|;
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|dataformats
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dataformats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|BundleDataFormatResolver
argument_list|(
name|bundle
argument_list|,
name|dataformats
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|registerTypeConverterLoader (Bundle bundle, List<BaseService> resolvers)
specifier|protected
name|void
name|registerTypeConverterLoader
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|List
argument_list|<
name|BaseService
argument_list|>
name|resolvers
parameter_list|)
block|{
if|if
condition|(
name|checkCompat
argument_list|(
name|bundle
argument_list|,
name|TypeConverter
operator|.
name|class
argument_list|)
condition|)
block|{
name|URL
name|url1
init|=
name|bundle
operator|.
name|getEntry
argument_list|(
name|META_INF_TYPE_CONVERTER
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
name|bundle
operator|.
name|getEntry
argument_list|(
name|META_INF_FALLBACK_TYPE_CONVERTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|url1
operator|!=
literal|null
operator|||
name|url2
operator|!=
literal|null
condition|)
block|{
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|BundleTypeConverterLoader
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|BundleComponentResolver
specifier|protected
specifier|static
class|class
name|BundleComponentResolver
extends|extends
name|BaseResolver
argument_list|<
name|Component
argument_list|>
implements|implements
name|ComponentResolver
block|{
DECL|field|components
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|components
decl_stmt|;
DECL|method|BundleComponentResolver (Bundle bundle, Map<String, String> components)
specifier|public
name|BundleComponentResolver
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|components
parameter_list|)
block|{
name|super
argument_list|(
name|bundle
argument_list|,
name|Component
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|components
operator|=
name|components
expr_stmt|;
block|}
DECL|method|resolveComponent (String name, CamelContext context)
specifier|public
name|Component
name|resolveComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createInstance
argument_list|(
name|name
argument_list|,
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|register ()
specifier|public
name|void
name|register
parameter_list|()
block|{
name|doRegister
argument_list|(
name|ComponentResolver
operator|.
name|class
argument_list|,
literal|"component"
argument_list|,
name|components
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BundleLanguageResolver
specifier|protected
specifier|static
class|class
name|BundleLanguageResolver
extends|extends
name|BaseResolver
argument_list|<
name|Language
argument_list|>
implements|implements
name|LanguageResolver
block|{
DECL|field|languages
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|languages
decl_stmt|;
DECL|method|BundleLanguageResolver (Bundle bundle, Map<String, String> languages)
specifier|public
name|BundleLanguageResolver
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|languages
parameter_list|)
block|{
name|super
argument_list|(
name|bundle
argument_list|,
name|Language
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|languages
operator|=
name|languages
expr_stmt|;
block|}
DECL|method|resolveLanguage (String name, CamelContext context)
specifier|public
name|Language
name|resolveLanguage
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
return|return
name|createInstance
argument_list|(
name|name
argument_list|,
name|languages
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|register ()
specifier|public
name|void
name|register
parameter_list|()
block|{
name|doRegister
argument_list|(
name|LanguageResolver
operator|.
name|class
argument_list|,
literal|"language"
argument_list|,
name|languages
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BundleMetaLanguageResolver
specifier|protected
specifier|static
class|class
name|BundleMetaLanguageResolver
extends|extends
name|BaseResolver
argument_list|<
name|LanguageResolver
argument_list|>
implements|implements
name|LanguageResolver
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|BundleMetaLanguageResolver (Bundle bundle, String name, String path)
specifier|public
name|BundleMetaLanguageResolver
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|bundle
argument_list|,
name|LanguageResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|resolveLanguage (String name, CamelContext context)
specifier|public
name|Language
name|resolveLanguage
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
name|LanguageResolver
name|resolver
init|=
name|createInstance
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|path
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|resolver
operator|.
name|resolveLanguage
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|register ()
specifier|public
name|void
name|register
parameter_list|()
block|{
name|doRegister
argument_list|(
name|LanguageResolver
operator|.
name|class
argument_list|,
literal|"resolver"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BundleDataFormatResolver
specifier|protected
specifier|static
class|class
name|BundleDataFormatResolver
extends|extends
name|BaseResolver
argument_list|<
name|DataFormat
argument_list|>
implements|implements
name|DataFormatResolver
block|{
DECL|field|dataformats
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dataformats
decl_stmt|;
DECL|method|BundleDataFormatResolver (Bundle bundle, Map<String, String> dataformats)
specifier|public
name|BundleDataFormatResolver
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dataformats
parameter_list|)
block|{
name|super
argument_list|(
name|bundle
argument_list|,
name|DataFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataformats
operator|=
name|dataformats
expr_stmt|;
block|}
DECL|method|resolveDataFormat (String name, CamelContext context)
specifier|public
name|DataFormat
name|resolveDataFormat
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
return|return
name|createInstance
argument_list|(
name|name
argument_list|,
name|dataformats
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|resolveDataFormatDefinition (String name, CamelContext context)
specifier|public
name|DataFormatDefinition
name|resolveDataFormatDefinition
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|register ()
specifier|public
name|void
name|register
parameter_list|()
block|{
name|doRegister
argument_list|(
name|DataFormatResolver
operator|.
name|class
argument_list|,
literal|"dataformat"
argument_list|,
name|dataformats
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BundleTypeConverterLoader
specifier|protected
specifier|static
class|class
name|BundleTypeConverterLoader
extends|extends
name|BaseResolver
argument_list|<
name|TypeConverter
argument_list|>
implements|implements
name|TypeConverterLoader
block|{
DECL|field|loader
specifier|private
specifier|final
name|AnnotationTypeConverterLoader
name|loader
init|=
operator|new
name|Loader
argument_list|()
decl_stmt|;
DECL|method|BundleTypeConverterLoader (Bundle bundle)
specifier|public
name|BundleTypeConverterLoader
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|super
argument_list|(
name|bundle
argument_list|,
name|TypeConverter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|load (TypeConverterRegistry registry)
specifier|public
name|void
name|load
parameter_list|(
name|TypeConverterRegistry
name|registry
parameter_list|)
throws|throws
name|Exception
block|{
name|loader
operator|.
name|load
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
DECL|method|register ()
specifier|public
name|void
name|register
parameter_list|()
block|{
name|doRegister
argument_list|(
name|TypeConverterLoader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|Loader
class|class
name|Loader
extends|extends
name|AnnotationTypeConverterLoader
block|{
DECL|method|Loader ()
name|Loader
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|load (TypeConverterRegistry registry)
specifier|public
name|void
name|load
parameter_list|(
name|TypeConverterRegistry
name|registry
parameter_list|)
throws|throws
name|Exception
block|{
name|PackageScanFilter
name|test
init|=
operator|new
name|AnnotatedWithPackageScanFilter
argument_list|(
name|Converter
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|packages
init|=
name|getConverterPackages
argument_list|(
name|bundle
operator|.
name|getEntry
argument_list|(
name|META_INF_TYPE_CONVERTER
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pkg
range|:
name|packages
control|)
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|e
init|=
name|bundle
operator|.
name|findEntries
argument_list|(
literal|"/"
operator|+
name|pkg
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|,
literal|"*.class"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|e
operator|.
name|nextElement
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|externalName
init|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|?
literal|1
else|:
literal|0
argument_list|,
name|path
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
name|clazz
init|=
name|bundle
operator|.
name|loadClass
argument_list|(
name|externalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|bundle
operator|.
name|loadClass
argument_list|(
name|externalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|classes
operator|.
name|size
argument_list|()
operator|+
literal|" @Converter classes to load"
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|type
range|:
name|classes
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading converter class: "
operator|+
name|ObjectHelper
operator|.
name|name
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loadConverterMethods
argument_list|(
name|registry
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|URL
name|fallbackUrl
init|=
name|bundle
operator|.
name|getEntry
argument_list|(
name|META_INF_FALLBACK_TYPE_CONVERTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackUrl
operator|!=
literal|null
condition|)
block|{
name|TypeConverter
name|tc
init|=
name|createInstance
argument_list|(
literal|"FallbackTypeConverter"
argument_list|,
name|fallbackUrl
argument_list|,
name|registry
operator|.
name|getInjector
argument_list|()
argument_list|)
decl_stmt|;
name|registry
operator|.
name|addFallbackTypeConverter
argument_list|(
name|tc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Clear info
name|visitedClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|visitedURLs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|BaseResolver
specifier|protected
specifier|static
specifier|abstract
class|class
name|BaseResolver
parameter_list|<
name|T
parameter_list|>
extends|extends
name|BaseService
block|{
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
DECL|method|BaseResolver (Bundle bundle, Class<T> type)
specifier|public
name|BaseResolver
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|createInstance (String name, String path, CamelContext context)
specifier|protected
name|T
name|createInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|URL
name|url
init|=
name|bundle
operator|.
name|getEntry
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The entry "
operator|+
name|name
operator|+
literal|"'s url is"
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|createInstance
argument_list|(
name|name
argument_list|,
name|url
argument_list|,
name|context
operator|.
name|getInjector
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createInstance (String name, URL url, Injector injector)
specifier|protected
name|T
name|createInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|URL
name|url
parameter_list|,
name|Injector
name|injector
parameter_list|)
block|{
try|try
block|{
name|Properties
name|properties
init|=
name|loadProperties
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|T
argument_list|>
name|type
init|=
name|bundle
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type is not a "
operator|+
name|this
operator|.
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" implementation. Found: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|injector
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI, no "
operator|+
name|this
operator|.
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" registered for scheme : "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|BaseService
specifier|protected
specifier|static
specifier|abstract
class|class
name|BaseService
block|{
DECL|field|bundle
specifier|protected
specifier|final
name|Bundle
name|bundle
decl_stmt|;
DECL|field|reg
specifier|private
name|ServiceRegistration
name|reg
decl_stmt|;
DECL|method|BaseService (Bundle bundle)
specifier|protected
name|BaseService
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
block|}
DECL|method|register ()
specifier|public
specifier|abstract
name|void
name|register
parameter_list|()
function_decl|;
DECL|method|doRegister (Class type, String key, Collection<String> value)
specifier|protected
name|void
name|doRegister
parameter_list|(
name|Class
name|type
parameter_list|,
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
name|doRegister
argument_list|(
name|type
argument_list|,
name|key
argument_list|,
name|value
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|value
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doRegister (Class type, String key, Object value)
specifier|protected
name|void
name|doRegister
parameter_list|(
name|Class
name|type
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|doRegister
argument_list|(
name|type
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
DECL|method|doRegister (Class type)
specifier|protected
name|void
name|doRegister
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|doRegister
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|doRegister (Class type, Dictionary props)
specifier|protected
name|void
name|doRegister
parameter_list|(
name|Class
name|type
parameter_list|,
name|Dictionary
name|props
parameter_list|)
block|{
name|reg
operator|=
name|bundle
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
DECL|method|unregister ()
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadProperties (URL url)
specifier|protected
specifier|static
name|Properties
name|loadProperties
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|BufferedInputStream
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
block|}
return|return
name|properties
return|;
block|}
DECL|method|checkCompat (Bundle bundle, Class clazz)
specifier|protected
specifier|static
name|boolean
name|checkCompat
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
comment|// Check bundle compatibility
try|try
block|{
if|if
condition|(
name|bundle
operator|.
name|loadClass
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|clazz
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getConverterPackages (URL resource)
specifier|protected
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getConverterPackages
parameter_list|(
name|URL
name|resource
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|packages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|resource
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|StringTokenizer
name|iter
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|iter
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packages
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// Do nothing here
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|packages
return|;
block|}
block|}
end_class

end_unit

