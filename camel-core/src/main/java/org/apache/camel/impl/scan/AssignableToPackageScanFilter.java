begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.scan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|scan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanFilter
import|;
end_import

begin_comment
comment|/**  * Package scan filter for testing if a given class is assignable to another class.  */
end_comment

begin_class
DECL|class|AssignableToPackageScanFilter
specifier|public
class|class
name|AssignableToPackageScanFilter
implements|implements
name|PackageScanFilter
block|{
DECL|field|parents
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|AssignableToPackageScanFilter ()
specifier|public
name|AssignableToPackageScanFilter
parameter_list|()
block|{     }
DECL|method|AssignableToPackageScanFilter (Class<?> parentType)
specifier|public
name|AssignableToPackageScanFilter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parentType
parameter_list|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|parentType
argument_list|)
expr_stmt|;
block|}
DECL|method|AssignableToPackageScanFilter (Set<Class<?>> parents)
specifier|public
name|AssignableToPackageScanFilter
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
parameter_list|)
block|{
name|this
operator|.
name|parents
operator|.
name|addAll
argument_list|(
name|parents
argument_list|)
expr_stmt|;
block|}
DECL|method|addParentType (Class<?> parentType)
specifier|public
name|void
name|addParentType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parentType
parameter_list|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|parentType
argument_list|)
expr_stmt|;
block|}
DECL|method|matches (Class<?> type)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|parents
operator|!=
literal|null
operator|&&
name|parents
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|parent
range|:
name|parents
control|)
block|{
if|if
condition|(
name|parent
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|parent
range|:
name|parents
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|parent
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|2
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
literal|"is assignable to any of "
operator|+
name|sb
return|;
block|}
block|}
end_class

end_unit

