begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_comment
comment|/**  * A useful base class which ensures that a service is only initialized once and  * provides some helper methods for enquiring of its status  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|ServiceSupport
specifier|public
specifier|abstract
class|class
name|ServiceSupport
implements|implements
name|Service
block|{
DECL|field|threadCounter
specifier|private
specifier|static
name|int
name|threadCounter
decl_stmt|;
DECL|field|started
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|stopping
specifier|private
name|AtomicBoolean
name|stopping
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|stopped
specifier|private
name|AtomicBoolean
name|stopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|childServices
specifier|private
name|Collection
name|childServices
decl_stmt|;
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|childServices
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|childServices
argument_list|)
expr_stmt|;
block|}
name|doStart
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
operator|&&
name|stopping
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|doStop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|childServices
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|childServices
argument_list|)
expr_stmt|;
block|}
name|stopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|started
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stopping
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return true if this service has been started      */
DECL|method|isStarted ()
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * @return true if this service is in the process of closing      */
DECL|method|isStopping ()
specifier|public
name|boolean
name|isStopping
parameter_list|()
block|{
return|return
name|stopping
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * @return true if this service is closed      */
DECL|method|isStopped ()
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|doStart ()
specifier|protected
specifier|abstract
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|doStop ()
specifier|protected
specifier|abstract
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Creates a new thread name with the given prefix      */
DECL|method|getThreadName (String prefix)
specifier|protected
name|String
name|getThreadName
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|prefix
operator|+
literal|" thread:"
operator|+
name|nextThreadCounter
argument_list|()
return|;
block|}
DECL|method|nextThreadCounter ()
specifier|protected
specifier|static
specifier|synchronized
name|int
name|nextThreadCounter
parameter_list|()
block|{
return|return
operator|++
name|threadCounter
return|;
block|}
DECL|method|addChildService (Object childService)
specifier|protected
name|void
name|addChildService
parameter_list|(
name|Object
name|childService
parameter_list|)
block|{
if|if
condition|(
name|childServices
operator|==
literal|null
condition|)
block|{
name|childServices
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|childServices
operator|.
name|add
argument_list|(
name|childService
argument_list|)
expr_stmt|;
block|}
DECL|method|removeChildService (Object childService)
specifier|protected
name|boolean
name|removeChildService
parameter_list|(
name|Object
name|childService
parameter_list|)
block|{
if|if
condition|(
name|childServices
operator|!=
literal|null
condition|)
block|{
return|return
name|childServices
operator|.
name|remove
argument_list|(
name|childService
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

