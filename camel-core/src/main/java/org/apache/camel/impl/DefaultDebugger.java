begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Breakpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Debugger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The default implementation of the {@link Debugger}.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultDebugger
specifier|public
class|class
name|DefaultDebugger
implements|implements
name|Debugger
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultDebugger
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|breakpoints
specifier|private
specifier|final
name|List
argument_list|<
name|BreakpointConditions
argument_list|>
name|breakpoints
init|=
operator|new
name|ArrayList
argument_list|<
name|BreakpointConditions
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Holder class for breakpoint and the associated conditions      */
DECL|class|BreakpointConditions
specifier|private
specifier|final
class|class
name|BreakpointConditions
block|{
DECL|field|breakpoint
specifier|private
name|Breakpoint
name|breakpoint
decl_stmt|;
DECL|field|conditions
specifier|private
name|List
argument_list|<
name|Condition
argument_list|>
name|conditions
decl_stmt|;
DECL|method|BreakpointConditions (Breakpoint breakpoint)
specifier|private
name|BreakpointConditions
parameter_list|(
name|Breakpoint
name|breakpoint
parameter_list|)
block|{
name|this
argument_list|(
name|breakpoint
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|BreakpointConditions (Breakpoint breakpoint, List<Condition> conditions)
specifier|private
name|BreakpointConditions
parameter_list|(
name|Breakpoint
name|breakpoint
parameter_list|,
name|List
argument_list|<
name|Condition
argument_list|>
name|conditions
parameter_list|)
block|{
name|this
operator|.
name|breakpoint
operator|=
name|breakpoint
expr_stmt|;
name|this
operator|.
name|conditions
operator|=
name|conditions
expr_stmt|;
block|}
DECL|method|getBreakpoint ()
specifier|public
name|Breakpoint
name|getBreakpoint
parameter_list|()
block|{
return|return
name|breakpoint
return|;
block|}
DECL|method|getConditions ()
specifier|public
name|List
argument_list|<
name|Condition
argument_list|>
name|getConditions
parameter_list|()
block|{
return|return
name|conditions
return|;
block|}
block|}
DECL|method|addBreakpoint (Breakpoint breakpoint)
specifier|public
name|void
name|addBreakpoint
parameter_list|(
name|Breakpoint
name|breakpoint
parameter_list|)
block|{
name|breakpoints
operator|.
name|add
argument_list|(
operator|new
name|BreakpointConditions
argument_list|(
name|breakpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addBreakpoint (Breakpoint breakpoint, Condition... conditions)
specifier|public
name|void
name|addBreakpoint
parameter_list|(
name|Breakpoint
name|breakpoint
parameter_list|,
name|Condition
modifier|...
name|conditions
parameter_list|)
block|{
name|breakpoints
operator|.
name|add
argument_list|(
operator|new
name|BreakpointConditions
argument_list|(
name|breakpoint
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|conditions
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeBreakpoint (Breakpoint breakpoint)
specifier|public
name|void
name|removeBreakpoint
parameter_list|(
name|Breakpoint
name|breakpoint
parameter_list|)
block|{
name|breakpoints
operator|.
name|remove
argument_list|(
name|breakpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|suspendAllBreakpoints ()
specifier|public
name|void
name|suspendAllBreakpoints
parameter_list|()
block|{
for|for
control|(
name|BreakpointConditions
name|breakpoint
range|:
name|breakpoints
control|)
block|{
name|breakpoint
operator|.
name|getBreakpoint
argument_list|()
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|activateAllBreakpoints ()
specifier|public
name|void
name|activateAllBreakpoints
parameter_list|()
block|{
for|for
control|(
name|BreakpointConditions
name|breakpoint
range|:
name|breakpoints
control|)
block|{
name|breakpoint
operator|.
name|getBreakpoint
argument_list|()
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBreakpoints ()
specifier|public
name|List
argument_list|<
name|Breakpoint
argument_list|>
name|getBreakpoints
parameter_list|()
block|{
name|List
argument_list|<
name|Breakpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Breakpoint
argument_list|>
argument_list|(
name|breakpoints
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BreakpointConditions
name|e
range|:
name|breakpoints
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|e
operator|.
name|getBreakpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|answer
argument_list|)
return|;
block|}
DECL|method|onExchange (Exchange exchange, Processor processor, ProcessorDefinition definition)
specifier|public
name|boolean
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
name|definition
parameter_list|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
comment|// does any of the breakpoints apply?
for|for
control|(
name|BreakpointConditions
name|breakpoint
range|:
name|breakpoints
control|)
block|{
comment|// breakpoint must be active
if|if
condition|(
name|Breakpoint
operator|.
name|State
operator|.
name|Active
operator|.
name|equals
argument_list|(
name|breakpoint
operator|.
name|getBreakpoint
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|matchConditions
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|,
name|definition
argument_list|,
name|breakpoint
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|onBreakpoint
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|,
name|definition
argument_list|,
name|breakpoint
operator|.
name|getBreakpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|match
return|;
block|}
DECL|method|matchConditions (Exchange exchange, Processor processor, ProcessorDefinition definition, BreakpointConditions breakpoint)
specifier|private
name|boolean
name|matchConditions
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
name|definition
parameter_list|,
name|BreakpointConditions
name|breakpoint
parameter_list|)
block|{
if|if
condition|(
name|breakpoint
operator|.
name|getConditions
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|breakpoint
operator|.
name|getConditions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Condition
name|condition
range|:
name|breakpoint
operator|.
name|getConditions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|condition
operator|.
name|match
argument_list|(
name|exchange
argument_list|,
name|definition
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|onBreakpoint (Exchange exchange, Processor processor, ProcessorDefinition definition, Breakpoint breakpoint)
specifier|protected
name|void
name|onBreakpoint
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ProcessorDefinition
name|definition
parameter_list|,
name|Breakpoint
name|breakpoint
parameter_list|)
block|{
name|breakpoint
operator|.
name|onExchange
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|breakpoints
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// noop
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DefaultDebugger"
return|;
block|}
block|}
end_class

end_unit

