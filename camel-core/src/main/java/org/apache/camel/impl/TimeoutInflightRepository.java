begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DefaultExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InflightRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TimeoutInflightRepository just checks the inflight exchanges and call the processTimeoutExchange() if the exchange processing is timeout.  * It could be useful if we want to find out which exchange is processed for a long time.   * Please use CamelContext.startService(repository) to start the service before set it to the CamelContext;   */
end_comment

begin_class
DECL|class|TimeoutInflightRepository
specifier|public
class|class
name|TimeoutInflightRepository
extends|extends
name|ServiceSupport
implements|implements
name|InflightRepository
block|{
comment|// TODO: rework this a bit and likely add support for this to the default inflight repository
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimeoutInflightRepository
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INFLIGHT_TIME_STAMP
specifier|private
specifier|static
specifier|final
name|String
name|INFLIGHT_TIME_STAMP
init|=
literal|"CamelInflightTimeStamp"
decl_stmt|;
DECL|field|TIMEOUT_EXCHANGE_PROCESSED
specifier|private
specifier|static
specifier|final
name|String
name|TIMEOUT_EXCHANGE_PROCESSED
init|=
literal|"CamelTimeoutExchangeProcessed"
decl_stmt|;
DECL|field|exchangeFormatter
specifier|private
name|ExchangeFormatter
name|exchangeFormatter
decl_stmt|;
DECL|field|inflightExchanges
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Exchange
argument_list|>
name|inflightExchanges
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Exchange
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|waitTime
specifier|private
name|long
name|waitTime
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
DECL|field|timeout
specifier|private
name|long
name|timeout
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
DECL|field|woker
specifier|private
name|InspectorWorker
name|woker
decl_stmt|;
DECL|field|exchangeWatchDog
specifier|private
name|Thread
name|exchangeWatchDog
decl_stmt|;
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|exchangeFormatter
operator|==
literal|null
condition|)
block|{
comment|// setup exchange formatter to be used for message history dump
name|DefaultExchangeFormatter
name|formatter
init|=
operator|new
name|DefaultExchangeFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|setShowExchangeId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setMultiline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowHeaders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setStyle
argument_list|(
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
operator|.
name|Fixed
argument_list|)
expr_stmt|;
name|this
operator|.
name|exchangeFormatter
operator|=
name|formatter
expr_stmt|;
block|}
if|if
condition|(
name|exchangeWatchDog
operator|==
literal|null
condition|)
block|{
name|woker
operator|=
operator|new
name|InspectorWorker
argument_list|(
name|waitTime
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|exchangeWatchDog
operator|=
operator|new
name|Thread
argument_list|(
name|woker
argument_list|)
expr_stmt|;
block|}
name|exchangeWatchDog
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|woker
operator|!=
literal|null
condition|)
block|{
name|woker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exchangeWatchDog
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|add (Exchange exchange)
specifier|public
name|void
name|add
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|INFLIGHT_TIME_STAMP
argument_list|,
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// setup the time stamp of the exchange
name|inflightExchanges
operator|.
name|put
argument_list|(
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (Exchange exchange)
specifier|public
name|void
name|remove
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|removeProperty
argument_list|(
name|INFLIGHT_TIME_STAMP
argument_list|)
expr_stmt|;
name|inflightExchanges
operator|.
name|remove
argument_list|(
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add (Exchange exchange, String routeId)
specifier|public
name|void
name|add
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|routeId
parameter_list|)
block|{
comment|// do nothing here
block|}
annotation|@
name|Override
DECL|method|remove (Exchange exchange, String routeId)
specifier|public
name|void
name|remove
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|routeId
parameter_list|)
block|{
comment|// do nothing here
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|inflightExchanges
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size (Endpoint endpoint)
specifier|public
name|int
name|size
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
comment|// do nothing here
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|removeRoute (String routeId)
specifier|public
name|void
name|removeRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
comment|// We don't support this interface yet
block|}
annotation|@
name|Override
DECL|method|size (String routeId)
specifier|public
name|int
name|size
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
comment|// do nothing here
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|browse ()
specifier|public
name|Collection
argument_list|<
name|InflightExchange
argument_list|>
name|browse
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|browse (int limit, boolean sortByLongestDuration)
specifier|public
name|Collection
argument_list|<
name|InflightExchange
argument_list|>
name|browse
parameter_list|(
name|int
name|limit
parameter_list|,
name|boolean
name|sortByLongestDuration
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getWaitTime ()
specifier|public
name|long
name|getWaitTime
parameter_list|()
block|{
return|return
name|waitTime
return|;
block|}
DECL|method|setWaitTime (long waitTime)
specifier|public
name|void
name|setWaitTime
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
name|this
operator|.
name|waitTime
operator|=
name|waitTime
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getExchangeFormatter ()
specifier|public
name|ExchangeFormatter
name|getExchangeFormatter
parameter_list|()
block|{
return|return
name|exchangeFormatter
return|;
block|}
DECL|method|setExchangeFormatter (ExchangeFormatter exchangeFormatter)
specifier|public
name|void
name|setExchangeFormatter
parameter_list|(
name|ExchangeFormatter
name|exchangeFormatter
parameter_list|)
block|{
name|this
operator|.
name|exchangeFormatter
operator|=
name|exchangeFormatter
expr_stmt|;
block|}
DECL|method|processTimeoutExchange (Exchange exchange, long processingTime)
specifier|protected
name|void
name|processTimeoutExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|long
name|processingTime
parameter_list|)
block|{
comment|// print out exchange history or send an alarm
comment|// dump a route stack trace of the exchange
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Got the inflight exchange which is stay in the repostory for about "
argument_list|)
operator|.
name|append
argument_list|(
name|processingTime
argument_list|)
operator|.
name|append
argument_list|(
literal|" With exchangeID: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|routeStackTrace
init|=
name|MessageHelper
operator|.
name|dumpMessageHistoryStacktrace
argument_list|(
name|exchange
argument_list|,
name|exchangeFormatter
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeStackTrace
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|routeStackTrace
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Just find out the exchange which is inflight repository for a very long time
DECL|class|InspectorWorker
class|class
name|InspectorWorker
implements|implements
name|Runnable
block|{
DECL|field|timeout
specifier|private
specifier|final
name|long
name|timeout
decl_stmt|;
DECL|field|waitTime
specifier|private
specifier|final
name|long
name|waitTime
decl_stmt|;
DECL|field|stop
specifier|private
name|boolean
name|stop
decl_stmt|;
DECL|method|InspectorWorker (long timeout, long waitTime)
name|InspectorWorker
parameter_list|(
name|long
name|timeout
parameter_list|,
name|long
name|waitTime
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|waitTime
operator|=
name|waitTime
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stop
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|inflightExchanges
operator|.
name|values
argument_list|()
control|)
block|{
comment|// check if the exchange is timeout
name|long
name|timeStamp
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|INFLIGHT_TIME_STAMP
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|processed
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|TIMEOUT_EXCHANGE_PROCESSED
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|processingTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeStamp
decl_stmt|;
if|if
condition|(
operator|!
name|processed
operator|&&
name|processingTime
operator|>
name|timeout
condition|)
block|{
name|processTimeoutExchange
argument_list|(
name|exchange
argument_list|,
name|processingTime
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|TIMEOUT_EXCHANGE_PROCESSED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing here, we just use stop flag to stop the worker
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

