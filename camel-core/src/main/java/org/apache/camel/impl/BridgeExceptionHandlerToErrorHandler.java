begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * An {@link ExceptionHandler} that uses the {@link DefaultConsumer} to  * process the caused exception to send the message into the Camel routing engine  * which allows to let the routing engine handle the exception.  *<p/>  * An endpoint can be configured with<tt>consumer.bridgeErrorHandler=true</tt> in the URI  * to enable this {@link BridgeExceptionHandlerToErrorHandler} on the consumer.  * The consumer must extend the {@link DefaultConsumer}, to support this, if not an  * {@link IllegalArgumentException} is thrown upon startup.  */
end_comment

begin_class
DECL|class|BridgeExceptionHandlerToErrorHandler
specifier|public
class|class
name|BridgeExceptionHandlerToErrorHandler
implements|implements
name|ExceptionHandler
block|{
DECL|field|fallback
specifier|private
specifier|final
name|LoggingExceptionHandler
name|fallback
decl_stmt|;
DECL|field|consumer
specifier|private
specifier|final
name|Consumer
name|consumer
decl_stmt|;
DECL|field|bridge
specifier|private
specifier|final
name|Processor
name|bridge
decl_stmt|;
DECL|method|BridgeExceptionHandlerToErrorHandler (DefaultConsumer consumer)
specifier|public
name|BridgeExceptionHandlerToErrorHandler
parameter_list|(
name|DefaultConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|fallback
operator|=
operator|new
name|LoggingExceptionHandler
argument_list|(
name|consumer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|bridge
operator|=
name|consumer
operator|.
name|getProcessor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleException (Throwable exception)
specifier|public
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|handleException
argument_list|(
literal|null
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleException (String message, Throwable exception)
specifier|public
name|void
name|handleException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
name|handleException
argument_list|(
name|message
argument_list|,
literal|null
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleException (String message, Exchange exchange, Throwable exception)
specifier|public
name|void
name|handleException
parameter_list|(
name|String
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
name|exchange
operator|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
expr_stmt|;
block|}
comment|// set the caused exception
name|exchange
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
comment|// and the message
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// and mark as redelivery exhausted as we cannot do redeliveries
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_EXHAUSTED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
try|try
block|{
name|bridge
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fallback
operator|.
name|handleException
argument_list|(
literal|"Error handling exception "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

