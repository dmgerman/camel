begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * A static list of known servers Camel Service Call EIP.  */
end_comment

begin_class
DECL|class|StaticServiceDiscovery
specifier|public
class|class
name|StaticServiceDiscovery
extends|extends
name|DefaultServiceDiscovery
block|{
DECL|field|servers
specifier|private
specifier|final
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|servers
decl_stmt|;
DECL|method|StaticServiceDiscovery ()
specifier|public
name|StaticServiceDiscovery
parameter_list|()
block|{
name|this
operator|.
name|servers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|StaticServiceDiscovery (List<ServiceDefinition> servers)
specifier|public
name|StaticServiceDiscovery
parameter_list|(
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|servers
parameter_list|)
block|{
name|this
operator|.
name|servers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the servers.      *      * @param servers server in the format: [service@]host:port.      */
DECL|method|setServers (List<String> servers)
specifier|public
name|void
name|setServers
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|servers
parameter_list|)
block|{
name|this
operator|.
name|servers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|servers
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|addServer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the servers.      *      * @param servers servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.      */
DECL|method|setServers (String servers)
specifier|public
name|void
name|setServers
parameter_list|(
name|String
name|servers
parameter_list|)
block|{
name|this
operator|.
name|servers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addServer
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a server to the known list of servers.      */
DECL|method|addServer (ServiceDefinition server)
specifier|public
name|void
name|addServer
parameter_list|(
name|ServiceDefinition
name|server
parameter_list|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a server to the known list of servers.      * @param serverString servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.      */
DECL|method|addServer (String serverString)
specifier|public
name|void
name|addServer
parameter_list|(
name|String
name|serverString
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|serverString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|String
name|service
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|part
argument_list|,
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|part
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|part
argument_list|,
literal|"@"
argument_list|)
expr_stmt|;
block|}
name|String
name|host
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|part
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|part
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|addServer
argument_list|(
name|service
argument_list|,
name|host
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a server to the known list of servers.      */
DECL|method|addServer (String host, int port)
specifier|public
name|void
name|addServer
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|addServer
argument_list|(
literal|null
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a server to the known list of servers.      */
DECL|method|addServer (String name, String host, int port)
specifier|public
name|void
name|addServer
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|addServer
argument_list|(
name|name
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a server to the known list of servers.      */
DECL|method|addServer (String name, String host, int port, Map<String, String> meta)
specifier|public
name|void
name|addServer
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
parameter_list|)
block|{
name|servers
operator|.
name|add
argument_list|(
operator|new
name|DefaultServiceDefinition
argument_list|(
name|name
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove an existing server from the list of known servers.      */
DECL|method|removeServer (String host, int port)
specifier|public
name|void
name|removeServer
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|servers
operator|.
name|removeIf
argument_list|(
name|s
lambda|->
name|Objects
operator|.
name|equals
argument_list|(
name|host
argument_list|,
name|s
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
name|port
operator|==
name|s
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove an existing server from the list of known servers.      */
DECL|method|removeServer (String name, String host, int port)
specifier|public
name|void
name|removeServer
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|servers
operator|.
name|removeIf
argument_list|(
name|s
lambda|->
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|s
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|host
argument_list|,
name|s
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
name|port
operator|==
name|s
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUpdatedListOfServices (String name)
specifier|public
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|getUpdatedListOfServices
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|servers
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|Objects
operator|.
name|isNull
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|s
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

