begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RouteNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|AggregateDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|AggregateRouteNode
specifier|public
class|class
name|AggregateRouteNode
implements|implements
name|RouteNode
block|{
DECL|field|aggregateDefinition
specifier|private
name|AggregateDefinition
name|aggregateDefinition
decl_stmt|;
DECL|method|AggregateRouteNode (AggregateDefinition aggregateDefinition)
specifier|public
name|AggregateRouteNode
parameter_list|(
name|AggregateDefinition
name|aggregateDefinition
parameter_list|)
block|{
name|this
operator|.
name|aggregateDefinition
operator|=
name|aggregateDefinition
expr_stmt|;
block|}
DECL|method|getProcessor ()
specifier|public
name|Processor
name|getProcessor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getProcessorDefinition ()
specifier|public
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|getProcessorDefinition
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getLabel (Exchange exchange)
specifier|public
name|String
name|getLabel
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|expressionString
init|=
operator|(
name|aggregateDefinition
operator|.
name|getExpression
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|aggregateDefinition
operator|.
name|getExpression
argument_list|()
operator|.
name|getLabel
argument_list|()
else|:
literal|""
decl_stmt|;
return|return
literal|"aggregate["
operator|+
name|expressionString
operator|+
literal|"]"
return|;
block|}
DECL|method|isAbstract ()
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AggregateRouteNode"
return|;
block|}
block|}
end_class

end_unit

