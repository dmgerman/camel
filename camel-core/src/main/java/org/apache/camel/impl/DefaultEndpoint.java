begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointConfiguration
operator|.
name|UriFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HasId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * A default endpoint useful for implementation inheritance.  *<p/>  * Components which leverages<a  * href="http://camel.apache.org/asynchronous-routing-engine.html">asynchronous  * processing model</a> should check the {@link #isSynchronous()} to determine  * if asynchronous processing is allowed. The<tt>synchronous</tt> option on the  * endpoint allows Camel end users to dictate whether they want the asynchronous  * model or not. The option is default<tt>false</tt> which means asynchronous  * processing is allowed.  *   * @version  */
end_comment

begin_class
DECL|class|DefaultEndpoint
specifier|public
specifier|abstract
class|class
name|DefaultEndpoint
extends|extends
name|ServiceSupport
implements|implements
name|Endpoint
implements|,
name|HasId
implements|,
name|CamelContextAware
block|{
comment|// private String endpointUri;
DECL|field|config
specifier|private
name|EndpointConfiguration
name|config
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|component
specifier|private
name|Component
name|component
decl_stmt|;
DECL|field|exchangePattern
specifier|private
name|ExchangePattern
name|exchangePattern
init|=
name|ExchangePattern
operator|.
name|InOnly
decl_stmt|;
comment|// option to allow end user to dictate whether async processing should be
comment|// used or not (if possible)
DECL|field|synchronous
specifier|private
name|boolean
name|synchronous
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
init|=
name|EndpointHelper
operator|.
name|createEndpointId
argument_list|()
decl_stmt|;
DECL|field|consumerProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumerProperties
decl_stmt|;
comment|/**      * Constructs a fully-initialized DefaultEndpoint instance. This is the      * preferred method of constructing an object from Java code (as opposed to      * Spring beans, etc.).      *       * @param endpointUri the full URI used to create this endpoint      * @param component the component that created this endpoint      */
DECL|method|DefaultEndpoint (String endpointUri, Component component)
specifier|protected
name|DefaultEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|component
operator|==
literal|null
condition|?
literal|null
else|:
name|component
operator|.
name|getCamelContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
name|this
operator|.
name|setEndpointUri
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a DefaultEndpoint instance which has<b>not</b> been created      * using a {@link Component}.      *<p/>      *<b>Note:</b> It is preferred to create endpoints using the associated      * component.      *       * @param endpointUri the full URI used to create this endpoint      * @param camelContext the Camel Context in which this endpoint is operating      */
annotation|@
name|Deprecated
DECL|method|DefaultEndpoint (String endpointUri, CamelContext camelContext)
specifier|protected
name|DefaultEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
comment|/**      * Constructs a partially-initialized DefaultEndpoint instance.      *<p/>      *<b>Note:</b> It is preferred to create endpoints using the associated      * component.      *       * @param endpointUri the full URI used to create this endpoint      */
annotation|@
name|Deprecated
DECL|method|DefaultEndpoint (String endpointUri)
specifier|protected
name|DefaultEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|this
operator|.
name|setEndpointUri
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a partially-initialized DefaultEndpoint instance. Useful when      * creating endpoints manually (e.g., as beans in Spring).      *<p/>      * Please note that the endpoint URI must be set through properties (or      * overriding {@link #createEndpointUri()} if one uses this constructor.      *<p/>      *<b>Note:</b> It is preferred to create endpoints using the associated      * component.      */
DECL|method|DefaultEndpoint ()
specifier|protected
name|DefaultEndpoint
parameter_list|()
block|{     }
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getEndpointUri
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|*
literal|37
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|DefaultEndpoint
condition|)
block|{
name|DefaultEndpoint
name|that
init|=
operator|(
name|DefaultEndpoint
operator|)
name|object
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|this
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|that
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Endpoint[%s]"
argument_list|,
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a unique String ID which can be used for aliasing without having      * to use the whole URI which is not unique      */
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getEndpointUri ()
specifier|public
name|String
name|getEndpointUri
parameter_list|()
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|String
name|uri
init|=
name|createEndpointUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"endpointUri is not specified and "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" does not implement createEndpointUri() to create a default value"
argument_list|)
throw|;
block|}
name|setEndpointUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|config
operator|.
name|toUriString
argument_list|(
name|UriFormat
operator|.
name|Canonical
argument_list|)
return|;
block|}
DECL|method|getEndpointConfiguration ()
specifier|public
name|EndpointConfiguration
name|getEndpointConfiguration
parameter_list|()
block|{
return|return
name|config
return|;
block|}
DECL|method|getEndpointKey ()
specifier|public
name|String
name|getEndpointKey
parameter_list|()
block|{
if|if
condition|(
name|isLenientProperties
argument_list|()
condition|)
block|{
comment|// only use the endpoint uri without parameters as the properties is
comment|// lenient
name|String
name|uri
init|=
name|getEndpointUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|before
argument_list|(
name|uri
argument_list|,
literal|"?"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|uri
return|;
block|}
block|}
else|else
block|{
comment|// use the full endpoint uri
return|return
name|getEndpointUri
argument_list|()
return|;
block|}
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
comment|/**      * Returns the component that created this endpoint.      *       * @return the component that created this endpoint, or<tt>null</tt> if      *         none set      */
DECL|method|getComponent ()
specifier|public
name|Component
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|createPollingConsumer ()
specifier|public
name|PollingConsumer
name|createPollingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|EventDrivenPollingConsumer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createExchange (Exchange exchange)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Class
argument_list|<
name|Exchange
argument_list|>
name|exchangeType
init|=
name|getExchangeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchangeType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exchangeType
operator|.
name|isInstance
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
name|exchangeType
operator|.
name|cast
argument_list|(
name|exchange
argument_list|)
return|;
block|}
block|}
return|return
name|exchange
operator|.
name|copy
argument_list|()
return|;
block|}
comment|/**      * Returns the type of the exchange which is generated by this component      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getExchangeType ()
specifier|public
name|Class
argument_list|<
name|Exchange
argument_list|>
name|getExchangeType
parameter_list|()
block|{
name|Type
name|type
init|=
name|getClass
argument_list|()
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|parameterizedType
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|Type
index|[]
name|arguments
init|=
name|parameterizedType
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Type
name|argumentType
init|=
name|arguments
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|argumentType
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|Exchange
argument_list|>
operator|)
name|argumentType
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|createExchange ()
specifier|public
name|Exchange
name|createExchange
parameter_list|()
block|{
return|return
name|createExchange
argument_list|(
name|getExchangePattern
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createExchange (ExchangePattern pattern)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|)
block|{
return|return
operator|new
name|DefaultExchange
argument_list|(
name|this
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**      * Returns the default exchange pattern to use for createExchange().      *       * @see #setExchangePattern(ExchangePattern exchangePattern)      */
DECL|method|getExchangePattern ()
specifier|public
name|ExchangePattern
name|getExchangePattern
parameter_list|()
block|{
return|return
name|exchangePattern
return|;
block|}
comment|/**      * Sets the default exchange pattern to use for {@link #createExchange()}.      * The default value is {@link ExchangePattern#InOnly}      */
DECL|method|setExchangePattern (ExchangePattern exchangePattern)
specifier|public
name|void
name|setExchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|this
operator|.
name|exchangePattern
operator|=
name|exchangePattern
expr_stmt|;
block|}
comment|/**      * Returns whether synchronous processing should be strictly used.      *       * @see #setSynchronous(boolean synchronous)      */
DECL|method|isSynchronous ()
specifier|public
name|boolean
name|isSynchronous
parameter_list|()
block|{
return|return
name|synchronous
return|;
block|}
comment|/**      * Sets whether synchronous processing should be strictly used, or Camel is      * allowed to use asynchronous processing (if supported).      *       * @param synchronous<tt>true</tt> to enforce synchronous processing      */
DECL|method|setSynchronous (boolean synchronous)
specifier|public
name|void
name|setSynchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|this
operator|.
name|synchronous
operator|=
name|synchronous
expr_stmt|;
block|}
DECL|method|configureProperties (Map<String, Object> options)
specifier|public
name|void
name|configureProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumerProperties
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"consumer."
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerProperties
operator|!=
literal|null
condition|)
block|{
name|setConsumerProperties
argument_list|(
name|consumerProperties
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A factory method to lazily create the endpointUri if none is specified      */
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Sets the endpointUri if it has not been specified yet via some kind of      * dependency injection mechanism. This allows dependency injection      * frameworks such as Spring or Guice to set the default endpoint URI in      * cases where it has not been explicitly configured using the name/context      * in which an Endpoint is created.      */
DECL|method|setEndpointUriIfNotSpecified (String value)
specifier|public
name|void
name|setEndpointUriIfNotSpecified
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// FIXME: set the component first
comment|// ObjectHelper.notNull(camelContext, "camelContext");
name|int
name|s
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
operator|&&
name|s
operator|>
literal|0
condition|)
block|{
name|component
operator|=
name|camelContext
operator|.
name|getComponent
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setEndpointUri
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the URI that created this endpoint.      */
DECL|method|setEndpointUri (String endpointUri)
specifier|protected
name|void
name|setEndpointUri
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
if|if
condition|(
name|endpointUri
operator|==
literal|null
condition|)
block|{
name|config
operator|=
literal|null
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
name|component
operator|.
name|createConfiguration
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MappedEndpointConfiguration
name|cfg
init|=
operator|new
name|MappedEndpointConfiguration
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setURI
argument_list|(
operator|new
name|URI
argument_list|(
name|endpointUri
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
name|cfg
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isLenientProperties ()
specifier|public
name|boolean
name|isLenientProperties
parameter_list|()
block|{
comment|// default should be false for most components
return|return
literal|false
return|;
block|}
DECL|method|getConsumerProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getConsumerProperties
parameter_list|()
block|{
return|return
name|consumerProperties
return|;
block|}
DECL|method|setConsumerProperties (Map<String, Object> consumerProperties)
specifier|public
name|void
name|setConsumerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumerProperties
parameter_list|)
block|{
name|this
operator|.
name|consumerProperties
operator|=
name|consumerProperties
expr_stmt|;
block|}
DECL|method|configureConsumer (Consumer consumer)
specifier|protected
name|void
name|configureConsumer
parameter_list|(
name|Consumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|consumerProperties
operator|!=
literal|null
condition|)
block|{
comment|// use a defensive copy of the consumer properties as the methods below will remove the used properties
comment|// and in case we restart routes, we need access to the original consumer properties again
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|consumerProperties
argument_list|)
decl_stmt|;
comment|// set reference properties first as they use # syntax that fools the regular properties setter
name|EndpointHelper
operator|.
name|setReferenceProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|consumer
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|consumer
argument_list|,
name|copy
argument_list|)
expr_stmt|;
comment|// special consumer.routeExceptionHandler option
name|Object
name|bridge
init|=
name|copy
operator|.
name|remove
argument_list|(
literal|"bridgeErrorHandler"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bridge
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|bridge
argument_list|)
condition|)
block|{
if|if
condition|(
name|consumer
operator|instanceof
name|DefaultConsumer
condition|)
block|{
name|DefaultConsumer
name|defaultConsumer
init|=
operator|(
name|DefaultConsumer
operator|)
name|consumer
decl_stmt|;
name|defaultConsumer
operator|.
name|setExceptionHandler
argument_list|(
operator|new
name|BridgeExceptionHandlerToErrorHandler
argument_list|(
name|defaultConsumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option consumer.bridgeErrorHandler is only supported by endpoints,"
operator|+
literal|" having their consumer extend DefaultConsumer. The consumer is a "
operator|+
name|consumer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" class."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|isLenientProperties
argument_list|()
operator|&&
name|copy
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|this
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
literal|"There are "
operator|+
name|copy
operator|.
name|size
argument_list|()
operator|+
literal|" parameters that couldn't be set on the endpoint consumer."
operator|+
literal|" Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."
operator|+
literal|" Unknown consumer parameters=["
operator|+
name|copy
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

