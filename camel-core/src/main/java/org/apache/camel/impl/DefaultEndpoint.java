begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A default endpoint useful for implementation inheritence  *   * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultEndpoint
specifier|public
specifier|abstract
class|class
name|DefaultEndpoint
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|Endpoint
argument_list|<
name|E
argument_list|>
block|{
DECL|field|endpointUri
specifier|private
name|String
name|endpointUri
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|inboundProcessor
specifier|private
name|Processor
argument_list|<
name|E
argument_list|>
name|inboundProcessor
decl_stmt|;
DECL|field|activated
specifier|protected
name|AtomicBoolean
name|activated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|deactivated
specifier|protected
name|AtomicBoolean
name|deactivated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|DefaultEndpoint (String endpointUri, CamelContext container)
specifier|protected
name|DefaultEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|CamelContext
name|container
parameter_list|)
block|{
name|this
operator|.
name|endpointUri
operator|=
name|endpointUri
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|container
expr_stmt|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|endpointUri
operator|.
name|hashCode
argument_list|()
operator|*
literal|37
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|DefaultEndpoint
condition|)
block|{
name|DefaultEndpoint
name|that
init|=
operator|(
name|DefaultEndpoint
operator|)
name|object
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|equals
argument_list|(
name|this
operator|.
name|endpointUri
argument_list|,
name|that
operator|.
name|endpointUri
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Endpoint["
operator|+
name|endpointUri
operator|+
literal|"]"
return|;
block|}
DECL|method|getEndpointUri ()
specifier|public
name|String
name|getEndpointUri
parameter_list|()
block|{
return|return
name|endpointUri
return|;
block|}
DECL|method|getContext ()
specifier|public
name|CamelContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**      * Converts the given exchange to the specified exchange type      */
DECL|method|convertTo (Class<E> type, Exchange exchange)
specifier|public
name|E
name|convertTo
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|type
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// TODO we could infer type parameter
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|exchange
argument_list|)
return|;
block|}
return|return
name|getContext
argument_list|()
operator|.
name|getExchangeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|)
return|;
block|}
DECL|method|activate (Processor<E> inboundProcessor)
specifier|public
name|void
name|activate
parameter_list|(
name|Processor
argument_list|<
name|E
argument_list|>
name|inboundProcessor
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|activated
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|deactivated
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|inboundProcessor
operator|=
name|inboundProcessor
expr_stmt|;
name|doActivate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Endpoint is already active: "
operator|+
name|getEndpointUri
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|deactivate ()
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|deactivated
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|activated
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doDeactivate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createExchange (E exchange)
specifier|public
name|E
name|createExchange
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
name|E
name|answer
init|=
name|createExchange
argument_list|()
decl_stmt|;
name|answer
operator|.
name|copyFrom
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * The processor used to process inbound message exchanges      */
DECL|method|getInboundProcessor ()
specifier|public
name|Processor
argument_list|<
name|E
argument_list|>
name|getInboundProcessor
parameter_list|()
block|{
return|return
name|inboundProcessor
return|;
block|}
DECL|method|setInboundProcessor (Processor<E> inboundProcessor)
specifier|public
name|void
name|setInboundProcessor
parameter_list|(
name|Processor
argument_list|<
name|E
argument_list|>
name|inboundProcessor
parameter_list|)
block|{
name|this
operator|.
name|inboundProcessor
operator|=
name|inboundProcessor
expr_stmt|;
block|}
comment|/**      * Called at most once by the container to activate the endpoint      */
DECL|method|doActivate ()
specifier|protected
name|void
name|doActivate
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|/**      * Called at most once by the container to deactivate the endpoint      */
DECL|method|doDeactivate ()
specifier|protected
name|void
name|doDeactivate
parameter_list|()
block|{     }
DECL|method|startService (T service)
specifier|protected
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|>
name|T
name|startService
parameter_list|(
name|T
name|service
parameter_list|)
throws|throws
name|Exception
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|service
return|;
block|}
block|}
end_class

end_unit

