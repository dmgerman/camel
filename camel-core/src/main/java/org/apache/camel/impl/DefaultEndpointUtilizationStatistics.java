begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointUtilizationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|LRUCacheFactory
import|;
end_import

begin_class
DECL|class|DefaultEndpointUtilizationStatistics
specifier|public
class|class
name|DefaultEndpointUtilizationStatistics
implements|implements
name|EndpointUtilizationStatistics
block|{
DECL|field|map
specifier|private
specifier|final
name|LRUCache
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|DefaultEndpointUtilizationStatistics (int maxCapacity)
specifier|public
name|DefaultEndpointUtilizationStatistics
parameter_list|(
name|int
name|maxCapacity
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|LRUCacheFactory
operator|.
name|newLRUCache
argument_list|(
literal|16
argument_list|,
name|maxCapacity
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|maxCapacity ()
specifier|public
name|int
name|maxCapacity
parameter_list|()
block|{
return|return
name|map
operator|.
name|getMaxCacheSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onHit (String uri)
specifier|public
name|void
name|onHit
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|map
operator|.
name|compute
argument_list|(
name|uri
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|current
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
literal|1L
return|;
block|}
else|else
block|{
return|return
operator|++
name|current
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (String uri)
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStatistics ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getStatistics
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

