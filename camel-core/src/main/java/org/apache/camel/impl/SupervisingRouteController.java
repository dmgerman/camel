begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Experimental
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StartupListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|CamelContextStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HasId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventNotifierSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
operator|.
name|BackOff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
operator|.
name|BackOffContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
operator|.
name|BackOffTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple implementation of the {@link RouteController} that delays the startup  * of the routes after the camel context startup and retries to start failing routes.  *  * NOTE: this is experimental/unstable.  */
end_comment

begin_class
annotation|@
name|Experimental
DECL|class|SupervisingRouteController
specifier|public
class|class
name|SupervisingRouteController
extends|extends
name|DefaultRouteController
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SupervisingRouteController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
decl_stmt|;
DECL|field|contextStarted
specifier|private
specifier|final
name|AtomicBoolean
name|contextStarted
decl_stmt|;
DECL|field|routeCount
specifier|private
specifier|final
name|AtomicInteger
name|routeCount
decl_stmt|;
DECL|field|routes
specifier|private
specifier|final
name|Set
argument_list|<
name|RouteHolder
argument_list|>
name|routes
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|CamelContextStartupListener
name|listener
decl_stmt|;
DECL|field|routeManager
specifier|private
specifier|final
name|RouteManager
name|routeManager
decl_stmt|;
DECL|field|timer
specifier|private
name|BackOffTimer
name|timer
decl_stmt|;
DECL|field|executorService
specifier|private
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|defaultBackOff
specifier|private
name|BackOff
name|defaultBackOff
decl_stmt|;
DECL|field|backOffConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BackOff
argument_list|>
name|backOffConfigurations
decl_stmt|;
DECL|method|SupervisingRouteController ()
specifier|public
name|SupervisingRouteController
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|this
operator|.
name|contextStarted
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|routeCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|routes
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|routeManager
operator|=
operator|new
name|RouteManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultBackOff
operator|=
name|BackOff
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|backOffConfigurations
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|listener
operator|=
operator|new
name|CamelContextStartupListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// *********************************
comment|// Properties
comment|// *********************************
DECL|method|getDefaultBackOff ()
specifier|public
name|BackOff
name|getDefaultBackOff
parameter_list|()
block|{
return|return
name|defaultBackOff
return|;
block|}
DECL|method|setDefaultBackOff (BackOff defaultBackOff)
specifier|public
name|void
name|setDefaultBackOff
parameter_list|(
name|BackOff
name|defaultBackOff
parameter_list|)
block|{
name|this
operator|.
name|defaultBackOff
operator|=
name|defaultBackOff
expr_stmt|;
block|}
DECL|method|getBackOffConfigurations ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|BackOff
argument_list|>
name|getBackOffConfigurations
parameter_list|()
block|{
return|return
name|backOffConfigurations
return|;
block|}
DECL|method|setBackOffConfigurations (Map<String, BackOff> backOffConfigurations)
specifier|public
name|void
name|setBackOffConfigurations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|BackOff
argument_list|>
name|backOffConfigurations
parameter_list|)
block|{
name|this
operator|.
name|backOffConfigurations
operator|=
name|backOffConfigurations
expr_stmt|;
block|}
DECL|method|getBackOff (String id)
specifier|public
name|BackOff
name|getBackOff
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|backOffConfigurations
operator|.
name|getOrDefault
argument_list|(
name|id
argument_list|,
name|defaultBackOff
argument_list|)
return|;
block|}
DECL|method|setBackOff (String id, BackOff backOff)
specifier|public
name|void
name|setBackOff
parameter_list|(
name|String
name|id
parameter_list|,
name|BackOff
name|backOff
parameter_list|)
block|{
name|backOffConfigurations
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|backOff
argument_list|)
expr_stmt|;
block|}
comment|// *********************************
comment|// Lifecycle
comment|// *********************************
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|context
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setAutoStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutePolicyFactory
argument_list|(
operator|new
name|ManagedRoutePolicyFactory
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addStartupListener
argument_list|(
name|this
operator|.
name|listener
argument_list|)
expr_stmt|;
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|this
operator|.
name|listener
argument_list|)
expr_stmt|;
name|executorService
operator|=
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"SupervisingRouteController"
argument_list|)
expr_stmt|;
name|timer
operator|=
operator|new
name|BackOffTimer
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getCamelContext
argument_list|()
operator|!=
literal|null
operator|&&
name|executorService
operator|!=
literal|null
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
name|timer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getCamelContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|removeEventNotifier
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|// *********************************
comment|// Route management
comment|// *********************************
annotation|@
name|Override
DECL|method|startRoute (String routeId)
specifier|public
name|void
name|startRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Optional
argument_list|<
name|RouteHolder
argument_list|>
name|route
init|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|route
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This route is unknown to this controller, apply default behaviour
comment|// from super class.
name|super
operator|.
name|startRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doStartRoute
argument_list|(
name|route
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|super
operator|.
name|startRoute
argument_list|(
name|routeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopRoute (String routeId)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Optional
argument_list|<
name|RouteHolder
argument_list|>
name|route
init|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|route
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This route is unknown to this controller, apply default behaviour
comment|// from super class.
name|super
operator|.
name|stopRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doStopRoute
argument_list|(
name|route
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|super
operator|.
name|stopRoute
argument_list|(
name|routeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopRoute (String routeId, long timeout, TimeUnit timeUnit)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Optional
argument_list|<
name|RouteHolder
argument_list|>
name|route
init|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|route
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This route is unknown to this controller, apply default behaviour
comment|// from super class.
name|super
operator|.
name|stopRoute
argument_list|(
name|routeId
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doStopRoute
argument_list|(
name|route
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|super
operator|.
name|stopRoute
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopRoute (String routeId, long timeout, TimeUnit timeUnit, boolean abortAfterTimeout)
specifier|public
name|boolean
name|stopRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|boolean
name|abortAfterTimeout
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Optional
argument_list|<
name|RouteHolder
argument_list|>
name|route
init|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|route
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This route is unknown to this controller, apply default behaviour
comment|// from super class.
return|return
name|super
operator|.
name|stopRoute
argument_list|(
name|routeId
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|,
name|abortAfterTimeout
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|doStopRoute
argument_list|(
name|route
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|result
operator|.
name|set
argument_list|(
name|super
operator|.
name|stopRoute
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|,
name|abortAfterTimeout
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|suspendRoute (String routeId)
specifier|public
name|void
name|suspendRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Optional
argument_list|<
name|RouteHolder
argument_list|>
name|route
init|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|route
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This route is unknown to this controller, apply default behaviour
comment|// from super class.
name|super
operator|.
name|suspendRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doStopRoute
argument_list|(
name|route
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|super
operator|.
name|suspendRoute
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|suspendRoute (String routeId, long timeout, TimeUnit timeUnit)
specifier|public
name|void
name|suspendRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Optional
argument_list|<
name|RouteHolder
argument_list|>
name|route
init|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|route
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This route is unknown to this controller, apply default behaviour
comment|// from super class.
name|super
operator|.
name|suspendRoute
argument_list|(
name|routeId
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doStopRoute
argument_list|(
name|route
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|super
operator|.
name|suspendRoute
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resumeRoute (String routeId)
specifier|public
name|void
name|resumeRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Optional
argument_list|<
name|RouteHolder
argument_list|>
name|route
init|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|route
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// This route is unknown to this controller, apply default behaviour
comment|// from super class.
name|super
operator|.
name|resumeRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doStartRoute
argument_list|(
name|route
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|super
operator|.
name|startRoute
argument_list|(
name|routeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getControlledRoutes ()
specifier|public
name|List
argument_list|<
name|Route
argument_list|>
name|getControlledRoutes
parameter_list|()
block|{
return|return
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RouteHolder
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|// *********************************
comment|// Helpers
comment|// *********************************
DECL|method|doStopRoute (RouteHolder route, boolean checker, ThrowingConsumer<RouteHolder, Exception> consumer)
specifier|private
name|void
name|doStopRoute
parameter_list|(
name|RouteHolder
name|route
parameter_list|,
name|boolean
name|checker
parameter_list|,
name|ThrowingConsumer
argument_list|<
name|RouteHolder
argument_list|,
name|Exception
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|checker
condition|)
block|{
comment|// remove them from checked routes so they don't get started by the
comment|// routes check task as a manual operation on the routes indicates that
comment|// the route is then managed manually
name|routeManager
operator|.
name|release
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
name|ServiceStatus
name|status
init|=
name|route
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isStoppable
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Route {} status is {}, skipping"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
name|consumer
operator|.
name|accept
argument_list|(
name|route
argument_list|)
expr_stmt|;
comment|// Mark the route as un-managed
name|route
operator|.
name|getContext
argument_list|()
operator|.
name|setRouteController
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doStartRoute (RouteHolder route, boolean checker, ThrowingConsumer<RouteHolder, Exception> consumer)
specifier|private
name|void
name|doStartRoute
parameter_list|(
name|RouteHolder
name|route
parameter_list|,
name|boolean
name|checker
parameter_list|,
name|ThrowingConsumer
argument_list|<
name|RouteHolder
argument_list|,
name|Exception
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|ServiceStatus
name|status
init|=
name|route
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isStartable
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Route {} status is {}, skipping"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
name|checker
condition|)
block|{
name|routeManager
operator|.
name|release
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
comment|// Mark the route as managed
name|route
operator|.
name|getContext
argument_list|()
operator|.
name|setRouteController
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|checker
condition|)
block|{
comment|// if start fails the route is moved to controller supervision
comment|// so its get (eventually) restarted
name|routeManager
operator|.
name|start
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|startRoutes ()
specifier|private
name|void
name|startRoutes
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isRunAllowed
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|routeList
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|routeList
operator|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getStatus
argument_list|()
operator|==
name|ServiceStatus
operator|.
name|Stopped
argument_list|)
operator|.
name|map
argument_list|(
name|RouteHolder
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|route
range|:
name|routeList
control|)
block|{
try|try
block|{
name|startRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignored, exception handled by startRoute
block|}
block|}
block|}
DECL|method|stopRoutes ()
specifier|private
specifier|synchronized
name|void
name|stopRoutes
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isRunAllowed
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|routeList
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|routeList
operator|=
name|routes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getStatus
argument_list|()
operator|==
name|ServiceStatus
operator|.
name|Started
argument_list|)
operator|.
name|map
argument_list|(
name|RouteHolder
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|route
range|:
name|routeList
control|)
block|{
try|try
block|{
name|stopRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignored, exception handled by stopRoute
block|}
block|}
block|}
comment|// *********************************
comment|// RouteChecker
comment|// *********************************
DECL|class|RouteManager
specifier|private
class|class
name|RouteManager
block|{
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|field|routes
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|RouteHolder
argument_list|,
name|CompletableFuture
argument_list|<
name|BackOffContext
argument_list|>
argument_list|>
name|routes
decl_stmt|;
DECL|method|RouteManager ()
name|RouteManager
parameter_list|()
block|{
name|this
operator|.
name|logger
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouteManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|routes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|start (RouteHolder route)
name|void
name|start
parameter_list|(
name|RouteHolder
name|route
parameter_list|)
block|{
name|route
operator|.
name|getContext
argument_list|()
operator|.
name|setRouteController
argument_list|(
name|SupervisingRouteController
operator|.
name|this
argument_list|)
expr_stmt|;
name|routes
operator|.
name|computeIfAbsent
argument_list|(
name|route
argument_list|,
name|r
lambda|->
block|{
name|BackOff
name|backOff
init|=
name|getBackOff
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Start supervising route: {} with back-off: {}"
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|backOff
argument_list|)
expr_stmt|;
comment|// Return this future as cancel does not have effect on the
comment|// computation (future chain)
name|CompletableFuture
argument_list|<
name|BackOffContext
argument_list|>
name|future
init|=
name|timer
operator|.
name|schedule
argument_list|(
name|backOff
argument_list|,
name|context
lambda|->
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Try to restart route: {}"
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|doStartRoute
argument_list|(
name|r
argument_list|,
literal|false
argument_list|,
name|rx
lambda|->
name|SupervisingRouteController
operator|.
name|super
operator|.
name|startRoute
argument_list|(
name|rx
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|future
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|context
parameter_list|,
name|throwable
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|isExhausted
argument_list|()
condition|)
block|{
comment|// This indicates that the future has been cancelled
comment|// or that back-off retry is exhausted thus if the
comment|// route is not started it is moved out of the supervisor.
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|isExhausted
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Back-off for route {} is exhausted, no more attempts will be made"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
specifier|final
name|ServiceStatus
name|status
init|=
name|route
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isStopped
argument_list|()
operator|||
name|status
operator|.
name|isStopping
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Route {} has status {}, stop supervising it"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|r
operator|.
name|getContext
argument_list|()
operator|.
name|setRouteController
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|routes
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|release (RouteHolder route)
name|boolean
name|release
parameter_list|(
name|RouteHolder
name|route
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|BackOffContext
argument_list|>
name|future
init|=
name|routes
operator|.
name|remove
argument_list|(
name|route
argument_list|)
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|future
operator|!=
literal|null
return|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|routes
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|v
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|routes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// *********************************
comment|//
comment|// *********************************
DECL|class|RouteHolder
specifier|private
class|class
name|RouteHolder
implements|implements
name|HasId
implements|,
name|Comparable
argument_list|<
name|RouteHolder
argument_list|>
block|{
DECL|field|order
specifier|private
specifier|final
name|int
name|order
decl_stmt|;
DECL|field|route
specifier|private
specifier|final
name|Route
name|route
decl_stmt|;
DECL|method|RouteHolder (Route route, int order)
name|RouteHolder
parameter_list|(
name|Route
name|route
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|this
operator|.
name|route
operator|=
name|route
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|route
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|get ()
specifier|public
name|Route
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|route
return|;
block|}
DECL|method|getContext ()
specifier|public
name|RouteContext
name|getContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|route
operator|.
name|getRouteContext
argument_list|()
return|;
block|}
DECL|method|getDefinition ()
specifier|public
name|RouteDefinition
name|getDefinition
parameter_list|()
block|{
return|return
name|this
operator|.
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getRoute
argument_list|()
return|;
block|}
DECL|method|getStatus ()
specifier|public
name|ServiceStatus
name|getStatus
parameter_list|()
block|{
return|return
name|getContext
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRouteStatus
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getInitializationOrder ()
specifier|public
name|int
name|getInitializationOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
DECL|method|getStartupOrder ()
specifier|public
name|int
name|getStartupOrder
parameter_list|()
block|{
name|Integer
name|order
init|=
name|getDefinition
argument_list|()
operator|.
name|getStartupOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|order
operator|==
literal|null
condition|)
block|{
name|order
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
name|order
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (RouteHolder o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|RouteHolder
name|o
parameter_list|)
block|{
name|int
name|answer
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|getStartupOrder
argument_list|()
argument_list|,
name|o
operator|.
name|getStartupOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
name|answer
operator|=
name|Integer
operator|.
name|compare
argument_list|(
name|getInitializationOrder
argument_list|()
argument_list|,
name|o
operator|.
name|getInitializationOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|route
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RouteHolder
operator|)
name|o
operator|)
operator|.
name|route
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|route
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|// *********************************
comment|// Policies
comment|// *********************************
DECL|class|ManagedRoutePolicyFactory
specifier|private
class|class
name|ManagedRoutePolicyFactory
implements|implements
name|RoutePolicyFactory
block|{
DECL|field|policy
specifier|private
specifier|final
name|RoutePolicy
name|policy
init|=
operator|new
name|ManagedRoutePolicy
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createRoutePolicy (CamelContext camelContext, String routeId, RouteDefinition route)
specifier|public
name|RoutePolicy
name|createRoutePolicy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|routeId
parameter_list|,
name|RouteDefinition
name|route
parameter_list|)
block|{
return|return
name|policy
return|;
block|}
block|}
DECL|class|ManagedRoutePolicy
specifier|private
class|class
name|ManagedRoutePolicy
implements|implements
name|RoutePolicy
block|{
annotation|@
name|Override
DECL|method|onInit (Route route)
specifier|public
name|void
name|onInit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getRoute
argument_list|()
operator|.
name|getAutoStartup
argument_list|()
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Route {} has explicit auto-startup flag set to false, ignore it"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|RouteHolder
name|holder
init|=
operator|new
name|RouteHolder
argument_list|(
name|route
argument_list|,
name|routeCount
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routes
operator|.
name|add
argument_list|(
name|holder
argument_list|)
condition|)
block|{
name|holder
operator|.
name|getContext
argument_list|()
operator|.
name|setRouteController
argument_list|(
name|SupervisingRouteController
operator|.
name|this
argument_list|)
expr_stmt|;
name|holder
operator|.
name|getDefinition
argument_list|()
operator|.
name|setAutoStartup
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextStarted
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Context is started: attempt to start route {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|SupervisingRouteController
operator|.
name|this
operator|.
name|doStartRoute
argument_list|(
name|holder
argument_list|,
literal|true
argument_list|,
name|r
lambda|->
name|SupervisingRouteController
operator|.
name|super
operator|.
name|startRoute
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Context is not started: add route {} to stopped routes"
argument_list|,
name|holder
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onRemove (Route route)
specifier|public
name|void
name|onRemove
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|routes
operator|.
name|removeIf
argument_list|(
name|r
lambda|->
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|r
operator|.
name|get
argument_list|()
argument_list|,
name|route
argument_list|)
operator|||
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onStart (Route route)
specifier|public
name|void
name|onStart
parameter_list|(
name|Route
name|route
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|onStop (Route route)
specifier|public
name|void
name|onStop
parameter_list|(
name|Route
name|route
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|onSuspend (Route route)
specifier|public
name|void
name|onSuspend
parameter_list|(
name|Route
name|route
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|onResume (Route route)
specifier|public
name|void
name|onResume
parameter_list|(
name|Route
name|route
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|onExchangeBegin (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeBegin
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// NO-OP
block|}
annotation|@
name|Override
DECL|method|onExchangeDone (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeDone
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// NO-OP
block|}
block|}
DECL|class|CamelContextStartupListener
specifier|private
class|class
name|CamelContextStartupListener
extends|extends
name|EventNotifierSupport
implements|implements
name|StartupListener
block|{
annotation|@
name|Override
DECL|method|notify (EventObject event)
specifier|public
name|void
name|notify
parameter_list|(
name|EventObject
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|onCamelContextStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isEnabled (EventObject event)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|EventObject
name|event
parameter_list|)
block|{
return|return
name|event
operator|instanceof
name|CamelContextStartedEvent
return|;
block|}
annotation|@
name|Override
DECL|method|onCamelContextStarted (CamelContext context, boolean alreadyStarted)
specifier|public
name|void
name|onCamelContextStarted
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|boolean
name|alreadyStarted
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|alreadyStarted
condition|)
block|{
comment|// Invoke it only if the context was already started as this
comment|// method is not invoked at last event as documented but after
comment|// routes warm-up so this is useful for routes deployed after
comment|// the camel context has been started-up. For standard routes
comment|// configuration the notification of the camel context started
comment|// is provided by EventNotifier.
comment|//
comment|// We should check why this callback is not invoked at latest
comment|// stage, or maybe rename it as it is misleading and provide a
comment|// better alternative for intercept camel events.
name|onCamelContextStarted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|onCamelContextStarted ()
specifier|private
name|void
name|onCamelContextStarted
parameter_list|()
block|{
comment|// Start managing the routes only when the camel context is started
comment|// so start/stop of managed routes do not clash with CamelContext
comment|// startup
if|if
condition|(
name|contextStarted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|startRoutes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

