begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestBindingDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NodeIdFactory
import|;
end_import

begin_comment
comment|/**  * Factory for generating route ids based on uris.  *<p>  * For direct/seda routes it returns route name (direct:start -> start).  * For rest routes it returns its context path.  *<p>  * When id cannot be generated, falls back to other {@link NodeIdFactory} implementation.  * If none is passed in the constructor, then {@link DefaultNodeIdFactory} is used.  */
end_comment

begin_class
DECL|class|RouteIdFactory
specifier|public
class|class
name|RouteIdFactory
implements|implements
name|NodeIdFactory
block|{
DECL|field|defaultNodeIdFactory
specifier|private
name|NodeIdFactory
name|defaultNodeIdFactory
decl_stmt|;
DECL|method|RouteIdFactory ()
specifier|public
name|RouteIdFactory
parameter_list|()
block|{
name|defaultNodeIdFactory
operator|=
operator|new
name|DefaultNodeIdFactory
argument_list|()
expr_stmt|;
block|}
DECL|method|RouteIdFactory (NodeIdFactory defaultNodeIdFactory)
specifier|public
name|RouteIdFactory
parameter_list|(
name|NodeIdFactory
name|defaultNodeIdFactory
parameter_list|)
block|{
name|this
operator|.
name|defaultNodeIdFactory
operator|=
name|defaultNodeIdFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createId (NamedNode definition)
specifier|public
name|String
name|createId
parameter_list|(
name|NamedNode
name|definition
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|instanceof
name|RouteDefinition
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|id
init|=
name|extractId
argument_list|(
operator|(
name|RouteDefinition
operator|)
name|definition
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|id
operator|.
name|get
argument_list|()
return|;
block|}
name|id
operator|=
name|extractIdFromRestDefinition
argument_list|(
operator|(
name|RouteDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|id
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
name|defaultNodeIdFactory
operator|.
name|createId
argument_list|(
name|definition
argument_list|)
return|;
block|}
comment|/**      * Extract id from direct/seda route.      */
DECL|method|extractId (RouteDefinition routeDefinition)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|extractId
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
block|{
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|inputs
init|=
name|routeDefinition
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputs
operator|==
literal|null
operator|||
name|inputs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|FromDefinition
name|from
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|from
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|int
name|colon
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>
literal|0
condition|)
block|{
name|String
name|name
init|=
name|uri
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|questionMark
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|questionMark
operator|>
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|questionMark
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Extract id from rest route.      */
DECL|method|extractIdFromRestDefinition (RouteDefinition route)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|extractIdFromRestDefinition
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
if|if
condition|(
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RestBindingDefinition
condition|)
block|{
if|if
condition|(
name|route
operator|.
name|getRestDefinition
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|String
name|path
init|=
name|route
operator|.
name|getRestDefinition
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
if|if
condition|(
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

