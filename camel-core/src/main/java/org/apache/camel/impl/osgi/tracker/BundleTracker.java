begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2007, 2008). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.osgi.tracker
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|osgi
operator|.
name|tracker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|SynchronousBundleListener
import|;
end_import

begin_comment
comment|/**  * The<code>BundleTracker</code> class simplifies tracking bundles much like  * the<code>ServiceTracker</code> simplifies tracking services.  *<p>  * A<code>BundleTracker</code> is constructed with state criteria and a  *<code>BundleTrackerCustomizer</code> object. A<code>BundleTracker</code> can  * use the<code>BundleTrackerCustomizer</code> to select which bundles are  * tracked and to create a customized object to be tracked with the bundle. The  *<code>BundleTracker</code> can then be opened to begin tracking all bundles  * whose state matches the specified state criteria.  *<p>  * The<code>getBundles</code> method can be called to get the  *<code>Bundle</code> objects of the bundles being tracked. The  *<code>getObject</code> method can be called to get the customized object for  * a tracked bundle.  *<p>  * The<code>BundleTracker</code> class is thread-safe. It does not call a  *<code>BundleTrackerCustomizer</code> while holding any locks.  *<code>BundleTrackerCustomizer</code> implementations must also be  * thread-safe.  *   * @ThreadSafe  * @since 1.4  */
end_comment

begin_class
DECL|class|BundleTracker
specifier|public
class|class
name|BundleTracker
implements|implements
name|BundleTrackerCustomizer
block|{
comment|/* set this to true to compile in debug messages */
DECL|field|DEBUG
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
comment|/**      * The Bundle Context used by this<code>BundleTracker</code>.      */
DECL|field|context
specifier|protected
specifier|final
name|BundleContext
name|context
decl_stmt|;
comment|/**      * State mask for bundles being tracked. This field contains the ORed values      * of the bundle states being tracked.      */
DECL|field|mask
specifier|final
name|int
name|mask
decl_stmt|;
comment|/**      * The<code>BundleTrackerCustomizer</code> object for this tracker.      */
DECL|field|customizer
specifier|final
name|BundleTrackerCustomizer
name|customizer
decl_stmt|;
comment|/**      * Tracked bundles:<code>Bundle</code> object -> customized Object and      *<code>BundleListener</code> object      */
DECL|field|tracked
specifier|private
specifier|volatile
name|Tracked
name|tracked
decl_stmt|;
comment|/**      * Create a<code>BundleTracker</code> for bundles whose state is present in      * the specified state mask.      *<p>      * Bundles whose state is present on the specified state mask will be      * tracked by this<code>BundleTracker</code>.      *       * @param context The<code>BundleContext</code> against which the tracking      *            is done.      * @param stateMask The bit mask of the<code>OR</code>ing of the bundle      *            states to be tracked.      * @param customizer The customizer object to call when bundles are added,      *            modified, or removed in this<code>BundleTracker</code>. If      *            customizer is<code>null</code>, then this      *<code>BundleTracker</code> will be used as the      *<code>BundleTrackerCustomizer</code> and this      *<code>BundleTracker</code> will call the      *<code>BundleTrackerCustomizer</code> methods on itself.      * @see Bundle#getState()      */
DECL|method|BundleTracker (BundleContext context, int stateMask, BundleTrackerCustomizer customizer)
specifier|public
name|BundleTracker
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|int
name|stateMask
parameter_list|,
name|BundleTrackerCustomizer
name|customizer
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|mask
operator|=
name|stateMask
expr_stmt|;
name|this
operator|.
name|customizer
operator|=
operator|(
name|customizer
operator|==
literal|null
operator|)
condition|?
name|this
else|:
name|customizer
expr_stmt|;
block|}
comment|/**      * Accessor method for the current Tracked object. This method is only      * intended to be used by the unsynchronized methods which do not modify the      * tracked field.      *       * @return The current Tracked object.      */
DECL|method|tracked ()
specifier|private
name|Tracked
name|tracked
parameter_list|()
block|{
return|return
name|tracked
return|;
block|}
comment|/**      * Open this<code>BundleTracker</code> and begin tracking bundles.      *<p>      * Bundle which match the state criteria specified when this      *<code>BundleTracker</code> was created are now tracked by this      *<code>BundleTracker</code>.      *       * @throws java.lang.IllegalStateException If the<code>BundleContext</code>      *             with which this<code>BundleTracker</code> was created is no      *             longer valid.      * @throws java.lang.SecurityException If the caller and this class do not      *             have the appropriate      *<code>AdminPermission[context bundle,LISTENER]</code>, and      *             the Java Runtime Environment supports permissions.      */
DECL|method|open ()
specifier|public
name|void
name|open
parameter_list|()
block|{
specifier|final
name|Tracked
name|t
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|tracked
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BundleTracker.open"
argument_list|)
expr_stmt|;
block|}
name|t
operator|=
operator|new
name|Tracked
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|t
init|)
block|{
name|context
operator|.
name|addBundleListener
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|Bundle
index|[]
name|bundles
init|=
name|context
operator|.
name|getBundles
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundles
operator|!=
literal|null
condition|)
block|{
name|int
name|length
init|=
name|bundles
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|state
init|=
name|bundles
index|[
name|i
index|]
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|state
operator|&
name|mask
operator|)
operator|==
literal|0
condition|)
block|{
comment|/* null out bundles whose states are not interesting */
name|bundles
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/* set tracked with the initial bundles */
name|t
operator|.
name|setInitial
argument_list|(
name|bundles
argument_list|)
expr_stmt|;
block|}
block|}
name|tracked
operator|=
name|t
expr_stmt|;
block|}
comment|/* Call tracked outside of synchronized region */
name|t
operator|.
name|trackInitial
argument_list|()
expr_stmt|;
comment|/* process the initial references */
block|}
comment|/**      * Close this<code>BundleTracker</code>.      *<p>      * This method should be called when this<code>BundleTracker</code> should      * end the tracking of bundles.      *<p>      * This implementation calls {@link #getBundles()} to get the list of      * tracked bundles to remove.      */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
specifier|final
name|Bundle
index|[]
name|bundles
decl_stmt|;
specifier|final
name|Tracked
name|outgoing
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|outgoing
operator|=
name|tracked
expr_stmt|;
if|if
condition|(
name|outgoing
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BundleTracker.close"
argument_list|)
expr_stmt|;
block|}
name|outgoing
operator|.
name|close
argument_list|()
expr_stmt|;
name|bundles
operator|=
name|getBundles
argument_list|()
expr_stmt|;
name|tracked
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|context
operator|.
name|removeBundleListener
argument_list|(
name|outgoing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|/* In case the context was stopped. */
block|}
block|}
if|if
condition|(
name|bundles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|outgoing
operator|.
name|untrack
argument_list|(
name|bundle
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Default implementation of the      *<code>BundleTrackerCustomizer.addingBundle</code> method.      *<p>      * This method is only called when this<code>BundleTracker</code> has been      * constructed with a<code>null BundleTrackerCustomizer</code> argument.      *<p>      * This implementation simply returns the specified<code>Bundle</code>.      *<p>      * This method can be overridden in a subclass to customize the object to be      * tracked for the bundle being added.      *       * @param bundle The<code>Bundle</code> being added to this      *<code>BundleTracker</code> object.      * @param event The bundle event which caused this customizer method to be      *            called or<code>null</code> if there is no bundle event      *            associated with the call to this method.      * @return The specified bundle.      * @see BundleTrackerCustomizer#addingBundle(Bundle, BundleEvent)      */
DECL|method|addingBundle (Bundle bundle, BundleEvent event)
specifier|public
name|Object
name|addingBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|)
block|{
return|return
name|bundle
return|;
block|}
comment|/**      * Default implementation of the      *<code>BundleTrackerCustomizer.modifiedBundle</code> method.      *<p>      * This method is only called when this<code>BundleTracker</code> has been      * constructed with a<code>null BundleTrackerCustomizer</code> argument.      *<p>      * This implementation does nothing.      *       * @param bundle The<code>Bundle</code> whose state has been modified.      * @param event The bundle event which caused this customizer method to be      *            called or<code>null</code> if there is no bundle event      *            associated with the call to this method.      * @param object The customized object for the specified Bundle.      * @see BundleTrackerCustomizer#modifiedBundle(Bundle, BundleEvent, Object)      */
DECL|method|modifiedBundle (Bundle bundle, BundleEvent event, Object object)
specifier|public
name|void
name|modifiedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
comment|/* do nothing */
block|}
comment|/**      * Default implementation of the      *<code>BundleTrackerCustomizer.removedBundle</code> method.      *<p>      * This method is only called when this<code>BundleTracker</code> has been      * constructed with a<code>null BundleTrackerCustomizer</code> argument.      *<p>      * This implementation does nothing.      *       * @param bundle The<code>Bundle</code> being removed.      * @param event The bundle event which caused this customizer method to be      *            called or<code>null</code> if there is no bundle event      *            associated with the call to this method.      * @param object The customized object for the specified bundle.      * @see BundleTrackerCustomizer#removedBundle(Bundle, BundleEvent, Object)      */
DECL|method|removedBundle (Bundle bundle, BundleEvent event, Object object)
specifier|public
name|void
name|removedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
comment|/* do nothing */
block|}
comment|/**      * Return an array of<code>Bundle</code>s for all bundles being tracked by      * this<code>BundleTracker</code>.      *       * @return An array of<code>Bundle</code>s or<code>null</code> if no      *         bundles are being tracked.      */
DECL|method|getBundles ()
specifier|public
name|Bundle
index|[]
name|getBundles
parameter_list|()
block|{
specifier|final
name|Tracked
name|t
init|=
name|tracked
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
comment|/* if BundleTracker is not open */
return|return
literal|null
return|;
block|}
synchronized|synchronized
init|(
name|t
init|)
block|{
name|int
name|length
init|=
name|t
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Bundle
index|[]
operator|)
name|t
operator|.
name|getTracked
argument_list|(
operator|new
name|Bundle
index|[
name|length
index|]
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the customized object for the specified<code>Bundle</code> if      * the specified bundle is being tracked by this<code>BundleTracker</code>.      *       * @param bundle The<code>Bundle</code> being tracked.      * @return The customized object for the specified<code>Bundle</code> or      *<code>null</code> if the specified<code>Bundle</code> is not      *         being tracked.      */
DECL|method|getObject (Bundle bundle)
specifier|public
name|Object
name|getObject
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
specifier|final
name|Tracked
name|t
init|=
name|tracked
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
comment|/* if BundleTracker is not open */
return|return
literal|null
return|;
block|}
synchronized|synchronized
init|(
name|t
init|)
block|{
return|return
name|t
operator|.
name|getCustomizedObject
argument_list|(
name|bundle
argument_list|)
return|;
block|}
block|}
comment|/**      * Remove a bundle from this<code>BundleTracker</code>. The specified      * bundle will be removed from this<code>BundleTracker</code> . If the      * specified bundle was being tracked then the      *<code>BundleTrackerCustomizer.removedBundle</code> method will be called      * for that bundle.      *       * @param bundle The<code>Bundle</code> to be removed.      */
DECL|method|remove (Bundle bundle)
specifier|public
name|void
name|remove
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
specifier|final
name|Tracked
name|t
init|=
name|tracked
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
comment|/* if BundleTracker is not open */
return|return;
block|}
name|t
operator|.
name|untrack
argument_list|(
name|bundle
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the number of bundles being tracked by this      *<code>BundleTracker</code>.      *       * @return The number of bundles being tracked.      */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
specifier|final
name|Tracked
name|t
init|=
name|tracked
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
comment|/* if BundleTracker is not open */
return|return
literal|0
return|;
block|}
synchronized|synchronized
init|(
name|t
init|)
block|{
return|return
name|t
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the tracking count for this<code>BundleTracker</code>. The      * tracking count is initialized to 0 when this<code>BundleTracker</code>      * is opened. Every time a bundle is added, modified or removed from this      *<code>BundleTracker</code> the tracking count is incremented.      *<p>      * The tracking count can be used to determine if this      *<code>BundleTracker</code> has added, modified or removed a bundle by      * comparing a tracking count value previously collected with the current      * tracking count value. If the value has not changed, then no bundle has      * been added, modified or removed from this<code>BundleTracker</code>      * since the previous tracking count was collected.      *       * @return The tracking count for this<code>BundleTracker</code> or -1 if      *         this<code>BundleTracker</code> is not open.      */
DECL|method|getTrackingCount ()
specifier|public
name|int
name|getTrackingCount
parameter_list|()
block|{
specifier|final
name|Tracked
name|t
init|=
name|tracked
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
comment|/* if BundleTracker is not open */
return|return
operator|-
literal|1
return|;
block|}
synchronized|synchronized
init|(
name|t
init|)
block|{
return|return
name|t
operator|.
name|getTrackingCount
argument_list|()
return|;
block|}
block|}
comment|/**      * Inner class which subclasses AbstractTracked. This class is the      *<code>SynchronousBundleListener</code> object for the tracker.      *       * @ThreadSafe      * @since 1.4      */
DECL|class|Tracked
class|class
name|Tracked
extends|extends
name|AbstractTracked
implements|implements
name|SynchronousBundleListener
block|{
comment|/**          *<code>BundleListener</code> method for the<code>BundleTracker</code>          * class. This method must NOT be synchronized to avoid deadlock          * potential.          *           * @param event<code>BundleEvent</code> object from the framework.          */
DECL|method|bundleChanged (final BundleEvent event)
specifier|public
name|void
name|bundleChanged
parameter_list|(
specifier|final
name|BundleEvent
name|event
parameter_list|)
block|{
comment|/*              * Check if we had a delayed call (which could happen when we              * close).              */
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
specifier|final
name|Bundle
name|bundle
init|=
name|event
operator|.
name|getBundle
argument_list|()
decl_stmt|;
specifier|final
name|int
name|state
init|=
name|bundle
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BundleTracker.Tracked.bundleChanged["
operator|+
name|state
operator|+
literal|"]: "
operator|+
name|bundle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|state
operator|&
name|mask
operator|)
operator|!=
literal|0
condition|)
block|{
name|track
argument_list|(
name|bundle
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|/*                  * If the customizer throws an unchecked exception, it is safe                  * to let it propagate                  */
block|}
else|else
block|{
name|untrack
argument_list|(
name|bundle
argument_list|,
name|event
argument_list|)
expr_stmt|;
comment|/*                  * If the customizer throws an unchecked exception, it is safe                  * to let it propagate                  */
block|}
block|}
comment|/**          * Call the specific customizer adding method. This method must not be          * called while synchronized on this object.          *           * @param item Item to be tracked.          * @param related Action related object.          * @return Customized object for the tracked item or<code>null</code>          *         if the item is not to be tracked.          */
DECL|method|customizerAdding (final Object item, final Object related)
name|Object
name|customizerAdding
parameter_list|(
specifier|final
name|Object
name|item
parameter_list|,
specifier|final
name|Object
name|related
parameter_list|)
block|{
return|return
name|customizer
operator|.
name|addingBundle
argument_list|(
operator|(
name|Bundle
operator|)
name|item
argument_list|,
operator|(
name|BundleEvent
operator|)
name|related
argument_list|)
return|;
block|}
comment|/**          * Call the specific customizer modified method. This method must not be          * called while synchronized on this object.          *           * @param item Tracked item.          * @param related Action related object.          * @param object Customized object for the tracked item.          */
DECL|method|customizerModified (final Object item, final Object related, final Object object)
name|void
name|customizerModified
parameter_list|(
specifier|final
name|Object
name|item
parameter_list|,
specifier|final
name|Object
name|related
parameter_list|,
specifier|final
name|Object
name|object
parameter_list|)
block|{
name|customizer
operator|.
name|modifiedBundle
argument_list|(
operator|(
name|Bundle
operator|)
name|item
argument_list|,
operator|(
name|BundleEvent
operator|)
name|related
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**          * Call the specific customizer removed method. This method must not be          * called while synchronized on this object.          *           * @param item Tracked item.          * @param related Action related object.          * @param object Customized object for the tracked item.          */
DECL|method|customizerRemoved (final Object item, final Object related, final Object object)
name|void
name|customizerRemoved
parameter_list|(
specifier|final
name|Object
name|item
parameter_list|,
specifier|final
name|Object
name|related
parameter_list|,
specifier|final
name|Object
name|object
parameter_list|)
block|{
name|customizer
operator|.
name|removedBundle
argument_list|(
operator|(
name|Bundle
operator|)
name|item
argument_list|,
operator|(
name|BundleEvent
operator|)
name|related
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

