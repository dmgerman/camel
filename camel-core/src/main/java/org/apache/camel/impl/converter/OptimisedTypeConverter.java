begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverterOptimised
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|NIOConverterOptimised
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|ObjectConverterOptimised
import|;
end_import

begin_comment
comment|/**  * Optimised type converter for performing the most common conversions using the type converters  * from camel-core.  *<p/>  * The most commonly used type converters has been optimised to be invoked in a faster by  * using direct method calls instead of a calling via a reflection method call via  * {@link InstanceMethodTypeConverter} or {@link StaticMethodTypeConverter}.  * In addition the performance is faster because the type converter is not looked up  * via a key in the type converter {@link Map}; which requires creating a new object  * as they key and perform the map lookup. The caveat is that for any new type converter  * to be included it must be manually added by adding the nessasary source code to the  * optimised classes such as {@link ObjectConverterOptimised}.  */
end_comment

begin_class
DECL|class|OptimisedTypeConverter
specifier|public
class|class
name|OptimisedTypeConverter
block|{
DECL|field|enumTypeConverter
specifier|private
specifier|final
name|EnumTypeConverter
name|enumTypeConverter
init|=
operator|new
name|EnumTypeConverter
argument_list|()
decl_stmt|;
comment|/**      * Attempts to convert the value to the given type      *      * @param type     the type to convert to      * @param exchange the exchange, may be<tt>null</tt>      * @param value    the value      * @return the converted value, or<tt>null</tt> if no optimised core type converter exists to convert      */
DECL|method|convertTo (final Class<?> type, final Exchange exchange, final Object value)
specifier|public
name|Object
name|convertTo
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|answer
decl_stmt|;
comment|// use the optimised type converters and use them in the most commonly used order
name|answer
operator|=
name|ObjectConverterOptimised
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|IOConverterOptimised
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|NIOConverterOptimised
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// specially optimised for enums
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|type
operator|.
name|isEnum
argument_list|()
condition|)
block|{
name|answer
operator|=
name|enumTypeConverter
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

