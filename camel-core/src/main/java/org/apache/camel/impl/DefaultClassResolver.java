begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Default class resolver that uses regular classloaders, and does NOT work in OSGi platforms.  */
end_comment

begin_class
DECL|class|DefaultClassResolver
specifier|public
class|class
name|DefaultClassResolver
implements|implements
name|ClassResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultClassResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|resolveClass (String name)
specifier|public
name|Class
name|resolveClass
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|loadClass
argument_list|(
name|name
argument_list|,
name|DefaultClassResolver
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resolveClass (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|resolveClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Class
name|answer
init|=
name|loadClass
argument_list|(
name|name
argument_list|,
name|DefaultClassResolver
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|answer
return|;
block|}
DECL|method|resolveClass (String name, ClassLoader loader)
specifier|public
name|Class
name|resolveClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
return|return
name|loadClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resolveClass (String name, Class<T> type, ClassLoader loader)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|resolveClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|Class
name|answer
init|=
name|loadClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|)
decl_stmt|;
return|return
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|answer
return|;
block|}
DECL|method|resolveMandatoryClass (String name)
specifier|public
name|Class
name|resolveMandatoryClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
name|answer
init|=
name|resolveClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|resolveMandatoryClass (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|resolveMandatoryClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|T
argument_list|>
name|answer
init|=
name|resolveClass
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|resolveMandatoryClass (String name, ClassLoader loader)
specifier|public
name|Class
name|resolveMandatoryClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
name|answer
init|=
name|resolveClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|resolveMandatoryClass (String name, Class<T> type, ClassLoader loader)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|resolveMandatoryClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|T
argument_list|>
name|answer
init|=
name|resolveClass
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|loadClass (String name, ClassLoader loader)
specifier|protected
name|Class
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
comment|// try context class loader first
name|Class
name|clazz
init|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// then the provided loader
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// and fallback to the loader the loaded the ObjectHelper class
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
DECL|method|doLoadClass (String name, ClassLoader loader)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|doLoadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|loader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot load class: "
operator|+
name|name
operator|+
literal|" using classloader: "
operator|+
name|loader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

