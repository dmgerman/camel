begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A throttle based {@link org.apache.camel.spi.RoutePolicy} which is capable of dynamic  * throttling a route based on number of current inflight exchanges.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|ThrottlingRoutePolicy
specifier|public
class|class
name|ThrottlingRoutePolicy
extends|extends
name|RoutePolicySupport
block|{
comment|// TODO: need to be JMX enabled as well
DECL|enum|ThrottlingScope
specifier|public
enum|enum
name|ThrottlingScope
block|{
DECL|enumConstant|Context
DECL|enumConstant|Route
name|Context
block|,
name|Route
block|}
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|scope
specifier|private
name|ThrottlingScope
name|scope
init|=
name|ThrottlingScope
operator|.
name|Route
decl_stmt|;
DECL|field|maxInflightExchanges
specifier|private
name|int
name|maxInflightExchanges
init|=
literal|1000
decl_stmt|;
DECL|field|resumePercentOfMax
specifier|private
name|int
name|resumePercentOfMax
init|=
literal|70
decl_stmt|;
DECL|field|resumeInflightExchanges
specifier|private
name|int
name|resumeInflightExchanges
init|=
literal|700
decl_stmt|;
DECL|field|loggingLevel
specifier|private
name|LoggingLevel
name|loggingLevel
init|=
name|LoggingLevel
operator|.
name|INFO
decl_stmt|;
DECL|field|logger
specifier|private
name|Logger
name|logger
decl_stmt|;
DECL|method|ThrottlingRoutePolicy ()
specifier|public
name|ThrottlingRoutePolicy
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ThrottlingRoutePolicy["
operator|+
name|maxInflightExchanges
operator|+
literal|" / "
operator|+
name|resumePercentOfMax
operator|+
literal|"% using scope "
operator|+
name|scope
operator|+
literal|"]"
return|;
block|}
DECL|method|onExchangeDone (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeDone
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// this works the best when this logic is executed when the exchange is done
name|Consumer
name|consumer
init|=
name|route
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getSize
argument_list|(
name|consumer
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxInflightExchanges
operator|>
literal|0
operator|&&
name|size
operator|>
name|maxInflightExchanges
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|stopConsumer
argument_list|(
name|size
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// reload size in case a race condition with too many at once being invoked
comment|// so we need to ensure that we read the most current size and start the consumer if we are already to low
name|size
operator|=
name|getSize
argument_list|(
name|consumer
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|<=
name|resumeInflightExchanges
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|startConsumer
argument_list|(
name|size
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getMaxInflightExchanges ()
specifier|public
name|int
name|getMaxInflightExchanges
parameter_list|()
block|{
return|return
name|maxInflightExchanges
return|;
block|}
comment|/**      * Sets the upper limit of number of concurrent inflight exchanges at which point reached      * the throttler should suspend the route.      *<p/>      * Is default 1000.      *      * @param maxInflightExchanges the upper limit of concurrent inflight exchanges      */
DECL|method|setMaxInflightExchanges (int maxInflightExchanges)
specifier|public
name|void
name|setMaxInflightExchanges
parameter_list|(
name|int
name|maxInflightExchanges
parameter_list|)
block|{
name|this
operator|.
name|maxInflightExchanges
operator|=
name|maxInflightExchanges
expr_stmt|;
comment|// recalculate, must be at least at 1
name|this
operator|.
name|resumeInflightExchanges
operator|=
name|Math
operator|.
name|max
argument_list|(
name|resumePercentOfMax
operator|*
name|maxInflightExchanges
operator|/
literal|100
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getResumePercentOfMax ()
specifier|public
name|int
name|getResumePercentOfMax
parameter_list|()
block|{
return|return
name|resumePercentOfMax
return|;
block|}
comment|/**      * Sets at which percentage of the max the throttler should start resuming the route.      *<p/>      * Will by default use 70%.      *      * @param resumePercentOfMax the percentage must be between 0 and 100      */
DECL|method|setResumePercentOfMax (int resumePercentOfMax)
specifier|public
name|void
name|setResumePercentOfMax
parameter_list|(
name|int
name|resumePercentOfMax
parameter_list|)
block|{
if|if
condition|(
name|resumePercentOfMax
argument_list|<
literal|0
operator|||
name|resumePercentOfMax
argument_list|>
literal|100
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"reconnectPercentOfMax must be a percentage between 0 and 100"
argument_list|)
throw|;
block|}
name|this
operator|.
name|resumePercentOfMax
operator|=
name|resumePercentOfMax
expr_stmt|;
comment|// recalculate, must be at least at 1
name|this
operator|.
name|resumeInflightExchanges
operator|=
name|Math
operator|.
name|max
argument_list|(
name|resumePercentOfMax
operator|*
name|maxInflightExchanges
operator|/
literal|100
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getScope ()
specifier|public
name|ThrottlingScope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
comment|/**      * Sets which scope the throttling should be based upon, either route or total scoped.      *      * @param scope the scope      */
DECL|method|setScope (ThrottlingScope scope)
specifier|public
name|void
name|setScope
parameter_list|(
name|ThrottlingScope
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
block|}
DECL|method|getLoggingLevel ()
specifier|public
name|LoggingLevel
name|getLoggingLevel
parameter_list|()
block|{
return|return
name|loggingLevel
return|;
block|}
DECL|method|getLogger ()
specifier|public
name|Logger
name|getLogger
parameter_list|()
block|{
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
name|logger
operator|=
name|createLogger
argument_list|()
expr_stmt|;
block|}
return|return
name|logger
return|;
block|}
comment|/**      * Sets the logger to use for logging throttling activity.      *      * @param logger the logger      */
DECL|method|setLogger (Logger logger)
specifier|public
name|void
name|setLogger
parameter_list|(
name|Logger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
comment|/**      * Sets the logging level to report the throttling activity.      *<p/>      * Is default<tt>INFO</tt> level.      *      * @param loggingLevel the logging level      */
DECL|method|setLoggingLevel (LoggingLevel loggingLevel)
specifier|public
name|void
name|setLoggingLevel
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|)
block|{
name|this
operator|.
name|loggingLevel
operator|=
name|loggingLevel
expr_stmt|;
block|}
DECL|method|createLogger ()
specifier|protected
name|Logger
name|createLogger
parameter_list|()
block|{
return|return
operator|new
name|Logger
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThrottlingRoutePolicy
operator|.
name|class
argument_list|)
argument_list|,
name|getLoggingLevel
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getSize (Consumer consumer, Exchange exchange)
specifier|private
name|int
name|getSize
parameter_list|(
name|Consumer
name|consumer
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|scope
operator|==
name|ThrottlingScope
operator|.
name|Context
condition|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getInflightRepository
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
name|Endpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getInflightRepository
argument_list|()
operator|.
name|size
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
block|}
DECL|method|startConsumer (int size, Consumer consumer)
specifier|private
name|void
name|startConsumer
parameter_list|(
name|int
name|size
parameter_list|,
name|Consumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|started
init|=
name|super
operator|.
name|startConsumer
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
if|if
condition|(
name|started
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
literal|"Throttling consumer: "
operator|+
name|size
operator|+
literal|"<= "
operator|+
name|resumeInflightExchanges
operator|+
literal|" inflight exchange by resuming consumer."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopConsumer (int size, Consumer consumer)
specifier|private
name|void
name|stopConsumer
parameter_list|(
name|int
name|size
parameter_list|,
name|Consumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|stopped
init|=
name|super
operator|.
name|stopConsumer
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopped
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
literal|"Throttling consumer: "
operator|+
name|size
operator|+
literal|"> "
operator|+
name|maxInflightExchanges
operator|+
literal|" inflight exchange by suspending consumer."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

