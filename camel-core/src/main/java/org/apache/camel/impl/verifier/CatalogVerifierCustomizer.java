begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.verifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
package|;
end_package

begin_class
DECL|class|CatalogVerifierCustomizer
specifier|public
class|class
name|CatalogVerifierCustomizer
block|{
DECL|field|includeUnknown
specifier|private
name|boolean
name|includeUnknown
init|=
literal|true
decl_stmt|;
DECL|field|includeRequired
specifier|private
name|boolean
name|includeRequired
init|=
literal|true
decl_stmt|;
DECL|field|includeInvalidBoolean
specifier|private
name|boolean
name|includeInvalidBoolean
init|=
literal|true
decl_stmt|;
DECL|field|includeInvalidInteger
specifier|private
name|boolean
name|includeInvalidInteger
init|=
literal|true
decl_stmt|;
DECL|field|includeInvalidNumber
specifier|private
name|boolean
name|includeInvalidNumber
init|=
literal|true
decl_stmt|;
DECL|field|includeInvalidEnum
specifier|private
name|boolean
name|includeInvalidEnum
init|=
literal|true
decl_stmt|;
DECL|method|isIncludeUnknown ()
specifier|public
name|boolean
name|isIncludeUnknown
parameter_list|()
block|{
return|return
name|includeUnknown
return|;
block|}
DECL|method|setIncludeUnknown (boolean includeUnknown)
specifier|public
name|void
name|setIncludeUnknown
parameter_list|(
name|boolean
name|includeUnknown
parameter_list|)
block|{
name|this
operator|.
name|includeUnknown
operator|=
name|includeUnknown
expr_stmt|;
block|}
DECL|method|isIncludeRequired ()
specifier|public
name|boolean
name|isIncludeRequired
parameter_list|()
block|{
return|return
name|includeRequired
return|;
block|}
DECL|method|setIncludeRequired (boolean includeRequired)
specifier|public
name|void
name|setIncludeRequired
parameter_list|(
name|boolean
name|includeRequired
parameter_list|)
block|{
name|this
operator|.
name|includeRequired
operator|=
name|includeRequired
expr_stmt|;
block|}
DECL|method|isIncludeInvalidBoolean ()
specifier|public
name|boolean
name|isIncludeInvalidBoolean
parameter_list|()
block|{
return|return
name|includeInvalidBoolean
return|;
block|}
DECL|method|setIncludeInvalidBoolean (boolean includeInvalidBoolean)
specifier|public
name|void
name|setIncludeInvalidBoolean
parameter_list|(
name|boolean
name|includeInvalidBoolean
parameter_list|)
block|{
name|this
operator|.
name|includeInvalidBoolean
operator|=
name|includeInvalidBoolean
expr_stmt|;
block|}
DECL|method|isIncludeInvalidInteger ()
specifier|public
name|boolean
name|isIncludeInvalidInteger
parameter_list|()
block|{
return|return
name|includeInvalidInteger
return|;
block|}
DECL|method|setIncludeInvalidInteger (boolean includeInvalidInteger)
specifier|public
name|void
name|setIncludeInvalidInteger
parameter_list|(
name|boolean
name|includeInvalidInteger
parameter_list|)
block|{
name|this
operator|.
name|includeInvalidInteger
operator|=
name|includeInvalidInteger
expr_stmt|;
block|}
DECL|method|isIncludeInvalidNumber ()
specifier|public
name|boolean
name|isIncludeInvalidNumber
parameter_list|()
block|{
return|return
name|includeInvalidNumber
return|;
block|}
DECL|method|setIncludeInvalidNumber (boolean includeInvalidNumber)
specifier|public
name|void
name|setIncludeInvalidNumber
parameter_list|(
name|boolean
name|includeInvalidNumber
parameter_list|)
block|{
name|this
operator|.
name|includeInvalidNumber
operator|=
name|includeInvalidNumber
expr_stmt|;
block|}
DECL|method|isIncludeInvalidEnum ()
specifier|public
name|boolean
name|isIncludeInvalidEnum
parameter_list|()
block|{
return|return
name|includeInvalidEnum
return|;
block|}
DECL|method|setIncludeInvalidEnum (boolean includeInvalidEnum)
specifier|public
name|void
name|setIncludeInvalidEnum
parameter_list|(
name|boolean
name|includeInvalidEnum
parameter_list|)
block|{
name|this
operator|.
name|includeInvalidEnum
operator|=
name|includeInvalidEnum
expr_stmt|;
block|}
DECL|method|excludeUnknown ()
specifier|public
name|CatalogVerifierCustomizer
name|excludeUnknown
parameter_list|()
block|{
name|this
operator|.
name|includeUnknown
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|excludeRequired ()
specifier|public
name|CatalogVerifierCustomizer
name|excludeRequired
parameter_list|()
block|{
name|this
operator|.
name|includeRequired
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|excludeInvalidBoolean ()
specifier|public
name|CatalogVerifierCustomizer
name|excludeInvalidBoolean
parameter_list|()
block|{
name|this
operator|.
name|includeInvalidBoolean
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|excludeInvalidInteger ()
specifier|public
name|CatalogVerifierCustomizer
name|excludeInvalidInteger
parameter_list|()
block|{
name|this
operator|.
name|includeInvalidInteger
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|excludeInvalidNumber ()
specifier|public
name|CatalogVerifierCustomizer
name|excludeInvalidNumber
parameter_list|()
block|{
name|this
operator|.
name|includeInvalidNumber
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|excludeInvalidEnum ()
specifier|public
name|CatalogVerifierCustomizer
name|excludeInvalidEnum
parameter_list|()
block|{
name|this
operator|.
name|includeInvalidEnum
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

