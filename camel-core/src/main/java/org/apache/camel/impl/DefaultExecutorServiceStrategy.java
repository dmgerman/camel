begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ThreadPoolRejectedPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultExecutorServiceStrategy
specifier|public
class|class
name|DefaultExecutorServiceStrategy
extends|extends
name|ServiceSupport
implements|implements
name|ExecutorServiceStrategy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultExecutorServiceStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executorServices
specifier|private
specifier|final
name|List
argument_list|<
name|ExecutorService
argument_list|>
name|executorServices
init|=
operator|new
name|ArrayList
argument_list|<
name|ExecutorService
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|threadNamePattern
specifier|private
name|String
name|threadNamePattern
decl_stmt|;
DECL|field|defaultThreadPoolProfileId
specifier|private
name|String
name|defaultThreadPoolProfileId
decl_stmt|;
DECL|field|threadPoolProfiles
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
name|threadPoolProfiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DefaultExecutorServiceStrategy (CamelContext camelContext)
specifier|public
name|DefaultExecutorServiceStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
comment|// create and register the default profile
name|this
operator|.
name|defaultThreadPoolProfileId
operator|=
literal|"defaultThreadPoolProfile"
expr_stmt|;
name|ThreadPoolProfile
name|defaultProfile
init|=
operator|new
name|ThreadPoolProfileSupport
argument_list|(
name|defaultThreadPoolProfileId
argument_list|)
decl_stmt|;
comment|// the default profile has the following values
name|defaultProfile
operator|.
name|setDefaultProfile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultProfile
operator|.
name|setPoolSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|defaultProfile
operator|.
name|setMaxPoolSize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|defaultProfile
operator|.
name|setKeepAliveTime
argument_list|(
literal|60L
argument_list|)
expr_stmt|;
name|defaultProfile
operator|.
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|defaultProfile
operator|.
name|setMaxQueueSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|defaultProfile
operator|.
name|setRejectedPolicy
argument_list|(
name|ThreadPoolRejectedPolicy
operator|.
name|CallerRuns
argument_list|)
expr_stmt|;
name|registerThreadPoolProfile
argument_list|(
name|defaultProfile
argument_list|)
expr_stmt|;
block|}
DECL|method|registerThreadPoolProfile (ThreadPoolProfile profile)
specifier|public
name|void
name|registerThreadPoolProfile
parameter_list|(
name|ThreadPoolProfile
name|profile
parameter_list|)
block|{
name|threadPoolProfiles
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
DECL|method|getThreadPoolProfile (String id)
specifier|public
name|ThreadPoolProfile
name|getThreadPoolProfile
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|threadPoolProfiles
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|getDefaultThreadPoolProfile ()
specifier|public
name|ThreadPoolProfile
name|getDefaultThreadPoolProfile
parameter_list|()
block|{
return|return
name|getThreadPoolProfile
argument_list|(
name|defaultThreadPoolProfileId
argument_list|)
return|;
block|}
DECL|method|setDefaultThreadPoolProfile (ThreadPoolProfile defaultThreadPoolProfile)
specifier|public
name|void
name|setDefaultThreadPoolProfile
parameter_list|(
name|ThreadPoolProfile
name|defaultThreadPoolProfile
parameter_list|)
block|{
name|ThreadPoolProfile
name|oldProfile
init|=
name|threadPoolProfiles
operator|.
name|remove
argument_list|(
name|defaultThreadPoolProfileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldProfile
operator|!=
literal|null
condition|)
block|{
comment|// the old is no longer default
name|oldProfile
operator|.
name|setDefaultProfile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// fallback and use old default values for new default profile if absent (convention over configuration)
if|if
condition|(
name|defaultThreadPoolProfile
operator|.
name|getKeepAliveTime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|defaultThreadPoolProfile
operator|.
name|setKeepAliveTime
argument_list|(
name|oldProfile
operator|.
name|getKeepAliveTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultThreadPoolProfile
operator|.
name|getMaxPoolSize
argument_list|()
operator|==
literal|null
condition|)
block|{
name|defaultThreadPoolProfile
operator|.
name|setMaxPoolSize
argument_list|(
name|oldProfile
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultThreadPoolProfile
operator|.
name|getRejectedPolicy
argument_list|()
operator|==
literal|null
condition|)
block|{
name|defaultThreadPoolProfile
operator|.
name|setRejectedPolicy
argument_list|(
name|oldProfile
operator|.
name|getRejectedPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultThreadPoolProfile
operator|.
name|getMaxQueueSize
argument_list|()
operator|==
literal|null
condition|)
block|{
name|defaultThreadPoolProfile
operator|.
name|setMaxQueueSize
argument_list|(
name|oldProfile
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultThreadPoolProfile
operator|.
name|getPoolSize
argument_list|()
operator|==
literal|null
condition|)
block|{
name|defaultThreadPoolProfile
operator|.
name|setPoolSize
argument_list|(
name|oldProfile
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultThreadPoolProfile
operator|.
name|getTimeUnit
argument_list|()
operator|==
literal|null
condition|)
block|{
name|defaultThreadPoolProfile
operator|.
name|setTimeUnit
argument_list|(
name|oldProfile
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// validate that all options has been given as its mandatory for a default thread pool profile
comment|// as it is used as fallback for other profiles if they do not have that particular value
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|defaultThreadPoolProfile
operator|.
name|getId
argument_list|()
argument_list|,
literal|"id"
argument_list|,
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|defaultThreadPoolProfile
operator|.
name|getKeepAliveTime
argument_list|()
argument_list|,
literal|"keepAliveTime"
argument_list|,
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|defaultThreadPoolProfile
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|,
literal|"maxPoolSize"
argument_list|,
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|defaultThreadPoolProfile
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|,
literal|"maxQueueSize"
argument_list|,
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|defaultThreadPoolProfile
operator|.
name|getPoolSize
argument_list|()
argument_list|,
literal|"poolSize"
argument_list|,
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|defaultThreadPoolProfile
operator|.
name|getTimeUnit
argument_list|()
argument_list|,
literal|"timeUnit"
argument_list|,
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom DefaultThreadPoolProfile: "
operator|+
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
comment|// and replace with the new default profile
name|this
operator|.
name|defaultThreadPoolProfileId
operator|=
name|defaultThreadPoolProfile
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|// and mark the new profile as default
name|defaultThreadPoolProfile
operator|.
name|setDefaultProfile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|registerThreadPoolProfile
argument_list|(
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
block|}
DECL|method|getThreadName (String name)
specifier|public
name|String
name|getThreadName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ExecutorServiceHelper
operator|.
name|getThreadName
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|getThreadNamePattern ()
specifier|public
name|String
name|getThreadNamePattern
parameter_list|()
block|{
return|return
name|threadNamePattern
return|;
block|}
DECL|method|setThreadNamePattern (String threadNamePattern)
specifier|public
name|void
name|setThreadNamePattern
parameter_list|(
name|String
name|threadNamePattern
parameter_list|)
block|{
comment|// must set camel id here in the pattern and let the other placeholders be resolved by ExecutorServiceHelper
name|String
name|name
init|=
name|threadNamePattern
operator|.
name|replaceFirst
argument_list|(
literal|"\\$\\{camelId\\}"
argument_list|,
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|threadNamePattern
operator|=
name|name
expr_stmt|;
block|}
DECL|method|lookup (Object source, String name, String executorServiceRef)
specifier|public
name|ExecutorService
name|lookup
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|executorServiceRef
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|executorServiceRef
argument_list|,
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up ExecutorService with ref: "
operator|+
name|executorServiceRef
operator|+
literal|" and found it from Registry: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// try to see if we got a thread pool profile with that id
name|answer
operator|=
name|newThreadPool
argument_list|(
name|source
argument_list|,
name|name
argument_list|,
name|executorServiceRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up ExecutorService with ref: "
operator|+
name|executorServiceRef
operator|+
literal|" and found a matching ThreadPoolProfile to create the ExecutorService: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|lookupScheduled (Object source, String name, String executorServiceRef)
specifier|public
name|ScheduledExecutorService
name|lookupScheduled
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|executorServiceRef
parameter_list|)
block|{
name|ScheduledExecutorService
name|answer
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|executorServiceRef
argument_list|,
name|ScheduledExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up ScheduledExecutorService with ref: "
operator|+
name|executorServiceRef
operator|+
literal|" and found it from Registry: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|ThreadPoolProfile
name|profile
init|=
name|getThreadPoolProfile
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|profile
operator|!=
literal|null
condition|)
block|{
name|int
name|poolSize
init|=
name|profile
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
name|answer
operator|=
name|newScheduledThreadPool
argument_list|(
name|source
argument_list|,
name|name
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up ScheduledExecutorService with ref: "
operator|+
name|executorServiceRef
operator|+
literal|" and found a matching ThreadPoolProfile to create the ScheduledExecutorService: "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|newDefaultThreadPool (Object source, String name)
specifier|public
name|ExecutorService
name|newDefaultThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ThreadPoolProfile
name|profile
init|=
name|getDefaultThreadPoolProfile
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|profile
argument_list|,
literal|"DefaultThreadPoolProfile"
argument_list|)
expr_stmt|;
return|return
name|newThreadPool
argument_list|(
name|source
argument_list|,
name|name
argument_list|,
name|profile
operator|.
name|getPoolSize
argument_list|()
argument_list|,
name|profile
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|,
name|profile
operator|.
name|getKeepAliveTime
argument_list|()
argument_list|,
name|profile
operator|.
name|getTimeUnit
argument_list|()
argument_list|,
name|profile
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|,
name|profile
operator|.
name|getRejectedExecutionHandler
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|newThreadPool (Object source, String name, String threadPoolProfileId)
specifier|public
name|ExecutorService
name|newThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|threadPoolProfileId
parameter_list|)
block|{
name|ThreadPoolProfile
name|defaultProfile
init|=
name|getDefaultThreadPoolProfile
argument_list|()
decl_stmt|;
name|ThreadPoolProfile
name|profile
init|=
name|getThreadPoolProfile
argument_list|(
name|threadPoolProfileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|profile
operator|!=
literal|null
condition|)
block|{
comment|// fallback to use values from default profile if not specified
name|Integer
name|poolSize
init|=
name|profile
operator|.
name|getPoolSize
argument_list|()
operator|!=
literal|null
condition|?
name|profile
operator|.
name|getPoolSize
argument_list|()
else|:
name|defaultProfile
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
name|Integer
name|maxPoolSize
init|=
name|profile
operator|.
name|getMaxPoolSize
argument_list|()
operator|!=
literal|null
condition|?
name|profile
operator|.
name|getMaxPoolSize
argument_list|()
else|:
name|defaultProfile
operator|.
name|getMaxPoolSize
argument_list|()
decl_stmt|;
name|Long
name|keepAliveTime
init|=
name|profile
operator|.
name|getKeepAliveTime
argument_list|()
operator|!=
literal|null
condition|?
name|profile
operator|.
name|getKeepAliveTime
argument_list|()
else|:
name|defaultProfile
operator|.
name|getKeepAliveTime
argument_list|()
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|profile
operator|.
name|getTimeUnit
argument_list|()
operator|!=
literal|null
condition|?
name|profile
operator|.
name|getTimeUnit
argument_list|()
else|:
name|defaultProfile
operator|.
name|getTimeUnit
argument_list|()
decl_stmt|;
name|Integer
name|maxQueueSize
init|=
name|profile
operator|.
name|getMaxQueueSize
argument_list|()
operator|!=
literal|null
condition|?
name|profile
operator|.
name|getMaxQueueSize
argument_list|()
else|:
name|defaultProfile
operator|.
name|getMaxQueueSize
argument_list|()
decl_stmt|;
name|RejectedExecutionHandler
name|handler
init|=
name|profile
operator|.
name|getRejectedExecutionHandler
argument_list|()
operator|!=
literal|null
condition|?
name|profile
operator|.
name|getRejectedExecutionHandler
argument_list|()
else|:
name|defaultProfile
operator|.
name|getRejectedExecutionHandler
argument_list|()
decl_stmt|;
comment|// create the pool
return|return
name|newThreadPool
argument_list|(
name|source
argument_list|,
name|name
argument_list|,
name|poolSize
argument_list|,
name|maxPoolSize
argument_list|,
name|keepAliveTime
argument_list|,
name|timeUnit
argument_list|,
name|maxQueueSize
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
comment|// no profile with that id
return|return
literal|null
return|;
block|}
block|}
DECL|method|newCachedThreadPool (Object source, String name)
specifier|public
name|ExecutorService
name|newCachedThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newCachedThreadPool
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new cached thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|newScheduledThreadPool (Object source, String name)
specifier|public
name|ScheduledExecutorService
name|newScheduledThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|int
name|poolSize
init|=
name|getDefaultThreadPoolProfile
argument_list|()
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
return|return
name|newScheduledThreadPool
argument_list|(
name|source
argument_list|,
name|name
argument_list|,
name|poolSize
argument_list|)
return|;
block|}
DECL|method|newScheduledThreadPool (Object source, String name, int poolSize)
specifier|public
name|ScheduledExecutorService
name|newScheduledThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
name|ScheduledExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newScheduledThreadPool
argument_list|(
name|poolSize
argument_list|,
name|threadNamePattern
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new scheduled thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". [poolSize="
operator|+
name|poolSize
operator|+
literal|"]. -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|newFixedThreadPool (Object source, String name, int poolSize)
specifier|public
name|ExecutorService
name|newFixedThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newFixedThreadPool
argument_list|(
name|poolSize
argument_list|,
name|threadNamePattern
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new fixed thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". [poolSize="
operator|+
name|poolSize
operator|+
literal|"]. -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|newSingleThreadExecutor (Object source, String name)
specifier|public
name|ExecutorService
name|newSingleThreadExecutor
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newSingleThreadExecutor
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new single thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|newSynchronousThreadPool (Object source, String name)
specifier|public
name|ExecutorService
name|newSynchronousThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newSynchronousThreadPool
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new synchronous thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|newThreadPool (Object source, String name, int corePoolSize, int maxPoolSize)
specifier|public
name|ExecutorService
name|newThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|corePoolSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newThreadPool
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|,
name|corePoolSize
argument_list|,
name|maxPoolSize
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". [poolSize="
operator|+
name|corePoolSize
operator|+
literal|", maxPoolSize="
operator|+
name|maxPoolSize
operator|+
literal|"] -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|newThreadPool (Object source, String name, int corePoolSize, int maxPoolSize, int maxQueueSize)
specifier|public
name|ExecutorService
name|newThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|corePoolSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|,
name|int
name|maxQueueSize
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newThreadPool
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|,
name|corePoolSize
argument_list|,
name|maxPoolSize
argument_list|,
name|maxQueueSize
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". [poolSize="
operator|+
name|corePoolSize
operator|+
literal|", maxPoolSize="
operator|+
name|maxPoolSize
operator|+
literal|", maxQueueSize="
operator|+
name|maxQueueSize
operator|+
literal|"] -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|newThreadPool (Object source, String name, int corePoolSize, int maxPoolSize, long keepAliveTime, TimeUnit timeUnit, int maxQueueSize, RejectedExecutionHandler rejectedExecutionHandler, boolean daemon)
specifier|public
name|ExecutorService
name|newThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|corePoolSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|int
name|maxQueueSize
parameter_list|,
name|RejectedExecutionHandler
name|rejectedExecutionHandler
parameter_list|,
name|boolean
name|daemon
parameter_list|)
block|{
comment|// the thread name must not be null
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|name
argument_list|,
literal|"ThreadName"
argument_list|)
expr_stmt|;
comment|// If we set the corePoolSize to be 0, the whole camel application will hang in JDK5
comment|// just add a check here to throw the IllegalArgumentException
if|if
condition|(
name|corePoolSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The corePoolSize can't be lower than 1"
argument_list|)
throw|;
block|}
name|ExecutorService
name|answer
init|=
name|ExecutorServiceHelper
operator|.
name|newThreadPool
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|,
name|corePoolSize
argument_list|,
name|maxPoolSize
argument_list|,
name|keepAliveTime
argument_list|,
name|timeUnit
argument_list|,
name|maxQueueSize
argument_list|,
name|rejectedExecutionHandler
argument_list|,
name|daemon
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new thread pool for source: "
operator|+
name|source
operator|+
literal|" with name: "
operator|+
name|name
operator|+
literal|". [poolSize="
operator|+
name|corePoolSize
operator|+
literal|", maxPoolSize="
operator|+
name|maxPoolSize
operator|+
literal|", keepAliveTime="
operator|+
name|keepAliveTime
operator|+
literal|" "
operator|+
name|timeUnit
operator|+
literal|", maxQueueSize="
operator|+
name|maxQueueSize
operator|+
literal|", rejectedExecutionHandler="
operator|+
name|rejectedExecutionHandler
operator|+
literal|", daemon="
operator|+
name|daemon
operator|+
literal|"] -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|shutdown (ExecutorService executorService)
specifier|public
name|void
name|shutdown
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|executorService
argument_list|,
literal|"executorService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutdown ExecutorService: "
operator|+
name|executorService
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Shutdown ExecutorService: "
operator|+
name|executorService
operator|+
literal|" complete."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdownNow (ExecutorService executorService)
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|executorService
argument_list|,
literal|"executorService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ShutdownNow ExecutorService: "
operator|+
name|executorService
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Runnable
argument_list|>
name|answer
init|=
name|executorService
operator|.
name|shutdownNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"ShutdownNow ExecutorService: "
operator|+
name|executorService
operator|+
literal|" complete."
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|onThreadPoolCreated (ExecutorService executorService)
specifier|private
name|void
name|onThreadPoolCreated
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
comment|// add to internal list of thread pools
name|executorServices
operator|.
name|add
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
comment|// let lifecycle strategy be notified as well which can let it be managed in JMX as well
if|if
condition|(
name|executorService
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|ThreadPoolExecutor
name|threadPool
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|executorService
decl_stmt|;
for|for
control|(
name|LifecycleStrategy
name|lifecycle
range|:
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
name|lifecycle
operator|.
name|onThreadPoolAdd
argument_list|(
name|camelContext
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now call strategy to allow custom logic
name|onNewExecutorService
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
comment|/**      * Strategy callback when a new {@link java.util.concurrent.ExecutorService} have been created.      *      * @param executorService the created {@link java.util.concurrent.ExecutorService}       */
DECL|method|onNewExecutorService (ExecutorService executorService)
specifier|protected
name|void
name|onNewExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|threadNamePattern
operator|==
literal|null
condition|)
block|{
comment|// set default name pattern which includes the camel context name
name|threadNamePattern
operator|=
literal|"Camel ("
operator|+
name|camelContext
operator|.
name|getName
argument_list|()
operator|+
literal|") thread #${counter} - ${name}"
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// shutdown all executor services
for|for
control|(
name|ExecutorService
name|executorService
range|:
name|executorServices
control|)
block|{
comment|// only log if something goes wrong as we want to shutdown them all
try|try
block|{
name|shutdownNow
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred during shutdown of ExecutorService: "
operator|+
name|executorService
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|executorServices
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// do not clear the default profile as we could potential be restarted
name|Iterator
argument_list|<
name|ThreadPoolProfile
argument_list|>
name|it
init|=
name|threadPoolProfiles
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ThreadPoolProfile
name|profile
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|profile
operator|.
name|isDefaultProfile
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

