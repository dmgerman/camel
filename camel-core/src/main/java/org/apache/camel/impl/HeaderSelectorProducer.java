begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvokeOnHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvokeOnHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A selector-based produced which uses an header value to determine which processor  * should be invoked.  */
end_comment

begin_class
DECL|class|HeaderSelectorProducer
specifier|public
class|class
name|HeaderSelectorProducer
extends|extends
name|BaseSelectorProducer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HeaderSelectorProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|header
specifier|private
specifier|final
name|String
name|header
decl_stmt|;
DECL|field|defaultHeaderValue
specifier|private
specifier|final
name|String
name|defaultHeaderValue
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|Object
name|target
decl_stmt|;
DECL|field|handlers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
argument_list|>
name|handlers
decl_stmt|;
DECL|method|HeaderSelectorProducer (Endpoint endpoint, String header)
specifier|public
name|HeaderSelectorProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|header
parameter_list|)
block|{
name|this
argument_list|(
name|endpoint
argument_list|,
name|header
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|HeaderSelectorProducer (Endpoint endpoint, String header, Object target)
specifier|public
name|HeaderSelectorProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|header
parameter_list|,
name|Object
name|target
parameter_list|)
block|{
name|this
argument_list|(
name|endpoint
argument_list|,
name|header
argument_list|,
literal|null
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
DECL|method|HeaderSelectorProducer (Endpoint endpoint, String header, String defaultHeaderValue)
specifier|public
name|HeaderSelectorProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|header
parameter_list|,
name|String
name|defaultHeaderValue
parameter_list|)
block|{
name|this
argument_list|(
name|endpoint
argument_list|,
name|header
argument_list|,
name|defaultHeaderValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|HeaderSelectorProducer (Endpoint endpoint, String header, String defaultHeaderValue, Object target)
specifier|public
name|HeaderSelectorProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|header
parameter_list|,
name|String
name|defaultHeaderValue
parameter_list|,
name|Object
name|target
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|defaultHeaderValue
operator|=
name|defaultHeaderValue
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
operator|!=
literal|null
condition|?
name|target
else|:
name|this
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|InvokeOnHeaders
name|annotation
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|InvokeOnHeaders
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InvokeOnHeader
name|processor
range|:
name|annotation
operator|.
name|value
argument_list|()
control|)
block|{
name|bind
argument_list|(
name|processor
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|bind
argument_list|(
name|method
operator|.
name|getAnnotation
argument_list|(
name|InvokeOnHeader
operator|.
name|class
argument_list|)
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|handlers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProcessor (Exchange exchange)
specifier|protected
name|Processor
name|getProcessor
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|action
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|header
argument_list|,
name|defaultHeaderValue
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchHeaderException
argument_list|(
name|exchange
argument_list|,
name|header
argument_list|,
name|String
operator|.
name|class
argument_list|)
throw|;
block|}
return|return
name|handlers
operator|.
name|get
argument_list|(
name|action
argument_list|)
return|;
block|}
DECL|method|onMissingProcessor (Exchange exchange)
specifier|protected
name|void
name|onMissingProcessor
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported operation "
operator|+
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|header
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|bind (String key, Processor processor)
specifier|protected
specifier|final
name|void
name|bind
parameter_list|(
name|String
name|key
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
if|if
condition|(
name|handlers
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"A processor is already set for action {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|handlers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|bind (InvokeOnHeader handler, final Method method)
specifier|private
name|void
name|bind
parameter_list|(
name|InvokeOnHeader
name|handler
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|!=
literal|null
operator|&&
name|method
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"bind key={}, class={}, method={}, type={}"
argument_list|,
name|handler
operator|.
name|value
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|Message
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|bind
argument_list|(
name|handler
operator|.
name|value
argument_list|()
argument_list|,
name|e
lambda|->
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|e
operator|.
name|getIn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bind
argument_list|(
name|handler
operator|.
name|value
argument_list|()
argument_list|,
name|e
lambda|->
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

