begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|transformer
operator|.
name|TransformerKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|TransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TransformerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link org.apache.camel.spi.TransformerRegistry}.  */
end_comment

begin_class
DECL|class|DefaultTransformerRegistry
specifier|public
class|class
name|DefaultTransformerRegistry
extends|extends
name|AbstractDynamicRegistry
argument_list|<
name|TransformerKey
argument_list|,
name|Transformer
argument_list|>
implements|implements
name|TransformerRegistry
argument_list|<
name|TransformerKey
argument_list|>
block|{
DECL|field|aliasMap
specifier|private
specifier|final
name|Map
argument_list|<
name|TransformerKey
argument_list|,
name|TransformerKey
argument_list|>
name|aliasMap
decl_stmt|;
DECL|method|DefaultTransformerRegistry (CamelContext context)
specifier|public
name|DefaultTransformerRegistry
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|context
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|DefaultTransformerRegistry (CamelContext context, List<TransformerDefinition> definitions)
specifier|public
name|DefaultTransformerRegistry
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|definitions
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|context
argument_list|,
name|CamelContextHelper
operator|.
name|getMaximumTransformerCacheSize
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliasMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|TransformerDefinition
name|def
range|:
name|definitions
control|)
block|{
name|Transformer
name|transformer
init|=
name|def
operator|.
name|createTransformer
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|context
operator|.
name|addService
argument_list|(
name|transformer
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|createKey
argument_list|(
name|def
argument_list|)
argument_list|,
name|transformer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resolveTransformer (TransformerKey key)
specifier|public
name|Transformer
name|resolveTransformer
parameter_list|(
name|TransformerKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|key
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
name|key
operator|.
name|getTo
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// try exact match
name|Transformer
name|answer
init|=
name|get
argument_list|(
name|aliasMap
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|||
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|key
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|answer
return|;
block|}
comment|// try wildcard match for next - add an alias if matched
name|TransformerKey
name|alias
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getFrom
argument_list|()
operator|!=
literal|null
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|key
operator|.
name|getFrom
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|alias
operator|=
operator|new
name|TransformerKey
argument_list|(
operator|new
name|DataType
argument_list|(
name|key
operator|.
name|getFrom
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
argument_list|,
name|key
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|=
name|get
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|key
operator|.
name|getTo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|alias
operator|=
operator|new
name|TransformerKey
argument_list|(
name|key
operator|.
name|getFrom
argument_list|()
argument_list|,
operator|new
name|DataType
argument_list|(
name|key
operator|.
name|getTo
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|=
name|get
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|key
operator|.
name|getFrom
argument_list|()
operator|!=
literal|null
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|key
operator|.
name|getFrom
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|key
operator|.
name|getTo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|alias
operator|=
operator|new
name|TransformerKey
argument_list|(
operator|new
name|DataType
argument_list|(
name|key
operator|.
name|getFrom
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
argument_list|,
operator|new
name|DataType
argument_list|(
name|key
operator|.
name|getTo
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|=
name|get
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|key
operator|.
name|getFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|alias
operator|=
operator|new
name|TransformerKey
argument_list|(
name|key
operator|.
name|getFrom
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|=
name|get
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|alias
operator|=
operator|new
name|TransformerKey
argument_list|(
name|key
operator|.
name|getTo
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|=
name|get
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|aliasMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|isStatic (String scheme)
specifier|public
name|boolean
name|isStatic
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
return|return
name|isStatic
argument_list|(
operator|new
name|TransformerKey
argument_list|(
name|scheme
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isStatic (DataType from, DataType to)
specifier|public
name|boolean
name|isStatic
parameter_list|(
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
block|{
return|return
name|isStatic
argument_list|(
operator|new
name|TransformerKey
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDynamic (String scheme)
specifier|public
name|boolean
name|isDynamic
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
return|return
name|isDynamic
argument_list|(
operator|new
name|TransformerKey
argument_list|(
name|scheme
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDynamic (DataType from, DataType to)
specifier|public
name|boolean
name|isDynamic
parameter_list|(
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
block|{
return|return
name|isDynamic
argument_list|(
operator|new
name|TransformerKey
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TransformerRegistry for "
operator|+
name|context
operator|.
name|getName
argument_list|()
operator|+
literal|", capacity: "
operator|+
name|maxCacheSize
return|;
block|}
DECL|method|createKey (TransformerDefinition def)
specifier|private
name|TransformerKey
name|createKey
parameter_list|(
name|TransformerDefinition
name|def
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|def
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
operator|new
name|TransformerKey
argument_list|(
name|def
operator|.
name|getScheme
argument_list|()
argument_list|)
else|:
operator|new
name|TransformerKey
argument_list|(
operator|new
name|DataType
argument_list|(
name|def
operator|.
name|getFromType
argument_list|()
argument_list|)
argument_list|,
operator|new
name|DataType
argument_list|(
name|def
operator|.
name|getToType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

