begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoFactoryAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_comment
comment|/**  * Default {@link ProcessorFactory} that supports using 3rd party Camel components to implement the EIP {@link Processor}.  *<p/>  * The component should use the {@link FactoryFinder} SPI to specify a file with the name of the EIP model in the  * directory of {@link #RESOURCE_PATH}. The file should contain a property with key<tt>class</tt> that refers  * to the name of the {@link ProcessorFactory} the Camel component implement, which gets called for creating  * the {@link Processor}s for the EIP.  *<p/>  * The Hystrix EIP is such an example where {@link org.apache.camel.model.HystrixDefinition} is implemented  * in the<tt>camel-hystrix</tt> component.  */
end_comment

begin_class
DECL|class|DefaultProcessorFactory
specifier|public
class|class
name|DefaultProcessorFactory
implements|implements
name|ProcessorFactory
block|{
DECL|field|RESOURCE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCE_PATH
init|=
literal|"META-INF/services/org/apache/camel/model/"
decl_stmt|;
annotation|@
name|Override
DECL|method|createChildProcessor (RouteContext routeContext, ProcessorDefinition<?> definition, boolean mandatory)
specifier|public
name|Processor
name|createChildProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|FactoryFinder
name|finder
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getFactoryFinder
argument_list|(
name|RESOURCE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|finder
operator|!=
literal|null
condition|)
block|{
name|Object
name|object
init|=
name|finder
operator|.
name|newInstance
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|ProcessorFactory
condition|)
block|{
name|ProcessorFactory
name|pc
init|=
operator|(
name|ProcessorFactory
operator|)
name|object
decl_stmt|;
return|return
name|pc
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|,
name|mandatory
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// ignore there is no custom factory
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext, ProcessorDefinition<?> definition)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|FactoryFinder
name|finder
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getFactoryFinder
argument_list|(
name|RESOURCE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|finder
operator|!=
literal|null
condition|)
block|{
name|Object
name|object
init|=
name|finder
operator|.
name|newInstance
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|ProcessorFactory
condition|)
block|{
name|ProcessorFactory
name|pc
init|=
operator|(
name|ProcessorFactory
operator|)
name|object
decl_stmt|;
return|return
name|pc
operator|.
name|createProcessor
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// ignore there is no custom factory
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

