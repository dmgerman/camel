begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements {@link org.apache.camel.EndpointConfiguration} for Endpoint implementations  * which are annotated with {@link org.apache.camel.spi.UriEndpoint}  * to use the {@link org.apache.camel.spi.UriParam} and {@link org.apache.camel.spi.UriParams} annotations  * to denote its parameters which can be specified via URI query parameters.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|UriComponentConfiguration
specifier|public
class|class
name|UriComponentConfiguration
extends|extends
name|ComponentConfigurationSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UriComponentConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpointClass
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|endpointClass
decl_stmt|;
DECL|field|parameterConfigurationMap
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|parameterConfigurationMap
decl_stmt|;
DECL|field|strictOnParameterNames
specifier|private
name|boolean
name|strictOnParameterNames
init|=
literal|true
decl_stmt|;
DECL|method|UriComponentConfiguration (Component component, Class<? extends Endpoint> endpointClass, SortedMap<String, ParameterConfiguration> parameterConfigurationMap)
specifier|public
name|UriComponentConfiguration
parameter_list|(
name|Component
name|component
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|endpointClass
parameter_list|,
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|parameterConfigurationMap
parameter_list|)
block|{
name|super
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpointClass
operator|=
name|endpointClass
expr_stmt|;
name|this
operator|.
name|parameterConfigurationMap
operator|=
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|parameterConfigurationMap
argument_list|)
expr_stmt|;
block|}
DECL|method|UriComponentConfiguration (Component component, Class<? extends Endpoint> endpointClass)
specifier|public
name|UriComponentConfiguration
parameter_list|(
name|Component
name|component
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|endpointClass
parameter_list|)
block|{
name|this
argument_list|(
name|component
argument_list|,
name|endpointClass
argument_list|,
name|UriEndpointComponent
operator|.
name|createParameterConfigurationMap
argument_list|(
name|endpointClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|UriComponentConfiguration (UriEndpointComponent component)
specifier|public
name|UriComponentConfiguration
parameter_list|(
name|UriEndpointComponent
name|component
parameter_list|)
block|{
name|this
argument_list|(
name|component
argument_list|,
name|component
operator|.
name|getEndpointClass
argument_list|()
argument_list|,
name|component
operator|.
name|getParameterConfigurationMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpointParameter (Endpoint endpoint, String name)
specifier|public
name|Object
name|getEndpointParameter
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
name|ParameterConfiguration
name|config
init|=
name|getParameterConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// lets try get the property regardless of if this maps to a valid property name
comment|// then if the introspection fails we will get a valid error otherwise
comment|// lets raise a warning afterwards that we should update the metadata on the endpoint class
name|Object
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|IntrospectionSupport
operator|.
name|getProperty
argument_list|(
name|endpoint
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to get property '"
operator|+
name|name
operator|+
literal|"' on "
operator|+
name|endpoint
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|unknownPropertyName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|setEndpointParameter (Endpoint endpoint, String name, Object value)
specifier|public
name|void
name|setEndpointParameter
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|RuntimeCamelException
block|{
name|ParameterConfiguration
name|config
init|=
name|getParameterConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// lets try set the property regardless of if this maps to a valid property name
comment|// then if the injection fails we will get a valid error otherwise
comment|// lets raise a warning afterwards that we should update the metadata on the endpoint class
try|try
block|{
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|endpoint
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to set property '"
operator|+
name|name
operator|+
literal|"' on "
operator|+
name|endpoint
operator|+
literal|" to value "
operator|+
name|value
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|unknownPropertyName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|component
operator|.
name|getCamelContext
argument_list|()
return|;
block|}
DECL|method|getEndpointClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Endpoint
argument_list|>
name|getEndpointClass
parameter_list|()
block|{
return|return
name|endpointClass
return|;
block|}
DECL|method|isStrictOnParameterNames ()
specifier|public
name|boolean
name|isStrictOnParameterNames
parameter_list|()
block|{
return|return
name|strictOnParameterNames
return|;
block|}
comment|/**      * Strict mode is enabled by default but if disabled then invalid parameter names      * will not result in exceptions but we will just log warnings about their use      *      * @param strictOnParameterNames whether to throw exceptions if invalid      *                               parameter names are used or not      */
DECL|method|setStrictOnParameterNames (boolean strictOnParameterNames)
specifier|public
name|void
name|setStrictOnParameterNames
parameter_list|(
name|boolean
name|strictOnParameterNames
parameter_list|)
block|{
name|this
operator|.
name|strictOnParameterNames
operator|=
name|strictOnParameterNames
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParameterConfigurationMap ()
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|getParameterConfigurationMap
parameter_list|()
block|{
return|return
name|parameterConfigurationMap
return|;
block|}
annotation|@
name|Override
DECL|method|validatePropertyName (String name)
specifier|protected
name|void
name|validatePropertyName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ParameterConfiguration
name|parameterConfiguration
init|=
name|getParameterConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameterConfiguration
operator|==
literal|null
condition|)
block|{
name|unknownPropertyName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validatePropertyValue (String name, Object value)
specifier|protected
name|Object
name|validatePropertyValue
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|ParameterConfiguration
name|parameterConfiguration
init|=
name|getParameterConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameterConfiguration
operator|==
literal|null
condition|)
block|{
name|unknownPropertyName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|parameterConfiguration
operator|.
name|getParameterType
argument_list|()
decl_stmt|;
return|return
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|parameterType
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
DECL|method|unknownPropertyName (String name)
specifier|protected
name|void
name|unknownPropertyName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|isStrictOnParameterNames
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidPropertyException
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|endpointClass
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using parameter "
operator|+
name|name
operator|+
literal|" on endpoint "
operator|+
name|getEndpointClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" which does not have a @UriParam annotation! "
operator|+
literal|"Please add the @UriParam annotation to the "
operator|+
name|name
operator|+
literal|" field"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

