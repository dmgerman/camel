begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ThreadPoolRejectedPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ThreadPoolBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OptionalIdentifiedDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CamelThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|DefaultExecutorServiceManager
specifier|public
class|class
name|DefaultExecutorServiceManager
extends|extends
name|ServiceSupport
implements|implements
name|ExecutorServiceManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultExecutorServiceManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executorServices
specifier|private
specifier|final
name|List
argument_list|<
name|ExecutorService
argument_list|>
name|executorServices
init|=
operator|new
name|ArrayList
argument_list|<
name|ExecutorService
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|threadNamePattern
specifier|private
name|String
name|threadNamePattern
decl_stmt|;
DECL|field|threadPoolProfiles
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
name|threadPoolProfiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|defaultProfile
specifier|private
name|ThreadPoolProfile
name|defaultProfile
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|threadPoolFactory
specifier|private
name|ThreadPoolFactory
name|threadPoolFactory
decl_stmt|;
DECL|method|DefaultExecutorServiceManager (CamelContext camelContext, ThreadPoolFactory threadPoolFactory)
specifier|public
name|DefaultExecutorServiceManager
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ThreadPoolFactory
name|threadPoolFactory
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|threadPoolFactory
operator|=
name|threadPoolFactory
expr_stmt|;
name|this
operator|.
name|defaultProfile
operator|=
operator|new
name|ThreadPoolBuilder
argument_list|(
literal|"defaultThreadPoolProfile"
argument_list|)
operator|.
name|poolSize
argument_list|(
literal|10
argument_list|)
operator|.
name|maxPoolSize
argument_list|(
literal|20
argument_list|)
operator|.
name|keepAliveTime
argument_list|(
literal|60L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|maxQueueSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|rejectedPolicy
argument_list|(
name|ThreadPoolRejectedPolicy
operator|.
name|CallerRuns
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|registerThreadPoolProfile (ThreadPoolProfile profile)
specifier|public
name|void
name|registerThreadPoolProfile
parameter_list|(
name|ThreadPoolProfile
name|profile
parameter_list|)
block|{
name|threadPoolProfiles
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
DECL|method|getThreadPoolProfile (String id)
specifier|public
name|ThreadPoolProfile
name|getThreadPoolProfile
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|threadPoolProfiles
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|getDefaultThreadPoolProfile ()
specifier|public
name|ThreadPoolProfile
name|getDefaultThreadPoolProfile
parameter_list|()
block|{
return|return
name|defaultProfile
return|;
block|}
DECL|method|setDefaultThreadPoolProfile (ThreadPoolProfile defaultThreadPoolProfile)
specifier|public
name|void
name|setDefaultThreadPoolProfile
parameter_list|(
name|ThreadPoolProfile
name|defaultThreadPoolProfile
parameter_list|)
block|{
name|defaultThreadPoolProfile
operator|.
name|addDefaults
argument_list|(
name|this
operator|.
name|defaultProfile
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultProfile
operator|=
name|defaultThreadPoolProfile
expr_stmt|;
name|this
operator|.
name|defaultProfile
operator|.
name|setDefaultProfile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom DefaultThreadPoolProfile: "
operator|+
name|defaultThreadPoolProfile
argument_list|)
expr_stmt|;
block|}
DECL|method|getThreadNamePattern ()
specifier|public
name|String
name|getThreadNamePattern
parameter_list|()
block|{
return|return
name|threadNamePattern
return|;
block|}
DECL|method|setThreadNamePattern (String threadNamePattern)
specifier|public
name|void
name|setThreadNamePattern
parameter_list|(
name|String
name|threadNamePattern
parameter_list|)
block|{
comment|// must set camel id here in the pattern and let the other placeholders be resolved by ExecutorServiceHelper
name|String
name|name
init|=
name|threadNamePattern
operator|.
name|replaceFirst
argument_list|(
literal|"\\$\\{camelId\\}"
argument_list|,
name|this
operator|.
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|threadNamePattern
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveThreadName (String name)
specifier|public
name|String
name|resolveThreadName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ThreadHelper
operator|.
name|resolveThreadName
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|newCachedThreadPool (Object source, String name)
specifier|public
name|ExecutorService
name|newCachedThreadPool
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ExecutorService
name|answer
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|CamelThreadFactory
argument_list|(
name|threadNamePattern
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|answer
argument_list|,
name|source
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new cached thread pool for source: {} with name: {}. -> {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|source
block|,
name|name
block|,
name|answer
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|shutdown (ExecutorService executorService)
specifier|public
name|void
name|shutdown
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|executorService
argument_list|,
literal|"executorService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutdown ExecutorService: {}"
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Shutdown ExecutorService: {} complete."
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdownNow (ExecutorService executorService)
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|executorService
argument_list|,
literal|"executorService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|executorService
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"ShutdownNow ExecutorService: {}"
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|answer
init|=
name|executorService
operator|.
name|shutdownNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"ShutdownNow ExecutorService: {} complete."
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Invoked when a new thread pool is created.      * This implementation will invoke the {@link LifecycleStrategy#onThreadPoolAdd(org.apache.camel.CamelContext,      * java.util.concurrent.ThreadPoolExecutor, String, String, String, String) LifecycleStrategy.onThreadPoolAdd} method,      * which for example will enlist the thread pool in JMX management.      *      * @param executorService the thread pool      * @param source          the source to use the thread pool      * @param threadPoolProfileId profile id, if the thread pool was created from a thread pool profile      */
DECL|method|onThreadPoolCreated (ExecutorService executorService, Object source, String threadPoolProfileId)
specifier|private
name|void
name|onThreadPoolCreated
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|,
name|Object
name|source
parameter_list|,
name|String
name|threadPoolProfileId
parameter_list|)
block|{
comment|// add to internal list of thread pools
name|executorServices
operator|.
name|add
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|String
name|id
decl_stmt|;
name|String
name|sourceId
init|=
literal|null
decl_stmt|;
name|String
name|routeId
init|=
literal|null
decl_stmt|;
comment|// extract id from source
if|if
condition|(
name|source
operator|instanceof
name|OptionalIdentifiedDefinition
condition|)
block|{
name|id
operator|=
operator|(
operator|(
name|OptionalIdentifiedDefinition
operator|)
name|source
operator|)
operator|.
name|idOrCreate
argument_list|(
name|this
operator|.
name|camelContext
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
expr_stmt|;
comment|// and let source be the short name of the pattern
name|sourceId
operator|=
operator|(
operator|(
name|OptionalIdentifiedDefinition
operator|)
name|source
operator|)
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|String
condition|)
block|{
name|id
operator|=
operator|(
name|String
operator|)
name|source
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
comment|// fallback and use the simple class name with hashcode for the id so its unique for this given source
name|id
operator|=
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"("
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|source
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
comment|// no source, so fallback and use the simple class name from thread pool and its hashcode identity so its unique
name|id
operator|=
name|executorService
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"("
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|executorService
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
comment|// id is mandatory
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|id
argument_list|,
literal|"id for thread pool "
operator|+
name|executorService
argument_list|)
expr_stmt|;
comment|// extract route id if possible
if|if
condition|(
name|source
operator|instanceof
name|ProcessorDefinition
condition|)
block|{
name|RouteDefinition
name|route
init|=
name|ProcessorDefinitionHelper
operator|.
name|getRoute
argument_list|(
operator|(
name|ProcessorDefinition
operator|)
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|routeId
operator|=
name|route
operator|.
name|idOrCreate
argument_list|(
name|this
operator|.
name|camelContext
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// let lifecycle strategy be notified as well which can let it be managed in JMX as well
if|if
condition|(
name|executorService
operator|instanceof
name|ThreadPoolExecutor
condition|)
block|{
name|ThreadPoolExecutor
name|threadPool
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|executorService
decl_stmt|;
for|for
control|(
name|LifecycleStrategy
name|lifecycle
range|:
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
control|)
block|{
name|lifecycle
operator|.
name|onThreadPoolAdd
argument_list|(
name|camelContext
argument_list|,
name|threadPool
argument_list|,
name|id
argument_list|,
name|sourceId
argument_list|,
name|routeId
argument_list|,
name|threadPoolProfileId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now call strategy to allow custom logic
name|onNewExecutorService
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
comment|/**      * Strategy callback when a new {@link java.util.concurrent.ExecutorService} have been created.      *      * @param executorService the created {@link java.util.concurrent.ExecutorService}       */
DECL|method|onNewExecutorService (ExecutorService executorService)
specifier|protected
name|void
name|onNewExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|threadNamePattern
operator|==
literal|null
condition|)
block|{
comment|// set default name pattern which includes the camel context name
name|threadNamePattern
operator|=
literal|"Camel ("
operator|+
name|camelContext
operator|.
name|getName
argument_list|()
operator|+
literal|") thread #${counter} - ${name}"
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// shutdown all executor services
for|for
control|(
name|ExecutorService
name|executorService
range|:
name|executorServices
control|)
block|{
comment|// only log if something goes wrong as we want to shutdown them all
try|try
block|{
name|shutdownNow
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred during shutdown of ExecutorService: "
operator|+
name|executorService
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|executorServices
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// do not clear the default profile as we could potential be restarted
name|Iterator
argument_list|<
name|ThreadPoolProfile
argument_list|>
name|it
init|=
name|threadPoolProfiles
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ThreadPoolProfile
name|profile
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|profile
operator|.
name|isDefaultProfile
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getDefaultExecutorService (String ref, Object source)
specifier|public
name|ExecutorService
name|getDefaultExecutorService
parameter_list|(
name|String
name|ref
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
name|ThreadPoolProfile
name|profile
init|=
operator|new
name|ThreadPoolProfile
argument_list|(
name|ref
argument_list|)
decl_stmt|;
return|return
name|getExecutorService
argument_list|(
name|profile
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createExecutorService (ThreadPoolProfile profile, Object source)
specifier|public
name|ExecutorService
name|createExecutorService
parameter_list|(
name|ThreadPoolProfile
name|profile
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
name|ThreadPoolProfile
name|namedProfile
init|=
name|threadPoolProfiles
operator|.
name|get
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|namedProfile
operator|!=
literal|null
condition|)
block|{
name|profile
operator|.
name|addDefaults
argument_list|(
name|namedProfile
argument_list|)
expr_stmt|;
block|}
name|profile
operator|.
name|addDefaults
argument_list|(
name|this
operator|.
name|defaultProfile
argument_list|)
expr_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|createThreadFactory
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|threadPoolFactory
operator|.
name|newThreadPool
argument_list|(
name|profile
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|executorService
argument_list|,
name|source
argument_list|,
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|executorService
return|;
block|}
annotation|@
name|Override
DECL|method|getExecutorService (ThreadPoolProfile profile, Object source)
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|(
name|ThreadPoolProfile
name|profile
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
if|if
condition|(
name|profile
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ExecutorService
name|answer
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up ExecutorService with ref: {} and found it from Registry: {}"
argument_list|,
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchBeanException
name|e
parameter_list|)
block|{
comment|// Jndi registry may throw this. In this case we want to continue with the profile
block|}
block|}
return|return
name|createExecutorService
argument_list|(
name|profile
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|createThreadFactory (ThreadPoolProfile profile)
specifier|private
name|ThreadFactory
name|createThreadFactory
parameter_list|(
name|ThreadPoolProfile
name|profile
parameter_list|)
block|{
comment|// the thread name must not be null
comment|//ObjectHelper.notNull(profile.getThreadName(), "ThreadName");
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|CamelThreadFactory
argument_list|(
name|threadNamePattern
argument_list|,
name|profile
operator|.
name|getThreadName
argument_list|()
argument_list|,
name|profile
operator|.
name|isDaemon
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|threadFactory
return|;
block|}
annotation|@
name|Override
DECL|method|getScheduledExecutorService (String ref, Object source)
specifier|public
name|ScheduledExecutorService
name|getScheduledExecutorService
parameter_list|(
name|String
name|ref
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
name|ThreadPoolProfile
name|profile
init|=
name|threadPoolProfiles
operator|.
name|get
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|profile
operator|==
literal|null
condition|)
block|{
name|profile
operator|=
operator|new
name|ThreadPoolProfile
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
name|getScheduledExecutorService
argument_list|(
name|profile
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getScheduledExecutorService (ThreadPoolProfile profile, Object source)
specifier|public
name|ScheduledExecutorService
name|getScheduledExecutorService
parameter_list|(
name|ThreadPoolProfile
name|profile
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
if|if
condition|(
name|profile
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ScheduledExecutorService
name|answer
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|ScheduledExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up ExecutorService with ref: {} and found it from Registry: {}"
argument_list|,
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
name|profile
operator|.
name|addDefaults
argument_list|(
name|this
operator|.
name|defaultProfile
argument_list|)
expr_stmt|;
name|ThreadFactory
name|threadFactory
init|=
name|createThreadFactory
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|ScheduledExecutorService
name|executorService
init|=
name|threadPoolFactory
operator|.
name|newScheduledThreadPool
argument_list|(
name|profile
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|executorService
argument_list|,
name|source
argument_list|,
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|executorService
return|;
block|}
annotation|@
name|Override
DECL|method|newSynchronousExecutorService (String string, Object source)
specifier|public
name|ExecutorService
name|newSynchronousExecutorService
parameter_list|(
name|String
name|string
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
name|ExecutorService
name|executorService
init|=
operator|new
name|SynchronousExecutorService
argument_list|()
decl_stmt|;
name|onThreadPoolCreated
argument_list|(
name|executorService
argument_list|,
name|this
argument_list|,
literal|"Aggregator"
argument_list|)
expr_stmt|;
return|return
name|executorService
return|;
block|}
block|}
end_class

end_unit

