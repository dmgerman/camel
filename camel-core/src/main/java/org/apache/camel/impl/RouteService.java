begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_comment
comment|/**  * Represents the runtime objects for a given {@link RouteDefinition} so that it can be stopped independently  * of other routes  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|RouteService
specifier|public
class|class
name|RouteService
extends|extends
name|ServiceSupport
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|DefaultCamelContext
name|camelContext
decl_stmt|;
DECL|field|routeDefinition
specifier|private
specifier|final
name|RouteDefinition
name|routeDefinition
decl_stmt|;
DECL|field|routeContexts
specifier|private
specifier|final
name|List
argument_list|<
name|RouteContext
argument_list|>
name|routeContexts
decl_stmt|;
DECL|field|routes
specifier|private
specifier|final
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|RouteService (DefaultCamelContext camelContext, RouteDefinition routeDefinition, List<RouteContext> routeContexts, Collection<Route> routes)
specifier|public
name|RouteService
parameter_list|(
name|DefaultCamelContext
name|camelContext
parameter_list|,
name|RouteDefinition
name|routeDefinition
parameter_list|,
name|List
argument_list|<
name|RouteContext
argument_list|>
name|routeContexts
parameter_list|,
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|routeDefinition
operator|=
name|routeDefinition
expr_stmt|;
name|this
operator|.
name|routeContexts
operator|=
name|routeContexts
expr_stmt|;
name|this
operator|.
name|routes
operator|=
name|routes
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|routeDefinition
operator|.
name|idOrCreate
argument_list|(
name|camelContext
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|getRouteContexts ()
specifier|public
name|List
argument_list|<
name|RouteContext
argument_list|>
name|getRouteContexts
parameter_list|()
block|{
return|return
name|routeContexts
return|;
block|}
DECL|method|getRouteDefinition ()
specifier|public
name|RouteDefinition
name|getRouteDefinition
parameter_list|()
block|{
return|return
name|routeDefinition
return|;
block|}
DECL|method|getRoutes ()
specifier|public
name|Collection
argument_list|<
name|Route
argument_list|>
name|getRoutes
parameter_list|()
block|{
return|return
name|routes
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|camelContext
operator|.
name|addRouteCollection
argument_list|(
name|routes
argument_list|)
expr_stmt|;
name|getLifecycleStrategy
argument_list|()
operator|.
name|onRoutesAdd
argument_list|(
name|routes
argument_list|)
expr_stmt|;
for|for
control|(
name|Route
name|route
range|:
name|routes
control|)
block|{
name|List
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|route
operator|.
name|getServicesForRoute
argument_list|()
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|startChildService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|camelContext
operator|.
name|removeRouteCollection
argument_list|(
name|routes
argument_list|)
expr_stmt|;
comment|// there is no lifecycyle for routesRemove
comment|// do not stop child services as in doStart
comment|// as route.getServicesForRoute() will restart
comment|// already stopped services, so we end up starting
comment|// stuff when we stop.
block|}
DECL|method|getLifecycleStrategy ()
specifier|protected
name|LifecycleStrategy
name|getLifecycleStrategy
parameter_list|()
block|{
return|return
name|camelContext
operator|.
name|getLifecycleStrategy
argument_list|()
return|;
block|}
DECL|method|startChildService (Service service)
specifier|protected
name|void
name|startChildService
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|Exception
block|{
name|getLifecycleStrategy
argument_list|()
operator|.
name|onServiceAdd
argument_list|(
name|camelContext
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|addChildService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
DECL|method|stopChildService (Service service)
specifier|protected
name|void
name|stopChildService
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|Exception
block|{
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|removeChildService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

