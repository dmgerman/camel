begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.scan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|scan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanFilter
import|;
end_import

begin_comment
comment|/**  *<code>CompositePackageScanFilter</code> allows multiple  * {@link PackageScanFilter}s to be composed into a single filter. For a  * {@link Class} to match a {@link CompositePackageScanFilter} it must match  * each of the filters the composite contains  */
end_comment

begin_class
DECL|class|CompositePackageScanFilter
specifier|public
class|class
name|CompositePackageScanFilter
implements|implements
name|PackageScanFilter
block|{
DECL|field|filters
specifier|private
name|Set
argument_list|<
name|PackageScanFilter
argument_list|>
name|filters
decl_stmt|;
DECL|method|CompositePackageScanFilter ()
specifier|public
name|CompositePackageScanFilter
parameter_list|()
block|{
name|filters
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|PackageScanFilter
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|CompositePackageScanFilter (Set<PackageScanFilter> filters)
specifier|public
name|CompositePackageScanFilter
parameter_list|(
name|Set
argument_list|<
name|PackageScanFilter
argument_list|>
name|filters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|PackageScanFilter
argument_list|>
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
DECL|method|addFilter (PackageScanFilter filter)
specifier|public
name|void
name|addFilter
parameter_list|(
name|PackageScanFilter
name|filter
parameter_list|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|matches (Class type)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
for|for
control|(
name|PackageScanFilter
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|matches
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

