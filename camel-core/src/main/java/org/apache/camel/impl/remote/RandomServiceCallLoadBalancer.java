begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServer
import|;
end_import

begin_class
DECL|class|RandomServiceCallLoadBalancer
specifier|public
class|class
name|RandomServiceCallLoadBalancer
implements|implements
name|ServiceCallLoadBalancer
argument_list|<
name|ServiceCallServer
argument_list|>
block|{
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|RandomServiceCallLoadBalancer ()
specifier|public
name|RandomServiceCallLoadBalancer
parameter_list|()
block|{
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"uncheked"
argument_list|)
annotation|@
name|Override
DECL|method|chooseServer (Collection<ServiceCallServer> servers)
specifier|public
name|ServiceCallServer
name|chooseServer
parameter_list|(
name|Collection
argument_list|<
name|ServiceCallServer
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServiceCallServer
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|servers
operator|instanceof
name|List
condition|)
block|{
name|list
operator|=
operator|(
name|List
argument_list|<
name|ServiceCallServer
argument_list|>
operator|)
name|servers
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|ran
init|=
name|this
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|servers
operator|.
name|stream
argument_list|()
operator|.
name|limit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
name|ran
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RandomServiceCallLoadBalancer"
return|;
block|}
block|}
end_class

end_unit

