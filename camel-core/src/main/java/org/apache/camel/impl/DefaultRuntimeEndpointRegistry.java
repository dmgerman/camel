begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeSendingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|RouteAddedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|RouteRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RuntimeEndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventNotifierSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_class
DECL|class|DefaultRuntimeEndpointRegistry
specifier|public
class|class
name|DefaultRuntimeEndpointRegistry
extends|extends
name|EventNotifierSupport
implements|implements
name|RuntimeEndpointRegistry
block|{
comment|// route id -> endpoint urls
DECL|field|inputs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|inputs
decl_stmt|;
DECL|field|outputs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|outputs
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
init|=
literal|1000
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllEndpoints (boolean includeInputs)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllEndpoints
parameter_list|(
name|boolean
name|includeInputs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeInputs
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|inputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|outputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|answer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpointsPerRoute (String routeId, boolean includeInputs)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getEndpointsPerRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|boolean
name|includeInputs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeInputs
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|uris
init|=
name|inputs
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|uris
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|addAll
argument_list|(
name|uris
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uris
init|=
name|outputs
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|uris
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|addAll
argument_list|(
name|uris
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|answer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLimit ()
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
annotation|@
name|Override
DECL|method|setLimit (int limit)
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|inputs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|outputs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|total
init|=
name|inputs
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|total
operator|+=
name|outputs
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|inputs
operator|==
literal|null
condition|)
block|{
name|inputs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outputs
operator|==
literal|null
condition|)
block|{
name|outputs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notify (EventObject event)
specifier|public
name|void
name|notify
parameter_list|(
name|EventObject
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|instanceof
name|RouteAddedEvent
condition|)
block|{
name|RouteAddedEvent
name|rse
init|=
operator|(
name|RouteAddedEvent
operator|)
name|event
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|rse
operator|.
name|getRoute
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|routeId
init|=
name|rse
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// a HashSet is fine for inputs as we only have a limited number of those
name|Set
argument_list|<
name|String
argument_list|>
name|uris
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|put
argument_list|(
name|routeId
argument_list|,
name|uris
argument_list|)
expr_stmt|;
comment|// use a LRUCache for outputs as we could potential have unlimited uris if dynamic routing is in use
comment|// and therefore need to have the limit in use
name|outputs
operator|.
name|put
argument_list|(
name|routeId
argument_list|,
operator|new
name|LRUCache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|RouteRemovedEvent
condition|)
block|{
name|RouteRemovedEvent
name|rse
init|=
operator|(
name|RouteRemovedEvent
operator|)
name|event
decl_stmt|;
name|String
name|routeId
init|=
name|rse
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|inputs
operator|.
name|remove
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|remove
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExchangeSendingEvent
name|ese
init|=
operator|(
name|ExchangeSendingEvent
operator|)
name|event
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|ese
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|routeId
init|=
name|getRouteId
argument_list|(
name|ese
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uris
init|=
name|outputs
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|uris
operator|!=
literal|null
operator|&&
operator|!
name|uris
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|uris
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRouteId (Exchange exchange)
specifier|private
name|String
name|getRouteId
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
name|UnitOfWork
name|uow
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
decl_stmt|;
name|RouteContext
name|rc
init|=
name|uow
operator|!=
literal|null
condition|?
name|uow
operator|.
name|getRouteContext
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|rc
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// fallback and get from route id on the exchange
name|answer
operator|=
name|exchange
operator|.
name|getFromRouteId
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|isEnabled (EventObject event)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|EventObject
name|event
parameter_list|)
block|{
return|return
name|enabled
operator|&&
name|event
operator|instanceof
name|ExchangeSendingEvent
operator|||
name|event
operator|instanceof
name|RouteAddedEvent
operator|||
name|event
operator|instanceof
name|RouteRemovedEvent
return|;
block|}
block|}
end_class

end_unit

