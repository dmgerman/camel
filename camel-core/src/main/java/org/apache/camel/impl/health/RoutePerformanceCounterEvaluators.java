begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedRouteMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckResultBuilder
import|;
end_import

begin_class
DECL|class|RoutePerformanceCounterEvaluators
specifier|public
specifier|final
class|class
name|RoutePerformanceCounterEvaluators
block|{
DECL|method|RoutePerformanceCounterEvaluators ()
specifier|private
name|RoutePerformanceCounterEvaluators
parameter_list|()
block|{     }
comment|// ********************************
comment|// Helpers
comment|// ********************************
DECL|method|exchangesFailed (long threshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|exchangesFailed
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
return|return
operator|new
name|ExchangesFailed
argument_list|(
name|threshold
argument_list|)
return|;
block|}
DECL|method|exchangesInflight (long threshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|exchangesInflight
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
return|return
operator|new
name|ExchangesInflight
argument_list|(
name|threshold
argument_list|)
return|;
block|}
DECL|method|redeliveries (long threshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|redeliveries
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
return|return
operator|new
name|Redeliveries
argument_list|(
name|threshold
argument_list|)
return|;
block|}
DECL|method|externalRedeliveries (long threshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|externalRedeliveries
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
return|return
operator|new
name|ExternalRedeliveries
argument_list|(
name|threshold
argument_list|)
return|;
block|}
DECL|method|lastProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|lastProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
return|return
operator|new
name|LastProcessingTime
argument_list|(
name|timeThreshold
argument_list|,
name|failuresThreshold
argument_list|)
return|;
block|}
DECL|method|minProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|minProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
return|return
operator|new
name|MinProcessingTime
argument_list|(
name|timeThreshold
argument_list|,
name|failuresThreshold
argument_list|)
return|;
block|}
DECL|method|meanProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|meanProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
return|return
operator|new
name|MeanProcessingTime
argument_list|(
name|timeThreshold
argument_list|,
name|failuresThreshold
argument_list|)
return|;
block|}
DECL|method|maxProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
specifier|static
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
name|maxProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
return|return
operator|new
name|MaxProcessingTime
argument_list|(
name|timeThreshold
argument_list|,
name|failuresThreshold
argument_list|)
return|;
block|}
comment|// ********************************
comment|// Impls
comment|// ********************************
DECL|class|ExchangesFailed
specifier|public
specifier|static
specifier|final
class|class
name|ExchangesFailed
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|threshold
specifier|private
specifier|final
name|long
name|threshold
decl_stmt|;
DECL|method|ExchangesFailed (long threshold)
specifier|public
name|ExchangesFailed
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getExchangesFailed
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|threshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.failed"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.failed.threshold"
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|ExchangesInflight
specifier|public
specifier|static
specifier|final
class|class
name|ExchangesInflight
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|threshold
specifier|private
specifier|final
name|long
name|threshold
decl_stmt|;
DECL|method|ExchangesInflight (long threshold)
specifier|public
name|ExchangesInflight
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getExchangesInflight
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|threshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.inflight"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.inflight.threshold"
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|Redeliveries
specifier|public
specifier|static
specifier|final
class|class
name|Redeliveries
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|threshold
specifier|private
specifier|final
name|long
name|threshold
decl_stmt|;
DECL|method|Redeliveries (long threshold)
specifier|public
name|Redeliveries
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getRedeliveries
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|threshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.redeliveries"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.redeliveries.threshold"
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|ExternalRedeliveries
specifier|public
specifier|static
specifier|final
class|class
name|ExternalRedeliveries
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|threshold
specifier|private
specifier|final
name|long
name|threshold
decl_stmt|;
DECL|method|ExternalRedeliveries (long threshold)
specifier|public
name|ExternalRedeliveries
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getExternalRedeliveries
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|threshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.external-redeliveries"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.external-redeliveries.threshold"
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|LastProcessingTime
specifier|public
specifier|static
specifier|final
class|class
name|LastProcessingTime
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|timeThreshold
specifier|private
specifier|final
name|long
name|timeThreshold
decl_stmt|;
DECL|field|failuresThreshold
specifier|private
specifier|final
name|int
name|failuresThreshold
decl_stmt|;
DECL|field|failureCount
specifier|private
specifier|volatile
name|int
name|failureCount
decl_stmt|;
DECL|method|LastProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
name|LastProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
name|this
operator|.
name|timeThreshold
operator|=
name|timeThreshold
expr_stmt|;
name|this
operator|.
name|failuresThreshold
operator|=
name|failuresThreshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getLastProcessingTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|timeThreshold
condition|)
block|{
name|failureCount
operator|++
expr_stmt|;
if|if
condition|(
name|failureCount
operator|>
name|failuresThreshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|failureCount
operator|=
literal|0
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.last-processing-time"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.last-processing-time.threshold.time"
argument_list|,
name|timeThreshold
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.last-processing-time.threshold.failures"
argument_list|,
name|failuresThreshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|MinProcessingTime
specifier|public
specifier|static
specifier|final
class|class
name|MinProcessingTime
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|timeThreshold
specifier|private
specifier|final
name|long
name|timeThreshold
decl_stmt|;
DECL|field|failuresThreshold
specifier|private
specifier|final
name|int
name|failuresThreshold
decl_stmt|;
DECL|field|failureCount
specifier|private
specifier|volatile
name|int
name|failureCount
decl_stmt|;
DECL|method|MinProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
name|MinProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
name|this
operator|.
name|timeThreshold
operator|=
name|timeThreshold
expr_stmt|;
name|this
operator|.
name|failuresThreshold
operator|=
name|failuresThreshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getMinProcessingTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|timeThreshold
condition|)
block|{
name|failureCount
operator|++
expr_stmt|;
if|if
condition|(
name|failureCount
operator|>
name|failuresThreshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|failureCount
operator|=
literal|0
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.min-processing-time"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.min-processing-time.threshold.time"
argument_list|,
name|timeThreshold
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.min-processing-time.threshold.failures"
argument_list|,
name|failuresThreshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|MeanProcessingTime
specifier|public
specifier|static
specifier|final
class|class
name|MeanProcessingTime
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|timeThreshold
specifier|private
specifier|final
name|long
name|timeThreshold
decl_stmt|;
DECL|field|failuresThreshold
specifier|private
specifier|final
name|int
name|failuresThreshold
decl_stmt|;
DECL|field|failureCount
specifier|private
specifier|volatile
name|int
name|failureCount
decl_stmt|;
DECL|method|MeanProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
name|MeanProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
name|this
operator|.
name|timeThreshold
operator|=
name|timeThreshold
expr_stmt|;
name|this
operator|.
name|failuresThreshold
operator|=
name|failuresThreshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getMeanProcessingTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|timeThreshold
condition|)
block|{
name|failureCount
operator|++
expr_stmt|;
if|if
condition|(
name|failureCount
operator|>
name|failuresThreshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|failureCount
operator|=
literal|0
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.mean-processing-time"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.mean-processing-time.threshold.time"
argument_list|,
name|timeThreshold
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.mean-processing-time.threshold.failures"
argument_list|,
name|failuresThreshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|MaxProcessingTime
specifier|public
specifier|static
specifier|final
class|class
name|MaxProcessingTime
implements|implements
name|PerformanceCounterEvaluator
argument_list|<
name|ManagedRouteMBean
argument_list|>
block|{
DECL|field|timeThreshold
specifier|private
specifier|final
name|long
name|timeThreshold
decl_stmt|;
DECL|field|failuresThreshold
specifier|private
specifier|final
name|int
name|failuresThreshold
decl_stmt|;
DECL|field|failureCount
specifier|private
specifier|volatile
name|int
name|failureCount
decl_stmt|;
DECL|method|MaxProcessingTime (long timeThreshold, int failuresThreshold)
specifier|public
name|MaxProcessingTime
parameter_list|(
name|long
name|timeThreshold
parameter_list|,
name|int
name|failuresThreshold
parameter_list|)
block|{
name|this
operator|.
name|timeThreshold
operator|=
name|timeThreshold
expr_stmt|;
name|this
operator|.
name|failuresThreshold
operator|=
name|failuresThreshold
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|public
name|void
name|test
parameter_list|(
name|ManagedRouteMBean
name|counter
parameter_list|,
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
try|try
block|{
name|long
name|value
init|=
name|counter
operator|.
name|getMaxProcessingTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|timeThreshold
condition|)
block|{
name|failureCount
operator|++
expr_stmt|;
if|if
condition|(
name|failureCount
operator|>
name|failuresThreshold
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|failureCount
operator|=
literal|0
expr_stmt|;
block|}
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.max-processing-time"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.max-processing-time.threshold.time"
argument_list|,
name|timeThreshold
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
literal|"exchanges.max-processing-time.threshold.failures"
argument_list|,
name|failuresThreshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
block|}
end_class

end_unit

