begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatResolver
import|;
end_import

begin_comment
comment|/**  * Default data format resolver  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultDataFormatResolver
specifier|public
class|class
name|DefaultDataFormatResolver
implements|implements
name|DataFormatResolver
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resolveDataFormat (DataFormatDefinition definition, CamelContext context)
specifier|public
name|DataFormat
name|resolveDataFormat
parameter_list|(
name|DataFormatDefinition
name|definition
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
name|Class
name|type
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|definition
operator|.
name|getDataFormatName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The class "
operator|+
name|definition
operator|.
name|getDataFormatName
argument_list|()
operator|+
literal|" is not on the classpath! Cannot use the dataFormat "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
operator|(
name|DataFormat
operator|)
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|resolveDataFormat (String ref, CamelContext context)
specifier|public
name|DataFormat
name|resolveDataFormat
parameter_list|(
name|String
name|ref
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
name|DataFormat
name|dataFormat
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|ref
argument_list|,
name|DataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataFormat
operator|==
literal|null
condition|)
block|{
comment|// lookup type and create the data format from it
name|DataFormatDefinition
name|type
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|ref
argument_list|,
name|DataFormatDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|context
operator|.
name|getDataFormats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|context
operator|.
name|getDataFormats
argument_list|()
operator|.
name|get
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|dataFormat
operator|=
name|resolveDataFormat
argument_list|(
name|type
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataFormat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find data format in registry with ref: "
operator|+
name|ref
argument_list|)
throw|;
block|}
return|return
name|dataFormat
return|;
block|}
block|}
end_class

end_unit

