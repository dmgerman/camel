begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Lazy implementation of a type converter registry used for  *<a href="http://camel.apache.org/type-converter.html">type converters</a> in Camel.  *<p/>  * This implementation will lazy load type converters on-demand.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|LazyLoadingTypeConverter
specifier|public
class|class
name|LazyLoadingTypeConverter
extends|extends
name|BaseTypeConverterRegistry
block|{
DECL|field|loaded
specifier|private
specifier|final
name|AtomicBoolean
name|loaded
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|LazyLoadingTypeConverter (PackageScanClassResolver resolver, Injector injector, FactoryFinder factoryFinder)
specifier|public
name|LazyLoadingTypeConverter
parameter_list|(
name|PackageScanClassResolver
name|resolver
parameter_list|,
name|Injector
name|injector
parameter_list|,
name|FactoryFinder
name|factoryFinder
parameter_list|)
block|{
name|super
argument_list|(
name|resolver
argument_list|,
name|injector
argument_list|,
name|factoryFinder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doConvertTo (final Class type, final Exchange exchange, final Object value)
specifier|protected
name|Object
name|doConvertTo
parameter_list|(
specifier|final
name|Class
name|type
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
name|ensureLoaded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|doConvertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTypeConverter (Class<?> toType, Class<?> fromType)
specifier|public
name|TypeConverter
name|getTypeConverter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|toType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|fromType
parameter_list|)
block|{
name|ensureLoaded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getTypeConverter
argument_list|(
name|toType
argument_list|,
name|fromType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFromClassMappings ()
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getFromClassMappings
parameter_list|()
block|{
name|ensureLoaded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getFromClassMappings
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getToClassMappings (Class<?> fromClass)
specifier|public
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TypeConverter
argument_list|>
name|getToClassMappings
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|fromClass
parameter_list|)
block|{
name|ensureLoaded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getToClassMappings
argument_list|(
name|fromClass
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTypeMappings ()
specifier|public
name|Map
argument_list|<
name|TypeMapping
argument_list|,
name|TypeConverter
argument_list|>
name|getTypeMappings
parameter_list|()
block|{
name|ensureLoaded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getTypeMappings
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doLookup (Class<?> toType, Class<?> fromType, boolean isSuper)
specifier|protected
name|TypeConverter
name|doLookup
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|toType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|fromType
parameter_list|,
name|boolean
name|isSuper
parameter_list|)
block|{
name|ensureLoaded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|doLookup
argument_list|(
name|toType
argument_list|,
name|fromType
argument_list|,
name|isSuper
argument_list|)
return|;
block|}
DECL|method|ensureLoaded ()
specifier|private
specifier|synchronized
name|void
name|ensureLoaded
parameter_list|()
block|{
if|if
condition|(
name|loaded
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|super
operator|.
name|loadTypeConverters
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

