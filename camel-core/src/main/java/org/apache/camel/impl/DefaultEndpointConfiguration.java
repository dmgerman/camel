begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link EndpointConfiguration}.  *  * @version   */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|DefaultEndpointConfiguration
specifier|public
specifier|abstract
class|class
name|DefaultEndpointConfiguration
implements|implements
name|EndpointConfiguration
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|method|DefaultEndpointConfiguration (CamelContext camelContext)
specifier|public
name|DefaultEndpointConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|DefaultEndpointConfiguration (CamelContext camelContext, String uri)
specifier|public
name|DefaultEndpointConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|this
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
try|try
block|{
name|setURI
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getURI ()
specifier|public
name|URI
name|getURI
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|setURI (URI uri)
specifier|public
name|void
name|setURI
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|parseURI
argument_list|()
expr_stmt|;
block|}
DECL|method|setURI (String uri)
specifier|public
name|void
name|setURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
name|String
name|encoded
init|=
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|setURI
argument_list|(
operator|new
name|URI
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot parse uri: "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getParameter (String name)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|ConfigurationHelper
operator|.
name|getConfigurationParameter
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setParameter (String name, T value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|setParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|ConfigurationHelper
operator|.
name|setConfigurationField
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|protected
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|parseURI ()
specifier|protected
name|void
name|parseURI
parameter_list|()
block|{
name|ConfigurationHelper
operator|.
name|populateFromURI
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
operator|new
name|ConfigurationHelper
operator|.
name|FieldParameterSetter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

