begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_comment
comment|/**  * A grouped exchange that groups together other exchanges, as a holder object.  *<p/>  * This grouped exchange is useable for the aggregator so multiple exchanges can be grouped  * into this single exchange and thus only one exchange is sent for further processing.  */
end_comment

begin_class
DECL|class|GroupedExchange
specifier|public
class|class
name|GroupedExchange
extends|extends
name|DefaultExchange
block|{
DECL|field|exchanges
specifier|private
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
operator|new
name|ArrayList
argument_list|<
name|Exchange
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|GroupedExchange (CamelContext context)
specifier|public
name|GroupedExchange
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|GroupedExchange (CamelContext context, ExchangePattern pattern)
specifier|public
name|GroupedExchange
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|GroupedExchange (Exchange parent)
specifier|public
name|GroupedExchange
parameter_list|(
name|Exchange
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|GroupedExchange (Endpoint fromEndpoint)
specifier|public
name|GroupedExchange
parameter_list|(
name|Endpoint
name|fromEndpoint
parameter_list|)
block|{
name|super
argument_list|(
name|fromEndpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|GroupedExchange (Endpoint fromEndpoint, ExchangePattern pattern)
specifier|public
name|GroupedExchange
parameter_list|(
name|Endpoint
name|fromEndpoint
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|fromEndpoint
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|getExchanges ()
specifier|public
name|List
argument_list|<
name|Exchange
argument_list|>
name|getExchanges
parameter_list|()
block|{
return|return
name|exchanges
return|;
block|}
DECL|method|setExchanges (List<Exchange> exchanges)
specifier|public
name|void
name|setExchanges
parameter_list|(
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
parameter_list|)
block|{
name|this
operator|.
name|exchanges
operator|=
name|exchanges
expr_stmt|;
block|}
DECL|method|addExchange (Exchange exchange)
specifier|public
name|void
name|addExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|this
operator|.
name|exchanges
operator|.
name|add
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|exchanges
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|get (int index)
specifier|public
name|Exchange
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|exchanges
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Exchange[Grouped with: "
operator|+
name|exchanges
operator|.
name|size
argument_list|()
operator|+
literal|" exchanges]"
return|;
block|}
block|}
end_class

end_unit

