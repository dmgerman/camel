begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A {@link Registry} which delegates to the real registry.  *<p/>  * This is used to ensure that Camel performs property placeholder resolution on every lookup.  */
end_comment

begin_class
DECL|class|PropertyPlaceholderDelegateRegistry
specifier|public
class|class
name|PropertyPlaceholderDelegateRegistry
implements|implements
name|Registry
block|{
DECL|field|context
specifier|private
specifier|final
name|CamelContext
name|context
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|Registry
name|delegate
decl_stmt|;
DECL|method|PropertyPlaceholderDelegateRegistry (CamelContext context, Registry delegate)
specifier|public
name|PropertyPlaceholderDelegateRegistry
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Registry
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|lookupByName (String name)
specifier|public
name|Object
name|lookupByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
comment|// Must avoid attempting placeholder resolution when looking up
comment|// the properties component or else we end up in an infinite loop.
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|name
operator|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|delegate
operator|.
name|lookupByName
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|lookupByNameAndType (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookupByNameAndType
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
comment|// Must avoid attempting placeholder resolution when looking up
comment|// the properties component or else we end up in an infinite loop.
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|name
operator|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|delegate
operator|.
name|lookupByNameAndType
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|findByTypeWithName (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|findByTypeWithName
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|findByTypeWithName
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|findByType (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|findByType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|findByType
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getRegistry ()
specifier|public
name|Registry
name|getRegistry
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

