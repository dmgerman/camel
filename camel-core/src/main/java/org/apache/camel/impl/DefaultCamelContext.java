begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToStartRouteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|IsSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MultipleConsumersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoFactoryAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|DefaultTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementLifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|JmxSystemPropertyKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|ManagedManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Delayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|StreamCaching
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ComponentResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InflightRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NodeIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteStartupOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServicePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EventHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Represents the context used to configure routes and the policies to use.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultCamelContext
specifier|public
class|class
name|DefaultCamelContext
extends|extends
name|ServiceSupport
implements|implements
name|CamelContext
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NAME_PREFIX
init|=
literal|"camel-"
decl_stmt|;
DECL|field|nameSuffix
specifier|private
specifier|static
name|int
name|nameSuffix
decl_stmt|;
DECL|field|applicationContextClassLoader
specifier|private
name|ClassLoader
name|applicationContextClassLoader
decl_stmt|;
DECL|field|routeDefinitionInitiated
specifier|private
name|boolean
name|routeDefinitionInitiated
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|endpoints
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|endpoints
init|=
operator|new
name|LRUCache
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
DECL|field|endpointKeyCounter
specifier|private
specifier|final
name|AtomicInteger
name|endpointKeyCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|endpointStrategies
specifier|private
specifier|final
name|List
argument_list|<
name|EndpointStrategy
argument_list|>
name|endpointStrategies
init|=
operator|new
name|ArrayList
argument_list|<
name|EndpointStrategy
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|components
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|components
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|routes
specifier|private
name|List
argument_list|<
name|Route
argument_list|>
name|routes
decl_stmt|;
DECL|field|servicesToClose
specifier|private
specifier|final
name|List
argument_list|<
name|Service
argument_list|>
name|servicesToClose
init|=
operator|new
name|ArrayList
argument_list|<
name|Service
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|typeConverter
specifier|private
name|TypeConverter
name|typeConverter
decl_stmt|;
DECL|field|typeConverterRegistry
specifier|private
name|TypeConverterRegistry
name|typeConverterRegistry
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|field|componentResolver
specifier|private
name|ComponentResolver
name|componentResolver
decl_stmt|;
DECL|field|autoCreateComponents
specifier|private
name|boolean
name|autoCreateComponents
init|=
literal|true
decl_stmt|;
DECL|field|languageResolver
specifier|private
name|LanguageResolver
name|languageResolver
init|=
operator|new
name|DefaultLanguageResolver
argument_list|()
decl_stmt|;
DECL|field|languages
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Language
argument_list|>
name|languages
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Language
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|registry
specifier|private
name|Registry
name|registry
decl_stmt|;
DECL|field|lifecycleStrategies
specifier|private
name|List
argument_list|<
name|LifecycleStrategy
argument_list|>
name|lifecycleStrategies
init|=
operator|new
name|ArrayList
argument_list|<
name|LifecycleStrategy
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|managementStrategy
specifier|private
name|ManagementStrategy
name|managementStrategy
decl_stmt|;
DECL|field|managementStrategyInitialized
specifier|private
name|AtomicBoolean
name|managementStrategyInitialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|routeDefinitions
specifier|private
specifier|final
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|interceptStrategies
specifier|private
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptStrategy
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|firstStartDone
specifier|private
name|boolean
name|firstStartDone
decl_stmt|;
DECL|field|autoStartup
specifier|private
name|Boolean
name|autoStartup
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
DECL|field|trace
specifier|private
name|Boolean
name|trace
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|streamCache
specifier|private
name|Boolean
name|streamCache
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|handleFault
specifier|private
name|Boolean
name|handleFault
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|disableJMX
specifier|private
name|Boolean
name|disableJMX
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|delay
specifier|private
name|Long
name|delay
decl_stmt|;
DECL|field|errorHandlerBuilder
specifier|private
name|ErrorHandlerBuilder
name|errorHandlerBuilder
decl_stmt|;
DECL|field|dataFormats
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dataFormatResolver
specifier|private
name|DataFormatResolver
name|dataFormatResolver
init|=
operator|new
name|DefaultDataFormatResolver
argument_list|()
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|factoryFinderResolver
specifier|private
name|FactoryFinderResolver
name|factoryFinderResolver
init|=
operator|new
name|DefaultFactoryFinderResolver
argument_list|()
decl_stmt|;
DECL|field|defaultFactoryFinder
specifier|private
name|FactoryFinder
name|defaultFactoryFinder
decl_stmt|;
DECL|field|factories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FactoryFinder
argument_list|>
name|factories
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FactoryFinder
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|routeServices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|routeServices
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|classResolver
specifier|private
name|ClassResolver
name|classResolver
init|=
operator|new
name|DefaultClassResolver
argument_list|()
decl_stmt|;
DECL|field|packageScanClassResolver
specifier|private
name|PackageScanClassResolver
name|packageScanClassResolver
decl_stmt|;
comment|// we use a capacity of 100 per endpoint, so for the same endpoint we have at most 100 producers in the pool
comment|// so if we have 6 endpoints in the pool, we have 6 x 100 producers in total
DECL|field|producerServicePool
specifier|private
name|ServicePool
argument_list|<
name|Endpoint
argument_list|,
name|Producer
argument_list|>
name|producerServicePool
init|=
operator|new
name|SharedProducerServicePool
argument_list|(
literal|100
argument_list|)
decl_stmt|;
DECL|field|nodeIdFactory
specifier|private
name|NodeIdFactory
name|nodeIdFactory
init|=
operator|new
name|DefaultNodeIdFactory
argument_list|()
decl_stmt|;
DECL|field|defaultTracer
specifier|private
name|Tracer
name|defaultTracer
decl_stmt|;
DECL|field|inflightRepository
specifier|private
name|InflightRepository
name|inflightRepository
init|=
operator|new
name|DefaultInflightRepository
argument_list|()
decl_stmt|;
DECL|field|routeStartupOrder
specifier|private
specifier|final
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|routeStartupOrder
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteStartupOrder
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|defaultRouteStartupOrder
specifier|private
name|int
name|defaultRouteStartupOrder
init|=
literal|1000
decl_stmt|;
DECL|field|shutdownStrategy
specifier|private
name|ShutdownStrategy
name|shutdownStrategy
init|=
operator|new
name|DefaultShutdownStrategy
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|shutdownRoute
specifier|private
name|ShutdownRoute
name|shutdownRoute
init|=
name|ShutdownRoute
operator|.
name|Default
decl_stmt|;
DECL|field|shutdownRunningTask
specifier|private
name|ShutdownRunningTask
name|shutdownRunningTask
init|=
name|ShutdownRunningTask
operator|.
name|CompleteCurrentTaskOnly
decl_stmt|;
DECL|field|executorServiceStrategy
specifier|private
name|ExecutorServiceStrategy
name|executorServiceStrategy
init|=
operator|new
name|DefaultExecutorServiceStrategy
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|method|DefaultCamelContext ()
specifier|public
name|DefaultCamelContext
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|name
operator|=
name|NAME_PREFIX
operator|+
operator|++
name|nameSuffix
expr_stmt|;
comment|// use WebSphere specific resolver if running on WebSphere
if|if
condition|(
name|WebSpherePackageScanClassResolver
operator|.
name|isWebSphereClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using WebSphere specific PackageScanClassResolver"
argument_list|)
expr_stmt|;
name|packageScanClassResolver
operator|=
operator|new
name|WebSpherePackageScanClassResolver
argument_list|(
literal|"META-INF/services/org/apache/camel/TypeConverter"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|packageScanClassResolver
operator|=
operator|new
name|DefaultPackageScanClassResolver
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates the {@link CamelContext} using the given JNDI context as the registry      *      * @param jndiContext the JNDI context      */
DECL|method|DefaultCamelContext (Context jndiContext)
specifier|public
name|DefaultCamelContext
parameter_list|(
name|Context
name|jndiContext
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setJndiContext
argument_list|(
name|jndiContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the {@link CamelContext} using the given registry      *      * @param registry the registry      */
DECL|method|DefaultCamelContext (Registry registry)
specifier|public
name|DefaultCamelContext
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the name of the this context.      *      * @param name the name      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|hasComponent (String componentName)
specifier|public
name|Component
name|hasComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
return|return
name|components
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
return|;
block|}
DECL|method|addComponent (String componentName, final Component component)
specifier|public
name|void
name|addComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
specifier|final
name|Component
name|component
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|component
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|components
init|)
block|{
if|if
condition|(
name|components
operator|.
name|containsKey
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add component as its already previously added: "
operator|+
name|componentName
argument_list|)
throw|;
block|}
name|component
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|components
operator|.
name|put
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onComponentAdd
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getComponent (String name)
specifier|public
name|Component
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// synchronize the look up and auto create so that 2 threads can't
comment|// concurrently auto create the same component.
synchronized|synchronized
init|(
name|components
init|)
block|{
name|Component
name|component
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
operator|&&
name|autoCreateComponents
condition|)
block|{
try|try
block|{
name|component
operator|=
name|getComponentResolver
argument_list|()
operator|.
name|resolveComponent
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|addComponent
argument_list|(
name|name
argument_list|,
name|component
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStarted
argument_list|()
operator|||
name|isStarting
argument_list|()
condition|)
block|{
comment|// If the component is looked up after the context is started, lets start it up.
name|startServices
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Could not auto create component: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|component
return|;
block|}
block|}
DECL|method|getComponent (String name, Class<T> componentType)
specifier|public
parameter_list|<
name|T
extends|extends
name|Component
parameter_list|>
name|T
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|componentType
parameter_list|)
block|{
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentType
operator|.
name|isInstance
argument_list|(
name|component
argument_list|)
condition|)
block|{
return|return
name|componentType
operator|.
name|cast
argument_list|(
name|component
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The component is not of type: "
operator|+
name|componentType
operator|+
literal|" but is: "
operator|+
name|component
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
DECL|method|removeComponent (String componentName)
specifier|public
name|Component
name|removeComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|components
init|)
block|{
name|Component
name|answer
init|=
name|components
operator|.
name|remove
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onComponentRemove
argument_list|(
name|componentName
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getOrCreateComponent (String componentName, Callable<Component> factory)
specifier|public
name|Component
name|getOrCreateComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
name|Callable
argument_list|<
name|Component
argument_list|>
name|factory
parameter_list|)
block|{
synchronized|synchronized
init|(
name|components
init|)
block|{
name|Component
name|component
init|=
name|components
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|component
operator|=
name|factory
operator|.
name|call
argument_list|()
expr_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Factory failed to create the "
operator|+
name|componentName
operator|+
literal|" component, it returned null."
argument_list|)
throw|;
block|}
name|components
operator|.
name|put
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|component
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onComponentAdd
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Factory failed to create the "
operator|+
name|componentName
operator|+
literal|" component"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|component
return|;
block|}
block|}
comment|// Endpoint Management Methods
comment|// -----------------------------------------------------------------------
DECL|method|getEndpoints ()
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|getEndpoints
parameter_list|()
block|{
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|endpoints
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getEndpointMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|getEndpointMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
return|return
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
block|}
DECL|method|hasEndpoint (String uri)
specifier|public
name|Endpoint
name|hasEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order
try|try
block|{
name|uri
operator|=
name|URISupport
operator|.
name|normalizeUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
return|return
name|endpoints
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
DECL|method|getEndpoints (String uri)
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|getEndpoints
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|coll
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|Endpoint
name|ep
init|=
name|endpoints
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
name|coll
operator|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|endpoints
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Endpoint
name|ep
range|:
name|coll
control|)
block|{
if|if
condition|(
operator|!
name|ep
operator|.
name|isSingleton
argument_list|()
operator|&&
name|uri
operator|.
name|equals
argument_list|(
name|ep
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getSingletonEndpoints ()
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|getSingletonEndpoints
parameter_list|()
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|coll
init|=
name|getEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|ep
range|:
name|coll
control|)
block|{
if|if
condition|(
name|ep
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|addEndpoint (String uri, Endpoint endpoint)
specifier|public
name|Endpoint
name|addEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|Endpoint
name|oldEndpoint
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|startServices
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|oldEndpoint
operator|=
name|endpoints
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onEndpointAdd
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|addEndpointToRegistry
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldEndpoint
operator|!=
literal|null
condition|)
block|{
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldEndpoint
return|;
block|}
DECL|method|removeEndpoints (String uri)
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|removeEndpoints
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|Endpoint
name|oldEndpoint
init|=
name|endpoints
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEndpoint
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onEndpointRemove
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
argument_list|>
name|worklist
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|entry
range|:
name|endpoints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oldEndpoint
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|oldEndpoint
operator|.
name|isSingleton
argument_list|()
operator|&&
name|uri
operator|.
name|equals
argument_list|(
name|oldEndpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
condition|)
block|{
comment|// add to worklist to avoid concurrent modification exception
name|worklist
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|entry
range|:
name|worklist
control|)
block|{
name|oldEndpoint
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onEndpointRemove
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getEndpoint (String uri)
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
comment|// in case path has property placeholders then try to let property component resolve those
try|try
block|{
name|uri
operator|=
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order
try|try
block|{
name|uri
operator|=
name|URISupport
operator|.
name|normalizeUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting endpoint with uri: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|answer
decl_stmt|;
name|String
name|scheme
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|answer
operator|=
name|endpoints
operator|.
name|get
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// Use the URI prefix to find the component.
name|String
name|splitURI
index|[]
init|=
name|ObjectHelper
operator|.
name|splitOnCharacter
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitURI
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|scheme
operator|=
name|splitURI
index|[
literal|0
index|]
expr_stmt|;
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// Ask the component to resolve the endpoint.
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
comment|// Have the component create the endpoint if it can.
name|answer
operator|=
name|component
operator|.
name|createEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|uri
operator|+
literal|" converted to endpoint: "
operator|+
name|answer
operator|+
literal|" by component: "
operator|+
name|component
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// no component then try in registry and elsewhere
name|answer
operator|=
name|createEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|addService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onEndpointAdd
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
name|answer
operator|=
name|addEndpointToRegistry
argument_list|(
name|uri
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// unknown scheme
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|scheme
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
literal|"No component found with scheme: "
operator|+
name|scheme
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getEndpoint (String name, Class<T> endpointType)
specifier|public
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
name|T
name|getEndpoint
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|endpointType
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|getEndpoint
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|InterceptSendToEndpoint
condition|)
block|{
name|endpoint
operator|=
operator|(
operator|(
name|InterceptSendToEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpointType
operator|.
name|isInstance
argument_list|(
name|endpoint
argument_list|)
condition|)
block|{
return|return
name|endpointType
operator|.
name|cast
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The endpoint is not of type: "
operator|+
name|endpointType
operator|+
literal|" but is: "
operator|+
name|endpoint
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|addRegisterEndpointCallback (EndpointStrategy strategy)
specifier|public
name|void
name|addRegisterEndpointCallback
parameter_list|(
name|EndpointStrategy
name|strategy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|endpointStrategies
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
comment|// let it be invoked for already registered endpoints so it can catch-up.
name|endpointStrategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|getEndpoints
argument_list|()
control|)
block|{
name|Endpoint
name|newEndpoint
init|=
name|strategy
operator|.
name|registerEndpoint
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|newEndpoint
operator|!=
name|endpoint
condition|)
block|{
name|endpoints
operator|.
name|put
argument_list|(
name|getEndpointKey
argument_list|(
name|newEndpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|newEndpoint
argument_list|)
argument_list|,
name|newEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Strategy to add the given endpoint to the internal endpoint registry      *      * @param uri  uri of endpoint      * @param endpoint the endpoint to add      * @return the added endpoint      */
DECL|method|addEndpointToRegistry (String uri, Endpoint endpoint)
specifier|protected
name|Endpoint
name|addEndpointToRegistry
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
for|for
control|(
name|EndpointStrategy
name|strategy
range|:
name|endpointStrategies
control|)
block|{
name|endpoint
operator|=
name|strategy
operator|.
name|registerEndpoint
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|endpoints
operator|.
name|put
argument_list|(
name|getEndpointKey
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|// Route Management Methods
comment|// -----------------------------------------------------------------------
comment|/**      * Returns the order in which the route inputs was started.      *      * @return a list ordered by the starting order of the route inputs      */
DECL|method|getRouteStartupOrder ()
specifier|public
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|getRouteStartupOrder
parameter_list|()
block|{
return|return
name|routeStartupOrder
return|;
block|}
DECL|method|getRoutes ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Route
argument_list|>
name|getRoutes
parameter_list|()
block|{
if|if
condition|(
name|routes
operator|==
literal|null
condition|)
block|{
name|routes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// lets return a copy of the collection as objects are removed later
comment|// when services are stopped
return|return
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|(
name|routes
argument_list|)
return|;
block|}
DECL|method|getRoute (String id)
specifier|public
name|Route
name|getRoute
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|Route
name|route
range|:
name|routes
control|)
block|{
if|if
condition|(
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|route
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|setRoutes (List<Route> routes)
specifier|public
name|void
name|setRoutes
parameter_list|(
name|List
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
name|this
operator|.
name|routes
operator|=
name|routes
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Overriding existing routes is not supported yet, use addRoutes instead"
argument_list|)
throw|;
block|}
DECL|method|removeRouteCollection (Collection<Route> routes)
specifier|synchronized
name|void
name|removeRouteCollection
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|routes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|routes
operator|.
name|removeAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRouteCollection (Collection<Route> routes)
specifier|synchronized
name|void
name|addRouteCollection
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|routes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|routes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|routes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|routes
operator|.
name|addAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRoutes (RoutesBuilder builder)
specifier|public
name|void
name|addRoutes
parameter_list|(
name|RoutesBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding routes from builder: "
operator|+
name|builder
argument_list|)
expr_stmt|;
block|}
comment|// lets now add the routes from the builder
name|builder
operator|.
name|addRoutesToCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|addRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
name|void
name|addRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|RouteDefinition
name|routeDefinition
range|:
name|routeDefinitions
control|)
block|{
name|routeDefinition
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|removeRouteDefinition
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|routeDefinitions
operator|.
name|addAll
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes the route definition with the given key.      *      * @return true if one or more routes was removed      */
DECL|method|removeRouteDefinition (String key)
specifier|public
name|boolean
name|removeRouteDefinition
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|RouteDefinition
argument_list|>
name|iter
init|=
name|routeDefinitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RouteDefinition
name|route
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|.
name|idOrCreate
argument_list|(
name|nodeIdFactory
argument_list|)
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|answer
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|removeRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
name|void
name|removeRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|routeDefinitions
operator|.
name|removeAll
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
for|for
control|(
name|RouteDefinition
name|routeDefinition
range|:
name|routeDefinitions
control|)
block|{
name|removeRouteDefinition
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeRouteDefinition (RouteDefinition routeDefinition)
specifier|public
name|void
name|removeRouteDefinition
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|routeDefinition
operator|.
name|idOrCreate
argument_list|(
name|nodeIdFactory
argument_list|)
decl_stmt|;
comment|// stop and remove the route
name|stopRoute
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|routeServices
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|removeRouteDefinition
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteStatus (RouteDefinition route)
specifier|public
name|ServiceStatus
name|getRouteStatus
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
return|return
name|getRouteStatus
argument_list|(
name|route
operator|.
name|idOrCreate
argument_list|(
name|nodeIdFactory
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRouteStatus (String key)
specifier|public
name|ServiceStatus
name|getRouteStatus
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
return|return
name|routeService
operator|.
name|getStatus
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|startRoute (RouteDefinition route)
specifier|public
name|void
name|startRoute
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Route
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouteContext
argument_list|>
name|routeContexts
init|=
name|route
operator|.
name|addRoutes
argument_list|(
name|this
argument_list|,
name|routes
argument_list|)
decl_stmt|;
name|RouteService
name|routeService
init|=
operator|new
name|RouteService
argument_list|(
name|this
argument_list|,
name|route
argument_list|,
name|routeContexts
argument_list|,
name|routes
argument_list|)
decl_stmt|;
name|startRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
block|}
DECL|method|startRoute (String routeId)
specifier|public
specifier|synchronized
name|void
name|startRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
name|routeService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopRoute (RouteDefinition route)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
throws|throws
name|Exception
block|{
name|stopRoute
argument_list|(
name|route
operator|.
name|idOrCreate
argument_list|(
name|nodeIdFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|stopRoute (String routeId)
specifier|public
specifier|synchronized
name|void
name|stopRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
name|routeService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|shutdownRoute (String routeId)
specifier|public
specifier|synchronized
name|void
name|shutdownRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteStartupOrder
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RouteStartupOrder
name|order
init|=
operator|new
name|DefaultRouteStartupOrder
argument_list|(
literal|1
argument_list|,
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|routeService
argument_list|)
decl_stmt|;
name|routes
operator|.
name|add
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|getShutdownStrategy
argument_list|()
operator|.
name|shutdown
argument_list|(
name|this
argument_list|,
name|routes
argument_list|)
expr_stmt|;
comment|// must stop route service as well
name|routeService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|shutdownRoute (String routeId, long timeout, TimeUnit timeUnit)
specifier|public
specifier|synchronized
name|void
name|shutdownRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteStartupOrder
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RouteStartupOrder
name|order
init|=
operator|new
name|DefaultRouteStartupOrder
argument_list|(
literal|1
argument_list|,
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|routeService
argument_list|)
decl_stmt|;
name|routes
operator|.
name|add
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|getShutdownStrategy
argument_list|()
operator|.
name|shutdown
argument_list|(
name|this
argument_list|,
name|routes
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
comment|// must stop route service as well
name|routeService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addService (Object object)
specifier|public
name|void
name|addService
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|object
decl_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onServiceAdd
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|servicesToClose
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|startServices
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
DECL|method|hasService (Object object)
specifier|public
name|boolean
name|hasService
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
return|return
name|servicesToClose
operator|.
name|contains
argument_list|(
name|object
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// Helper methods
comment|// -----------------------------------------------------------------------
DECL|method|resolveLanguage (String language)
specifier|public
name|Language
name|resolveLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|Language
name|answer
decl_stmt|;
synchronized|synchronized
init|(
name|languages
init|)
block|{
name|answer
operator|=
name|languages
operator|.
name|get
argument_list|(
name|language
argument_list|)
expr_stmt|;
comment|// check if the language is singleton, if so return the shared instance
if|if
condition|(
name|answer
operator|instanceof
name|IsSingleton
condition|)
block|{
name|boolean
name|singleton
init|=
operator|(
operator|(
name|IsSingleton
operator|)
name|answer
operator|)
operator|.
name|isSingleton
argument_list|()
decl_stmt|;
if|if
condition|(
name|singleton
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
comment|// language not known or not singleton, then use resolver
name|answer
operator|=
name|getLanguageResolver
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
name|language
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|languages
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no language resolved
return|return
name|answer
return|;
block|}
DECL|method|resolvePropertyPlaceholders (String uri)
specifier|public
name|String
name|resolvePropertyPlaceholders
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// do not parse uris that are designated for the properties component as it will handle that itself
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
literal|"properties:"
argument_list|)
operator|&&
name|uri
operator|.
name|contains
argument_list|(
literal|"#{"
argument_list|)
condition|)
block|{
comment|// the uri contains property placeholders so lookup mandatory properties component and let it parse it
name|Component
name|component
init|=
name|hasComponent
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
comment|// then fallback to lookup the component
name|component
operator|=
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"properties"
argument_list|,
name|Component
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PropertiesComponent with name properties must be defined"
operator|+
literal|" in CamelContext to support property placeholders in endpoint URIs"
argument_list|)
throw|;
block|}
comment|// force component to be created and registered as a component
name|PropertiesComponent
name|pc
init|=
name|getComponent
argument_list|(
literal|"properties"
argument_list|,
name|PropertiesComponent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the parser will throw exception if property key was not found
name|String
name|answer
init|=
name|pc
operator|.
name|parseUri
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolved uri: "
operator|+
name|uri
operator|+
literal|" --> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
return|return
name|uri
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getTypeConverter ()
specifier|public
name|TypeConverter
name|getTypeConverter
parameter_list|()
block|{
if|if
condition|(
name|typeConverter
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// we can synchronize on this as there is only one instance
comment|// of the camel context (its the container)
name|typeConverter
operator|=
name|createTypeConverter
argument_list|()
expr_stmt|;
try|try
block|{
name|addService
argument_list|(
name|typeConverter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|typeConverter
return|;
block|}
DECL|method|setTypeConverter (TypeConverter typeConverter)
specifier|public
name|void
name|setTypeConverter
parameter_list|(
name|TypeConverter
name|typeConverter
parameter_list|)
block|{
name|this
operator|.
name|typeConverter
operator|=
name|typeConverter
expr_stmt|;
block|}
DECL|method|getTypeConverterRegistry ()
specifier|public
name|TypeConverterRegistry
name|getTypeConverterRegistry
parameter_list|()
block|{
if|if
condition|(
name|typeConverterRegistry
operator|==
literal|null
condition|)
block|{
comment|// init type converter as its lazy
if|if
condition|(
name|typeConverter
operator|==
literal|null
condition|)
block|{
name|getTypeConverter
argument_list|()
expr_stmt|;
block|}
comment|// type converter is usually the default one that also is the registry
if|if
condition|(
name|typeConverter
operator|instanceof
name|DefaultTypeConverter
condition|)
block|{
name|typeConverterRegistry
operator|=
operator|(
name|DefaultTypeConverter
operator|)
name|typeConverter
expr_stmt|;
block|}
block|}
return|return
name|typeConverterRegistry
return|;
block|}
DECL|method|setTypeConverterRegistry (TypeConverterRegistry typeConverterRegistry)
specifier|public
name|void
name|setTypeConverterRegistry
parameter_list|(
name|TypeConverterRegistry
name|typeConverterRegistry
parameter_list|)
block|{
name|this
operator|.
name|typeConverterRegistry
operator|=
name|typeConverterRegistry
expr_stmt|;
block|}
DECL|method|getInjector ()
specifier|public
name|Injector
name|getInjector
parameter_list|()
block|{
if|if
condition|(
name|injector
operator|==
literal|null
condition|)
block|{
name|injector
operator|=
name|createInjector
argument_list|()
expr_stmt|;
block|}
return|return
name|injector
return|;
block|}
DECL|method|setInjector (Injector injector)
specifier|public
name|void
name|setInjector
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
block|}
DECL|method|getComponentResolver ()
specifier|public
name|ComponentResolver
name|getComponentResolver
parameter_list|()
block|{
if|if
condition|(
name|componentResolver
operator|==
literal|null
condition|)
block|{
name|componentResolver
operator|=
name|createComponentResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|componentResolver
return|;
block|}
DECL|method|setComponentResolver (ComponentResolver componentResolver)
specifier|public
name|void
name|setComponentResolver
parameter_list|(
name|ComponentResolver
name|componentResolver
parameter_list|)
block|{
name|this
operator|.
name|componentResolver
operator|=
name|componentResolver
expr_stmt|;
block|}
DECL|method|getLanguageResolver ()
specifier|public
name|LanguageResolver
name|getLanguageResolver
parameter_list|()
block|{
return|return
name|languageResolver
return|;
block|}
DECL|method|setLanguageResolver (LanguageResolver languageResolver)
specifier|public
name|void
name|setLanguageResolver
parameter_list|(
name|LanguageResolver
name|languageResolver
parameter_list|)
block|{
name|this
operator|.
name|languageResolver
operator|=
name|languageResolver
expr_stmt|;
block|}
DECL|method|isAutoCreateComponents ()
specifier|public
name|boolean
name|isAutoCreateComponents
parameter_list|()
block|{
return|return
name|autoCreateComponents
return|;
block|}
DECL|method|setAutoCreateComponents (boolean autoCreateComponents)
specifier|public
name|void
name|setAutoCreateComponents
parameter_list|(
name|boolean
name|autoCreateComponents
parameter_list|)
block|{
name|this
operator|.
name|autoCreateComponents
operator|=
name|autoCreateComponents
expr_stmt|;
block|}
DECL|method|getRegistry ()
specifier|public
name|Registry
name|getRegistry
parameter_list|()
block|{
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
block|{
name|registry
operator|=
name|createRegistry
argument_list|()
expr_stmt|;
name|setRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
return|return
name|registry
return|;
block|}
comment|/**      * Sets the registry to the given JNDI context      *      * @param jndiContext is the JNDI context to use as the registry      * @see #setRegistry(org.apache.camel.spi.Registry)      */
DECL|method|setJndiContext (Context jndiContext)
specifier|public
name|void
name|setJndiContext
parameter_list|(
name|Context
name|jndiContext
parameter_list|)
block|{
name|setRegistry
argument_list|(
operator|new
name|JndiRegistry
argument_list|(
name|jndiContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setRegistry (Registry registry)
specifier|public
name|void
name|setRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
comment|// wrap the registry so we always do propery placeholder lookups
if|if
condition|(
operator|!
operator|(
name|registry
operator|instanceof
name|PropertyPlaceholderDelegateRegistry
operator|)
condition|)
block|{
name|registry
operator|=
operator|new
name|PropertyPlaceholderDelegateRegistry
argument_list|(
name|this
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
DECL|method|getLifecycleStrategies ()
specifier|public
name|List
argument_list|<
name|LifecycleStrategy
argument_list|>
name|getLifecycleStrategies
parameter_list|()
block|{
return|return
name|lifecycleStrategies
return|;
block|}
DECL|method|setLifecycleStrategies (List<LifecycleStrategy> lifecycleStrategies)
specifier|public
name|void
name|setLifecycleStrategies
parameter_list|(
name|List
argument_list|<
name|LifecycleStrategy
argument_list|>
name|lifecycleStrategies
parameter_list|)
block|{
name|this
operator|.
name|lifecycleStrategies
operator|=
name|lifecycleStrategies
expr_stmt|;
block|}
DECL|method|addLifecycleStrategy (LifecycleStrategy lifecycleStrategy)
specifier|public
name|void
name|addLifecycleStrategy
parameter_list|(
name|LifecycleStrategy
name|lifecycleStrategy
parameter_list|)
block|{
name|this
operator|.
name|lifecycleStrategies
operator|.
name|add
argument_list|(
name|lifecycleStrategy
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteDefinitions ()
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRouteDefinitions
parameter_list|()
block|{
return|return
name|routeDefinitions
return|;
block|}
DECL|method|getRouteDefinition (String id)
specifier|public
name|RouteDefinition
name|getRouteDefinition
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routeDefinitions
control|)
block|{
if|if
condition|(
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|route
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getInterceptStrategies ()
specifier|public
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|getInterceptStrategies
parameter_list|()
block|{
return|return
name|interceptStrategies
return|;
block|}
DECL|method|setInterceptStrategies (List<InterceptStrategy> interceptStrategies)
specifier|public
name|void
name|setInterceptStrategies
parameter_list|(
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
parameter_list|)
block|{
name|this
operator|.
name|interceptStrategies
operator|=
name|interceptStrategies
expr_stmt|;
block|}
DECL|method|addInterceptStrategy (InterceptStrategy interceptStrategy)
specifier|public
name|void
name|addInterceptStrategy
parameter_list|(
name|InterceptStrategy
name|interceptStrategy
parameter_list|)
block|{
name|getInterceptStrategies
argument_list|()
operator|.
name|add
argument_list|(
name|interceptStrategy
argument_list|)
expr_stmt|;
comment|// for backwards compatible or if user add them here instead of the setXXX methods
if|if
condition|(
name|interceptStrategy
operator|instanceof
name|Tracer
condition|)
block|{
name|setTracing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interceptStrategy
operator|instanceof
name|HandleFault
condition|)
block|{
name|setHandleFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interceptStrategy
operator|instanceof
name|StreamCaching
condition|)
block|{
name|setStreamCaching
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interceptStrategy
operator|instanceof
name|Delayer
condition|)
block|{
name|setDelayer
argument_list|(
operator|(
operator|(
name|Delayer
operator|)
name|interceptStrategy
operator|)
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setStreamCaching (Boolean cache)
specifier|public
name|void
name|setStreamCaching
parameter_list|(
name|Boolean
name|cache
parameter_list|)
block|{
name|this
operator|.
name|streamCache
operator|=
name|cache
expr_stmt|;
block|}
DECL|method|isStreamCaching ()
specifier|public
name|Boolean
name|isStreamCaching
parameter_list|()
block|{
return|return
name|streamCache
return|;
block|}
DECL|method|setTracing (Boolean tracing)
specifier|public
name|void
name|setTracing
parameter_list|(
name|Boolean
name|tracing
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|tracing
expr_stmt|;
block|}
DECL|method|isTracing ()
specifier|public
name|Boolean
name|isTracing
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
DECL|method|isHandleFault ()
specifier|public
name|Boolean
name|isHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
DECL|method|setHandleFault (Boolean handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|Boolean
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
DECL|method|getDelayer ()
specifier|public
name|Long
name|getDelayer
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
DECL|method|setDelayer (Long delay)
specifier|public
name|void
name|setDelayer
parameter_list|(
name|Long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|createProducerTemplate ()
specifier|public
name|ProducerTemplate
name|createProducerTemplate
parameter_list|()
block|{
return|return
operator|new
name|DefaultProducerTemplate
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createConsumerTemplate ()
specifier|public
name|ConsumerTemplate
name|createConsumerTemplate
parameter_list|()
block|{
return|return
operator|new
name|DefaultConsumerTemplate
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getErrorHandlerBuilder ()
specifier|public
name|ErrorHandlerBuilder
name|getErrorHandlerBuilder
parameter_list|()
block|{
return|return
name|errorHandlerBuilder
return|;
block|}
comment|/**      * Sets the default error handler builder which is inherited by the routes      */
DECL|method|setErrorHandlerBuilder (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilder
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerBuilder
operator|=
name|errorHandlerBuilder
expr_stmt|;
block|}
DECL|method|setProducerServicePool (ServicePool<Endpoint, Producer> producerServicePool)
specifier|public
name|void
name|setProducerServicePool
parameter_list|(
name|ServicePool
argument_list|<
name|Endpoint
argument_list|,
name|Producer
argument_list|>
name|producerServicePool
parameter_list|)
block|{
name|this
operator|.
name|producerServicePool
operator|=
name|producerServicePool
expr_stmt|;
block|}
DECL|method|getProducerServicePool ()
specifier|public
name|ServicePool
argument_list|<
name|Endpoint
argument_list|,
name|Producer
argument_list|>
name|getProducerServicePool
parameter_list|()
block|{
return|return
name|producerServicePool
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|doNotStart
init|=
operator|!
name|firstStartDone
operator|&&
operator|!
name|isAutoStartup
argument_list|()
decl_stmt|;
name|firstStartDone
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|doNotStart
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot start Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") as it has been configured to not auto start"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// super will invoke doStart which will prepare internal services before we continue and start the routes below
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting routes..."
argument_list|)
expr_stmt|;
comment|// the context is now considered started (i.e. isStarted() == true))
comment|// starting routes is done after, not during context startup
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// list of inputs to start when all the routes have been prepared for starting
comment|// we use a tree map so the routes will be ordered according to startup order defined on the route
name|Map
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|inputs
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
argument_list|()
decl_stmt|;
comment|// figure out the order in which the routes should be started
for|for
control|(
name|RouteService
name|routeService
range|:
name|routeServices
operator|.
name|values
argument_list|()
control|)
block|{
name|Boolean
name|autoStart
init|=
name|routeService
operator|.
name|getRouteDefinition
argument_list|()
operator|.
name|isAutoStartup
argument_list|()
decl_stmt|;
if|if
condition|(
name|autoStart
operator|==
literal|null
operator|||
name|autoStart
condition|)
block|{
try|try
block|{
comment|// add the inputs from this route service to the list to start afterwards
comment|// should be ordered according to the startup number
name|Integer
name|startupOrder
init|=
name|routeService
operator|.
name|getRouteDefinition
argument_list|()
operator|.
name|getStartupOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|startupOrder
operator|==
literal|null
condition|)
block|{
comment|// auto assign a default startup order
name|startupOrder
operator|=
name|defaultRouteStartupOrder
operator|++
expr_stmt|;
block|}
comment|// create holder object that contains information about this route to be started
name|Route
name|route
init|=
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|DefaultRouteStartupOrder
name|holder
init|=
operator|new
name|DefaultRouteStartupOrder
argument_list|(
name|startupOrder
argument_list|,
name|route
argument_list|,
name|routeService
argument_list|)
decl_stmt|;
comment|// check for clash by startupOrder id
name|DefaultRouteStartupOrder
name|other
init|=
name|inputs
operator|.
name|get
argument_list|(
name|startupOrder
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
name|String
name|otherId
init|=
name|other
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|holder
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"startupOrder clash. Route "
operator|+
name|otherId
operator|+
literal|" already has startupOrder "
operator|+
name|startupOrder
operator|+
literal|" configured which this route have as well. Please correct startupOrder to be unique among all your routes."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// no clash then add the holder to the existing inputs of routes to be started
name|inputs
operator|.
name|put
argument_list|(
name|startupOrder
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FailedToStartRouteException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// should not start on startup
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot start route "
operator|+
name|routeService
operator|.
name|getId
argument_list|()
operator|+
literal|" as it is configured with auto startup disabled."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now prepare the routes by starting its services before we start the input
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|entry
range|:
name|inputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// defer starting inputs till later as we want to prepare the routes by starting
comment|// all their processors and child services etc.
comment|// then later we open the floods to Camel by starting the inputs
comment|// what this does is to ensure Camel is more robust on starting routes as all routes
comment|// will then be prepared in time before we start inputs which will consume messages to be routed
name|RouteService
name|routeService
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRouteService
argument_list|()
decl_stmt|;
name|routeService
operator|.
name|startInputs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|routeService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|routeService
operator|.
name|startInputs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check for clash with multiple consumers of the same endpoints which is not allowed
name|List
argument_list|<
name|Endpoint
argument_list|>
name|routeInputs
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|entry
range|:
name|inputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|order
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Route
name|route
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRoute
argument_list|()
decl_stmt|;
name|RouteService
name|routeService
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRouteService
argument_list|()
decl_stmt|;
for|for
control|(
name|Consumer
name|consumer
range|:
name|routeService
operator|.
name|getInputs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Endpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
comment|// is multiple consumers supported
name|boolean
name|multipleConsumersSupported
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|MultipleConsumersSupport
condition|)
block|{
name|multipleConsumersSupported
operator|=
operator|(
operator|(
name|MultipleConsumersSupport
operator|)
name|endpoint
operator|)
operator|.
name|isMultipleConsumersSupported
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|multipleConsumersSupported
operator|&&
name|routeInputs
operator|.
name|contains
argument_list|(
name|endpoint
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|routeService
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Multiple consumers for the same endpoint is not allowed: "
operator|+
name|endpoint
argument_list|)
throw|;
block|}
else|else
block|{
comment|// start the
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting consumer (order: "
operator|+
name|order
operator|+
literal|") on route: "
operator|+
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onServiceAdd
argument_list|(
name|this
argument_list|,
name|consumer
argument_list|,
name|route
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|routeInputs
operator|.
name|add
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
comment|// add to the order which they was started, so we know how to stop them in reverse order
name|routeStartupOrder
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Route "
operator|+
name|i
operator|+
literal|": "
operator|+
name|getRoutes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"... Routes started"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Started "
operator|+
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" routes"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") started"
argument_list|)
expr_stmt|;
name|EventHelper
operator|.
name|notifyCamelContextStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -----------------------------------------------------------------------
DECL|method|doStart ()
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") is starting"
argument_list|)
expr_stmt|;
try|try
block|{
name|doStartCamel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fire event that we failed to start
name|EventHelper
operator|.
name|notifyCamelContextStartupFailed
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// rethrow cause
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|doStartCamel ()
specifier|private
name|void
name|doStartCamel
parameter_list|()
throws|throws
name|Exception
block|{
name|startServices
argument_list|(
name|producerServicePool
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStreamCaching
argument_list|()
condition|)
block|{
comment|// only add a new stream cache if not already configured
if|if
condition|(
name|StreamCaching
operator|.
name|getStreamCaching
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"StreamCaching is enabled on CamelContext"
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|StreamCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isTracing
argument_list|()
condition|)
block|{
comment|// tracing is added in the DefaultChannel so we can enable it on the fly
name|LOG
operator|.
name|info
argument_list|(
literal|"Tracing is enabled on CamelContext"
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHandleFault
argument_list|()
condition|)
block|{
comment|// only add a new handle fault if not already configured
if|if
condition|(
name|HandleFault
operator|.
name|getHandleFault
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HandleFault is enabled on CamelContext"
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|HandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getDelayer
argument_list|()
operator|!=
literal|null
operator|&&
name|getDelayer
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// only add a new delayer if not already configured
if|if
condition|(
name|Delayer
operator|.
name|getDelayer
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|long
name|millis
init|=
name|getDelayer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Delayer is enabled with: "
operator|+
name|millis
operator|+
literal|" ms. on CamelContext"
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|Delayer
argument_list|(
name|millis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// start management strategy before lifecycles are started
name|getManagementStrategy
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|LifecycleStrategy
argument_list|>
name|it
init|=
name|lifecycleStrategies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LifecycleStrategy
name|strategy
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|strategy
operator|.
name|onContextStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not all containers allow access to its MBeanServer (such as OC4j)
comment|// so here we remove the troublesome strategy to be able to continue
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot start lifecycle strategy: "
operator|+
name|strategy
operator|+
literal|". This strategy will be removed. Cause "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// must let some bootstrap service be started before we can notify the starting event
name|EventHelper
operator|.
name|notifyCamelContextStarting
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|forceLazyInitialization
argument_list|()
expr_stmt|;
name|startServices
argument_list|(
name|components
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|inflightRepository
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|shutdownStrategy
argument_list|)
expr_stmt|;
comment|// To avoid initiating the routeDefinitions after stopping the camel context
if|if
condition|(
operator|!
name|routeDefinitionInitiated
condition|)
block|{
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
name|routeDefinitionInitiated
operator|=
literal|true
expr_stmt|;
block|}
comment|// starting will continue in the start method
block|}
DECL|method|doStop ()
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") is stopping"
argument_list|)
expr_stmt|;
name|EventHelper
operator|.
name|notifyCamelContextStopping
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// stop route inputs in the same order as they was started so we stop the very first inputs first
name|shutdownStrategy
operator|.
name|shutdown
argument_list|(
name|this
argument_list|,
name|getRouteStartupOrder
argument_list|()
argument_list|)
expr_stmt|;
name|getRouteStartupOrder
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stopServices
argument_list|(
name|routeServices
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not clear route services as we can start Camel again and get the route back as before
comment|// the stop order is important
name|stopServices
argument_list|(
name|servicesToClose
argument_list|)
expr_stmt|;
name|servicesToClose
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stopServices
argument_list|(
name|endpoints
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stopServices
argument_list|(
name|components
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// special shutdown of a shared producer service pool as it should only be shutdown by camel context
if|if
condition|(
name|producerServicePool
operator|instanceof
name|SharedProducerServicePool
condition|)
block|{
operator|(
operator|(
name|SharedProducerServicePool
operator|)
name|producerServicePool
operator|)
operator|.
name|shutdown
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stopServices
argument_list|(
name|producerServicePool
argument_list|)
expr_stmt|;
block|}
name|stopServices
argument_list|(
name|inflightRepository
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onContextStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot stop lifecycle strategies: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// must notify that we are stopped before stopping the management strategy
name|EventHelper
operator|.
name|notifyCamelContextStopped
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// stop management as the last one
name|stopServices
argument_list|(
name|getManagementStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") stopped"
argument_list|)
expr_stmt|;
block|}
DECL|method|stopServices (Object service)
specifier|private
name|void
name|stopServices
parameter_list|(
name|Object
name|service
parameter_list|)
throws|throws
name|Exception
block|{
comment|// allow us to do custom work before delegating to service helper
try|try
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while stopping service: "
operator|+
name|service
operator|+
literal|". This exception will be ignored."
argument_list|)
expr_stmt|;
comment|// fire event
name|EventHelper
operator|.
name|notifyServiceStopFailure
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopServices (Collection<?> services)
specifier|private
name|void
name|stopServices
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|services
parameter_list|)
throws|throws
name|Exception
block|{
comment|// reverse stopping by default
name|stopServices
argument_list|(
name|services
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|stopServices (Collection<?> services, boolean reverse)
specifier|private
name|void
name|stopServices
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|services
parameter_list|,
name|boolean
name|reverse
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|services
argument_list|)
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|reverseList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|services
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|reverseList
argument_list|)
expr_stmt|;
name|list
operator|=
name|reverseList
expr_stmt|;
block|}
for|for
control|(
name|Object
name|service
range|:
name|list
control|)
block|{
name|stopServices
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startServices (Object service)
specifier|private
name|void
name|startServices
parameter_list|(
name|Object
name|service
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
DECL|method|startRouteDefinitions (Collection<RouteDefinition> list)
specifier|protected
name|void
name|startRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|list
control|)
block|{
name|startRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Starts the given route service      */
DECL|method|startRouteService (RouteService routeService)
specifier|protected
specifier|synchronized
name|void
name|startRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|routeService
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ServiceStatus
name|status
init|=
name|getRouteStatus
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|isStarted
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Route "
operator|+
name|key
operator|+
literal|" is already started"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|routeServices
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|routeService
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
name|routeService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Lets force some lazy initialization to occur upfront before we start any      * components and create routes      */
DECL|method|forceLazyInitialization ()
specifier|protected
name|void
name|forceLazyInitialization
parameter_list|()
block|{
name|getInjector
argument_list|()
expr_stmt|;
name|getLanguageResolver
argument_list|()
expr_stmt|;
name|getTypeConverter
argument_list|()
expr_stmt|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createTypeConverter ()
specifier|protected
name|TypeConverter
name|createTypeConverter
parameter_list|()
block|{
name|DefaultTypeConverter
name|answer
init|=
operator|new
name|DefaultTypeConverter
argument_list|(
name|packageScanClassResolver
argument_list|,
name|getInjector
argument_list|()
argument_list|,
name|getDefaultFactoryFinder
argument_list|()
argument_list|)
decl_stmt|;
name|setTypeConverterRegistry
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createInjector ()
specifier|protected
name|Injector
name|createInjector
parameter_list|()
block|{
name|FactoryFinder
name|finder
init|=
name|getDefaultFactoryFinder
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|(
name|Injector
operator|)
name|finder
operator|.
name|newInstance
argument_list|(
literal|"Injector"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// lets use the default
return|return
operator|new
name|ReflectionInjector
argument_list|()
return|;
block|}
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createComponentResolver ()
specifier|protected
name|ComponentResolver
name|createComponentResolver
parameter_list|()
block|{
return|return
operator|new
name|DefaultComponentResolver
argument_list|()
return|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createRegistry ()
specifier|protected
name|Registry
name|createRegistry
parameter_list|()
block|{
return|return
operator|new
name|JndiRegistry
argument_list|()
return|;
block|}
comment|/**      * A pluggable strategy to allow an endpoint to be created without requiring      * a component to be its factory, such as for looking up the URI inside some      * {@link Registry}      *      * @param uri the uri for the endpoint to be created      * @return the newly created endpoint or null if it could not be resolved      */
DECL|method|createEndpoint (String uri)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Object
name|value
init|=
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Endpoint
condition|)
block|{
return|return
operator|(
name|Endpoint
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Processor
condition|)
block|{
return|return
operator|new
name|ProcessorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
operator|(
name|Processor
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|convertBeanToEndpoint
argument_list|(
name|uri
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using      * some kind of transformation or wrapper      *      * @param uri  the uri for the endpoint (and name in the registry)      * @param bean the bean to be converted to an endpoint, which will be not null      * @return a new endpoint      */
DECL|method|convertBeanToEndpoint (String uri, Object bean)
specifier|protected
name|Endpoint
name|convertBeanToEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"uri: "
operator|+
name|uri
operator|+
literal|" bean: "
operator|+
name|bean
operator|+
literal|" could not be converted to an Endpoint"
argument_list|)
throw|;
block|}
comment|/**      * Should we start newly added routes?      */
DECL|method|shouldStartRoutes ()
specifier|protected
name|boolean
name|shouldStartRoutes
parameter_list|()
block|{
return|return
name|isStarted
argument_list|()
operator|&&
operator|!
name|isStarting
argument_list|()
return|;
block|}
DECL|method|setDataFormats (Map<String, DataFormatDefinition> dataFormats)
specifier|public
name|void
name|setDataFormats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
parameter_list|)
block|{
name|this
operator|.
name|dataFormats
operator|=
name|dataFormats
expr_stmt|;
block|}
DECL|method|getDataFormats ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|getDataFormats
parameter_list|()
block|{
return|return
name|dataFormats
return|;
block|}
DECL|method|getProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties (Map<String, String> properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|getDefaultFactoryFinder ()
specifier|public
name|FactoryFinder
name|getDefaultFactoryFinder
parameter_list|()
block|{
if|if
condition|(
name|defaultFactoryFinder
operator|==
literal|null
condition|)
block|{
name|defaultFactoryFinder
operator|=
name|factoryFinderResolver
operator|.
name|resolveDefaultFactoryFinder
argument_list|(
name|getClassResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultFactoryFinder
return|;
block|}
DECL|method|setFactoryFinderResolver (FactoryFinderResolver resolver)
specifier|public
name|void
name|setFactoryFinderResolver
parameter_list|(
name|FactoryFinderResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|factoryFinderResolver
operator|=
name|resolver
expr_stmt|;
block|}
DECL|method|getFactoryFinder (String path)
specifier|public
name|FactoryFinder
name|getFactoryFinder
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|NoFactoryAvailableException
block|{
synchronized|synchronized
init|(
name|factories
init|)
block|{
name|FactoryFinder
name|answer
init|=
name|factories
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|factoryFinderResolver
operator|.
name|resolveFactoryFinder
argument_list|(
name|getClassResolver
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getClassResolver ()
specifier|public
name|ClassResolver
name|getClassResolver
parameter_list|()
block|{
return|return
name|classResolver
return|;
block|}
DECL|method|setClassResolver (ClassResolver classResolver)
specifier|public
name|void
name|setClassResolver
parameter_list|(
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|this
operator|.
name|classResolver
operator|=
name|classResolver
expr_stmt|;
block|}
DECL|method|getPackageScanClassResolver ()
specifier|public
name|PackageScanClassResolver
name|getPackageScanClassResolver
parameter_list|()
block|{
return|return
name|packageScanClassResolver
return|;
block|}
DECL|method|setPackageScanClassResolver (PackageScanClassResolver packageScanClassResolver)
specifier|public
name|void
name|setPackageScanClassResolver
parameter_list|(
name|PackageScanClassResolver
name|packageScanClassResolver
parameter_list|)
block|{
name|this
operator|.
name|packageScanClassResolver
operator|=
name|packageScanClassResolver
expr_stmt|;
block|}
DECL|method|getComponentNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getComponentNames
parameter_list|()
block|{
synchronized|synchronized
init|(
name|components
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|components
operator|.
name|keySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getLanguageNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLanguageNames
parameter_list|()
block|{
synchronized|synchronized
init|(
name|languages
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|languages
operator|.
name|keySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getNodeIdFactory ()
specifier|public
name|NodeIdFactory
name|getNodeIdFactory
parameter_list|()
block|{
return|return
name|nodeIdFactory
return|;
block|}
DECL|method|setNodeIdFactory (NodeIdFactory idFactory)
specifier|public
name|void
name|setNodeIdFactory
parameter_list|(
name|NodeIdFactory
name|idFactory
parameter_list|)
block|{
name|this
operator|.
name|nodeIdFactory
operator|=
name|idFactory
expr_stmt|;
block|}
DECL|method|getManagementStrategy ()
specifier|public
name|ManagementStrategy
name|getManagementStrategy
parameter_list|()
block|{
if|if
condition|(
name|managementStrategyInitialized
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|managementStrategy
operator|=
name|createManagementStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|managementStrategy
return|;
block|}
DECL|method|setManagementStrategy (ManagementStrategy managementStrategy)
specifier|public
name|void
name|setManagementStrategy
parameter_list|(
name|ManagementStrategy
name|managementStrategy
parameter_list|)
block|{
name|this
operator|.
name|managementStrategy
operator|=
name|managementStrategy
expr_stmt|;
comment|// should be considered initialized as we use a custom strategy
name|managementStrategyInitialized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultTracer ()
specifier|public
name|InterceptStrategy
name|getDefaultTracer
parameter_list|()
block|{
if|if
condition|(
name|defaultTracer
operator|==
literal|null
condition|)
block|{
name|defaultTracer
operator|=
operator|new
name|Tracer
argument_list|()
expr_stmt|;
block|}
return|return
name|defaultTracer
return|;
block|}
DECL|method|disableJMX ()
specifier|public
name|void
name|disableJMX
parameter_list|()
block|{
name|disableJMX
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getInflightRepository ()
specifier|public
name|InflightRepository
name|getInflightRepository
parameter_list|()
block|{
return|return
name|inflightRepository
return|;
block|}
DECL|method|setInflightRepository (InflightRepository repository)
specifier|public
name|void
name|setInflightRepository
parameter_list|(
name|InflightRepository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|inflightRepository
operator|=
name|repository
expr_stmt|;
block|}
DECL|method|setAutoStartup (Boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|Boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|Boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
operator|!=
literal|null
operator|&&
name|autoStartup
return|;
block|}
DECL|method|getApplicationContextClassLoader ()
specifier|public
name|ClassLoader
name|getApplicationContextClassLoader
parameter_list|()
block|{
return|return
name|applicationContextClassLoader
return|;
block|}
DECL|method|setApplicationContextClassLoader (ClassLoader classLoader)
specifier|public
name|void
name|setApplicationContextClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|applicationContextClassLoader
operator|=
name|classLoader
expr_stmt|;
block|}
DECL|method|getDataFormatResolver ()
specifier|public
name|DataFormatResolver
name|getDataFormatResolver
parameter_list|()
block|{
return|return
name|dataFormatResolver
return|;
block|}
DECL|method|setDataFormatResolver (DataFormatResolver dataFormatResolver)
specifier|public
name|void
name|setDataFormatResolver
parameter_list|(
name|DataFormatResolver
name|dataFormatResolver
parameter_list|)
block|{
name|this
operator|.
name|dataFormatResolver
operator|=
name|dataFormatResolver
expr_stmt|;
block|}
DECL|method|resolveDataFormat (String name)
specifier|public
name|DataFormat
name|resolveDataFormat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|dataFormatResolver
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|resolveDataFormatDefinition (String name)
specifier|public
name|DataFormatDefinition
name|resolveDataFormatDefinition
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|dataFormatResolver
operator|.
name|resolveDataFormatDefinition
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|getShutdownStrategy ()
specifier|public
name|ShutdownStrategy
name|getShutdownStrategy
parameter_list|()
block|{
return|return
name|shutdownStrategy
return|;
block|}
DECL|method|setShutdownStrategy (ShutdownStrategy shutdownStrategy)
specifier|public
name|void
name|setShutdownStrategy
parameter_list|(
name|ShutdownStrategy
name|shutdownStrategy
parameter_list|)
block|{
name|this
operator|.
name|shutdownStrategy
operator|=
name|shutdownStrategy
expr_stmt|;
block|}
DECL|method|getShutdownRoute ()
specifier|public
name|ShutdownRoute
name|getShutdownRoute
parameter_list|()
block|{
return|return
name|shutdownRoute
return|;
block|}
DECL|method|setShutdownRoute (ShutdownRoute shutdownRoute)
specifier|public
name|void
name|setShutdownRoute
parameter_list|(
name|ShutdownRoute
name|shutdownRoute
parameter_list|)
block|{
name|this
operator|.
name|shutdownRoute
operator|=
name|shutdownRoute
expr_stmt|;
block|}
DECL|method|getShutdownRunningTask ()
specifier|public
name|ShutdownRunningTask
name|getShutdownRunningTask
parameter_list|()
block|{
return|return
name|shutdownRunningTask
return|;
block|}
DECL|method|setShutdownRunningTask (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|void
name|setShutdownRunningTask
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
name|this
operator|.
name|shutdownRunningTask
operator|=
name|shutdownRunningTask
expr_stmt|;
block|}
DECL|method|getExecutorServiceStrategy ()
specifier|public
name|ExecutorServiceStrategy
name|getExecutorServiceStrategy
parameter_list|()
block|{
return|return
name|executorServiceStrategy
return|;
block|}
DECL|method|setExecutorServiceStrategy (ExecutorServiceStrategy executorServiceStrategy)
specifier|public
name|void
name|setExecutorServiceStrategy
parameter_list|(
name|ExecutorServiceStrategy
name|executorServiceStrategy
parameter_list|)
block|{
name|this
operator|.
name|executorServiceStrategy
operator|=
name|executorServiceStrategy
expr_stmt|;
block|}
DECL|method|getEndpointKey (String uri, Endpoint endpoint)
specifier|protected
name|String
name|getEndpointKey
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
return|return
name|uri
return|;
block|}
else|else
block|{
name|int
name|counter
init|=
name|endpointKeyCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
return|return
name|uri
operator|+
literal|":"
operator|+
name|counter
return|;
block|}
block|}
DECL|method|getRouteServices ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|getRouteServices
parameter_list|()
block|{
return|return
name|routeServices
return|;
block|}
DECL|method|createManagementStrategy ()
specifier|protected
name|ManagementStrategy
name|createManagementStrategy
parameter_list|()
block|{
name|ManagementStrategy
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|disableJMX
operator|||
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|JmxSystemPropertyKeys
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMX is disabled. Using DefaultManagementStrategy."
argument_list|)
expr_stmt|;
name|answer
operator|=
operator|new
name|DefaultManagementStrategy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMX enabled. Using DefaultManagedLifecycleStrategy."
argument_list|)
expr_stmt|;
name|answer
operator|=
operator|new
name|ManagedManagementStrategy
argument_list|(
operator|new
name|DefaultManagementAgent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
comment|// prefer to have it at first strategy
name|lifecycleStrategies
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|DefaultManagementLifecycleStrategy
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
comment|// if we can't instantiate the JMX enabled strategy then fallback to default
comment|// could be because of missing .jars on the classpath
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find needed classes for JMX lifecycle strategy."
operator|+
literal|" Needed class is in spring-context.jar using Spring 2.5 or newer"
operator|+
literal|" (spring-jmx.jar using Spring 2.0.x)."
operator|+
literal|" NoClassDefFoundError: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not create JMX lifecycle strategy, caused by: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot use JMX. Fallback to using DefaultManagementStrategy."
argument_list|)
expr_stmt|;
name|answer
operator|=
operator|new
name|DefaultManagementStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CamelContext("
operator|+
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

