begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|IsSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoFactoryAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|DefaultTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|InstrumentationLifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|JmxSystemPropertyKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Delayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|StreamCaching
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ComponentResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExchangeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServicePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|SystemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
operator|.
name|startServices
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
operator|.
name|stopServices
import|;
end_import

begin_comment
comment|/**  * Represents the context used to configure routes and the policies to use.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultCamelContext
specifier|public
class|class
name|DefaultCamelContext
extends|extends
name|ServiceSupport
implements|implements
name|CamelContext
implements|,
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NAME_PREFIX
init|=
literal|"camel-"
decl_stmt|;
DECL|field|nameSuffix
specifier|private
specifier|static
name|int
name|nameSuffix
decl_stmt|;
DECL|field|routeDefinitionInitiated
specifier|private
name|boolean
name|routeDefinitionInitiated
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|endpoints
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|endpoints
init|=
operator|new
name|LRUCache
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
DECL|field|endpointStrategies
specifier|private
specifier|final
name|List
argument_list|<
name|EndpointStrategy
argument_list|>
name|endpointStrategies
init|=
operator|new
name|ArrayList
argument_list|<
name|EndpointStrategy
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|components
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|components
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|routes
specifier|private
name|List
argument_list|<
name|Route
argument_list|>
name|routes
decl_stmt|;
DECL|field|servicesToClose
specifier|private
specifier|final
name|List
argument_list|<
name|Service
argument_list|>
name|servicesToClose
init|=
operator|new
name|ArrayList
argument_list|<
name|Service
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|typeConverter
specifier|private
name|TypeConverter
name|typeConverter
decl_stmt|;
DECL|field|typeConverterRegistry
specifier|private
name|TypeConverterRegistry
name|typeConverterRegistry
decl_stmt|;
DECL|field|exchangeConverter
specifier|private
name|ExchangeConverter
name|exchangeConverter
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|field|componentResolver
specifier|private
name|ComponentResolver
name|componentResolver
decl_stmt|;
DECL|field|autoCreateComponents
specifier|private
name|boolean
name|autoCreateComponents
init|=
literal|true
decl_stmt|;
DECL|field|languageResolver
specifier|private
name|LanguageResolver
name|languageResolver
init|=
operator|new
name|DefaultLanguageResolver
argument_list|()
decl_stmt|;
DECL|field|languages
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Language
argument_list|>
name|languages
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Language
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|registry
specifier|private
name|Registry
name|registry
decl_stmt|;
DECL|field|lifecycleStrategy
specifier|private
name|LifecycleStrategy
name|lifecycleStrategy
decl_stmt|;
DECL|field|routeDefinitions
specifier|private
specifier|final
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|interceptStrategies
specifier|private
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptStrategy
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|trace
specifier|private
name|Boolean
name|trace
decl_stmt|;
DECL|field|streamCache
specifier|private
name|Boolean
name|streamCache
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|handleFault
specifier|private
name|Boolean
name|handleFault
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|delay
specifier|private
name|Long
name|delay
decl_stmt|;
DECL|field|errorHandlerBuilder
specifier|private
name|ErrorHandlerBuilder
name|errorHandlerBuilder
decl_stmt|;
DECL|field|dataFormats
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|factoryFinderResolver
specifier|private
name|FactoryFinderResolver
name|factoryFinderResolver
init|=
operator|new
name|DefaultFactoryFinderResolver
argument_list|()
decl_stmt|;
DECL|field|defaultFactoryFinder
specifier|private
name|FactoryFinder
name|defaultFactoryFinder
decl_stmt|;
DECL|field|factories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FactoryFinder
argument_list|>
name|factories
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FactoryFinder
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|routeServices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|routeServices
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|classResolver
specifier|private
name|ClassResolver
name|classResolver
decl_stmt|;
DECL|field|packageScanClassResolver
specifier|private
name|PackageScanClassResolver
name|packageScanClassResolver
decl_stmt|;
comment|// we use a capacity of 100 per endpoint, so for the same endpoint we have at most 100 producers in the pool
comment|// so if we have 6 endpoints in the pool, we have 6 x 100 producers in total
DECL|field|producerServicePool
specifier|private
name|ServicePool
argument_list|<
name|Endpoint
argument_list|,
name|Producer
argument_list|>
name|producerServicePool
init|=
operator|new
name|DefaultProducerServicePool
argument_list|(
literal|100
argument_list|)
decl_stmt|;
DECL|method|DefaultCamelContext ()
specifier|public
name|DefaultCamelContext
parameter_list|()
block|{
name|name
operator|=
name|NAME_PREFIX
operator|+
operator|++
name|nameSuffix
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|JmxSystemPropertyKeys
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMX is disabled. Using DefaultLifecycleStrategy."
argument_list|)
expr_stmt|;
name|lifecycleStrategy
operator|=
operator|new
name|DefaultLifecycleStrategy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMX enabled. Using InstrumentationLifecycleStrategy."
argument_list|)
expr_stmt|;
name|lifecycleStrategy
operator|=
operator|new
name|InstrumentationLifecycleStrategy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
comment|// if we can't instantiate the JMX enabled strategy then fallback to default
comment|// could be because of missing .jars on the classpath
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find needed classes for JMX lifecycle strategy."
operator|+
literal|" Needed class is in spring-context.jar using Spring 2.5 or newer ("
operator|+
literal|" spring-jmx.jar using Spring 2.0.x)."
operator|+
literal|" NoClassDefFoundError: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not create JMX lifecycle strategy, caused by: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if not created then fallback to default
if|if
condition|(
name|lifecycleStrategy
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot use JMX lifecycle strategy. Using DefaultLifecycleStrategy instead."
argument_list|)
expr_stmt|;
name|lifecycleStrategy
operator|=
operator|new
name|DefaultLifecycleStrategy
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|classResolver
operator|==
literal|null
condition|)
block|{
name|classResolver
operator|=
operator|new
name|DefaultClassResolver
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|packageScanClassResolver
operator|==
literal|null
condition|)
block|{
comment|// use WebSphere specific resolver if running on WebSphere
if|if
condition|(
name|WebSpherePacakageScanClassResolver
operator|.
name|isWebSphereClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using WebSphere specific PackageScanClassResolver"
argument_list|)
expr_stmt|;
name|packageScanClassResolver
operator|=
operator|new
name|WebSpherePacakageScanClassResolver
argument_list|(
literal|"META-INF/services/org/apache/camel/TypeConverter"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|packageScanClassResolver
operator|=
operator|new
name|DefaultPackageScanClassResolver
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates the {@link CamelContext} using the given JNDI context as the      * registry      */
DECL|method|DefaultCamelContext (Context jndiContext)
specifier|public
name|DefaultCamelContext
parameter_list|(
name|Context
name|jndiContext
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setJndiContext
argument_list|(
name|jndiContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the {@link CamelContext} using the given registry      */
DECL|method|DefaultCamelContext (Registry registry)
specifier|public
name|DefaultCamelContext
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the name of the this context.      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|addComponent (String componentName, final Component component)
specifier|public
name|void
name|addComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
specifier|final
name|Component
name|component
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|component
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|components
init|)
block|{
if|if
condition|(
name|components
operator|.
name|containsKey
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add component as its already previously added: "
operator|+
name|componentName
argument_list|)
throw|;
block|}
name|component
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|components
operator|.
name|put
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getComponent (String name)
specifier|public
name|Component
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// synchronize the look up and auto create so that 2 threads can't
comment|// concurrently auto create the same component.
synchronized|synchronized
init|(
name|components
init|)
block|{
name|Component
name|component
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
operator|&&
name|autoCreateComponents
condition|)
block|{
try|try
block|{
name|component
operator|=
name|getComponentResolver
argument_list|()
operator|.
name|resolveComponent
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|addComponent
argument_list|(
name|name
argument_list|,
name|component
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStarted
argument_list|()
operator|||
name|isStarting
argument_list|()
condition|)
block|{
comment|// If the component is looked up after the context is started,
comment|// lets start it up.
name|startServices
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Could not auto create component: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|component
return|;
block|}
block|}
DECL|method|getComponent (String name, Class<T> componentType)
specifier|public
parameter_list|<
name|T
extends|extends
name|Component
parameter_list|>
name|T
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|componentType
parameter_list|)
block|{
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentType
operator|.
name|isInstance
argument_list|(
name|component
argument_list|)
condition|)
block|{
return|return
name|componentType
operator|.
name|cast
argument_list|(
name|component
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The component is not of type: "
operator|+
name|componentType
operator|+
literal|" but is: "
operator|+
name|component
argument_list|)
throw|;
block|}
block|}
DECL|method|removeComponent (String componentName)
specifier|public
name|Component
name|removeComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|components
init|)
block|{
return|return
name|components
operator|.
name|remove
argument_list|(
name|componentName
argument_list|)
return|;
block|}
block|}
DECL|method|getOrCreateComponent (String componentName, Callable<Component> factory)
specifier|public
name|Component
name|getOrCreateComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
name|Callable
argument_list|<
name|Component
argument_list|>
name|factory
parameter_list|)
block|{
synchronized|synchronized
init|(
name|components
init|)
block|{
name|Component
name|component
init|=
name|components
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|component
operator|=
name|factory
operator|.
name|call
argument_list|()
expr_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Factory failed to create the "
operator|+
name|componentName
operator|+
literal|" component, it returned null."
argument_list|)
throw|;
block|}
name|components
operator|.
name|put
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|component
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Factory failed to create the "
operator|+
name|componentName
operator|+
literal|" component"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|component
return|;
block|}
block|}
comment|// Endpoint Management Methods
comment|// -----------------------------------------------------------------------
DECL|method|getEndpoints ()
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|getEndpoints
parameter_list|()
block|{
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|endpoints
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getEndpointMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|getEndpointMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
return|return
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
block|}
DECL|method|getEndpoints (String uri)
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|getEndpoints
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|coll
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|Endpoint
name|ep
init|=
name|endpoints
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
name|coll
operator|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|(
name|endpoints
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Endpoint
name|ep
range|:
name|coll
control|)
block|{
if|if
condition|(
operator|!
name|ep
operator|.
name|isSingleton
argument_list|()
operator|&&
name|uri
operator|.
name|equals
argument_list|(
name|ep
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getSingletonEndpoints ()
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|getSingletonEndpoints
parameter_list|()
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|coll
init|=
name|getEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|ep
range|:
name|coll
control|)
block|{
if|if
condition|(
name|ep
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|addEndpoint (String uri, Endpoint endpoint)
specifier|public
name|Endpoint
name|addEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|Endpoint
name|oldEndpoint
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|startServices
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|oldEndpoint
operator|=
name|endpoints
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|addEndpointToRegistry
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldEndpoint
operator|!=
literal|null
condition|)
block|{
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldEndpoint
return|;
block|}
DECL|method|removeEndpoints (String uri)
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|removeEndpoints
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|Endpoint
name|oldEndpoint
init|=
name|endpoints
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEndpoint
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|endpoints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oldEndpoint
operator|=
operator|(
name|Endpoint
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|oldEndpoint
operator|.
name|isSingleton
argument_list|()
operator|&&
name|uri
operator|.
name|equals
argument_list|(
name|oldEndpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|addSingletonEndpoint (String uri, Endpoint endpoint)
specifier|public
name|Endpoint
name|addSingletonEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addEndpoint
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
DECL|method|removeSingletonEndpoint (String uri)
specifier|public
name|Endpoint
name|removeSingletonEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
name|removeEndpoints
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
call|(
name|Endpoint
call|)
argument_list|(
name|answer
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|answer
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|getEndpoint (String uri)
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
comment|// normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order
try|try
block|{
name|uri
operator|=
name|URISupport
operator|.
name|normalizeUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting endpoint with uri: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|answer
decl_stmt|;
name|String
name|scheme
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|answer
operator|=
name|endpoints
operator|.
name|get
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// Use the URI prefix to find the component.
name|String
name|splitURI
index|[]
init|=
name|ObjectHelper
operator|.
name|splitOnCharacter
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitURI
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|scheme
operator|=
name|splitURI
index|[
literal|0
index|]
expr_stmt|;
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// Ask the component to resolve the endpoint.
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
comment|// Have the component create the endpoint if it can.
name|answer
operator|=
name|component
operator|.
name|createEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|uri
operator|+
literal|" converted to endpoint: "
operator|+
name|answer
operator|+
literal|" by component: "
operator|+
name|component
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// no component then try in registry and elsewhere
name|answer
operator|=
name|createEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|addService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|Endpoint
name|newAnswer
init|=
name|addEndpointToRegistry
argument_list|(
name|uri
argument_list|,
name|answer
argument_list|)
decl_stmt|;
name|lifecycleStrategy
operator|.
name|onEndpointAdd
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|=
name|newAnswer
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// unknown scheme
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|scheme
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
literal|"No component found with scheme: "
operator|+
name|scheme
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getEndpoint (String name, Class<T> endpointType)
specifier|public
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
name|T
name|getEndpoint
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|endpointType
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|getEndpoint
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|InterceptSendToEndpoint
condition|)
block|{
name|endpoint
operator|=
operator|(
operator|(
name|InterceptSendToEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpointType
operator|.
name|isInstance
argument_list|(
name|endpoint
argument_list|)
condition|)
block|{
return|return
name|endpointType
operator|.
name|cast
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The endpoint is not of type: "
operator|+
name|endpointType
operator|+
literal|" but is: "
operator|+
name|endpoint
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|addRegisterEndpointCallback (EndpointStrategy strategy)
specifier|public
name|void
name|addRegisterEndpointCallback
parameter_list|(
name|EndpointStrategy
name|strategy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|endpointStrategies
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
comment|// let it be invoked for already registered endpoints so it can catch-up.
name|endpointStrategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|getEndpoints
argument_list|()
control|)
block|{
name|Endpoint
name|newEndpoint
init|=
name|strategy
operator|.
name|registerEndpoint
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|newEndpoint
operator|!=
name|endpoint
condition|)
block|{
name|endpoints
operator|.
name|put
argument_list|(
name|getEndpointKey
argument_list|(
name|newEndpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|newEndpoint
argument_list|)
argument_list|,
name|newEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Strategy to add the given endpoint to the internal endpoint registry      *      * @param uri  uri of endpoint      * @param endpoint the endpoint to add      * @return the added endpoint      */
DECL|method|addEndpointToRegistry (String uri, Endpoint endpoint)
specifier|protected
name|Endpoint
name|addEndpointToRegistry
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
for|for
control|(
name|EndpointStrategy
name|strategy
range|:
name|endpointStrategies
control|)
block|{
name|endpoint
operator|=
name|strategy
operator|.
name|registerEndpoint
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|endpoints
operator|.
name|put
argument_list|(
name|getEndpointKey
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|// Route Management Methods
comment|// -----------------------------------------------------------------------
DECL|method|getRoutes ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Route
argument_list|>
name|getRoutes
parameter_list|()
block|{
if|if
condition|(
name|routes
operator|==
literal|null
condition|)
block|{
name|routes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// lets return a copy of the collection as objects are removed later
comment|// when services are stopped
return|return
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|(
name|routes
argument_list|)
return|;
block|}
DECL|method|setRoutes (List<Route> routes)
specifier|public
name|void
name|setRoutes
parameter_list|(
name|List
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
name|this
operator|.
name|routes
operator|=
name|routes
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Overriding existing routes is not supported yet, use addRoutes instead"
argument_list|)
throw|;
block|}
DECL|method|removeRouteCollection (Collection<Route> routes)
specifier|synchronized
name|void
name|removeRouteCollection
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|routes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|routes
operator|.
name|removeAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRouteCollection (Collection<Route> routes)
specifier|synchronized
name|void
name|addRouteCollection
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|routes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|routes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|routes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|routes
operator|.
name|addAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRoutes (RoutesBuilder builder)
specifier|public
name|void
name|addRoutes
parameter_list|(
name|RoutesBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding routes from builder: "
operator|+
name|builder
argument_list|)
expr_stmt|;
block|}
comment|// lets now add the routes from the builder
name|builder
operator|.
name|addRoutesToCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|addRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
name|void
name|addRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|RouteDefinition
name|routeDefinition
range|:
name|routeDefinitions
control|)
block|{
name|routeDefinition
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|removeRouteDefinition
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|routeDefinitions
operator|.
name|addAll
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes the route definition with the given key.      *      * @return true if one or more routes was removed      */
DECL|method|removeRouteDefinition (String key)
specifier|public
name|boolean
name|removeRouteDefinition
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|RouteDefinition
argument_list|>
name|iter
init|=
name|routeDefinitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RouteDefinition
name|route
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|.
name|idOrCreate
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|answer
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|removeRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
name|void
name|removeRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|routeDefinitions
operator|.
name|removeAll
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
for|for
control|(
name|RouteDefinition
name|routeDefinition
range|:
name|routeDefinitions
control|)
block|{
name|removeRouteDefinition
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeRouteDefinition (RouteDefinition routeDefinition)
specifier|public
name|void
name|removeRouteDefinition
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|routeDefinition
operator|.
name|idOrCreate
argument_list|()
decl_stmt|;
name|stopRoute
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|removeRouteDefinition
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteStatus (RouteDefinition route)
specifier|public
name|ServiceStatus
name|getRouteStatus
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
return|return
name|getRouteStatus
argument_list|(
name|route
operator|.
name|idOrCreate
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the status of the service of the given ID or null if there is no service created yet      */
DECL|method|getRouteStatus (String key)
specifier|public
name|ServiceStatus
name|getRouteStatus
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
return|return
name|routeService
operator|.
name|getStatus
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|startRoute (RouteDefinition route)
specifier|public
name|void
name|startRoute
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|Route
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouteContext
argument_list|>
name|routeContexts
init|=
name|route
operator|.
name|addRoutes
argument_list|(
name|this
argument_list|,
name|routes
argument_list|)
decl_stmt|;
name|RouteService
name|routeService
init|=
operator|new
name|RouteService
argument_list|(
name|this
argument_list|,
name|route
argument_list|,
name|routeContexts
argument_list|,
name|routes
argument_list|)
decl_stmt|;
name|startRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
block|}
DECL|method|stopRoute (RouteDefinition route)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
throws|throws
name|Exception
block|{
name|stopRoute
argument_list|(
name|route
operator|.
name|idOrCreate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stops the route denoted by the given RouteType id      */
DECL|method|stopRoute (String key)
specifier|public
specifier|synchronized
name|void
name|stopRoute
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
name|routeService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds a service, starting it so that it will be stopped with this context      */
DECL|method|addService (Object object)
specifier|public
name|void
name|addService
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|object
decl_stmt|;
name|getLifecycleStrategy
argument_list|()
operator|.
name|onServiceAdd
argument_list|(
name|this
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|servicesToClose
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Helper methods
comment|// -----------------------------------------------------------------------
DECL|method|resolveLanguage (String language)
specifier|public
name|Language
name|resolveLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|Language
name|answer
decl_stmt|;
synchronized|synchronized
init|(
name|languages
init|)
block|{
name|answer
operator|=
name|languages
operator|.
name|get
argument_list|(
name|language
argument_list|)
expr_stmt|;
comment|// check if the language is singleton, if so return the shared instance
if|if
condition|(
name|answer
operator|instanceof
name|IsSingleton
condition|)
block|{
name|boolean
name|singleton
init|=
operator|(
operator|(
name|IsSingleton
operator|)
name|answer
operator|)
operator|.
name|isSingleton
argument_list|()
decl_stmt|;
if|if
condition|(
name|singleton
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
comment|// language not known or not singleton, then use resolver
name|answer
operator|=
name|getLanguageResolver
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
name|language
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|languages
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no language resolved
return|return
name|answer
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getExchangeConverter ()
specifier|public
name|ExchangeConverter
name|getExchangeConverter
parameter_list|()
block|{
if|if
condition|(
name|exchangeConverter
operator|==
literal|null
condition|)
block|{
name|exchangeConverter
operator|=
name|createExchangeConverter
argument_list|()
expr_stmt|;
block|}
return|return
name|exchangeConverter
return|;
block|}
DECL|method|setExchangeConverter (ExchangeConverter exchangeConverter)
specifier|public
name|void
name|setExchangeConverter
parameter_list|(
name|ExchangeConverter
name|exchangeConverter
parameter_list|)
block|{
name|this
operator|.
name|exchangeConverter
operator|=
name|exchangeConverter
expr_stmt|;
block|}
DECL|method|getTypeConverter ()
specifier|public
name|TypeConverter
name|getTypeConverter
parameter_list|()
block|{
if|if
condition|(
name|typeConverter
operator|==
literal|null
condition|)
block|{
name|typeConverter
operator|=
name|createTypeConverter
argument_list|()
expr_stmt|;
block|}
return|return
name|typeConverter
return|;
block|}
DECL|method|setTypeConverter (TypeConverter typeConverter)
specifier|public
name|void
name|setTypeConverter
parameter_list|(
name|TypeConverter
name|typeConverter
parameter_list|)
block|{
name|this
operator|.
name|typeConverter
operator|=
name|typeConverter
expr_stmt|;
block|}
DECL|method|getTypeConverterRegistry ()
specifier|public
name|TypeConverterRegistry
name|getTypeConverterRegistry
parameter_list|()
block|{
if|if
condition|(
name|typeConverterRegistry
operator|==
literal|null
condition|)
block|{
comment|// init type converter as its lazy
if|if
condition|(
name|typeConverter
operator|==
literal|null
condition|)
block|{
name|getTypeConverter
argument_list|()
expr_stmt|;
block|}
comment|// type converter is usually the default one that also is the registry
if|if
condition|(
name|typeConverter
operator|instanceof
name|DefaultTypeConverter
condition|)
block|{
name|typeConverterRegistry
operator|=
operator|(
name|DefaultTypeConverter
operator|)
name|typeConverter
expr_stmt|;
block|}
block|}
return|return
name|typeConverterRegistry
return|;
block|}
DECL|method|setTypeConverterRegistry (TypeConverterRegistry typeConverterRegistry)
specifier|public
name|void
name|setTypeConverterRegistry
parameter_list|(
name|TypeConverterRegistry
name|typeConverterRegistry
parameter_list|)
block|{
name|this
operator|.
name|typeConverterRegistry
operator|=
name|typeConverterRegistry
expr_stmt|;
block|}
DECL|method|getInjector ()
specifier|public
name|Injector
name|getInjector
parameter_list|()
block|{
if|if
condition|(
name|injector
operator|==
literal|null
condition|)
block|{
name|injector
operator|=
name|createInjector
argument_list|()
expr_stmt|;
block|}
return|return
name|injector
return|;
block|}
DECL|method|setInjector (Injector injector)
specifier|public
name|void
name|setInjector
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
block|}
DECL|method|getComponentResolver ()
specifier|public
name|ComponentResolver
name|getComponentResolver
parameter_list|()
block|{
if|if
condition|(
name|componentResolver
operator|==
literal|null
condition|)
block|{
name|componentResolver
operator|=
name|createComponentResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|componentResolver
return|;
block|}
DECL|method|setComponentResolver (ComponentResolver componentResolver)
specifier|public
name|void
name|setComponentResolver
parameter_list|(
name|ComponentResolver
name|componentResolver
parameter_list|)
block|{
name|this
operator|.
name|componentResolver
operator|=
name|componentResolver
expr_stmt|;
block|}
DECL|method|getLanguageResolver ()
specifier|public
name|LanguageResolver
name|getLanguageResolver
parameter_list|()
block|{
return|return
name|languageResolver
return|;
block|}
DECL|method|setLanguageResolver (LanguageResolver languageResolver)
specifier|public
name|void
name|setLanguageResolver
parameter_list|(
name|LanguageResolver
name|languageResolver
parameter_list|)
block|{
name|this
operator|.
name|languageResolver
operator|=
name|languageResolver
expr_stmt|;
block|}
DECL|method|isAutoCreateComponents ()
specifier|public
name|boolean
name|isAutoCreateComponents
parameter_list|()
block|{
return|return
name|autoCreateComponents
return|;
block|}
DECL|method|setAutoCreateComponents (boolean autoCreateComponents)
specifier|public
name|void
name|setAutoCreateComponents
parameter_list|(
name|boolean
name|autoCreateComponents
parameter_list|)
block|{
name|this
operator|.
name|autoCreateComponents
operator|=
name|autoCreateComponents
expr_stmt|;
block|}
DECL|method|getRegistry ()
specifier|public
name|Registry
name|getRegistry
parameter_list|()
block|{
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
block|{
name|registry
operator|=
name|createRegistry
argument_list|()
expr_stmt|;
block|}
return|return
name|registry
return|;
block|}
comment|/**      * Sets the registry to the given JNDI context      *      * @param jndiContext is the JNDI context to use as the registry      * @see #setRegistry(org.apache.camel.spi.Registry)      */
DECL|method|setJndiContext (Context jndiContext)
specifier|public
name|void
name|setJndiContext
parameter_list|(
name|Context
name|jndiContext
parameter_list|)
block|{
name|setRegistry
argument_list|(
operator|new
name|JndiRegistry
argument_list|(
name|jndiContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setRegistry (Registry registry)
specifier|public
name|void
name|setRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
DECL|method|getLifecycleStrategy ()
specifier|public
name|LifecycleStrategy
name|getLifecycleStrategy
parameter_list|()
block|{
return|return
name|lifecycleStrategy
return|;
block|}
DECL|method|setLifecycleStrategy (LifecycleStrategy lifecycleStrategy)
specifier|public
name|void
name|setLifecycleStrategy
parameter_list|(
name|LifecycleStrategy
name|lifecycleStrategy
parameter_list|)
block|{
name|this
operator|.
name|lifecycleStrategy
operator|=
name|lifecycleStrategy
expr_stmt|;
block|}
DECL|method|getRouteDefinitions ()
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRouteDefinitions
parameter_list|()
block|{
return|return
name|routeDefinitions
return|;
block|}
DECL|method|getInterceptStrategies ()
specifier|public
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|getInterceptStrategies
parameter_list|()
block|{
return|return
name|interceptStrategies
return|;
block|}
DECL|method|setInterceptStrategies (List<InterceptStrategy> interceptStrategies)
specifier|public
name|void
name|setInterceptStrategies
parameter_list|(
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
parameter_list|)
block|{
name|this
operator|.
name|interceptStrategies
operator|=
name|interceptStrategies
expr_stmt|;
block|}
DECL|method|addInterceptStrategy (InterceptStrategy interceptStrategy)
specifier|public
name|void
name|addInterceptStrategy
parameter_list|(
name|InterceptStrategy
name|interceptStrategy
parameter_list|)
block|{
name|getInterceptStrategies
argument_list|()
operator|.
name|add
argument_list|(
name|interceptStrategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns true if tracing has been enabled or disabled via the {@link #setTrace(Boolean)} method      * or it has not been specified then default to the<b>camel.streamCache</b> system property      */
DECL|method|isStreamCacheEnabled ()
specifier|public
name|boolean
name|isStreamCacheEnabled
parameter_list|()
block|{
specifier|final
name|Boolean
name|value
init|=
name|getStreamCaching
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
return|return
name|SystemHelper
operator|.
name|isSystemProperty
argument_list|(
literal|"camel.streamCache"
argument_list|)
return|;
block|}
block|}
DECL|method|getStreamCaching ()
specifier|public
name|Boolean
name|getStreamCaching
parameter_list|()
block|{
return|return
name|streamCache
return|;
block|}
DECL|method|setStreamCaching (Boolean cache)
specifier|public
name|void
name|setStreamCaching
parameter_list|(
name|Boolean
name|cache
parameter_list|)
block|{
name|this
operator|.
name|streamCache
operator|=
name|cache
expr_stmt|;
block|}
DECL|method|setTracing (Boolean tracing)
specifier|public
name|void
name|setTracing
parameter_list|(
name|Boolean
name|tracing
parameter_list|)
block|{
comment|// look if alredy enabled
name|Tracer
name|tracer
init|=
name|Tracer
operator|.
name|getTracer
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracing
operator|&&
name|tracer
operator|==
literal|null
condition|)
block|{
comment|// not already enabled
name|addInterceptStrategy
argument_list|(
operator|new
name|Tracer
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tracer
operator|!=
literal|null
condition|)
block|{
comment|// disable existing tracer
for|for
control|(
name|InterceptStrategy
name|strategy
range|:
name|interceptStrategies
control|)
block|{
if|if
condition|(
name|strategy
operator|instanceof
name|Tracer
condition|)
block|{
name|interceptStrategies
operator|.
name|remove
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Returns true if handle fault has been enabled      */
DECL|method|isHandleFaultEnabled ()
specifier|public
name|boolean
name|isHandleFaultEnabled
parameter_list|()
block|{
specifier|final
name|Boolean
name|value
init|=
name|getHandleFault
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
return|return
name|SystemHelper
operator|.
name|isSystemProperty
argument_list|(
literal|"camel.handleFault"
argument_list|)
return|;
block|}
block|}
DECL|method|getHandleFault ()
specifier|public
name|Boolean
name|getHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
DECL|method|setHandleFault (Boolean handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|Boolean
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
comment|/**      * Returns true if tracing has been enabled      */
DECL|method|isTraceEnabled ()
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
specifier|final
name|Boolean
name|value
init|=
name|getTrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
return|return
name|SystemHelper
operator|.
name|isSystemProperty
argument_list|(
literal|"camel.trace"
argument_list|)
return|;
block|}
block|}
DECL|method|getTrace ()
specifier|public
name|Boolean
name|getTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
DECL|method|setTrace (Boolean trace)
specifier|public
name|void
name|setTrace
parameter_list|(
name|Boolean
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
comment|/**      * Returns the delay in millis if delaying has been enabled. Returns 0 if not enabled.      */
DECL|method|isDelayEnabled ()
specifier|public
name|long
name|isDelayEnabled
parameter_list|()
block|{
specifier|final
name|Long
name|value
init|=
name|getDelay
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
name|String
name|prop
init|=
name|SystemHelper
operator|.
name|getSystemProperty
argument_list|(
literal|"camel.delay"
argument_list|)
decl_stmt|;
return|return
name|prop
operator|!=
literal|null
condition|?
name|Long
operator|.
name|getLong
argument_list|(
name|prop
argument_list|)
else|:
literal|0
return|;
block|}
block|}
DECL|method|getDelay ()
specifier|public
name|Long
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
DECL|method|setDelay (Long delay)
specifier|public
name|void
name|setDelay
parameter_list|(
name|Long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|createProducerTemplate ()
specifier|public
name|ProducerTemplate
name|createProducerTemplate
parameter_list|()
block|{
return|return
operator|new
name|DefaultProducerTemplate
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createConsumerTemplate ()
specifier|public
name|ConsumerTemplate
name|createConsumerTemplate
parameter_list|()
block|{
return|return
operator|new
name|DefaultConsumerTemplate
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getErrorHandlerBuilder ()
specifier|public
name|ErrorHandlerBuilder
name|getErrorHandlerBuilder
parameter_list|()
block|{
return|return
name|errorHandlerBuilder
return|;
block|}
comment|/**      * Sets the default error handler builder which is inherited by the routes      */
DECL|method|setErrorHandlerBuilder (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilder
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerBuilder
operator|=
name|errorHandlerBuilder
expr_stmt|;
block|}
DECL|method|setProducerServicePool (ServicePool<Endpoint, Producer> producerServicePool)
specifier|public
name|void
name|setProducerServicePool
parameter_list|(
name|ServicePool
argument_list|<
name|Endpoint
argument_list|,
name|Producer
argument_list|>
name|producerServicePool
parameter_list|)
block|{
name|this
operator|.
name|producerServicePool
operator|=
name|producerServicePool
expr_stmt|;
block|}
DECL|method|getProducerServicePool ()
specifier|public
name|ServicePool
argument_list|<
name|Endpoint
argument_list|,
name|Producer
argument_list|>
name|getProducerServicePool
parameter_list|()
block|{
return|return
name|producerServicePool
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting routes"
argument_list|)
expr_stmt|;
comment|// the context is now considered started (i.e. isStarted() == true))
comment|// starting routes is done after, not during context startup
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|RouteService
name|routeService
range|:
name|routeServices
operator|.
name|values
argument_list|()
control|)
block|{
name|routeService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started routes"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") started"
argument_list|)
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -----------------------------------------------------------------------
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") is starting"
argument_list|)
expr_stmt|;
name|startServices
argument_list|(
name|producerServicePool
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStreamCacheEnabled
argument_list|()
condition|)
block|{
comment|// only add a new stream cache if not already configured
if|if
condition|(
name|StreamCaching
operator|.
name|getStreamCaching
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"StreamCaching is enabled"
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|StreamCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// only add a new tracer if not already configured
if|if
condition|(
name|Tracer
operator|.
name|getTracer
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Tracer
name|tracer
init|=
operator|new
name|Tracer
argument_list|()
decl_stmt|;
comment|// lets see if we have a formatter if so use it
name|TraceFormatter
name|formatter
init|=
name|this
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"traceFormatter"
argument_list|,
name|TraceFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|!=
literal|null
condition|)
block|{
name|tracer
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tracing is enabled"
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|delayInMillis
init|=
name|isDelayEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|delayInMillis
operator|>
literal|0
condition|)
block|{
comment|// only add a new delayer if not already configured
if|if
condition|(
name|Delayer
operator|.
name|getDelayer
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delayer is enabled with: "
operator|+
name|delayInMillis
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|Delayer
argument_list|(
name|delayInMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isHandleFaultEnabled
argument_list|()
condition|)
block|{
comment|// only add a new handle fault if not already configured
if|if
condition|(
name|HandleFault
operator|.
name|getHandleFault
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HandleFault is enabled"
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|HandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|lifecycleStrategy
operator|.
name|onContextStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// not all containers allow access to its MBeanServer (such as OC4j)
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot start lifecycleStrategy: "
operator|+
name|lifecycleStrategy
operator|+
literal|". Cause: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lifecycleStrategy
operator|instanceof
name|InstrumentationLifecycleStrategy
condition|)
block|{
comment|// fallback to non JMX lifecycle to allow Camel to startup
name|LOG
operator|.
name|warn
argument_list|(
literal|"Will fallback to use default (non JMX) lifecycle strategy"
argument_list|)
expr_stmt|;
name|lifecycleStrategy
operator|=
operator|new
name|DefaultLifecycleStrategy
argument_list|()
expr_stmt|;
name|lifecycleStrategy
operator|.
name|onContextStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|forceLazyInitialization
argument_list|()
expr_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Component
name|component
range|:
name|components
operator|.
name|values
argument_list|()
control|)
block|{
name|startServices
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
comment|// To avoid initiating the routeDefinitions after stopping the camel context
if|if
condition|(
operator|!
name|routeDefinitionInitiated
condition|)
block|{
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
name|routeDefinitionInitiated
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|doStop ()
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") is stopping"
argument_list|)
expr_stmt|;
name|stopServices
argument_list|(
name|routeServices
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|stopServices
argument_list|(
name|servicesToClose
argument_list|)
expr_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Component
name|component
range|:
name|components
operator|.
name|values
argument_list|()
control|)
block|{
name|stopServices
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
block|}
name|servicesToClose
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stopServices
argument_list|(
name|producerServicePool
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext:"
operator|+
name|getName
argument_list|()
operator|+
literal|") stopped"
argument_list|)
expr_stmt|;
block|}
DECL|method|startRouteDefinitions (Collection<RouteDefinition> list)
specifier|protected
name|void
name|startRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|list
control|)
block|{
name|startRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Starts the given route service      */
DECL|method|startRouteService (RouteService routeService)
specifier|protected
specifier|synchronized
name|void
name|startRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|routeService
operator|.
name|getId
argument_list|()
decl_stmt|;
name|stopRoute
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|routeServices
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|routeService
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
name|routeService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Lets force some lazy initialization to occur upfront before we start any      * components and create routes      */
DECL|method|forceLazyInitialization ()
specifier|protected
name|void
name|forceLazyInitialization
parameter_list|()
block|{
name|getExchangeConverter
argument_list|()
expr_stmt|;
name|getInjector
argument_list|()
expr_stmt|;
name|getLanguageResolver
argument_list|()
expr_stmt|;
name|getTypeConverter
argument_list|()
expr_stmt|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createExchangeConverter ()
specifier|protected
name|ExchangeConverter
name|createExchangeConverter
parameter_list|()
block|{
return|return
operator|new
name|DefaultExchangeConverter
argument_list|()
return|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createTypeConverter ()
specifier|protected
name|TypeConverter
name|createTypeConverter
parameter_list|()
block|{
name|DefaultTypeConverter
name|answer
init|=
operator|new
name|DefaultTypeConverter
argument_list|(
name|packageScanClassResolver
argument_list|,
name|getInjector
argument_list|()
argument_list|,
name|getDefaultFactoryFinder
argument_list|()
argument_list|)
decl_stmt|;
name|typeConverterRegistry
operator|=
name|answer
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createInjector ()
specifier|protected
name|Injector
name|createInjector
parameter_list|()
block|{
name|FactoryFinder
name|finder
init|=
name|getDefaultFactoryFinder
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|(
name|Injector
operator|)
name|finder
operator|.
name|newInstance
argument_list|(
literal|"Injector"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// lets use the default
return|return
operator|new
name|ReflectionInjector
argument_list|()
return|;
block|}
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createComponentResolver ()
specifier|protected
name|ComponentResolver
name|createComponentResolver
parameter_list|()
block|{
return|return
operator|new
name|DefaultComponentResolver
argument_list|()
return|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createRegistry ()
specifier|protected
name|Registry
name|createRegistry
parameter_list|()
block|{
return|return
operator|new
name|JndiRegistry
argument_list|()
return|;
block|}
comment|/**      * A pluggable strategy to allow an endpoint to be created without requiring      * a component to be its factory, such as for looking up the URI inside some      * {@link Registry}      *      * @param uri the uri for the endpoint to be created      * @return the newly created endpoint or null if it could not be resolved      */
DECL|method|createEndpoint (String uri)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Object
name|value
init|=
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Endpoint
condition|)
block|{
return|return
operator|(
name|Endpoint
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Processor
condition|)
block|{
return|return
operator|new
name|ProcessorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
operator|(
name|Processor
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|convertBeanToEndpoint
argument_list|(
name|uri
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using      * some kind of transformation or wrapper      *      * @param uri  the uri for the endpoint (and name in the registry)      * @param bean the bean to be converted to an endpoint, which will be not null      * @return a new endpoint      */
DECL|method|convertBeanToEndpoint (String uri, Object bean)
specifier|protected
name|Endpoint
name|convertBeanToEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"uri: "
operator|+
name|uri
operator|+
literal|" bean: "
operator|+
name|bean
operator|+
literal|" could not be converted to an Endpoint"
argument_list|)
throw|;
block|}
comment|/**      * Should we start newly added routes?      */
DECL|method|shouldStartRoutes ()
specifier|protected
name|boolean
name|shouldStartRoutes
parameter_list|()
block|{
return|return
name|isStarted
argument_list|()
operator|&&
operator|!
name|isStarting
argument_list|()
return|;
block|}
DECL|method|setDataFormats (Map<String, DataFormatDefinition> dataFormats)
specifier|public
name|void
name|setDataFormats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
parameter_list|)
block|{
name|this
operator|.
name|dataFormats
operator|=
name|dataFormats
expr_stmt|;
block|}
DECL|method|getDataFormats ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|getDataFormats
parameter_list|()
block|{
return|return
name|dataFormats
return|;
block|}
DECL|method|getProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties (Map<String, String> properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|getDefaultFactoryFinder ()
specifier|public
name|FactoryFinder
name|getDefaultFactoryFinder
parameter_list|()
block|{
if|if
condition|(
name|defaultFactoryFinder
operator|==
literal|null
condition|)
block|{
name|defaultFactoryFinder
operator|=
name|factoryFinderResolver
operator|.
name|resolveDefaultFactoryFinder
argument_list|(
name|getClassResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultFactoryFinder
return|;
block|}
DECL|method|setFactoryFinderResolver (FactoryFinderResolver resolver)
specifier|public
name|void
name|setFactoryFinderResolver
parameter_list|(
name|FactoryFinderResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|factoryFinderResolver
operator|=
name|resolver
expr_stmt|;
block|}
DECL|method|getFactoryFinder (String path)
specifier|public
name|FactoryFinder
name|getFactoryFinder
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|NoFactoryAvailableException
block|{
synchronized|synchronized
init|(
name|factories
init|)
block|{
name|FactoryFinder
name|answer
init|=
name|factories
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|factoryFinderResolver
operator|.
name|resolveFactoryFinder
argument_list|(
name|getClassResolver
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getClassResolver ()
specifier|public
name|ClassResolver
name|getClassResolver
parameter_list|()
block|{
return|return
name|classResolver
return|;
block|}
DECL|method|setClassResolver (ClassResolver classResolver)
specifier|public
name|void
name|setClassResolver
parameter_list|(
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|this
operator|.
name|classResolver
operator|=
name|classResolver
expr_stmt|;
block|}
DECL|method|getPackageScanClassResolver ()
specifier|public
name|PackageScanClassResolver
name|getPackageScanClassResolver
parameter_list|()
block|{
return|return
name|packageScanClassResolver
return|;
block|}
DECL|method|setPackageScanClassResolver (PackageScanClassResolver packageScanClassResolver)
specifier|public
name|void
name|setPackageScanClassResolver
parameter_list|(
name|PackageScanClassResolver
name|packageScanClassResolver
parameter_list|)
block|{
name|this
operator|.
name|packageScanClassResolver
operator|=
name|packageScanClassResolver
expr_stmt|;
block|}
DECL|method|getComponentNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getComponentNames
parameter_list|()
block|{
synchronized|synchronized
init|(
name|components
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|components
operator|.
name|keySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getLanguageNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLanguageNames
parameter_list|()
block|{
synchronized|synchronized
init|(
name|languages
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|languages
operator|.
name|keySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getEndpointKey (String uri, Endpoint endpoint)
specifier|protected
specifier|synchronized
name|String
name|getEndpointKey
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
return|return
name|uri
return|;
block|}
else|else
block|{
comment|// lets try find the first endpoint key which is free
for|for
control|(
name|int
name|counter
init|=
literal|0
init|;
literal|true
condition|;
name|counter
operator|++
control|)
block|{
name|String
name|key
init|=
operator|(
name|counter
operator|>
literal|0
operator|)
condition|?
name|uri
operator|+
literal|":"
operator|+
name|counter
else|:
name|uri
decl_stmt|;
if|if
condition|(
operator|!
name|endpoints
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
block|}
block|}
block|}
DECL|method|getRouteServices ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|getRouteServices
parameter_list|()
block|{
return|return
name|routeServices
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DefaultCamelContext("
operator|+
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

