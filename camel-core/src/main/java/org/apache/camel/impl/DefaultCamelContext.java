begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ErrorHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedStartupListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToStartRouteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FluentProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|IsSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoadPropertiesException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MultipleConsumersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoFactoryAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchEndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StartupListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Suspendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|SuspendableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|VetoCamelContextStartException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DefaultFluentProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|BaseTypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|DefaultTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|health
operator|.
name|DefaultHealthCheckRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|transformer
operator|.
name|TransformerKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|validator
operator|.
name|ValidatorKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|TransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|validator
operator|.
name|ValidatorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|RuntimeCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|impl
operator|.
name|DefaultRuntimeCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AsyncProcessorAwaitManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelContextNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelContextTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ComponentResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Debugger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeadersMapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InflightRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LogListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementMBeanAssembler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|MessageHistoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ModelJAXBContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NodeIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ReloadStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteError
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteStartupOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RuntimeEndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|StreamCachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TransformerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWorkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ValidatorRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|OrderedComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ProcessorEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|JsonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringQuoteHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|MDCUnitOfWork
operator|.
name|MDC_CAMEL_CONTEXT_ID
import|;
end_import

begin_comment
comment|/**  * Represents the context used to configure routes and the policies to use.  */
end_comment

begin_class
DECL|class|DefaultCamelContext
specifier|public
class|class
name|DefaultCamelContext
extends|extends
name|ServiceSupport
implements|implements
name|ModelCamelContext
implements|,
name|Suspendable
block|{
DECL|field|version
specifier|private
name|String
name|version
decl_stmt|;
DECL|field|vetoStated
specifier|private
specifier|final
name|AtomicBoolean
name|vetoStated
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|jaxbContext
specifier|private
name|JAXBContext
name|jaxbContext
decl_stmt|;
DECL|field|nameStrategy
specifier|private
name|CamelContextNameStrategy
name|nameStrategy
decl_stmt|;
DECL|field|managementNameStrategy
specifier|private
name|ManagementNameStrategy
name|managementNameStrategy
decl_stmt|;
DECL|field|managementName
specifier|private
name|String
name|managementName
decl_stmt|;
DECL|field|applicationContextClassLoader
specifier|private
name|ClassLoader
name|applicationContextClassLoader
decl_stmt|;
DECL|field|endpoints
specifier|private
name|EndpointRegistry
argument_list|<
name|EndpointKey
argument_list|>
name|endpoints
decl_stmt|;
DECL|field|endpointKeyCounter
specifier|private
specifier|final
name|AtomicInteger
name|endpointKeyCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|endpointStrategies
specifier|private
specifier|final
name|List
argument_list|<
name|EndpointStrategy
argument_list|>
name|endpointStrategies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|components
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
name|components
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|routes
specifier|private
specifier|final
name|Set
argument_list|<
name|Route
argument_list|>
name|routes
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|servicesToStop
specifier|private
specifier|final
name|List
argument_list|<
name|Service
argument_list|>
name|servicesToStop
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|startupListeners
specifier|private
specifier|final
name|List
argument_list|<
name|StartupListener
argument_list|>
name|startupListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|deferStartupListener
specifier|private
specifier|final
name|DeferServiceStartupListener
name|deferStartupListener
init|=
operator|new
name|DeferServiceStartupListener
argument_list|()
decl_stmt|;
DECL|field|typeConverter
specifier|private
name|TypeConverter
name|typeConverter
decl_stmt|;
DECL|field|typeConverterRegistry
specifier|private
name|TypeConverterRegistry
name|typeConverterRegistry
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|field|componentResolver
specifier|private
name|ComponentResolver
name|componentResolver
decl_stmt|;
DECL|field|autoCreateComponents
specifier|private
name|boolean
name|autoCreateComponents
init|=
literal|true
decl_stmt|;
DECL|field|languageResolver
specifier|private
name|LanguageResolver
name|languageResolver
decl_stmt|;
DECL|field|languages
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Language
argument_list|>
name|languages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|registry
specifier|private
name|Registry
name|registry
decl_stmt|;
DECL|field|lifecycleStrategies
specifier|private
name|List
argument_list|<
name|LifecycleStrategy
argument_list|>
name|lifecycleStrategies
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|managementStrategy
specifier|private
name|ManagementStrategy
name|managementStrategy
decl_stmt|;
DECL|field|managementMBeanAssembler
specifier|private
name|ManagementMBeanAssembler
name|managementMBeanAssembler
decl_stmt|;
DECL|field|routeDefinitions
specifier|private
specifier|final
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|restDefinitions
specifier|private
specifier|final
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|restDefinitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|restConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RestConfiguration
argument_list|>
name|restConfigurations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|serviceCallConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceCallConfigurationDefinition
argument_list|>
name|serviceCallConfigurations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|hystrixConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HystrixConfigurationDefinition
argument_list|>
name|hystrixConfigurations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|restRegistry
specifier|private
name|RestRegistry
name|restRegistry
init|=
operator|new
name|DefaultRestRegistry
argument_list|()
decl_stmt|;
DECL|field|interceptStrategies
specifier|private
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|routePolicyFactories
specifier|private
name|List
argument_list|<
name|RoutePolicyFactory
argument_list|>
name|routePolicyFactories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|logListeners
specifier|private
name|Set
argument_list|<
name|LogListener
argument_list|>
name|logListeners
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|headersMapFactory
specifier|private
name|HeadersMapFactory
name|headersMapFactory
decl_stmt|;
comment|// special flags to control the first startup which can are special
DECL|field|firstStartDone
specifier|private
specifier|volatile
name|boolean
name|firstStartDone
decl_stmt|;
DECL|field|doNotStartRoutesOnFirstStart
specifier|private
specifier|volatile
name|boolean
name|doNotStartRoutesOnFirstStart
decl_stmt|;
DECL|field|isStartingRoutes
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|isStartingRoutes
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|isSetupRoutes
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|isSetupRoutes
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|autoStartup
specifier|private
name|Boolean
name|autoStartup
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
DECL|field|trace
specifier|private
name|Boolean
name|trace
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|messageHistory
specifier|private
name|Boolean
name|messageHistory
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
DECL|field|logMask
specifier|private
name|Boolean
name|logMask
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|logExhaustedMessageBody
specifier|private
name|Boolean
name|logExhaustedMessageBody
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|streamCache
specifier|private
name|Boolean
name|streamCache
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|handleFault
specifier|private
name|Boolean
name|handleFault
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|disableJMX
specifier|private
name|Boolean
name|disableJMX
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|loadTypeConverters
specifier|private
name|Boolean
name|loadTypeConverters
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
DECL|field|typeConverterStatisticsEnabled
specifier|private
name|Boolean
name|typeConverterStatisticsEnabled
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|useMDCLogging
specifier|private
name|Boolean
name|useMDCLogging
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|useDataType
specifier|private
name|Boolean
name|useDataType
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|useBreadcrumb
specifier|private
name|Boolean
name|useBreadcrumb
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
DECL|field|allowUseOriginalMessage
specifier|private
name|Boolean
name|allowUseOriginalMessage
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|delay
specifier|private
name|Long
name|delay
decl_stmt|;
DECL|field|errorHandlerBuilder
specifier|private
name|ErrorHandlerFactory
name|errorHandlerBuilder
decl_stmt|;
DECL|field|errorHandlerExecutorServiceLock
specifier|private
specifier|final
name|Object
name|errorHandlerExecutorServiceLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|errorHandlerExecutorService
specifier|private
name|ScheduledExecutorService
name|errorHandlerExecutorService
decl_stmt|;
DECL|field|dataFormats
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|dataFormatResolver
specifier|private
name|DataFormatResolver
name|dataFormatResolver
decl_stmt|;
DECL|field|globalOptions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalOptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|factoryFinderResolver
specifier|private
name|FactoryFinderResolver
name|factoryFinderResolver
decl_stmt|;
DECL|field|defaultFactoryFinder
specifier|private
name|FactoryFinder
name|defaultFactoryFinder
decl_stmt|;
DECL|field|propertiesComponent
specifier|private
name|PropertiesComponent
name|propertiesComponent
decl_stmt|;
DECL|field|streamCachingStrategy
specifier|private
name|StreamCachingStrategy
name|streamCachingStrategy
decl_stmt|;
DECL|field|factories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FactoryFinder
argument_list|>
name|factories
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|routeServices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|routeServices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|suspendedRouteServices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|suspendedRouteServices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|classResolver
specifier|private
name|ClassResolver
name|classResolver
init|=
name|createClassResolver
argument_list|()
decl_stmt|;
DECL|field|packageScanClassResolver
specifier|private
name|PackageScanClassResolver
name|packageScanClassResolver
decl_stmt|;
comment|// we use a capacity of 100 per endpoint, so for the same endpoint we have at most 100 producers in the pool
comment|// so if we have 6 endpoints in the pool, we can have 6 x 100 producers in total
DECL|field|producerServicePool
specifier|private
name|ServicePool
argument_list|<
name|Producer
argument_list|>
name|producerServicePool
decl_stmt|;
DECL|field|pollingConsumerServicePool
specifier|private
name|ServicePool
argument_list|<
name|PollingConsumer
argument_list|>
name|pollingConsumerServicePool
decl_stmt|;
DECL|field|nodeIdFactory
specifier|private
name|NodeIdFactory
name|nodeIdFactory
decl_stmt|;
DECL|field|processorFactory
specifier|private
name|ProcessorFactory
name|processorFactory
decl_stmt|;
DECL|field|messageHistoryFactory
specifier|private
name|MessageHistoryFactory
name|messageHistoryFactory
decl_stmt|;
DECL|field|inflightRepository
specifier|private
name|InflightRepository
name|inflightRepository
decl_stmt|;
DECL|field|asyncProcessorAwaitManager
specifier|private
name|AsyncProcessorAwaitManager
name|asyncProcessorAwaitManager
decl_stmt|;
DECL|field|runtimeEndpointRegistry
specifier|private
name|RuntimeEndpointRegistry
name|runtimeEndpointRegistry
decl_stmt|;
DECL|field|routeStartupOrder
specifier|private
specifier|final
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|routeStartupOrder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// start auto assigning route ids using numbering 1000 and upwards
DECL|field|defaultRouteStartupOrder
specifier|private
name|int
name|defaultRouteStartupOrder
init|=
literal|1000
decl_stmt|;
DECL|field|shutdownStrategy
specifier|private
name|ShutdownStrategy
name|shutdownStrategy
decl_stmt|;
DECL|field|shutdownRoute
specifier|private
name|ShutdownRoute
name|shutdownRoute
init|=
name|ShutdownRoute
operator|.
name|Default
decl_stmt|;
DECL|field|shutdownRunningTask
specifier|private
name|ShutdownRunningTask
name|shutdownRunningTask
init|=
name|ShutdownRunningTask
operator|.
name|CompleteCurrentTaskOnly
decl_stmt|;
DECL|field|executorServiceManager
specifier|private
name|ExecutorServiceManager
name|executorServiceManager
decl_stmt|;
DECL|field|debugger
specifier|private
name|Debugger
name|debugger
decl_stmt|;
DECL|field|uuidGenerator
specifier|private
name|UuidGenerator
name|uuidGenerator
decl_stmt|;
DECL|field|unitOfWorkFactory
specifier|private
name|UnitOfWorkFactory
name|unitOfWorkFactory
decl_stmt|;
DECL|field|stopWatch
specifier|private
specifier|final
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|startDate
specifier|private
name|Date
name|startDate
decl_stmt|;
DECL|field|modelJAXBContextFactory
specifier|private
name|ModelJAXBContextFactory
name|modelJAXBContextFactory
decl_stmt|;
DECL|field|transformers
specifier|private
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|transformers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|transformerRegistry
specifier|private
name|TransformerRegistry
argument_list|<
name|TransformerKey
argument_list|>
name|transformerRegistry
decl_stmt|;
DECL|field|validators
specifier|private
name|List
argument_list|<
name|ValidatorDefinition
argument_list|>
name|validators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|validatorRegistry
specifier|private
name|ValidatorRegistry
argument_list|<
name|ValidatorKey
argument_list|>
name|validatorRegistry
decl_stmt|;
DECL|field|reloadStrategy
specifier|private
name|ReloadStrategy
name|reloadStrategy
decl_stmt|;
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
DECL|field|componentsInCreation
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|componentsInCreation
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|routeController
specifier|private
name|RouteController
name|routeController
init|=
name|createRouteController
argument_list|()
decl_stmt|;
DECL|field|extensions
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|extensions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Creates the {@link CamelContext} using {@link JndiRegistry} as registry,      * but will silently fallback and use {@link SimpleRegistry} if JNDI cannot be used.      *<p/>      * Use one of the other constructors to force use an explicit registry / JNDI.      */
DECL|method|DefaultCamelContext ()
specifier|public
name|DefaultCamelContext
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the {@link CamelContext} using the given JNDI context as the registry      *      * @param jndiContext the JNDI context      */
DECL|method|DefaultCamelContext (Context jndiContext)
specifier|public
name|DefaultCamelContext
parameter_list|(
name|Context
name|jndiContext
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setJndiContext
argument_list|(
name|jndiContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the {@link CamelContext} using the given registry      *      * @param registry the registry      */
DECL|method|DefaultCamelContext (Registry registry)
specifier|public
name|DefaultCamelContext
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
DECL|method|DefaultCamelContext (boolean init)
specifier|public
name|DefaultCamelContext
parameter_list|(
name|boolean
name|init
parameter_list|)
block|{
comment|// create a provisional (temporary) endpoint registry at first since end users may access endpoints before CamelContext is started
comment|// we will later transfer the endpoints to the actual DefaultEndpointRegistry later, but we do this to starup Camel faster.
name|this
operator|.
name|endpoints
operator|=
operator|new
name|ProvisionalEndpointRegistry
argument_list|()
expr_stmt|;
comment|// add the defer service startup listener
name|this
operator|.
name|startupListeners
operator|.
name|add
argument_list|(
name|deferStartupListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|init
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doInit ()
specifier|public
name|void
name|doInit
parameter_list|()
block|{
if|if
condition|(
name|nameStrategy
operator|==
literal|null
condition|)
block|{
name|nameStrategy
operator|=
name|createCamelContextNameStrategy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|managementNameStrategy
operator|==
literal|null
condition|)
block|{
name|managementNameStrategy
operator|=
name|createManagementNameStrategy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|headersMapFactory
operator|==
literal|null
condition|)
block|{
name|headersMapFactory
operator|=
name|createHeadersMapFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|classResolver
operator|==
literal|null
condition|)
block|{
name|classResolver
operator|=
name|createClassResolver
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|producerServicePool
operator|==
literal|null
condition|)
block|{
name|producerServicePool
operator|=
name|createProducerServicePool
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pollingConsumerServicePool
operator|==
literal|null
condition|)
block|{
name|pollingConsumerServicePool
operator|=
name|createPollingConsumerServicePool
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodeIdFactory
operator|==
literal|null
condition|)
block|{
name|nodeIdFactory
operator|=
name|createNodeIdFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|processorFactory
operator|==
literal|null
condition|)
block|{
name|processorFactory
operator|=
name|createProcessorFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|messageHistoryFactory
operator|==
literal|null
condition|)
block|{
name|messageHistoryFactory
operator|=
name|createMessageHistoryFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inflightRepository
operator|==
literal|null
condition|)
block|{
name|inflightRepository
operator|=
name|createInflightRepository
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|asyncProcessorAwaitManager
operator|==
literal|null
condition|)
block|{
name|asyncProcessorAwaitManager
operator|=
name|createAsyncProcessorAwaitManager
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|shutdownStrategy
operator|==
literal|null
condition|)
block|{
name|shutdownStrategy
operator|=
name|createShutdownStrategy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|uuidGenerator
operator|==
literal|null
condition|)
block|{
name|uuidGenerator
operator|=
name|createDefaultUuidGenerator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|unitOfWorkFactory
operator|==
literal|null
condition|)
block|{
name|unitOfWorkFactory
operator|=
name|createUnitOfWorkFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|executorServiceManager
operator|==
literal|null
condition|)
block|{
name|executorServiceManager
operator|=
name|createExecutorServiceManager
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|packageScanClassResolver
operator|==
literal|null
condition|)
block|{
name|packageScanClassResolver
operator|=
name|createPackageScanClassResolver
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|managementStrategy
operator|==
literal|null
condition|)
block|{
comment|// setup management strategy first since end users may use it to add event notifiers
comment|// using the management strategy before the CamelContext has been started
name|managementStrategy
operator|=
name|createManagementStrategy
argument_list|()
expr_stmt|;
block|}
name|setDefaultExtension
argument_list|(
name|HealthCheckRegistry
operator|.
name|class
argument_list|,
name|this
operator|::
name|createHealthCheckRegistry
argument_list|)
expr_stmt|;
name|setDefaultExtension
argument_list|(
name|RuntimeCamelCatalog
operator|.
name|class
argument_list|,
name|this
operator|::
name|createRuntimeCamelCatalog
argument_list|)
expr_stmt|;
comment|// Call all registered trackers with this context
comment|// Note, this may use a partially constructed object
name|CamelContextTracker
operator|.
name|notifyContextCreated
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|adapt (Class<T> type)
specifier|public
parameter_list|<
name|T
extends|extends
name|CamelContext
parameter_list|>
name|T
name|adapt
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getExtension (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getExtension
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Object
name|extension
init|=
name|extensions
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|extension
operator|instanceof
name|Supplier
condition|)
block|{
name|setExtension
argument_list|(
name|type
argument_list|,
operator|(
operator|(
name|Supplier
argument_list|<
name|T
argument_list|>
operator|)
name|extension
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|type
operator|.
name|cast
argument_list|(
name|extensions
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setExtension (Class<T> type, T module)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|setExtension
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|module
parameter_list|)
block|{
try|try
block|{
name|addService
argument_list|(
name|module
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|extensions
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|setDefaultExtension (Class<T> type, Supplier<T> module)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|setDefaultExtension
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|module
parameter_list|)
block|{
name|extensions
operator|.
name|putIfAbsent
argument_list|(
name|type
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
DECL|method|isVetoStarted ()
specifier|public
name|boolean
name|isVetoStarted
parameter_list|()
block|{
return|return
name|vetoStated
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getNameStrategy
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Sets the name of the this context.      *      * @param name the name      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// use an explicit name strategy since an explicit name was provided to be used
name|this
operator|.
name|nameStrategy
operator|=
operator|new
name|ExplicitCamelContextNameStrategy
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getNameStrategy ()
specifier|public
name|CamelContextNameStrategy
name|getNameStrategy
parameter_list|()
block|{
return|return
name|nameStrategy
return|;
block|}
DECL|method|setNameStrategy (CamelContextNameStrategy nameStrategy)
specifier|public
name|void
name|setNameStrategy
parameter_list|(
name|CamelContextNameStrategy
name|nameStrategy
parameter_list|)
block|{
name|this
operator|.
name|nameStrategy
operator|=
name|nameStrategy
expr_stmt|;
block|}
DECL|method|getManagementNameStrategy ()
specifier|public
name|ManagementNameStrategy
name|getManagementNameStrategy
parameter_list|()
block|{
return|return
name|managementNameStrategy
return|;
block|}
DECL|method|setManagementNameStrategy (ManagementNameStrategy managementNameStrategy)
specifier|public
name|void
name|setManagementNameStrategy
parameter_list|(
name|ManagementNameStrategy
name|managementNameStrategy
parameter_list|)
block|{
name|this
operator|.
name|managementNameStrategy
operator|=
name|managementNameStrategy
expr_stmt|;
block|}
DECL|method|getManagementName ()
specifier|public
name|String
name|getManagementName
parameter_list|()
block|{
return|return
name|managementName
return|;
block|}
DECL|method|setManagementName (String managementName)
specifier|public
name|void
name|setManagementName
parameter_list|(
name|String
name|managementName
parameter_list|)
block|{
name|this
operator|.
name|managementName
operator|=
name|managementName
expr_stmt|;
block|}
DECL|method|hasComponent (String componentName)
specifier|public
name|Component
name|hasComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
return|return
name|components
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
return|;
block|}
DECL|method|addComponent (String componentName, final Component component)
specifier|public
name|void
name|addComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
specifier|final
name|Component
name|component
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|component
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
name|component
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Component
name|oldValue
init|=
name|components
operator|.
name|putIfAbsent
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add component as its already previously added: "
operator|+
name|componentName
argument_list|)
throw|;
block|}
name|postInitComponent
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|postInitComponent (String componentName, final Component component)
specifier|private
name|void
name|postInitComponent
parameter_list|(
name|String
name|componentName
parameter_list|,
specifier|final
name|Component
name|component
parameter_list|)
block|{
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onComponentAdd
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
comment|// keep reference to properties component up to date
if|if
condition|(
name|component
operator|instanceof
name|PropertiesComponent
operator|&&
literal|"properties"
operator|.
name|equals
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
name|propertiesComponent
operator|=
operator|(
name|PropertiesComponent
operator|)
name|component
expr_stmt|;
block|}
block|}
DECL|method|getComponent (String name)
specifier|public
name|Component
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
name|name
argument_list|,
name|autoCreateComponents
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getComponent (String name, boolean autoCreateComponents)
specifier|public
name|Component
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|autoCreateComponents
parameter_list|)
block|{
return|return
name|getComponent
argument_list|(
name|name
argument_list|,
name|autoCreateComponents
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getComponent (String name, boolean autoCreateComponents, boolean autoStart)
specifier|public
name|Component
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|autoCreateComponents
parameter_list|,
name|boolean
name|autoStart
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
comment|// Check if the named component is already being created, that would mean
comment|// that the initComponent has triggered a new getComponent
if|if
condition|(
name|componentsInCreation
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Circular dependency detected, the component "
operator|+
name|name
operator|+
literal|" is already being created"
argument_list|)
throw|;
block|}
try|try
block|{
comment|// Flag used to mark a component of being created.
specifier|final
name|AtomicBoolean
name|created
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// atomic operation to get/create a component. Avoid global locks.
specifier|final
name|Component
name|component
init|=
name|components
operator|.
name|computeIfAbsent
argument_list|(
name|name
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Component
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Component
name|apply
parameter_list|(
name|String
name|comp
parameter_list|)
block|{
name|created
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|DefaultCamelContext
operator|.
name|this
operator|.
name|initComponent
argument_list|(
name|name
argument_list|,
name|autoCreateComponents
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Start the component after its creation as if it is a component proxy
comment|// that creates/start a delegated component, we may end up in a deadlock
if|if
condition|(
name|component
operator|!=
literal|null
operator|&&
name|created
operator|.
name|get
argument_list|()
operator|&&
name|autoStart
operator|&&
operator|(
name|isStarted
argument_list|()
operator|||
name|isStarting
argument_list|()
operator|)
condition|)
block|{
comment|// If the component is looked up after the context is started,
comment|// lets start it up.
if|if
condition|(
name|component
operator|instanceof
name|Service
condition|)
block|{
name|startService
argument_list|(
operator|(
name|Service
operator|)
name|component
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|component
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot auto create component: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// remove the reference to the component being created
name|componentsInCreation
operator|.
name|get
argument_list|()
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled      */
DECL|method|initComponent (String name, boolean autoCreateComponents)
specifier|private
name|Component
name|initComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|autoCreateComponents
parameter_list|)
block|{
name|Component
name|component
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|autoCreateComponents
condition|)
block|{
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using ComponentResolver: {} to resolve component with name: {}"
argument_list|,
name|getComponentResolver
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Mark the component as being created so we can detect circular
comment|// requests.
comment|//
comment|// In spring apps, the component resolver may trigger a new getComponent
comment|// because of the underlying bean factory and as the endpoints are
comment|// registered as singleton, the spring factory creates the bean
comment|// and then check the type so the getComponent is always triggered.
comment|//
comment|// Simple circular dependency:
comment|//
comment|//<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
comment|//<route>
comment|//<from id="twitter" uri="twitter://timeline/home?type=polling"/>
comment|//<log message="Got ${body}"/>
comment|//</route>
comment|//</camelContext>
comment|//
comment|// Complex circular dependency:
comment|//
comment|//<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
comment|//<route>
comment|//<from id="log" uri="seda:test"/>
comment|//<to id="seda" uri="log:test"/>
comment|//</route>
comment|//</camelContext>
comment|//
comment|// This would freeze the app (lock or infinite loop).
comment|//
comment|// See https://issues.apache.org/jira/browse/CAMEL-11225
name|componentsInCreation
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|component
operator|=
name|getComponentResolver
argument_list|()
operator|.
name|resolveComponent
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|postInitComponent
argument_list|(
name|name
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot auto create component: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|component
return|;
block|}
DECL|method|getComponent (String name, Class<T> componentType)
specifier|public
parameter_list|<
name|T
extends|extends
name|Component
parameter_list|>
name|T
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|componentType
parameter_list|)
block|{
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentType
operator|.
name|isInstance
argument_list|(
name|component
argument_list|)
condition|)
block|{
return|return
name|componentType
operator|.
name|cast
argument_list|(
name|component
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|message
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"Did not find component given by the name: "
operator|+
name|name
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"Found component of type: "
operator|+
name|component
operator|.
name|getClass
argument_list|()
operator|+
literal|" instead of expected: "
operator|+
name|componentType
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveComponent (String name)
specifier|public
name|Component
name|resolveComponent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Component
name|answer
init|=
name|hasComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|answer
operator|=
name|getComponentResolver
argument_list|()
operator|.
name|resolveComponent
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot resolve component: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|removeComponent (String componentName)
specifier|public
name|Component
name|removeComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
name|Component
name|oldComponent
init|=
name|components
operator|.
name|remove
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldComponent
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stopServices
argument_list|(
name|oldComponent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error stopping component "
operator|+
name|oldComponent
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onComponentRemove
argument_list|(
name|componentName
argument_list|,
name|oldComponent
argument_list|)
expr_stmt|;
block|}
block|}
comment|// keep reference to properties component up to date
if|if
condition|(
name|oldComponent
operator|!=
literal|null
operator|&&
literal|"properties"
operator|.
name|equals
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
name|propertiesComponent
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|oldComponent
return|;
block|}
comment|// Endpoint Management Methods
comment|// -----------------------------------------------------------------------
DECL|method|getEndpointRegistry ()
specifier|public
name|EndpointRegistry
argument_list|<
name|EndpointKey
argument_list|>
name|getEndpointRegistry
parameter_list|()
block|{
return|return
name|endpoints
return|;
block|}
DECL|method|getEndpoints ()
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|getEndpoints
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|endpoints
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getEndpointMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|getEndpointMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|EndpointKey
argument_list|,
name|Endpoint
argument_list|>
name|entry
range|:
name|endpoints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|hasEndpoint (String uri)
specifier|public
name|Endpoint
name|hasEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|endpoints
operator|.
name|get
argument_list|(
name|getEndpointKey
argument_list|(
name|uri
argument_list|)
argument_list|)
return|;
block|}
DECL|method|addEndpoint (String uri, Endpoint endpoint)
specifier|public
name|Endpoint
name|addEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|Endpoint
name|oldEndpoint
decl_stmt|;
name|startService
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|oldEndpoint
operator|=
name|endpoints
operator|.
name|remove
argument_list|(
name|getEndpointKey
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onEndpointAdd
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|addEndpointToRegistry
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldEndpoint
operator|!=
literal|null
operator|&&
name|oldEndpoint
operator|!=
name|endpoint
condition|)
block|{
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|oldEndpoint
return|;
block|}
DECL|method|removeEndpoint (Endpoint endpoint)
specifier|public
name|void
name|removeEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|removeEndpoints
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|removeEndpoints (String uri)
specifier|public
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|removeEndpoints
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Endpoint
name|oldEndpoint
init|=
name|endpoints
operator|.
name|remove
argument_list|(
name|getEndpointKey
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEndpoint
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|EndpointKey
argument_list|,
name|Endpoint
argument_list|>
name|entry
range|:
name|endpoints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oldEndpoint
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|this
argument_list|,
name|oldEndpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|uri
argument_list|)
condition|)
block|{
try|try
block|{
name|stopServices
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error stopping endpoint "
operator|+
name|oldEndpoint
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|oldEndpoint
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// notify lifecycle its being removed
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|answer
control|)
block|{
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onEndpointRemove
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getEndpoint (String uri)
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Getting endpoint with uri: {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// in case path has property placeholders then try to let property component resolve those
try|try
block|{
name|uri
operator|=
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|String
name|rawUri
init|=
name|uri
decl_stmt|;
comment|// normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order
name|uri
operator|=
name|normalizeEndpointUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Getting endpoint with raw uri: {}, normalized uri: {}"
argument_list|,
name|rawUri
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|Endpoint
name|answer
decl_stmt|;
name|String
name|scheme
init|=
literal|null
decl_stmt|;
comment|// use optimized method to get the endpoint uri
name|EndpointKey
name|key
init|=
name|getEndpointKeyPreNormalized
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|answer
operator|=
name|endpoints
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// Use the URI prefix to find the component.
name|String
name|splitURI
index|[]
init|=
name|StringHelper
operator|.
name|splitOnCharacter
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitURI
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|scheme
operator|=
name|splitURI
index|[
literal|0
index|]
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Endpoint uri: {} is from component with name: {}"
argument_list|,
name|uri
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
comment|// Ask the component to resolve the endpoint.
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Creating endpoint from uri: {} using component: {}"
argument_list|,
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
comment|// Have the component create the endpoint if it can.
if|if
condition|(
name|component
operator|.
name|useRawUri
argument_list|()
condition|)
block|{
name|answer
operator|=
name|component
operator|.
name|createEndpoint
argument_list|(
name|rawUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|component
operator|.
name|createEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} converted to endpoint: {} by component: {}"
argument_list|,
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|uri
argument_list|)
argument_list|,
name|answer
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// no component then try in registry and elsewhere
name|answer
operator|=
name|createEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"No component to create endpoint from uri: {} fallback lookup in registry -> {}"
argument_list|,
name|uri
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|splitURI
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
comment|// the uri has no context-path which is rare and it was not referring to an endpoint in the registry
comment|// so try to see if it can be created by a component
name|int
name|pos
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
name|String
name|componentName
init|=
name|pos
operator|>
literal|0
condition|?
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
else|:
name|uri
decl_stmt|;
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
comment|// Ask the component to resolve the endpoint.
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Creating endpoint from uri: {} using component: {}"
argument_list|,
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
comment|// Have the component create the endpoint if it can.
if|if
condition|(
name|component
operator|.
name|useRawUri
argument_list|()
condition|)
block|{
name|answer
operator|=
name|component
operator|.
name|createEndpoint
argument_list|(
name|rawUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|component
operator|.
name|createEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} converted to endpoint: {} by component: {}"
argument_list|,
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|uri
argument_list|)
argument_list|,
name|answer
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|addService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|=
name|addEndpointToRegistry
argument_list|(
name|uri
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// unknown scheme
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|scheme
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
literal|"No component found with scheme: "
operator|+
name|scheme
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getEndpoint (String name, Class<T> endpointType)
specifier|public
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
name|T
name|getEndpoint
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|endpointType
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|getEndpoint
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchEndpointException
argument_list|(
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|endpoint
operator|instanceof
name|InterceptSendToEndpoint
condition|)
block|{
name|endpoint
operator|=
operator|(
operator|(
name|InterceptSendToEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpointType
operator|.
name|isInstance
argument_list|(
name|endpoint
argument_list|)
condition|)
block|{
return|return
name|endpointType
operator|.
name|cast
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The endpoint is not of type: "
operator|+
name|endpointType
operator|+
literal|" but is: "
operator|+
name|endpoint
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|addRegisterEndpointCallback (EndpointStrategy strategy)
specifier|public
name|void
name|addRegisterEndpointCallback
parameter_list|(
name|EndpointStrategy
name|strategy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|endpointStrategies
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
comment|// let it be invoked for already registered endpoints so it can catch-up.
name|endpointStrategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|getEndpoints
argument_list|()
control|)
block|{
name|Endpoint
name|newEndpoint
init|=
name|strategy
operator|.
name|registerEndpoint
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|newEndpoint
operator|!=
literal|null
condition|)
block|{
comment|// put will replace existing endpoint with the new endpoint
name|endpoints
operator|.
name|put
argument_list|(
name|getEndpointKey
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
argument_list|,
name|newEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Strategy to add the given endpoint to the internal endpoint registry      *      * @param uri      uri of the endpoint      * @param endpoint the endpoint to add      * @return the added endpoint      */
DECL|method|addEndpointToRegistry (String uri, Endpoint endpoint)
specifier|protected
name|Endpoint
name|addEndpointToRegistry
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|endpoint
argument_list|,
literal|"endpoint"
argument_list|)
expr_stmt|;
comment|// if there is endpoint strategies, then use the endpoints they return
comment|// as this allows to intercept endpoints etc.
for|for
control|(
name|EndpointStrategy
name|strategy
range|:
name|endpointStrategies
control|)
block|{
name|endpoint
operator|=
name|strategy
operator|.
name|registerEndpoint
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|endpoints
operator|.
name|put
argument_list|(
name|getEndpointKey
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|/**      * Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.      *      * @param uri the uri      * @return normalized uri      * @throws ResolveEndpointFailedException if uri cannot be normalized      */
DECL|method|normalizeEndpointUri (String uri)
specifier|protected
specifier|static
name|String
name|normalizeEndpointUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
name|uri
operator|=
name|URISupport
operator|.
name|normalizeUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|uri
return|;
block|}
comment|/**      * Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}      *      * @param uri the endpoint uri      * @return the key      */
DECL|method|getEndpointKey (String uri)
specifier|protected
name|EndpointKey
name|getEndpointKey
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|EndpointKey
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}      *      * @param uri the endpoint uri which is pre normalized      * @return the key      */
DECL|method|getEndpointKeyPreNormalized (String uri)
specifier|protected
name|EndpointKey
name|getEndpointKeyPreNormalized
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|EndpointKey
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}      *      * @param uri      the endpoint uri      * @param endpoint the endpoint      * @return the key      */
DECL|method|getEndpointKey (String uri, Endpoint endpoint)
specifier|protected
name|EndpointKey
name|getEndpointKey
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|!=
literal|null
operator|&&
operator|!
name|endpoint
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|int
name|counter
init|=
name|endpointKeyCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
return|return
operator|new
name|EndpointKey
argument_list|(
name|uri
operator|+
literal|":"
operator|+
name|counter
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|EndpointKey
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
comment|// Route Management Methods
comment|// -----------------------------------------------------------------------
annotation|@
name|Override
DECL|method|setRouteController (RouteController routeController)
specifier|public
name|void
name|setRouteController
parameter_list|(
name|RouteController
name|routeController
parameter_list|)
block|{
name|this
operator|.
name|routeController
operator|=
name|routeController
expr_stmt|;
name|this
operator|.
name|routeController
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouteController ()
specifier|public
name|RouteController
name|getRouteController
parameter_list|()
block|{
return|return
name|routeController
return|;
block|}
DECL|method|getRouteStartupOrder ()
specifier|public
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|getRouteStartupOrder
parameter_list|()
block|{
return|return
name|routeStartupOrder
return|;
block|}
DECL|method|getRoutes ()
specifier|public
name|List
argument_list|<
name|Route
argument_list|>
name|getRoutes
parameter_list|()
block|{
comment|// lets return a copy of the collection as objects are removed later when services are stopped
if|if
condition|(
name|routes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|routes
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|routes
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|getRoute (String id)
specifier|public
name|Route
name|getRoute
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Route
name|route
range|:
name|getRoutes
argument_list|()
control|)
block|{
if|if
condition|(
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|route
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getProcessor (String id)
specifier|public
name|Processor
name|getProcessor
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|Route
name|route
range|:
name|getRoutes
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Processor
argument_list|>
name|list
init|=
name|route
operator|.
name|filter
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getProcessor (String id, Class<T> type)
specifier|public
parameter_list|<
name|T
extends|extends
name|Processor
parameter_list|>
name|T
name|getProcessor
parameter_list|(
name|String
name|id
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Processor
name|answer
init|=
name|getProcessor
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|answer
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getProcessorDefinition (String id)
specifier|public
name|ProcessorDefinition
name|getProcessorDefinition
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|getRouteDefinitions
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|ProcessorDefinition
argument_list|>
name|it
init|=
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ProcessorDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcessorDefinition
name|proc
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|proc
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|proc
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getProcessorDefinition (String id, Class<T> type)
specifier|public
parameter_list|<
name|T
extends|extends
name|ProcessorDefinition
parameter_list|>
name|T
name|getProcessorDefinition
parameter_list|(
name|String
name|id
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ProcessorDefinition
name|answer
init|=
name|getProcessorDefinition
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|answer
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|removeRouteCollection (Collection<Route> routes)
name|void
name|removeRouteCollection
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|routes
init|)
block|{
name|this
operator|.
name|routes
operator|.
name|removeAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRouteCollection (Collection<Route> routes)
name|void
name|addRouteCollection
parameter_list|(
name|Collection
argument_list|<
name|Route
argument_list|>
name|routes
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|routes
init|)
block|{
name|this
operator|.
name|routes
operator|.
name|addAll
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRoutes (final RoutesBuilder builder)
specifier|public
name|void
name|addRoutes
parameter_list|(
specifier|final
name|RoutesBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Adding routes from builder: {}"
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|doWithDefinedClassLoader
argument_list|(
parameter_list|()
lambda|->
name|builder
operator|.
name|addRoutesToCamelContext
argument_list|(
name|DefaultCamelContext
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRoutesDefinition (InputStream is)
specifier|public
specifier|synchronized
name|RoutesDefinition
name|loadRoutesDefinition
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ModelHelper
operator|.
name|loadRoutesDefinition
argument_list|(
name|this
argument_list|,
name|is
argument_list|)
return|;
block|}
DECL|method|loadRestsDefinition (InputStream is)
specifier|public
specifier|synchronized
name|RestsDefinition
name|loadRestsDefinition
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
comment|// load routes using JAXB
if|if
condition|(
name|jaxbContext
operator|==
literal|null
condition|)
block|{
comment|// must use classloader from CamelContext to have JAXB working
name|jaxbContext
operator|=
name|getModelJAXBContextFactory
argument_list|()
operator|.
name|newJAXBContext
argument_list|()
expr_stmt|;
block|}
name|Unmarshaller
name|unmarshaller
init|=
name|jaxbContext
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot unmarshal to rests using JAXB from input stream: "
operator|+
name|is
argument_list|)
throw|;
block|}
comment|// can either be routes or a single route
name|RestsDefinition
name|answer
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|RestDefinition
condition|)
block|{
name|RestDefinition
name|rest
init|=
operator|(
name|RestDefinition
operator|)
name|result
decl_stmt|;
name|answer
operator|=
operator|new
name|RestsDefinition
argument_list|()
expr_stmt|;
name|answer
operator|.
name|getRests
argument_list|()
operator|.
name|add
argument_list|(
name|rest
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|RestsDefinition
condition|)
block|{
name|answer
operator|=
operator|(
name|RestsDefinition
operator|)
name|result
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unmarshalled object is an unsupported type: "
operator|+
name|ObjectHelper
operator|.
name|className
argument_list|(
name|result
argument_list|)
operator|+
literal|" -> "
operator|+
name|result
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|addRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
specifier|synchronized
name|void
name|addRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|routeDefinitions
operator|==
literal|null
operator|||
name|routeDefinitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|RouteDefinition
name|routeDefinition
range|:
name|routeDefinitions
control|)
block|{
name|removeRouteDefinition
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|routeDefinitions
operator|.
name|addAll
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRouteDefinition (RouteDefinition routeDefinition)
specifier|public
name|void
name|addRouteDefinition
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
name|addRouteDefinitions
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|routeDefinition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the route definition with the given key.      *      * @return true if one or more routes was removed      */
DECL|method|removeRouteDefinition (String key)
specifier|protected
name|boolean
name|removeRouteDefinition
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|RouteDefinition
argument_list|>
name|iter
init|=
name|routeDefinitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RouteDefinition
name|route
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|.
name|idOrCreate
argument_list|(
name|nodeIdFactory
argument_list|)
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|answer
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|removeRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
specifier|synchronized
name|void
name|removeRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|RouteDefinition
name|routeDefinition
range|:
name|routeDefinitions
control|)
block|{
name|removeRouteDefinition
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeRouteDefinition (RouteDefinition routeDefinition)
specifier|public
specifier|synchronized
name|void
name|removeRouteDefinition
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteDefinition
name|toBeRemoved
init|=
name|routeDefinition
decl_stmt|;
name|String
name|id
init|=
name|routeDefinition
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
comment|// remove existing route
name|stopRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|removeRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|toBeRemoved
operator|=
name|getRouteDefinition
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|routeDefinitions
operator|.
name|remove
argument_list|(
name|toBeRemoved
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteStatus (String key)
specifier|public
name|ServiceStatus
name|getRouteStatus
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
return|return
name|routeService
operator|.
name|getStatus
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|startRoute (RouteDefinition route)
specifier|public
name|void
name|startRoute
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
throws|throws
name|Exception
block|{
comment|// assign ids to the routes and validate that the id's is all unique
name|RouteDefinitionHelper
operator|.
name|forceAssignIds
argument_list|(
name|this
argument_list|,
name|routeDefinitions
argument_list|)
expr_stmt|;
name|String
name|duplicate
init|=
name|RouteDefinitionHelper
operator|.
name|validateUniqueIds
argument_list|(
name|route
argument_list|,
name|routeDefinitions
argument_list|)
decl_stmt|;
if|if
condition|(
name|duplicate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|,
literal|"duplicate id detected: "
operator|+
name|duplicate
operator|+
literal|". Please correct ids to be unique among all your routes."
argument_list|)
throw|;
block|}
comment|// indicate we are staring the route using this thread so
comment|// we are able to query this if needed
name|isStartingRoutes
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// must ensure route is prepared, before we can start it
name|route
operator|.
name|prepare
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Route
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouteContext
argument_list|>
name|routeContexts
init|=
name|route
operator|.
name|addRoutes
argument_list|(
name|this
argument_list|,
name|routes
argument_list|)
decl_stmt|;
name|RouteService
name|routeService
init|=
operator|new
name|RouteService
argument_list|(
name|this
argument_list|,
name|route
argument_list|,
name|routeContexts
argument_list|,
name|routes
argument_list|)
decl_stmt|;
name|startRouteService
argument_list|(
name|routeService
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we are done staring routes
name|isStartingRoutes
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isStartingRoutes ()
specifier|public
name|boolean
name|isStartingRoutes
parameter_list|()
block|{
name|Boolean
name|answer
init|=
name|isStartingRoutes
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|answer
operator|!=
literal|null
operator|&&
name|answer
return|;
block|}
DECL|method|isSetupRoutes ()
specifier|public
name|boolean
name|isSetupRoutes
parameter_list|()
block|{
name|Boolean
name|answer
init|=
name|isSetupRoutes
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|answer
operator|!=
literal|null
operator|&&
name|answer
return|;
block|}
DECL|method|startAllRoutes ()
specifier|public
name|void
name|startAllRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|doStartOrResumeRoutes
argument_list|(
name|routeServices
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|startRoute (String routeId)
specifier|public
specifier|synchronized
name|void
name|startRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultRouteError
operator|.
name|reset
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|startRouteService
argument_list|(
name|routeService
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DefaultRouteError
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|,
name|RouteError
operator|.
name|Phase
operator|.
name|START
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|resumeRoute (String routeId)
specifier|public
specifier|synchronized
name|void
name|resumeRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultRouteError
operator|.
name|reset
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|routeSupportsSuspension
argument_list|(
name|routeId
argument_list|)
condition|)
block|{
comment|// start route if suspension is not supported
name|startRoute
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
return|return;
block|}
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
name|resumeRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
comment|// must resume the route as well
name|Route
name|route
init|=
name|getRoute
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
name|ServiceHelper
operator|.
name|resumeService
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DefaultRouteError
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|,
name|RouteError
operator|.
name|Phase
operator|.
name|RESUME
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|stopRoute (String routeId, long timeout, TimeUnit timeUnit, boolean abortAfterTimeout)
specifier|public
specifier|synchronized
name|boolean
name|stopRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|boolean
name|abortAfterTimeout
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultRouteError
operator|.
name|reset
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|RouteStartupOrder
name|route
init|=
operator|new
name|DefaultRouteStartupOrder
argument_list|(
literal|1
argument_list|,
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|routeService
argument_list|)
decl_stmt|;
name|boolean
name|completed
init|=
name|getShutdownStrategy
argument_list|()
operator|.
name|shutdown
argument_list|(
name|this
argument_list|,
name|route
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|,
name|abortAfterTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|completed
condition|)
block|{
comment|// must stop route service as well
name|stopRouteService
argument_list|(
name|routeService
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// shutdown was aborted, make sure route is re-started properly
name|startRouteService
argument_list|(
name|routeService
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|completed
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DefaultRouteError
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|,
name|RouteError
operator|.
name|Phase
operator|.
name|STOP
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|stopRoute (String routeId)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|doShutdownRoute
argument_list|(
name|routeId
argument_list|,
name|getShutdownStrategy
argument_list|()
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|getShutdownStrategy
argument_list|()
operator|.
name|getTimeUnit
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|stopRoute (String routeId, long timeout, TimeUnit timeUnit)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|Exception
block|{
name|doShutdownRoute
argument_list|(
name|routeId
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doShutdownRoute (String routeId, long timeout, TimeUnit timeUnit, boolean removingRoutes)
specifier|protected
specifier|synchronized
name|void
name|doShutdownRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|boolean
name|removingRoutes
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultRouteError
operator|.
name|reset
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RouteStartupOrder
name|order
init|=
operator|new
name|DefaultRouteStartupOrder
argument_list|(
literal|1
argument_list|,
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|routeService
argument_list|)
decl_stmt|;
name|routes
operator|.
name|add
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|getShutdownStrategy
argument_list|()
operator|.
name|shutdown
argument_list|(
name|this
argument_list|,
name|routes
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
comment|// must stop route service as well (and remove the routes from management)
name|stopRouteService
argument_list|(
name|routeService
argument_list|,
name|removingRoutes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DefaultRouteError
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|,
name|removingRoutes
condition|?
name|Phase
operator|.
name|SHUTDOWN
else|:
name|Phase
operator|.
name|STOP
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|removeRoute (String routeId)
specifier|public
specifier|synchronized
name|boolean
name|removeRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultRouteError
operator|.
name|reset
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
comment|// remove the route from ErrorHandlerBuilder if possible
if|if
condition|(
name|getErrorHandlerFactory
argument_list|()
operator|instanceof
name|ErrorHandlerBuilderSupport
condition|)
block|{
name|ErrorHandlerBuilderSupport
name|builder
init|=
operator|(
name|ErrorHandlerBuilderSupport
operator|)
name|getErrorHandlerFactory
argument_list|()
decl_stmt|;
name|builder
operator|.
name|removeOnExceptionList
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
block|}
comment|// gather a map of all the endpoints in use by the routes, so we can known if a given endpoints is in use
comment|// by one or more routes, when we remove the route
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Endpoint
argument_list|>
argument_list|>
name|endpointsInUse
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|entry
range|:
name|routeServices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|endpointsInUse
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|gatherEndpoints
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getRouteStatus
argument_list|(
name|routeId
argument_list|)
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|routeService
operator|.
name|setRemovingRoutes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|shutdownRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
name|removeRouteDefinition
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
name|routeServices
operator|.
name|remove
argument_list|(
name|routeId
argument_list|)
expr_stmt|;
comment|// remove route from startup order as well, as it was removed
name|routeStartupOrder
operator|.
name|removeIf
argument_list|(
name|order
lambda|->
name|order
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
argument_list|)
expr_stmt|;
comment|// from the route which we have removed, then remove all its private endpoints
comment|// (eg the endpoints which are not in use by other routes)
name|Set
argument_list|<
name|Endpoint
argument_list|>
name|toRemove
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpointsInUse
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
control|)
block|{
comment|// how many times is the endpoint in use
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
range|:
name|endpointsInUse
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|endpoints
operator|.
name|contains
argument_list|(
name|endpoint
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
comment|// notice we will count ourselves so if there is only 1 then its safe to remove
if|if
condition|(
name|count
operator|<=
literal|1
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|toRemove
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Removing: {} which was only in use by route: {}"
argument_list|,
name|endpoint
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
name|removeEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DefaultRouteError
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|,
name|RouteError
operator|.
name|Phase
operator|.
name|REMOVE
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|suspendRoute (String routeId)
specifier|public
name|void
name|suspendRoute
parameter_list|(
name|String
name|routeId
parameter_list|)
throws|throws
name|Exception
block|{
name|suspendRoute
argument_list|(
name|routeId
argument_list|,
name|getShutdownStrategy
argument_list|()
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|getShutdownStrategy
argument_list|()
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|suspendRoute (String routeId, long timeout, TimeUnit timeUnit)
specifier|public
specifier|synchronized
name|void
name|suspendRoute
parameter_list|(
name|String
name|routeId
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultRouteError
operator|.
name|reset
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|routeSupportsSuspension
argument_list|(
name|routeId
argument_list|)
condition|)
block|{
name|stopRoute
argument_list|(
name|routeId
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return;
block|}
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Route
name|route
init|=
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|RouteStartupOrder
name|order
init|=
operator|new
name|DefaultRouteStartupOrder
argument_list|(
literal|1
argument_list|,
name|route
argument_list|,
name|routeService
argument_list|)
decl_stmt|;
name|routes
operator|.
name|add
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|getShutdownStrategy
argument_list|()
operator|.
name|suspend
argument_list|(
name|this
argument_list|,
name|routes
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
comment|// must suspend route service as well
name|suspendRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
comment|// must suspend the route as well
if|if
condition|(
name|route
operator|instanceof
name|SuspendableService
condition|)
block|{
operator|(
operator|(
name|SuspendableService
operator|)
name|route
operator|)
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DefaultRouteError
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|routeId
argument_list|,
name|RouteError
operator|.
name|Phase
operator|.
name|SUSPEND
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|addService (Object object)
specifier|public
name|void
name|addService
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|addService
argument_list|(
name|object
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|addService (Object object, boolean stopOnShutdown)
specifier|public
name|void
name|addService
parameter_list|(
name|Object
name|object
parameter_list|,
name|boolean
name|stopOnShutdown
parameter_list|)
throws|throws
name|Exception
block|{
name|doAddService
argument_list|(
name|object
argument_list|,
name|stopOnShutdown
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addService (Object object, boolean stopOnShutdown, boolean forceStart)
specifier|public
name|void
name|addService
parameter_list|(
name|Object
name|object
parameter_list|,
name|boolean
name|stopOnShutdown
parameter_list|,
name|boolean
name|forceStart
parameter_list|)
throws|throws
name|Exception
block|{
name|doAddService
argument_list|(
name|object
argument_list|,
name|stopOnShutdown
argument_list|,
name|forceStart
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddService (Object object, boolean stopOnShutdown, boolean forceStart)
specifier|private
name|void
name|doAddService
parameter_list|(
name|Object
name|object
parameter_list|,
name|boolean
name|stopOnShutdown
parameter_list|,
name|boolean
name|forceStart
parameter_list|)
throws|throws
name|Exception
block|{
comment|// inject CamelContext
if|if
condition|(
name|object
operator|instanceof
name|CamelContextAware
condition|)
block|{
name|CamelContextAware
name|aware
init|=
operator|(
name|CamelContextAware
operator|)
name|object
decl_stmt|;
name|aware
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|object
decl_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|Endpoint
condition|)
block|{
comment|// use specialized endpoint add
name|strategy
operator|.
name|onEndpointAdd
argument_list|(
operator|(
name|Endpoint
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|strategy
operator|.
name|onServiceAdd
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|forceStart
condition|)
block|{
comment|// now start the service (and defer starting if CamelContext is starting up itself)
name|deferStartService
argument_list|(
name|object
argument_list|,
name|stopOnShutdown
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// only add to services to close if its a singleton
comment|// otherwise we could for example end up with a lot of prototype scope endpoints
name|boolean
name|singleton
init|=
literal|true
decl_stmt|;
comment|// assume singleton by default
if|if
condition|(
name|object
operator|instanceof
name|IsSingleton
condition|)
block|{
name|singleton
operator|=
operator|(
operator|(
name|IsSingleton
operator|)
name|service
operator|)
operator|.
name|isSingleton
argument_list|()
expr_stmt|;
block|}
comment|// do not add endpoints as they have their own list
if|if
condition|(
name|singleton
operator|&&
operator|!
operator|(
name|service
operator|instanceof
name|Endpoint
operator|)
condition|)
block|{
comment|// only add to list of services to stop if its not already there
if|if
condition|(
name|stopOnShutdown
operator|&&
operator|!
name|hasService
argument_list|(
name|service
argument_list|)
condition|)
block|{
name|servicesToStop
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeService (Object object)
specifier|public
name|boolean
name|removeService
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|object
operator|instanceof
name|Endpoint
condition|)
block|{
name|removeEndpoint
argument_list|(
operator|(
name|Endpoint
operator|)
name|object
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|object
decl_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onServiceRemove
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|servicesToStop
operator|.
name|remove
argument_list|(
name|service
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasService (Object object)
specifier|public
name|boolean
name|hasService
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|object
decl_stmt|;
return|return
name|servicesToStop
operator|.
name|contains
argument_list|(
name|service
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasService (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|hasService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
for|for
control|(
name|Service
name|service
range|:
name|servicesToStop
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|service
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasServices (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|hasServices
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|servicesToStop
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|service
argument_list|)
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
DECL|method|deferStartService (Object object, boolean stopOnShutdown)
specifier|public
name|void
name|deferStartService
parameter_list|(
name|Object
name|object
parameter_list|,
name|boolean
name|stopOnShutdown
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|object
decl_stmt|;
comment|// only add to services to close if its a singleton
comment|// otherwise we could for example end up with a lot of prototype scope endpoints
name|boolean
name|singleton
init|=
literal|true
decl_stmt|;
comment|// assume singleton by default
if|if
condition|(
name|object
operator|instanceof
name|IsSingleton
condition|)
block|{
name|singleton
operator|=
operator|(
operator|(
name|IsSingleton
operator|)
name|service
operator|)
operator|.
name|isSingleton
argument_list|()
expr_stmt|;
block|}
comment|// do not add endpoints as they have their own list
if|if
condition|(
name|singleton
operator|&&
operator|!
operator|(
name|service
operator|instanceof
name|Endpoint
operator|)
condition|)
block|{
comment|// only add to list of services to stop if its not already there
if|if
condition|(
name|stopOnShutdown
operator|&&
operator|!
name|hasService
argument_list|(
name|service
argument_list|)
condition|)
block|{
name|servicesToStop
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
comment|// are we already started?
if|if
condition|(
name|isStarted
argument_list|()
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deferStartupListener
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addStartupListener (StartupListener listener)
specifier|public
name|void
name|addStartupListener
parameter_list|(
name|StartupListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
comment|// either add to listener so we can invoke then later when CamelContext has been started
comment|// or invoke the callback right now
if|if
condition|(
name|isStarted
argument_list|()
condition|)
block|{
name|listener
operator|.
name|onCamelContextStarted
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startupListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resolveComponentDefaultName (String javaType)
specifier|public
name|String
name|resolveComponentDefaultName
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
comment|// special for some components
comment|// TODO: ActiveMQ 5.11 will include this out of the box, so not needed when its released
if|if
condition|(
literal|"org.apache.activemq.camel.component.ActiveMQComponent"
operator|.
name|equals
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|"jms"
return|;
block|}
comment|// try to find the component by its java type from the in-use components
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
comment|// find all the components which will include the default component name
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|all
init|=
name|CamelContextHelper
operator|.
name|findComponents
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|entry
range|:
name|all
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fqn
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaType
operator|.
name|equals
argument_list|(
name|fqn
argument_list|)
condition|)
block|{
comment|// is there component docs for that name?
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|getComponentParameterJsonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
return|return
literal|null
return|;
block|}
block|}
comment|// could not find a component with that name
return|return
literal|null
return|;
block|}
DECL|method|findComponents ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|findComponents
parameter_list|()
throws|throws
name|LoadPropertiesException
throws|,
name|IOException
block|{
return|return
name|CamelContextHelper
operator|.
name|findComponents
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|findEips ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|findEips
parameter_list|()
throws|throws
name|LoadPropertiesException
throws|,
name|IOException
block|{
return|return
name|CamelContextHelper
operator|.
name|findEips
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getComponentParameterJsonSchema (String componentName)
specifier|public
name|String
name|getComponentParameterJsonSchema
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// use the component factory finder to find the package name of the component class, which is the location
comment|// where the documentation exists as well
name|FactoryFinder
name|finder
init|=
name|getFactoryFinder
argument_list|(
name|DefaultComponentResolver
operator|.
name|RESOURCE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|finder
operator|.
name|findClass
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// ignore, i.e. if a component is an auto-configured spring-boot
comment|// component
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// fallback and find existing component
name|Component
name|existing
init|=
name|hasComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|=
name|existing
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|String
name|packageName
init|=
name|clazz
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|componentName
operator|+
literal|".json"
decl_stmt|;
name|ClassResolver
name|resolver
init|=
name|getClassResolver
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loading component JSON Schema for: {} using class resolver: {} -> {}"
argument_list|,
name|componentName
argument_list|,
name|resolver
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|IOHelper
operator|.
name|loadText
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|// special for ActiveMQ as it is really just JMS
if|if
condition|(
literal|"ActiveMQComponent"
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getComponentParameterJsonSchema
argument_list|(
literal|"jms"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getDataFormatParameterJsonSchema (String dataFormatName)
specifier|public
name|String
name|getDataFormatParameterJsonSchema
parameter_list|(
name|String
name|dataFormatName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// use the dataformat factory finder to find the package name of the dataformat class, which is the location
comment|// where the documentation exists as well
name|FactoryFinder
name|finder
init|=
name|getFactoryFinder
argument_list|(
name|DefaultDataFormatResolver
operator|.
name|DATAFORMAT_RESOURCE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|finder
operator|.
name|findClass
argument_list|(
name|dataFormatName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// ignore, i.e. if a component is an auto-configured spring-boot
comment|// data-formats
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|packageName
init|=
name|clazz
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|dataFormatName
operator|+
literal|".json"
decl_stmt|;
name|ClassResolver
name|resolver
init|=
name|getClassResolver
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loading dataformat JSON Schema for: {} using class resolver: {} -> {}"
argument_list|,
name|dataFormatName
argument_list|,
name|resolver
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|IOHelper
operator|.
name|loadText
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getLanguageParameterJsonSchema (String languageName)
specifier|public
name|String
name|getLanguageParameterJsonSchema
parameter_list|(
name|String
name|languageName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// use the language factory finder to find the package name of the language class, which is the location
comment|// where the documentation exists as well
name|FactoryFinder
name|finder
init|=
name|getFactoryFinder
argument_list|(
name|DefaultLanguageResolver
operator|.
name|LANGUAGE_RESOURCE_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|finder
operator|.
name|findClass
argument_list|(
name|languageName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// ignore, i.e. if a component is an auto-configured spring-boot
comment|// languages
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|packageName
init|=
name|clazz
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|languageName
operator|+
literal|".json"
decl_stmt|;
name|ClassResolver
name|resolver
init|=
name|getClassResolver
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Loading language JSON Schema for: {} using class resolver: {} -> {}"
argument_list|,
name|languageName
argument_list|,
name|resolver
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|IOHelper
operator|.
name|loadText
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getEipParameterJsonSchema (String eipName)
specifier|public
name|String
name|getEipParameterJsonSchema
parameter_list|(
name|String
name|eipName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the eip json schema may be in some of the sub-packages so look until we find it
name|String
index|[]
name|subPackages
init|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"/config"
block|,
literal|"/dataformat"
block|,
literal|"/language"
block|,
literal|"/loadbalancer"
block|,
literal|"/rest"
block|}
decl_stmt|;
for|for
control|(
name|String
name|sub
range|:
name|subPackages
control|)
block|{
name|String
name|path
init|=
name|CamelContextHelper
operator|.
name|MODEL_DOCUMENTATION_PREFIX
operator|+
name|sub
operator|+
literal|"/"
operator|+
name|eipName
operator|+
literal|".json"
decl_stmt|;
name|ClassResolver
name|resolver
init|=
name|getClassResolver
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Loading eip JSON Schema for: {} using class resolver: {} -> {}"
argument_list|,
name|eipName
argument_list|,
name|resolver
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|IOHelper
operator|.
name|loadText
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|explainEipJson (String nameOrId, boolean includeAllOptions)
specifier|public
name|String
name|explainEipJson
parameter_list|(
name|String
name|nameOrId
parameter_list|,
name|boolean
name|includeAllOptions
parameter_list|)
block|{
try|try
block|{
comment|// try to find the id within all known routes and their eips
name|String
name|eipName
init|=
name|nameOrId
decl_stmt|;
name|NamedNode
name|target
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RouteDefinition
name|route
range|:
name|getRouteDefinitions
argument_list|()
control|)
block|{
if|if
condition|(
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|nameOrId
argument_list|)
condition|)
block|{
name|target
operator|=
name|route
expr_stmt|;
break|break;
block|}
for|for
control|(
name|FromDefinition
name|from
range|:
name|route
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
name|nameOrId
operator|.
name|equals
argument_list|(
name|from
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|target
operator|=
name|route
expr_stmt|;
break|break;
block|}
block|}
name|Iterator
argument_list|<
name|ProcessorDefinition
argument_list|>
name|it
init|=
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ProcessorDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcessorDefinition
name|def
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameOrId
operator|.
name|equals
argument_list|(
name|def
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|target
operator|=
name|def
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|eipName
operator|=
name|target
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
name|String
name|json
init|=
name|getEipParameterJsonSchema
argument_list|(
name|eipName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// overlay with runtime parameters that id uses at runtime
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// selected rows to use for answer
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|selected
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// extract options from the node
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|target
argument_list|,
name|options
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove outputs which we do not want to include
name|options
operator|.
name|remove
argument_list|(
literal|"outputs"
argument_list|)
expr_stmt|;
comment|// include other rows
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|name
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|kind
init|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
name|required
init|=
name|row
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
name|String
name|deprecated
init|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
comment|// find the configured option
name|Object
name|o
init|=
name|options
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|o
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
name|URISupport
operator|.
name|sanitizePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeAllOptions
operator|||
name|o
operator|!=
literal|null
condition|)
block|{
comment|// add as selected row
if|if
condition|(
operator|!
name|selected
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|selected
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|kind
block|,
name|label
block|,
name|required
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|json
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|json
argument_list|,
literal|"  \"properties\": {"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"  \"properties\": {"
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
index|[]
name|row
range|:
name|selected
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|row
index|[
literal|0
index|]
decl_stmt|;
name|String
name|kind
init|=
name|row
index|[
literal|1
index|]
decl_stmt|;
name|String
name|label
init|=
name|row
index|[
literal|2
index|]
decl_stmt|;
name|String
name|required
init|=
name|row
index|[
literal|3
index|]
decl_stmt|;
name|String
name|type
init|=
name|row
index|[
literal|4
index|]
decl_stmt|;
name|String
name|javaType
init|=
name|row
index|[
literal|5
index|]
decl_stmt|;
name|String
name|deprecated
init|=
name|row
index|[
literal|6
index|]
decl_stmt|;
name|String
name|value
init|=
name|row
index|[
literal|7
index|]
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
index|[
literal|8
index|]
decl_stmt|;
name|String
name|description
init|=
name|row
index|[
literal|9
index|]
decl_stmt|;
comment|// add json of the option
name|buffer
operator|.
name|append
argument_list|(
name|StringQuoteHelper
operator|.
name|doubleQuote
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": { "
argument_list|)
expr_stmt|;
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"kind\": \""
operator|+
name|kind
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"label\": \""
operator|+
name|label
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"required\": \""
operator|+
name|required
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"type\": \""
operator|+
name|type
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"javaType\": \""
operator|+
name|javaType
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deprecated
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"deprecated\": \""
operator|+
name|deprecated
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"value\": \""
operator|+
name|value
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"defaultValue\": \""
operator|+
name|defaultValue
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"description\": \""
operator|+
name|description
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|csb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|csb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }\n}\n"
argument_list|)
expr_stmt|;
comment|// insert the original first part of the json into the start of the buffer
name|buffer
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|json
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and return empty response
return|return
literal|null
return|;
block|}
block|}
DECL|method|explainDataFormatJson (String dataFormatName, DataFormat dataFormat, boolean includeAllOptions)
specifier|public
name|String
name|explainDataFormatJson
parameter_list|(
name|String
name|dataFormatName
parameter_list|,
name|DataFormat
name|dataFormat
parameter_list|,
name|boolean
name|includeAllOptions
parameter_list|)
block|{
try|try
block|{
name|String
name|json
init|=
name|getDataFormatParameterJsonSchema
argument_list|(
name|dataFormatName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
comment|// the model may be shared for multiple data formats such as bindy, json (xstream, jackson, gson)
if|if
condition|(
name|dataFormatName
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|dataFormatName
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|dataFormatName
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|json
operator|=
name|getDataFormatParameterJsonSchema
argument_list|(
name|dataFormatName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// selected rows to use for answer
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|selected
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|dataFormatOptions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// extract options from the data format
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|dataFormat
argument_list|,
name|options
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
name|URISupport
operator|.
name|sanitizePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// find type and description from the json schema
name|String
name|type
init|=
literal|null
decl_stmt|;
name|String
name|kind
init|=
literal|null
decl_stmt|;
name|String
name|label
init|=
literal|null
decl_stmt|;
name|String
name|required
init|=
literal|null
decl_stmt|;
name|String
name|javaType
init|=
literal|null
decl_stmt|;
name|String
name|deprecated
init|=
literal|null
decl_stmt|;
name|String
name|secret
init|=
literal|null
decl_stmt|;
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|kind
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
expr_stmt|;
name|label
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
name|required
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
expr_stmt|;
name|javaType
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
expr_stmt|;
name|deprecated
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
expr_stmt|;
name|secret
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|defaultValue
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
expr_stmt|;
name|description
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// remember this option from the uri
name|dataFormatOptions
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|kind
block|,
name|label
block|,
name|required
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|secret
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
expr_stmt|;
block|}
comment|// include other rows
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|name
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|kind
init|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
name|required
init|=
name|row
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
name|String
name|deprecated
init|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
decl_stmt|;
name|String
name|secret
init|=
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
decl_stmt|;
name|value
operator|=
name|URISupport
operator|.
name|sanitizePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|String
name|description
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
name|boolean
name|isDataFormatOption
init|=
name|dataFormatOptions
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// always include from uri or path options
if|if
condition|(
name|includeAllOptions
operator|||
name|isDataFormatOption
condition|)
block|{
if|if
condition|(
operator|!
name|selected
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// add as selected row, but take the value from uri options if it was from there
if|if
condition|(
name|isDataFormatOption
condition|)
block|{
name|selected
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|dataFormatOptions
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selected
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|kind
block|,
name|label
block|,
name|required
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|secret
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|json
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|json
argument_list|,
literal|"  \"properties\": {"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"  \"properties\": {"
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
index|[]
name|row
range|:
name|selected
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|row
index|[
literal|0
index|]
decl_stmt|;
name|String
name|kind
init|=
name|row
index|[
literal|1
index|]
decl_stmt|;
name|String
name|label
init|=
name|row
index|[
literal|2
index|]
decl_stmt|;
name|String
name|required
init|=
name|row
index|[
literal|3
index|]
decl_stmt|;
name|String
name|type
init|=
name|row
index|[
literal|4
index|]
decl_stmt|;
name|String
name|javaType
init|=
name|row
index|[
literal|5
index|]
decl_stmt|;
name|String
name|deprecated
init|=
name|row
index|[
literal|6
index|]
decl_stmt|;
name|String
name|secret
init|=
name|row
index|[
literal|7
index|]
decl_stmt|;
name|String
name|value
init|=
name|row
index|[
literal|8
index|]
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
index|[
literal|9
index|]
decl_stmt|;
name|String
name|description
init|=
name|row
index|[
literal|10
index|]
decl_stmt|;
comment|// add json of the option
name|buffer
operator|.
name|append
argument_list|(
name|StringQuoteHelper
operator|.
name|doubleQuote
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": { "
argument_list|)
expr_stmt|;
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"kind\": \""
operator|+
name|kind
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"label\": \""
operator|+
name|label
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"required\": \""
operator|+
name|required
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"type\": \""
operator|+
name|type
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"javaType\": \""
operator|+
name|javaType
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deprecated
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"deprecated\": \""
operator|+
name|deprecated
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secret
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"secret\": \""
operator|+
name|secret
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"value\": \""
operator|+
name|value
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"defaultValue\": \""
operator|+
name|defaultValue
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"description\": \""
operator|+
name|description
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|csb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|csb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }\n}\n"
argument_list|)
expr_stmt|;
comment|// insert the original first part of the json into the start of the buffer
name|buffer
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and return empty response
return|return
literal|null
return|;
block|}
block|}
DECL|method|explainComponentJson (String componentName, boolean includeAllOptions)
specifier|public
name|String
name|explainComponentJson
parameter_list|(
name|String
name|componentName
parameter_list|,
name|boolean
name|includeAllOptions
parameter_list|)
block|{
try|try
block|{
name|String
name|json
init|=
name|getComponentParameterJsonSchema
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// selected rows to use for answer
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|selected
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// insert values from component
name|Component
name|component
init|=
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|component
argument_list|,
name|options
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// skip unwanted options which is default inherited from DefaultComponent
if|if
condition|(
literal|"camelContext"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"endpointClass"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|value
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
name|URISupport
operator|.
name|sanitizePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// find type and description from the json schema
name|String
name|type
init|=
literal|null
decl_stmt|;
name|String
name|kind
init|=
literal|null
decl_stmt|;
name|String
name|group
init|=
literal|null
decl_stmt|;
name|String
name|label
init|=
literal|null
decl_stmt|;
name|String
name|required
init|=
literal|null
decl_stmt|;
name|String
name|javaType
init|=
literal|null
decl_stmt|;
name|String
name|deprecated
init|=
literal|null
decl_stmt|;
name|String
name|secret
init|=
literal|null
decl_stmt|;
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|kind
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
expr_stmt|;
name|group
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|label
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
name|required
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
expr_stmt|;
name|javaType
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
expr_stmt|;
name|deprecated
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
expr_stmt|;
name|secret
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|defaultValue
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
expr_stmt|;
name|description
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// add as selected row
name|selected
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|kind
block|,
name|group
block|,
name|label
block|,
name|required
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|secret
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
expr_stmt|;
block|}
comment|// include other rows
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|name
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|kind
init|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
decl_stmt|;
name|String
name|group
init|=
name|row
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
name|required
init|=
name|row
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
name|String
name|deprecated
init|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
decl_stmt|;
name|String
name|secret
init|=
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
decl_stmt|;
name|value
operator|=
name|URISupport
operator|.
name|sanitizePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|String
name|description
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
comment|// always include path options
if|if
condition|(
name|includeAllOptions
condition|)
block|{
comment|// add as selected row
if|if
condition|(
operator|!
name|selected
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|selected
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|kind
block|,
name|group
block|,
name|label
block|,
name|required
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|secret
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|json
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|json
argument_list|,
literal|"  \"componentProperties\": {"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"  \"componentProperties\": {"
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
index|[]
name|row
range|:
name|selected
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|row
index|[
literal|0
index|]
decl_stmt|;
name|String
name|kind
init|=
name|row
index|[
literal|1
index|]
decl_stmt|;
name|String
name|group
init|=
name|row
index|[
literal|2
index|]
decl_stmt|;
name|String
name|label
init|=
name|row
index|[
literal|3
index|]
decl_stmt|;
name|String
name|required
init|=
name|row
index|[
literal|4
index|]
decl_stmt|;
name|String
name|type
init|=
name|row
index|[
literal|5
index|]
decl_stmt|;
name|String
name|javaType
init|=
name|row
index|[
literal|6
index|]
decl_stmt|;
name|String
name|deprecated
init|=
name|row
index|[
literal|7
index|]
decl_stmt|;
name|String
name|secret
init|=
name|row
index|[
literal|8
index|]
decl_stmt|;
name|String
name|value
init|=
name|row
index|[
literal|9
index|]
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
index|[
literal|10
index|]
decl_stmt|;
name|String
name|description
init|=
name|row
index|[
literal|11
index|]
decl_stmt|;
comment|// add json of the option
name|buffer
operator|.
name|append
argument_list|(
name|StringQuoteHelper
operator|.
name|doubleQuote
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": { "
argument_list|)
expr_stmt|;
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"kind\": \""
operator|+
name|kind
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"group\": \""
operator|+
name|group
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"label\": \""
operator|+
name|label
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"required\": \""
operator|+
name|required
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"type\": \""
operator|+
name|type
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"javaType\": \""
operator|+
name|javaType
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deprecated
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"deprecated\": \""
operator|+
name|deprecated
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secret
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"secret\": \""
operator|+
name|secret
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"value\": \""
operator|+
name|value
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"defaultValue\": \""
operator|+
name|defaultValue
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"description\": \""
operator|+
name|description
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|csb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|csb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }\n}\n"
argument_list|)
expr_stmt|;
comment|// insert the original first part of the json into the start of the buffer
name|buffer
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and return empty response
return|return
literal|null
return|;
block|}
block|}
comment|// CHECKSTYLE:OFF
DECL|method|explainEndpointJson (String uri, boolean includeAllOptions)
specifier|public
name|String
name|explainEndpointJson
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|includeAllOptions
parameter_list|)
block|{
try|try
block|{
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|getComponentParameterJsonSchema
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JsonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"properties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// selected rows to use for answer
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|selected
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|uriOptions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// insert values from uri
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|getExtension
argument_list|(
name|RuntimeCamelCatalog
operator|.
name|class
argument_list|)
operator|.
name|endpointProperties
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
comment|// extract consumer. prefix options
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumerOptions
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"consumer."
argument_list|)
decl_stmt|;
comment|// and add back again without the consumer. prefix as that json schema omits that
name|options
operator|.
name|putAll
argument_list|(
name|consumerOptions
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|value
operator|=
name|URISupport
operator|.
name|sanitizePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// find type and description from the json schema
name|String
name|type
init|=
literal|null
decl_stmt|;
name|String
name|kind
init|=
literal|null
decl_stmt|;
name|String
name|group
init|=
literal|null
decl_stmt|;
name|String
name|label
init|=
literal|null
decl_stmt|;
name|String
name|required
init|=
literal|null
decl_stmt|;
name|String
name|javaType
init|=
literal|null
decl_stmt|;
name|String
name|deprecated
init|=
literal|null
decl_stmt|;
name|String
name|secret
init|=
literal|null
decl_stmt|;
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|kind
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
expr_stmt|;
name|group
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|label
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
name|required
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
expr_stmt|;
name|javaType
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
expr_stmt|;
name|deprecated
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
expr_stmt|;
name|secret
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|defaultValue
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
expr_stmt|;
name|description
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// remember this option from the uri
name|uriOptions
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|kind
block|,
name|group
block|,
name|label
block|,
name|required
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|secret
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
expr_stmt|;
block|}
comment|// include other rows
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
range|:
name|rows
control|)
block|{
name|String
name|name
init|=
name|row
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|kind
init|=
name|row
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
decl_stmt|;
name|String
name|group
init|=
name|row
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|row
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|String
name|required
init|=
name|row
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
decl_stmt|;
name|String
name|deprecated
init|=
name|row
operator|.
name|get
argument_list|(
literal|"deprecated"
argument_list|)
decl_stmt|;
name|String
name|secret
init|=
name|row
operator|.
name|get
argument_list|(
literal|"secret"
argument_list|)
decl_stmt|;
name|value
operator|=
name|URISupport
operator|.
name|sanitizePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|String
name|description
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
name|boolean
name|isUriOption
init|=
name|uriOptions
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// always include from uri or path options
if|if
condition|(
name|includeAllOptions
operator|||
name|isUriOption
operator|||
literal|"path"
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|selected
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// add as selected row, but take the value from uri options if it was from there
if|if
condition|(
name|isUriOption
condition|)
block|{
name|selected
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|uriOptions
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selected
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|kind
block|,
name|group
block|,
name|label
block|,
name|required
block|,
name|type
block|,
name|javaType
block|,
name|deprecated
block|,
name|secret
block|,
name|value
block|,
name|defaultValue
block|,
name|description
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// skip component properties
name|json
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|json
argument_list|,
literal|"  \"componentProperties\": {"
argument_list|)
expr_stmt|;
comment|// and rewrite properties
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"  \"properties\": {"
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
index|[]
name|row
range|:
name|selected
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|row
index|[
literal|0
index|]
decl_stmt|;
name|String
name|kind
init|=
name|row
index|[
literal|1
index|]
decl_stmt|;
name|String
name|group
init|=
name|row
index|[
literal|2
index|]
decl_stmt|;
name|String
name|label
init|=
name|row
index|[
literal|3
index|]
decl_stmt|;
name|String
name|required
init|=
name|row
index|[
literal|4
index|]
decl_stmt|;
name|String
name|type
init|=
name|row
index|[
literal|5
index|]
decl_stmt|;
name|String
name|javaType
init|=
name|row
index|[
literal|6
index|]
decl_stmt|;
name|String
name|deprecated
init|=
name|row
index|[
literal|7
index|]
decl_stmt|;
name|String
name|secret
init|=
name|row
index|[
literal|8
index|]
decl_stmt|;
name|String
name|value
init|=
name|row
index|[
literal|9
index|]
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
index|[
literal|10
index|]
decl_stmt|;
name|String
name|description
init|=
name|row
index|[
literal|11
index|]
decl_stmt|;
comment|// add json of the option
name|buffer
operator|.
name|append
argument_list|(
name|StringQuoteHelper
operator|.
name|doubleQuote
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|": { "
argument_list|)
expr_stmt|;
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"kind\": \""
operator|+
name|kind
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"group\": \""
operator|+
name|group
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"label\": \""
operator|+
name|label
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"required\": \""
operator|+
name|required
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"type\": \""
operator|+
name|type
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"javaType\": \""
operator|+
name|javaType
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deprecated
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"deprecated\": \""
operator|+
name|deprecated
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secret
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"secret\": \""
operator|+
name|secret
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"value\": \""
operator|+
name|value
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"defaultValue\": \""
operator|+
name|defaultValue
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"\"description\": \""
operator|+
name|description
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|csb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|csb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }\n}\n"
argument_list|)
expr_stmt|;
comment|// insert the original first part of the json into the start of the buffer
name|buffer
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|json
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and return empty response
return|return
literal|null
return|;
block|}
block|}
comment|// CHECKSTYLE:ON
DECL|method|createRouteStaticEndpointJson (String routeId)
specifier|public
name|String
name|createRouteStaticEndpointJson
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
comment|// lets include dynamic as well as we want as much data as possible
return|return
name|createRouteStaticEndpointJson
argument_list|(
name|routeId
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createRouteStaticEndpointJson (String routeId, boolean includeDynamic)
specifier|public
name|String
name|createRouteStaticEndpointJson
parameter_list|(
name|String
name|routeId
parameter_list|,
name|boolean
name|includeDynamic
parameter_list|)
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
condition|)
block|{
name|RouteDefinition
name|route
init|=
name|getRouteDefinition
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Route with id "
operator|+
name|routeId
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|routes
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|routes
operator|.
name|addAll
argument_list|(
name|getRouteDefinitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{\n  \"routes\": {"
argument_list|)
decl_stmt|;
name|boolean
name|firstRoute
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routes
control|)
block|{
if|if
condition|(
operator|!
name|firstRoute
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    },"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstRoute
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|id
init|=
name|route
operator|.
name|getId
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    \""
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|"\": {"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n      \"inputs\": ["
argument_list|)
expr_stmt|;
comment|// for inputs we do not need to check dynamic as we have the data from the route definition
name|Set
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|RouteDefinitionHelper
operator|.
name|gatherAllStaticEndpointUris
argument_list|(
name|this
argument_list|,
name|route
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n        "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|StringHelper
operator|.
name|toJson
argument_list|(
literal|"uri"
argument_list|,
name|input
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n      ]"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n      \"outputs\": ["
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|outputs
init|=
name|RouteDefinitionHelper
operator|.
name|gatherAllEndpointUris
argument_list|(
name|this
argument_list|,
name|route
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|includeDynamic
argument_list|)
decl_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|output
range|:
name|outputs
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n        "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|StringHelper
operator|.
name|toJson
argument_list|(
literal|"uri"
argument_list|,
name|output
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n      ]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|firstRoute
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\n    }"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n  }\n}\n"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Helper methods
comment|// -----------------------------------------------------------------------
DECL|method|resolveLanguage (String language)
specifier|public
name|Language
name|resolveLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|Language
name|answer
decl_stmt|;
synchronized|synchronized
init|(
name|languages
init|)
block|{
name|answer
operator|=
name|languages
operator|.
name|get
argument_list|(
name|language
argument_list|)
expr_stmt|;
comment|// check if the language is singleton, if so return the shared instance
if|if
condition|(
name|answer
operator|instanceof
name|IsSingleton
condition|)
block|{
name|boolean
name|singleton
init|=
operator|(
operator|(
name|IsSingleton
operator|)
name|answer
operator|)
operator|.
name|isSingleton
argument_list|()
decl_stmt|;
if|if
condition|(
name|singleton
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
comment|// language not known or not singleton, then use resolver
name|answer
operator|=
name|getLanguageResolver
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
name|language
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// inject CamelContext if aware
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|answer
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|answer
operator|)
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|instanceof
name|Service
condition|)
block|{
try|try
block|{
name|startService
argument_list|(
operator|(
name|Service
operator|)
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|languages
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getPropertyPrefixToken ()
specifier|public
name|String
name|getPropertyPrefixToken
parameter_list|()
block|{
name|PropertiesComponent
name|pc
init|=
name|getPropertiesComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
return|return
name|pc
operator|.
name|getPrefixToken
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getPropertySuffixToken ()
specifier|public
name|String
name|getPropertySuffixToken
parameter_list|()
block|{
name|PropertiesComponent
name|pc
init|=
name|getPropertiesComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
return|return
name|pc
operator|.
name|getSuffixToken
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|resolvePropertyPlaceholders (String text)
specifier|public
name|String
name|resolvePropertyPlaceholders
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
comment|// While it is more efficient to only do the lookup if we are sure we need the component,
comment|// with custom tokens, we cannot know if the URI contains a property or not without having
comment|// the component.  We also lose fail-fast behavior for the missing component with this change.
name|PropertiesComponent
name|pc
init|=
name|getPropertiesComponent
argument_list|()
decl_stmt|;
comment|// Do not parse uris that are designated for the properties component as it will handle that itself
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
operator|!
name|text
operator|.
name|startsWith
argument_list|(
literal|"properties:"
argument_list|)
condition|)
block|{
comment|// No component, assume default tokens.
if|if
condition|(
name|pc
operator|==
literal|null
operator|&&
name|text
operator|.
name|contains
argument_list|(
name|PropertiesComponent
operator|.
name|DEFAULT_PREFIX_TOKEN
argument_list|)
condition|)
block|{
comment|// lookup existing properties component, or force create a new default component
name|pc
operator|=
operator|(
name|PropertiesComponent
operator|)
name|CamelContextHelper
operator|.
name|lookupPropertiesComponent
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
operator|&&
name|text
operator|.
name|contains
argument_list|(
name|pc
operator|.
name|getPrefixToken
argument_list|()
argument_list|)
condition|)
block|{
comment|// the parser will throw exception if property key was not found
name|String
name|answer
init|=
name|pc
operator|.
name|parseUri
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Resolved text: {} -> {}"
argument_list|,
name|text
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
comment|// return original text as is
return|return
name|text
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getTypeConverter ()
specifier|public
name|TypeConverter
name|getTypeConverter
parameter_list|()
block|{
if|if
condition|(
name|typeConverter
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// we can synchronize on this as there is only one instance
comment|// of the camel context (its the container)
name|typeConverter
operator|=
name|createTypeConverter
argument_list|()
expr_stmt|;
try|try
block|{
comment|// must add service eager and force start it
name|addService
argument_list|(
name|typeConverter
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|typeConverter
return|;
block|}
DECL|method|setTypeConverter (TypeConverter typeConverter)
specifier|public
name|void
name|setTypeConverter
parameter_list|(
name|TypeConverter
name|typeConverter
parameter_list|)
block|{
name|this
operator|.
name|typeConverter
operator|=
name|typeConverter
expr_stmt|;
try|try
block|{
comment|// must add service eager and force start it
name|addService
argument_list|(
name|typeConverter
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getTypeConverterRegistry ()
specifier|public
name|TypeConverterRegistry
name|getTypeConverterRegistry
parameter_list|()
block|{
if|if
condition|(
name|typeConverterRegistry
operator|==
literal|null
condition|)
block|{
comment|// init type converter as its lazy
if|if
condition|(
name|typeConverter
operator|==
literal|null
condition|)
block|{
name|getTypeConverter
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|typeConverter
operator|instanceof
name|TypeConverterRegistry
condition|)
block|{
name|typeConverterRegistry
operator|=
operator|(
name|TypeConverterRegistry
operator|)
name|typeConverter
expr_stmt|;
block|}
block|}
return|return
name|typeConverterRegistry
return|;
block|}
DECL|method|setTypeConverterRegistry (TypeConverterRegistry typeConverterRegistry)
specifier|public
name|void
name|setTypeConverterRegistry
parameter_list|(
name|TypeConverterRegistry
name|typeConverterRegistry
parameter_list|)
block|{
name|this
operator|.
name|typeConverterRegistry
operator|=
name|typeConverterRegistry
expr_stmt|;
block|}
DECL|method|getInjector ()
specifier|public
name|Injector
name|getInjector
parameter_list|()
block|{
if|if
condition|(
name|injector
operator|==
literal|null
condition|)
block|{
name|injector
operator|=
name|createInjector
argument_list|()
expr_stmt|;
block|}
return|return
name|injector
return|;
block|}
DECL|method|setInjector (Injector injector)
specifier|public
name|void
name|setInjector
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
block|}
DECL|method|getManagementMBeanAssembler ()
specifier|public
name|ManagementMBeanAssembler
name|getManagementMBeanAssembler
parameter_list|()
block|{
return|return
name|managementMBeanAssembler
return|;
block|}
DECL|method|setManagementMBeanAssembler (ManagementMBeanAssembler managementMBeanAssembler)
specifier|public
name|void
name|setManagementMBeanAssembler
parameter_list|(
name|ManagementMBeanAssembler
name|managementMBeanAssembler
parameter_list|)
block|{
name|this
operator|.
name|managementMBeanAssembler
operator|=
name|managementMBeanAssembler
expr_stmt|;
block|}
DECL|method|getComponentResolver ()
specifier|public
name|ComponentResolver
name|getComponentResolver
parameter_list|()
block|{
if|if
condition|(
name|componentResolver
operator|==
literal|null
condition|)
block|{
name|componentResolver
operator|=
name|createComponentResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|componentResolver
return|;
block|}
DECL|method|setComponentResolver (ComponentResolver componentResolver)
specifier|public
name|void
name|setComponentResolver
parameter_list|(
name|ComponentResolver
name|componentResolver
parameter_list|)
block|{
name|this
operator|.
name|componentResolver
operator|=
name|componentResolver
expr_stmt|;
block|}
DECL|method|getLanguageResolver ()
specifier|public
name|LanguageResolver
name|getLanguageResolver
parameter_list|()
block|{
if|if
condition|(
name|languageResolver
operator|==
literal|null
condition|)
block|{
name|languageResolver
operator|=
name|createLanguageResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|languageResolver
return|;
block|}
DECL|method|setLanguageResolver (LanguageResolver languageResolver)
specifier|public
name|void
name|setLanguageResolver
parameter_list|(
name|LanguageResolver
name|languageResolver
parameter_list|)
block|{
name|this
operator|.
name|languageResolver
operator|=
name|languageResolver
expr_stmt|;
block|}
DECL|method|isAutoCreateComponents ()
specifier|public
name|boolean
name|isAutoCreateComponents
parameter_list|()
block|{
return|return
name|autoCreateComponents
return|;
block|}
DECL|method|setAutoCreateComponents (boolean autoCreateComponents)
specifier|public
name|void
name|setAutoCreateComponents
parameter_list|(
name|boolean
name|autoCreateComponents
parameter_list|)
block|{
name|this
operator|.
name|autoCreateComponents
operator|=
name|autoCreateComponents
expr_stmt|;
block|}
DECL|method|getRegistry ()
specifier|public
name|Registry
name|getRegistry
parameter_list|()
block|{
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
block|{
name|registry
operator|=
name|createRegistry
argument_list|()
expr_stmt|;
name|setRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
return|return
name|registry
return|;
block|}
DECL|method|getRegistry (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getRegistry
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Registry
name|reg
init|=
name|getRegistry
argument_list|()
decl_stmt|;
comment|// unwrap the property placeholder delegate
if|if
condition|(
name|reg
operator|instanceof
name|PropertyPlaceholderDelegateRegistry
condition|)
block|{
name|reg
operator|=
operator|(
operator|(
name|PropertyPlaceholderDelegateRegistry
operator|)
name|reg
operator|)
operator|.
name|getRegistry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|reg
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|reg
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|reg
operator|instanceof
name|CompositeRegistry
condition|)
block|{
name|List
argument_list|<
name|Registry
argument_list|>
name|list
init|=
operator|(
operator|(
name|CompositeRegistry
operator|)
name|reg
operator|)
operator|.
name|getRegistryList
argument_list|()
decl_stmt|;
for|for
control|(
name|Registry
name|r
range|:
name|list
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|r
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the registry to the given JNDI context      *      * @param jndiContext is the JNDI context to use as the registry      * @see #setRegistry(org.apache.camel.spi.Registry)      */
DECL|method|setJndiContext (Context jndiContext)
specifier|public
name|void
name|setJndiContext
parameter_list|(
name|Context
name|jndiContext
parameter_list|)
block|{
name|setRegistry
argument_list|(
operator|new
name|JndiRegistry
argument_list|(
name|jndiContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setRegistry (Registry registry)
specifier|public
name|void
name|setRegistry
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
comment|// wrap the registry so we always do property placeholder lookups
if|if
condition|(
operator|!
operator|(
name|registry
operator|instanceof
name|PropertyPlaceholderDelegateRegistry
operator|)
condition|)
block|{
name|registry
operator|=
operator|new
name|PropertyPlaceholderDelegateRegistry
argument_list|(
name|this
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
DECL|method|getLifecycleStrategies ()
specifier|public
name|List
argument_list|<
name|LifecycleStrategy
argument_list|>
name|getLifecycleStrategies
parameter_list|()
block|{
return|return
name|lifecycleStrategies
return|;
block|}
DECL|method|setLifecycleStrategies (List<LifecycleStrategy> lifecycleStrategies)
specifier|public
name|void
name|setLifecycleStrategies
parameter_list|(
name|List
argument_list|<
name|LifecycleStrategy
argument_list|>
name|lifecycleStrategies
parameter_list|)
block|{
name|this
operator|.
name|lifecycleStrategies
operator|=
name|lifecycleStrategies
expr_stmt|;
block|}
DECL|method|addLifecycleStrategy (LifecycleStrategy lifecycleStrategy)
specifier|public
name|void
name|addLifecycleStrategy
parameter_list|(
name|LifecycleStrategy
name|lifecycleStrategy
parameter_list|)
block|{
name|this
operator|.
name|lifecycleStrategies
operator|.
name|add
argument_list|(
name|lifecycleStrategy
argument_list|)
expr_stmt|;
block|}
DECL|method|setupRoutes (boolean done)
specifier|public
name|void
name|setupRoutes
parameter_list|(
name|boolean
name|done
parameter_list|)
block|{
if|if
condition|(
name|done
condition|)
block|{
name|isSetupRoutes
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|isSetupRoutes
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRouteDefinitions ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRouteDefinitions
parameter_list|()
block|{
return|return
name|routeDefinitions
return|;
block|}
DECL|method|getRouteDefinition (String id)
specifier|public
specifier|synchronized
name|RouteDefinition
name|getRouteDefinition
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routeDefinitions
control|)
block|{
if|if
condition|(
name|route
operator|.
name|idOrCreate
argument_list|(
name|nodeIdFactory
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|route
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRestDefinitions ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|getRestDefinitions
parameter_list|()
block|{
return|return
name|restDefinitions
return|;
block|}
DECL|method|addRestDefinitions (Collection<RestDefinition> restDefinitions)
specifier|public
name|void
name|addRestDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RestDefinition
argument_list|>
name|restDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|restDefinitions
operator|==
literal|null
operator|||
name|restDefinitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|restDefinitions
operator|.
name|addAll
argument_list|(
name|restDefinitions
argument_list|)
expr_stmt|;
block|}
DECL|method|getRestConfiguration ()
specifier|public
name|RestConfiguration
name|getRestConfiguration
parameter_list|()
block|{
return|return
name|restConfigurations
operator|.
name|get
argument_list|(
literal|""
argument_list|)
return|;
block|}
DECL|method|setRestConfiguration (RestConfiguration restConfiguration)
specifier|public
name|void
name|setRestConfiguration
parameter_list|(
name|RestConfiguration
name|restConfiguration
parameter_list|)
block|{
name|restConfigurations
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|restConfiguration
argument_list|)
expr_stmt|;
block|}
DECL|method|getRestConfigurations ()
specifier|public
name|Collection
argument_list|<
name|RestConfiguration
argument_list|>
name|getRestConfigurations
parameter_list|()
block|{
return|return
name|restConfigurations
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|addRestConfiguration (RestConfiguration restConfiguration)
specifier|public
name|void
name|addRestConfiguration
parameter_list|(
name|RestConfiguration
name|restConfiguration
parameter_list|)
block|{
name|restConfigurations
operator|.
name|put
argument_list|(
name|restConfiguration
operator|.
name|getComponent
argument_list|()
argument_list|,
name|restConfiguration
argument_list|)
expr_stmt|;
block|}
DECL|method|getRestConfiguration (String component, boolean defaultIfNotExist)
specifier|public
name|RestConfiguration
name|getRestConfiguration
parameter_list|(
name|String
name|component
parameter_list|,
name|boolean
name|defaultIfNotExist
parameter_list|)
block|{
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|component
operator|=
literal|""
expr_stmt|;
block|}
name|RestConfiguration
name|config
init|=
name|restConfigurations
operator|.
name|get
argument_list|(
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
operator|&&
name|defaultIfNotExist
condition|)
block|{
comment|// grab the default configuration
name|config
operator|=
name|getRestConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
operator|||
operator|(
name|config
operator|.
name|getComponent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getComponent
argument_list|()
operator|.
name|equals
argument_list|(
name|component
argument_list|)
operator|)
condition|)
block|{
name|config
operator|=
operator|new
name|RestConfiguration
argument_list|()
expr_stmt|;
name|restConfigurations
operator|.
name|put
argument_list|(
name|component
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|config
return|;
block|}
annotation|@
name|Override
DECL|method|getServiceCallConfiguration (String serviceName)
specifier|public
name|ServiceCallConfigurationDefinition
name|getServiceCallConfiguration
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
block|{
name|serviceName
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|serviceCallConfigurations
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setServiceCallConfiguration (ServiceCallConfigurationDefinition configuration)
specifier|public
name|void
name|setServiceCallConfiguration
parameter_list|(
name|ServiceCallConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|serviceCallConfigurations
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setServiceCallConfigurations (List<ServiceCallConfigurationDefinition> configurations)
specifier|public
name|void
name|setServiceCallConfigurations
parameter_list|(
name|List
argument_list|<
name|ServiceCallConfigurationDefinition
argument_list|>
name|configurations
parameter_list|)
block|{
if|if
condition|(
name|configurations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceCallConfigurationDefinition
name|configuration
range|:
name|configurations
control|)
block|{
name|serviceCallConfigurations
operator|.
name|put
argument_list|(
name|configuration
operator|.
name|getId
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|addServiceCallConfiguration (String serviceName, ServiceCallConfigurationDefinition configuration)
specifier|public
name|void
name|addServiceCallConfiguration
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|ServiceCallConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|serviceCallConfigurations
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHystrixConfiguration (String id)
specifier|public
name|HystrixConfigurationDefinition
name|getHystrixConfiguration
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|hystrixConfigurations
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setHystrixConfiguration (HystrixConfigurationDefinition configuration)
specifier|public
name|void
name|setHystrixConfiguration
parameter_list|(
name|HystrixConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|hystrixConfigurations
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setHystrixConfigurations (List<HystrixConfigurationDefinition> configurations)
specifier|public
name|void
name|setHystrixConfigurations
parameter_list|(
name|List
argument_list|<
name|HystrixConfigurationDefinition
argument_list|>
name|configurations
parameter_list|)
block|{
if|if
condition|(
name|configurations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HystrixConfigurationDefinition
name|configuration
range|:
name|configurations
control|)
block|{
name|hystrixConfigurations
operator|.
name|put
argument_list|(
name|configuration
operator|.
name|getId
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|addHystrixConfiguration (String id, HystrixConfigurationDefinition configuration)
specifier|public
name|void
name|addHystrixConfiguration
parameter_list|(
name|String
name|id
parameter_list|,
name|HystrixConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|hystrixConfigurations
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|getInterceptStrategies ()
specifier|public
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|getInterceptStrategies
parameter_list|()
block|{
return|return
name|interceptStrategies
return|;
block|}
DECL|method|setInterceptStrategies (List<InterceptStrategy> interceptStrategies)
specifier|public
name|void
name|setInterceptStrategies
parameter_list|(
name|List
argument_list|<
name|InterceptStrategy
argument_list|>
name|interceptStrategies
parameter_list|)
block|{
name|this
operator|.
name|interceptStrategies
operator|=
name|interceptStrategies
expr_stmt|;
block|}
DECL|method|addInterceptStrategy (InterceptStrategy interceptStrategy)
specifier|public
name|void
name|addInterceptStrategy
parameter_list|(
name|InterceptStrategy
name|interceptStrategy
parameter_list|)
block|{
name|getInterceptStrategies
argument_list|()
operator|.
name|add
argument_list|(
name|interceptStrategy
argument_list|)
expr_stmt|;
comment|// for backwards compatible or if user add them here instead of the setXXX methods
if|if
condition|(
name|interceptStrategy
operator|instanceof
name|HandleFault
condition|)
block|{
name|setHandleFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRoutePolicyFactories ()
specifier|public
name|List
argument_list|<
name|RoutePolicyFactory
argument_list|>
name|getRoutePolicyFactories
parameter_list|()
block|{
return|return
name|routePolicyFactories
return|;
block|}
DECL|method|setRoutePolicyFactories (List<RoutePolicyFactory> routePolicyFactories)
specifier|public
name|void
name|setRoutePolicyFactories
parameter_list|(
name|List
argument_list|<
name|RoutePolicyFactory
argument_list|>
name|routePolicyFactories
parameter_list|)
block|{
name|this
operator|.
name|routePolicyFactories
operator|=
name|routePolicyFactories
expr_stmt|;
block|}
DECL|method|addRoutePolicyFactory (RoutePolicyFactory routePolicyFactory)
specifier|public
name|void
name|addRoutePolicyFactory
parameter_list|(
name|RoutePolicyFactory
name|routePolicyFactory
parameter_list|)
block|{
name|getRoutePolicyFactories
argument_list|()
operator|.
name|add
argument_list|(
name|routePolicyFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogListeners ()
specifier|public
name|Set
argument_list|<
name|LogListener
argument_list|>
name|getLogListeners
parameter_list|()
block|{
return|return
name|logListeners
return|;
block|}
DECL|method|addLogListener (LogListener listener)
specifier|public
name|void
name|addLogListener
parameter_list|(
name|LogListener
name|listener
parameter_list|)
block|{
name|logListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|setStreamCaching (Boolean cache)
specifier|public
name|void
name|setStreamCaching
parameter_list|(
name|Boolean
name|cache
parameter_list|)
block|{
name|this
operator|.
name|streamCache
operator|=
name|cache
expr_stmt|;
block|}
DECL|method|isStreamCaching ()
specifier|public
name|Boolean
name|isStreamCaching
parameter_list|()
block|{
return|return
name|streamCache
return|;
block|}
DECL|method|setTracing (Boolean tracing)
specifier|public
name|void
name|setTracing
parameter_list|(
name|Boolean
name|tracing
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|tracing
expr_stmt|;
block|}
DECL|method|isTracing ()
specifier|public
name|Boolean
name|isTracing
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
DECL|method|isMessageHistory ()
specifier|public
name|Boolean
name|isMessageHistory
parameter_list|()
block|{
return|return
name|messageHistory
return|;
block|}
DECL|method|setMessageHistory (Boolean messageHistory)
specifier|public
name|void
name|setMessageHistory
parameter_list|(
name|Boolean
name|messageHistory
parameter_list|)
block|{
name|this
operator|.
name|messageHistory
operator|=
name|messageHistory
expr_stmt|;
block|}
DECL|method|setLogMask (Boolean logMask)
specifier|public
name|void
name|setLogMask
parameter_list|(
name|Boolean
name|logMask
parameter_list|)
block|{
name|this
operator|.
name|logMask
operator|=
name|logMask
expr_stmt|;
block|}
DECL|method|isLogMask ()
specifier|public
name|Boolean
name|isLogMask
parameter_list|()
block|{
return|return
name|logMask
operator|!=
literal|null
operator|&&
name|logMask
return|;
block|}
DECL|method|isLogExhaustedMessageBody ()
specifier|public
name|Boolean
name|isLogExhaustedMessageBody
parameter_list|()
block|{
return|return
name|logExhaustedMessageBody
return|;
block|}
DECL|method|setLogExhaustedMessageBody (Boolean logExhaustedMessageBody)
specifier|public
name|void
name|setLogExhaustedMessageBody
parameter_list|(
name|Boolean
name|logExhaustedMessageBody
parameter_list|)
block|{
name|this
operator|.
name|logExhaustedMessageBody
operator|=
name|logExhaustedMessageBody
expr_stmt|;
block|}
DECL|method|isHandleFault ()
specifier|public
name|Boolean
name|isHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
DECL|method|setHandleFault (Boolean handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|Boolean
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
DECL|method|getDelayer ()
specifier|public
name|Long
name|getDelayer
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
DECL|method|setDelayer (Long delay)
specifier|public
name|void
name|setDelayer
parameter_list|(
name|Long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|createProducerTemplate ()
specifier|public
name|ProducerTemplate
name|createProducerTemplate
parameter_list|()
block|{
return|return
name|createProducerTemplate
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|createProducerTemplate (int maximumCacheSize)
specifier|public
name|ProducerTemplate
name|createProducerTemplate
parameter_list|(
name|int
name|maximumCacheSize
parameter_list|)
block|{
name|DefaultProducerTemplate
name|answer
init|=
operator|new
name|DefaultProducerTemplate
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setMaximumCacheSize
argument_list|(
name|maximumCacheSize
argument_list|)
expr_stmt|;
comment|// start it so its ready to use
try|try
block|{
name|startService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createFluentProducerTemplate ()
specifier|public
name|FluentProducerTemplate
name|createFluentProducerTemplate
parameter_list|()
block|{
return|return
name|createFluentProducerTemplate
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|createFluentProducerTemplate (int maximumCacheSize)
specifier|public
name|FluentProducerTemplate
name|createFluentProducerTemplate
parameter_list|(
name|int
name|maximumCacheSize
parameter_list|)
block|{
name|DefaultFluentProducerTemplate
name|answer
init|=
operator|new
name|DefaultFluentProducerTemplate
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setMaximumCacheSize
argument_list|(
name|maximumCacheSize
argument_list|)
expr_stmt|;
comment|// start it so its ready to use
try|try
block|{
name|startService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createConsumerTemplate ()
specifier|public
name|ConsumerTemplate
name|createConsumerTemplate
parameter_list|()
block|{
return|return
name|createConsumerTemplate
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|createConsumerTemplate (int maximumCacheSize)
specifier|public
name|ConsumerTemplate
name|createConsumerTemplate
parameter_list|(
name|int
name|maximumCacheSize
parameter_list|)
block|{
name|DefaultConsumerTemplate
name|answer
init|=
operator|new
name|DefaultConsumerTemplate
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setMaximumCacheSize
argument_list|(
name|maximumCacheSize
argument_list|)
expr_stmt|;
comment|// start it so its ready to use
try|try
block|{
name|startService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getErrorHandlerFactory ()
specifier|public
name|ErrorHandlerBuilder
name|getErrorHandlerFactory
parameter_list|()
block|{
return|return
operator|(
name|ErrorHandlerBuilder
operator|)
name|errorHandlerBuilder
return|;
block|}
DECL|method|setErrorHandlerFactory (ErrorHandlerFactory errorHandlerFactory)
specifier|public
name|void
name|setErrorHandlerFactory
parameter_list|(
name|ErrorHandlerFactory
name|errorHandlerFactory
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerBuilder
operator|=
name|errorHandlerFactory
expr_stmt|;
block|}
DECL|method|getErrorHandlerExecutorService ()
specifier|public
name|ScheduledExecutorService
name|getErrorHandlerExecutorService
parameter_list|()
block|{
synchronized|synchronized
init|(
name|errorHandlerExecutorServiceLock
init|)
block|{
if|if
condition|(
name|errorHandlerExecutorService
operator|==
literal|null
condition|)
block|{
comment|// setup default thread pool for error handler
name|errorHandlerExecutorService
operator|=
name|getExecutorServiceManager
argument_list|()
operator|.
name|newDefaultScheduledThreadPool
argument_list|(
literal|"ErrorHandlerRedeliveryThreadPool"
argument_list|,
literal|"ErrorHandlerRedeliveryTask"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|errorHandlerExecutorService
return|;
block|}
DECL|method|setProducerServicePool (ServicePool<Producer> producerServicePool)
specifier|public
name|void
name|setProducerServicePool
parameter_list|(
name|ServicePool
argument_list|<
name|Producer
argument_list|>
name|producerServicePool
parameter_list|)
block|{
name|this
operator|.
name|producerServicePool
operator|=
name|producerServicePool
expr_stmt|;
block|}
DECL|method|getProducerServicePool ()
specifier|public
name|ServicePool
argument_list|<
name|Producer
argument_list|>
name|getProducerServicePool
parameter_list|()
block|{
return|return
name|producerServicePool
return|;
block|}
DECL|method|getPollingConsumerServicePool ()
specifier|public
name|ServicePool
argument_list|<
name|PollingConsumer
argument_list|>
name|getPollingConsumerServicePool
parameter_list|()
block|{
return|return
name|pollingConsumerServicePool
return|;
block|}
DECL|method|setPollingConsumerServicePool (ServicePool<PollingConsumer> pollingConsumerServicePool)
specifier|public
name|void
name|setPollingConsumerServicePool
parameter_list|(
name|ServicePool
argument_list|<
name|PollingConsumer
argument_list|>
name|pollingConsumerServicePool
parameter_list|)
block|{
name|this
operator|.
name|pollingConsumerServicePool
operator|=
name|pollingConsumerServicePool
expr_stmt|;
block|}
DECL|method|getUnitOfWorkFactory ()
specifier|public
name|UnitOfWorkFactory
name|getUnitOfWorkFactory
parameter_list|()
block|{
return|return
name|unitOfWorkFactory
return|;
block|}
DECL|method|setUnitOfWorkFactory (UnitOfWorkFactory unitOfWorkFactory)
specifier|public
name|void
name|setUnitOfWorkFactory
parameter_list|(
name|UnitOfWorkFactory
name|unitOfWorkFactory
parameter_list|)
block|{
name|this
operator|.
name|unitOfWorkFactory
operator|=
name|unitOfWorkFactory
expr_stmt|;
block|}
DECL|method|getRuntimeEndpointRegistry ()
specifier|public
name|RuntimeEndpointRegistry
name|getRuntimeEndpointRegistry
parameter_list|()
block|{
return|return
name|runtimeEndpointRegistry
return|;
block|}
DECL|method|setRuntimeEndpointRegistry (RuntimeEndpointRegistry runtimeEndpointRegistry)
specifier|public
name|void
name|setRuntimeEndpointRegistry
parameter_list|(
name|RuntimeEndpointRegistry
name|runtimeEndpointRegistry
parameter_list|)
block|{
name|this
operator|.
name|runtimeEndpointRegistry
operator|=
name|runtimeEndpointRegistry
expr_stmt|;
block|}
DECL|method|getUptime ()
specifier|public
name|String
name|getUptime
parameter_list|()
block|{
name|long
name|delta
init|=
name|getUptimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|delta
argument_list|)
return|;
block|}
DECL|method|getUptimeMillis ()
specifier|public
name|long
name|getUptimeMillis
parameter_list|()
block|{
if|if
condition|(
name|startDate
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|startDate
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|version
operator|=
name|doGetVersion
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|version
return|;
block|}
DECL|method|doGetVersion ()
specifier|private
name|String
name|doGetVersion
parameter_list|()
block|{
name|String
name|version
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
comment|// try to load from maven properties first
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|is
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/META-INF/maven/org.apache.camel/camel-core/pom.properties"
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|version
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
comment|// fallback to using Java API
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|Package
name|aPackage
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|aPackage
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|aPackage
operator|.
name|getImplementationVersion
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|version
operator|=
name|aPackage
operator|.
name|getSpecificationVersion
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// we could not compute the version so use a blank
name|version
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
name|EventHelper
operator|.
name|notifyCamelContextSuspending
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) is suspending"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
comment|// update list of started routes to be suspended
comment|// because we only want to suspend started routes
comment|// (so when we resume we only resume the routes which actually was suspended)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|entry
range|:
name|getRouteServices
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|suspendedRouteServices
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assemble list of startup ordering so routes can be shutdown accordingly
name|List
argument_list|<
name|RouteStartupOrder
argument_list|>
name|orders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|entry
range|:
name|suspendedRouteServices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Route
name|route
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|order
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRouteDefinition
argument_list|()
operator|.
name|getStartupOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|order
operator|==
literal|null
condition|)
block|{
name|order
operator|=
name|defaultRouteStartupOrder
operator|++
expr_stmt|;
block|}
name|orders
operator|.
name|add
argument_list|(
operator|new
name|DefaultRouteStartupOrder
argument_list|(
name|order
argument_list|,
name|route
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// suspend routes using the shutdown strategy so it can shutdown in correct order
comment|// routes which doesn't support suspension will be stopped instead
name|getShutdownStrategy
argument_list|()
operator|.
name|suspend
argument_list|(
name|this
argument_list|,
name|orders
argument_list|)
expr_stmt|;
comment|// mark the route services as suspended or stopped
for|for
control|(
name|RouteService
name|service
range|:
name|suspendedRouteServices
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|routeSupportsSuspension
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|service
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
name|watch
operator|.
name|taken
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) is suspended in {}"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|watch
operator|.
name|taken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EventHelper
operator|.
name|notifyCamelContextSuspended
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|EventHelper
operator|.
name|notifyCamelContextResuming
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) is resuming"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
comment|// start the suspended routes (do not check for route clashes, and indicate)
name|doStartOrResumeRoutes
argument_list|(
name|suspendedRouteServices
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// mark the route services as resumed (will be marked as started) as well
for|for
control|(
name|RouteService
name|service
range|:
name|suspendedRouteServices
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|routeSupportsSuspension
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|service
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Resumed {} routes"
argument_list|,
name|suspendedRouteServices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) resumed in {}"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|watch
operator|.
name|taken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// and clear the list as they have been resumed
name|suspendedRouteServices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|EventHelper
operator|.
name|notifyCamelContextResumed
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|EventHelper
operator|.
name|notifyCamelContextResumeFailed
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|MDCHelper
name|mdcHelper
init|=
operator|new
name|MDCHelper
argument_list|()
init|)
block|{
name|init
argument_list|()
expr_stmt|;
name|vetoStated
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|startDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) is starting"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start the route controller
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|this
operator|.
name|routeController
argument_list|)
expr_stmt|;
name|doNotStartRoutesOnFirstStart
operator|=
operator|!
name|firstStartDone
operator|&&
operator|!
name|isAutoStartup
argument_list|()
expr_stmt|;
comment|// if the context was configured with auto startup = false, and we are already started,
comment|// then we may need to start the routes on the 2nd start call
if|if
condition|(
name|firstStartDone
operator|&&
operator|!
name|isAutoStartup
argument_list|()
operator|&&
name|isStarted
argument_list|()
condition|)
block|{
comment|// invoke this logic to warm up the routes and if possible also start the routes
name|doStartOrResumeRoutes
argument_list|(
name|routeServices
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// super will invoke doStart which will prepare internal services and start routes etc.
try|try
block|{
name|firstStartDone
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VetoCamelContextStartException
name|e
parameter_list|)
block|{
comment|// mark we veto against starting Camel
name|vetoStated
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isRethrowException
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"CamelContext ({}) vetoed to not start due {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// swallow exception and change state of this camel context to stopped
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
comment|// count how many routes are actually started
name|int
name|started
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Route
name|route
range|:
name|getRoutes
argument_list|()
control|)
block|{
name|ServiceStatus
name|status
init|=
name|getRouteStatus
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|started
operator|++
expr_stmt|;
block|}
block|}
specifier|final
name|Collection
argument_list|<
name|Route
argument_list|>
name|controlledRoutes
init|=
name|getRouteController
argument_list|()
operator|.
name|getControlledRoutes
argument_list|()
decl_stmt|;
if|if
condition|(
name|controlledRoutes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Total {} routes, of which {} are started"
argument_list|,
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|started
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Total {} routes, of which {} are started, and {} are managed by RouteController: {}"
argument_list|,
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|started
argument_list|,
name|controlledRoutes
operator|.
name|size
argument_list|()
argument_list|,
name|getRouteController
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) started in {}"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|stopWatch
operator|.
name|taken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// okay the routes has been started so emit event that CamelContext has started (here at the end)
name|EventHelper
operator|.
name|notifyCamelContextStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// now call the startup listeners where the routes has been started
for|for
control|(
name|StartupListener
name|startup
range|:
name|startupListeners
control|)
block|{
if|if
condition|(
name|startup
operator|instanceof
name|ExtendedStartupListener
condition|)
block|{
operator|(
operator|(
name|ExtendedStartupListener
operator|)
name|startup
operator|)
operator|.
name|onCamelContextFullyStarted
argument_list|(
name|this
argument_list|,
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|MDCHelper
name|mdcHelper
init|=
operator|new
name|MDCHelper
argument_list|()
init|)
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|suspend ()
specifier|public
name|void
name|suspend
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|MDCHelper
name|mdcHelper
init|=
operator|new
name|MDCHelper
argument_list|()
init|)
block|{
name|super
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resume ()
specifier|public
name|void
name|resume
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|MDCHelper
name|mdcHelper
init|=
operator|new
name|MDCHelper
argument_list|()
init|)
block|{
name|super
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|MDCHelper
name|mdcHelper
init|=
operator|new
name|MDCHelper
argument_list|()
init|)
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Implementation methods
comment|// -----------------------------------------------------------------------
DECL|method|doStart ()
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|doWithDefinedClassLoader
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|doStartCamel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fire event that we failed to start
name|EventHelper
operator|.
name|notifyCamelContextStartupFailed
argument_list|(
name|DefaultCamelContext
operator|.
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// rethrow cause
throw|throw
name|e
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doWithDefinedClassLoader (ThrowingRunnable<T> callable)
specifier|private
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|void
name|doWithDefinedClassLoader
parameter_list|(
name|ThrowingRunnable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|T
block|{
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Using the ApplicationClassLoader as the default for TCCL
if|if
condition|(
name|applicationContextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|applicationContextClassLoader
argument_list|)
expr_stmt|;
block|}
name|callable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|tccl
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doStartCamel ()
specifier|protected
name|void
name|doStartCamel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// custom properties may use property placeholders so resolve those early on
if|if
condition|(
name|globalOptions
operator|!=
literal|null
operator|&&
operator|!
name|globalOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|globalOptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|replaced
init|=
name|resolvePropertyPlaceholders
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|replaced
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Camel property with key {} replaced value from {} -> {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|replaced
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setValue
argument_list|(
name|replaced
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|classResolver
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|classResolver
operator|)
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using ClassResolver={}, PackageScanClassResolver={}, ApplicationContextClassLoader={}, RouteController={}"
argument_list|,
name|getClassResolver
argument_list|()
argument_list|,
name|getPackageScanClassResolver
argument_list|()
argument_list|,
name|getApplicationContextClassLoader
argument_list|()
argument_list|,
name|getRouteController
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isStreamCaching
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"StreamCaching is enabled on CamelContext: {}"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTracing
argument_list|()
condition|)
block|{
comment|// tracing is added in the DefaultChannel so we can enable it on the fly
name|log
operator|.
name|info
argument_list|(
literal|"Tracing is enabled on CamelContext: {}"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUseMDCLogging
argument_list|()
condition|)
block|{
comment|// log if MDC has been enabled
name|log
operator|.
name|info
argument_list|(
literal|"MDC logging is enabled on CamelContext: {}"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHandleFault
argument_list|()
condition|)
block|{
comment|// only add a new handle fault if not already configured
if|if
condition|(
name|HandleFault
operator|.
name|getHandleFault
argument_list|(
name|this
argument_list|)
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"HandleFault is enabled on CamelContext: {}"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|HandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getDelayer
argument_list|()
operator|!=
literal|null
operator|&&
name|getDelayer
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Delayer is enabled with: {} ms. on CamelContext: {}"
argument_list|,
name|getDelayer
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// register debugger
if|if
condition|(
name|getDebugger
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Debugger: {} is enabled on CamelContext: {}"
argument_list|,
name|getDebugger
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// register this camel context on the debugger
name|getDebugger
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|startService
argument_list|(
name|getDebugger
argument_list|()
argument_list|)
expr_stmt|;
name|addInterceptStrategy
argument_list|(
operator|new
name|Debug
argument_list|(
name|getDebugger
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// start management strategy before lifecycles are started
name|ManagementStrategy
name|managementStrategy
init|=
name|getManagementStrategy
argument_list|()
decl_stmt|;
name|startService
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
comment|// start lifecycle strategies
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|lifecycleStrategies
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|LifecycleStrategy
argument_list|>
name|it
init|=
name|lifecycleStrategies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LifecycleStrategy
name|strategy
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|strategy
operator|.
name|onContextStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VetoCamelContextStartException
name|e
parameter_list|)
block|{
comment|// okay we should not start Camel since it was vetoed
name|log
operator|.
name|warn
argument_list|(
literal|"Lifecycle strategy vetoed starting CamelContext ({}) due: {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Lifecycle strategy "
operator|+
name|strategy
operator|+
literal|" failed starting CamelContext ({}) due: {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// start notifiers as services
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|getManagementStrategy
argument_list|()
operator|.
name|getEventNotifiers
argument_list|()
control|)
block|{
if|if
condition|(
name|notifier
operator|instanceof
name|Service
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|notifier
decl_stmt|;
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onServiceAdd
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|startService
argument_list|(
operator|(
name|Service
operator|)
name|notifier
argument_list|)
expr_stmt|;
block|}
block|}
comment|// must let some bootstrap service be started before we can notify the starting event
name|EventHelper
operator|.
name|notifyCamelContextStarting
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|forceLazyInitialization
argument_list|()
expr_stmt|;
comment|// re-create endpoint registry as the cache size limit may be set after the constructor of this instance was called.
comment|// and we needed to create endpoints up-front as it may be accessed before this context is started
name|endpoints
operator|=
name|createEndpointRegistry
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
comment|// add this as service and force pre-start them
name|addService
argument_list|(
name|endpoints
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// special for executorServiceManager as want to stop it manually so false in stopOnShutdown
name|addService
argument_list|(
name|executorServiceManager
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|producerServicePool
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|pollingConsumerServicePool
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|inflightRepository
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|asyncProcessorAwaitManager
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|shutdownStrategy
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|packageScanClassResolver
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|restRegistry
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|messageHistoryFactory
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|reloadStrategy
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using ReloadStrategy: {}"
argument_list|,
name|reloadStrategy
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|reloadStrategy
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Start runtime catalog
name|getExtension
argument_list|(
name|RuntimeCamelCatalog
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Initialize declarative transformer/validator registry
name|transformerRegistry
operator|=
name|createTransformerRegistry
argument_list|(
name|transformers
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|transformerRegistry
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validatorRegistry
operator|=
name|createValidatorRegistry
argument_list|(
name|validators
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|validatorRegistry
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// optimised to not include runtimeEndpointRegistry unlesstartServices its enabled or JMX statistics is in extended mode
if|if
condition|(
name|runtimeEndpointRegistry
operator|==
literal|null
operator|&&
name|getManagementStrategy
argument_list|()
operator|!=
literal|null
operator|&&
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|isEnabled
init|=
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getEndpointRuntimeStatisticsEnabled
argument_list|()
decl_stmt|;
name|boolean
name|isExtended
init|=
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getStatisticsLevel
argument_list|()
operator|.
name|isExtended
argument_list|()
decl_stmt|;
comment|// extended mode is either if we use Extended statistics level or the option is explicit enabled
name|boolean
name|extended
init|=
name|isExtended
operator|||
name|isEnabled
operator|!=
literal|null
operator|&&
name|isEnabled
decl_stmt|;
if|if
condition|(
name|extended
condition|)
block|{
name|runtimeEndpointRegistry
operator|=
operator|new
name|DefaultRuntimeEndpointRegistry
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runtimeEndpointRegistry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|runtimeEndpointRegistry
operator|instanceof
name|EventNotifier
condition|)
block|{
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
operator|(
name|EventNotifier
operator|)
name|runtimeEndpointRegistry
argument_list|)
expr_stmt|;
block|}
name|addService
argument_list|(
name|runtimeEndpointRegistry
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// eager lookup any configured properties component to avoid subsequent lookup attempts which may impact performance
comment|// due we use properties component for property placeholder resolution at runtime
name|Component
name|existing
init|=
name|CamelContextHelper
operator|.
name|lookupPropertiesComponent
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// store reference to the existing properties component
if|if
condition|(
name|existing
operator|instanceof
name|PropertiesComponent
condition|)
block|{
name|propertiesComponent
operator|=
operator|(
name|PropertiesComponent
operator|)
name|existing
expr_stmt|;
block|}
else|else
block|{
comment|// properties component must be expected type
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found properties component of type: "
operator|+
name|existing
operator|.
name|getClass
argument_list|()
operator|+
literal|" instead of expected: "
operator|+
name|PropertiesComponent
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|// start components
name|startServices
argument_list|(
name|components
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// start the route definitions before the routes is started
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
comment|// is there any stream caching enabled then log an info about this and its limit of spooling to disk, so people is aware of this
name|boolean
name|streamCachingInUse
init|=
name|isStreamCaching
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|streamCachingInUse
condition|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routeDefinitions
control|)
block|{
name|Boolean
name|routeCache
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|this
argument_list|,
name|route
operator|.
name|getStreamCache
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeCache
operator|!=
literal|null
operator|&&
name|routeCache
condition|)
block|{
name|streamCachingInUse
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|isUseDataType
argument_list|()
condition|)
block|{
comment|// log if DataType has been enabled
name|log
operator|.
name|info
argument_list|(
literal|"Message DataType is enabled on CamelContext: {}"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|streamCachingInUse
condition|)
block|{
comment|// stream caching is in use so enable the strategy
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|getStreamCachingStrategy
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// log if stream caching is not in use as this can help people to enable it if they use streams
name|log
operator|.
name|info
argument_list|(
literal|"StreamCaching is not in use. If using streams then its recommended to enable stream caching."
operator|+
literal|" See more details at http://camel.apache.org/stream-caching.html"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAllowUseOriginalMessage
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"AllowUseOriginalMessage enabled because UseOriginalMessage is in use"
argument_list|)
expr_stmt|;
block|}
comment|// use resolver to find the headers map factory to be used, if we are using the default
if|if
condition|(
name|headersMapFactory
operator|instanceof
name|DefaultHeadersMapFactory
condition|)
block|{
name|headersMapFactory
operator|=
operator|new
name|HeadersMapFactoryResolver
argument_list|()
operator|.
name|resolve
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Using HeadersMapFactory: {}"
argument_list|,
name|headersMapFactory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|headersMapFactory
operator|.
name|isCaseInsensitive
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"HeadersMapFactory: {} is case-sensitive which can cause problems for protocols such as HTTP based, which rely on case-insensitive headers."
argument_list|,
name|getHeadersMapFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// start routes
if|if
condition|(
name|doNotStartRoutesOnFirstStart
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skip starting routes as CamelContext has been configured with autoStartup=false"
argument_list|)
expr_stmt|;
block|}
comment|// invoke this logic to warmup the routes and if possible also start the routes
name|doStartOrResumeRoutes
argument_list|(
name|routeServices
argument_list|,
literal|true
argument_list|,
operator|!
name|doNotStartRoutesOnFirstStart
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// starting will continue in the start method
block|}
DECL|method|doStop ()
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopWatch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) is shutting down"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EventHelper
operator|.
name|notifyCamelContextStopping
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Stop the route controller
name|ServiceHelper
operator|.
name|stopAndShutdownService
argument_list|(
name|this
operator|.
name|routeController
argument_list|)
expr_stmt|;
comment|// stop route inputs in the same order as they was started so we stop the very first inputs first
try|try
block|{
comment|// force shutting down routes as they may otherwise cause shutdown to hang
name|shutdownStrategy
operator|.
name|shutdownForced
argument_list|(
name|this
argument_list|,
name|getRouteStartupOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while shutting down routes. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// shutdown await manager to trigger interrupt of blocked threads to attempt to free these threads graceful
name|shutdownServices
argument_list|(
name|asyncProcessorAwaitManager
argument_list|)
expr_stmt|;
name|routeStartupOrder
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|RouteStartupOrder
operator|::
name|getStartupOrder
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RouteService
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RouteStartupOrder
name|startupOrder
range|:
name|routeStartupOrder
control|)
block|{
name|DefaultRouteStartupOrder
name|order
init|=
operator|(
name|DefaultRouteStartupOrder
operator|)
name|startupOrder
decl_stmt|;
name|RouteService
name|routeService
init|=
name|order
operator|.
name|getRouteService
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
block|}
name|shutdownServices
argument_list|(
name|list
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// do not clear route services or startup listeners as we can start Camel again and get the route back as before
name|routeStartupOrder
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// but clear any suspend routes
name|suspendedRouteServices
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// stop consumers from the services to close first, such as POJO consumer (eg @Consumer)
comment|// which we need to stop after the routes, as a POJO consumer is essentially a route also
for|for
control|(
name|Service
name|service
range|:
name|servicesToStop
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|Consumer
condition|)
block|{
name|shutdownServices
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the stop order is important
comment|// shutdown default error handler thread pool
if|if
condition|(
name|errorHandlerExecutorService
operator|!=
literal|null
condition|)
block|{
comment|// force shutting down the thread pool
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|errorHandlerExecutorService
argument_list|)
expr_stmt|;
name|errorHandlerExecutorService
operator|=
literal|null
expr_stmt|;
block|}
comment|// shutdown debugger
name|ServiceHelper
operator|.
name|stopAndShutdownService
argument_list|(
name|getDebugger
argument_list|()
argument_list|)
expr_stmt|;
name|shutdownServices
argument_list|(
name|endpoints
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|shutdownServices
argument_list|(
name|components
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|shutdownServices
argument_list|(
name|languages
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|languages
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onContextStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while stopping lifecycle strategies. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// shutdown services as late as possible
name|shutdownServices
argument_list|(
name|servicesToStop
argument_list|)
expr_stmt|;
name|servicesToStop
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// must notify that we are stopped before stopping the management strategy
name|EventHelper
operator|.
name|notifyCamelContextStopped
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// stop the notifier service
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|getManagementStrategy
argument_list|()
operator|.
name|getEventNotifiers
argument_list|()
control|)
block|{
name|shutdownServices
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
comment|// shutdown executor service and management as the last one
name|shutdownServices
argument_list|(
name|executorServiceManager
argument_list|)
expr_stmt|;
name|shutdownServices
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
name|shutdownServices
argument_list|(
name|managementMBeanAssembler
argument_list|)
expr_stmt|;
name|shutdownServices
argument_list|(
name|lifecycleStrategies
argument_list|)
expr_stmt|;
comment|// do not clear lifecycleStrategies as we can start Camel again and get the route back as before
comment|// stop the lazy created so they can be re-created on restart
name|forceStopLazyInitialization
argument_list|()
expr_stmt|;
comment|// stop to clear introspection cache
name|IntrospectionSupport
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" (CamelContext: "
operator|+
name|getName
argument_list|()
operator|+
literal|") uptime {}"
argument_list|,
name|getUptime
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Apache Camel {} (CamelContext: {}) is shutdown in {}"
argument_list|,
name|getVersion
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|stopWatch
operator|.
name|taken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// and clear start date
name|startDate
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Starts or resumes the routes      *      * @param routeServices  the routes to start (will only start a route if its not already started)      * @param checkClash     whether to check for startup ordering clash      * @param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer.      * @param resumeConsumer whether the route consumer should be resumed.      * @param addingRoutes   whether we are adding new routes      * @throws Exception is thrown if error starting routes      */
DECL|method|doStartOrResumeRoutes (Map<String, RouteService> routeServices, boolean checkClash, boolean startConsumer, boolean resumeConsumer, boolean addingRoutes)
specifier|protected
name|void
name|doStartOrResumeRoutes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|routeServices
parameter_list|,
name|boolean
name|checkClash
parameter_list|,
name|boolean
name|startConsumer
parameter_list|,
name|boolean
name|resumeConsumer
parameter_list|,
name|boolean
name|addingRoutes
parameter_list|)
throws|throws
name|Exception
block|{
name|isStartingRoutes
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// filter out already started routes
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|filtered
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|entry
range|:
name|routeServices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|startable
init|=
literal|false
decl_stmt|;
name|Consumer
name|consumer
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumer
operator|instanceof
name|SuspendableService
condition|)
block|{
comment|// consumer could be suspended, which is not reflected in the RouteService status
name|startable
operator|=
operator|(
operator|(
name|SuspendableService
operator|)
name|consumer
operator|)
operator|.
name|isSuspended
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|startable
operator|&&
name|consumer
operator|instanceof
name|StatefulService
condition|)
block|{
comment|// consumer could be stopped, which is not reflected in the RouteService status
name|startable
operator|=
operator|(
operator|(
name|StatefulService
operator|)
name|consumer
operator|)
operator|.
name|getStatus
argument_list|()
operator|.
name|isStartable
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|startable
condition|)
block|{
comment|// no consumer so use state from route service
name|startable
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isStartable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|startable
condition|)
block|{
name|filtered
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the context is in last phase of staring, so lets start the routes
name|safelyStartRouteServices
argument_list|(
name|checkClash
argument_list|,
name|startConsumer
argument_list|,
name|resumeConsumer
argument_list|,
name|addingRoutes
argument_list|,
name|filtered
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|isStartingRoutes
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|routeSupportsSuspension (String routeId)
specifier|protected
name|boolean
name|routeSupportsSuspension
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
name|RouteService
name|routeService
init|=
name|routeServices
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeService
operator|!=
literal|null
condition|)
block|{
return|return
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|supportsSuspension
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|shutdownServices (Object service)
specifier|private
name|void
name|shutdownServices
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
comment|// do not rethrow exception as we want to keep shutting down in case of problems
comment|// allow us to do custom work before delegating to service helper
try|try
block|{
if|if
condition|(
name|service
operator|instanceof
name|Service
condition|)
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|Collection
condition|)
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|service
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while shutting down service: "
operator|+
name|service
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// fire event
name|EventHelper
operator|.
name|notifyServiceStopFailure
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdownServices (Collection<?> services)
specifier|private
name|void
name|shutdownServices
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|services
parameter_list|)
block|{
comment|// reverse stopping by default
name|shutdownServices
argument_list|(
name|services
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdownServices (Collection<?> services, boolean reverse)
specifier|private
name|void
name|shutdownServices
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|services
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|list
init|=
name|services
decl_stmt|;
if|if
condition|(
name|reverse
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|reverseList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|services
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|reverseList
argument_list|)
expr_stmt|;
name|list
operator|=
name|reverseList
expr_stmt|;
block|}
for|for
control|(
name|Object
name|service
range|:
name|list
control|)
block|{
name|shutdownServices
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startService (Service service)
specifier|private
name|void
name|startService
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|Exception
block|{
comment|// and register startup aware so they can be notified when
comment|// camel context has been started
if|if
condition|(
name|service
operator|instanceof
name|StartupListener
condition|)
block|{
name|StartupListener
name|listener
init|=
operator|(
name|StartupListener
operator|)
name|service
decl_stmt|;
name|addStartupListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|service
operator|instanceof
name|CamelContextAware
condition|)
block|{
name|CamelContextAware
name|aware
init|=
operator|(
name|CamelContextAware
operator|)
name|service
decl_stmt|;
name|aware
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|startServices (Collection<?> services)
specifier|private
name|void
name|startServices
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|services
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Object
name|element
range|:
name|services
control|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|Service
condition|)
block|{
name|startService
argument_list|(
operator|(
name|Service
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stopServices (Object service)
specifier|private
name|void
name|stopServices
parameter_list|(
name|Object
name|service
parameter_list|)
throws|throws
name|Exception
block|{
comment|// allow us to do custom work before delegating to service helper
try|try
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fire event
name|EventHelper
operator|.
name|notifyServiceStopFailure
argument_list|(
name|this
argument_list|,
name|service
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// rethrow to signal error with stopping
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|startRouteDefinitions (Collection<RouteDefinition> list)
specifier|protected
name|void
name|startRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|list
control|)
block|{
name|startRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Starts the given route service      */
DECL|method|startRouteService (RouteService routeService, boolean addingRoutes)
specifier|protected
specifier|synchronized
name|void
name|startRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|,
name|boolean
name|addingRoutes
parameter_list|)
throws|throws
name|Exception
block|{
comment|// we may already be starting routes so remember this, so we can unset accordingly in finally block
name|boolean
name|alreadyStartingRoutes
init|=
name|isStartingRoutes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|alreadyStartingRoutes
condition|)
block|{
name|isStartingRoutes
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// the route service could have been suspended, and if so then resume it instead
if|if
condition|(
name|routeService
operator|.
name|getStatus
argument_list|()
operator|.
name|isSuspended
argument_list|()
condition|)
block|{
name|resumeRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// start the route service
name|routeServices
operator|.
name|put
argument_list|(
name|routeService
operator|.
name|getId
argument_list|()
argument_list|,
name|routeService
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
comment|// this method will log the routes being started
name|safelyStartRouteServices
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|addingRoutes
argument_list|,
name|routeService
argument_list|)
expr_stmt|;
comment|// start route services if it was configured to auto startup and we are not adding routes
name|boolean
name|autoStartup
init|=
name|routeService
operator|.
name|getRouteDefinition
argument_list|()
operator|.
name|isAutoStartup
argument_list|(
name|this
argument_list|)
operator|&&
name|this
operator|.
name|isAutoStartup
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|addingRoutes
operator|||
name|autoStartup
condition|)
block|{
comment|// start the route since auto start is enabled or we are starting a route (not adding new routes)
name|routeService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|alreadyStartingRoutes
condition|)
block|{
name|isStartingRoutes
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Resumes the given route service      */
DECL|method|resumeRouteService (RouteService routeService)
specifier|protected
specifier|synchronized
name|void
name|resumeRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|)
throws|throws
name|Exception
block|{
comment|// the route service could have been stopped, and if so then start it instead
if|if
condition|(
operator|!
name|routeService
operator|.
name|getStatus
argument_list|()
operator|.
name|isSuspended
argument_list|()
condition|)
block|{
name|startRouteService
argument_list|(
name|routeService
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// resume the route service
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
comment|// this method will log the routes being started
name|safelyStartRouteServices
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|routeService
argument_list|)
expr_stmt|;
comment|// must resume route service as well
name|routeService
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|stopRouteService (RouteService routeService, boolean removingRoutes)
specifier|protected
specifier|synchronized
name|void
name|stopRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|,
name|boolean
name|removingRoutes
parameter_list|)
throws|throws
name|Exception
block|{
name|routeService
operator|.
name|setRemovingRoutes
argument_list|(
name|removingRoutes
argument_list|)
expr_stmt|;
name|stopRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
block|}
DECL|method|logRouteState (Route route, String state)
specifier|protected
name|void
name|logRouteState
parameter_list|(
name|Route
name|route
parameter_list|,
name|String
name|state
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|route
operator|.
name|getConsumer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Route: {} is {}, was consuming from: {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|state
argument_list|,
name|route
operator|.
name|getConsumer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Route: {} is {}."
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stopRouteService (RouteService routeService)
specifier|protected
specifier|synchronized
name|void
name|stopRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|)
throws|throws
name|Exception
block|{
name|routeService
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|Route
name|route
range|:
name|routeService
operator|.
name|getRoutes
argument_list|()
control|)
block|{
name|logRouteState
argument_list|(
name|route
argument_list|,
literal|"stopped"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdownRouteService (RouteService routeService)
specifier|protected
specifier|synchronized
name|void
name|shutdownRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|)
throws|throws
name|Exception
block|{
name|routeService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|Route
name|route
range|:
name|routeService
operator|.
name|getRoutes
argument_list|()
control|)
block|{
name|logRouteState
argument_list|(
name|route
argument_list|,
literal|"shutdown and removed"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|suspendRouteService (RouteService routeService)
specifier|protected
specifier|synchronized
name|void
name|suspendRouteService
parameter_list|(
name|RouteService
name|routeService
parameter_list|)
throws|throws
name|Exception
block|{
name|routeService
operator|.
name|setRemovingRoutes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|routeService
operator|.
name|suspend
argument_list|()
expr_stmt|;
for|for
control|(
name|Route
name|route
range|:
name|routeService
operator|.
name|getRoutes
argument_list|()
control|)
block|{
name|logRouteState
argument_list|(
name|route
argument_list|,
literal|"suspended"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Starts the routes services in a proper manner which ensures the routes will be started in correct order,      * check for clash and that the routes will also be shutdown in correct order as well.      *<p/>      * This method<b>must</b> be used to start routes in a safe manner.      *      * @param checkClash     whether to check for startup order clash      * @param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer.      * @param resumeConsumer whether the route consumer should be resumed.      * @param addingRoutes   whether we are adding new routes      * @param routeServices  the routes      * @throws Exception is thrown if error starting the routes      */
DECL|method|safelyStartRouteServices (boolean checkClash, boolean startConsumer, boolean resumeConsumer, boolean addingRoutes, Collection<RouteService> routeServices)
specifier|protected
specifier|synchronized
name|void
name|safelyStartRouteServices
parameter_list|(
name|boolean
name|checkClash
parameter_list|,
name|boolean
name|startConsumer
parameter_list|,
name|boolean
name|resumeConsumer
parameter_list|,
name|boolean
name|addingRoutes
parameter_list|,
name|Collection
argument_list|<
name|RouteService
argument_list|>
name|routeServices
parameter_list|)
throws|throws
name|Exception
block|{
comment|// list of inputs to start when all the routes have been prepared for starting
comment|// we use a tree map so the routes will be ordered according to startup order defined on the route
name|Map
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|inputs
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// figure out the order in which the routes should be started
for|for
control|(
name|RouteService
name|routeService
range|:
name|routeServices
control|)
block|{
name|DefaultRouteStartupOrder
name|order
init|=
name|doPrepareRouteToBeStarted
argument_list|(
name|routeService
argument_list|)
decl_stmt|;
comment|// check for clash before we add it as input
if|if
condition|(
name|checkClash
condition|)
block|{
name|doCheckStartupOrderClash
argument_list|(
name|order
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
name|inputs
operator|.
name|put
argument_list|(
name|order
operator|.
name|getStartupOrder
argument_list|()
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
comment|// warm up routes before we start them
name|doWarmUpRoutes
argument_list|(
name|inputs
argument_list|,
name|startConsumer
argument_list|)
expr_stmt|;
comment|// sort the startup listeners so they are started in the right order
name|startupListeners
operator|.
name|sort
argument_list|(
name|OrderedComparator
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// now call the startup listeners where the routes has been warmed up
comment|// (only the actual route consumer has not yet been started)
for|for
control|(
name|StartupListener
name|startup
range|:
name|startupListeners
control|)
block|{
name|startup
operator|.
name|onCamelContextStarted
argument_list|(
name|this
argument_list|,
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// because the consumers may also register startup listeners we need to reset
comment|// the already started listeners
name|List
argument_list|<
name|StartupListener
argument_list|>
name|backup
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|startupListeners
argument_list|)
decl_stmt|;
name|startupListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// now start the consumers
if|if
condition|(
name|startConsumer
condition|)
block|{
if|if
condition|(
name|resumeConsumer
condition|)
block|{
comment|// and now resume the routes
name|doResumeRouteConsumers
argument_list|(
name|inputs
argument_list|,
name|addingRoutes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// and now start the routes
comment|// and check for clash with multiple consumers of the same endpoints which is not allowed
name|doStartRouteConsumers
argument_list|(
name|inputs
argument_list|,
name|addingRoutes
argument_list|)
expr_stmt|;
block|}
block|}
comment|// sort the startup listeners so they are started in the right order
name|startupListeners
operator|.
name|sort
argument_list|(
name|OrderedComparator
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// now the consumers that was just started may also add new StartupListeners (such as timer)
comment|// so we need to ensure they get started as well
for|for
control|(
name|StartupListener
name|startup
range|:
name|startupListeners
control|)
block|{
name|startup
operator|.
name|onCamelContextStarted
argument_list|(
name|this
argument_list|,
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// and add the previous started startup listeners to the list so we have them all
name|startupListeners
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|backup
argument_list|)
expr_stmt|;
comment|// inputs no longer needed
name|inputs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see #safelyStartRouteServices(boolean,boolean,boolean,boolean,java.util.Collection)      */
DECL|method|safelyStartRouteServices (boolean forceAutoStart, boolean checkClash, boolean startConsumer, boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices)
specifier|protected
specifier|synchronized
name|void
name|safelyStartRouteServices
parameter_list|(
name|boolean
name|forceAutoStart
parameter_list|,
name|boolean
name|checkClash
parameter_list|,
name|boolean
name|startConsumer
parameter_list|,
name|boolean
name|resumeConsumer
parameter_list|,
name|boolean
name|addingRoutes
parameter_list|,
name|RouteService
modifier|...
name|routeServices
parameter_list|)
throws|throws
name|Exception
block|{
name|safelyStartRouteServices
argument_list|(
name|checkClash
argument_list|,
name|startConsumer
argument_list|,
name|resumeConsumer
argument_list|,
name|addingRoutes
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|routeServices
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doPrepareRouteToBeStarted (RouteService routeService)
specifier|private
name|DefaultRouteStartupOrder
name|doPrepareRouteToBeStarted
parameter_list|(
name|RouteService
name|routeService
parameter_list|)
block|{
comment|// add the inputs from this route service to the list to start afterwards
comment|// should be ordered according to the startup number
name|Integer
name|startupOrder
init|=
name|routeService
operator|.
name|getRouteDefinition
argument_list|()
operator|.
name|getStartupOrder
argument_list|()
decl_stmt|;
if|if
condition|(
name|startupOrder
operator|==
literal|null
condition|)
block|{
comment|// auto assign a default startup order
name|startupOrder
operator|=
name|defaultRouteStartupOrder
operator|++
expr_stmt|;
block|}
comment|// create holder object that contains information about this route to be started
name|Route
name|route
init|=
name|routeService
operator|.
name|getRoutes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|DefaultRouteStartupOrder
argument_list|(
name|startupOrder
argument_list|,
name|route
argument_list|,
name|routeService
argument_list|)
return|;
block|}
DECL|method|doCheckStartupOrderClash (DefaultRouteStartupOrder answer, Map<Integer, DefaultRouteStartupOrder> inputs)
specifier|private
name|boolean
name|doCheckStartupOrderClash
parameter_list|(
name|DefaultRouteStartupOrder
name|answer
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|FailedToStartRouteException
block|{
comment|// check for clash by startupOrder id
name|DefaultRouteStartupOrder
name|other
init|=
name|inputs
operator|.
name|get
argument_list|(
name|answer
operator|.
name|getStartupOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
name|answer
operator|!=
name|other
condition|)
block|{
name|String
name|otherId
init|=
name|other
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|answer
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"startupOrder clash. Route "
operator|+
name|otherId
operator|+
literal|" already has startupOrder "
operator|+
name|answer
operator|.
name|getStartupOrder
argument_list|()
operator|+
literal|" configured which this route have as well. Please correct startupOrder to be unique among all your routes."
argument_list|)
throw|;
block|}
comment|// check in existing already started as well
for|for
control|(
name|RouteStartupOrder
name|order
range|:
name|routeStartupOrder
control|)
block|{
name|String
name|otherId
init|=
name|order
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|otherId
argument_list|)
condition|)
block|{
comment|// its the same route id so skip clash check as its the same route (can happen when using suspend/resume)
block|}
elseif|else
if|if
condition|(
name|answer
operator|.
name|getStartupOrder
argument_list|()
operator|==
name|order
operator|.
name|getStartupOrder
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|answer
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"startupOrder clash. Route "
operator|+
name|otherId
operator|+
literal|" already has startupOrder "
operator|+
name|answer
operator|.
name|getStartupOrder
argument_list|()
operator|+
literal|" configured which this route have as well. Please correct startupOrder to be unique among all your routes."
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|doWarmUpRoutes (Map<Integer, DefaultRouteStartupOrder> inputs, boolean autoStartup)
specifier|private
name|void
name|doWarmUpRoutes
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|autoStartup
parameter_list|)
throws|throws
name|Exception
block|{
comment|// now prepare the routes by starting its services before we start the input
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|entry
range|:
name|inputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// defer starting inputs till later as we want to prepare the routes by starting
comment|// all their processors and child services etc.
comment|// then later we open the floods to Camel by starting the inputs
comment|// what this does is to ensure Camel is more robust on starting routes as all routes
comment|// will then be prepared in time before we start inputs which will consume messages to be routed
name|RouteService
name|routeService
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRouteService
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Warming up route id: {} having autoStartup={}"
argument_list|,
name|routeService
operator|.
name|getId
argument_list|()
argument_list|,
name|autoStartup
argument_list|)
expr_stmt|;
name|routeService
operator|.
name|warmUp
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doResumeRouteConsumers (Map<Integer, DefaultRouteStartupOrder> inputs, boolean addingRoutes)
specifier|private
name|void
name|doResumeRouteConsumers
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|addingRoutes
parameter_list|)
throws|throws
name|Exception
block|{
name|doStartOrResumeRouteConsumers
argument_list|(
name|inputs
argument_list|,
literal|true
argument_list|,
name|addingRoutes
argument_list|)
expr_stmt|;
block|}
DECL|method|doStartRouteConsumers (Map<Integer, DefaultRouteStartupOrder> inputs, boolean addingRoutes)
specifier|private
name|void
name|doStartRouteConsumers
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|addingRoutes
parameter_list|)
throws|throws
name|Exception
block|{
name|doStartOrResumeRouteConsumers
argument_list|(
name|inputs
argument_list|,
literal|false
argument_list|,
name|addingRoutes
argument_list|)
expr_stmt|;
block|}
DECL|method|doStartOrResumeRouteConsumers (Map<Integer, DefaultRouteStartupOrder> inputs, boolean resumeOnly, boolean addingRoute)
specifier|private
name|void
name|doStartOrResumeRouteConsumers
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|resumeOnly
parameter_list|,
name|boolean
name|addingRoute
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Endpoint
argument_list|>
name|routeInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DefaultRouteStartupOrder
argument_list|>
name|entry
range|:
name|inputs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|order
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Route
name|route
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRoute
argument_list|()
decl_stmt|;
name|RouteService
name|routeService
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRouteService
argument_list|()
decl_stmt|;
comment|// if we are starting camel, then skip routes which are configured to not be auto started
name|boolean
name|autoStartup
init|=
name|routeService
operator|.
name|getRouteDefinition
argument_list|()
operator|.
name|isAutoStartup
argument_list|(
name|this
argument_list|)
operator|&&
name|this
operator|.
name|isAutoStartup
argument_list|()
decl_stmt|;
if|if
condition|(
name|addingRoute
operator|&&
operator|!
name|autoStartup
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Skipping starting of route {} as its configured with autoStartup=false"
argument_list|,
name|routeService
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// start the service
for|for
control|(
name|Consumer
name|consumer
range|:
name|routeService
operator|.
name|getInputs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Endpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
comment|// check multiple consumer violation, with the other routes to be started
if|if
condition|(
operator|!
name|doCheckMultipleConsumerSupportClash
argument_list|(
name|endpoint
argument_list|,
name|routeInputs
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|routeService
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Multiple consumers for the same endpoint is not allowed: "
operator|+
name|endpoint
argument_list|)
throw|;
block|}
comment|// check for multiple consumer violations with existing routes which
comment|// have already been started, or is currently starting
name|List
argument_list|<
name|Endpoint
argument_list|>
name|existingEndpoints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Route
name|existingRoute
range|:
name|getRoutes
argument_list|()
control|)
block|{
if|if
condition|(
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|existingRoute
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip ourselves
continue|continue;
block|}
name|Endpoint
name|existing
init|=
name|existingRoute
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|ServiceStatus
name|status
init|=
name|getRouteStatus
argument_list|(
name|existingRoute
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
operator|(
name|status
operator|.
name|isStarted
argument_list|()
operator|||
name|status
operator|.
name|isStarting
argument_list|()
operator|)
condition|)
block|{
name|existingEndpoints
operator|.
name|add
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|doCheckMultipleConsumerSupportClash
argument_list|(
name|endpoint
argument_list|,
name|existingEndpoints
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|routeService
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Multiple consumers for the same endpoint is not allowed: "
operator|+
name|endpoint
argument_list|)
throw|;
block|}
comment|// start the consumer on the route
name|log
operator|.
name|debug
argument_list|(
literal|"Route: {}>>> {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|route
argument_list|)
expr_stmt|;
if|if
condition|(
name|resumeOnly
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Resuming consumer (order: {}) on route: {}"
argument_list|,
name|order
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Starting consumer (order: {}) on route: {}"
argument_list|,
name|order
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resumeOnly
operator|&&
name|route
operator|.
name|supportsSuspension
argument_list|()
condition|)
block|{
comment|// if we are resuming and the route can be resumed
name|ServiceHelper
operator|.
name|resumeService
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Route: {} resumed and consuming from: {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// when starting we should invoke the lifecycle strategies
for|for
control|(
name|LifecycleStrategy
name|strategy
range|:
name|lifecycleStrategies
control|)
block|{
name|strategy
operator|.
name|onServiceAdd
argument_list|(
name|this
argument_list|,
name|consumer
argument_list|,
name|route
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|startService
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|route
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
literal|"route.start.exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|route
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"route.start.exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Route: {} started and consuming from: {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|routeInputs
operator|.
name|add
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
comment|// add to the order which they was started, so we know how to stop them in reverse order
comment|// but only add if we haven't already registered it before (we dont want to double add when restarting)
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RouteStartupOrder
name|other
range|:
name|routeStartupOrder
control|)
block|{
if|if
condition|(
name|other
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|routeStartupOrder
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resumeOnly
condition|)
block|{
name|routeService
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// and start the route service (no need to start children as they are already warmed up)
try|try
block|{
name|routeService
operator|.
name|start
argument_list|()
expr_stmt|;
name|route
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
literal|"route.start.exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|route
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"route.start.exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
DECL|method|doCheckMultipleConsumerSupportClash (Endpoint endpoint, List<Endpoint> routeInputs)
specifier|private
name|boolean
name|doCheckMultipleConsumerSupportClash
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|List
argument_list|<
name|Endpoint
argument_list|>
name|routeInputs
parameter_list|)
block|{
comment|// is multiple consumers supported
name|boolean
name|multipleConsumersSupported
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|MultipleConsumersSupport
condition|)
block|{
name|multipleConsumersSupported
operator|=
operator|(
operator|(
name|MultipleConsumersSupport
operator|)
name|endpoint
operator|)
operator|.
name|isMultipleConsumersSupported
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|multipleConsumersSupported
condition|)
block|{
comment|// multiple consumer allowed, so return true
return|return
literal|true
return|;
block|}
comment|// check in progress list
if|if
condition|(
name|routeInputs
operator|.
name|contains
argument_list|(
name|endpoint
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Force some lazy initialization to occur upfront before we start any      * components and create routes      */
DECL|method|forceLazyInitialization ()
specifier|protected
name|void
name|forceLazyInitialization
parameter_list|()
block|{
name|getRegistry
argument_list|()
expr_stmt|;
name|getInjector
argument_list|()
expr_stmt|;
name|getLanguageResolver
argument_list|()
expr_stmt|;
name|getTypeConverterRegistry
argument_list|()
expr_stmt|;
name|getTypeConverter
argument_list|()
expr_stmt|;
if|if
condition|(
name|isTypeConverterStatisticsEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getTypeConverterRegistry
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|setStatisticsEnabled
argument_list|(
name|isTypeConverterStatisticsEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// resolve simple language to initialize it
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Force clear lazy initialization so they can be re-created on restart      */
DECL|method|forceStopLazyInitialization ()
specifier|protected
name|void
name|forceStopLazyInitialization
parameter_list|()
block|{
name|injector
operator|=
literal|null
expr_stmt|;
name|languageResolver
operator|=
literal|null
expr_stmt|;
name|typeConverterRegistry
operator|=
literal|null
expr_stmt|;
name|typeConverter
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createTypeConverter ()
specifier|protected
name|TypeConverter
name|createTypeConverter
parameter_list|()
block|{
name|BaseTypeConverterRegistry
name|answer
decl_stmt|;
name|answer
operator|=
operator|new
name|DefaultTypeConverter
argument_list|(
name|packageScanClassResolver
argument_list|,
name|getInjector
argument_list|()
argument_list|,
name|getDefaultFactoryFinder
argument_list|()
argument_list|,
name|isLoadTypeConverters
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setTypeConverterRegistry
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createInjector ()
specifier|protected
name|Injector
name|createInjector
parameter_list|()
block|{
name|FactoryFinder
name|finder
init|=
name|getDefaultFactoryFinder
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|(
name|Injector
operator|)
name|finder
operator|.
name|newInstance
argument_list|(
literal|"Injector"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoFactoryAvailableException
name|e
parameter_list|)
block|{
comment|// lets use the default injector
return|return
operator|new
name|DefaultInjector
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createComponentResolver ()
specifier|protected
name|ComponentResolver
name|createComponentResolver
parameter_list|()
block|{
return|return
operator|new
name|DefaultComponentResolver
argument_list|()
return|;
block|}
comment|/**      * Lazily create a default implementation      */
DECL|method|createRegistry ()
specifier|protected
name|Registry
name|createRegistry
parameter_list|()
block|{
name|JndiRegistry
name|jndi
init|=
operator|new
name|JndiRegistry
argument_list|()
decl_stmt|;
try|try
block|{
comment|// getContext() will force setting up JNDI
name|jndi
operator|.
name|getContext
argument_list|()
expr_stmt|;
return|return
name|jndi
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot create javax.naming.InitialContext due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". Will fallback and use SimpleRegistry instead. This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleRegistry
argument_list|()
return|;
block|}
block|}
comment|/**      * A pluggable strategy to allow an endpoint to be created without requiring      * a component to be its factory, such as for looking up the URI inside some      * {@link Registry}      *      * @param uri the uri for the endpoint to be created      * @return the newly created endpoint or null if it could not be resolved      */
DECL|method|createEndpoint (String uri)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Object
name|value
init|=
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Endpoint
condition|)
block|{
return|return
operator|(
name|Endpoint
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Processor
condition|)
block|{
return|return
operator|new
name|ProcessorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
operator|(
name|Processor
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|convertBeanToEndpoint
argument_list|(
name|uri
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using      * some kind of transformation or wrapper      *      * @param uri  the uri for the endpoint (and name in the registry)      * @param bean the bean to be converted to an endpoint, which will be not null      * @return a new endpoint      */
DECL|method|convertBeanToEndpoint (String uri, Object bean)
specifier|protected
name|Endpoint
name|convertBeanToEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"uri: "
operator|+
name|uri
operator|+
literal|" bean: "
operator|+
name|bean
operator|+
literal|" could not be converted to an Endpoint"
argument_list|)
throw|;
block|}
comment|/**      * Should we start newly added routes?      */
DECL|method|shouldStartRoutes ()
specifier|protected
name|boolean
name|shouldStartRoutes
parameter_list|()
block|{
return|return
name|isStarted
argument_list|()
operator|&&
operator|!
name|isStarting
argument_list|()
return|;
block|}
comment|/**      * Gets the properties component in use.      * Returns {@code null} if no properties component is in use.      */
DECL|method|getPropertiesComponent ()
specifier|protected
name|PropertiesComponent
name|getPropertiesComponent
parameter_list|()
block|{
return|return
name|propertiesComponent
return|;
block|}
DECL|method|setDataFormats (Map<String, DataFormatDefinition> dataFormats)
specifier|public
name|void
name|setDataFormats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
parameter_list|)
block|{
name|this
operator|.
name|dataFormats
operator|=
name|dataFormats
expr_stmt|;
block|}
DECL|method|getDataFormats ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|getDataFormats
parameter_list|()
block|{
return|return
name|dataFormats
return|;
block|}
annotation|@
name|Override
DECL|method|getGlobalOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getGlobalOptions
parameter_list|()
block|{
return|return
name|globalOptions
return|;
block|}
DECL|method|setGlobalOptions (Map<String, String> globalOptions)
specifier|public
name|void
name|setGlobalOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalOptions
parameter_list|)
block|{
name|this
operator|.
name|globalOptions
operator|=
name|globalOptions
expr_stmt|;
block|}
DECL|method|getDefaultFactoryFinder ()
specifier|public
name|FactoryFinder
name|getDefaultFactoryFinder
parameter_list|()
block|{
if|if
condition|(
name|defaultFactoryFinder
operator|==
literal|null
condition|)
block|{
name|defaultFactoryFinder
operator|=
name|getFactoryFinderResolver
argument_list|()
operator|.
name|resolveDefaultFactoryFinder
argument_list|(
name|getClassResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultFactoryFinder
return|;
block|}
DECL|method|getFactoryFinderResolver ()
specifier|public
name|FactoryFinderResolver
name|getFactoryFinderResolver
parameter_list|()
block|{
if|if
condition|(
name|factoryFinderResolver
operator|==
literal|null
condition|)
block|{
name|factoryFinderResolver
operator|=
name|createFactoryFinderResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|factoryFinderResolver
return|;
block|}
DECL|method|setFactoryFinderResolver (FactoryFinderResolver resolver)
specifier|public
name|void
name|setFactoryFinderResolver
parameter_list|(
name|FactoryFinderResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|factoryFinderResolver
operator|=
name|resolver
expr_stmt|;
block|}
DECL|method|getFactoryFinder (String path)
specifier|public
name|FactoryFinder
name|getFactoryFinder
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|NoFactoryAvailableException
block|{
synchronized|synchronized
init|(
name|factories
init|)
block|{
name|FactoryFinder
name|answer
init|=
name|factories
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|getFactoryFinderResolver
argument_list|()
operator|.
name|resolveFactoryFinder
argument_list|(
name|getClassResolver
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|factories
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getClassResolver ()
specifier|public
name|ClassResolver
name|getClassResolver
parameter_list|()
block|{
return|return
name|classResolver
return|;
block|}
DECL|method|setClassResolver (ClassResolver classResolver)
specifier|public
name|void
name|setClassResolver
parameter_list|(
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|this
operator|.
name|classResolver
operator|=
name|classResolver
expr_stmt|;
block|}
DECL|method|getPackageScanClassResolver ()
specifier|public
name|PackageScanClassResolver
name|getPackageScanClassResolver
parameter_list|()
block|{
return|return
name|packageScanClassResolver
return|;
block|}
DECL|method|setPackageScanClassResolver (PackageScanClassResolver packageScanClassResolver)
specifier|public
name|void
name|setPackageScanClassResolver
parameter_list|(
name|PackageScanClassResolver
name|packageScanClassResolver
parameter_list|)
block|{
name|this
operator|.
name|packageScanClassResolver
operator|=
name|packageScanClassResolver
expr_stmt|;
block|}
DECL|method|getComponentNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getComponentNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|components
operator|.
name|keySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getLanguageNames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLanguageNames
parameter_list|()
block|{
synchronized|synchronized
init|(
name|languages
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|languages
operator|.
name|keySet
argument_list|()
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|getModelJAXBContextFactory ()
specifier|public
name|ModelJAXBContextFactory
name|getModelJAXBContextFactory
parameter_list|()
block|{
if|if
condition|(
name|modelJAXBContextFactory
operator|==
literal|null
condition|)
block|{
name|modelJAXBContextFactory
operator|=
name|createModelJAXBContextFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|modelJAXBContextFactory
return|;
block|}
DECL|method|setModelJAXBContextFactory (final ModelJAXBContextFactory modelJAXBContextFactory)
specifier|public
name|void
name|setModelJAXBContextFactory
parameter_list|(
specifier|final
name|ModelJAXBContextFactory
name|modelJAXBContextFactory
parameter_list|)
block|{
name|this
operator|.
name|modelJAXBContextFactory
operator|=
name|modelJAXBContextFactory
expr_stmt|;
block|}
DECL|method|getNodeIdFactory ()
specifier|public
name|NodeIdFactory
name|getNodeIdFactory
parameter_list|()
block|{
return|return
name|nodeIdFactory
return|;
block|}
DECL|method|setNodeIdFactory (NodeIdFactory idFactory)
specifier|public
name|void
name|setNodeIdFactory
parameter_list|(
name|NodeIdFactory
name|idFactory
parameter_list|)
block|{
name|this
operator|.
name|nodeIdFactory
operator|=
name|idFactory
expr_stmt|;
block|}
DECL|method|getManagementStrategy ()
specifier|public
name|ManagementStrategy
name|getManagementStrategy
parameter_list|()
block|{
return|return
name|managementStrategy
return|;
block|}
DECL|method|setManagementStrategy (ManagementStrategy managementStrategy)
specifier|public
name|void
name|setManagementStrategy
parameter_list|(
name|ManagementStrategy
name|managementStrategy
parameter_list|)
block|{
name|this
operator|.
name|managementStrategy
operator|=
name|managementStrategy
expr_stmt|;
block|}
DECL|method|disableJMX ()
specifier|public
name|void
name|disableJMX
parameter_list|()
block|{
if|if
condition|(
name|isNew
argument_list|()
condition|)
block|{
name|disableJMX
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isInit
argument_list|()
condition|)
block|{
name|disableJMX
operator|=
literal|true
expr_stmt|;
name|managementStrategy
operator|=
name|createManagementStrategy
argument_list|()
expr_stmt|;
name|lifecycleStrategies
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Disabling JMX can only be done when CamelContext has not been started"
argument_list|)
throw|;
block|}
block|}
DECL|method|getInflightRepository ()
specifier|public
name|InflightRepository
name|getInflightRepository
parameter_list|()
block|{
return|return
name|inflightRepository
return|;
block|}
DECL|method|setInflightRepository (InflightRepository repository)
specifier|public
name|void
name|setInflightRepository
parameter_list|(
name|InflightRepository
name|repository
parameter_list|)
block|{
name|this
operator|.
name|inflightRepository
operator|=
name|repository
expr_stmt|;
block|}
DECL|method|getAsyncProcessorAwaitManager ()
specifier|public
name|AsyncProcessorAwaitManager
name|getAsyncProcessorAwaitManager
parameter_list|()
block|{
return|return
name|asyncProcessorAwaitManager
return|;
block|}
DECL|method|setAsyncProcessorAwaitManager (AsyncProcessorAwaitManager asyncProcessorAwaitManager)
specifier|public
name|void
name|setAsyncProcessorAwaitManager
parameter_list|(
name|AsyncProcessorAwaitManager
name|asyncProcessorAwaitManager
parameter_list|)
block|{
name|this
operator|.
name|asyncProcessorAwaitManager
operator|=
name|asyncProcessorAwaitManager
expr_stmt|;
block|}
DECL|method|setAutoStartup (Boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|Boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|Boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
operator|!=
literal|null
operator|&&
name|autoStartup
return|;
block|}
DECL|method|isLoadTypeConverters ()
specifier|public
name|Boolean
name|isLoadTypeConverters
parameter_list|()
block|{
return|return
name|loadTypeConverters
operator|!=
literal|null
operator|&&
name|loadTypeConverters
return|;
block|}
DECL|method|setLoadTypeConverters (Boolean loadTypeConverters)
specifier|public
name|void
name|setLoadTypeConverters
parameter_list|(
name|Boolean
name|loadTypeConverters
parameter_list|)
block|{
name|this
operator|.
name|loadTypeConverters
operator|=
name|loadTypeConverters
expr_stmt|;
block|}
DECL|method|isTypeConverterStatisticsEnabled ()
specifier|public
name|Boolean
name|isTypeConverterStatisticsEnabled
parameter_list|()
block|{
return|return
name|typeConverterStatisticsEnabled
operator|!=
literal|null
operator|&&
name|typeConverterStatisticsEnabled
return|;
block|}
DECL|method|setTypeConverterStatisticsEnabled (Boolean typeConverterStatisticsEnabled)
specifier|public
name|void
name|setTypeConverterStatisticsEnabled
parameter_list|(
name|Boolean
name|typeConverterStatisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|typeConverterStatisticsEnabled
operator|=
name|typeConverterStatisticsEnabled
expr_stmt|;
block|}
DECL|method|isUseMDCLogging ()
specifier|public
name|Boolean
name|isUseMDCLogging
parameter_list|()
block|{
return|return
name|useMDCLogging
operator|!=
literal|null
operator|&&
name|useMDCLogging
return|;
block|}
DECL|method|setUseMDCLogging (Boolean useMDCLogging)
specifier|public
name|void
name|setUseMDCLogging
parameter_list|(
name|Boolean
name|useMDCLogging
parameter_list|)
block|{
name|this
operator|.
name|useMDCLogging
operator|=
name|useMDCLogging
expr_stmt|;
block|}
DECL|method|isUseDataType ()
specifier|public
name|Boolean
name|isUseDataType
parameter_list|()
block|{
return|return
name|useDataType
return|;
block|}
annotation|@
name|Override
DECL|method|setUseDataType (Boolean useDataType)
specifier|public
name|void
name|setUseDataType
parameter_list|(
name|Boolean
name|useDataType
parameter_list|)
block|{
name|this
operator|.
name|useDataType
operator|=
name|useDataType
expr_stmt|;
block|}
DECL|method|isUseBreadcrumb ()
specifier|public
name|Boolean
name|isUseBreadcrumb
parameter_list|()
block|{
return|return
name|useBreadcrumb
operator|!=
literal|null
operator|&&
name|useBreadcrumb
return|;
block|}
DECL|method|setUseBreadcrumb (Boolean useBreadcrumb)
specifier|public
name|void
name|setUseBreadcrumb
parameter_list|(
name|Boolean
name|useBreadcrumb
parameter_list|)
block|{
name|this
operator|.
name|useBreadcrumb
operator|=
name|useBreadcrumb
expr_stmt|;
block|}
DECL|method|getApplicationContextClassLoader ()
specifier|public
name|ClassLoader
name|getApplicationContextClassLoader
parameter_list|()
block|{
return|return
name|applicationContextClassLoader
return|;
block|}
DECL|method|setApplicationContextClassLoader (ClassLoader classLoader)
specifier|public
name|void
name|setApplicationContextClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|applicationContextClassLoader
operator|=
name|classLoader
expr_stmt|;
block|}
DECL|method|getDataFormatResolver ()
specifier|public
name|DataFormatResolver
name|getDataFormatResolver
parameter_list|()
block|{
if|if
condition|(
name|dataFormatResolver
operator|==
literal|null
condition|)
block|{
name|dataFormatResolver
operator|=
name|createDataFormatResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|dataFormatResolver
return|;
block|}
DECL|method|setDataFormatResolver (DataFormatResolver dataFormatResolver)
specifier|public
name|void
name|setDataFormatResolver
parameter_list|(
name|DataFormatResolver
name|dataFormatResolver
parameter_list|)
block|{
name|this
operator|.
name|dataFormatResolver
operator|=
name|dataFormatResolver
expr_stmt|;
block|}
DECL|method|resolveDataFormat (String name)
specifier|public
name|DataFormat
name|resolveDataFormat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|DataFormat
name|answer
init|=
name|getDataFormatResolver
argument_list|()
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// inject CamelContext if aware
if|if
condition|(
name|answer
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|answer
operator|)
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createDataFormat (String name)
specifier|public
name|DataFormat
name|createDataFormat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|DataFormat
name|answer
init|=
name|getDataFormatResolver
argument_list|()
operator|.
name|createDataFormat
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// inject CamelContext if aware
if|if
condition|(
name|answer
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|answer
operator|)
operator|.
name|setCamelContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|resolveDataFormatDefinition (String name)
specifier|public
name|DataFormatDefinition
name|resolveDataFormatDefinition
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// lookup type and create the data format from it
name|DataFormatDefinition
name|type
init|=
name|lookup
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|DataFormatDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|getDataFormats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|getDataFormats
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
DECL|method|lookup (CamelContext context, String ref, Class<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|ref
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|ref
argument_list|,
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// need to ignore not same type and return it as null
return|return
literal|null
return|;
block|}
block|}
DECL|method|getShutdownStrategy ()
specifier|public
name|ShutdownStrategy
name|getShutdownStrategy
parameter_list|()
block|{
return|return
name|shutdownStrategy
return|;
block|}
DECL|method|setShutdownStrategy (ShutdownStrategy shutdownStrategy)
specifier|public
name|void
name|setShutdownStrategy
parameter_list|(
name|ShutdownStrategy
name|shutdownStrategy
parameter_list|)
block|{
name|this
operator|.
name|shutdownStrategy
operator|=
name|shutdownStrategy
expr_stmt|;
block|}
DECL|method|getShutdownRoute ()
specifier|public
name|ShutdownRoute
name|getShutdownRoute
parameter_list|()
block|{
return|return
name|shutdownRoute
return|;
block|}
DECL|method|setShutdownRoute (ShutdownRoute shutdownRoute)
specifier|public
name|void
name|setShutdownRoute
parameter_list|(
name|ShutdownRoute
name|shutdownRoute
parameter_list|)
block|{
name|this
operator|.
name|shutdownRoute
operator|=
name|shutdownRoute
expr_stmt|;
block|}
DECL|method|getShutdownRunningTask ()
specifier|public
name|ShutdownRunningTask
name|getShutdownRunningTask
parameter_list|()
block|{
return|return
name|shutdownRunningTask
return|;
block|}
DECL|method|setShutdownRunningTask (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|void
name|setShutdownRunningTask
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
name|this
operator|.
name|shutdownRunningTask
operator|=
name|shutdownRunningTask
expr_stmt|;
block|}
DECL|method|setAllowUseOriginalMessage (Boolean allowUseOriginalMessage)
specifier|public
name|void
name|setAllowUseOriginalMessage
parameter_list|(
name|Boolean
name|allowUseOriginalMessage
parameter_list|)
block|{
name|this
operator|.
name|allowUseOriginalMessage
operator|=
name|allowUseOriginalMessage
expr_stmt|;
block|}
DECL|method|isAllowUseOriginalMessage ()
specifier|public
name|Boolean
name|isAllowUseOriginalMessage
parameter_list|()
block|{
return|return
name|allowUseOriginalMessage
operator|!=
literal|null
operator|&&
name|allowUseOriginalMessage
return|;
block|}
DECL|method|getExecutorServiceManager ()
specifier|public
name|ExecutorServiceManager
name|getExecutorServiceManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|executorServiceManager
return|;
block|}
DECL|method|setExecutorServiceManager (ExecutorServiceManager executorServiceManager)
specifier|public
name|void
name|setExecutorServiceManager
parameter_list|(
name|ExecutorServiceManager
name|executorServiceManager
parameter_list|)
block|{
name|this
operator|.
name|executorServiceManager
operator|=
name|executorServiceManager
expr_stmt|;
block|}
DECL|method|getProcessorFactory ()
specifier|public
name|ProcessorFactory
name|getProcessorFactory
parameter_list|()
block|{
return|return
name|processorFactory
return|;
block|}
DECL|method|setProcessorFactory (ProcessorFactory processorFactory)
specifier|public
name|void
name|setProcessorFactory
parameter_list|(
name|ProcessorFactory
name|processorFactory
parameter_list|)
block|{
name|this
operator|.
name|processorFactory
operator|=
name|processorFactory
expr_stmt|;
block|}
DECL|method|getMessageHistoryFactory ()
specifier|public
name|MessageHistoryFactory
name|getMessageHistoryFactory
parameter_list|()
block|{
return|return
name|messageHistoryFactory
return|;
block|}
DECL|method|setMessageHistoryFactory (MessageHistoryFactory messageHistoryFactory)
specifier|public
name|void
name|setMessageHistoryFactory
parameter_list|(
name|MessageHistoryFactory
name|messageHistoryFactory
parameter_list|)
block|{
name|this
operator|.
name|messageHistoryFactory
operator|=
name|messageHistoryFactory
expr_stmt|;
block|}
DECL|method|getDebugger ()
specifier|public
name|Debugger
name|getDebugger
parameter_list|()
block|{
return|return
name|debugger
return|;
block|}
DECL|method|setDebugger (Debugger debugger)
specifier|public
name|void
name|setDebugger
parameter_list|(
name|Debugger
name|debugger
parameter_list|)
block|{
name|this
operator|.
name|debugger
operator|=
name|debugger
expr_stmt|;
block|}
DECL|method|getUuidGenerator ()
specifier|public
name|UuidGenerator
name|getUuidGenerator
parameter_list|()
block|{
return|return
name|uuidGenerator
return|;
block|}
DECL|method|setUuidGenerator (UuidGenerator uuidGenerator)
specifier|public
name|void
name|setUuidGenerator
parameter_list|(
name|UuidGenerator
name|uuidGenerator
parameter_list|)
block|{
name|this
operator|.
name|uuidGenerator
operator|=
name|uuidGenerator
expr_stmt|;
block|}
DECL|method|getStreamCachingStrategy ()
specifier|public
name|StreamCachingStrategy
name|getStreamCachingStrategy
parameter_list|()
block|{
if|if
condition|(
name|streamCachingStrategy
operator|==
literal|null
condition|)
block|{
name|streamCachingStrategy
operator|=
operator|new
name|DefaultStreamCachingStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|streamCachingStrategy
return|;
block|}
DECL|method|setStreamCachingStrategy (StreamCachingStrategy streamCachingStrategy)
specifier|public
name|void
name|setStreamCachingStrategy
parameter_list|(
name|StreamCachingStrategy
name|streamCachingStrategy
parameter_list|)
block|{
name|this
operator|.
name|streamCachingStrategy
operator|=
name|streamCachingStrategy
expr_stmt|;
block|}
DECL|method|getRestRegistry ()
specifier|public
name|RestRegistry
name|getRestRegistry
parameter_list|()
block|{
return|return
name|restRegistry
return|;
block|}
DECL|method|setRestRegistry (RestRegistry restRegistry)
specifier|public
name|void
name|setRestRegistry
parameter_list|(
name|RestRegistry
name|restRegistry
parameter_list|)
block|{
name|this
operator|.
name|restRegistry
operator|=
name|restRegistry
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGlobalOption (String key)
specifier|public
name|String
name|getGlobalOption
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
try|try
block|{
name|value
operator|=
name|resolvePropertyPlaceholders
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error getting global option: "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|getReloadStrategy ()
specifier|public
name|ReloadStrategy
name|getReloadStrategy
parameter_list|()
block|{
return|return
name|reloadStrategy
return|;
block|}
annotation|@
name|Override
DECL|method|setReloadStrategy (ReloadStrategy reloadStrategy)
specifier|public
name|void
name|setReloadStrategy
parameter_list|(
name|ReloadStrategy
name|reloadStrategy
parameter_list|)
block|{
name|this
operator|.
name|reloadStrategy
operator|=
name|reloadStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTransformers (List<TransformerDefinition> transformers)
specifier|public
name|void
name|setTransformers
parameter_list|(
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|transformers
parameter_list|)
block|{
name|this
operator|.
name|transformers
operator|=
name|transformers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTransformers ()
specifier|public
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|getTransformers
parameter_list|()
block|{
return|return
name|transformers
return|;
block|}
annotation|@
name|Override
DECL|method|resolveTransformer (String scheme)
specifier|public
name|Transformer
name|resolveTransformer
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
return|return
name|transformerRegistry
operator|.
name|resolveTransformer
argument_list|(
operator|new
name|TransformerKey
argument_list|(
name|scheme
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|resolveTransformer (DataType from, DataType to)
specifier|public
name|Transformer
name|resolveTransformer
parameter_list|(
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
block|{
return|return
name|transformerRegistry
operator|.
name|resolveTransformer
argument_list|(
operator|new
name|TransformerKey
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTransformerRegistry ()
specifier|public
name|TransformerRegistry
argument_list|<
name|TransformerKey
argument_list|>
name|getTransformerRegistry
parameter_list|()
block|{
return|return
name|transformerRegistry
return|;
block|}
annotation|@
name|Override
DECL|method|setValidators (List<ValidatorDefinition> validators)
specifier|public
name|void
name|setValidators
parameter_list|(
name|List
argument_list|<
name|ValidatorDefinition
argument_list|>
name|validators
parameter_list|)
block|{
name|this
operator|.
name|validators
operator|=
name|validators
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValidators ()
specifier|public
name|List
argument_list|<
name|ValidatorDefinition
argument_list|>
name|getValidators
parameter_list|()
block|{
return|return
name|validators
return|;
block|}
annotation|@
name|Override
DECL|method|resolveValidator (DataType type)
specifier|public
name|Validator
name|resolveValidator
parameter_list|(
name|DataType
name|type
parameter_list|)
block|{
return|return
name|validatorRegistry
operator|.
name|resolveValidator
argument_list|(
operator|new
name|ValidatorKey
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValidatorRegistry ()
specifier|public
name|ValidatorRegistry
argument_list|<
name|ValidatorKey
argument_list|>
name|getValidatorRegistry
parameter_list|()
block|{
return|return
name|validatorRegistry
return|;
block|}
annotation|@
name|Override
DECL|method|setSSLContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSSLContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSSLContextParameters ()
specifier|public
name|SSLContextParameters
name|getSSLContextParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|sslContextParameters
return|;
block|}
annotation|@
name|Override
DECL|method|getHeadersMapFactory ()
specifier|public
name|HeadersMapFactory
name|getHeadersMapFactory
parameter_list|()
block|{
return|return
name|headersMapFactory
return|;
block|}
annotation|@
name|Override
DECL|method|setHeadersMapFactory (HeadersMapFactory headersMapFactory)
specifier|public
name|void
name|setHeadersMapFactory
parameter_list|(
name|HeadersMapFactory
name|headersMapFactory
parameter_list|)
block|{
name|this
operator|.
name|headersMapFactory
operator|=
name|headersMapFactory
expr_stmt|;
block|}
DECL|method|getRouteServices ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|RouteService
argument_list|>
name|getRouteServices
parameter_list|()
block|{
return|return
name|routeServices
return|;
block|}
DECL|method|createManagementStrategy ()
specifier|protected
name|ManagementStrategy
name|createManagementStrategy
parameter_list|()
block|{
if|if
condition|(
operator|!
name|disableJMX
condition|)
block|{
try|try
block|{
name|ServiceLoader
argument_list|<
name|ManagementStrategyFactory
argument_list|>
name|loader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|ManagementStrategyFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ManagementStrategyFactory
argument_list|>
name|iterator
init|=
name|loader
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|create
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot create JMX lifecycle strategy. Will fallback and disable JMX."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DefaultManagementStrategy
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()      *      * @param value new value for the context counter      */
DECL|method|setContextCounter (int value)
specifier|public
specifier|static
name|void
name|setContextCounter
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|DefaultCamelContextNameStrategy
operator|.
name|setCounter
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|DefaultManagementNameStrategy
operator|.
name|setCounter
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|createDefaultUuidGenerator ()
specifier|protected
name|UuidGenerator
name|createDefaultUuidGenerator
parameter_list|()
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"com.google.appengine.runtime.environment"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// either "Production" or "Development"
return|return
operator|new
name|JavaUuidGenerator
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|DefaultUuidGenerator
argument_list|()
return|;
block|}
block|}
DECL|method|createModelJAXBContextFactory ()
specifier|protected
name|ModelJAXBContextFactory
name|createModelJAXBContextFactory
parameter_list|()
block|{
return|return
operator|new
name|DefaultModelJAXBContextFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CamelContext("
operator|+
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
DECL|class|MDCHelper
class|class
name|MDCHelper
implements|implements
name|AutoCloseable
block|{
DECL|field|originalContextMap
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|originalContextMap
decl_stmt|;
DECL|method|MDCHelper ()
name|MDCHelper
parameter_list|()
block|{
if|if
condition|(
name|isUseMDCLogging
argument_list|()
condition|)
block|{
name|originalContextMap
operator|=
name|MDC
operator|.
name|getCopyOfContextMap
argument_list|()
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|MDC_CAMEL_CONTEXT_ID
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|originalContextMap
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|isUseMDCLogging
argument_list|()
condition|)
block|{
if|if
condition|(
name|originalContextMap
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|setContextMap
argument_list|(
name|originalContextMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createNodeIdFactory ()
specifier|protected
name|NodeIdFactory
name|createNodeIdFactory
parameter_list|()
block|{
return|return
operator|new
name|DefaultNodeIdFactory
argument_list|()
return|;
block|}
DECL|method|createFactoryFinderResolver ()
specifier|protected
name|FactoryFinderResolver
name|createFactoryFinderResolver
parameter_list|()
block|{
return|return
operator|new
name|DefaultFactoryFinderResolver
argument_list|()
return|;
block|}
DECL|method|createClassResolver ()
specifier|protected
name|ClassResolver
name|createClassResolver
parameter_list|()
block|{
return|return
operator|new
name|DefaultClassResolver
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createProcessorFactory ()
specifier|protected
name|ProcessorFactory
name|createProcessorFactory
parameter_list|()
block|{
return|return
operator|new
name|DefaultProcessorFactory
argument_list|()
return|;
block|}
DECL|method|createDataFormatResolver ()
specifier|protected
name|DataFormatResolver
name|createDataFormatResolver
parameter_list|()
block|{
return|return
operator|new
name|DefaultDataFormatResolver
argument_list|()
return|;
block|}
DECL|method|createMessageHistoryFactory ()
specifier|protected
name|MessageHistoryFactory
name|createMessageHistoryFactory
parameter_list|()
block|{
return|return
operator|new
name|DefaultMessageHistoryFactory
argument_list|()
return|;
block|}
DECL|method|createInflightRepository ()
specifier|protected
name|InflightRepository
name|createInflightRepository
parameter_list|()
block|{
return|return
operator|new
name|DefaultInflightRepository
argument_list|()
return|;
block|}
DECL|method|createAsyncProcessorAwaitManager ()
specifier|protected
name|AsyncProcessorAwaitManager
name|createAsyncProcessorAwaitManager
parameter_list|()
block|{
return|return
operator|new
name|DefaultAsyncProcessorAwaitManager
argument_list|()
return|;
block|}
DECL|method|createRouteController ()
specifier|protected
name|RouteController
name|createRouteController
parameter_list|()
block|{
return|return
operator|new
name|DefaultRouteController
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createHealthCheckRegistry ()
specifier|protected
name|HealthCheckRegistry
name|createHealthCheckRegistry
parameter_list|()
block|{
return|return
operator|new
name|DefaultHealthCheckRegistry
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createShutdownStrategy ()
specifier|protected
name|ShutdownStrategy
name|createShutdownStrategy
parameter_list|()
block|{
return|return
operator|new
name|DefaultShutdownStrategy
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createPackageScanClassResolver ()
specifier|protected
name|PackageScanClassResolver
name|createPackageScanClassResolver
parameter_list|()
block|{
name|PackageScanClassResolver
name|packageScanClassResolver
decl_stmt|;
comment|// use WebSphere specific resolver if running on WebSphere
if|if
condition|(
name|WebSpherePackageScanClassResolver
operator|.
name|isWebSphereClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using WebSphere specific PackageScanClassResolver"
argument_list|)
expr_stmt|;
name|packageScanClassResolver
operator|=
operator|new
name|WebSpherePackageScanClassResolver
argument_list|(
literal|"META-INF/services/org/apache/camel/TypeConverter"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|packageScanClassResolver
operator|=
operator|new
name|DefaultPackageScanClassResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|packageScanClassResolver
return|;
block|}
DECL|method|createExecutorServiceManager ()
specifier|protected
name|ExecutorServiceManager
name|createExecutorServiceManager
parameter_list|()
block|{
return|return
operator|new
name|DefaultExecutorServiceManager
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createProducerServicePool ()
specifier|protected
name|ServicePool
argument_list|<
name|Producer
argument_list|>
name|createProducerServicePool
parameter_list|()
block|{
return|return
operator|new
name|ServicePool
argument_list|<>
argument_list|(
name|Endpoint
operator|::
name|createProducer
argument_list|,
name|Producer
operator|::
name|getEndpoint
argument_list|,
literal|100
argument_list|)
return|;
block|}
DECL|method|createPollingConsumerServicePool ()
specifier|protected
name|ServicePool
argument_list|<
name|PollingConsumer
argument_list|>
name|createPollingConsumerServicePool
parameter_list|()
block|{
return|return
operator|new
name|ServicePool
argument_list|<>
argument_list|(
name|Endpoint
operator|::
name|createPollingConsumer
argument_list|,
name|PollingConsumer
operator|::
name|getEndpoint
argument_list|,
literal|100
argument_list|)
return|;
block|}
DECL|method|createUnitOfWorkFactory ()
specifier|protected
name|UnitOfWorkFactory
name|createUnitOfWorkFactory
parameter_list|()
block|{
return|return
operator|new
name|DefaultUnitOfWorkFactory
argument_list|()
return|;
block|}
DECL|method|createRuntimeCamelCatalog ()
specifier|protected
name|RuntimeCamelCatalog
name|createRuntimeCamelCatalog
parameter_list|()
block|{
return|return
operator|new
name|DefaultRuntimeCamelCatalog
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createCamelContextNameStrategy ()
specifier|protected
name|CamelContextNameStrategy
name|createCamelContextNameStrategy
parameter_list|()
block|{
return|return
operator|new
name|DefaultCamelContextNameStrategy
argument_list|()
return|;
block|}
DECL|method|createManagementNameStrategy ()
specifier|protected
name|ManagementNameStrategy
name|createManagementNameStrategy
parameter_list|()
block|{
return|return
operator|new
name|DefaultManagementNameStrategy
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createHeadersMapFactory ()
specifier|protected
name|HeadersMapFactory
name|createHeadersMapFactory
parameter_list|()
block|{
return|return
operator|new
name|DefaultHeadersMapFactory
argument_list|()
return|;
block|}
DECL|method|createLanguageResolver ()
specifier|protected
name|LanguageResolver
name|createLanguageResolver
parameter_list|()
block|{
return|return
operator|new
name|DefaultLanguageResolver
argument_list|()
return|;
block|}
DECL|method|createEndpointRegistry (Map<EndpointKey, Endpoint> endpoints)
specifier|protected
name|EndpointRegistry
argument_list|<
name|EndpointKey
argument_list|>
name|createEndpointRegistry
parameter_list|(
name|Map
argument_list|<
name|EndpointKey
argument_list|,
name|Endpoint
argument_list|>
name|endpoints
parameter_list|)
block|{
return|return
operator|new
name|DefaultEndpointRegistry
argument_list|(
name|this
argument_list|,
name|endpoints
argument_list|)
return|;
block|}
DECL|method|createValidatorRegistry (List<ValidatorDefinition> validators)
specifier|protected
name|ValidatorRegistry
argument_list|<
name|ValidatorKey
argument_list|>
name|createValidatorRegistry
parameter_list|(
name|List
argument_list|<
name|ValidatorDefinition
argument_list|>
name|validators
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultValidatorRegistry
argument_list|(
name|this
argument_list|,
name|validators
argument_list|)
return|;
block|}
DECL|method|createTransformerRegistry (List<TransformerDefinition> transformers)
specifier|protected
name|TransformerRegistry
argument_list|<
name|TransformerKey
argument_list|>
name|createTransformerRegistry
parameter_list|(
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|transformers
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultTransformerRegistry
argument_list|(
name|this
argument_list|,
name|transformers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

