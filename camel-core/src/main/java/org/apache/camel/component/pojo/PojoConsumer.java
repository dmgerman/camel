begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pojo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|PojoConsumer
specifier|public
class|class
name|PojoConsumer
extends|extends
name|DefaultConsumer
argument_list|<
name|PojoExchange
argument_list|>
implements|implements
name|InvocationHandler
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|PojoEndpoint
name|endpoint
decl_stmt|;
DECL|method|PojoConsumer (PojoEndpoint endpoint, Processor<PojoExchange> processor)
specifier|public
name|PojoConsumer
parameter_list|(
name|PojoEndpoint
name|endpoint
parameter_list|,
name|Processor
argument_list|<
name|PojoExchange
argument_list|>
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|PojoComponent
name|component
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|PojoConsumer
name|consumer
init|=
name|component
operator|.
name|getConsumer
argument_list|(
name|endpoint
operator|.
name|getPojoId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"There is a consumer already registered for endpoint: "
operator|+
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
throw|;
block|}
name|component
operator|.
name|addConsumer
argument_list|(
name|endpoint
operator|.
name|getPojoId
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|PojoComponent
name|component
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|removeConsumer
argument_list|(
name|endpoint
operator|.
name|getPojoId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a Proxy which generates inbound exchanges on the consumer.      */
DECL|method|createProxy (ClassLoader cl, Class interfaces[])
specifier|public
name|Object
name|createProxy
parameter_list|(
name|ClassLoader
name|cl
parameter_list|,
name|Class
name|interfaces
index|[]
parameter_list|)
block|{
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|cl
argument_list|,
name|interfaces
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**      * Creates a Proxy which generates inbound exchanges on the consumer.      */
DECL|method|createProxy (Class interfaces[])
specifier|public
name|Object
name|createProxy
parameter_list|(
name|Class
name|interfaces
index|[]
parameter_list|)
block|{
if|if
condition|(
name|interfaces
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must provide at least 1 interface class."
argument_list|)
throw|;
block|}
return|return
name|createProxy
argument_list|(
name|interfaces
index|[
literal|0
index|]
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|interfaces
argument_list|)
return|;
block|}
comment|/**      * Creates a Proxy which generates inbound exchanges on the consumer.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createProxy (ClassLoader cl, Class<T> interfaceClass)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|createProxy
parameter_list|(
name|ClassLoader
name|cl
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|interfaceClass
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|createProxy
argument_list|(
name|cl
argument_list|,
operator|new
name|Class
index|[]
block|{
name|interfaceClass
block|}
argument_list|)
return|;
block|}
comment|/**      * Creates a Proxy which generates inbound exchanges on the consumer.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createProxy (Class<T> interfaceClass)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|createProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|interfaceClass
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|createProxy
argument_list|(
operator|new
name|Class
index|[]
block|{
name|interfaceClass
block|}
argument_list|)
return|;
block|}
DECL|method|invoke (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The endpoint is not active: "
operator|+
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
throw|;
block|}
name|PojoInvocation
name|invocation
init|=
operator|new
name|PojoInvocation
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|PojoExchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInvocation
argument_list|(
name|invocation
argument_list|)
expr_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Throwable
name|fault
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|fault
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvocationTargetException
argument_list|(
name|fault
argument_list|)
throw|;
block|}
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
block|}
end_class

end_unit

