begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.strategy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * File renamed using {@link Expression} to dynamically compute the file name.  *<p/>  * If most cases the {@link org.apache.camel.language.simple.FileLanguage FileLanguage} is used to  * create the expressions.  * @deprecated will be replaced with NewFile in Camel 2.0  */
end_comment

begin_class
DECL|class|FileExpressionRenamer
specifier|public
class|class
name|FileExpressionRenamer
implements|implements
name|FileRenamer
block|{
DECL|field|ON_WINDOWS
specifier|private
specifier|static
specifier|final
name|boolean
name|ON_WINDOWS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
DECL|field|expression
specifier|private
name|Expression
name|expression
decl_stmt|;
DECL|method|renameFile (FileExchange exchange, File file)
specifier|public
name|File
name|renameFile
parameter_list|(
name|FileExchange
name|exchange
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|expression
argument_list|,
literal|"expression"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// must normalize path to cater for Windows and other OS
name|name
operator|=
name|FileUtil
operator|.
name|normalizePath
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// special handling for Windows \\ paths
if|if
condition|(
name|ON_WINDOWS
operator|&&
operator|(
name|name
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|>=
literal|0
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"\\\\"
argument_list|)
operator|)
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|name
argument_list|)
return|;
block|}
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|getExpression ()
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
DECL|method|setExpression (Expression expression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
block|}
end_class

end_unit

