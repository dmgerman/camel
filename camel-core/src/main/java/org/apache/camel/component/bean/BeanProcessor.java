begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNullOrBlank
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * A {@link Processor} which converts the inbound exchange to a method  * invocation on a POJO  *   * @version $Revision: $  */
end_comment

begin_class
DECL|class|BeanProcessor
specifier|public
class|class
name|BeanProcessor
implements|implements
name|Processor
block|{
DECL|field|METHOD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|METHOD_NAME
init|=
literal|"org.apache.camel.MethodName"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BeanProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pojo
specifier|private
specifier|final
name|Object
name|pojo
decl_stmt|;
DECL|field|beanInfo
specifier|private
specifier|final
name|BeanInfo
name|beanInfo
decl_stmt|;
DECL|field|method
specifier|private
name|Method
name|method
decl_stmt|;
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
DECL|method|BeanProcessor (Object pojo, BeanInfo beanInfo)
specifier|public
name|BeanProcessor
parameter_list|(
name|Object
name|pojo
parameter_list|,
name|BeanInfo
name|beanInfo
parameter_list|)
block|{
name|this
operator|.
name|pojo
operator|=
name|pojo
expr_stmt|;
name|this
operator|.
name|beanInfo
operator|=
name|beanInfo
expr_stmt|;
block|}
DECL|method|BeanProcessor (Object pojo, CamelContext camelContext, ParameterMappingStrategy parameterMappingStrategy)
specifier|public
name|BeanProcessor
parameter_list|(
name|Object
name|pojo
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|ParameterMappingStrategy
name|parameterMappingStrategy
parameter_list|)
block|{
name|this
argument_list|(
name|pojo
argument_list|,
operator|new
name|BeanInfo
argument_list|(
name|camelContext
argument_list|,
name|pojo
operator|.
name|getClass
argument_list|()
argument_list|,
name|parameterMappingStrategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BeanProcessor (Object pojo, CamelContext camelContext)
specifier|public
name|BeanProcessor
parameter_list|(
name|Object
name|pojo
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
argument_list|(
name|pojo
argument_list|,
name|camelContext
argument_list|,
name|createParameterMappingStrategy
argument_list|(
name|camelContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createParameterMappingStrategy (CamelContext camelContext)
specifier|public
specifier|static
name|ParameterMappingStrategy
name|createParameterMappingStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|Registry
name|registry
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|ParameterMappingStrategy
name|answer
init|=
name|registry
operator|.
name|lookup
argument_list|(
name|ParameterMappingStrategy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ParameterMappingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|DefaultParameterMappingStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|description
init|=
name|method
operator|!=
literal|null
condition|?
literal|" "
operator|+
name|method
else|:
literal|""
decl_stmt|;
return|return
literal|"BeanProcessor["
operator|+
name|pojo
operator|+
name|description
operator|+
literal|"]"
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|">>>> invoking method for: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|BeanInvocation
name|beanInvoke
init|=
name|in
operator|.
name|getBody
argument_list|(
name|BeanInvocation
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInvoke
operator|!=
literal|null
condition|)
block|{
name|beanInvoke
operator|.
name|invoke
argument_list|(
name|pojo
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return;
block|}
name|MethodInvocation
name|invocation
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|invocation
operator|=
name|beanInfo
operator|.
name|createInvocation
argument_list|(
name|method
argument_list|,
name|pojo
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets pass in the method name to use if its specified
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotNullAndNonEmpty
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
if|if
condition|(
name|isNullOrBlank
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|METHOD_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|in
operator|.
name|setHeader
argument_list|(
name|METHOD_NAME
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
name|invocation
operator|=
name|beanInfo
operator|.
name|createInvocation
argument_list|(
name|pojo
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invocation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No method invocation could be created, no maching method could be found on: "
operator|+
name|pojo
argument_list|)
throw|;
block|}
try|try
block|{
name|Object
name|value
init|=
name|invocation
operator|.
name|proceed
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// lets unwrap the exception
name|Throwable
name|cause
init|=
name|e
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|cause
throw|;
block|}
else|else
block|{
comment|// TODO deal with errors!
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getMethod ()
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
DECL|method|setMethod (Method method)
specifier|public
name|void
name|setMethod
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
block|}
end_class

end_unit

