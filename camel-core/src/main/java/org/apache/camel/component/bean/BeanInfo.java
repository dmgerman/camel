begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Attachments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|OutHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|LanguageAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringQuoteHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents the metadata about a bean type created via a combination of  * introspection and annotations together with some useful sensible defaults  */
end_comment

begin_class
DECL|class|BeanInfo
specifier|public
class|class
name|BeanInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CGLIB_CLASS_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|CGLIB_CLASS_SEPARATOR
init|=
literal|"$$"
decl_stmt|;
DECL|field|EXCLUDED_METHODS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Method
argument_list|>
name|EXCLUDED_METHODS
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|component
specifier|private
specifier|final
name|BeanComponent
name|component
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
DECL|field|strategy
specifier|private
specifier|final
name|ParameterMappingStrategy
name|strategy
decl_stmt|;
DECL|field|defaultMethod
specifier|private
specifier|final
name|MethodInfo
name|defaultMethod
decl_stmt|;
comment|// shared state with details of operations introspected from the bean, created during the constructor
DECL|field|operations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MethodInfo
argument_list|>
argument_list|>
name|operations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MethodInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|operationsWithBody
specifier|private
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|operationsWithBody
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|operationsWithNoBody
specifier|private
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|operationsWithNoBody
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|operationsWithCustomAnnotation
specifier|private
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|operationsWithCustomAnnotation
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|operationsWithHandlerAnnotation
specifier|private
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|operationsWithHandlerAnnotation
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|methodMap
specifier|private
name|Map
argument_list|<
name|Method
argument_list|,
name|MethodInfo
argument_list|>
name|methodMap
init|=
operator|new
name|HashMap
argument_list|<
name|Method
argument_list|,
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// exclude all java.lang.Object methods as we dont want to invoke them
name|EXCLUDED_METHODS
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getMethods
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// exclude all java.lang.reflect.Proxy methods as we dont want to invoke them
name|EXCLUDED_METHODS
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Proxy
operator|.
name|class
operator|.
name|getMethods
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// but keep toString as this method is okay
name|EXCLUDED_METHODS
operator|.
name|remove
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|)
argument_list|)
expr_stmt|;
name|EXCLUDED_METHODS
operator|.
name|remove
argument_list|(
name|Proxy
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
DECL|method|BeanInfo (CamelContext camelContext, Class<?> type)
specifier|public
name|BeanInfo
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|camelContext
argument_list|,
name|type
argument_list|,
name|createParameterMappingStrategy
argument_list|(
name|camelContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BeanInfo (CamelContext camelContext, Method explicitMethod)
specifier|public
name|BeanInfo
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Method
name|explicitMethod
parameter_list|)
block|{
name|this
argument_list|(
name|camelContext
argument_list|,
name|explicitMethod
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|explicitMethod
argument_list|,
name|createParameterMappingStrategy
argument_list|(
name|camelContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BeanInfo (CamelContext camelContext, Class<?> type, ParameterMappingStrategy strategy)
specifier|public
name|BeanInfo
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|ParameterMappingStrategy
name|strategy
parameter_list|)
block|{
name|this
argument_list|(
name|camelContext
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
DECL|method|BeanInfo (CamelContext camelContext, Class<?> type, Method explicitMethod, ParameterMappingStrategy strategy)
specifier|public
name|BeanInfo
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Method
name|explicitMethod
parameter_list|,
name|ParameterMappingStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|camelContext
operator|.
name|getComponent
argument_list|(
literal|"bean"
argument_list|,
name|BeanComponent
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|BeanInfoCacheKey
name|key
init|=
operator|new
name|BeanInfoCacheKey
argument_list|(
name|type
argument_list|,
name|explicitMethod
argument_list|)
decl_stmt|;
comment|// lookup if we have a bean info cache
name|BeanInfo
name|beanInfo
init|=
name|component
operator|.
name|getBeanInfoFromCache
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInfo
operator|!=
literal|null
condition|)
block|{
comment|// copy the values from the cache we need
name|defaultMethod
operator|=
name|beanInfo
operator|.
name|defaultMethod
expr_stmt|;
name|operations
operator|=
name|beanInfo
operator|.
name|operations
expr_stmt|;
name|operationsWithBody
operator|=
name|beanInfo
operator|.
name|operationsWithBody
expr_stmt|;
name|operationsWithNoBody
operator|=
name|beanInfo
operator|.
name|operationsWithNoBody
expr_stmt|;
name|operationsWithCustomAnnotation
operator|=
name|beanInfo
operator|.
name|operationsWithCustomAnnotation
expr_stmt|;
name|operationsWithHandlerAnnotation
operator|=
name|beanInfo
operator|.
name|operationsWithHandlerAnnotation
expr_stmt|;
name|methodMap
operator|=
name|beanInfo
operator|.
name|methodMap
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|explicitMethod
operator|!=
literal|null
condition|)
block|{
comment|// must be a valid method
if|if
condition|(
operator|!
name|isValidMethod
argument_list|(
name|type
argument_list|,
name|explicitMethod
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The method "
operator|+
name|explicitMethod
operator|+
literal|" is not valid (for example the method must be public)"
argument_list|)
throw|;
block|}
name|introspect
argument_list|(
name|getType
argument_list|()
argument_list|,
name|explicitMethod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|introspect
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if there are only 1 method with 1 operation then select it as a default/fallback method
name|MethodInfo
name|method
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operations
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|methods
init|=
name|operations
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|methods
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|method
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|defaultMethod
operator|=
name|method
expr_stmt|;
comment|// mark the operations lists as unmodifiable, as they should not change during runtime
comment|// to keep this code thread safe
name|operations
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|operationsWithBody
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|operationsWithBody
argument_list|)
expr_stmt|;
name|operationsWithNoBody
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|operationsWithNoBody
argument_list|)
expr_stmt|;
name|operationsWithCustomAnnotation
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|operationsWithCustomAnnotation
argument_list|)
expr_stmt|;
name|operationsWithHandlerAnnotation
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|operationsWithHandlerAnnotation
argument_list|)
expr_stmt|;
name|methodMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|methodMap
argument_list|)
expr_stmt|;
comment|// add new bean info to cache
name|component
operator|.
name|addBeanInfoToCache
argument_list|(
name|key
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|createParameterMappingStrategy (CamelContext camelContext)
specifier|public
specifier|static
name|ParameterMappingStrategy
name|createParameterMappingStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
comment|// lookup in registry first if there is a user define strategy
name|Registry
name|registry
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|ParameterMappingStrategy
name|answer
init|=
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
name|BeanConstants
operator|.
name|BEAN_PARAMETER_MAPPING_STRATEGY
argument_list|,
name|ParameterMappingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// no then use the default one
name|answer
operator|=
operator|new
name|DefaultParameterMappingStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createInvocation (Object pojo, Exchange exchange)
specifier|public
name|MethodInvocation
name|createInvocation
parameter_list|(
name|Object
name|pojo
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|AmbiguousMethodCallException
throws|,
name|MethodNotFoundException
block|{
return|return
name|createInvocation
argument_list|(
name|pojo
argument_list|,
name|exchange
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createInvocation (Object pojo, Exchange exchange, Method explicitMethod)
specifier|private
name|MethodInvocation
name|createInvocation
parameter_list|(
name|Object
name|pojo
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Method
name|explicitMethod
parameter_list|)
throws|throws
name|AmbiguousMethodCallException
throws|,
name|MethodNotFoundException
block|{
name|MethodInfo
name|methodInfo
init|=
literal|null
decl_stmt|;
comment|// find the explicit method to invoke
if|if
condition|(
name|explicitMethod
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|List
argument_list|<
name|MethodInfo
argument_list|>
argument_list|>
name|it
init|=
name|operations
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|infos
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodInfo
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|explicitMethod
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|info
operator|.
name|createMethodInvocation
argument_list|(
name|pojo
argument_list|,
name|exchange
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|MethodNotFoundException
argument_list|(
name|exchange
argument_list|,
name|pojo
argument_list|,
name|explicitMethod
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|methodName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|BEAN_METHOD_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodName
operator|!=
literal|null
condition|)
block|{
comment|// do not use qualifier for name
name|String
name|name
init|=
name|methodName
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|name
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|methodName
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
block|}
name|boolean
name|emptyParameters
init|=
name|methodName
operator|.
name|endsWith
argument_list|(
literal|"()"
argument_list|)
decl_stmt|;
comment|// special for getClass, as we want the user to be able to invoke this method
comment|// for example to log the class type or the likes
if|if
condition|(
literal|"class"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"getClass"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|pojo
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getClass"
argument_list|)
decl_stmt|;
name|methodInfo
operator|=
operator|new
name|MethodInfo
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|pojo
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterInfo
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ParameterInfo
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MethodNotFoundException
argument_list|(
name|exchange
argument_list|,
name|pojo
argument_list|,
literal|"getClass"
argument_list|)
throw|;
block|}
comment|// special for length on an array type
block|}
elseif|else
if|if
condition|(
literal|"length"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|pojo
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
try|try
block|{
comment|// need to use arrayLength method from ObjectHelper as Camel's bean OGNL support is method invocation based
comment|// and not for accessing fields. And hence we need to create a MethodInfo instance with a method to call
comment|// and therefore use arrayLength from ObjectHelper to return the array length field.
name|Method
name|method
init|=
name|ObjectHelper
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"arrayLength"
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|ParameterInfo
name|pi
init|=
operator|new
name|ParameterInfo
argument_list|(
literal|0
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
literal|null
argument_list|,
name|ExpressionBuilder
operator|.
name|mandatoryBodyExpression
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|lpi
init|=
operator|new
name|ArrayList
argument_list|<
name|ParameterInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|lpi
operator|.
name|add
argument_list|(
name|pi
argument_list|)
expr_stmt|;
name|methodInfo
operator|=
operator|new
name|MethodInfo
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|pojo
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
argument_list|,
name|lpi
argument_list|,
name|lpi
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Need to update the message body to be pojo for the invocation
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|pojo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MethodNotFoundException
argument_list|(
name|exchange
argument_list|,
name|pojo
argument_list|,
literal|"getClass"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|methods
init|=
name|getOperations
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
operator|&&
name|methods
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// only one method then choose it
name|methodInfo
operator|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// validate that if we want an explict no-arg method, then that's what we get
if|if
condition|(
name|emptyParameters
operator|&&
name|methodInfo
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MethodNotFoundException
argument_list|(
name|exchange
argument_list|,
name|pojo
argument_list|,
name|methodName
argument_list|,
literal|"(with no parameters)"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|methods
operator|!=
literal|null
condition|)
block|{
comment|// there are more methods with that name so we cannot decide which to use
comment|// but first let's try to choose a method and see if that complies with the name
comment|// must use the method name which may have qualifiers
name|methodInfo
operator|=
name|chooseMethod
argument_list|(
name|pojo
argument_list|,
name|exchange
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
comment|// validate that if we want an explicit no-arg method, then that's what we get
if|if
condition|(
name|emptyParameters
condition|)
block|{
if|if
condition|(
name|methodInfo
operator|==
literal|null
operator|||
name|methodInfo
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
comment|// we could not find a no-arg method with that name
throw|throw
operator|new
name|MethodNotFoundException
argument_list|(
name|exchange
argument_list|,
name|pojo
argument_list|,
name|methodName
argument_list|,
literal|"(with no parameters)"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|methodInfo
operator|==
literal|null
operator|||
operator|!
name|name
operator|.
name|equals
argument_list|(
name|methodInfo
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AmbiguousMethodCallException
argument_list|(
name|exchange
argument_list|,
name|methods
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// a specific method was given to invoke but not found
throw|throw
operator|new
name|MethodNotFoundException
argument_list|(
name|exchange
argument_list|,
name|pojo
argument_list|,
name|methodName
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|methodInfo
operator|==
literal|null
condition|)
block|{
comment|// no name or type
name|methodInfo
operator|=
name|chooseMethod
argument_list|(
name|pojo
argument_list|,
name|exchange
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|methodInfo
operator|==
literal|null
condition|)
block|{
name|methodInfo
operator|=
name|defaultMethod
expr_stmt|;
block|}
if|if
condition|(
name|methodInfo
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Chosen method to invoke: {} on bean: {}"
argument_list|,
name|methodInfo
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
return|return
name|methodInfo
operator|.
name|createMethodInvocation
argument_list|(
name|pojo
argument_list|,
name|exchange
argument_list|)
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot find suitable method to invoke on bean: {}"
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Introspects the given class      *      * @param clazz the class      */
DECL|method|introspect (Class<?> clazz)
specifier|private
name|void
name|introspect
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
comment|// get the target clazz as it could potentially have been enhanced by CGLIB etc.
name|clazz
operator|=
name|getTargetClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|clazz
argument_list|,
literal|"clazz"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Introspecting class: {}"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
comment|// favor declared methods, and then filter out duplicate interface methods
name|List
argument_list|<
name|Method
argument_list|>
name|methods
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Preferring class methods as class: {} is public accessible"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|methods
operator|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Preferring interface methods as class: {} is not public accessible"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|methods
operator|=
name|getInterfaceMethods
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
comment|// and then we must add its declared methods as well
name|List
argument_list|<
name|Method
argument_list|>
name|extraMethods
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
decl_stmt|;
name|methods
operator|.
name|addAll
argument_list|(
name|extraMethods
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Method
argument_list|>
name|overrides
init|=
operator|new
name|HashSet
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
comment|// do not remove duplicates form class from the Java itself as they have some "duplicates" we need
name|boolean
name|javaClass
init|=
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
operator|||
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"javax."
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|javaClass
condition|)
block|{
comment|// it may have duplicate methods already, even from declared or from interfaces + declared
for|for
control|(
name|Method
name|source
range|:
name|methods
control|)
block|{
for|for
control|(
name|Method
name|target
range|:
name|methods
control|)
block|{
comment|// skip ourselves
if|if
condition|(
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// skip duplicates which may be assign compatible (favor keep first added method when duplicate)
if|if
condition|(
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|overrides
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|methods
operator|.
name|removeAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// if we are a public class, then add non duplicate interface classes also
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
comment|// add additional interface methods
name|List
argument_list|<
name|Method
argument_list|>
name|extraMethods
init|=
name|getInterfaceMethods
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|Method
name|target
range|:
name|extraMethods
control|)
block|{
for|for
control|(
name|Method
name|source
range|:
name|methods
control|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|overrides
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remove all the overrides methods
name|extraMethods
operator|.
name|removeAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|methods
operator|.
name|addAll
argument_list|(
name|extraMethods
argument_list|)
expr_stmt|;
block|}
comment|// now introspect the methods and filter non valid methods
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|boolean
name|valid
init|=
name|isValidMethod
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Method: {} is valid: {}"
argument_list|,
name|method
argument_list|,
name|valid
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|introspect
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
init|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
operator|&&
operator|!
name|superclass
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
name|introspect
argument_list|(
name|superclass
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Introspects the given method      *      * @param clazz the class      * @param method the method      * @return the method info, is newer<tt>null</tt>      */
DECL|method|introspect (Class<?> clazz, Method method)
specifier|private
name|MethodInfo
name|introspect
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Introspecting class: {}, method: {}"
argument_list|,
name|clazz
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|String
name|opName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MethodInfo
name|methodInfo
init|=
name|createMethodInfo
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|)
decl_stmt|;
comment|// methods already registered should be preferred to use instead of super classes of existing methods
comment|// we want to us the method from the sub class over super classes, so if we have already registered
comment|// the method then use it (we are traversing upwards: sub (child) -> super (farther) )
name|MethodInfo
name|existingMethodInfo
init|=
name|overridesExistingMethod
argument_list|(
name|methodInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingMethodInfo
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"This method is already overridden in a subclass, so the method from the sub class is preferred: {}"
argument_list|,
name|existingMethodInfo
argument_list|)
expr_stmt|;
return|return
name|existingMethodInfo
return|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding operation: {} for method: {}"
argument_list|,
name|opName
argument_list|,
name|methodInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMethod
argument_list|(
name|opName
argument_list|)
condition|)
block|{
comment|// we have an overloaded method so add the method info to the same key
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|existing
init|=
name|getOperations
argument_list|(
name|opName
argument_list|)
decl_stmt|;
name|existing
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// its a new method we have not seen before so wrap it in a list and add it
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
name|methods
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
name|operations
operator|.
name|put
argument_list|(
name|opName
argument_list|,
name|methods
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|methodInfo
operator|.
name|hasCustomAnnotation
argument_list|()
condition|)
block|{
name|operationsWithCustomAnnotation
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodInfo
operator|.
name|hasBodyParameter
argument_list|()
condition|)
block|{
name|operationsWithBody
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operationsWithNoBody
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|methodInfo
operator|.
name|hasHandlerAnnotation
argument_list|()
condition|)
block|{
name|operationsWithHandlerAnnotation
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
block|}
comment|// must add to method map last otherwise we break stuff
name|methodMap
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|methodInfo
argument_list|)
expr_stmt|;
return|return
name|methodInfo
return|;
block|}
comment|/**      * Returns the {@link MethodInfo} for the given method if it exists or null      * if there is no metadata available for the given method      */
DECL|method|getMethodInfo (Method method)
specifier|public
name|MethodInfo
name|getMethodInfo
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|MethodInfo
name|answer
init|=
name|methodMap
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// maybe the method overrides, and the method map keeps info of the source override we can use
for|for
control|(
name|Method
name|source
range|:
name|methodMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|source
argument_list|,
name|method
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|answer
operator|=
name|methodMap
operator|.
name|get
argument_list|(
name|source
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// maybe the method is defined on a base class?
if|if
condition|(
name|type
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
init|=
name|type
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
operator|&&
name|superclass
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|BeanInfo
name|superBeanInfo
init|=
operator|new
name|BeanInfo
argument_list|(
name|camelContext
argument_list|,
name|superclass
argument_list|,
name|strategy
argument_list|)
decl_stmt|;
return|return
name|superBeanInfo
operator|.
name|getMethodInfo
argument_list|(
name|method
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|createMethodInfo (Class<?> clazz, Method method)
specifier|protected
name|MethodInfo
name|createMethodInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Annotation
argument_list|>
index|[]
name|parametersAnnotations
init|=
name|collectParameterAnnotations
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ParameterInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParameterInfo
argument_list|>
name|bodyParameters
init|=
operator|new
name|ArrayList
argument_list|<
name|ParameterInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasCustomAnnotation
init|=
literal|false
decl_stmt|;
name|boolean
name|hasHandlerAnnotation
init|=
name|ObjectHelper
operator|.
name|hasAnnotation
argument_list|(
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|Handler
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|parameterTypes
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating MethodInfo for class: {} method: {} having {} parameters"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|clazz
block|,
name|method
block|,
name|size
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|parameterTypes
index|[
name|i
index|]
decl_stmt|;
name|Annotation
index|[]
name|parameterAnnotations
init|=
name|parametersAnnotations
index|[
name|i
index|]
operator|.
name|toArray
argument_list|(
operator|new
name|Annotation
index|[
name|parametersAnnotations
index|[
name|i
index|]
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Expression
name|expression
init|=
name|createParameterUnmarshalExpression
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|)
decl_stmt|;
name|hasCustomAnnotation
operator||=
name|expression
operator|!=
literal|null
expr_stmt|;
name|ParameterInfo
name|parameterInfo
init|=
operator|new
name|ParameterInfo
argument_list|(
name|i
argument_list|,
name|parameterType
argument_list|,
name|parameterAnnotations
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{}: {}"
argument_list|,
name|i
argument_list|,
name|parameterInfo
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
name|parameterInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
name|boolean
name|bodyAnnotation
init|=
name|ObjectHelper
operator|.
name|hasAnnotation
argument_list|(
name|parameterAnnotations
argument_list|,
name|Body
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{} has @Body annotation"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|hasCustomAnnotation
operator||=
name|bodyAnnotation
expr_stmt|;
if|if
condition|(
name|bodyParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// okay we have not yet set the body parameter and we have found
comment|// the candidate now to use as body parameter
if|if
condition|(
name|Exchange
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|parameterType
argument_list|)
condition|)
block|{
comment|// use exchange
name|expression
operator|=
name|ExpressionBuilder
operator|.
name|exchangeExpression
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// assume it's the body and it must be mandatory convertible to the parameter type
comment|// but we allow null bodies in case the message really contains a null body
name|expression
operator|=
name|ExpressionBuilder
operator|.
name|mandatoryBodyExpression
argument_list|(
name|parameterType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{} is the body parameter using expression {}"
argument_list|,
name|i
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|parameterInfo
operator|.
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|bodyParameters
operator|.
name|add
argument_list|(
name|parameterInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// will ignore the expression for parameter evaluation
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parameter #{} has parameter info: "
argument_list|,
name|i
argument_list|,
name|parameterInfo
argument_list|)
expr_stmt|;
block|}
comment|// now let's add the method to the repository
return|return
operator|new
name|MethodInfo
argument_list|(
name|camelContext
argument_list|,
name|clazz
argument_list|,
name|method
argument_list|,
name|parameters
argument_list|,
name|bodyParameters
argument_list|,
name|hasCustomAnnotation
argument_list|,
name|hasHandlerAnnotation
argument_list|)
return|;
block|}
DECL|method|collectParameterAnnotations (Class<?> c, Method m)
specifier|protected
name|List
argument_list|<
name|Annotation
argument_list|>
index|[]
name|collectParameterAnnotations
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Annotation
argument_list|>
index|[]
name|annotations
init|=
operator|new
name|List
index|[
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|annotations
index|[
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Annotation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|collectParameterAnnotations
argument_list|(
name|c
argument_list|,
name|m
argument_list|,
name|annotations
argument_list|)
expr_stmt|;
return|return
name|annotations
return|;
block|}
DECL|method|collectParameterAnnotations (Class<?> c, Method m, List<Annotation>[] a)
specifier|protected
name|void
name|collectParameterAnnotations
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Method
name|m
parameter_list|,
name|List
argument_list|<
name|Annotation
argument_list|>
index|[]
name|a
parameter_list|)
block|{
try|try
block|{
name|Annotation
index|[]
index|[]
name|pa
init|=
name|c
operator|.
name|getDeclaredMethod
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pa
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|pa
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// no method with signature of m declared on c
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|i
range|:
name|c
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|collectParameterAnnotations
argument_list|(
name|i
argument_list|,
name|m
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|c
operator|.
name|isInterface
argument_list|()
operator|&&
name|c
operator|.
name|getSuperclass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|collectParameterAnnotations
argument_list|(
name|c
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|m
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Choose one of the available methods to invoke if we can match      * the message body to the body parameter      *      * @param pojo the bean to invoke a method on      * @param exchange the message exchange      * @param name an optional name of the method that must match, use<tt>null</tt> to indicate all methods      * @return the method to invoke or null if no definitive method could be matched      * @throws AmbiguousMethodCallException is thrown if cannot choose method due to ambiguity      */
DECL|method|chooseMethod (Object pojo, Exchange exchange, String name)
specifier|protected
name|MethodInfo
name|chooseMethod
parameter_list|(
name|Object
name|pojo
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|AmbiguousMethodCallException
block|{
comment|// @Handler should be select first
comment|// then any single method that has a custom @annotation
comment|// or any single method that has a match parameter type that matches the Exchange payload
comment|// and last then try to select the best among the rest
comment|// must use defensive copy, to avoid altering the shared lists
comment|// and we want to remove unwanted operations from these local lists
specifier|final
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|localOperationsWithBody
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|(
name|operationsWithBody
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|localOperationsWithNoBody
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|(
name|operationsWithNoBody
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|localOperationsWithCustomAnnotation
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|(
name|operationsWithCustomAnnotation
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|localOperationsWithHandlerAnnotation
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|(
name|operationsWithHandlerAnnotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
comment|// filter all lists to only include methods with this name
name|removeNonMatchingMethods
argument_list|(
name|localOperationsWithHandlerAnnotation
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|removeNonMatchingMethods
argument_list|(
name|localOperationsWithCustomAnnotation
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|removeNonMatchingMethods
argument_list|(
name|localOperationsWithBody
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|removeNonMatchingMethods
argument_list|(
name|localOperationsWithNoBody
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// remove all getter/setter as we do not want to consider these methods
name|removeAllSetterOrGetterMethods
argument_list|(
name|localOperationsWithHandlerAnnotation
argument_list|)
expr_stmt|;
name|removeAllSetterOrGetterMethods
argument_list|(
name|localOperationsWithCustomAnnotation
argument_list|)
expr_stmt|;
name|removeAllSetterOrGetterMethods
argument_list|(
name|localOperationsWithBody
argument_list|)
expr_stmt|;
name|removeAllSetterOrGetterMethods
argument_list|(
name|localOperationsWithNoBody
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localOperationsWithHandlerAnnotation
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// if we have more than 1 @Handler then its ambiguous
throw|throw
operator|new
name|AmbiguousMethodCallException
argument_list|(
name|exchange
argument_list|,
name|localOperationsWithHandlerAnnotation
argument_list|)
throw|;
block|}
if|if
condition|(
name|localOperationsWithHandlerAnnotation
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// methods with handler should be preferred
return|return
name|localOperationsWithHandlerAnnotation
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|localOperationsWithCustomAnnotation
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// if there is one method with an annotation then use that one
return|return
name|localOperationsWithCustomAnnotation
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// named method and with no parameters
name|boolean
name|noParameters
init|=
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|"()"
argument_list|)
decl_stmt|;
if|if
condition|(
name|noParameters
operator|&&
name|localOperationsWithNoBody
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// if there was a method name configured and it has no parameters, then use the method with no body (eg no parameters)
return|return
name|localOperationsWithNoBody
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|noParameters
operator|&&
name|localOperationsWithBody
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|localOperationsWithCustomAnnotation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if there is one method with body then use that one
return|return
name|localOperationsWithBody
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|possibleOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
name|possibleOperations
operator|.
name|addAll
argument_list|(
name|localOperationsWithBody
argument_list|)
expr_stmt|;
name|possibleOperations
operator|.
name|addAll
argument_list|(
name|localOperationsWithCustomAnnotation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|possibleOperations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// multiple possible operations so find the best suited if possible
name|MethodInfo
name|answer
init|=
name|chooseMethodWithMatchingBody
argument_list|(
name|exchange
argument_list|,
name|possibleOperations
argument_list|,
name|localOperationsWithCustomAnnotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
comment|// do we have hardcoded parameters values provided from the method name then fallback and try that
name|String
name|parameters
init|=
name|ObjectHelper
operator|.
name|between
argument_list|(
name|name
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
comment|// special as we have hardcoded parameters, so we need to choose method that matches those parameters the best
name|answer
operator|=
name|chooseMethodWithMatchingParameters
argument_list|(
name|exchange
argument_list|,
name|parameters
argument_list|,
name|possibleOperations
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|possibleOperations
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|answer
operator|=
name|getSingleCovariantMethod
argument_list|(
name|possibleOperations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AmbiguousMethodCallException
argument_list|(
name|exchange
argument_list|,
name|possibleOperations
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|answer
return|;
block|}
block|}
comment|// not possible to determine
return|return
literal|null
return|;
block|}
DECL|method|chooseMethodWithMatchingParameters (Exchange exchange, String parameters, Collection<MethodInfo> operationList)
specifier|private
name|MethodInfo
name|chooseMethodWithMatchingParameters
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|parameters
parameter_list|,
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|operationList
parameter_list|)
throws|throws
name|AmbiguousMethodCallException
block|{
comment|// we have hardcoded parameters so need to match that with the given operations
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodInfo
name|info
range|:
name|operationList
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|count
condition|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|operations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|operations
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|operations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// okay we still got multiple operations, so need to match the best one
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodInfo
name|info
range|:
name|operations
control|)
block|{
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|parameter
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|BeanHelper
operator|.
name|getValidParameterType
argument_list|(
name|parameter
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
init|=
name|info
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterType
operator|!=
literal|null
operator|&&
name|expectedType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|index
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|matches
condition|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|MethodInfo
name|answer
init|=
name|getSingleCovariantMethod
argument_list|(
name|candidates
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AmbiguousMethodCallException
argument_list|(
name|exchange
argument_list|,
name|candidates
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
return|return
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|getSingleCovariantMethod (Collection<MethodInfo> candidates)
specifier|private
name|MethodInfo
name|getSingleCovariantMethod
parameter_list|(
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|candidates
parameter_list|)
block|{
comment|// if all the candidates are actually covariant, it doesn't matter which one we call
name|MethodInfo
name|firstCandidate
init|=
name|candidates
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodInfo
name|candidate
range|:
name|candidates
control|)
block|{
if|if
condition|(
operator|!
name|firstCandidate
operator|.
name|isCovariantWith
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|firstCandidate
return|;
block|}
DECL|method|chooseMethodWithMatchingBody (Exchange exchange, Collection<MethodInfo> operationList, List<MethodInfo> operationsWithCustomAnnotation)
specifier|private
name|MethodInfo
name|chooseMethodWithMatchingBody
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|operationList
parameter_list|,
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|operationsWithCustomAnnotation
parameter_list|)
throws|throws
name|AmbiguousMethodCallException
block|{
comment|// see if we can find a method whose body param type matches the message body
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Object
name|body
init|=
name|in
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|bodyType
init|=
name|body
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Matching for method with a single parameter that matches type: {}"
argument_list|,
name|bodyType
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|possibles
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|possiblesWithException
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodInfo
name|methodInfo
range|:
name|operationList
control|)
block|{
comment|// test for MEP pattern matching
name|boolean
name|out
init|=
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
decl_stmt|;
if|if
condition|(
name|out
operator|&&
name|methodInfo
operator|.
name|isReturnTypeVoid
argument_list|()
condition|)
block|{
comment|// skip this method as the MEP is Out so the method must return something
continue|continue;
block|}
comment|// try to match the arguments
if|if
condition|(
name|methodInfo
operator|.
name|bodyParameterMatches
argument_list|(
name|bodyType
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found a possible method: {}"
argument_list|,
name|methodInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|methodInfo
operator|.
name|hasExceptionParameter
argument_list|()
condition|)
block|{
comment|// methods with accepts exceptions
name|possiblesWithException
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// regular methods with no exceptions
name|possibles
operator|.
name|add
argument_list|(
name|methodInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// find best suited method to use
return|return
name|chooseBestPossibleMethodInfo
argument_list|(
name|exchange
argument_list|,
name|operationList
argument_list|,
name|body
argument_list|,
name|possibles
argument_list|,
name|possiblesWithException
argument_list|,
name|operationsWithCustomAnnotation
argument_list|)
return|;
block|}
comment|// no match so return null
return|return
literal|null
return|;
block|}
DECL|method|chooseBestPossibleMethodInfo (Exchange exchange, Collection<MethodInfo> operationList, Object body, List<MethodInfo> possibles, List<MethodInfo> possiblesWithException, List<MethodInfo> possibleWithCustomAnnotation)
specifier|private
name|MethodInfo
name|chooseBestPossibleMethodInfo
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|operationList
parameter_list|,
name|Object
name|body
parameter_list|,
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|possibles
parameter_list|,
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|possiblesWithException
parameter_list|,
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|possibleWithCustomAnnotation
parameter_list|)
throws|throws
name|AmbiguousMethodCallException
block|{
name|Exception
name|exception
init|=
name|ExpressionBuilder
operator|.
name|exchangeExceptionExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
operator|&&
name|possiblesWithException
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exchange has exception set so we prefer method that also has exception as parameter"
argument_list|)
expr_stmt|;
comment|// prefer the method that accepts exception in case we have an exception also
return|return
name|possiblesWithException
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|possibles
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|possibles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|possibles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No possible methods so now trying to convert body to parameter types"
argument_list|)
expr_stmt|;
comment|// let's try converting
name|Object
name|newBody
init|=
literal|null
decl_stmt|;
name|MethodInfo
name|matched
init|=
literal|null
decl_stmt|;
name|int
name|matchCounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MethodInfo
name|methodInfo
range|:
name|operationList
control|)
block|{
if|if
condition|(
name|methodInfo
operator|.
name|getBodyParameterType
argument_list|()
operator|.
name|isInstance
argument_list|(
name|body
argument_list|)
condition|)
block|{
return|return
name|methodInfo
return|;
block|}
comment|// we should only try to convert, as we are looking for best match
name|Object
name|value
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|methodInfo
operator|.
name|getBodyParameterType
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Converted body from: {} to: {}"
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|methodInfo
operator|.
name|getBodyParameterType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|matchCounter
operator|++
expr_stmt|;
name|newBody
operator|=
name|value
expr_stmt|;
name|matched
operator|=
name|methodInfo
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matchCounter
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|AmbiguousMethodCallException
argument_list|(
name|exchange
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|matched
argument_list|,
name|matched
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting converted body: {}"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|newBody
argument_list|)
expr_stmt|;
return|return
name|matched
return|;
block|}
block|}
else|else
block|{
comment|// if we only have a single method with custom annotations, let's use that one
if|if
condition|(
name|possibleWithCustomAnnotation
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|MethodInfo
name|answer
init|=
name|possibleWithCustomAnnotation
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"There are only one method with annotations so we choose it: {}"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|// try to choose among multiple methods with annotations
name|MethodInfo
name|chosen
init|=
name|chooseMethodWithCustomAnnotations
argument_list|(
name|exchange
argument_list|,
name|possibles
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosen
operator|!=
literal|null
condition|)
block|{
return|return
name|chosen
return|;
block|}
comment|// just make sure the methods aren't all actually the same
name|chosen
operator|=
name|getSingleCovariantMethod
argument_list|(
name|possibles
argument_list|)
expr_stmt|;
if|if
condition|(
name|chosen
operator|!=
literal|null
condition|)
block|{
return|return
name|chosen
return|;
block|}
throw|throw
operator|new
name|AmbiguousMethodCallException
argument_list|(
name|exchange
argument_list|,
name|possibles
argument_list|)
throw|;
block|}
comment|// cannot find a good method to use
return|return
literal|null
return|;
block|}
comment|/**      * Validates whether the given method is a valid candidate for Camel Bean Binding.      *      * @param clazz   the class      * @param method  the method      * @return true if valid, false to skip the method      */
DECL|method|isValidMethod (Class<?> clazz, Method method)
specifier|protected
name|boolean
name|isValidMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
comment|// must not be in the excluded list
for|for
control|(
name|Method
name|excluded
range|:
name|EXCLUDED_METHODS
control|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|excluded
argument_list|,
name|method
argument_list|)
condition|)
block|{
comment|// the method is overriding an excluded method so its not valid
return|return
literal|false
return|;
block|}
block|}
comment|// must be a public method
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// return type must not be an Exchange and it should not be a bridge method
if|if
condition|(
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
literal|null
operator|&&
name|Exchange
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
operator|)
operator|||
name|method
operator|.
name|isBridge
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Does the given method info override an existing method registered before (from a subclass)      *      * @param methodInfo  the method to test      * @return the already registered method to use, null if not overriding any      */
DECL|method|overridesExistingMethod (MethodInfo methodInfo)
specifier|private
name|MethodInfo
name|overridesExistingMethod
parameter_list|(
name|MethodInfo
name|methodInfo
parameter_list|)
block|{
for|for
control|(
name|MethodInfo
name|info
range|:
name|methodMap
operator|.
name|values
argument_list|()
control|)
block|{
name|Method
name|source
init|=
name|info
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|Method
name|target
init|=
name|methodInfo
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|boolean
name|override
init|=
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|override
condition|)
block|{
comment|// same name, same parameters, then its overrides an existing class
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|chooseMethodWithCustomAnnotations (Exchange exchange, Collection<MethodInfo> possibles)
specifier|private
name|MethodInfo
name|chooseMethodWithCustomAnnotations
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|possibles
parameter_list|)
throws|throws
name|AmbiguousMethodCallException
block|{
comment|// if we have only one method with custom annotations let's choose that
name|MethodInfo
name|chosen
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MethodInfo
name|possible
range|:
name|possibles
control|)
block|{
if|if
condition|(
name|possible
operator|.
name|hasCustomAnnotation
argument_list|()
condition|)
block|{
if|if
condition|(
name|chosen
operator|!=
literal|null
condition|)
block|{
name|chosen
operator|=
literal|null
expr_stmt|;
break|break;
block|}
else|else
block|{
name|chosen
operator|=
name|possible
expr_stmt|;
block|}
block|}
block|}
return|return
name|chosen
return|;
block|}
comment|/**      * Creates an expression for the given parameter type if the parameter can      * be mapped automatically or null if the parameter cannot be mapped due to      * insufficient annotations or not fitting with the default type      * conventions.      */
DECL|method|createParameterUnmarshalExpression (Class<?> clazz, Method method, Class<?> parameterType, Annotation[] parameterAnnotation)
specifier|private
name|Expression
name|createParameterUnmarshalExpression
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|,
name|Annotation
index|[]
name|parameterAnnotation
parameter_list|)
block|{
comment|// look for a parameter annotation that converts into an expression
for|for
control|(
name|Annotation
name|annotation
range|:
name|parameterAnnotation
control|)
block|{
name|Expression
name|answer
init|=
name|createParameterUnmarshalExpressionForAnnotation
argument_list|(
name|clazz
argument_list|,
name|method
argument_list|,
name|parameterType
argument_list|,
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
comment|// no annotations then try the default parameter mappings
return|return
name|strategy
operator|.
name|getDefaultParameterTypeExpression
argument_list|(
name|parameterType
argument_list|)
return|;
block|}
DECL|method|createParameterUnmarshalExpressionForAnnotation (Class<?> clazz, Method method, Class<?> parameterType, Annotation annotation)
specifier|private
name|Expression
name|createParameterUnmarshalExpressionForAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Method
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|Attachments
condition|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|attachmentsExpression
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|Property
condition|)
block|{
name|Property
name|propertyAnnotation
init|=
operator|(
name|Property
operator|)
name|annotation
decl_stmt|;
return|return
name|ExpressionBuilder
operator|.
name|propertyExpression
argument_list|(
name|propertyAnnotation
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|Properties
condition|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|propertiesExpression
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|Header
condition|)
block|{
name|Header
name|headerAnnotation
init|=
operator|(
name|Header
operator|)
name|annotation
decl_stmt|;
return|return
name|ExpressionBuilder
operator|.
name|headerExpression
argument_list|(
name|headerAnnotation
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|Headers
condition|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|headersExpression
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|OutHeaders
condition|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|outHeadersExpression
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|ExchangeException
condition|)
block|{
return|return
name|ExpressionBuilder
operator|.
name|exchangeExceptionExpression
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
name|parameterType
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|LanguageAnnotation
name|languageAnnotation
init|=
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|LanguageAnnotation
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|languageAnnotation
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|languageAnnotation
operator|.
name|factory
argument_list|()
decl_stmt|;
name|Object
name|object
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|AnnotationExpressionFactory
condition|)
block|{
name|AnnotationExpressionFactory
name|expressionFactory
init|=
operator|(
name|AnnotationExpressionFactory
operator|)
name|object
decl_stmt|;
return|return
name|expressionFactory
operator|.
name|createExpression
argument_list|(
name|camelContext
argument_list|,
name|annotation
argument_list|,
name|languageAnnotation
argument_list|,
name|parameterType
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring bad annotation: "
operator|+
name|languageAnnotation
operator|+
literal|"on method: "
operator|+
name|method
operator|+
literal|" which declares a factory: "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" which does not implement "
operator|+
name|AnnotationExpressionFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getInterfaceMethods (Class<?> clazz)
specifier|private
specifier|static
name|List
argument_list|<
name|Method
argument_list|>
name|getInterfaceMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Method
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|interfaceClazz
range|:
name|clazz
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
for|for
control|(
name|Method
name|interfaceMethod
range|:
name|interfaceClazz
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|interfaceMethod
argument_list|)
expr_stmt|;
block|}
block|}
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|removeAllSetterOrGetterMethods (List<MethodInfo> methods)
specifier|private
specifier|static
name|void
name|removeAllSetterOrGetterMethods
parameter_list|(
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|methods
parameter_list|)
block|{
name|Iterator
argument_list|<
name|MethodInfo
argument_list|>
name|it
init|=
name|methods
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MethodInfo
name|info
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|IntrospectionSupport
operator|.
name|isGetter
argument_list|(
name|info
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip getters
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IntrospectionSupport
operator|.
name|isSetter
argument_list|(
name|info
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip setters
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeNonMatchingMethods (List<MethodInfo> methods, String name)
specifier|private
name|void
name|removeNonMatchingMethods
parameter_list|(
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|methods
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Iterator
argument_list|<
name|MethodInfo
argument_list|>
name|it
init|=
name|methods
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MethodInfo
name|info
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|matchMethod
argument_list|(
name|info
operator|.
name|getMethod
argument_list|()
argument_list|,
name|name
argument_list|)
condition|)
block|{
comment|// method does not match so remove it
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|matchMethod (Method method, String methodName)
specifier|private
name|boolean
name|matchMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
if|if
condition|(
name|methodName
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|methodName
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
operator|&&
operator|!
name|methodName
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Name must have both starting and ending parenthesis, was: "
operator|+
name|methodName
argument_list|)
throw|;
block|}
comment|// do not use qualifier for name matching
name|String
name|name
init|=
name|methodName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|name
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|name
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
block|}
comment|// must match name
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// is it a method with no parameters
name|boolean
name|noParameters
init|=
name|methodName
operator|.
name|endsWith
argument_list|(
literal|"()"
argument_list|)
decl_stmt|;
if|if
condition|(
name|noParameters
condition|)
block|{
return|return
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
return|;
block|}
comment|// match qualifier types which is used to select among overloaded methods
name|String
name|types
init|=
name|ObjectHelper
operator|.
name|between
argument_list|(
name|methodName
argument_list|,
literal|"("
argument_list|,
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|types
argument_list|)
condition|)
block|{
comment|// we must qualify based on types to match method
name|String
index|[]
name|parameters
init|=
name|StringQuoteHelper
operator|.
name|splitSafeQuote
argument_list|(
name|types
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|String
name|qualifyType
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|qualifyType
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// trim the type
name|qualifyType
operator|=
name|qualifyType
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|qualifyType
argument_list|)
condition|)
block|{
comment|// * is a wildcard so we accept and match that parameter type
continue|continue;
block|}
if|if
condition|(
name|BeanHelper
operator|.
name|isValidParameterValue
argument_list|(
name|qualifyType
argument_list|)
condition|)
block|{
comment|// its a parameter value, so continue to next parameter
comment|// as we should only check for FQN/type parameters
continue|continue;
block|}
comment|// if qualify type indeed is a class, then it must be assignable with the parameter type
name|Boolean
name|assignable
init|=
name|BeanHelper
operator|.
name|isAssignableToExpectedType
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|qualifyType
argument_list|,
name|parameterType
argument_list|)
decl_stmt|;
comment|// the method will return null if the qualifyType is not a class
if|if
condition|(
name|assignable
operator|!=
literal|null
operator|&&
operator|!
name|assignable
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// there method has more parameters than was specified in the method name qualifiers
return|return
literal|false
return|;
block|}
block|}
comment|// if the method has no more types then we can only regard it as matched
comment|// if there are no more qualifiers
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// the method matched
return|return
literal|true
return|;
block|}
DECL|method|getTargetClass (Class<?> clazz)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getTargetClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|CGLIB_CLASS_SEPARATOR
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|!=
literal|null
operator|&&
operator|!
name|Object
operator|.
name|class
operator|.
name|equals
argument_list|(
name|superClass
argument_list|)
condition|)
block|{
return|return
name|superClass
return|;
block|}
block|}
return|return
name|clazz
return|;
block|}
comment|/**      * Do we have a method with the given name.      *<p/>      * Shorthand method names for getters is supported, so you can pass in eg 'name' and Camel      * will can find the real 'getName' method instead.      *      * @param methodName the method name      * @return<tt>true</tt> if we have such a method.      */
DECL|method|hasMethod (String methodName)
specifier|public
name|boolean
name|hasMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
return|return
name|getOperations
argument_list|(
name|methodName
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Do we have a static method with the given name.      *<p/>      * Shorthand method names for getters is supported, so you can pass in eg 'name' and Camel      * will can find the real 'getName' method instead.      *      * @param methodName the method name      * @return<tt>true</tt> if we have such a static method.      */
DECL|method|hasStaticMethod (String methodName)
specifier|public
name|boolean
name|hasStaticMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|methods
init|=
name|getOperations
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|methods
operator|==
literal|null
operator|||
name|methods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|MethodInfo
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isStaticMethod
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets the list of methods sorted by A..Z method name.      *      * @return the methods.      */
DECL|method|getMethods ()
specifier|public
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|getMethods
parameter_list|()
block|{
if|if
condition|(
name|operations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|MethodInfo
argument_list|>
name|col
range|:
name|operations
operator|.
name|values
argument_list|()
control|)
block|{
name|methods
operator|.
name|addAll
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
comment|// sort the methods by name A..Z
name|Collections
operator|.
name|sort
argument_list|(
name|methods
argument_list|,
operator|new
name|Comparator
argument_list|<
name|MethodInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MethodInfo
name|o1
parameter_list|,
name|MethodInfo
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|methods
return|;
block|}
comment|/**      * Get the operation(s) with the given name. We can have multiple when methods is overloaded.      *<p/>      * Shorthand method names for getters is supported, so you can pass in eg 'name' and Camel      * will can find the real 'getName' method instead.      *      * @param methodName the method name      * @return the found method, or<tt>null</tt> if not found      */
DECL|method|getOperations (String methodName)
specifier|private
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|getOperations
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
comment|// do not use qualifier for name
if|if
condition|(
name|methodName
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|methodName
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|methodName
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MethodInfo
argument_list|>
name|answer
init|=
name|operations
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
comment|// now try all getters to see if any of those matched the methodName
for|for
control|(
name|Method
name|method
range|:
name|methodMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|IntrospectionSupport
operator|.
name|isGetter
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|String
name|shorthandMethodName
init|=
name|IntrospectionSupport
operator|.
name|getGetterShorthandName
argument_list|(
name|method
argument_list|)
decl_stmt|;
comment|// if the two names matches then see if we can find it using that name
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
name|shorthandMethodName
argument_list|)
condition|)
block|{
return|return
name|operations
operator|.
name|get
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

