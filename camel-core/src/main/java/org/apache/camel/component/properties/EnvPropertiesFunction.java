begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.component.properties.PropertiesFunction} that lookup the property value from  * OS environment variables.  */
end_comment

begin_class
DECL|class|EnvPropertiesFunction
specifier|public
class|class
name|EnvPropertiesFunction
implements|implements
name|PropertiesFunction
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"env"
return|;
block|}
annotation|@
name|Override
DECL|method|apply (String remainder)
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|remainder
parameter_list|)
block|{
name|String
name|key
init|=
name|remainder
decl_stmt|;
name|String
name|defaultValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remainder
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|key
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|defaultValue
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|remainder
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|System
operator|.
name|getenv
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|defaultValue
return|;
block|}
block|}
end_class

end_unit

