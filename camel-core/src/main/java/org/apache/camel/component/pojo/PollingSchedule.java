begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pojo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_comment
comment|/**  * Schedule used for polling an endpoint  *  */
end_comment

begin_class
DECL|class|PollingSchedule
class|class
name|PollingSchedule
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|field|time
specifier|private
name|Date
name|time
decl_stmt|;
DECL|field|period
specifier|private
name|long
name|period
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|delay
specifier|private
name|long
name|delay
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|fixedRate
specifier|private
name|boolean
name|fixedRate
decl_stmt|;
DECL|field|daemon
specifier|private
name|boolean
name|daemon
init|=
literal|true
decl_stmt|;
DECL|method|PollingSchedule (String name,Date time)
name|PollingSchedule
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|time
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|time
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|PollingSchedule (String name,Date time,long period)
name|PollingSchedule
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|time
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|time
argument_list|,
operator|-
literal|1
argument_list|,
name|period
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|PollingSchedule (String name,long delay)
name|PollingSchedule
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|delay
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|PollingSchedule (String name,long delay,long period)
name|PollingSchedule
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|delay
argument_list|,
name|period
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|PollingSchedule (String name,Date time,long delay,long period,boolean fixedRate)
name|PollingSchedule
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|time
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|,
name|boolean
name|fixedRate
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
name|this
operator|.
name|fixedRate
operator|=
name|fixedRate
expr_stmt|;
block|}
DECL|method|activate (Runnable run)
name|void
name|activate
parameter_list|(
name|Runnable
name|run
parameter_list|)
block|{
name|timer
operator|=
name|createTimerAndTask
argument_list|(
name|name
argument_list|,
name|run
argument_list|)
expr_stmt|;
block|}
DECL|method|deactivate ()
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createTimerAndTask (String name,final Runnable run)
specifier|private
name|Timer
name|createTimerAndTask
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|Runnable
name|run
parameter_list|)
block|{
name|TimerTask
name|task
init|=
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|run
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Timer
name|result
init|=
operator|new
name|Timer
argument_list|(
name|name
argument_list|,
name|daemon
argument_list|)
decl_stmt|;
if|if
condition|(
name|fixedRate
condition|)
block|{
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|time
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|delay
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|period
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|time
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|period
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

