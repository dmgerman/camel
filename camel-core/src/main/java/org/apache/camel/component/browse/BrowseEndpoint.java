begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.browse
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|browse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
operator|.
name|LoadBalancerConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
operator|.
name|TopicLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BrowsableEndpoint
import|;
end_import

begin_comment
comment|/**  * An endpoint which maintains a {@link List} of {@link Exchange} instances  * which can be useful for tooling, debugging and visualising routes.  *  * @version   */
end_comment

begin_class
DECL|class|BrowseEndpoint
specifier|public
class|class
name|BrowseEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|BrowsableEndpoint
implements|,
name|Service
block|{
DECL|field|exchanges
specifier|private
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
decl_stmt|;
DECL|field|loadBalancer
specifier|private
specifier|final
name|LoadBalancer
name|loadBalancer
init|=
operator|new
name|TopicLoadBalancer
argument_list|()
decl_stmt|;
DECL|method|BrowseEndpoint ()
specifier|public
name|BrowseEndpoint
parameter_list|()
block|{     }
DECL|method|BrowseEndpoint (String uri, CamelContext camelContext)
specifier|public
name|BrowseEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
DECL|method|BrowseEndpoint (String uri, Component component)
specifier|public
name|BrowseEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|BrowseEndpoint (String endpointUri)
specifier|public
name|BrowseEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getExchanges ()
specifier|public
name|List
argument_list|<
name|Exchange
argument_list|>
name|getExchanges
parameter_list|()
block|{
if|if
condition|(
name|exchanges
operator|==
literal|null
condition|)
block|{
name|exchanges
operator|=
name|createExchangeList
argument_list|()
expr_stmt|;
block|}
return|return
name|exchanges
return|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultProducer
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|LoadBalancerConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|loadBalancer
argument_list|)
return|;
block|}
DECL|method|createExchangeList ()
specifier|protected
name|List
argument_list|<
name|Exchange
argument_list|>
name|createExchangeList
parameter_list|()
block|{
return|return
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Exchange
argument_list|>
argument_list|()
return|;
block|}
comment|/**      * Invoked on a message exchange being sent by a producer      *      * @param exchange the exchange      * @throws Exception is thrown if failed to process the exchange      */
DECL|method|onExchange (Exchange exchange)
specifier|protected
name|void
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|getExchanges
argument_list|()
operator|.
name|add
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// lets fire any consumers
name|loadBalancer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|exchanges
operator|=
name|createExchangeList
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|exchanges
operator|!=
literal|null
condition|)
block|{
name|exchanges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exchanges
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

