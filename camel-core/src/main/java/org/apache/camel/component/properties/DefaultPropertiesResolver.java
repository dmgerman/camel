begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Default {@link org.apache.camel.component.properties.PropertiesResolver} which can resolve properties  * from file and classpath.  *<p/>  * You can denote<tt>classpath:</tt> or<tt>file:</tt> as prefix in the uri to select whether the file  * is located in the classpath or on the file system.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultPropertiesResolver
specifier|public
class|class
name|DefaultPropertiesResolver
implements|implements
name|PropertiesResolver
block|{
DECL|method|resolveProperties (CamelContext context, String... uri)
specifier|public
name|Properties
name|resolveProperties
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
modifier|...
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|uri
control|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|Properties
name|prop
init|=
name|loadPropertiesFromFilePath
argument_list|(
name|context
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|answer
operator|.
name|putAll
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// default to classpath
name|Properties
name|prop
init|=
name|loadPropertiesFromClasspath
argument_list|(
name|context
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|answer
operator|.
name|putAll
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|loadPropertiesFromClasspath (CamelContext context, String path)
specifier|protected
name|Properties
name|loadPropertiesFromClasspath
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|path
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|path
argument_list|,
literal|"classpath:"
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|loadResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Properties file "
operator|+
name|path
operator|+
literal|" not found in classpath"
argument_list|)
throw|;
block|}
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|answer
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|loadPropertiesFromFilePath (CamelContext context, String path)
specifier|protected
name|Properties
name|loadPropertiesFromFilePath
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|path
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|path
argument_list|,
literal|"file:"
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|answer
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

