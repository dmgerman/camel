begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|NewFileOperations
specifier|public
class|class
name|NewFileOperations
implements|implements
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NewFileOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|NewFileEndpoint
name|endpoint
decl_stmt|;
DECL|method|NewFileOperations (final NewFileEndpoint endpoint)
specifier|public
name|NewFileOperations
parameter_list|(
specifier|final
name|NewFileEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|deleteFile (String name)
specifier|public
name|boolean
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|delete
argument_list|()
return|;
block|}
DECL|method|renameFile (String from, String to)
specifier|public
name|boolean
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|to
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|method|buildDirectory (String directory)
specifier|public
name|boolean
name|buildDirectory
parameter_list|(
name|String
name|directory
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|dir
operator|.
name|mkdirs
argument_list|()
return|;
block|}
DECL|method|getCurrentDirectory (File file)
specifier|public
name|String
name|getCurrentDirectory
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
name|file
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|changeCurrentDirectory (File file, String path)
specifier|public
name|File
name|changeCurrentDirectory
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
operator|new
name|File
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|listFiles (File file)
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|listFiles
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|file
operator|.
name|listFiles
argument_list|()
argument_list|)
return|;
block|}
DECL|method|listFiles (File file, String path)
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|listFiles
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
name|listFiles
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
DECL|method|retrieveFile (File file, String name, Exchange exchange)
specifier|public
name|boolean
name|retrieveFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
return|return
literal|false
return|;
block|}
DECL|method|storeFile (String name, Exchange exchange)
specifier|public
name|boolean
name|storeFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|fileSource
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|instanceof
name|File
decl_stmt|;
if|if
condition|(
name|fileSource
condition|)
block|{
name|File
name|source
init|=
name|ExchangeHelper
operator|.
name|getMandatoryInBody
argument_list|(
name|exchange
argument_list|,
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|writeFileByFile
argument_list|(
name|source
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputStream
name|in
init|=
name|ExchangeHelper
operator|.
name|getMandatoryInBody
argument_list|(
name|exchange
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|writeFileByStream
argument_list|(
name|in
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Can not store file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Can not store file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|writeFileByFile (File source, File target)
specifier|private
name|void
name|writeFileByFile
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChannel
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|FileChannel
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|prepareOutputFileChannel
argument_list|(
name|target
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using FileChannel to transfer from: "
operator|+
name|in
operator|+
literal|" to: "
operator|+
name|out
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|size
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ObjectHelper
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|close
argument_list|(
name|out
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeFileByStream (InputStream in, File target)
specifier|private
name|void
name|writeFileByStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChannel
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|prepareOutputFileChannel
argument_list|(
name|target
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using InputStream to transfer from: "
operator|+
name|in
operator|+
literal|" to: "
operator|+
name|out
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|endpoint
operator|.
name|getBufferSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|count
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|count
operator|<
name|size
condition|)
block|{
name|byteBuffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|ObjectHelper
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|close
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates and prepares the output file channel. Will position itself in correct position if eg. it should append      * or override any existing content.      */
DECL|method|prepareOutputFileChannel (File target, FileChannel out)
specifier|private
name|FileChannel
name|prepareOutputFileChannel
parameter_list|(
name|File
name|target
parameter_list|,
name|FileChannel
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|endpoint
operator|.
name|isAppend
argument_list|()
condition|)
block|{
name|out
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|target
argument_list|,
literal|"rw"
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|out
operator|=
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|target
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

