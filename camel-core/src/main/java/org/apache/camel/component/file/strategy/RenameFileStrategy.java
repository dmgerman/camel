begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.strategy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileExchange
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * A strategy to rename a file  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|RenameFileStrategy
specifier|public
class|class
name|RenameFileStrategy
extends|extends
name|FileStategySupport
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RenameFileStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|namePrefix
specifier|private
name|String
name|namePrefix
decl_stmt|;
DECL|field|namePostfix
specifier|private
name|String
name|namePostfix
decl_stmt|;
DECL|method|RenameFileStrategy ()
specifier|public
name|RenameFileStrategy
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|RenameFileStrategy (boolean lock)
specifier|public
name|RenameFileStrategy
parameter_list|(
name|boolean
name|lock
parameter_list|)
block|{
name|this
argument_list|(
name|lock
argument_list|,
literal|".camel/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|RenameFileStrategy (boolean lock, String namePrefix, String namePostfix)
specifier|public
name|RenameFileStrategy
parameter_list|(
name|boolean
name|lock
parameter_list|,
name|String
name|namePrefix
parameter_list|,
name|String
name|namePostfix
parameter_list|)
block|{
name|super
argument_list|(
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|namePrefix
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|namePrefix
operator|=
name|namePrefix
expr_stmt|;
block|}
if|if
condition|(
name|namePostfix
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|namePostfix
operator|=
name|namePostfix
expr_stmt|;
block|}
block|}
DECL|method|commit (FileEndpoint endpoint, FileExchange exchange, File file)
specifier|public
name|void
name|commit
parameter_list|(
name|FileEndpoint
name|endpoint
parameter_list|,
name|FileExchange
name|exchange
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|getNamePrefix
argument_list|()
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
name|getNamePostfix
argument_list|()
decl_stmt|;
name|File
name|newName
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|newName
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Renaming file: "
operator|+
name|file
operator|+
literal|" to: "
operator|+
name|newName
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|renameTo
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|super
operator|.
name|commit
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|getNamePostfix ()
specifier|public
name|String
name|getNamePostfix
parameter_list|()
block|{
return|return
name|namePostfix
return|;
block|}
comment|/**      * Sets the name postfix appended to moved files. For example      * to rename all the files from * to *.done set this value to ".done"      */
DECL|method|setNamePostfix (String namePostfix)
specifier|public
name|void
name|setNamePostfix
parameter_list|(
name|String
name|namePostfix
parameter_list|)
block|{
name|this
operator|.
name|namePostfix
operator|=
name|namePostfix
expr_stmt|;
block|}
DECL|method|getNamePrefix ()
specifier|public
name|String
name|getNamePrefix
parameter_list|()
block|{
return|return
name|namePrefix
return|;
block|}
comment|/**      * Sets the name prefix appended to moved files. For example      * to move processed files into a hidden directory called ".camel"      * set this value to ".camel/"      */
DECL|method|setNamePrefix (String namePrefix)
specifier|public
name|void
name|setNamePrefix
parameter_list|(
name|String
name|namePrefix
parameter_list|)
block|{
name|this
operator|.
name|namePrefix
operator|=
name|namePrefix
expr_stmt|;
block|}
block|}
end_class

end_unit

