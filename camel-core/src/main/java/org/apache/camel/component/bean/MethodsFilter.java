begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * This class aims at retaining the right methods while parsing a given  * {@link java.lang.Class}.  */
end_comment

begin_class
DECL|class|MethodsFilter
class|class
name|MethodsFilter
block|{
DECL|field|methods
specifier|private
specifier|final
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|inheritingClass
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|inheritingClass
decl_stmt|;
comment|/**      * Creates a<code>MethodsFilter</code> for a given {@link java.lang.Class}.      *      * @param clazz The {@link java.lang.Class} whose methods are to be      *            filtered.      */
DECL|method|MethodsFilter (Class<?> clazz)
specifier|public
name|MethodsFilter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|inheritingClass
operator|=
name|clazz
expr_stmt|;
block|}
comment|/**      * Retains methods, preferring those from public classes in case of      * overrides.      *      * @param proposedMethod The method proposed to the filter.      */
DECL|method|filterMethod (Method proposedMethod)
name|void
name|filterMethod
parameter_list|(
name|Method
name|proposedMethod
parameter_list|)
block|{
if|if
condition|(
name|proposedMethod
operator|.
name|isBridge
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|alreadyRegistered
init|=
name|methods
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|proposedMethod
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|overridden
init|=
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|inheritingClass
argument_list|,
name|proposedMethod
argument_list|,
name|alreadyRegistered
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|overridding
init|=
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|inheritingClass
argument_list|,
name|alreadyRegistered
argument_list|,
name|proposedMethod
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|registeredMethodIsPublic
init|=
name|Modifier
operator|.
name|isPublic
argument_list|(
name|alreadyRegistered
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getModifiers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overridden
operator|&&
operator|!
name|registeredMethodIsPublic
condition|)
block|{
comment|// Retain the overridden method from a public class
name|methods
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|proposedMethod
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|overridding
condition|)
block|{
comment|// Retain the override from a public class
name|methods
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|proposedMethod
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|methods
operator|.
name|add
argument_list|(
name|proposedMethod
argument_list|)
expr_stmt|;
block|}
DECL|method|asReadOnlyList ()
name|List
argument_list|<
name|Method
argument_list|>
name|asReadOnlyList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|methods
argument_list|)
return|;
block|}
block|}
end_class

end_unit

