begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * The<a href="http://camel.apache.org/validation.html">Validator Component</a> is for validating XML against a schema  */
end_comment

begin_class
DECL|class|ValidatorComponent
specifier|public
class|class
name|ValidatorComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom LSResourceResolver which depends on a dynamic endpoint resource URI"
argument_list|)
DECL|field|resourceResolverFactory
specifier|private
name|ValidatorResourceResolverFactory
name|resourceResolverFactory
decl_stmt|;
DECL|method|ValidatorComponent ()
specifier|public
name|ValidatorComponent
parameter_list|()
block|{     }
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|ValidatorEndpoint
name|endpoint
init|=
operator|new
name|ValidatorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
comment|// lookup custom resolver to use
name|ValidatorResourceResolverFactory
name|resolverFactory
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"resourceResolverFactory"
argument_list|,
name|ValidatorResourceResolverFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolverFactory
operator|==
literal|null
condition|)
block|{
comment|// not in endpoint then use component specific resource resolver factory
name|resolverFactory
operator|=
name|getResourceResolverFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resolverFactory
operator|==
literal|null
condition|)
block|{
comment|// fallback to use a Camel default resource resolver factory
name|resolverFactory
operator|=
operator|new
name|DefaultValidatorResourceResolverFactory
argument_list|()
expr_stmt|;
block|}
name|endpoint
operator|.
name|setResourceResolverFactory
argument_list|(
name|resolverFactory
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getResourceResolverFactory ()
specifier|public
name|ValidatorResourceResolverFactory
name|getResourceResolverFactory
parameter_list|()
block|{
return|return
name|resourceResolverFactory
return|;
block|}
comment|/**      * To use a custom LSResourceResolver which depends on a dynamic endpoint resource URI      */
DECL|method|setResourceResolverFactory (ValidatorResourceResolverFactory resourceResolverFactory)
specifier|public
name|void
name|setResourceResolverFactory
parameter_list|(
name|ValidatorResourceResolverFactory
name|resourceResolverFactory
parameter_list|)
block|{
name|this
operator|.
name|resourceResolverFactory
operator|=
name|resourceResolverFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

