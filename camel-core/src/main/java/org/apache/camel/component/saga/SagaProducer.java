begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.saga
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|saga
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_comment
comment|/**  * A producer that finalizes the current saga.  */
end_comment

begin_class
DECL|class|SagaProducer
specifier|public
class|class
name|SagaProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|success
specifier|private
specifier|final
name|boolean
name|success
decl_stmt|;
DECL|field|camelSagaService
specifier|private
name|CamelSagaService
name|camelSagaService
decl_stmt|;
DECL|method|SagaProducer (SagaEndpoint endpoint, boolean success)
specifier|public
name|SagaProducer
parameter_list|(
name|SagaEndpoint
name|endpoint
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|CamelSagaService
name|sagaService
init|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|hasService
argument_list|(
name|CamelSagaService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sagaService
operator|==
literal|null
condition|)
block|{
name|sagaService
operator|=
name|CamelContextHelper
operator|.
name|findByType
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|CamelSagaService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sagaService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot find saga service: saga producers can only be used within a saga"
argument_list|)
throw|;
block|}
name|this
operator|.
name|camelSagaService
operator|=
name|sagaService
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|String
name|currentSaga
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|SAGA_LONG_RUNNING_ACTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSaga
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"Current exchange is not bound to a saga context: cannot complete"
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|camelSagaService
operator|.
name|getSaga
argument_list|(
name|currentSaga
argument_list|)
operator|.
name|thenApply
argument_list|(
name|coordinator
lambda|->
block|{
if|if
condition|(
name|coordinator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No coordinator found for saga id "
operator|+
name|currentSaga
argument_list|)
throw|;
block|}
return|return
name|coordinator
return|;
block|}
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|coordinator
lambda|->
block|{
if|if
condition|(
name|success
condition|)
block|{
return|return
name|coordinator
operator|.
name|complete
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|coordinator
operator|.
name|compensate
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|res
parameter_list|,
name|ex
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

