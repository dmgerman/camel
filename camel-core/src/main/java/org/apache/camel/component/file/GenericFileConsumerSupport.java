begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Support class for both a regular {@link org.apache.camel.Consumer}  * and a {@link org.apache.camel.PollingConsumer} using the file component.  *<p/>  * This class contains shared code between the two kind of consumers, to reuse logic.  *<p/>  * The method {@link #processExchange(org.apache.camel.Exchange)} should be invoked to  * process the consumed file. Then custom implementations can implement the strategy  * method for their custom logic.  */
end_comment

begin_class
DECL|class|GenericFileConsumerSupport
specifier|public
specifier|abstract
class|class
name|GenericFileConsumerSupport
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|log
specifier|protected
specifier|final
specifier|transient
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|consumer
specifier|protected
specifier|final
name|GenericFileConsumer
argument_list|<
name|T
argument_list|>
name|consumer
decl_stmt|;
DECL|method|GenericFileConsumerSupport (GenericFileConsumer<T> consumer)
specifier|public
name|GenericFileConsumerSupport
parameter_list|(
name|GenericFileConsumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
comment|/**      * Strategy to process the consumed file      *      * @param exchange the exchange with the file details      */
DECL|method|processFileStrategy (Exchange exchange)
specifier|abstract
name|void
name|processFileStrategy
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
function_decl|;
comment|/**      * Strategy to handle the exception thrown that occurred while processing the consumer file      *<p/>      * Implementations will usually delegate to a {@link org.apache.camel.spi.ExceptionHandler}      * to handle the given exception.      *      * @param e the caused exception      */
DECL|method|handleExceptionStrategy (Exception e)
specifier|abstract
name|void
name|handleExceptionStrategy
parameter_list|(
name|Exception
name|e
parameter_list|)
function_decl|;
comment|/**      * Processes the exchange.      *<p/>      * This method should be invoked to process the consumed file      *      * @param exchange the exchange      */
DECL|method|processExchange (final Exchange exchange)
specifier|protected
name|void
name|processExchange
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
init|=
name|getExchangeFileProperty
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Processing file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// must extract the absolute name before the begin strategy as the file could potentially be pre moved
comment|// and then the file name would be changed
name|String
name|absoluteFileName
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
comment|// check if we can begin processing the file
try|try
block|{
specifier|final
name|GenericFileProcessStrategy
argument_list|<
name|T
argument_list|>
name|processStrategy
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getGenericFileProcessStrategy
argument_list|()
decl_stmt|;
name|boolean
name|begin
init|=
name|processStrategy
operator|.
name|begin
argument_list|(
name|consumer
operator|.
name|getOperations
argument_list|()
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|begin
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|+
literal|" cannot begin processing file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// begin returned false, so remove file from the in progress list as its no longer in progress
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|+
literal|" cannot begin processing file: "
operator|+
name|file
operator|+
literal|" due to: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// must use file from exchange as it can be updated due the
comment|// preMoveNamePrefix/preMoveNamePostfix options
specifier|final
name|GenericFile
argument_list|<
name|T
argument_list|>
name|target
init|=
name|getExchangeFileProperty
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// must use full name when downloading so we have the correct path
specifier|final
name|String
name|name
init|=
name|target
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
try|try
block|{
comment|// retrieve the file using the stream
name|log
operator|.
name|trace
argument_list|(
literal|"Retrieving file: {} from: {}"
argument_list|,
name|name
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// retrieve the file and check it was a success
name|boolean
name|retrieved
init|=
name|consumer
operator|.
name|getOperations
argument_list|()
operator|.
name|retrieveFile
argument_list|(
name|name
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|retrieved
condition|)
block|{
comment|// throw exception to handle the problem with retrieving the file
comment|// then if the method return false or throws an exception is handled the same in here
comment|// as in both cases an exception is being thrown
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot retrieve file: "
operator|+
name|file
operator|+
literal|" from: "
operator|+
name|consumer
operator|.
name|getEndpoint
argument_list|()
argument_list|)
throw|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Retrieved file: {} from: {}"
argument_list|,
name|name
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// register on completion callback that does the completion strategies
comment|// (for instance to move the file after we have processed it)
name|exchange
operator|.
name|addOnCompletion
argument_list|(
operator|new
name|GenericFileOnCompletion
argument_list|<
name|T
argument_list|>
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|consumer
operator|.
name|getOperations
argument_list|()
argument_list|,
name|target
argument_list|,
name|absoluteFileName
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"About to process file: {} using exchange: {}"
argument_list|,
name|target
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// process the file
name|processFileStrategy
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// remove file from the in progress list due to failure
comment|// (cannot be in finally block due to GenericFileOnCompletion will remove it
comment|// from in progress when it takes over and processes the file, which may happen
comment|// by another thread at a later time. So its only safe to remove it if there was an exception)
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
name|handleExceptionStrategy
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getExchangeFileProperty (Exchange exchange)
specifier|private
name|GenericFile
argument_list|<
name|T
argument_list|>
name|getExchangeFileProperty
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|(
name|GenericFile
argument_list|<
name|T
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

