begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_comment
comment|/**  * Base class file component. To be extended.  */
end_comment

begin_class
DECL|class|GenericFileComponent
specifier|public
specifier|abstract
class|class
name|GenericFileComponent
parameter_list|<
name|T
parameter_list|>
extends|extends
name|UriEndpointComponent
block|{
DECL|field|log
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|GenericFileComponent ()
specifier|public
name|GenericFileComponent
parameter_list|()
block|{
name|super
argument_list|(
name|GenericFileEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericFileComponent (CamelContext context)
specifier|public
name|GenericFileComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|GenericFileEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create the correct endpoint based on the protocol
specifier|final
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
decl_stmt|;
comment|// call to subclasses to build their custom version of a GenericFileEndpoint
name|endpoint
operator|=
name|buildFileEndpoint
argument_list|(
name|uri
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// sort by using file language
name|String
name|sortBy
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"sortBy"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|sortBy
argument_list|)
operator|&&
operator|!
name|EndpointHelper
operator|.
name|isReferenceParameter
argument_list|(
name|sortBy
argument_list|)
condition|)
block|{
comment|// we support nested sort groups so they should be chained
name|String
index|[]
name|groups
init|=
name|sortBy
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|groups
argument_list|)
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|Exchange
argument_list|>
name|comparator
init|=
name|createSortByComparator
argument_list|(
name|it
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setSortBy
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
block|}
name|setProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|afterPropertiesSet
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|/**      * A factory method for derived file components to create the endpoint      *      * @param uri the full URI of the endpoint      * @param remaining the remaining part of the URI without the query      *                parameters or component prefix      * @param parameters the optional parameters passed in      * @return a newly created endpoint or null if the endpoint cannot be      *         created based on the inputs      * @throws Exception can be thrown      */
DECL|method|buildFileEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
specifier|abstract
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|buildFileEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * A factory method for derived file components to perform validation of properties      *      * @param endpoint the endpoint      * @throws Exception can be thrown in case of validation errors      */
DECL|method|afterPropertiesSet (GenericFileEndpoint<T> endpoint)
specifier|protected
specifier|abstract
name|void
name|afterPropertiesSet
parameter_list|(
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Helper to create a sort comparator      *      * @param it iterator      * @return Comparator<Exchange>      */
DECL|method|createSortByComparator (Iterator<String> it)
specifier|private
name|Comparator
argument_list|<
name|Exchange
argument_list|>
name|createSortByComparator
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|group
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|reverse
init|=
name|group
operator|.
name|startsWith
argument_list|(
literal|"reverse:"
argument_list|)
decl_stmt|;
name|String
name|reminder
init|=
name|reverse
condition|?
name|ifStartsWithReturnRemainder
argument_list|(
literal|"reverse:"
argument_list|,
name|group
argument_list|)
else|:
name|group
decl_stmt|;
name|boolean
name|ignoreCase
init|=
name|reminder
operator|.
name|startsWith
argument_list|(
literal|"ignoreCase:"
argument_list|)
decl_stmt|;
name|reminder
operator|=
name|ignoreCase
condition|?
name|ifStartsWithReturnRemainder
argument_list|(
literal|"ignoreCase:"
argument_list|,
name|reminder
argument_list|)
else|:
name|reminder
expr_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|reminder
argument_list|,
literal|"sortBy expression"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// recursive add nested sorters
return|return
name|GenericFileDefaultSorter
operator|.
name|sortByFileLanguage
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|reminder
argument_list|,
name|reverse
argument_list|,
name|ignoreCase
argument_list|,
name|createSortByComparator
argument_list|(
name|it
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

