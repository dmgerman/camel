begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Rest component.  */
end_comment

begin_class
DECL|class|RestComponent
specifier|public
class|class
name|RestComponent
extends|extends
name|UriEndpointComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|componentName
specifier|private
name|String
name|componentName
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|apiDoc
specifier|private
name|String
name|apiDoc
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|method|RestComponent ()
specifier|public
name|RestComponent
parameter_list|()
block|{
name|super
argument_list|(
name|RestEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|restConfigurationName
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"componentName"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
name|RestEndpoint
name|answer
init|=
operator|new
name|RestEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setComponentName
argument_list|(
name|restConfigurationName
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setApiDoc
argument_list|(
name|apiDoc
argument_list|)
expr_stmt|;
name|RestConfiguration
name|config
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRestConfiguration
argument_list|(
name|restConfigurationName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// if no explicit host was given, then fallback and use default configured host
name|String
name|h
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"host"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|h
operator|=
name|config
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|int
name|port
init|=
name|config
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// is there a custom port number
if|if
condition|(
name|port
operator|>
literal|0
operator|&&
name|port
operator|!=
literal|80
operator|&&
name|port
operator|!=
literal|443
condition|)
block|{
name|h
operator|+=
literal|":"
operator|+
name|port
expr_stmt|;
block|}
block|}
comment|// host must start with http:// or https://
if|if
condition|(
name|h
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|h
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|||
name|h
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
operator|)
condition|)
block|{
name|h
operator|=
literal|"http://"
operator|+
name|h
expr_stmt|;
block|}
name|answer
operator|.
name|setHost
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|String
name|query
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|uri
argument_list|,
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setQueryParameters
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
name|setProperties
argument_list|(
name|answer
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid syntax. Must be rest:method:path[:uriTemplate] where uriTemplate is optional"
argument_list|)
throw|;
block|}
name|String
name|method
init|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|String
name|path
decl_stmt|;
name|String
name|uriTemplate
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|path
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|s
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|uriTemplate
operator|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|s
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|s
expr_stmt|;
name|uriTemplate
operator|=
literal|null
expr_stmt|;
block|}
comment|// remove trailing slashes
name|path
operator|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|uriTemplate
operator|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|uriTemplate
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUriTemplate
argument_list|(
name|uriTemplate
argument_list|)
expr_stmt|;
comment|// if no explicit component name was given, then fallback and use default configured component name
if|if
condition|(
name|answer
operator|.
name|getComponentName
argument_list|()
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|config
operator|.
name|getProducerComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// fallback and use the consumer name
name|name
operator|=
name|config
operator|.
name|getComponent
argument_list|()
expr_stmt|;
block|}
name|answer
operator|.
name|setComponentName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// if no explicit producer api was given, then fallback and use default configured
if|if
condition|(
name|answer
operator|.
name|getApiDoc
argument_list|()
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setApiDoc
argument_list|(
name|config
operator|.
name|getProducerApiDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getComponentName ()
specifier|public
name|String
name|getComponentName
parameter_list|()
block|{
return|return
name|componentName
return|;
block|}
comment|/**      * The Camel Rest component to use for the REST transport, such as restlet, spark-rest.      * If no component has been explicit configured, then Camel will lookup if there is a Camel component      * that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory (consumer)      * or org.apache.camel.spi.RestProducerFactory (producer) is registered in the registry.      * If either one is found, then that is being used.      */
DECL|method|setComponentName (String componentName)
specifier|public
name|void
name|setComponentName
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
block|}
DECL|method|getApiDoc ()
specifier|public
name|String
name|getApiDoc
parameter_list|()
block|{
return|return
name|apiDoc
return|;
block|}
comment|/**      * The swagger api doc resource to use.      * The resource is loaded from classpath by default and must be in JSon format.      */
DECL|method|setApiDoc (String apiDoc)
specifier|public
name|void
name|setApiDoc
parameter_list|(
name|String
name|apiDoc
parameter_list|)
block|{
name|this
operator|.
name|apiDoc
operator|=
name|apiDoc
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * Host and port of HTTP service to use (override host in swagger schema)      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
block|}
end_class

end_unit

