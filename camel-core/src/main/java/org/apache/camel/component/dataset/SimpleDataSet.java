begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dataset
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * A simple DataSet that allows a static payload to be used to create each message exchange  * along with using a pluggable transformer to randomize the message.  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|SimpleDataSet
specifier|public
class|class
name|SimpleDataSet
implements|implements
name|DataSet
block|{
DECL|field|defaultBody
specifier|private
name|Object
name|defaultBody
init|=
literal|"<hello>world!</hello>"
decl_stmt|;
DECL|field|defaultHeaders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaultHeaders
decl_stmt|;
DECL|field|outputTransformer
specifier|private
name|Processor
name|outputTransformer
decl_stmt|;
DECL|field|inputTransformer
specifier|private
name|Processor
name|inputTransformer
decl_stmt|;
DECL|field|size
specifier|private
name|long
name|size
init|=
literal|10
decl_stmt|;
DECL|method|SimpleDataSet ()
specifier|public
name|SimpleDataSet
parameter_list|()
block|{     }
DECL|method|SimpleDataSet (int size)
specifier|public
name|SimpleDataSet
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|populateMessage (Exchange exchange, long messageIndex)
specifier|public
name|void
name|populateMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|long
name|messageIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|getDefaultBody
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeaders
argument_list|(
name|getDefaultHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|applyHeaders
argument_list|(
name|exchange
argument_list|,
name|messageIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputTransformer
operator|!=
literal|null
condition|)
block|{
name|outputTransformer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getSize ()
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|setSize (long size)
specifier|public
name|void
name|setSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
DECL|method|getDefaultBody ()
specifier|public
name|Object
name|getDefaultBody
parameter_list|()
block|{
return|return
name|defaultBody
return|;
block|}
DECL|method|setDefaultBody (Object defaultBody)
specifier|public
name|void
name|setDefaultBody
parameter_list|(
name|Object
name|defaultBody
parameter_list|)
block|{
name|this
operator|.
name|defaultBody
operator|=
name|defaultBody
expr_stmt|;
block|}
DECL|method|getDefaultHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getDefaultHeaders
parameter_list|()
block|{
if|if
condition|(
name|defaultHeaders
operator|==
literal|null
condition|)
block|{
name|defaultHeaders
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|populateDefaultHeaders
argument_list|(
name|defaultHeaders
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultHeaders
return|;
block|}
DECL|method|setDefaultHeaders (Map<String, Object> defaultHeaders)
specifier|public
name|void
name|setDefaultHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|defaultHeaders
parameter_list|)
block|{
name|this
operator|.
name|defaultHeaders
operator|=
name|defaultHeaders
expr_stmt|;
block|}
DECL|method|getInputTransformer ()
specifier|public
name|Processor
name|getInputTransformer
parameter_list|()
block|{
return|return
name|inputTransformer
return|;
block|}
DECL|method|setInputTransformer (Processor inputTransformer)
specifier|public
name|void
name|setInputTransformer
parameter_list|(
name|Processor
name|inputTransformer
parameter_list|)
block|{
name|this
operator|.
name|inputTransformer
operator|=
name|inputTransformer
expr_stmt|;
block|}
DECL|method|getOutputTransformer ()
specifier|public
name|Processor
name|getOutputTransformer
parameter_list|()
block|{
return|return
name|outputTransformer
return|;
block|}
DECL|method|setOutputTransformer (Processor outputTransformer)
specifier|public
name|void
name|setOutputTransformer
parameter_list|(
name|Processor
name|outputTransformer
parameter_list|)
block|{
name|this
operator|.
name|outputTransformer
operator|=
name|outputTransformer
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|applyHeaders (Exchange exchange, long messageIndex)
specifier|protected
name|void
name|applyHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|long
name|messageIndex
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|DataSet
operator|.
name|INDEX_HEADER
argument_list|,
name|messageIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|populateDefaultHeaders (Map<String, Object> map)
specifier|protected
name|void
name|populateDefaultHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{     }
block|}
end_class

end_unit

