begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.binding
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HasBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_comment
comment|/**  * Applies a {@link org.apache.camel.spi.Binding} to an underlying {@link Endpoint} so that the binding processes messages  * before its sent to the endpoint and processes messages received by the endpoint consumer before its passed  * to the real consumer.  */
end_comment

begin_class
DECL|class|BindingEndpoint
specifier|public
class|class
name|BindingEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|HasBinding
block|{
DECL|field|binding
specifier|private
specifier|final
name|Binding
name|binding
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|Endpoint
name|delegate
decl_stmt|;
DECL|method|BindingEndpoint (String uri, Component component, Binding binding, Endpoint delegate)
specifier|public
name|BindingEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|,
name|Binding
name|binding
parameter_list|,
name|Endpoint
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|BindingProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|bindingProcessor
init|=
operator|new
name|BindingConsumerProcessor
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
return|return
name|delegate
operator|.
name|createConsumer
argument_list|(
name|bindingProcessor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getBinding ()
specifier|public
name|Binding
name|getBinding
parameter_list|()
block|{
return|return
name|binding
return|;
block|}
DECL|method|getDelegate ()
specifier|public
name|Endpoint
name|getDelegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
comment|/**      * Applies the {@link Binding} processor to the given exchange before passing it on to the delegateProcessor (either a producer or consumer)      */
DECL|method|pipelineBindingProcessor (Processor bindingProcessor, Exchange exchange, Processor delegateProcessor)
specifier|public
name|void
name|pipelineBindingProcessor
parameter_list|(
name|Processor
name|bindingProcessor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|delegateProcessor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// use same exchange - seems Pipeline does these days
name|Exchange
name|bindingExchange
init|=
name|exchange
decl_stmt|;
name|bindingProcessor
operator|.
name|process
argument_list|(
name|bindingExchange
argument_list|)
expr_stmt|;
name|Exchange
name|delegateExchange
init|=
name|createNextExchange
argument_list|(
name|bindingExchange
argument_list|)
decl_stmt|;
name|ExchangeHelper
operator|.
name|copyResults
argument_list|(
name|bindingExchange
argument_list|,
name|delegateExchange
argument_list|)
expr_stmt|;
name|delegateProcessor
operator|.
name|process
argument_list|(
name|delegateExchange
argument_list|)
expr_stmt|;
block|}
comment|// TODO this code was copied from Pipeline - should make it static and reuse the code?
DECL|method|createNextExchange (Exchange previousExchange)
specifier|protected
name|Exchange
name|createNextExchange
parameter_list|(
name|Exchange
name|previousExchange
parameter_list|)
block|{
name|Exchange
name|answer
init|=
name|previousExchange
decl_stmt|;
comment|// now lets set the input of the next exchange to the output of the
comment|// previous message if it is not null
if|if
condition|(
name|answer
operator|.
name|hasOut
argument_list|()
condition|)
block|{
name|answer
operator|.
name|setIn
argument_list|(
name|answer
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setOut
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

