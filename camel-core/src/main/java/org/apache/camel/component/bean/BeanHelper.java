begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * Helper for the bean component.  */
end_comment

begin_class
DECL|class|BeanHelper
specifier|public
specifier|final
class|class
name|BeanHelper
block|{
DECL|method|BeanHelper ()
specifier|private
name|BeanHelper
parameter_list|()
block|{
comment|// utility class
block|}
comment|/**      * Determines if the given value is valid according to the supported      * values by the bean component.      *      * @param value the value      * @return<tt>true</tt> if valid,<tt>false</tt> otherwise      */
DECL|method|isValidParameterValue (String value)
specifier|public
specifier|static
name|boolean
name|isValidParameterValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// empty value is valid
return|return
literal|true
return|;
block|}
comment|// trim value
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// single quoted is valid
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// double quoted is valid
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// true or false is valid (boolean)
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// null is valid (to force a null value)
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// simple language tokens is valid
if|if
condition|(
name|StringHelper
operator|.
name|hasStartToken
argument_list|(
name|value
argument_list|,
literal|"simple"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// numeric is valid
name|boolean
name|numeric
init|=
literal|true
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|value
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|numeric
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|numeric
return|;
block|}
comment|/**      * Determines if the given parameter type is assignable to the expected type.      *<p/>      * This implementation will check if the given parameter type matches the expected type as class using either      *<ul>      *<li>FQN class name - com.foo.MyOrder</li>      *<li>Simple class name - MyOrder</li>      *</ul>      * If the given parameter type is<b>not</b> a class, then<tt>null</tt> is returned      *      * @param resolver          the class resolver      * @param parameterType     the parameter type as a String, can be a FQN or a simple name of the class      * @param expectedType      the expected type      * @return<tt>null</tt> if parameter type is<b>not</b> a class,<tt>true</tt> if parameter type is assignable,<tt>false</tt> if not assignable      */
DECL|method|isAssignableToExpectedType (ClassResolver resolver, String parameterType, Class<?> expectedType)
specifier|public
specifier|static
name|Boolean
name|isAssignableToExpectedType
parameter_list|(
name|ClassResolver
name|resolver
parameter_list|,
name|String
name|parameterType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|)
block|{
comment|// if its a class, then it should be assignable
name|Class
argument_list|<
name|?
argument_list|>
name|parameterClass
init|=
name|resolver
operator|.
name|resolveClass
argument_list|(
name|parameterType
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameterClass
operator|==
literal|null
operator|&&
name|parameterType
operator|.
name|equals
argument_list|(
name|expectedType
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
comment|// it was not the FQN class name, but the simple name instead, so we can infer the type
name|parameterClass
operator|=
name|expectedType
expr_stmt|;
block|}
comment|// if there was a class, then it must be assignable to match
if|if
condition|(
name|parameterClass
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|parameterClass
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// not a class so return null
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

