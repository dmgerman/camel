begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.strategy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileExclusiveReadLockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A file read lock that uses an {@link org.apache.camel.spi.IdempotentRepository} as the lock strategy. This allows to plugin and use existing  * idempotent repositories that for example supports clustering. The other read lock strategies that are using marker files or file locks,  * are not guaranteed to work in clustered setup with various platform and file systems.  */
end_comment

begin_class
DECL|class|FileIdempotentRepositoryReadLockStrategy
specifier|public
class|class
name|FileIdempotentRepositoryReadLockStrategy
extends|extends
name|ServiceSupport
implements|implements
name|GenericFileExclusiveReadLockStrategy
argument_list|<
name|File
argument_list|>
implements|,
name|CamelContextAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileIdempotentRepositoryReadLockStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|endpoint
decl_stmt|;
DECL|field|readLockLoggingLevel
specifier|private
name|LoggingLevel
name|readLockLoggingLevel
init|=
name|LoggingLevel
operator|.
name|DEBUG
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|idempotentRepository
specifier|private
name|IdempotentRepository
argument_list|<
name|String
argument_list|>
name|idempotentRepository
decl_stmt|;
DECL|field|removeOnRollback
specifier|private
name|boolean
name|removeOnRollback
init|=
literal|true
decl_stmt|;
DECL|field|removeOnCommit
specifier|private
name|boolean
name|removeOnCommit
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|prepareOnStartup (GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint)
specifier|public
name|void
name|prepareOnStartup
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using FileIdempotentRepositoryReadLockStrategy: {} on endpoint: {}"
argument_list|,
name|idempotentRepository
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acquireExclusiveReadLock (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|boolean
name|acquireExclusiveReadLock
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check if we can begin on this file
name|String
name|key
init|=
name|asKey
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|answer
init|=
name|idempotentRepository
operator|.
name|add
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|answer
condition|)
block|{
name|CamelLogger
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|readLockLoggingLevel
argument_list|,
literal|"Cannot acquire read lock. Will skip the file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|releaseExclusiveReadLockOnAbort (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|void
name|releaseExclusiveReadLockOnAbort
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|releaseExclusiveReadLockOnRollback (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|void
name|releaseExclusiveReadLockOnRollback
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|removeOnRollback
condition|)
block|{
name|String
name|key
init|=
name|asKey
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|idempotentRepository
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|releaseExclusiveReadLockOnCommit (GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange)
specifier|public
name|void
name|releaseExclusiveReadLockOnCommit
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|asKey
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeOnCommit
condition|)
block|{
name|idempotentRepository
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if not remove then confirm
name|idempotentRepository
operator|.
name|confirm
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
comment|// noop
block|}
DECL|method|setCheckInterval (long checkInterval)
specifier|public
name|void
name|setCheckInterval
parameter_list|(
name|long
name|checkInterval
parameter_list|)
block|{
comment|// noop
block|}
comment|/**      * Sets logging level used when a read lock could not be acquired.      *<p/>      * Logging level used when a read lock could not be acquired.      *<p/>      * The default logging level is DEBUG as it may be more common not to be able to acquire a read lock      * when using idempotent repository in a clustered setup, as another node may be processing the file.      *      * @param readLockLoggingLevel LoggingLevel      */
DECL|method|setReadLockLoggingLevel (LoggingLevel readLockLoggingLevel)
specifier|public
name|void
name|setReadLockLoggingLevel
parameter_list|(
name|LoggingLevel
name|readLockLoggingLevel
parameter_list|)
block|{
name|this
operator|.
name|readLockLoggingLevel
operator|=
name|readLockLoggingLevel
expr_stmt|;
block|}
DECL|method|setMarkerFiler (boolean markerFile)
specifier|public
name|void
name|setMarkerFiler
parameter_list|(
name|boolean
name|markerFile
parameter_list|)
block|{
comment|// noop
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
comment|/**      * The idempotent repository to use as the store for the read locks.      */
DECL|method|getIdempotentRepository ()
specifier|public
name|IdempotentRepository
argument_list|<
name|String
argument_list|>
name|getIdempotentRepository
parameter_list|()
block|{
return|return
name|idempotentRepository
return|;
block|}
comment|/**      * The idempotent repository to use as the store for the read locks.      */
DECL|method|setIdempotentRepository (IdempotentRepository<String> idempotentRepository)
specifier|public
name|void
name|setIdempotentRepository
parameter_list|(
name|IdempotentRepository
argument_list|<
name|String
argument_list|>
name|idempotentRepository
parameter_list|)
block|{
name|this
operator|.
name|idempotentRepository
operator|=
name|idempotentRepository
expr_stmt|;
block|}
comment|/**      * Whether to remove the file from the idempotent repository when doing a rollback.      *<p/>      * By default this is true.      */
DECL|method|isRemoveOnRollback ()
specifier|public
name|boolean
name|isRemoveOnRollback
parameter_list|()
block|{
return|return
name|removeOnRollback
return|;
block|}
comment|/**      * Whether to remove the file from the idempotent repository when doing a rollback.      *<p/>      * By default this is true.      */
DECL|method|setRemoveOnRollback (boolean removeOnRollback)
specifier|public
name|void
name|setRemoveOnRollback
parameter_list|(
name|boolean
name|removeOnRollback
parameter_list|)
block|{
name|this
operator|.
name|removeOnRollback
operator|=
name|removeOnRollback
expr_stmt|;
block|}
comment|/**      * Whether to remove the file from the idempotent repository when doing a commit.      *<p/>      * By default this is commit.      */
DECL|method|isRemoveOnCommit ()
specifier|public
name|boolean
name|isRemoveOnCommit
parameter_list|()
block|{
return|return
name|removeOnCommit
return|;
block|}
comment|/**      * Whether to remove the file from the idempotent repository when doing a commit.      *<p/>      * By default this is commit.      */
DECL|method|setRemoveOnCommit (boolean removeOnCommit)
specifier|public
name|void
name|setRemoveOnCommit
parameter_list|(
name|boolean
name|removeOnCommit
parameter_list|)
block|{
name|this
operator|.
name|removeOnCommit
operator|=
name|removeOnCommit
expr_stmt|;
block|}
DECL|method|asKey (GenericFile<File> file)
specifier|protected
name|String
name|asKey
parameter_list|(
name|GenericFile
argument_list|<
name|File
argument_list|>
name|file
parameter_list|)
block|{
comment|// use absolute file path as default key, but evaluate if an expression key was configured
name|String
name|key
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getIdempotentKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Exchange
name|dummy
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|key
operator|=
name|endpoint
operator|.
name|getIdempotentKey
argument_list|()
operator|.
name|evaluate
argument_list|(
name|dummy
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|idempotentRepository
argument_list|,
literal|"idempotentRepository"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// ensure the idempotent repository is added as a service so CamelContext will stop the repo when it shutdown itself
name|camelContext
operator|.
name|addService
argument_list|(
name|idempotentRepository
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

