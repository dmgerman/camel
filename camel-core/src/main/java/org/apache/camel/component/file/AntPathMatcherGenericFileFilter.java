begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionHelper
operator|.
name|collectionAsCommaDelimitedString
import|;
end_import

begin_comment
comment|/**  * File filter using Spring's AntPathMatcher.  *<p/>  * Exclude take precedence over includes. If a file match both exclude and include it will be regarded as excluded.  * @param<T>  */
end_comment

begin_class
DECL|class|AntPathMatcherGenericFileFilter
specifier|public
class|class
name|AntPathMatcherGenericFileFilter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|GenericFileFilter
argument_list|<
name|T
argument_list|>
implements|,
name|CamelContextAware
block|{
DECL|field|ANTPATHMATCHER_CLASSNAME
specifier|private
specifier|static
specifier|final
name|String
name|ANTPATHMATCHER_CLASSNAME
init|=
literal|"org.apache.camel.spring.util.SpringAntPathMatcherFileFilter"
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|excludes
specifier|private
name|String
index|[]
name|excludes
decl_stmt|;
DECL|field|includes
specifier|private
name|String
index|[]
name|includes
decl_stmt|;
DECL|field|filter
specifier|private
name|Object
name|filter
decl_stmt|;
DECL|field|includesMethod
specifier|private
name|Method
name|includesMethod
decl_stmt|;
DECL|field|excludesMethod
specifier|private
name|Method
name|excludesMethod
decl_stmt|;
DECL|field|acceptsMethod
specifier|private
name|Method
name|acceptsMethod
decl_stmt|;
DECL|method|accept (GenericFile<T> file)
specifier|public
name|boolean
name|accept
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
block|}
comment|// invoke setIncludes(String), must using string type as invoking with string[] does not work
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|includesMethod
argument_list|,
name|filter
argument_list|,
name|collectionAsCommaDelimitedString
argument_list|(
name|includes
argument_list|)
argument_list|)
expr_stmt|;
comment|// invoke setExcludes(String), must using string type as invoking with string[] does not work
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|excludesMethod
argument_list|,
name|filter
argument_list|,
name|collectionAsCommaDelimitedString
argument_list|(
name|excludes
argument_list|)
argument_list|)
expr_stmt|;
comment|// invoke acceptPathName(String)
name|String
name|path
init|=
name|file
operator|.
name|getRelativeFilePath
argument_list|()
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|acceptsMethod
argument_list|,
name|filter
argument_list|,
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TypeNotPresentException
argument_list|(
name|ANTPATHMATCHER_CLASSNAME
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
comment|// we must use reflection to invoke the AntPathMatcherFileFilter that reside in camel-spring.jar
comment|// and we don't want camel-core to have runtime dependency on camel-spring.jar
comment|// use class resolver from CamelContext to ensure it works with OSGi as well
name|Class
name|clazz
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|ANTPATHMATCHER_CLASSNAME
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|clazz
argument_list|,
name|ANTPATHMATCHER_CLASSNAME
operator|+
literal|" not found in classpath. camel-spring.jar is required in the classpath."
argument_list|)
expr_stmt|;
name|filter
operator|=
name|ObjectHelper
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|includesMethod
operator|=
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setIncludes"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|excludesMethod
operator|=
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setExcludes"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|acceptsMethod
operator|=
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"acceptPathName"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getExcludes ()
specifier|public
name|String
index|[]
name|getExcludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
DECL|method|setExcludes (String[] excludes)
specifier|public
name|void
name|setExcludes
parameter_list|(
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|excludes
operator|=
name|excludes
expr_stmt|;
block|}
DECL|method|getIncludes ()
specifier|public
name|String
index|[]
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
DECL|method|setIncludes (String[] includes)
specifier|public
name|void
name|setIncludes
parameter_list|(
name|String
index|[]
name|includes
parameter_list|)
block|{
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
block|}
comment|/**      * Sets excludes using a single string where each element can be separated with comma      */
DECL|method|setExcludes (String excludes)
specifier|public
name|void
name|setExcludes
parameter_list|(
name|String
name|excludes
parameter_list|)
block|{
name|setExcludes
argument_list|(
name|excludes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets includes using a single string where each element can be separated with comma      */
DECL|method|setIncludes (String includes)
specifier|public
name|void
name|setIncludes
parameter_list|(
name|String
name|includes
parameter_list|)
block|{
name|setIncludes
argument_list|(
name|includes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
block|}
end_class

end_unit

