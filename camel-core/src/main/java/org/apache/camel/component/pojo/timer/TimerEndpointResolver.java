begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pojo.timer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pojo
operator|.
name|timer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pojo
operator|.
name|PojoExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link EndpointResolver} that creates   * {@link TimerEndpoint} objects.  TimerEndpoint objects can only   * be consumed.  *  * The synatax for a Timer URI looks like:  *   *<pre><code>timer:[component:]timer-name?options</code></pre>  *   *   * @version $Revision: 519901 $  */
end_comment

begin_class
DECL|class|TimerEndpointResolver
specifier|public
class|class
name|TimerEndpointResolver
implements|implements
name|EndpointResolver
argument_list|<
name|PojoExchange
argument_list|>
block|{
DECL|field|DEFAULT_COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_COMPONENT_NAME
init|=
name|TimerComponent
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/** 	 * Finds the {@see QueueComponent} specified by the uri.  If the {@see QueueComponent}  	 * object do not exist, it will be created. 	 *  	 * @see org.apache.camel.EndpointResolver#resolveComponent(org.apache.camel.CamelContext, java.lang.String) 	 */
DECL|method|resolveComponent (CamelContext container, String uri)
specifier|public
name|Component
name|resolveComponent
parameter_list|(
name|CamelContext
name|container
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|String
name|id
index|[]
init|=
name|getEndpointId
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
name|resolveTimerComponent
argument_list|(
name|container
argument_list|,
name|id
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/** 	 * Finds the {@see QueueEndpoint} specified by the uri.  If the {@see QueueEndpoint} or it's associated 	 * {@see QueueComponent} object do not exist, they will be created. 	 * @throws URISyntaxException  	 *  	 * @see org.apache.camel.EndpointResolver#resolveEndpoint(org.apache.camel.CamelContext, java.lang.String) 	 */
DECL|method|resolveEndpoint (CamelContext container, String uri)
specifier|public
name|TimerEndpoint
name|resolveEndpoint
parameter_list|(
name|CamelContext
name|container
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|id
index|[]
init|=
name|getEndpointId
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|TimerComponent
name|component
init|=
name|resolveTimerComponent
argument_list|(
name|container
argument_list|,
name|id
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|createEndpoint
argument_list|(
name|uri
argument_list|,
name|id
index|[
literal|1
index|]
argument_list|,
name|component
argument_list|)
return|;
block|}
comment|/** 	 * PojoEndpointResolver subclasses can override to provide a custom PojoEndpoint implementation. 	 * @throws URISyntaxException  	 */
DECL|method|createEndpoint (String uri, String pojoId, TimerComponent component)
specifier|protected
name|TimerEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|pojoId
parameter_list|,
name|TimerComponent
name|component
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|TimerEndpoint
argument_list|(
name|uri
argument_list|,
name|pojoId
argument_list|,
name|component
argument_list|)
return|;
block|}
DECL|method|resolveTimerComponent (CamelContext container, String componentName)
specifier|private
name|TimerComponent
name|resolveTimerComponent
parameter_list|(
name|CamelContext
name|container
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
name|Component
name|rc
init|=
name|container
operator|.
name|getOrCreateComponent
argument_list|(
name|componentName
argument_list|,
operator|new
name|Callable
argument_list|<
name|Component
argument_list|>
argument_list|()
block|{
specifier|public
name|Component
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|TimerComponent
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|(
name|TimerComponent
operator|)
name|rc
return|;
block|}
comment|/** 	 * @return an array that looks like: [componentName,endpointName]  	 */
DECL|method|getEndpointId (String uri)
specifier|private
name|String
index|[]
name|getEndpointId
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|String
name|rc
index|[]
init|=
block|{
name|DEFAULT_COMPONENT_NAME
block|,
literal|null
block|}
decl_stmt|;
name|String
name|splitURI
index|[]
init|=
name|ObjectHelper
operator|.
name|splitOnCharacter
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitURI
index|[
literal|2
index|]
operator|!=
literal|null
condition|)
block|{
name|rc
index|[
literal|0
index|]
operator|=
name|splitURI
index|[
literal|1
index|]
expr_stmt|;
name|rc
index|[
literal|1
index|]
operator|=
name|splitURI
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|rc
index|[
literal|1
index|]
operator|=
name|splitURI
index|[
literal|1
index|]
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
end_class

end_unit

