begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.directvm
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|directvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_comment
comment|/**  * The Direct-VM producer.  */
end_comment

begin_class
DECL|class|DirectVmProducer
specifier|public
class|class
name|DirectVmProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|endpoint
specifier|private
name|DirectVmEndpoint
name|endpoint
decl_stmt|;
DECL|method|DirectVmProducer (DirectVmEndpoint endpoint)
specifier|public
name|DirectVmProducer
parameter_list|(
name|DirectVmEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// send to consumer
name|DirectVmConsumer
name|consumer
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getConsumer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isFailIfNoConsumers
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|DirectVmConsumerNotAvailableException
argument_list|(
literal|"No consumers available on endpoint: "
operator|+
name|endpoint
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"message ignored, no consumers available on endpoint: "
operator|+
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
name|endpoint
operator|.
name|getHeaderFilterStrategy
argument_list|()
decl_stmt|;
comment|// Only clone the Exchange if we actually need to filter out properties or headers.
specifier|final
name|Exchange
name|submitted
init|=
operator|(
operator|!
name|endpoint
operator|.
name|isPropagateProperties
argument_list|()
operator|||
name|headerFilterStrategy
operator|!=
literal|null
operator|)
condition|?
name|exchange
operator|.
name|copy
argument_list|(
literal|true
argument_list|)
else|:
name|exchange
decl_stmt|;
comment|// Clear properties in the copy if we are not propagating them.
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isPropagateProperties
argument_list|()
condition|)
block|{
name|submitted
operator|.
name|getProperties
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Filter headers by Header Filter Strategy if there is one set.
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
condition|)
block|{
name|submitted
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|e
lambda|->
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|submitted
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|consumer
operator|.
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|submitted
argument_list|,
name|done
lambda|->
block|{
name|Message
name|msg
init|=
name|submitted
operator|.
name|hasOut
argument_list|()
condition|?
name|submitted
operator|.
name|getOut
argument_list|()
else|:
name|submitted
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|e
lambda|->
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|submitted
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|!=
name|submitted
condition|)
block|{
comment|// only need to copy back if they are different
name|exchange
operator|.
name|setException
argument_list|(
name|submitted
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isPropagateProperties
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|submitted
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
name|done
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

