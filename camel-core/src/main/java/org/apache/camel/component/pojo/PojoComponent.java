begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pojo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link PojoEndpoint}.  It holds the  * list of named pojos that queue endpoints reference.  *  * @version $Revision: 519973 $  */
end_comment

begin_class
DECL|class|PojoComponent
specifier|public
class|class
name|PojoComponent
extends|extends
name|DefaultComponent
argument_list|<
name|PojoExchange
argument_list|>
block|{
DECL|field|services
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|services
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addService (String uri, Object pojo)
specifier|public
name|void
name|addService
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|pojo
parameter_list|)
block|{
name|services
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
block|}
DECL|method|removeService (String uri)
specifier|public
name|void
name|removeService
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|services
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|getService (String uri)
specifier|public
name|Object
name|getService
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|services
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, final String remaining, Map parameters)
specifier|protected
name|Endpoint
argument_list|<
name|PojoExchange
argument_list|>
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|PojoEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|remaining
argument_list|)
return|;
block|}
comment|/**      * Creates a Proxy which sends PojoExchange to the endpoint.      * @throws Exception       */
DECL|method|createProxy (final Endpoint endpoint, ClassLoader cl, Class interfaces[])
specifier|static
specifier|public
name|Object
name|createProxy
parameter_list|(
specifier|final
name|Endpoint
name|endpoint
parameter_list|,
name|ClassLoader
name|cl
parameter_list|,
name|Class
name|interfaces
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|cl
argument_list|,
name|interfaces
argument_list|,
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|PojoInvocation
name|invocation
init|=
operator|new
name|PojoInvocation
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|PojoExchange
name|exchange
init|=
operator|new
name|PojoExchange
argument_list|(
name|endpoint
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setInvocation
argument_list|(
name|invocation
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Throwable
name|fault
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|fault
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvocationTargetException
argument_list|(
name|fault
argument_list|)
throw|;
block|}
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Creates a Proxy which sends PojoExchange to the endpoint.      * @throws Exception       */
DECL|method|createProxy (Endpoint endpoint, Class interfaces[])
specifier|static
specifier|public
name|Object
name|createProxy
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Class
name|interfaces
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|interfaces
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must provide at least 1 interface class."
argument_list|)
throw|;
block|}
return|return
name|createProxy
argument_list|(
name|endpoint
argument_list|,
name|interfaces
index|[
literal|0
index|]
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|interfaces
argument_list|)
return|;
block|}
comment|/**      * Creates a Proxy which sends PojoExchange to the endpoint.      * @throws Exception       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createProxy (Endpoint endpoint, ClassLoader cl, Class<T> interfaceClass)
specifier|static
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|createProxy
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|ClassLoader
name|cl
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|interfaceClass
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|T
operator|)
name|createProxy
argument_list|(
name|endpoint
argument_list|,
name|cl
argument_list|,
operator|new
name|Class
index|[]
block|{
name|interfaceClass
block|}
argument_list|)
return|;
block|}
comment|/**      * Creates a Proxy which sends PojoExchange to the endpoint.      * @throws Exception       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createProxy (Endpoint endpoint, Class<T> interfaceClass)
specifier|static
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|createProxy
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|interfaceClass
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|T
operator|)
name|createProxy
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Class
index|[]
block|{
name|interfaceClass
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

