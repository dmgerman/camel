begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mock
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|InterceptSendToEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BrowsableEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CaseInsensitiveMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExpressionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Mock endpoint which provides a literate, fluent API for testing routes  * using a<a href="http://jmock.org/">JMock style</a> API.  *<p/>  * The mock endpoint have two set of methods  *<ul>  *<li>expectedXXX or expectsXXX - To set pre conditions, before the test is executed</li>  *<li>assertXXX - To assert assertions, after the test has been executed</li>  *</ul>  * Its<b>important</b> to know the difference between the two set. The former is used to  * set expectations before the test is being started (eg before the mock receives messages).  * The latter is used after the test has been executed, to verify the expectations; or  * other assertions which you can perform after the test has been completed.  *  * @version   */
end_comment

begin_class
DECL|class|MockEndpoint
specifier|public
class|class
name|MockEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|BrowsableEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// must be volatile so changes is visible between the thread which performs the assertions
comment|// and the threads which process the exchanges when routing messages in Camel
DECL|field|reporter
specifier|protected
specifier|volatile
name|Processor
name|reporter
decl_stmt|;
DECL|field|copyOnExchange
specifier|protected
name|boolean
name|copyOnExchange
init|=
literal|true
decl_stmt|;
DECL|field|expectedCount
specifier|private
specifier|volatile
name|int
name|expectedCount
decl_stmt|;
DECL|field|counter
specifier|private
specifier|volatile
name|int
name|counter
decl_stmt|;
DECL|field|defaultProcessor
specifier|private
specifier|volatile
name|Processor
name|defaultProcessor
decl_stmt|;
DECL|field|processors
specifier|private
specifier|volatile
name|Map
argument_list|<
name|Integer
argument_list|,
name|Processor
argument_list|>
name|processors
decl_stmt|;
DECL|field|receivedExchanges
specifier|private
specifier|volatile
name|List
argument_list|<
name|Exchange
argument_list|>
name|receivedExchanges
decl_stmt|;
DECL|field|failures
specifier|private
specifier|volatile
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
decl_stmt|;
DECL|field|tests
specifier|private
specifier|volatile
name|List
argument_list|<
name|Runnable
argument_list|>
name|tests
decl_stmt|;
DECL|field|latch
specifier|private
specifier|volatile
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|sleepForEmptyTest
specifier|private
specifier|volatile
name|long
name|sleepForEmptyTest
decl_stmt|;
DECL|field|resultWaitTime
specifier|private
specifier|volatile
name|long
name|resultWaitTime
decl_stmt|;
DECL|field|resultMinimumWaitTime
specifier|private
specifier|volatile
name|long
name|resultMinimumWaitTime
decl_stmt|;
DECL|field|assertPeriod
specifier|private
specifier|volatile
name|long
name|assertPeriod
decl_stmt|;
DECL|field|expectedMinimumCount
specifier|private
specifier|volatile
name|int
name|expectedMinimumCount
decl_stmt|;
DECL|field|expectedBodyValues
specifier|private
specifier|volatile
name|List
argument_list|<
name|?
argument_list|>
name|expectedBodyValues
decl_stmt|;
DECL|field|actualBodyValues
specifier|private
specifier|volatile
name|List
argument_list|<
name|Object
argument_list|>
name|actualBodyValues
decl_stmt|;
DECL|field|expectedHeaderValues
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedHeaderValues
decl_stmt|;
DECL|field|actualHeaderValues
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actualHeaderValues
decl_stmt|;
DECL|field|expectedPropertyValues
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedPropertyValues
decl_stmt|;
DECL|field|actualPropertyValues
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actualPropertyValues
decl_stmt|;
DECL|field|retainFirst
specifier|private
specifier|volatile
name|int
name|retainFirst
decl_stmt|;
DECL|field|retainLast
specifier|private
specifier|volatile
name|int
name|retainLast
decl_stmt|;
DECL|method|MockEndpoint (String endpointUri, Component component)
specifier|public
name|MockEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|MockEndpoint (String endpointUri)
specifier|public
name|MockEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|MockEndpoint ()
specifier|public
name|MockEndpoint
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * A helper method to resolve the mock endpoint of the given URI on the given context      *      * @param context the camel context to try resolve the mock endpoint from      * @param uri the uri of the endpoint to resolve      * @return the endpoint      */
DECL|method|resolve (CamelContext context, String uri)
specifier|public
specifier|static
name|MockEndpoint
name|resolve
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
return|return
name|CamelContextHelper
operator|.
name|getMandatoryEndpoint
argument_list|(
name|context
argument_list|,
name|uri
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|assertWait (long timeout, TimeUnit unit, MockEndpoint... endpoints)
specifier|public
specifier|static
name|void
name|assertWait
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|MockEndpoint
modifier|...
name|endpoints
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|left
init|=
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|start
operator|+
name|left
decl_stmt|;
for|for
control|(
name|MockEndpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
if|if
condition|(
operator|!
name|endpoint
operator|.
name|await
argument_list|(
name|left
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Timeout waiting for endpoints to receive enough messages. "
operator|+
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|+
literal|" timed out."
argument_list|)
throw|;
block|}
name|left
operator|=
name|end
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|left
operator|<=
literal|0
condition|)
block|{
name|left
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertIsSatisfied (long timeout, TimeUnit unit, MockEndpoint... endpoints)
specifier|public
specifier|static
name|void
name|assertIsSatisfied
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|MockEndpoint
modifier|...
name|endpoints
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertWait
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|,
name|endpoints
argument_list|)
expr_stmt|;
for|for
control|(
name|MockEndpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertIsSatisfied (MockEndpoint... endpoints)
specifier|public
specifier|static
name|void
name|assertIsSatisfied
parameter_list|(
name|MockEndpoint
modifier|...
name|endpoints
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|MockEndpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Asserts that all the expectations on any {@link MockEndpoint} instances registered      * in the given context are valid      *      * @param context the camel context used to find all the available endpoints to be asserted      */
DECL|method|assertIsSatisfied (CamelContext context)
specifier|public
specifier|static
name|void
name|assertIsSatisfied
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|context
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|context
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
comment|// if the endpoint was intercepted we should get the delegate
if|if
condition|(
name|endpoint
operator|instanceof
name|InterceptSendToEndpoint
condition|)
block|{
name|endpoint
operator|=
operator|(
operator|(
name|InterceptSendToEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|instanceof
name|MockEndpoint
condition|)
block|{
name|MockEndpoint
name|mockEndpoint
init|=
operator|(
name|MockEndpoint
operator|)
name|endpoint
decl_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Asserts that all the expectations on any {@link MockEndpoint} instances registered      * in the given context are valid      *      * @param context the camel context used to find all the available endpoints to be asserted      * @param timeout timeout      * @param unit    time unit      */
DECL|method|assertIsSatisfied (CamelContext context, long timeout, TimeUnit unit)
specifier|public
specifier|static
name|void
name|assertIsSatisfied
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|context
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|unit
argument_list|,
literal|"unit"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|context
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
name|long
name|millis
init|=
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
comment|// if the endpoint was intercepted we should get the delegate
if|if
condition|(
name|endpoint
operator|instanceof
name|InterceptSendToEndpoint
condition|)
block|{
name|endpoint
operator|=
operator|(
operator|(
name|InterceptSendToEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|instanceof
name|MockEndpoint
condition|)
block|{
name|MockEndpoint
name|mockEndpoint
init|=
operator|(
name|MockEndpoint
operator|)
name|endpoint
decl_stmt|;
name|mockEndpoint
operator|.
name|setResultWaitTime
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sets the assert period on all the expectations on any {@link MockEndpoint} instances registered      * in the given context.      *      * @param context the camel context used to find all the available endpoints      * @param period the period in millis      */
DECL|method|setAssertPeriod (CamelContext context, long period)
specifier|public
specifier|static
name|void
name|setAssertPeriod
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|context
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|context
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
comment|// if the endpoint was intercepted we should get the delegate
if|if
condition|(
name|endpoint
operator|instanceof
name|InterceptSendToEndpoint
condition|)
block|{
name|endpoint
operator|=
operator|(
operator|(
name|InterceptSendToEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|instanceof
name|MockEndpoint
condition|)
block|{
name|MockEndpoint
name|mockEndpoint
init|=
operator|(
name|MockEndpoint
operator|)
name|endpoint
decl_stmt|;
name|mockEndpoint
operator|.
name|setAssertPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Reset all mock endpoints      *      * @param context the camel context used to find all the available endpoints to reset      */
DECL|method|resetMocks (CamelContext context)
specifier|public
specifier|static
name|void
name|resetMocks
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|context
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Endpoint
argument_list|>
name|endpoints
init|=
name|context
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|Endpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
comment|// if the endpoint was intercepted we should get the delegate
if|if
condition|(
name|endpoint
operator|instanceof
name|InterceptSendToEndpoint
condition|)
block|{
name|endpoint
operator|=
operator|(
operator|(
name|InterceptSendToEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|instanceof
name|MockEndpoint
condition|)
block|{
name|MockEndpoint
name|mockEndpoint
init|=
operator|(
name|MockEndpoint
operator|)
name|endpoint
decl_stmt|;
name|mockEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|expectsMessageCount (int count, MockEndpoint... endpoints)
specifier|public
specifier|static
name|void
name|expectsMessageCount
parameter_list|(
name|int
name|count
parameter_list|,
name|MockEndpoint
modifier|...
name|endpoints
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|MockEndpoint
name|endpoint
range|:
name|endpoints
control|)
block|{
name|endpoint
operator|.
name|setExpectedMessageCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExchanges ()
specifier|public
name|List
argument_list|<
name|Exchange
argument_list|>
name|getExchanges
parameter_list|()
block|{
return|return
name|getReceivedExchanges
argument_list|()
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot consume from this endpoint"
argument_list|)
throw|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultAsyncProducer
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
comment|// Testing API
comment|// -------------------------------------------------------------------------
comment|/**      * Handles the incoming exchange.      *<p/>      * This method turns this mock endpoint into a bean which you can use      * in the Camel routes, which allows you to inject MockEndpoint as beans      * in your routes and use the features of the mock to control the bean.      *      * @param exchange  the exchange      * @throws Exception can be thrown      */
annotation|@
name|Handler
DECL|method|handle (Exchange exchange)
specifier|public
name|void
name|handle
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the processor that will be invoked when the index      * message is received.      */
DECL|method|whenExchangeReceived (int index, Processor processor)
specifier|public
name|void
name|whenExchangeReceived
parameter_list|(
name|int
name|index
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|processors
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the processor that will be invoked when the some message      * is received.      *      * This processor could be overwritten by      * {@link #whenExchangeReceived(int, Processor)} method.      */
DECL|method|whenAnyExchangeReceived (Processor processor)
specifier|public
name|void
name|whenAnyExchangeReceived
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|defaultProcessor
operator|=
name|processor
expr_stmt|;
block|}
comment|/**      * Set the expression which value will be set to the message body      * @param expression which is use to set the message body       */
DECL|method|returnReplyBody (Expression expression)
specifier|public
name|void
name|returnReplyBody
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|defaultProcessor
operator|=
name|ProcessorBuilder
operator|.
name|setBody
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the expression which value will be set to the message header      * @param headerName that will be set value      * @param expression which is use to set the message header       */
DECL|method|returnReplyHeader (String headerName, Expression expression)
specifier|public
name|void
name|returnReplyHeader
parameter_list|(
name|String
name|headerName
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|defaultProcessor
operator|=
name|ProcessorBuilder
operator|.
name|setHeader
argument_list|(
name|headerName
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validates that all the available expectations on this endpoint are      * satisfied; or throw an exception      */
DECL|method|assertIsSatisfied ()
specifier|public
name|void
name|assertIsSatisfied
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertIsSatisfied
argument_list|(
name|sleepForEmptyTest
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validates that all the available expectations on this endpoint are      * satisfied; or throw an exception      *      * @param timeoutForEmptyEndpoints the timeout in milliseconds that we      *                should wait for the test to be true      */
DECL|method|assertIsSatisfied (long timeoutForEmptyEndpoints)
specifier|public
name|void
name|assertIsSatisfied
parameter_list|(
name|long
name|timeoutForEmptyEndpoints
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Asserting: "
operator|+
name|this
operator|+
literal|" is satisfied"
argument_list|)
expr_stmt|;
name|doAssertIsSatisfied
argument_list|(
name|timeoutForEmptyEndpoints
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertPeriod
operator|>
literal|0
condition|)
block|{
comment|// if an assert period was set then re-assert again to ensure the assertion is still valid
name|Thread
operator|.
name|sleep
argument_list|(
name|assertPeriod
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-asserting: "
operator|+
name|this
operator|+
literal|" is satisfied after "
operator|+
name|assertPeriod
operator|+
literal|" millis"
argument_list|)
expr_stmt|;
comment|// do not use timeout when we re-assert
name|doAssertIsSatisfied
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doAssertIsSatisfied (long timeoutForEmptyEndpoints)
specifier|protected
name|void
name|doAssertIsSatisfied
parameter_list|(
name|long
name|timeoutForEmptyEndpoints
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|expectedCount
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|timeoutForEmptyEndpoints
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sleeping for: "
operator|+
name|timeoutForEmptyEndpoints
operator|+
literal|" millis to check there really are no messages received"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeoutForEmptyEndpoints
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Received message count"
argument_list|,
name|expectedCount
argument_list|,
name|getReceivedCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|expectedCount
operator|!=
name|getReceivedCounter
argument_list|()
condition|)
block|{
name|waitForCompleteLatch
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Received message count"
argument_list|,
name|expectedCount
argument_list|,
name|getReceivedCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedMinimumCount
operator|>
literal|0
operator|&&
name|getReceivedCounter
argument_list|()
operator|<
name|expectedMinimumCount
condition|)
block|{
name|waitForCompleteLatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expectedMinimumCount
operator|>=
literal|0
condition|)
block|{
name|int
name|receivedCounter
init|=
name|getReceivedCounter
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Received message count "
operator|+
name|receivedCounter
operator|+
literal|", expected at least "
operator|+
name|expectedMinimumCount
argument_list|,
name|expectedMinimumCount
operator|<=
name|receivedCounter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Runnable
name|test
range|:
name|tests
control|)
block|{
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Throwable
name|failure
range|:
name|failures
control|)
block|{
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught on "
operator|+
name|getEndpointUri
argument_list|()
operator|+
literal|" Exception: "
operator|+
name|failure
argument_list|,
name|failure
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed due to caught exception: "
operator|+
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Validates that the assertions fail on this endpoint      */
DECL|method|assertIsNotSatisfied ()
specifier|public
name|void
name|assertIsNotSatisfied
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// did not throw expected error... fail!
name|failed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected failure: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failed
condition|)
block|{
comment|// fail() throws the AssertionError to indicate the test failed.
name|fail
argument_list|(
literal|"Expected assertion failure but test succeeded!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Validates that the assertions fail on this endpoint       * @param timeoutForEmptyEndpoints the timeout in milliseconds that we      *        should wait for the test to be true      */
DECL|method|assertIsNotSatisfied (long timeoutForEmptyEndpoints)
specifier|public
name|void
name|assertIsNotSatisfied
parameter_list|(
name|long
name|timeoutForEmptyEndpoints
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|assertIsSatisfied
argument_list|(
name|timeoutForEmptyEndpoints
argument_list|)
expr_stmt|;
comment|// did not throw expected error... fail!
name|failed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected failure: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failed
condition|)
block|{
comment|// fail() throws the AssertionError to indicate the test failed.
name|fail
argument_list|(
literal|"Expected assertion failure but test succeeded!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Specifies the expected number of message exchanges that should be      * received by this endpoint      *      * @param expectedCount the number of message exchanges that should be      *                expected by this endpoint      */
DECL|method|expectedMessageCount (int expectedCount)
specifier|public
name|void
name|expectedMessageCount
parameter_list|(
name|int
name|expectedCount
parameter_list|)
block|{
name|setExpectedMessageCount
argument_list|(
name|expectedCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a grace period after which the mock endpoint will re-assert      * to ensure the preliminary assertion is still valid.      *<p/>      * This is used for example to assert that<b>exactly</b> a number of messages       * arrives. For example if {@link #expectedMessageCount(int)} was set to 5, then      * the assertion is satisfied when 5 or more message arrives. To ensure that      * exactly 5 messages arrives, then you would need to wait a little period      * to ensure no further message arrives. This is what you can use this      * {@link #setAssertPeriod(long)} method for.      *<p/>      * By default this period is disabled.      *      * @param period grace period in millis      */
DECL|method|setAssertPeriod (long period)
specifier|public
name|void
name|setAssertPeriod
parameter_list|(
name|long
name|period
parameter_list|)
block|{
name|this
operator|.
name|assertPeriod
operator|=
name|period
expr_stmt|;
block|}
comment|/**      * Specifies the minimum number of expected message exchanges that should be      * received by this endpoint      *      * @param expectedCount the number of message exchanges that should be      *                expected by this endpoint      */
DECL|method|expectedMinimumMessageCount (int expectedCount)
specifier|public
name|void
name|expectedMinimumMessageCount
parameter_list|(
name|int
name|expectedCount
parameter_list|)
block|{
name|setMinimumExpectedMessageCount
argument_list|(
name|expectedCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets an expectation that the given header name& value are received by this endpoint      *<p/>      * You can set multiple expectations for different header names.      * If you set a value of<tt>null</tt> that means we accept either the header is absent, or its value is<tt>null</tt>      */
DECL|method|expectedHeaderReceived (final String name, final Object value)
specifier|public
name|void
name|expectedHeaderReceived
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|expectedHeaderValues
operator|==
literal|null
condition|)
block|{
name|expectedHeaderValues
operator|=
operator|new
name|CaseInsensitiveMap
argument_list|()
expr_stmt|;
comment|// we just wants to expects to be called once
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getReceivedExchanges
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|getReceivedExchange
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|expectedHeaderValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|expectedValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// we accept that an expectedValue of null also means that the header may be absent
if|if
condition|(
name|expectedValue
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Exchange "
operator|+
name|i
operator|+
literal|" has no headers"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|hasHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasKey
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No header with name "
operator|+
name|key
operator|+
literal|" found for message: "
operator|+
name|i
argument_list|,
name|hasKey
argument_list|)
expr_stmt|;
block|}
name|Object
name|actualValue
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|actualValue
operator|=
name|extractActualValue
argument_list|(
name|exchange
argument_list|,
name|actualValue
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Header with name "
operator|+
name|key
operator|+
literal|" for message: "
operator|+
name|i
argument_list|,
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|expectedHeaderValues
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that the given header values are received by this      * endpoint in any order      */
DECL|method|expectedHeaderValuesReceivedInAnyOrder (final String name, final List<?> values)
specifier|public
name|void
name|expectedHeaderValuesReceivedInAnyOrder
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
name|expectedMessageCount
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// these are the expected values to find
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|actualHeaderValues
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Object
argument_list|>
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getReceivedExchanges
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|getReceivedExchange
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|actualValue
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|expectedValue
range|:
name|actualHeaderValues
control|)
block|{
name|actualValue
operator|=
name|extractActualValue
argument_list|(
name|exchange
argument_list|,
name|actualValue
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
comment|// remove any found values
name|actualHeaderValues
operator|.
name|remove
argument_list|(
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// should be empty, as we should find all the values
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|values
operator|.
name|size
argument_list|()
operator|+
literal|" headers with key["
operator|+
name|name
operator|+
literal|"], received "
operator|+
operator|(
name|values
operator|.
name|size
argument_list|()
operator|-
name|actualHeaderValues
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|" headers. Expected header values: "
operator|+
name|actualHeaderValues
argument_list|,
name|actualHeaderValues
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that the given header values are received by this      * endpoint in any order      */
DECL|method|expectedHeaderValuesReceivedInAnyOrder (String name, Object... values)
specifier|public
name|void
name|expectedHeaderValuesReceivedInAnyOrder
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|valueList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|expectedHeaderValuesReceivedInAnyOrder
argument_list|(
name|name
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets an expectation that the given property name& value are received by this endpoint      *<p/>      * You can set multiple expectations for different property names.      * If you set a value of<tt>null</tt> that means we accept either the property is absent, or its value is<tt>null</tt>      */
DECL|method|expectedPropertyReceived (final String name, final Object value)
specifier|public
name|void
name|expectedPropertyReceived
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|expectedPropertyValues
operator|==
literal|null
condition|)
block|{
name|expectedPropertyValues
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// ConcurrentHashMap cannot store null values
name|expectedPropertyValues
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getReceivedExchanges
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|getReceivedExchange
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|expectedPropertyValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|expectedValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// we accept that an expectedValue of null also means that the header may be absent
if|if
condition|(
name|expectedValue
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Exchange "
operator|+
name|i
operator|+
literal|" has no properties"
argument_list|,
operator|!
name|exchange
operator|.
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasKey
init|=
name|exchange
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No property with name "
operator|+
name|key
operator|+
literal|" found for message: "
operator|+
name|i
argument_list|,
name|hasKey
argument_list|)
expr_stmt|;
block|}
name|Object
name|actualValue
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|actualValue
operator|=
name|extractActualValue
argument_list|(
name|exchange
argument_list|,
name|actualValue
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Property with name "
operator|+
name|key
operator|+
literal|" for message: "
operator|+
name|i
argument_list|,
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that the given body values are received by this      * endpoint in the specified order      */
DECL|method|expectedBodiesReceived (final List<?> bodies)
specifier|public
name|void
name|expectedBodiesReceived
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|bodies
parameter_list|)
block|{
name|expectedMessageCount
argument_list|(
name|bodies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedBodyValues
operator|=
name|bodies
expr_stmt|;
name|this
operator|.
name|actualBodyValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedBodyValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|getReceivedExchange
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No exchange received for counter: "
operator|+
name|i
argument_list|,
name|exchange
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Object
name|expectedBody
init|=
name|expectedBodyValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|actualBody
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|actualBodyValues
operator|.
name|size
argument_list|()
condition|)
block|{
name|actualBody
operator|=
name|actualBodyValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|actualBody
operator|=
name|extractActualValue
argument_list|(
name|exchange
argument_list|,
name|actualBody
argument_list|,
name|expectedBody
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Body of message: "
operator|+
name|i
argument_list|,
name|expectedBody
argument_list|,
name|actualBody
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|extractActualValue (Exchange exchange, Object actualValue, Object expectedValue)
specifier|private
name|Object
name|extractActualValue
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|actualValue
parameter_list|,
name|Object
name|expectedValue
parameter_list|)
block|{
if|if
condition|(
name|actualValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|actualValue
operator|instanceof
name|Expression
condition|)
block|{
name|actualValue
operator|=
operator|(
operator|(
name|Expression
operator|)
name|actualValue
operator|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|expectedValue
operator|!=
literal|null
condition|?
name|expectedValue
operator|.
name|getClass
argument_list|()
else|:
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|actualValue
operator|instanceof
name|Predicate
condition|)
block|{
name|actualValue
operator|=
operator|(
operator|(
name|Predicate
operator|)
name|actualValue
operator|)
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedValue
operator|!=
literal|null
condition|)
block|{
name|String
name|from
init|=
name|actualValue
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|to
init|=
name|expectedValue
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|actualValue
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|expectedValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"There is no type conversion possible from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|,
name|actualValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|actualValue
return|;
block|}
comment|/**      * Sets an expectation that the given predicates matches the received messages by this endpoint      */
DECL|method|expectedMessagesMatches (Predicate... predicates)
specifier|public
name|void
name|expectedMessagesMatches
parameter_list|(
name|Predicate
modifier|...
name|predicates
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|predicates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|messageIndex
init|=
name|i
decl_stmt|;
specifier|final
name|Predicate
name|predicate
init|=
name|predicates
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|AssertionClause
name|clause
init|=
operator|new
name|AssertionClause
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|addPredicate
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|applyAssertionOn
argument_list|(
name|MockEndpoint
operator|.
name|this
argument_list|,
name|messageIndex
argument_list|,
name|assertExchangeReceived
argument_list|(
name|messageIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|expects
argument_list|(
name|clause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets an expectation that the given body values are received by this endpoint      */
DECL|method|expectedBodiesReceived (Object... bodies)
specifier|public
name|void
name|expectedBodiesReceived
parameter_list|(
name|Object
modifier|...
name|bodies
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|bodyList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|bodyList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|bodies
argument_list|)
argument_list|)
expr_stmt|;
name|expectedBodiesReceived
argument_list|(
name|bodyList
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that the given body value are received by this endpoint      */
DECL|method|expectedBodyReceived ()
specifier|public
name|AssertionClause
name|expectedBodyReceived
parameter_list|()
block|{
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|AssertionClause
name|clause
init|=
operator|new
name|AssertionClause
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
name|getReceivedExchange
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No exchange received for counter: "
operator|+
literal|0
argument_list|,
name|exchange
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Object
name|actualBody
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|createExpression
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|expectedBody
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body of message: "
operator|+
literal|0
argument_list|,
name|expectedBody
argument_list|,
name|actualBody
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|expects
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds an expectation that the given body values are received by this      * endpoint in any order      */
DECL|method|expectedBodiesReceivedInAnyOrder (final List<?> bodies)
specifier|public
name|void
name|expectedBodiesReceivedInAnyOrder
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|bodies
parameter_list|)
block|{
name|expectedMessageCount
argument_list|(
name|bodies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedBodyValues
operator|=
name|bodies
expr_stmt|;
name|this
operator|.
name|actualBodyValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|actualBodyValuesSet
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|actualBodyValues
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedBodyValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|getReceivedExchange
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No exchange received for counter: "
operator|+
name|i
argument_list|,
name|exchange
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Object
name|expectedBody
init|=
name|expectedBodyValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Message with body "
operator|+
name|expectedBody
operator|+
literal|" was expected but not found in "
operator|+
name|actualBodyValuesSet
argument_list|,
name|actualBodyValuesSet
operator|.
name|remove
argument_list|(
name|expectedBody
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that the given body values are received by this      * endpoint in any order      */
DECL|method|expectedBodiesReceivedInAnyOrder (Object... bodies)
specifier|public
name|void
name|expectedBodiesReceivedInAnyOrder
parameter_list|(
name|Object
modifier|...
name|bodies
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|bodyList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|bodyList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|bodies
argument_list|)
argument_list|)
expr_stmt|;
name|expectedBodiesReceivedInAnyOrder
argument_list|(
name|bodyList
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that a file exists with the given name      *      * @param name name of file, will cater for / and \ on different OS platforms      */
DECL|method|expectedFileExists (final String name)
specifier|public
name|void
name|expectedFileExists
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|expectedFileExists
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that a file exists with the given name      *<p/>      * Will wait at most 5 seconds while checking for the existence of the file.      *      * @param name name of file, will cater for / and \ on different OS platforms      * @param content content of file to compare, can be<tt>null</tt> to not compare content      */
DECL|method|expectedFileExists (final String name, final String content)
specifier|public
name|void
name|expectedFileExists
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|content
parameter_list|)
block|{
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|FileUtil
operator|.
name|normalizePath
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// wait at most 5 seconds for the file to exists
specifier|final
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|5000
decl_stmt|;
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|stop
operator|&&
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|stop
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|timeout
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"The file should exists: "
operator|+
name|name
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|String
name|body
init|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Content of file: "
operator|+
name|name
argument_list|,
name|content
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that messages received should have the given exchange pattern      */
DECL|method|expectedExchangePattern (final ExchangePattern exchangePattern)
specifier|public
name|void
name|expectedExchangePattern
parameter_list|(
specifier|final
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|expectedMessagesMatches
argument_list|(
operator|new
name|Predicate
argument_list|()
block|{
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|equals
argument_list|(
name|exchangePattern
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that messages received should have ascending values      * of the given expression such as a user generated counter value      */
DECL|method|expectsAscending (final Expression expression)
specifier|public
name|void
name|expectsAscending
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|)
block|{
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertMessagesAscending
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that messages received should have ascending values      * of the given expression such as a user generated counter value      */
DECL|method|expectsAscending ()
specifier|public
name|AssertionClause
name|expectsAscending
parameter_list|()
block|{
specifier|final
name|AssertionClause
name|clause
init|=
operator|new
name|AssertionClause
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertMessagesAscending
argument_list|(
name|createExpression
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|expects
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds an expectation that messages received should have descending values      * of the given expression such as a user generated counter value      */
DECL|method|expectsDescending (final Expression expression)
specifier|public
name|void
name|expectsDescending
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|)
block|{
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertMessagesDescending
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that messages received should have descending values      * of the given expression such as a user generated counter value      */
DECL|method|expectsDescending ()
specifier|public
name|AssertionClause
name|expectsDescending
parameter_list|()
block|{
specifier|final
name|AssertionClause
name|clause
init|=
operator|new
name|AssertionClause
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertMessagesDescending
argument_list|(
name|createExpression
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|expects
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds an expectation that no duplicate messages should be received using      * the expression to determine the message ID      *      * @param expression the expression used to create a unique message ID for      *                message comparison (which could just be the message      *                payload if the payload can be tested for uniqueness using      *                {@link Object#equals(Object)} and      *                {@link Object#hashCode()}      */
DECL|method|expectsNoDuplicates (final Expression expression)
specifier|public
name|void
name|expectsNoDuplicates
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|)
block|{
name|expects
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertNoDuplicates
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an expectation that no duplicate messages should be received using      * the expression to determine the message ID      */
DECL|method|expectsNoDuplicates ()
specifier|public
name|AssertionClause
name|expectsNoDuplicates
parameter_list|()
block|{
specifier|final
name|AssertionClause
name|clause
init|=
operator|new
name|AssertionClause
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertNoDuplicates
argument_list|(
name|createExpression
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|expects
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Asserts that the messages have ascending values of the given expression      */
DECL|method|assertMessagesAscending (Expression expression)
specifier|public
name|void
name|assertMessagesAscending
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|assertMessagesSorted
argument_list|(
name|expression
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Asserts that the messages have descending values of the given expression      */
DECL|method|assertMessagesDescending (Expression expression)
specifier|public
name|void
name|assertMessagesDescending
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|assertMessagesSorted
argument_list|(
name|expression
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMessagesSorted (Expression expression, boolean ascending)
specifier|protected
name|void
name|assertMessagesSorted
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|boolean
name|ascending
parameter_list|)
block|{
name|String
name|type
init|=
name|ascending
condition|?
literal|"ascending"
else|:
literal|"descending"
decl_stmt|;
name|ExpressionComparator
name|comparator
init|=
operator|new
name|ExpressionComparator
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|list
init|=
name|getReceivedExchanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|-
literal|1
decl_stmt|;
name|Exchange
name|e1
init|=
name|list
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Exchange
name|e2
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Messages not "
operator|+
name|type
operator|+
literal|". Messages"
operator|+
name|j
operator|+
literal|" and "
operator|+
name|i
operator|+
literal|" are equal with value: "
operator|+
name|expression
operator|.
name|evaluate
argument_list|(
name|e1
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|+
literal|" for expression: "
operator|+
name|expression
operator|+
literal|". Exchanges: "
operator|+
name|e1
operator|+
literal|" and "
operator|+
name|e2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|ascending
condition|)
block|{
name|result
operator|=
name|result
operator|*
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Messages not "
operator|+
name|type
operator|+
literal|". Message "
operator|+
name|j
operator|+
literal|" has value: "
operator|+
name|expression
operator|.
name|evaluate
argument_list|(
name|e1
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|+
literal|" and message "
operator|+
name|i
operator|+
literal|" has value: "
operator|+
name|expression
operator|.
name|evaluate
argument_list|(
name|e2
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|+
literal|" for expression: "
operator|+
name|expression
operator|+
literal|". Exchanges: "
operator|+
name|e1
operator|+
literal|" and "
operator|+
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|assertNoDuplicates (Expression expression)
specifier|public
name|void
name|assertNoDuplicates
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Exchange
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Exchange
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|list
init|=
name|getReceivedExchanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|e2
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|e2
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|e1
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|e1
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Duplicate message found on message "
operator|+
name|i
operator|+
literal|" has value: "
operator|+
name|key
operator|+
literal|" for expression: "
operator|+
name|expression
operator|+
literal|". Exchanges: "
operator|+
name|e1
operator|+
literal|" and "
operator|+
name|e2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds the expectation which will be invoked when enough messages are received      */
DECL|method|expects (Runnable runnable)
specifier|public
name|void
name|expects
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|tests
operator|.
name|add
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an assertion to the given message index      *      * @param messageIndex the number of the message      * @return the assertion clause      */
DECL|method|message (final int messageIndex)
specifier|public
name|AssertionClause
name|message
parameter_list|(
specifier|final
name|int
name|messageIndex
parameter_list|)
block|{
specifier|final
name|AssertionClause
name|clause
init|=
operator|new
name|AssertionClause
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|applyAssertionOn
argument_list|(
name|MockEndpoint
operator|.
name|this
argument_list|,
name|messageIndex
argument_list|,
name|assertExchangeReceived
argument_list|(
name|messageIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|expects
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Adds an assertion to all the received messages      *      * @return the assertion clause      */
DECL|method|allMessages ()
specifier|public
name|AssertionClause
name|allMessages
parameter_list|()
block|{
specifier|final
name|AssertionClause
name|clause
init|=
operator|new
name|AssertionClause
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|list
init|=
name|getReceivedExchanges
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Exchange
name|exchange
range|:
name|list
control|)
block|{
name|applyAssertionOn
argument_list|(
name|MockEndpoint
operator|.
name|this
argument_list|,
name|index
operator|++
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|expects
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Asserts that the given index of message is received (starting at zero)      */
DECL|method|assertExchangeReceived (int index)
specifier|public
name|Exchange
name|assertExchangeReceived
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|count
init|=
name|getReceivedCounter
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not enough messages received. Was: "
operator|+
name|count
argument_list|,
name|count
operator|>
name|index
argument_list|)
expr_stmt|;
return|return
name|getReceivedExchange
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getFailures ()
specifier|public
name|List
argument_list|<
name|Throwable
argument_list|>
name|getFailures
parameter_list|()
block|{
return|return
name|failures
return|;
block|}
DECL|method|getReceivedCounter ()
specifier|public
name|int
name|getReceivedCounter
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
DECL|method|getReceivedExchanges ()
specifier|public
name|List
argument_list|<
name|Exchange
argument_list|>
name|getReceivedExchanges
parameter_list|()
block|{
return|return
name|receivedExchanges
return|;
block|}
DECL|method|getExpectedCount ()
specifier|public
name|int
name|getExpectedCount
parameter_list|()
block|{
return|return
name|expectedCount
return|;
block|}
DECL|method|getSleepForEmptyTest ()
specifier|public
name|long
name|getSleepForEmptyTest
parameter_list|()
block|{
return|return
name|sleepForEmptyTest
return|;
block|}
comment|/**      * Allows a sleep to be specified to wait to check that this endpoint really      * is empty when {@link #expectedMessageCount(int)} is called with zero      *      * @param sleepForEmptyTest the milliseconds to sleep for to determine that      *                this endpoint really is empty      */
DECL|method|setSleepForEmptyTest (long sleepForEmptyTest)
specifier|public
name|void
name|setSleepForEmptyTest
parameter_list|(
name|long
name|sleepForEmptyTest
parameter_list|)
block|{
name|this
operator|.
name|sleepForEmptyTest
operator|=
name|sleepForEmptyTest
expr_stmt|;
block|}
DECL|method|getResultWaitTime ()
specifier|public
name|long
name|getResultWaitTime
parameter_list|()
block|{
return|return
name|resultWaitTime
return|;
block|}
comment|/**      * Sets the maximum amount of time (in millis) the {@link #assertIsSatisfied()} will      * wait on a latch until it is satisfied      */
DECL|method|setResultWaitTime (long resultWaitTime)
specifier|public
name|void
name|setResultWaitTime
parameter_list|(
name|long
name|resultWaitTime
parameter_list|)
block|{
name|this
operator|.
name|resultWaitTime
operator|=
name|resultWaitTime
expr_stmt|;
block|}
comment|/**      * Sets the minimum expected amount of time (in millis) the {@link #assertIsSatisfied()} will      * wait on a latch until it is satisfied      */
DECL|method|setMinimumResultWaitTime (long resultMinimumWaitTime)
specifier|public
name|void
name|setMinimumResultWaitTime
parameter_list|(
name|long
name|resultMinimumWaitTime
parameter_list|)
block|{
name|this
operator|.
name|resultMinimumWaitTime
operator|=
name|resultMinimumWaitTime
expr_stmt|;
block|}
comment|/**      * Specifies the expected number of message exchanges that should be      * received by this endpoint.      *<p/>      * If you want to assert that<b>exactly</b> n'th message arrives to this mock      * endpoint, then see also the {@link #setAssertPeriod(long)} method for further details.      *      * @param expectedCount the number of message exchanges that should be      *                expected by this endpoint      * @see #setAssertPeriod(long)                            */
DECL|method|setExpectedMessageCount (int expectedCount)
specifier|public
name|void
name|setExpectedMessageCount
parameter_list|(
name|int
name|expectedCount
parameter_list|)
block|{
name|this
operator|.
name|expectedCount
operator|=
name|expectedCount
expr_stmt|;
if|if
condition|(
name|expectedCount
operator|<=
literal|0
condition|)
block|{
name|latch
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|expectedCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Specifies the minimum number of expected message exchanges that should be      * received by this endpoint      *      * @param expectedCount the number of message exchanges that should be      *                expected by this endpoint      */
DECL|method|setMinimumExpectedMessageCount (int expectedCount)
specifier|public
name|void
name|setMinimumExpectedMessageCount
parameter_list|(
name|int
name|expectedCount
parameter_list|)
block|{
name|this
operator|.
name|expectedMinimumCount
operator|=
name|expectedCount
expr_stmt|;
if|if
condition|(
name|expectedCount
operator|<=
literal|0
condition|)
block|{
name|latch
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|expectedMinimumCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getReporter ()
specifier|public
name|Processor
name|getReporter
parameter_list|()
block|{
return|return
name|reporter
return|;
block|}
comment|/**      * Allows a processor to added to the endpoint to report on progress of the test      */
DECL|method|setReporter (Processor reporter)
specifier|public
name|void
name|setReporter
parameter_list|(
name|Processor
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
comment|/**      * Specifies to only retain the first n'th number of received {@link Exchange}s.      *<p/>      * This is used when testing with big data, to reduce memory consumption by not storing      * copies of every {@link Exchange} this mock endpoint receives.      *<p/>      *<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}      * will still return the actual number of received {@link Exchange}s. For example      * if we have received 5000 {@link Exchange}s, and have configured to only retain the first      * 10 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return<tt>5000</tt>      * but there is only the first 10 {@link Exchange}s in the {@link #getExchanges()} and      * {@link #getReceivedExchanges()} methods.      *<p/>      * When using this method, then some of the other expectation methods is not supported,      * for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first      * number of bodies received.      *<p/>      * You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,      * to limit both the first and last received.      *       * @param retainFirst  to limit and only keep the first n'th received {@link Exchange}s, use      *<tt>0</tt> to not retain any messages, or<tt>-1</tt> to retain all.      * @see #setRetainLast(int)      */
DECL|method|setRetainFirst (int retainFirst)
specifier|public
name|void
name|setRetainFirst
parameter_list|(
name|int
name|retainFirst
parameter_list|)
block|{
name|this
operator|.
name|retainFirst
operator|=
name|retainFirst
expr_stmt|;
block|}
comment|/**      * Specifies to only retain the last n'th number of received {@link Exchange}s.      *<p/>      * This is used when testing with big data, to reduce memory consumption by not storing      * copies of every {@link Exchange} this mock endpoint receives.      *<p/>      *<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}      * will still return the actual number of received {@link Exchange}s. For example      * if we have received 5000 {@link Exchange}s, and have configured to only retain the last      * 20 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return<tt>5000</tt>      * but there is only the last 20 {@link Exchange}s in the {@link #getExchanges()} and      * {@link #getReceivedExchanges()} methods.      *<p/>      * When using this method, then some of the other expectation methods is not supported,      * for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first      * number of bodies received.      *<p/>      * You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,      * to limit both the first and last received.      *      * @param retainLast  to limit and only keep the last n'th received {@link Exchange}s, use      *<tt>0</tt> to not retain any messages, or<tt>-1</tt> to retain all.      * @see #setRetainFirst(int)      */
DECL|method|setRetainLast (int retainLast)
specifier|public
name|void
name|setRetainLast
parameter_list|(
name|int
name|retainLast
parameter_list|)
block|{
name|this
operator|.
name|retainLast
operator|=
name|retainLast
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|expectedCount
operator|=
operator|-
literal|1
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
name|defaultProcessor
operator|=
literal|null
expr_stmt|;
name|processors
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Processor
argument_list|>
argument_list|()
expr_stmt|;
name|receivedExchanges
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Exchange
argument_list|>
argument_list|()
expr_stmt|;
name|failures
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
expr_stmt|;
name|tests
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
expr_stmt|;
name|latch
operator|=
literal|null
expr_stmt|;
name|sleepForEmptyTest
operator|=
literal|0
expr_stmt|;
name|resultWaitTime
operator|=
literal|0
expr_stmt|;
name|resultMinimumWaitTime
operator|=
literal|0L
expr_stmt|;
name|assertPeriod
operator|=
literal|0L
expr_stmt|;
name|expectedMinimumCount
operator|=
operator|-
literal|1
expr_stmt|;
name|expectedBodyValues
operator|=
literal|null
expr_stmt|;
name|actualBodyValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|expectedHeaderValues
operator|=
literal|null
expr_stmt|;
name|actualHeaderValues
operator|=
literal|null
expr_stmt|;
name|expectedPropertyValues
operator|=
literal|null
expr_stmt|;
name|actualPropertyValues
operator|=
literal|null
expr_stmt|;
name|retainFirst
operator|=
operator|-
literal|1
expr_stmt|;
name|retainLast
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|onExchange (Exchange exchange)
specifier|protected
specifier|synchronized
name|void
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
name|Exchange
name|copy
init|=
name|exchange
decl_stmt|;
if|if
condition|(
name|copyOnExchange
condition|)
block|{
comment|// copy the exchange so the mock stores the copy and not the actual exchange
name|copy
operator|=
name|ExchangeHelper
operator|.
name|createCopy
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|performAssertions
argument_list|(
name|exchange
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// must catch java.lang.Throwable as AssertionError extends java.lang.Error
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// make sure latch is counted down to avoid test hanging forever
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Performs the assertions on the incoming exchange.      *      * @param exchange   the actual exchange      * @param copy       a copy of the exchange (only store this)      * @throws Exception can be thrown if something went wrong      */
DECL|method|performAssertions (Exchange exchange, Exchange copy)
specifier|protected
name|void
name|performAssertions
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Exchange
name|copy
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|copy
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Object
name|actualBody
init|=
name|in
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedHeaderValues
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|actualHeaderValues
operator|==
literal|null
condition|)
block|{
name|actualHeaderValues
operator|=
operator|new
name|CaseInsensitiveMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|hasHeaders
argument_list|()
condition|)
block|{
name|actualHeaderValues
operator|.
name|putAll
argument_list|(
name|in
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectedPropertyValues
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|actualPropertyValues
operator|==
literal|null
condition|)
block|{
name|actualPropertyValues
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|actualPropertyValues
operator|.
name|putAll
argument_list|(
name|copy
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedBodyValues
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|actualBodyValues
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedBodyValues
operator|.
name|size
argument_list|()
operator|>
name|index
condition|)
block|{
name|Object
name|expectedBody
init|=
name|expectedBodyValues
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedBody
operator|!=
literal|null
condition|)
block|{
comment|// prefer to convert body early, for example when using files
comment|// we need to read the content at this time
name|Object
name|body
init|=
name|in
operator|.
name|getBody
argument_list|(
name|expectedBody
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|actualBody
operator|=
name|body
expr_stmt|;
block|}
block|}
name|actualBodyValues
operator|.
name|add
argument_list|(
name|actualBody
argument_list|)
expr_stmt|;
block|}
block|}
comment|// let counter be 0 index-based in the logs
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|getEndpointUri
argument_list|()
operator|+
literal|">>>> "
operator|+
name|counter
operator|+
literal|" : "
operator|+
name|copy
operator|+
literal|" with body: "
operator|+
name|actualBody
decl_stmt|;
if|if
condition|(
name|copy
operator|.
name|getIn
argument_list|()
operator|.
name|hasHeaders
argument_list|()
condition|)
block|{
name|msg
operator|+=
literal|" and headers:"
operator|+
name|copy
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|// record timestamp when exchange was received
name|copy
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|RECEIVED_TIMESTAMP
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a copy of the received exchange
name|addReceivedExchange
argument_list|(
name|copy
argument_list|)
expr_stmt|;
comment|// and then increment counter after adding received exchange
operator|++
name|counter
expr_stmt|;
name|Processor
name|processor
init|=
name|processors
operator|.
name|get
argument_list|(
name|getReceivedCounter
argument_list|()
argument_list|)
operator|!=
literal|null
condition|?
name|processors
operator|.
name|get
argument_list|(
name|getReceivedCounter
argument_list|()
argument_list|)
else|:
name|defaultProcessor
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// must process the incoming exchange and NOT the copy as the idea
comment|// is the end user can manipulate the exchange
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// set exceptions on exchange so we can throw exceptions to simulate errors
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds the received exchange.      *       * @param copy  a copy of the received exchange      */
DECL|method|addReceivedExchange (Exchange copy)
specifier|protected
name|void
name|addReceivedExchange
parameter_list|(
name|Exchange
name|copy
parameter_list|)
block|{
if|if
condition|(
name|retainFirst
operator|==
literal|0
operator|&&
name|retainLast
operator|==
literal|0
condition|)
block|{
comment|// do not retain any messages at all
block|}
elseif|else
if|if
condition|(
name|retainFirst
operator|<
literal|0
operator|&&
name|retainLast
operator|<
literal|0
condition|)
block|{
comment|// no limitation so keep them all
name|receivedExchanges
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// okay there is some sort of limitations, so figure out what to retain
if|if
condition|(
name|retainFirst
operator|>
literal|0
operator|&&
name|counter
operator|<
name|retainFirst
condition|)
block|{
comment|// store a copy as its within the retain first limitation
name|receivedExchanges
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|retainLast
operator|>
literal|0
condition|)
block|{
comment|// remove the oldest from the last retained boundary,
name|int
name|index
init|=
name|receivedExchanges
operator|.
name|size
argument_list|()
operator|-
name|retainLast
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
comment|// but must be outside the first range as well
comment|// otherwise we should not remove the oldest
if|if
condition|(
name|retainFirst
operator|<=
literal|0
operator|||
name|retainFirst
operator|<=
name|index
condition|)
block|{
name|receivedExchanges
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|// store a copy of the last n'th received
name|receivedExchanges
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForCompleteLatch ()
specifier|protected
name|void
name|waitForCompleteLatch
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|latch
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Should have a latch!"
argument_list|)
expr_stmt|;
block|}
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|waitForCompleteLatch
argument_list|(
name|resultWaitTime
argument_list|)
expr_stmt|;
name|long
name|delta
init|=
name|watch
operator|.
name|stop
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Took {} millis to complete latch"
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|resultMinimumWaitTime
operator|>
literal|0
operator|&&
name|delta
operator|<
name|resultMinimumWaitTime
condition|)
block|{
name|fail
argument_list|(
literal|"Expected minimum "
operator|+
name|resultMinimumWaitTime
operator|+
literal|" millis waiting on the result, but was faster with "
operator|+
name|delta
operator|+
literal|" millis."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForCompleteLatch (long timeout)
specifier|protected
name|void
name|waitForCompleteLatch
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// Wait for a default 10 seconds if resultWaitTime is not set
name|long
name|waitTime
init|=
name|timeout
operator|==
literal|0
condition|?
literal|10000L
else|:
name|timeout
decl_stmt|;
comment|// now let's wait for the results
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting on the latch for: "
operator|+
name|timeout
operator|+
literal|" millis"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
name|waitTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEquals (String message, Object expectedValue, Object actualValue)
specifier|protected
name|void
name|assertEquals
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
name|expectedValue
parameter_list|,
name|Object
name|actualValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|expectedValue
argument_list|,
name|actualValue
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|message
operator|+
literal|". Expected:<"
operator|+
name|expectedValue
operator|+
literal|"> but was:<"
operator|+
name|actualValue
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertTrue (String message, boolean predicate)
specifier|protected
name|void
name|assertTrue
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|predicate
parameter_list|)
block|{
if|if
condition|(
operator|!
name|predicate
condition|)
block|{
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fail (Object message)
specifier|protected
name|void
name|fail
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|list
init|=
name|getReceivedExchanges
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Exchange
name|exchange
range|:
name|list
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} failed and received[{}]: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getEndpointUri
argument_list|()
block|,
operator|++
name|index
block|,
name|exchange
block|}
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
name|getEndpointUri
argument_list|()
operator|+
literal|" "
operator|+
name|message
argument_list|)
throw|;
block|}
DECL|method|getExpectedMinimumCount ()
specifier|public
name|int
name|getExpectedMinimumCount
parameter_list|()
block|{
return|return
name|expectedMinimumCount
return|;
block|}
DECL|method|await ()
specifier|public
name|void
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|await (long timeout, TimeUnit unit)
specifier|public
name|boolean
name|await
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
return|return
name|latch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|isLenientProperties ()
specifier|public
name|boolean
name|isLenientProperties
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getReceivedExchange (int index)
specifier|private
name|Exchange
name|getReceivedExchange
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<=
name|receivedExchanges
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|receivedExchanges
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

