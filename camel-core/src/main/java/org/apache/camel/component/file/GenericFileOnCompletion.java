begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|LoggingExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * On completion strategy that performs the required work after the {@link Exchange} has been processed.  *<p/>  * The work is for example to move the processed file into a backup folder, delete the file or  * in case of processing failure do a rollback.   *  * @version   */
end_comment

begin_class
DECL|class|GenericFileOnCompletion
specifier|public
class|class
name|GenericFileOnCompletion
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Synchronization
block|{
DECL|field|log
specifier|private
specifier|final
specifier|transient
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericFileOnCompletion
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
decl_stmt|;
DECL|field|operations
specifier|private
name|GenericFileOperations
argument_list|<
name|T
argument_list|>
name|operations
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
DECL|field|file
specifier|private
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
decl_stmt|;
DECL|field|absoluteFileName
specifier|private
name|String
name|absoluteFileName
decl_stmt|;
DECL|method|GenericFileOnCompletion (GenericFileEndpoint<T> endpoint, GenericFileOperations<T> operations, GenericFile<T> file, String absoluteFileName)
specifier|public
name|GenericFileOnCompletion
parameter_list|(
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|,
name|GenericFileOperations
argument_list|<
name|T
argument_list|>
name|operations
parameter_list|,
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|,
name|String
name|absoluteFileName
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|operations
operator|=
name|operations
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|absoluteFileName
operator|=
name|absoluteFileName
expr_stmt|;
block|}
DECL|method|onComplete (Exchange exchange)
specifier|public
name|void
name|onComplete
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|onCompletion
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|onFailure (Exchange exchange)
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|onCompletion
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|getExceptionHandler ()
specifier|public
name|ExceptionHandler
name|getExceptionHandler
parameter_list|()
block|{
if|if
condition|(
name|exceptionHandler
operator|==
literal|null
condition|)
block|{
name|exceptionHandler
operator|=
operator|new
name|LoggingExceptionHandler
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exceptionHandler
return|;
block|}
DECL|method|setExceptionHandler (ExceptionHandler exceptionHandler)
specifier|public
name|void
name|setExceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
operator|.
name|exceptionHandler
operator|=
name|exceptionHandler
expr_stmt|;
block|}
DECL|method|onCompletion (Exchange exchange)
specifier|protected
name|void
name|onCompletion
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|GenericFileProcessStrategy
argument_list|<
name|T
argument_list|>
name|processStrategy
init|=
name|endpoint
operator|.
name|getGenericFileProcessStrategy
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Done processing file: {} using exchange: {}"
argument_list|,
name|file
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// commit or rollback
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|boolean
name|failed
init|=
name|exchange
operator|.
name|isFailed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|failed
condition|)
block|{
comment|// commit the file strategy if there was no failure or already handled by the DeadLetterChannel
name|processStrategyCommit
argument_list|(
name|processStrategy
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|committed
operator|=
literal|true
expr_stmt|;
block|}
comment|// if we failed, then it will be handled by the rollback in the finally block below
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|processStrategyRollback
argument_list|(
name|processStrategy
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|// remove file from the in progress list as its no longer in progress
comment|// use the original file name that was used to add it to the repository
comment|// as the name can be different when using preMove option
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Strategy when the file was processed and a commit should be executed.      *      * @param processStrategy the strategy to perform the commit      * @param exchange        the exchange      * @param file            the file processed      */
DECL|method|processStrategyCommit (GenericFileProcessStrategy<T> processStrategy, Exchange exchange, GenericFile<T> file)
specifier|protected
name|void
name|processStrategyCommit
parameter_list|(
name|GenericFileProcessStrategy
argument_list|<
name|T
argument_list|>
name|processStrategy
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isIdempotent
argument_list|()
condition|)
block|{
comment|// use absolute file path as default key, but evaluate if an expression key was configured
name|String
name|key
init|=
name|absoluteFileName
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getIdempotentKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Exchange
name|dummy
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|key
operator|=
name|endpoint
operator|.
name|getIdempotentKey
argument_list|()
operator|.
name|evaluate
argument_list|(
name|dummy
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// only add to idempotent repository if we could process the file
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|getIdempotentRepository
argument_list|()
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|// must be last in batch to delete the done file name
comment|// delete done file if used (and not noop=true)
name|boolean
name|complete
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|BATCH_COMPLETE
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getDoneFileName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|endpoint
operator|.
name|isNoop
argument_list|()
operator|&&
name|complete
condition|)
block|{
comment|// done file must be in same path as the original input file
name|String
name|doneFileName
init|=
name|endpoint
operator|.
name|createDoneFileName
argument_list|(
name|absoluteFileName
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|doneFileName
argument_list|,
literal|"doneFileName"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
try|try
block|{
comment|// delete done file
name|boolean
name|deleted
init|=
name|operations
operator|.
name|deleteFile
argument_list|(
name|doneFileName
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Done file: {} was deleted: {}"
argument_list|,
name|doneFileName
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Done file: "
operator|+
name|doneFileName
operator|+
literal|" could not be deleted"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Commit file strategy: {} for file: {}"
argument_list|,
name|processStrategy
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|processStrategy
operator|.
name|commit
argument_list|(
name|operations
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Strategy when the file was not processed and a rollback should be executed.      *      * @param processStrategy the strategy to perform the commit      * @param exchange        the exchange      * @param file            the file processed      */
DECL|method|processStrategyRollback (GenericFileProcessStrategy<T> processStrategy, Exchange exchange, GenericFile<T> file)
specifier|protected
name|void
name|processStrategyRollback
parameter_list|(
name|GenericFileProcessStrategy
argument_list|<
name|T
argument_list|>
name|processStrategy
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Rollback file strategy: "
operator|+
name|processStrategy
operator|+
literal|" for file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|processStrategy
operator|.
name|rollback
argument_list|(
name|operations
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleException (Throwable t)
specifier|protected
name|void
name|handleException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|newt
init|=
operator|(
name|t
operator|==
literal|null
operator|)
condition|?
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Handling [null] exception"
argument_list|)
else|:
name|t
decl_stmt|;
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
name|newt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GenericFileOnCompletion"
return|;
block|}
block|}
end_class

end_unit

