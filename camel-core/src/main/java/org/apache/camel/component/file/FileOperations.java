begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WrappedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * File operations for {@link java.io.File}.  */
end_comment

begin_class
DECL|class|FileOperations
specifier|public
class|class
name|FileOperations
implements|implements
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileOperations
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|FileEndpoint
name|endpoint
decl_stmt|;
DECL|method|FileOperations ()
specifier|public
name|FileOperations
parameter_list|()
block|{     }
DECL|method|FileOperations (FileEndpoint endpoint)
specifier|public
name|FileOperations
parameter_list|(
name|FileEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|setEndpoint (GenericFileEndpoint<File> endpoint)
specifier|public
name|void
name|setEndpoint
parameter_list|(
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
operator|(
name|FileEndpoint
operator|)
name|endpoint
expr_stmt|;
block|}
DECL|method|deleteFile (String name)
specifier|public
name|boolean
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
return|;
block|}
DECL|method|renameFile (String from, String to)
specifier|public
name|boolean
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|to
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|FileUtil
operator|.
name|renameFile
argument_list|(
name|file
argument_list|,
name|target
argument_list|,
name|endpoint
operator|.
name|isCopyAndDeleteOnRenameFail
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Error renaming file from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|existsFile (String name)
specifier|public
name|boolean
name|existsFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|exists
argument_list|()
return|;
block|}
DECL|method|buildDirectory (String directory, boolean absolute)
specifier|public
name|boolean
name|buildDirectory
parameter_list|(
name|String
name|directory
parameter_list|,
name|boolean
name|absolute
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|endpoint
argument_list|,
literal|"endpoint"
argument_list|)
expr_stmt|;
comment|// always create endpoint defined directory
if|if
condition|(
name|endpoint
operator|.
name|isAutoCreate
argument_list|()
operator|&&
operator|!
name|endpoint
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Building starting directory: {}"
argument_list|,
name|endpoint
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|directory
argument_list|)
condition|)
block|{
comment|// no directory to build so return true to indicate ok
return|return
literal|true
return|;
block|}
name|File
name|endpointPath
init|=
name|endpoint
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|File
name|path
decl_stmt|;
if|if
condition|(
name|absolute
condition|)
block|{
comment|// absolute path
name|path
operator|=
name|target
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|endpointPath
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
comment|// its just the root of the endpoint path
name|path
operator|=
name|endpointPath
expr_stmt|;
block|}
else|else
block|{
comment|// relative after the endpoint path
name|String
name|afterRoot
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|directory
argument_list|,
name|endpointPath
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|afterRoot
argument_list|)
condition|)
block|{
comment|// dir is under the root path
name|path
operator|=
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getFile
argument_list|()
argument_list|,
name|afterRoot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dir is relative to the root path
name|path
operator|=
operator|new
name|File
argument_list|(
name|endpoint
operator|.
name|getFile
argument_list|()
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We need to make sure that this is thread-safe and only one thread tries to create the path directory at the same time.
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|path
operator|.
name|isDirectory
argument_list|()
operator|&&
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// the directory already exists
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Building directory: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|path
operator|.
name|mkdirs
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|listFiles ()
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|listFiles
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// noop
return|return
literal|null
return|;
block|}
DECL|method|listFiles (String path)
specifier|public
name|List
argument_list|<
name|File
argument_list|>
name|listFiles
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// noop
return|return
literal|null
return|;
block|}
DECL|method|changeCurrentDirectory (String path)
specifier|public
name|void
name|changeCurrentDirectory
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// noop
block|}
DECL|method|changeToParentDirectory ()
specifier|public
name|void
name|changeToParentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// noop
block|}
DECL|method|getCurrentDirectory ()
specifier|public
name|String
name|getCurrentDirectory
parameter_list|()
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// noop
return|return
literal|null
return|;
block|}
DECL|method|retrieveFile (String name, Exchange exchange)
specifier|public
name|boolean
name|retrieveFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// noop as we use type converters to read the body content for java.io.File
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|releaseRetreivedFileResources (Exchange exchange)
specifier|public
name|void
name|releaseRetreivedFileResources
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// noop as we used type converters to read the body content for java.io.File
block|}
DECL|method|storeFile (String fileName, Exchange exchange)
specifier|public
name|boolean
name|storeFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|endpoint
argument_list|,
literal|"endpoint"
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// if an existing file already exists what should we do?
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Ignore
condition|)
block|{
comment|// ignore but indicate that the file was written
name|LOG
operator|.
name|trace
argument_list|(
literal|"An existing file already exists: {}. Ignore and do not override it."
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Fail
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"File already exist: "
operator|+
name|file
operator|+
literal|". Cannot write new file."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Move
condition|)
block|{
comment|// move any existing file first
name|doMoveExistingFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Do an explicit test for a null body and decide what to do
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isAllowNullBody
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Writing empty file."
argument_list|)
expr_stmt|;
try|try
block|{
name|writeFileEmptyBody
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot store file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot write null body to file: "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
comment|// we can write the file by 3 different techniques
comment|// 1. write file to file
comment|// 2. rename a file from a local work path
comment|// 3. write stream to file
try|try
block|{
comment|// is there an explicit charset configured we must write the file as
name|String
name|charset
init|=
name|endpoint
operator|.
name|getCharset
argument_list|()
decl_stmt|;
comment|// we can optimize and use file based if no charset must be used, and the input body is a file
name|File
name|source
init|=
literal|null
decl_stmt|;
name|boolean
name|fileBased
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
comment|// if no charset, then we can try using file directly (optimized)
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|WrappedFile
condition|)
block|{
name|body
operator|=
operator|(
operator|(
name|WrappedFile
argument_list|<
name|?
argument_list|>
operator|)
name|body
operator|)
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|fileBased
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|instanceof
name|File
condition|)
block|{
name|source
operator|=
operator|(
name|File
operator|)
name|body
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileBased
condition|)
block|{
comment|// okay we know the body is a file based
comment|// so try to see if we can optimize by renaming the local work path file instead of doing
comment|// a full file to file copy, as the local work copy is to be deleted afterwards anyway
comment|// local work path
name|File
name|local
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LOCAL_WORK_PATH
argument_list|,
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|local
operator|!=
literal|null
operator|&&
name|local
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|renamed
init|=
name|writeFileByLocalWorkPath
argument_list|(
name|local
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|renamed
condition|)
block|{
comment|// try to keep last modified timestamp if configured to do so
name|keepLastModified
argument_list|(
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// clear header as we have renamed the file
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LOCAL_WORK_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// return as the operation is complete, we just renamed the local work file
comment|// to the target.
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|source
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// no there is no local work file so use file to file copy if the source exists
name|writeFileByFile
argument_list|(
name|source
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// try to keep last modified timestamp if configured to do so
name|keepLastModified
argument_list|(
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
comment|// charset configured so we must use a reader so we can write with encoding
name|Reader
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
comment|// okay no direct reader conversion, so use an input stream (which a lot can be converted as)
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
comment|// buffer the reader
name|in
operator|=
name|IOHelper
operator|.
name|buffered
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|writeFileByReaderWithCharset
argument_list|(
name|in
argument_list|,
name|file
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fallback and use stream based
name|InputStream
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|writeFileByStream
argument_list|(
name|in
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|// try to keep last modified timestamp if configured to do so
name|keepLastModified
argument_list|(
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot store file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot store file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Moves any existing file due fileExists=Move is in use.      */
DECL|method|doMoveExistingFile (String fileName)
specifier|private
name|void
name|doMoveExistingFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|GenericFileOperationFailedException
block|{
comment|// need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
comment|// create a dummy exchange as Exchange is needed for expression evaluation
comment|// we support only the following 3 tokens.
name|Exchange
name|dummy
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|String
name|onlyName
init|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME_ONLY
argument_list|,
name|onlyName
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_PARENT
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|String
name|to
init|=
name|endpoint
operator|.
name|getMoveExisting
argument_list|()
operator|.
name|evaluate
argument_list|(
name|dummy
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// we must normalize it (to avoid having both \ and / in the name which confuses java.io.File)
name|to
operator|=
name|FileUtil
operator|.
name|normalizePath
argument_list|(
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"moveExisting evaluated as empty String, cannot move existing file: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
comment|// ensure any paths is created before we rename as the renamed file may be in a different path (which may be non exiting)
comment|// use java.io.File to compute the file path
name|File
name|toFile
init|=
operator|new
name|File
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|String
name|directory
init|=
name|toFile
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|boolean
name|absolute
init|=
name|FileUtil
operator|.
name|isAbsolute
argument_list|(
name|toFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|buildDirectory
argument_list|(
name|directory
argument_list|,
name|absolute
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot build directory [{}] (could be because of denied permissions)"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
comment|// deal if there already exists a file
if|if
condition|(
name|existsFile
argument_list|(
name|to
argument_list|)
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isEagerDeleteTargetFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Deleting existing file: {}"
argument_list|,
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deleteFile
argument_list|(
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot delete file: "
operator|+
name|to
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot moved existing file from: "
operator|+
name|fileName
operator|+
literal|" to: "
operator|+
name|to
operator|+
literal|" as there already exists a file: "
operator|+
name|to
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Moving existing file: {} to: {}"
argument_list|,
name|fileName
argument_list|,
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|renameFile
argument_list|(
name|fileName
argument_list|,
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot rename file from: "
operator|+
name|fileName
operator|+
literal|" to: "
operator|+
name|to
argument_list|)
throw|;
block|}
block|}
DECL|method|keepLastModified (Exchange exchange, File file)
specifier|private
name|void
name|keepLastModified
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isKeepLastModified
argument_list|()
condition|)
block|{
name|Long
name|last
decl_stmt|;
name|Date
name|date
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Date
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
name|date
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// fallback and try a long
name|last
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|boolean
name|result
init|=
name|file
operator|.
name|setLastModified
argument_list|(
name|last
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Keeping last modified timestamp: {} on file: {} with result: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|last
block|,
name|file
block|,
name|result
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|writeFileByLocalWorkPath (File source, File file)
specifier|private
name|boolean
name|writeFileByLocalWorkPath
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using local work file being renamed from: {} to: {}"
argument_list|,
name|source
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|FileUtil
operator|.
name|renameFile
argument_list|(
name|source
argument_list|,
name|file
argument_list|,
name|endpoint
operator|.
name|isCopyAndDeleteOnRenameFail
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeFileByFile (File source, File target)
specifier|private
name|void
name|writeFileByFile
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChannel
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|FileChannel
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|prepareOutputFileChannel
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using FileChannel to write file: {}"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|in
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|position
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|size
condition|)
block|{
name|position
operator|+=
name|in
operator|.
name|transferTo
argument_list|(
name|position
argument_list|,
name|endpoint
operator|.
name|getBufferSize
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// force updates to be written, and then close afterwards
name|IOHelper
operator|.
name|force
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeFileByStream (InputStream in, File target)
specifier|private
name|void
name|writeFileByStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChannel
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|prepareOutputFileChannel
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using InputStream to write file: {}"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|endpoint
operator|.
name|getBufferSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|int
name|bytesRead
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|bytesRead
operator|<
name|size
condition|)
block|{
name|byteBuffer
operator|.
name|limit
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// force updates to be written, and then close afterwards
name|IOHelper
operator|.
name|force
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeFileByReaderWithCharset (Reader in, File target, String charset)
specifier|private
name|void
name|writeFileByReaderWithCharset
parameter_list|(
name|Reader
name|in
parameter_list|,
name|File
name|target
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|append
init|=
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Append
decl_stmt|;
name|Writer
name|out
init|=
name|IOConverter
operator|.
name|toWriter
argument_list|(
name|target
argument_list|,
name|append
argument_list|,
name|charset
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using Reader to write file: {} with charset: {}"
argument_list|,
name|target
argument_list|,
name|charset
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|endpoint
operator|.
name|getBufferSize
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new file if the file doesn't exist.      * If the endpoint's existing file logic is set to 'Override' then the target file will be truncated      */
DECL|method|writeFileEmptyBody (File target)
specifier|private
name|void
name|writeFileEmptyBody
parameter_list|(
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating new empty file: {}"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|createNewFile
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Override
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Truncating existing file: {}"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|FileChannel
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|target
argument_list|)
operator|.
name|getChannel
argument_list|()
decl_stmt|;
try|try
block|{
name|out
operator|.
name|truncate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|force
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|out
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates and prepares the output file channel. Will position itself in correct position if the file is writable      * eg. it should append or override any existing content.      */
DECL|method|prepareOutputFileChannel (File target)
specifier|private
name|FileChannel
name|prepareOutputFileChannel
parameter_list|(
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|endpoint
operator|.
name|getFileExist
argument_list|()
operator|==
name|GenericFileExist
operator|.
name|Append
condition|)
block|{
name|FileChannel
name|out
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|target
argument_list|,
literal|"rw"
argument_list|)
operator|.
name|getChannel
argument_list|()
decl_stmt|;
return|return
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|FileOutputStream
argument_list|(
name|target
argument_list|)
operator|.
name|getChannel
argument_list|()
return|;
block|}
block|}
end_class

end_unit

