begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.strategy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileExclusiveReadLockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileProcessStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|FileLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|FileProcessStrategyFactory
specifier|public
specifier|final
class|class
name|FileProcessStrategyFactory
block|{
DECL|method|FileProcessStrategyFactory ()
specifier|private
name|FileProcessStrategyFactory
parameter_list|()
block|{     }
DECL|method|createGenericFileProcessStrategy (Map<String, Object> params)
specifier|public
specifier|static
name|GenericFileProcessStrategy
name|createGenericFileProcessStrategy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
comment|// We assume a value is present only if its value not null for String and 'true' for boolean
name|boolean
name|isNoop
init|=
name|params
operator|.
name|get
argument_list|(
literal|"noop"
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|isDelete
init|=
name|params
operator|.
name|get
argument_list|(
literal|"delete"
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|Expression
name|moveExpression
init|=
operator|(
name|Expression
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"move"
argument_list|)
decl_stmt|;
name|Expression
name|preMoveExpression
init|=
operator|(
name|Expression
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"preMove"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNoop
condition|)
block|{
name|GenericFileNoOpProcessStrategy
argument_list|<
name|File
argument_list|>
name|strategy
init|=
operator|new
name|GenericFileNoOpProcessStrategy
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setExclusiveReadLockStrategy
argument_list|(
name|getExclusiveReadLockStrategy
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|strategy
return|;
block|}
elseif|else
if|if
condition|(
name|isDelete
condition|)
block|{
name|GenericFileDeleteProcessStrategy
argument_list|<
name|File
argument_list|>
name|strategy
init|=
operator|new
name|GenericFileDeleteProcessStrategy
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setExclusiveReadLockStrategy
argument_list|(
name|getExclusiveReadLockStrategy
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|strategy
return|;
block|}
elseif|else
if|if
condition|(
name|moveExpression
operator|!=
literal|null
operator|||
name|preMoveExpression
operator|!=
literal|null
condition|)
block|{
name|GenericFileRenameProcessStrategy
argument_list|<
name|File
argument_list|>
name|strategy
init|=
operator|new
name|GenericFileRenameProcessStrategy
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setExclusiveReadLockStrategy
argument_list|(
name|getExclusiveReadLockStrategy
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|moveExpression
operator|!=
literal|null
condition|)
block|{
name|GenericFileExpressionRenamer
argument_list|<
name|File
argument_list|>
name|renamer
init|=
operator|new
name|GenericFileExpressionRenamer
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|renamer
operator|.
name|setExpression
argument_list|(
name|moveExpression
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setCommitRenamer
argument_list|(
name|renamer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preMoveExpression
operator|!=
literal|null
condition|)
block|{
name|GenericFileExpressionRenamer
argument_list|<
name|File
argument_list|>
name|renamer
init|=
operator|new
name|GenericFileExpressionRenamer
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|renamer
operator|.
name|setExpression
argument_list|(
name|preMoveExpression
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setBeginRenamer
argument_list|(
name|renamer
argument_list|)
expr_stmt|;
block|}
return|return
name|strategy
return|;
block|}
else|else
block|{
comment|// default strategy will move files in a .camel/ subfolder where the file was consumed
name|GenericFileRenameProcessStrategy
argument_list|<
name|File
argument_list|>
name|strategy
init|=
operator|new
name|GenericFileRenameProcessStrategy
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setExclusiveReadLockStrategy
argument_list|(
name|getExclusiveReadLockStrategy
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|exp
init|=
name|FileLanguage
operator|.
name|file
argument_list|(
literal|"${file:parent}/.camel/${file:onlyname}"
argument_list|)
decl_stmt|;
name|strategy
operator|.
name|setCommitRenamer
argument_list|(
operator|new
name|GenericFileExpressionRenamer
argument_list|<
name|File
argument_list|>
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|strategy
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getExclusiveReadLockStrategy (Map<String, Object> params)
specifier|private
specifier|static
name|GenericFileExclusiveReadLockStrategy
argument_list|<
name|File
argument_list|>
name|getExclusiveReadLockStrategy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|GenericFileExclusiveReadLockStrategy
name|strategy
init|=
operator|(
name|GenericFileExclusiveReadLockStrategy
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"exclusiveReadLockStrategy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|!=
literal|null
condition|)
block|{
return|return
name|strategy
return|;
block|}
comment|// no explicit stategy set then fallback to readLock option
name|String
name|readLock
init|=
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"readLock"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|readLock
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|readLock
argument_list|)
operator|||
literal|"false"
operator|.
name|equals
argument_list|(
name|readLock
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
literal|"fileLock"
operator|.
name|equals
argument_list|(
name|readLock
argument_list|)
condition|)
block|{
name|GenericFileExclusiveReadLockStrategy
argument_list|<
name|File
argument_list|>
name|readLockStrategy
init|=
operator|new
name|FileLockExclusiveReadLockStrategy
argument_list|()
decl_stmt|;
name|Long
name|timeout
init|=
operator|(
name|Long
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"readLockTimeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|readLockStrategy
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
name|readLockStrategy
return|;
block|}
elseif|else
if|if
condition|(
literal|"rename"
operator|.
name|equals
argument_list|(
name|readLock
argument_list|)
condition|)
block|{
name|GenericFileExclusiveReadLockStrategy
argument_list|<
name|File
argument_list|>
name|readLockStrategy
init|=
operator|new
name|GenericFileRenameExclusiveReadLockStrategy
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|Long
name|timeout
init|=
operator|(
name|Long
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"readLockTimeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|readLockStrategy
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
name|readLockStrategy
return|;
block|}
elseif|else
if|if
condition|(
literal|"markerFile"
operator|.
name|equals
argument_list|(
name|readLock
argument_list|)
condition|)
block|{
return|return
operator|new
name|MarkerFileExclusiveReadLockStrategy
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

