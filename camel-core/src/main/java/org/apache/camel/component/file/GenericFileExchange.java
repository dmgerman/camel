begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_class
DECL|class|GenericFileExchange
specifier|public
class|class
name|GenericFileExchange
parameter_list|<
name|T
parameter_list|>
extends|extends
name|DefaultExchange
block|{
DECL|field|file
specifier|private
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
decl_stmt|;
DECL|method|GenericFileExchange (CamelContext context)
specifier|public
name|GenericFileExchange
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericFileExchange (CamelContext context, ExchangePattern pattern)
specifier|public
name|GenericFileExchange
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericFileExchange (Exchange parent)
specifier|public
name|GenericFileExchange
parameter_list|(
name|Exchange
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericFileExchange (Endpoint fromEndpoint)
specifier|public
name|GenericFileExchange
parameter_list|(
name|Endpoint
name|fromEndpoint
parameter_list|)
block|{
name|super
argument_list|(
name|fromEndpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericFileExchange (GenericFileEndpoint endpoint, ExchangePattern pattern, GenericFile<T> file)
specifier|public
name|GenericFileExchange
parameter_list|(
name|GenericFileEndpoint
name|endpoint
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|,
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|setGenericFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericFileExchange (DefaultExchange parent, GenericFile<T> file)
specifier|public
name|GenericFileExchange
parameter_list|(
name|DefaultExchange
name|parent
parameter_list|,
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setGenericFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericFileExchange (Endpoint fromEndpoint, ExchangePattern pattern)
specifier|public
name|GenericFileExchange
parameter_list|(
name|Endpoint
name|fromEndpoint
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|fromEndpoint
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|populateHeaders (GenericFile<T> file)
specifier|protected
name|void
name|populateHeaders
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFileName"
argument_list|,
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFileAbsolute"
argument_list|,
name|file
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFileAbsolutePath"
argument_list|,
name|file
operator|.
name|getAbsoluteFileName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFilePath"
argument_list|,
name|file
operator|.
name|getAbsoluteFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFilePath"
argument_list|,
name|file
operator|.
name|getEndpointPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|file
operator|.
name|getRelativeFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFileParent"
argument_list|,
name|file
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFileCanonicalPath"
argument_list|,
name|file
operator|.
name|getCanonicalFileName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|getFileLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFileLength"
argument_list|,
name|file
operator|.
name|getFileLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|getLastModified
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFileLastModified"
argument_list|,
operator|new
name|Date
argument_list|(
name|file
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getGenericFile ()
specifier|public
name|GenericFile
argument_list|<
name|T
argument_list|>
name|getGenericFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
DECL|method|setGenericFile (GenericFile<T> file)
specifier|public
name|void
name|setGenericFile
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|)
block|{
name|setIn
argument_list|(
operator|new
name|GenericFileMessage
argument_list|<
name|T
argument_list|>
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|populateHeaders
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|newInstance ()
specifier|public
name|Exchange
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|GenericFileExchange
argument_list|<
name|T
argument_list|>
argument_list|(
name|this
argument_list|,
name|file
argument_list|)
return|;
block|}
block|}
end_class

end_unit

