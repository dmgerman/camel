begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.saga
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|saga
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * The saga component provides access to advanced options for managing the flow in the Saga EIP.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.21.0"
argument_list|,
name|scheme
operator|=
literal|"saga"
argument_list|,
name|title
operator|=
literal|"Saga"
argument_list|,
name|syntax
operator|=
literal|"saga:action"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"core,endpoint"
argument_list|)
DECL|class|SagaEndpoint
specifier|public
class|class
name|SagaEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|enum|SagaEndpointAction
specifier|public
enum|enum
name|SagaEndpointAction
block|{
DECL|enumConstant|COMPLETE
name|COMPLETE
block|,
DECL|enumConstant|COMPENSATE
name|COMPENSATE
block|}
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Action to execute (complete or compensate)"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|action
specifier|private
specifier|final
name|SagaEndpointAction
name|action
decl_stmt|;
DECL|method|SagaEndpoint (String endpointUri, SagaComponent component, String action)
specifier|public
name|SagaEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|SagaComponent
name|component
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|SagaEndpointAction
operator|.
name|valueOf
argument_list|(
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|action
argument_list|,
literal|"action"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|SagaEndpointAction
operator|.
name|COMPLETE
operator|.
name|equals
argument_list|(
name|this
operator|.
name|action
argument_list|)
condition|)
block|{
return|return
operator|new
name|SagaProducer
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|SagaEndpointAction
operator|.
name|COMPENSATE
operator|.
name|equals
argument_list|(
name|this
operator|.
name|action
argument_list|)
condition|)
block|{
return|return
operator|new
name|SagaProducer
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported action '"
operator|+
name|this
operator|.
name|action
operator|+
literal|"' in saga endpoint"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Consumer not allowed for saga endpoint"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

