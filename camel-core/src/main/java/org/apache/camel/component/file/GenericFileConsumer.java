begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EmptyAsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledBatchPollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeUtils
import|;
end_import

begin_comment
comment|/**  * Base class for file consumers.  */
end_comment

begin_class
DECL|class|GenericFileConsumer
specifier|public
specifier|abstract
class|class
name|GenericFileConsumer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ScheduledBatchPollingConsumer
block|{
DECL|field|endpoint
specifier|protected
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
decl_stmt|;
DECL|field|operations
specifier|protected
name|GenericFileOperations
argument_list|<
name|T
argument_list|>
name|operations
decl_stmt|;
DECL|field|processStrategy
specifier|protected
name|GenericFileProcessStrategy
argument_list|<
name|T
argument_list|>
name|processStrategy
decl_stmt|;
DECL|field|fileExpressionResult
specifier|protected
name|String
name|fileExpressionResult
decl_stmt|;
DECL|field|shutdownRunningTask
specifier|protected
specifier|volatile
name|ShutdownRunningTask
name|shutdownRunningTask
decl_stmt|;
DECL|field|pendingExchanges
specifier|protected
specifier|volatile
name|int
name|pendingExchanges
decl_stmt|;
DECL|field|customProcessor
specifier|protected
name|Processor
name|customProcessor
decl_stmt|;
DECL|field|eagerLimitMaxMessagesPerPoll
specifier|protected
name|boolean
name|eagerLimitMaxMessagesPerPoll
init|=
literal|true
decl_stmt|;
DECL|field|prepareOnStartup
specifier|protected
specifier|volatile
name|boolean
name|prepareOnStartup
decl_stmt|;
DECL|field|includePattern
specifier|private
specifier|final
name|Pattern
name|includePattern
decl_stmt|;
DECL|field|excludePattern
specifier|private
specifier|final
name|Pattern
name|excludePattern
decl_stmt|;
DECL|method|GenericFileConsumer (GenericFileEndpoint<T> endpoint, Processor processor, GenericFileOperations<T> operations, GenericFileProcessStrategy<T> processStrategy)
specifier|public
name|GenericFileConsumer
parameter_list|(
name|GenericFileEndpoint
argument_list|<
name|T
argument_list|>
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|GenericFileOperations
argument_list|<
name|T
argument_list|>
name|operations
parameter_list|,
name|GenericFileProcessStrategy
argument_list|<
name|T
argument_list|>
name|processStrategy
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|operations
operator|=
name|operations
expr_stmt|;
name|this
operator|.
name|processStrategy
operator|=
name|processStrategy
expr_stmt|;
name|this
operator|.
name|includePattern
operator|=
name|endpoint
operator|.
name|getIncludePattern
argument_list|()
expr_stmt|;
name|this
operator|.
name|excludePattern
operator|=
name|endpoint
operator|.
name|getExcludePattern
argument_list|()
expr_stmt|;
block|}
DECL|method|getCustomProcessor ()
specifier|public
name|Processor
name|getCustomProcessor
parameter_list|()
block|{
return|return
name|customProcessor
return|;
block|}
comment|/**      * Use a custom processor to process the exchange.      *<p/>      * Only set this if you need to do custom processing, instead of the regular processing.      *<p/>      * This is for example used to browse file endpoints by leveraging the file consumer to poll      * the directory to gather the list of exchanges. But to avoid processing the files regularly      * we can use a custom processor.      *      * @param processor a custom processor      */
DECL|method|setCustomProcessor (Processor processor)
specifier|public
name|void
name|setCustomProcessor
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|customProcessor
operator|=
name|processor
expr_stmt|;
block|}
DECL|method|isEagerLimitMaxMessagesPerPoll ()
specifier|public
name|boolean
name|isEagerLimitMaxMessagesPerPoll
parameter_list|()
block|{
return|return
name|eagerLimitMaxMessagesPerPoll
return|;
block|}
DECL|method|setEagerLimitMaxMessagesPerPoll (boolean eagerLimitMaxMessagesPerPoll)
specifier|public
name|void
name|setEagerLimitMaxMessagesPerPoll
parameter_list|(
name|boolean
name|eagerLimitMaxMessagesPerPoll
parameter_list|)
block|{
name|this
operator|.
name|eagerLimitMaxMessagesPerPoll
operator|=
name|eagerLimitMaxMessagesPerPoll
expr_stmt|;
block|}
comment|/**      * Poll for files      */
DECL|method|poll ()
specifier|public
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// must prepare on startup the very first time
if|if
condition|(
operator|!
name|prepareOnStartup
condition|)
block|{
comment|// prepare on startup
name|processStrategy
operator|.
name|prepareOnStartup
argument_list|(
name|operations
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|prepareOnStartup
operator|=
literal|true
expr_stmt|;
block|}
comment|// must reset for each poll
name|fileExpressionResult
operator|=
literal|null
expr_stmt|;
name|shutdownRunningTask
operator|=
literal|null
expr_stmt|;
name|pendingExchanges
operator|=
literal|0
expr_stmt|;
comment|// before we poll is there anything we need to check?
comment|// such as are we connected to the FTP Server still?
if|if
condition|(
operator|!
name|prePollCheck
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping poll as pre poll check returned false"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// gather list of files to process
name|List
argument_list|<
name|GenericFile
argument_list|<
name|T
argument_list|>
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
comment|// time how long it takes to poll
name|StopWatch
name|stop
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|boolean
name|limitHit
decl_stmt|;
try|try
block|{
name|limitHit
operator|=
operator|!
name|pollDirectory
argument_list|(
name|name
argument_list|,
name|files
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// during poll directory we add files to the in progress repository, in case of any exception thrown after this work
comment|// we must then drain the in progress files before rethrowing the exception
name|log
operator|.
name|debug
argument_list|(
literal|"Error occurred during poll directory: {} due {}. Removing {} files marked as in-progress."
argument_list|,
name|name
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|removeExcessiveInProgressFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|long
name|delta
init|=
name|stop
operator|.
name|taken
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Took {} to poll: {}"
argument_list|,
name|TimeUtils
operator|.
name|printDuration
argument_list|(
name|delta
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// log if we hit the limit
if|if
condition|(
name|limitHit
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Limiting maximum messages to poll at {} files as there were more messages in this poll."
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
block|}
comment|// sort files using file comparator if provided
if|if
condition|(
name|endpoint
operator|.
name|getSorter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|files
operator|.
name|sort
argument_list|(
name|endpoint
operator|.
name|getSorter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort using build in sorters so we can use expressions
comment|// use a linked list so we can dequeue the exchanges
name|LinkedList
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
range|:
name|files
control|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|configureExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|configureMessage
argument_list|(
name|file
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|exchanges
operator|.
name|add
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// sort files using exchange comparator if provided
if|if
condition|(
name|endpoint
operator|.
name|getSortBy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchanges
operator|.
name|sort
argument_list|(
name|endpoint
operator|.
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isShuffle
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|exchanges
argument_list|)
expr_stmt|;
block|}
comment|// use a queue for the exchanges
name|Deque
argument_list|<
name|Exchange
argument_list|>
name|q
init|=
name|exchanges
decl_stmt|;
comment|// we are not eager limiting, but we have configured a limit, so cut the list of files
if|if
condition|(
operator|!
name|eagerLimitMaxMessagesPerPoll
operator|&&
name|maxMessagesPerPoll
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|>
name|maxMessagesPerPoll
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Limiting maximum messages to poll at {} files as there were more messages in this poll."
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
comment|// must first remove excessive files from the in progress repository
name|removeExcessiveInProgressFiles
argument_list|(
name|q
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
block|}
block|}
comment|// consume files one by one
name|int
name|total
init|=
name|exchanges
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Total {} files to consume"
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
name|int
name|polledMessages
init|=
name|processBatch
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
name|q
argument_list|)
argument_list|)
decl_stmt|;
name|postPollCheck
argument_list|(
name|polledMessages
argument_list|)
expr_stmt|;
return|return
name|polledMessages
return|;
block|}
DECL|method|processBatch (Queue<Object> exchanges)
specifier|public
name|int
name|processBatch
parameter_list|(
name|Queue
argument_list|<
name|Object
argument_list|>
name|exchanges
parameter_list|)
block|{
name|int
name|total
init|=
name|exchanges
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|answer
init|=
name|total
decl_stmt|;
comment|// limit if needed
if|if
condition|(
name|maxMessagesPerPoll
operator|>
literal|0
operator|&&
name|total
operator|>
name|maxMessagesPerPoll
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Limiting to maximum messages to poll {} as there were {} messages in this poll."
argument_list|,
name|maxMessagesPerPoll
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|total
operator|=
name|maxMessagesPerPoll
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|total
operator|&&
name|isBatchAllowed
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
comment|// only loop if we are started (allowed to run)
comment|// use poll to remove the head so it does not consume memory even after we have processed it
name|Exchange
name|exchange
init|=
operator|(
name|Exchange
operator|)
name|exchanges
operator|.
name|poll
argument_list|()
decl_stmt|;
comment|// add current index and total as properties
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|BATCH_INDEX
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|BATCH_SIZE
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|BATCH_COMPLETE
argument_list|,
name|index
operator|==
name|total
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// update pending number of exchanges
name|pendingExchanges
operator|=
name|total
operator|-
name|index
operator|-
literal|1
expr_stmt|;
comment|// process the current exchange
name|boolean
name|started
decl_stmt|;
if|if
condition|(
name|customProcessor
operator|!=
literal|null
condition|)
block|{
comment|// use a custom processor
name|started
operator|=
name|customProcessExchange
argument_list|(
name|exchange
argument_list|,
name|customProcessor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// process the exchange regular
name|started
operator|=
name|processExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// if we did not start process the file then decrement the counter
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|answer
operator|--
expr_stmt|;
block|}
block|}
comment|// drain any in progress files as we are done with this batch
name|removeExcessiveInProgressFiles
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Deque
argument_list|<
name|?
argument_list|>
operator|)
name|exchanges
argument_list|,
name|Exchange
operator|.
name|class
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Drain any in progress files as we are done with this batch      *      * @param exchanges  the exchanges      * @param limit      the limit      */
DECL|method|removeExcessiveInProgressFiles (Deque<Exchange> exchanges, int limit)
specifier|protected
name|void
name|removeExcessiveInProgressFiles
parameter_list|(
name|Deque
argument_list|<
name|Exchange
argument_list|>
name|exchanges
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
comment|// remove the file from the in progress list in case the batch was limited by max messages per poll
while|while
condition|(
name|exchanges
operator|.
name|size
argument_list|()
operator|>
name|limit
condition|)
block|{
comment|// must remove last
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|removeLast
argument_list|()
decl_stmt|;
name|GenericFile
argument_list|<
name|?
argument_list|>
name|file
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|,
name|GenericFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Drain any in progress files as we are done with the files      *      * @param files  the files      */
DECL|method|removeExcessiveInProgressFiles (List<GenericFile<T>> files)
specifier|protected
name|void
name|removeExcessiveInProgressFiles
parameter_list|(
name|List
argument_list|<
name|GenericFile
argument_list|<
name|T
argument_list|>
argument_list|>
name|files
parameter_list|)
block|{
for|for
control|(
name|GenericFile
name|file
range|:
name|files
control|)
block|{
name|String
name|key
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Whether or not we can continue polling for more files      *      * @param fileList  the current list of gathered files      * @return<tt>true</tt> to continue,<tt>false</tt> to stop due hitting maxMessagesPerPoll limit      */
DECL|method|canPollMoreFiles (List<?> fileList)
specifier|public
name|boolean
name|canPollMoreFiles
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|fileList
parameter_list|)
block|{
comment|// at this point we should not limit if we are not eager
if|if
condition|(
operator|!
name|eagerLimitMaxMessagesPerPoll
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|maxMessagesPerPoll
operator|<=
literal|0
condition|)
block|{
comment|// no limitation
return|return
literal|true
return|;
block|}
comment|// then only poll if we haven't reached the max limit
return|return
name|fileList
operator|.
name|size
argument_list|()
operator|<
name|maxMessagesPerPoll
return|;
block|}
comment|/**      * Override if required. Perform some checks (and perhaps actions) before we poll.      *      * @return<tt>true</tt> to poll,<tt>false</tt> to skip this poll.      */
DECL|method|prePollCheck ()
specifier|protected
name|boolean
name|prePollCheck
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Override if required. Perform some checks (and perhaps actions) after we have polled.      *      * @param polledMessages number of polled messages      */
DECL|method|postPollCheck (int polledMessages)
specifier|protected
name|void
name|postPollCheck
parameter_list|(
name|int
name|polledMessages
parameter_list|)
block|{
comment|// noop
block|}
comment|/**      * Polls the given directory for files to process      *      * @param fileName current directory or file      * @param fileList current list of files gathered      * @param depth the current depth of the directory (will start from 0)      * @return whether or not to continue polling,<tt>false</tt> means the maxMessagesPerPoll limit has been hit      */
DECL|method|pollDirectory (String fileName, List<GenericFile<T>> fileList, int depth)
specifier|protected
specifier|abstract
name|boolean
name|pollDirectory
parameter_list|(
name|String
name|fileName
parameter_list|,
name|List
argument_list|<
name|GenericFile
argument_list|<
name|T
argument_list|>
argument_list|>
name|fileList
parameter_list|,
name|int
name|depth
parameter_list|)
function_decl|;
comment|/**      * Sets the operations to be used.      *<p/>      * Can be used to set a fresh operations in case of recovery attempts      *      * @param operations the operations      */
DECL|method|setOperations (GenericFileOperations<T> operations)
specifier|public
name|void
name|setOperations
parameter_list|(
name|GenericFileOperations
argument_list|<
name|T
argument_list|>
name|operations
parameter_list|)
block|{
name|this
operator|.
name|operations
operator|=
name|operations
expr_stmt|;
block|}
comment|/**      * Whether to ignore if the file cannot be retrieved.      *<p/>      * By default an {@link GenericFileOperationFailedException} is thrown if the file cannot be retrieved.      *<p/>      * This method allows to suppress this and just ignore that.      *      * @param name        the file name      * @param exchange    the exchange      * @param cause       optional exception occurred during retrieving file      * @return<tt>true</tt> to ignore,<tt>false</tt> is the default.      */
DECL|method|ignoreCannotRetrieveFile (String name, Exchange exchange, Exception cause)
specifier|protected
name|boolean
name|ignoreCannotRetrieveFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Processes the exchange      *      * @param exchange the exchange      * @return<tt>true</tt> if the file was started to be processed,<tt>false</tt> if the file was not started      * to be processed, for some reason (not found, or aborted etc)      */
DECL|method|processExchange (final Exchange exchange)
specifier|protected
name|boolean
name|processExchange
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
init|=
name|getExchangeFileProperty
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Processing file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// must extract the absolute name before the begin strategy as the file could potentially be pre moved
comment|// and then the file name would be changed
name|String
name|absoluteFileName
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
comment|// check if we can begin processing the file
name|Exception
name|beginCause
init|=
literal|null
decl_stmt|;
name|boolean
name|begin
init|=
literal|false
decl_stmt|;
try|try
block|{
name|begin
operator|=
name|processStrategy
operator|.
name|begin
argument_list|(
name|operations
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|beginCause
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|begin
condition|)
block|{
comment|// no something was wrong, so we need to abort and remove the file from the in progress list
name|Exception
name|abortCause
init|=
literal|null
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} cannot begin processing file: {}"
argument_list|,
name|endpoint
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
comment|// abort
name|processStrategy
operator|.
name|abort
argument_list|(
name|operations
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|abortCause
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
comment|// begin returned false, so remove file from the in progress list as its no longer in progress
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|beginCause
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|endpoint
operator|+
literal|" cannot begin processing file: "
operator|+
name|file
operator|+
literal|" due to: "
operator|+
name|beginCause
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|msg
argument_list|,
name|beginCause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|abortCause
operator|!=
literal|null
condition|)
block|{
name|String
name|msg2
init|=
name|endpoint
operator|+
literal|" cannot abort processing file: "
operator|+
name|file
operator|+
literal|" due to: "
operator|+
name|abortCause
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|msg2
argument_list|,
name|abortCause
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// must use file from exchange as it can be updated due the
comment|// preMoveNamePrefix/preMoveNamePostfix options
specifier|final
name|GenericFile
argument_list|<
name|T
argument_list|>
name|target
init|=
name|getExchangeFileProperty
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// we can begin processing the file so update file headers on the Camel message
comment|// in case it took some time to acquire read lock, and file size/timestamp has been updated since etc
name|updateFileHeaders
argument_list|(
name|target
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
comment|// must use full name when downloading so we have the correct path
specifier|final
name|String
name|name
init|=
name|target
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRetrieveFile
argument_list|()
condition|)
block|{
comment|// retrieve the file using the stream
name|log
operator|.
name|trace
argument_list|(
literal|"Retrieving file: {} from: {}"
argument_list|,
name|name
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
comment|// retrieve the file and check it was a success
name|boolean
name|retrieved
decl_stmt|;
name|Exception
name|cause
init|=
literal|null
decl_stmt|;
try|try
block|{
name|retrieved
operator|=
name|operations
operator|.
name|retrieveFile
argument_list|(
name|name
argument_list|,
name|exchange
argument_list|,
name|target
operator|.
name|getFileLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|retrieved
operator|=
literal|false
expr_stmt|;
name|cause
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|retrieved
condition|)
block|{
if|if
condition|(
name|ignoreCannotRetrieveFile
argument_list|(
name|name
argument_list|,
name|exchange
argument_list|,
name|cause
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Cannot retrieve file {} maybe it does not exists. Ignoring."
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// remove file from the in progress list as we could not retrieve it, but should ignore
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// throw exception to handle the problem with retrieving the file
comment|// then if the method return false or throws an exception is handled the same in here
comment|// as in both cases an exception is being thrown
if|if
condition|(
name|cause
operator|instanceof
name|GenericFileOperationFailedException
condition|)
block|{
throw|throw
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Cannot retrieve file: "
operator|+
name|file
operator|+
literal|" from: "
operator|+
name|endpoint
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Retrieved file: {} from: {}"
argument_list|,
name|name
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Skipped retrieval of file: {} from: {}"
argument_list|,
name|name
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// register on completion callback that does the completion strategies
comment|// (for instance to move the file after we have processed it)
name|exchange
operator|.
name|addOnCompletion
argument_list|(
operator|new
name|GenericFileOnCompletion
argument_list|<>
argument_list|(
name|endpoint
argument_list|,
name|operations
argument_list|,
name|processStrategy
argument_list|,
name|target
argument_list|,
name|absoluteFileName
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"About to process file: {} using exchange: {}"
argument_list|,
name|target
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|isSynchronous
argument_list|()
condition|)
block|{
comment|// process synchronously
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// process the exchange using the async consumer to support async routing engine
comment|// which can be supported by this file consumer as all the done work is
comment|// provided in the GenericFileOnCompletion
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|EmptyAsyncCallback
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// remove file from the in progress list due to failure
comment|// (cannot be in finally block due to GenericFileOnCompletion will remove it
comment|// from in progress when it takes over and processes the file, which may happen
comment|// by another thread at a later time. So its only safe to remove it if there was an exception)
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"Error processing file "
operator|+
name|file
operator|+
literal|" due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Updates the information on {@link Message} after we have acquired read-lock and      * can begin process the file.      *      * @param file    the file      * @param message the Camel message to update its headers      */
DECL|method|updateFileHeaders (GenericFile<T> file, Message message)
specifier|protected
specifier|abstract
name|void
name|updateFileHeaders
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|,
name|Message
name|message
parameter_list|)
function_decl|;
comment|/**      * Override if required.  Files are retrieved / returns true by default      *      * @return<tt>true</tt> to retrieve files,<tt>false</tt> to skip retrieval of files.      */
DECL|method|isRetrieveFile ()
specifier|protected
name|boolean
name|isRetrieveFile
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Processes the exchange using a custom processor.      *      * @param exchange the exchange      * @param processor the custom processor      */
DECL|method|customProcessExchange (final Exchange exchange, final Processor processor)
specifier|protected
name|boolean
name|customProcessExchange
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Processor
name|processor
parameter_list|)
block|{
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
init|=
name|getExchangeFileProperty
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Custom processing file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// must extract the absolute name before the begin strategy as the file could potentially be pre moved
comment|// and then the file name would be changed
name|String
name|absoluteFileName
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
try|try
block|{
comment|// process using the custom processor
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|endpoint
operator|+
literal|" error custom processing: "
operator|+
name|file
operator|+
literal|" due to: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// always remove file from the in progress list as its no longer in progress
comment|// use the original file name that was used to add it to the repository
comment|// as the name can be different when using preMove option
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|remove
argument_list|(
name|absoluteFileName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Strategy for validating if the given remote file should be included or not      *      * @param file        the file      * @param isDirectory whether the file is a directory or a file      * @param files       files in the directory      * @return<tt>true</tt> to include the file,<tt>false</tt> to skip it      */
DECL|method|isValidFile (GenericFile<T> file, boolean isDirectory, List<T> files)
specifier|protected
name|boolean
name|isValidFile
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|,
name|boolean
name|isDirectory
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|files
parameter_list|)
block|{
name|String
name|absoluteFilePath
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isMatched
argument_list|(
name|file
argument_list|,
name|isDirectory
argument_list|,
name|files
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"File did not match. Will skip this file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// directory is always valid
if|if
condition|(
name|isDirectory
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// check if file is already in progress
if|if
condition|(
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|contains
argument_list|(
name|absoluteFilePath
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Skipping as file is already in progress: {}"
argument_list|,
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// if its a file then check we have the file in the idempotent registry already
if|if
condition|(
name|endpoint
operator|.
name|isIdempotent
argument_list|()
condition|)
block|{
comment|// use absolute file path as default key, but evaluate if an expression key was configured
name|String
name|key
init|=
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getIdempotentKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Exchange
name|dummy
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|key
operator|=
name|endpoint
operator|.
name|getIdempotentKey
argument_list|()
operator|.
name|evaluate
argument_list|(
name|dummy
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Evaluated idempotentKey: {} for file: {}"
argument_list|,
name|key
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getIdempotentRepository
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"This consumer is idempotent and the file has been consumed before matching idempotentKey: {}. Will skip this file: {}"
argument_list|,
name|key
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// okay so final step is to be able to add atomic as in-progress, so we are the
comment|// only thread processing this file
return|return
name|endpoint
operator|.
name|getInProgressRepository
argument_list|()
operator|.
name|add
argument_list|(
name|absoluteFilePath
argument_list|)
return|;
block|}
comment|/**      * Strategy to perform file matching based on endpoint configuration.      *<p/>      * Will always return<tt>false</tt> for certain files/folders:      *<ul>      *<li>Starting with a dot</li>      *<li>lock files</li>      *</ul>      * And then<tt>true</tt> for directories.      *      * @param file        the file      * @param isDirectory whether the file is a directory or a file      * @param files       files in the directory      * @return<tt>true</tt> if the file is matched,<tt>false</tt> if not      */
DECL|method|isMatched (GenericFile<T> file, boolean isDirectory, List<T> files)
specifier|protected
name|boolean
name|isMatched
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|,
name|boolean
name|isDirectory
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|files
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getFileNameOnly
argument_list|()
decl_stmt|;
comment|// folders/names starting with dot is always skipped (eg. ".", ".camel", ".camelLock")
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// lock files should be skipped
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
name|FileComponent
operator|.
name|DEFAULT_LOCK_FILE_POSTFIX
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|endpoint
operator|.
name|getFilter
argument_list|()
operator|.
name|accept
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|endpoint
operator|.
name|getAntFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|endpoint
operator|.
name|getAntFilter
argument_list|()
operator|.
name|accept
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|isDirectory
operator|&&
name|endpoint
operator|.
name|getFilterDirectory
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// create a dummy exchange as Exchange is needed for expression evaluation
name|Exchange
name|dummy
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|matches
init|=
name|endpoint
operator|.
name|getFilterDirectory
argument_list|()
operator|.
name|matches
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matches
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// directories are regarded as matched if filter accepted them
if|if
condition|(
name|isDirectory
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// exclude take precedence over include
if|if
condition|(
name|excludePattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|excludePattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|includePattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|includePattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// use file expression for a simple dynamic file filter
if|if
condition|(
name|endpoint
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fileExpressionResult
operator|=
name|evaluateFileExpression
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileExpressionResult
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|fileExpressionResult
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|endpoint
operator|.
name|getFilterFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// create a dummy exchange as Exchange is needed for expression evaluation
name|Exchange
name|dummy
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|matches
init|=
name|endpoint
operator|.
name|getFilterFile
argument_list|()
operator|.
name|matches
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matches
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// if done file name is enabled, then the file is only valid if a done file exists
if|if
condition|(
name|endpoint
operator|.
name|getDoneFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// done file must be in same path as the file
name|String
name|doneFileName
init|=
name|endpoint
operator|.
name|createDoneFileName
argument_list|(
name|file
operator|.
name|getAbsoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|doneFileName
argument_list|,
literal|"doneFileName"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
comment|// is it a done file name?
if|if
condition|(
name|endpoint
operator|.
name|isDoneFile
argument_list|(
name|file
operator|.
name|getFileNameOnly
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Skipping done file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isMatched
argument_list|(
name|file
argument_list|,
name|doneFileName
argument_list|,
name|files
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Strategy to perform file matching based on endpoint configuration in terms of done file name.      *      * @param file         the file      * @param doneFileName the done file name (without any paths)      * @param files        files in the directory      * @return<tt>true</tt> if the file is matched,<tt>false</tt> if not      */
DECL|method|isMatched (GenericFile<T> file, String doneFileName, List<T> files)
specifier|protected
specifier|abstract
name|boolean
name|isMatched
parameter_list|(
name|GenericFile
argument_list|<
name|T
argument_list|>
name|file
parameter_list|,
name|String
name|doneFileName
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|files
parameter_list|)
function_decl|;
DECL|method|evaluateFileExpression ()
specifier|protected
name|String
name|evaluateFileExpression
parameter_list|()
block|{
if|if
condition|(
name|fileExpressionResult
operator|==
literal|null
operator|&&
name|endpoint
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// create a dummy exchange as Exchange is needed for expression evaluation
name|Exchange
name|dummy
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|fileExpressionResult
operator|=
name|endpoint
operator|.
name|getFileName
argument_list|()
operator|.
name|evaluate
argument_list|(
name|dummy
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|dummy
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|dummy
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|fileExpressionResult
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getExchangeFileProperty (Exchange exchange)
specifier|private
name|GenericFile
argument_list|<
name|T
argument_list|>
name|getExchangeFileProperty
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|(
name|GenericFile
argument_list|<
name|T
argument_list|>
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|FileComponent
operator|.
name|FILE_EXCHANGE_FILE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// inject CamelContext before starting as it may be needed
if|if
condition|(
name|processStrategy
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|processStrategy
operator|)
operator|.
name|setCamelContext
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|processStrategy
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareOnStartup
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|processStrategy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInit ()
specifier|public
name|void
name|onInit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop as we do a manual on-demand poll with GenericFilePolllingConsumer
block|}
annotation|@
name|Override
DECL|method|beforePoll (long timeout)
specifier|public
name|long
name|beforePoll
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop as we do a manual on-demand poll with GenericFilePolllingConsumer
return|return
name|timeout
return|;
block|}
annotation|@
name|Override
DECL|method|afterPoll ()
specifier|public
name|void
name|afterPoll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop as we do a manual on-demand poll with GenericFilePolllingConsumer
block|}
block|}
end_class

end_unit

