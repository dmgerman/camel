begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.timer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|timer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StartupListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Suspendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The timer consumer.  *  * @version   */
end_comment

begin_class
DECL|class|TimerConsumer
specifier|public
class|class
name|TimerConsumer
extends|extends
name|DefaultConsumer
implements|implements
name|StartupListener
implements|,
name|Suspendable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimerConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|TimerEndpoint
name|endpoint
decl_stmt|;
DECL|field|task
specifier|private
specifier|volatile
name|TimerTask
name|task
decl_stmt|;
DECL|field|configured
specifier|private
specifier|volatile
name|boolean
name|configured
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|method|TimerConsumer (TimerEndpoint endpoint, Processor processor)
specifier|public
name|TimerConsumer
parameter_list|(
name|TimerEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|TimerEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|TimerEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getDelay
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|task
operator|=
operator|new
name|TimerTask
argument_list|()
block|{
comment|// counter
specifier|private
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isTaskRunAllowed
argument_list|()
condition|)
block|{
comment|// do not run timer task as it was not allowed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Run not allowed for timer: {}"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|long
name|count
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|boolean
name|fire
init|=
name|endpoint
operator|.
name|getRepeatCount
argument_list|()
operator|<=
literal|0
operator|||
name|count
operator|<=
name|endpoint
operator|.
name|getRepeatCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fire
condition|)
block|{
name|sendTimerExchange
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no need to fire anymore as we exceeded repeat
comment|// count
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancelling {} timer as repeat count limit reached after {} counts."
argument_list|,
name|endpoint
operator|.
name|getTimerName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getRepeatCount
argument_list|()
argument_list|)
expr_stmt|;
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// catch all to avoid the JVM closing the thread and not
comment|// firing again
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error processing exchange. This exception will be ignored, to let the timer be able to trigger again."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
comment|// only configure task if CamelContext already started, otherwise
comment|// the StartupListener
comment|// is configuring the task later
if|if
condition|(
operator|!
name|configured
operator|&&
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|Timer
name|timer
init|=
name|endpoint
operator|.
name|getTimer
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|configureTask
argument_list|(
name|task
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if the delay is negative then we use an ExecutorService and fire messages as soon as possible
name|executorService
operator|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadExecutor
argument_list|(
name|this
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|endpoint
operator|.
name|getRepeatCount
argument_list|()
operator|<=
literal|0
operator|||
name|count
operator|<=
name|endpoint
operator|.
name|getRepeatCount
argument_list|()
operator|)
operator|&&
name|isRunAllowed
argument_list|()
condition|)
block|{
name|sendTimerExchange
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|task
operator|=
literal|null
expr_stmt|;
name|configured
operator|=
literal|false
expr_stmt|;
comment|// remove timer
name|endpoint
operator|.
name|removeTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// if executorService is instantiated then we shutdown it
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCamelContextStarted (CamelContext context, boolean alreadyStarted)
specifier|public
name|void
name|onCamelContextStarted
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|boolean
name|alreadyStarted
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
operator|!
name|configured
condition|)
block|{
name|Timer
name|timer
init|=
name|endpoint
operator|.
name|getTimer
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|configureTask
argument_list|(
name|task
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Whether the timer task is allow to run or not      */
DECL|method|isTaskRunAllowed ()
specifier|protected
name|boolean
name|isTaskRunAllowed
parameter_list|()
block|{
comment|// only allow running the timer task if we can run and are not suspended,
comment|// and CamelContext must have been fully started
return|return
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarted
argument_list|()
operator|&&
name|isRunAllowed
argument_list|()
operator|&&
operator|!
name|isSuspended
argument_list|()
return|;
block|}
DECL|method|configureTask (TimerTask task, Timer timer)
specifier|protected
name|void
name|configureTask
parameter_list|(
name|TimerTask
name|task
parameter_list|,
name|Timer
name|timer
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isFixedRate
argument_list|()
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|endpoint
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getPeriod
argument_list|()
operator|>
literal|0
condition|)
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|endpoint
operator|.
name|getPeriod
argument_list|()
operator|>
literal|0
condition|)
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|configured
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|sendTimerExchange (long counter)
specifier|protected
name|void
name|sendTimerExchange
parameter_list|(
name|long
name|counter
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TIMER_COUNTER
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TIMER_NAME
argument_list|,
name|endpoint
operator|.
name|getTimerName
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TIMER_TIME
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TIMER_PERIOD
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TIMER_FIRED_TIME
argument_list|,
name|now
argument_list|)
expr_stmt|;
comment|// also set now on in header with same key as quartz to be consistent
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"firedTime"
argument_list|,
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Timer {} is firing #{} count"
argument_list|,
name|endpoint
operator|.
name|getTimerName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isSynchronous
argument_list|()
condition|)
block|{
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// handle any thrown exception
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// handle any thrown exception
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

