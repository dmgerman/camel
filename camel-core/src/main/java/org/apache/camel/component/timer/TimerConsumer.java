begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.timer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|timer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The timer consumer.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|TimerConsumer
specifier|public
class|class
name|TimerConsumer
extends|extends
name|DefaultConsumer
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimerConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|TimerEndpoint
name|endpoint
decl_stmt|;
DECL|field|task
specifier|private
name|TimerTask
name|task
decl_stmt|;
DECL|method|TimerConsumer (TimerEndpoint endpoint, Processor processor)
specifier|public
name|TimerConsumer
parameter_list|(
name|TimerEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|task
operator|=
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sendTimerExchange
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Timer
name|timer
init|=
name|endpoint
operator|.
name|getTimer
argument_list|()
decl_stmt|;
name|configureTask
argument_list|(
name|task
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|task
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
DECL|method|configureTask (TimerTask task, Timer timer)
specifier|protected
name|void
name|configureTask
parameter_list|(
name|TimerTask
name|task
parameter_list|,
name|Timer
name|timer
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isFixedRate
argument_list|()
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|endpoint
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getPeriod
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|endpoint
operator|.
name|getPeriod
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|sendTimerExchange ()
specifier|protected
name|void
name|sendTimerExchange
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"org.apache.camel.timer.name"
argument_list|,
name|endpoint
operator|.
name|getTimerName
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"org.apache.camel.timer.time"
argument_list|,
name|endpoint
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"org.apache.camel.timer.period"
argument_list|,
name|endpoint
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

