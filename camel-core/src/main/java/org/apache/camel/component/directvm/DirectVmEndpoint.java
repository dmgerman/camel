begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.directvm
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|directvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|direct
operator|.
name|DirectConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_comment
comment|/**  * The direct-vm component provides direct, synchronous call to another endpoint from any CamelContext in the same JVM.  *  * This endpoint can be used to connect existing routes in the same JVM between different CamelContexts.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.10.0"
argument_list|,
name|scheme
operator|=
literal|"direct-vm"
argument_list|,
name|title
operator|=
literal|"Direct VM"
argument_list|,
name|syntax
operator|=
literal|"direct-vm:name"
argument_list|,
name|consumerClass
operator|=
name|DirectConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"core,endpoint"
argument_list|)
DECL|class|DirectVmEndpoint
specifier|public
class|class
name|DirectVmEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|AsyncEndpoint
block|{
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Name of direct-vm endpoint"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|block
specifier|private
name|boolean
name|block
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"30000"
argument_list|)
DECL|field|timeout
specifier|private
name|long
name|timeout
init|=
literal|30000L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|failIfNoConsumers
specifier|private
name|boolean
name|failIfNoConsumers
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|)
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|propagateProperties
specifier|private
name|boolean
name|propagateProperties
init|=
literal|true
decl_stmt|;
DECL|method|DirectVmEndpoint (String endpointUri, DirectVmComponent component)
specifier|public
name|DirectVmEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|DirectVmComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|DirectVmComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|DirectVmComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|block
condition|)
block|{
return|return
operator|new
name|DirectVmBlockingProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DirectVmProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|Consumer
name|answer
init|=
operator|new
name|DirectVmConsumer
argument_list|(
name|this
argument_list|,
operator|new
name|DirectVmProcessor
argument_list|(
name|processor
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getConsumer ()
specifier|public
name|DirectVmConsumer
name|getConsumer
parameter_list|()
block|{
return|return
name|getComponent
argument_list|()
operator|.
name|getConsumer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|isBlock ()
specifier|public
name|boolean
name|isBlock
parameter_list|()
block|{
return|return
name|block
return|;
block|}
comment|/**      * If sending a message to a direct endpoint which has no active consumer,      * then we can tell the producer to block and wait for the consumer to become active.      */
DECL|method|setBlock (boolean block)
specifier|public
name|void
name|setBlock
parameter_list|(
name|boolean
name|block
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
comment|/**      * The timeout value to use if block is enabled.      */
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|isFailIfNoConsumers ()
specifier|public
name|boolean
name|isFailIfNoConsumers
parameter_list|()
block|{
return|return
name|failIfNoConsumers
return|;
block|}
comment|/**      * Whether the producer should fail by throwing an exception, when sending to a Direct-VM endpoint with no active consumers.      */
DECL|method|setFailIfNoConsumers (boolean failIfNoConsumers)
specifier|public
name|void
name|setFailIfNoConsumers
parameter_list|(
name|boolean
name|failIfNoConsumers
parameter_list|)
block|{
name|this
operator|.
name|failIfNoConsumers
operator|=
name|failIfNoConsumers
expr_stmt|;
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
operator|==
literal|null
condition|?
name|getComponent
argument_list|()
operator|.
name|getHeaderFilterStrategy
argument_list|()
else|:
name|headerFilterStrategy
return|;
block|}
comment|/**      * Sets a {@link HeaderFilterStrategy} that will only be applied on producer endpoints (on both directions: request and response).      *<p>Default value: none.</p>      */
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
DECL|method|isPropagateProperties ()
specifier|public
name|boolean
name|isPropagateProperties
parameter_list|()
block|{
return|return
name|propagateProperties
return|;
block|}
comment|/**      * Whether to propagate or not properties from the producer side to the consumer side, and vice versa.      *<p>Default value: true.</p>      */
DECL|method|setPropagateProperties (boolean propagateProperties)
specifier|public
name|void
name|setPropagateProperties
parameter_list|(
name|boolean
name|propagateProperties
parameter_list|)
block|{
name|this
operator|.
name|propagateProperties
operator|=
name|propagateProperties
expr_stmt|;
block|}
block|}
end_class

end_unit

