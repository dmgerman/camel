begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A parser to parse a string which contains property placeholders  *  * @version   */
end_comment

begin_class
DECL|class|DefaultPropertiesParser
specifier|public
class|class
name|DefaultPropertiesParser
implements|implements
name|AugmentedPropertyNameAwarePropertiesParser
block|{
DECL|field|log
specifier|protected
specifier|final
specifier|transient
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|parseUri (String text, Properties properties, String prefixToken, String suffixToken)
specifier|public
name|String
name|parseUri
parameter_list|(
name|String
name|text
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|String
name|prefixToken
parameter_list|,
name|String
name|suffixToken
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|parseUri
argument_list|(
name|text
argument_list|,
name|properties
argument_list|,
name|prefixToken
argument_list|,
name|suffixToken
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|parseUri (String text, Properties properties, String prefixToken, String suffixToken, String propertyPrefix, String propertySuffix, boolean fallbackToUnaugmentedProperty)
specifier|public
name|String
name|parseUri
parameter_list|(
name|String
name|text
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|String
name|prefixToken
parameter_list|,
name|String
name|suffixToken
parameter_list|,
name|String
name|propertyPrefix
parameter_list|,
name|String
name|propertySuffix
parameter_list|,
name|boolean
name|fallbackToUnaugmentedProperty
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
name|answer
init|=
name|text
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|// the placeholders can contain nested placeholders so we need to do recursive parsing
comment|// we must therefore also do circular reference check and must keep a list of visited keys
name|List
argument_list|<
name|String
argument_list|>
name|visited
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|replaced
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|answer
operator|=
name|doParseUri
argument_list|(
name|answer
argument_list|,
name|properties
argument_list|,
name|replaced
argument_list|,
name|prefixToken
argument_list|,
name|suffixToken
argument_list|,
name|propertyPrefix
argument_list|,
name|propertySuffix
argument_list|,
name|fallbackToUnaugmentedProperty
argument_list|)
expr_stmt|;
comment|// check the replaced with the visited to avoid circular reference
for|for
control|(
name|String
name|replace
range|:
name|replaced
control|)
block|{
if|if
condition|(
name|visited
operator|.
name|contains
argument_list|(
name|replace
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Circular reference detected with key ["
operator|+
name|replace
operator|+
literal|"] from text: "
operator|+
name|text
argument_list|)
throw|;
block|}
block|}
comment|// okay all okay so add the replaced as visited
name|visited
operator|.
name|addAll
argument_list|(
name|replaced
argument_list|)
expr_stmt|;
comment|// we are done when we can no longer find any prefix tokens in the answer
name|done
operator|=
name|findTokenPosition
argument_list|(
name|answer
argument_list|,
literal|0
argument_list|,
name|prefixToken
argument_list|)
operator|==
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|parseProperty (String key, String value, Properties properties)
specifier|public
name|String
name|parseProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
return|return
name|value
return|;
block|}
DECL|method|doParseUri (String uri, Properties properties, List<String> replaced, String prefixToken, String suffixToken, String propertyPrefix, String propertySuffix, boolean fallbackToUnaugmentedProperty)
specifier|private
name|String
name|doParseUri
parameter_list|(
name|String
name|uri
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|replaced
parameter_list|,
name|String
name|prefixToken
parameter_list|,
name|String
name|suffixToken
parameter_list|,
name|String
name|propertyPrefix
parameter_list|,
name|String
name|propertySuffix
parameter_list|,
name|boolean
name|fallbackToUnaugmentedProperty
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|pivot
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|uri
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|pivot
operator|<
name|size
condition|)
block|{
name|int
name|idx
init|=
name|findTokenPosition
argument_list|(
name|uri
argument_list|,
name|pivot
argument_list|,
name|prefixToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|createConstantPart
argument_list|(
name|uri
argument_list|,
name|pivot
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|pivot
operator|<
name|idx
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|createConstantPart
argument_list|(
name|uri
argument_list|,
name|pivot
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pivot
operator|=
name|idx
operator|+
name|prefixToken
operator|.
name|length
argument_list|()
expr_stmt|;
name|int
name|endIdx
init|=
name|findTokenPosition
argument_list|(
name|uri
argument_list|,
name|pivot
argument_list|,
name|suffixToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIdx
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting "
operator|+
name|suffixToken
operator|+
literal|" but found end of string from text: "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|uri
operator|.
name|substring
argument_list|(
name|pivot
argument_list|,
name|endIdx
argument_list|)
decl_stmt|;
name|String
name|augmentedKey
init|=
name|key
decl_stmt|;
if|if
condition|(
name|propertyPrefix
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Augmenting property key [{}] with prefix: {}"
argument_list|,
name|key
argument_list|,
name|propertyPrefix
argument_list|)
expr_stmt|;
name|augmentedKey
operator|=
name|propertyPrefix
operator|+
name|augmentedKey
expr_stmt|;
block|}
if|if
condition|(
name|propertySuffix
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Augmenting property key [{}] with suffix: {}"
argument_list|,
name|key
argument_list|,
name|propertySuffix
argument_list|)
expr_stmt|;
name|augmentedKey
operator|=
name|augmentedKey
operator|+
name|propertySuffix
expr_stmt|;
block|}
name|String
name|part
init|=
name|createPlaceholderPart
argument_list|(
name|augmentedKey
argument_list|,
name|properties
argument_list|,
name|replaced
argument_list|)
decl_stmt|;
comment|// Note: Only fallback to unaugmented when the original key was actually augmented
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
name|fallbackToUnaugmentedProperty
operator|&&
operator|(
name|propertyPrefix
operator|!=
literal|null
operator|||
name|propertySuffix
operator|!=
literal|null
operator|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Property wth key [{}] not found, attempting with unaugmented key: {}"
argument_list|,
name|augmentedKey
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|part
operator|=
name|createPlaceholderPart
argument_list|(
name|key
argument_list|,
name|properties
argument_list|,
name|replaced
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|esb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|esb
operator|.
name|append
argument_list|(
literal|"Property with key ["
argument_list|)
operator|.
name|append
argument_list|(
name|augmentedKey
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fallbackToUnaugmentedProperty
operator|&&
operator|(
name|propertyPrefix
operator|!=
literal|null
operator|||
name|propertySuffix
operator|!=
literal|null
operator|)
condition|)
block|{
name|esb
operator|.
name|append
argument_list|(
literal|"(and original key ["
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"]) "
argument_list|)
expr_stmt|;
block|}
name|esb
operator|.
name|append
argument_list|(
literal|"not found in properties from text: "
argument_list|)
operator|.
name|append
argument_list|(
name|uri
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|esb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|pivot
operator|=
name|endIdx
operator|+
name|suffixToken
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|findTokenPosition (String uri, int pivot, String token)
specifier|private
name|int
name|findTokenPosition
parameter_list|(
name|String
name|uri
parameter_list|,
name|int
name|pivot
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|int
name|idx
init|=
name|uri
operator|.
name|indexOf
argument_list|(
name|token
argument_list|,
name|pivot
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
comment|// grab part as the previous char + token + next char, to test if the token is quoted
name|String
name|part
init|=
literal|null
decl_stmt|;
name|int
name|len
init|=
name|idx
operator|+
name|token
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|length
argument_list|()
operator|>=
name|len
condition|)
block|{
name|part
operator|=
name|uri
operator|.
name|substring
argument_list|(
name|idx
operator|-
literal|1
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|isQuoted
argument_list|(
name|part
argument_list|)
condition|)
block|{
comment|// the token was quoted, so regard it as a literal
comment|// and then try to find from next position
name|pivot
operator|=
name|idx
operator|+
name|token
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|idx
operator|=
name|uri
operator|.
name|indexOf
argument_list|(
name|token
argument_list|,
name|pivot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// found token
return|return
name|idx
return|;
block|}
block|}
return|return
name|idx
return|;
block|}
DECL|method|createConstantPart (String uri, int start, int end)
specifier|private
name|String
name|createConstantPart
parameter_list|(
name|String
name|uri
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|uri
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
DECL|method|createPlaceholderPart (String key, Properties properties, List<String> replaced)
specifier|private
name|String
name|createPlaceholderPart
parameter_list|(
name|String
name|key
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|replaced
parameter_list|)
block|{
comment|// keep track of which parts we have replaced
name|replaced
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|String
name|propertyValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyValue
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Found a JVM system property: {} with value: {} to be used."
argument_list|,
name|key
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|propertyValue
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|parseProperty
argument_list|(
name|key
argument_list|,
name|propertyValue
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
end_class

end_unit

