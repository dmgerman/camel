begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file.ha
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|OverlappingFileLockException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ha
operator|.
name|AbstractCamelClusterView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|FileLockClusterView
specifier|public
class|class
name|FileLockClusterView
extends|extends
name|AbstractCamelClusterView
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileLockClusterView
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|localMember
specifier|private
specifier|final
name|ClusterMember
name|localMember
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|file
specifier|private
name|RandomAccessFile
name|file
decl_stmt|;
DECL|field|channel
specifier|private
name|FileChannel
name|channel
decl_stmt|;
DECL|field|lock
specifier|private
name|FileLock
name|lock
decl_stmt|;
DECL|field|task
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|task
decl_stmt|;
DECL|method|FileLockClusterView (FileLockClusterService cluster, String namespace)
name|FileLockClusterView
parameter_list|(
name|FileLockClusterService
name|cluster
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|this
operator|.
name|localMember
operator|=
operator|new
name|ClusterMember
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getRoot
argument_list|()
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeader ()
specifier|public
name|Optional
argument_list|<
name|CamelClusterMember
argument_list|>
name|getLeader
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
operator|.
name|localMember
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalMember ()
specifier|public
name|CamelClusterMember
name|getLocalMember
parameter_list|()
block|{
return|return
name|this
operator|.
name|localMember
return|;
block|}
annotation|@
name|Override
DECL|method|getMembers ()
specifier|public
name|List
argument_list|<
name|CamelClusterMember
argument_list|>
name|getMembers
parameter_list|()
block|{
comment|// It may be useful to lock only a region of the file an then have views
comment|// appending their id to the file on different regions so we can
comment|// have a list of members. Root/Header region that is used for locking
comment|// purpose may also contains the lock holder.
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
name|fireLeadershipChangedEvent
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|file
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|channel
operator|=
name|file
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|FileLockClusterService
name|service
init|=
name|getClusterService
argument_list|()
operator|.
name|unwrap
argument_list|(
name|FileLockClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ScheduledExecutorService
name|executor
init|=
name|service
operator|.
name|getExecutor
argument_list|()
decl_stmt|;
name|task
operator|=
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|::
name|tryLock
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|service
operator|.
name|getAcquireLockDelay
argument_list|()
argument_list|,
name|service
operator|.
name|getAcquireLockDelayUnit
argument_list|()
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|service
operator|.
name|getAcquireLockInterval
argument_list|()
argument_list|,
name|service
operator|.
name|getAcquireLockIntervalUnit
argument_list|()
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|close
argument_list|()
expr_stmt|;
block|}
comment|// *********************************
comment|//
comment|// *********************************
DECL|method|close ()
specifier|private
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|tryLock ()
specifier|private
name|void
name|tryLock
parameter_list|()
block|{
if|if
condition|(
name|isStarting
argument_list|()
operator|||
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|localMember
operator|.
name|isLeader
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Holding the lock on file {} (lock={})"
argument_list|,
name|path
argument_list|,
name|lock
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|FileLockClusterView
operator|.
name|this
init|)
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Lock on file {} lost (lock={})"
argument_list|,
name|path
argument_list|,
name|lock
argument_list|)
expr_stmt|;
name|fireLeadershipChangedEvent
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Try to acquire a lock on {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|lock
operator|=
literal|null
expr_stmt|;
name|lock
operator|=
name|channel
operator|.
name|tryLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Lock on file {} acquired (lock={})"
argument_list|,
name|path
argument_list|,
name|lock
argument_list|)
expr_stmt|;
name|fireLeadershipChangedEvent
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|localMember
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Lock on file {} not acquired "
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OverlappingFileLockException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Lock on file {} not acquired "
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|ClusterMember
specifier|private
specifier|final
class|class
name|ClusterMember
implements|implements
name|CamelClusterMember
block|{
annotation|@
name|Override
DECL|method|isLeader ()
specifier|public
name|boolean
name|isLeader
parameter_list|()
block|{
synchronized|synchronized
init|(
name|FileLockClusterView
operator|.
name|this
init|)
block|{
return|return
name|lock
operator|!=
literal|null
operator|&&
name|lock
operator|.
name|isValid
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isLocal ()
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getClusterService
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

