begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.pojo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/** * Represents the polling component that manages {@link PojoEndpoint}.  It holds the  * list of named pojos that queue endpoints reference. * * @version $Revision: 519973 $ */
end_comment

begin_class
DECL|class|PollingPojoComponent
specifier|public
class|class
name|PollingPojoComponent
extends|extends
name|PojoComponent
block|{
DECL|field|schedules
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|PollingSchedule
argument_list|>
name|schedules
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PollingSchedule
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Registers a pojo and schedules the pojo for execution at the specified time. If the time is in the past, the task      * is scheduled for immediate execution.      *       * @param uri      * @param pojo      * @param time time at which task is to be executed.      * @throws IllegalArgumentException if<tt>time.getTime()</tt> is negative.      * @throws IllegalStateException if task was already scheduled or cancelled, timer was cancelled, or timer thread      *             terminated.      */
DECL|method|registerAndSchedulePojo (String uri,Object pojo,Date time)
specifier|public
name|void
name|registerAndSchedulePojo
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|Date
name|time
parameter_list|)
block|{
name|super
operator|.
name|registerPojo
argument_list|(
name|uri
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
name|PollingSchedule
name|schedule
init|=
operator|new
name|PollingSchedule
argument_list|(
name|uri
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|schedules
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
comment|/**      * Registers a pojo and cchedules the pojo for execution at the specified time. If the time is in the past, the task      * is scheduled for immediate execution.      *       * @param uri      * @param pojo      * @param firstTime       * @param period       * @throws IllegalArgumentException if<tt>time.getTime()</tt> is negative.      * @throws IllegalStateException if task was already scheduled or cancelled, timer was cancelled, or timer thread      *             terminated.      */
DECL|method|registerAndScheulePojo (String uri,Object pojo,Date firstTime,long period)
specifier|public
name|void
name|registerAndScheulePojo
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|Date
name|firstTime
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|super
operator|.
name|registerPojo
argument_list|(
name|uri
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
name|PollingSchedule
name|schedule
init|=
operator|new
name|PollingSchedule
argument_list|(
name|uri
argument_list|,
name|firstTime
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|schedules
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
comment|/**      * Registers a pojo and schedules the specified task for repeated<i>fixed-delay execution</i>,      * beginning after the specified delay.  Subsequent executions take place      * at approximately regular intervals separated by the specified period.      *      *<p>In fixed-delay execution, each execution is scheduled relative to      * the actual execution time of the previous execution.  If an execution      * is delayed for any reason (such as garbage collection or other      * background activity), subsequent executions will be delayed as well.      * In the long run, the frequency of execution will generally be slightly      * lower than the reciprocal of the specified period (assuming the system      * clock underlying<tt>Object.wait(long)</tt> is accurate).      *      *<p>Fixed-delay execution is appropriate for recurring activities      * that require "smoothness."  In other words, it is appropriate for      * activities where it is more important to keep the frequency accurate      * in the short run than in the long run.  This includes most animation      * tasks, such as blinking a cursor at regular intervals.  It also includes      * tasks wherein regular activity is performed in response to human      * input, such as automatically repeating a character as long as a key      * is held down.      *       * @param uri       * @param pojo       * @param delay  delay in milliseconds before task is to be executed.      * @param period time in milliseconds between successive task executions.      * @throws IllegalArgumentException if<tt>delay</tt> is negative, or      *<tt>delay + System.currentTimeMillis()</tt> is negative.      * @throws IllegalStateException if task was already scheduled or      *         cancelled, timer was cancelled, or timer thread terminated.      */
DECL|method|registerAndScheulePojo (String uri,Object pojo,long delay,long period)
specifier|public
name|void
name|registerAndScheulePojo
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|super
operator|.
name|registerPojo
argument_list|(
name|uri
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
name|PollingSchedule
name|schedule
init|=
operator|new
name|PollingSchedule
argument_list|(
name|uri
argument_list|,
name|delay
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|schedules
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register pojo and schedules the specified task for repeated<i>fixed-rate execution</i>,      * beginning at the specified time. Subsequent executions take place at      * approximately regular intervals, separated by the specified period.      *      *<p>In fixed-rate execution, each execution is scheduled relative to the      * scheduled execution time of the initial execution.  If an execution is      * delayed for any reason (such as garbage collection or other background      * activity), two or more executions will occur in rapid succession to      * "catch up."  In the long run, the frequency of execution will be      * exactly the reciprocal of the specified period (assuming the system      * clock underlying<tt>Object.wait(long)</tt> is accurate).      *      *<p>Fixed-rate execution is appropriate for recurring activities that      * are sensitive to<i>absolute</i> time, such as ringing a chime every      * hour on the hour, or running scheduled maintenance every day at a      * particular time.  It is also appropriate for recurring activities      * where the total time to perform a fixed number of executions is      * important, such as a countdown timer that ticks once every second for      * ten seconds.  Finally, fixed-rate execution is appropriate for      * scheduling multiple repeating timer tasks that must remain synchronized      * with respect to one another.      *       * @param uri       * @param pojo       * @param firstTime First time at which task is to be executed.      * @param period time in milliseconds between successive task executions.      * @throws IllegalArgumentException if<tt>time.getTime()</tt> is negative.      * @throws IllegalStateException if task was already scheduled or      *         cancelled, timer was cancelled, or timer thread terminated.      */
DECL|method|registerAndScheulePojoAtFixedRate (String uri,Object pojo,Date firstTime, long period)
specifier|public
name|void
name|registerAndScheulePojoAtFixedRate
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|Date
name|firstTime
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|super
operator|.
name|registerPojo
argument_list|(
name|uri
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
name|PollingSchedule
name|schedule
init|=
operator|new
name|PollingSchedule
argument_list|(
name|uri
argument_list|,
name|firstTime
argument_list|,
operator|-
literal|1
argument_list|,
name|period
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|schedules
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register pojo and schedules the specified task for repeated<i>fixed-rate execution</i>,      * beginning after the specified delay.  Subsequent executions take place      * at approximately regular intervals, separated by the specified period.      *      *<p>In fixed-rate execution, each execution is scheduled relative to the      * scheduled execution time of the initial execution.  If an execution is      * delayed for any reason (such as garbage collection or other background      * activity), two or more executions will occur in rapid succession to      * "catch up."  In the long run, the frequency of execution will be      * exactly the reciprocal of the specified period (assuming the system      * clock underlying<tt>Object.wait(long)</tt> is accurate).      *      *<p>Fixed-rate execution is appropriate for recurring activities that      * are sensitive to<i>absolute</i> time, such as ringing a chime every      * hour on the hour, or running scheduled maintenance every day at a      * particular time.  It is also appropriate for recurring activities      * where the total time to perform a fixed number of executions is      * important, such as a countdown timer that ticks once every second for      * ten seconds.  Finally, fixed-rate execution is appropriate for      * scheduling multiple repeating timer tasks that must remain synchronized      * with respect to one another.      *       * @param uri       * @param pojo       * @param delay  delay in milliseconds before task is to be executed.      * @param period time in milliseconds between successive task executions.      * @throws IllegalArgumentException if<tt>delay</tt> is negative, or      *<tt>delay + System.currentTimeMillis()</tt> is negative.      * @throws IllegalStateException if task was already scheduled or      *         cancelled, timer was cancelled, or timer thread terminated.      */
DECL|method|registerAndScheulePojoAtFixedRate (String uri,Object pojo,long delay, long period)
specifier|public
name|void
name|registerAndScheulePojoAtFixedRate
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|super
operator|.
name|registerPojo
argument_list|(
name|uri
argument_list|,
name|pojo
argument_list|)
expr_stmt|;
name|PollingSchedule
name|schedule
init|=
operator|new
name|PollingSchedule
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|,
name|delay
argument_list|,
name|period
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|schedules
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
DECL|method|registerActivation (String uri, PojoEndpoint endpoint)
specifier|public
name|void
name|registerActivation
parameter_list|(
name|String
name|uri
parameter_list|,
name|PojoEndpoint
name|endpoint
parameter_list|)
block|{
name|super
operator|.
name|registerActivation
argument_list|(
name|uri
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|PollingPojoEndpoint
condition|)
block|{
name|PollingSchedule
name|schedule
init|=
name|schedules
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedule
operator|!=
literal|null
condition|)
block|{
name|schedule
operator|.
name|activate
argument_list|(
operator|(
name|Runnable
operator|)
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|unregisterActivation (String uri)
specifier|public
name|void
name|unregisterActivation
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|super
operator|.
name|unregisterActivation
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|PollingSchedule
name|schedule
init|=
name|schedules
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedule
operator|!=
literal|null
condition|)
block|{
name|schedule
operator|.
name|deactivate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

