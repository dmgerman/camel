begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|DTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * Manages a pool of XMLReader (and associated SAXParser) instances for reuse.  */
end_comment

begin_class
DECL|class|XMLReaderPool
specifier|public
class|class
name|XMLReaderPool
block|{
DECL|field|pool
specifier|private
specifier|final
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|XMLReader
argument_list|>
argument_list|>
name|pool
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|WeakReference
argument_list|<
name|XMLReader
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|saxParserFactory
specifier|private
specifier|final
name|SAXParserFactory
name|saxParserFactory
decl_stmt|;
comment|/**      * Creates a new instance.      *      * @param saxParserFactory      *            the SAXParserFactory used to create new SAXParser instances      */
DECL|method|XMLReaderPool (SAXParserFactory saxParserFactory)
specifier|public
name|XMLReaderPool
parameter_list|(
name|SAXParserFactory
name|saxParserFactory
parameter_list|)
block|{
name|this
operator|.
name|saxParserFactory
operator|=
name|saxParserFactory
expr_stmt|;
block|}
comment|/**      * Returns an XMLReader that can be used exactly once. Calling one of the      * {@code parse} methods returns the reader to the pool. This is useful      * for e.g. SAXSource which bundles an XMLReader with an InputSource that      * can also be consumed just once.      *      * @return the XMLReader      * @throws SAXException      *             see {@link SAXParserFactory#newSAXParser()}      * @throws ParserConfigurationException      *             see {@link SAXParserFactory#newSAXParser()}      */
DECL|method|createXMLReader ()
specifier|public
name|XMLReader
name|createXMLReader
parameter_list|()
throws|throws
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|XMLReader
name|xmlReader
init|=
literal|null
decl_stmt|;
name|WeakReference
argument_list|<
name|XMLReader
argument_list|>
name|ref
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|pool
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|xmlReader
operator|=
name|ref
operator|.
name|get
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|xmlReader
operator|==
literal|null
condition|)
block|{
name|xmlReader
operator|=
name|saxParserFactory
operator|.
name|newSAXParser
argument_list|()
operator|.
name|getXMLReader
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|OneTimeXMLReader
argument_list|(
name|xmlReader
argument_list|)
return|;
block|}
comment|/**      * Wraps another XMLReader for single use only.      */
DECL|class|OneTimeXMLReader
specifier|private
specifier|final
class|class
name|OneTimeXMLReader
implements|implements
name|XMLReader
block|{
DECL|field|xmlReader
specifier|private
specifier|final
name|XMLReader
name|xmlReader
decl_stmt|;
DECL|field|initFeatures
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|initFeatures
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|initProperties
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|initContentHandler
specifier|private
specifier|final
name|ContentHandler
name|initContentHandler
decl_stmt|;
DECL|field|initDtdHandler
specifier|private
specifier|final
name|DTDHandler
name|initDtdHandler
decl_stmt|;
DECL|field|initEntityResolver
specifier|private
specifier|final
name|EntityResolver
name|initEntityResolver
decl_stmt|;
DECL|field|initErrorHandler
specifier|private
specifier|final
name|ErrorHandler
name|initErrorHandler
decl_stmt|;
DECL|field|readerInvalid
specifier|private
name|boolean
name|readerInvalid
decl_stmt|;
DECL|method|OneTimeXMLReader (XMLReader xmlReader)
specifier|private
name|OneTimeXMLReader
parameter_list|(
name|XMLReader
name|xmlReader
parameter_list|)
block|{
name|this
operator|.
name|xmlReader
operator|=
name|xmlReader
expr_stmt|;
name|this
operator|.
name|initContentHandler
operator|=
name|xmlReader
operator|.
name|getContentHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|initDtdHandler
operator|=
name|xmlReader
operator|.
name|getDTDHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|initEntityResolver
operator|=
name|xmlReader
operator|.
name|getEntityResolver
argument_list|()
expr_stmt|;
name|this
operator|.
name|initErrorHandler
operator|=
name|xmlReader
operator|.
name|getErrorHandler
argument_list|()
expr_stmt|;
block|}
DECL|method|release ()
specifier|private
name|void
name|release
parameter_list|()
block|{
try|try
block|{
comment|// reset XMLReader to its initial state
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|feature
range|:
name|initFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|xmlReader
operator|.
name|setFeature
argument_list|(
name|feature
operator|.
name|getKey
argument_list|()
argument_list|,
name|feature
operator|.
name|getValue
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|property
range|:
name|initProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|xmlReader
operator|.
name|setProperty
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|,
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|xmlReader
operator|.
name|setContentHandler
argument_list|(
name|initContentHandler
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setDTDHandler
argument_list|(
name|initDtdHandler
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setEntityResolver
argument_list|(
name|initEntityResolver
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setErrorHandler
argument_list|(
name|initErrorHandler
argument_list|)
expr_stmt|;
comment|// return the wrapped instance to the pool
name|pool
operator|.
name|offer
argument_list|(
operator|new
name|WeakReference
argument_list|<
name|XMLReader
argument_list|>
argument_list|(
name|xmlReader
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readerInvalid
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFeature (String name)
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
return|return
name|xmlReader
operator|.
name|getFeature
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setFeature (String name, boolean value)
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
operator|!
name|readerInvalid
condition|)
block|{
if|if
condition|(
operator|!
name|initFeatures
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|initFeatures
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|xmlReader
operator|.
name|getFeature
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xmlReader
operator|.
name|setFeature
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProperty (String name)
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
return|return
name|xmlReader
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setProperty (String name, Object value)
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
operator|!
name|readerInvalid
condition|)
block|{
if|if
condition|(
operator|!
name|initProperties
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|initProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|xmlReader
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xmlReader
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContentHandler ()
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
block|{
return|return
name|xmlReader
operator|.
name|getContentHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setContentHandler (ContentHandler handler)
specifier|public
name|void
name|setContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|readerInvalid
condition|)
block|{
name|xmlReader
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDTDHandler ()
specifier|public
name|DTDHandler
name|getDTDHandler
parameter_list|()
block|{
return|return
name|xmlReader
operator|.
name|getDTDHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setDTDHandler (DTDHandler handler)
specifier|public
name|void
name|setDTDHandler
parameter_list|(
name|DTDHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|readerInvalid
condition|)
block|{
name|xmlReader
operator|.
name|setDTDHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEntityResolver ()
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|xmlReader
operator|.
name|getEntityResolver
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setEntityResolver (EntityResolver resolver)
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
operator|!
name|readerInvalid
condition|)
block|{
name|xmlReader
operator|.
name|setEntityResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getErrorHandler ()
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|xmlReader
operator|.
name|getErrorHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setErrorHandler (ErrorHandler handler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|readerInvalid
condition|)
block|{
name|xmlReader
operator|.
name|setErrorHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|parse (InputSource input)
specifier|public
specifier|synchronized
name|void
name|parse
parameter_list|(
name|InputSource
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|checkValid
argument_list|()
expr_stmt|;
try|try
block|{
name|xmlReader
operator|.
name|parse
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|parse (String systemId)
specifier|public
specifier|synchronized
name|void
name|parse
parameter_list|(
name|String
name|systemId
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|checkValid
argument_list|()
expr_stmt|;
try|try
block|{
name|xmlReader
operator|.
name|parse
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkValid ()
specifier|private
name|void
name|checkValid
parameter_list|()
block|{
if|if
condition|(
name|readerInvalid
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"OneTimeXMLReader can only be used once!"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

