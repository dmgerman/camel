begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_comment
comment|/**  * A helper class which provides a JAXP {@link Source} from a byte[]  * which can be read as many times as required.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|BytesSource
specifier|public
class|class
name|BytesSource
extends|extends
name|StreamSource
block|{
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|method|BytesSource (byte[] data)
specifier|public
name|BytesSource
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
DECL|method|BytesSource (byte[] data, String systemId)
specifier|public
name|BytesSource
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|setSystemId
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
DECL|method|getReader ()
specifier|public
name|Reader
name|getReader
parameter_list|()
block|{
return|return
operator|new
name|InputStreamReader
argument_list|(
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getData ()
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BytesSource["
operator|+
operator|new
name|String
argument_list|(
name|data
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

