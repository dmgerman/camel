begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.stream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * This output stream will store the content into a File if the stream context size is exceed the  * THRESHOLD which's default value is 64K. The temp file will store in the temp directory, you   * can configure it by setting the TEMP_DIR property. If you don't set the TEMP_DIR property,  * it will choose the directory which is set by the system property of "java.io.tmpdir".  * You can get a cached input stream of this stream. The temp file which is created with this   * output stream will be deleted when you close this output stream or the cached inputStream.  */
end_comment

begin_class
DECL|class|CachedOutputStream
specifier|public
class|class
name|CachedOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|THRESHOLD
specifier|public
specifier|static
specifier|final
name|String
name|THRESHOLD
init|=
literal|"CamelCachedOutputStreamThreshold"
decl_stmt|;
DECL|field|TEMP_DIR
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_DIR
init|=
literal|"CamelCachedOutputStreamOutputDirectory"
decl_stmt|;
DECL|field|outputLocked
specifier|protected
name|boolean
name|outputLocked
decl_stmt|;
DECL|field|currentStream
specifier|protected
name|OutputStream
name|currentStream
decl_stmt|;
DECL|field|streamList
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|streamList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|threshold
specifier|private
name|long
name|threshold
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|totalLength
specifier|private
name|int
name|totalLength
decl_stmt|;
DECL|field|inMemory
specifier|private
name|boolean
name|inMemory
decl_stmt|;
DECL|field|tempFile
specifier|private
name|File
name|tempFile
decl_stmt|;
DECL|field|outputDir
specifier|private
name|File
name|outputDir
decl_stmt|;
DECL|method|CachedOutputStream ()
specifier|public
name|CachedOutputStream
parameter_list|()
block|{
name|currentStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|inMemory
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|CachedOutputStream (long threshold)
specifier|public
name|CachedOutputStream
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
DECL|method|CachedOutputStream (Map<String, String> properties)
specifier|public
name|CachedOutputStream
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|String
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|THRESHOLD
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|threshold
operator|=
name|i
expr_stmt|;
block|}
block|}
name|value
operator|=
name|properties
operator|.
name|get
argument_list|(
name|TEMP_DIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|outputDir
operator|=
name|f
expr_stmt|;
block|}
else|else
block|{
name|outputDir
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputDir
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Perform any actions required on stream flush (freeze headers, reset      * output stream ... etc.)      */
DECL|method|doFlush ()
specifier|protected
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{     }
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|currentStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|doFlush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Perform any actions required on stream closure (handle response etc.)      */
DECL|method|doClose ()
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{     }
comment|/**      * Perform any actions required after stream closure (close the other related stream etc.)      */
DECL|method|postClose ()
specifier|protected
name|void
name|postClose
parameter_list|()
throws|throws
name|IOException
block|{     }
comment|/**      * Locks the output stream to prevent additional writes, but maintains      * a pointer to it so an InputStream can be obtained      * @throws IOException      */
DECL|method|lockOutputStream ()
specifier|public
name|void
name|lockOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|currentStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outputLocked
operator|=
literal|true
expr_stmt|;
name|streamList
operator|.
name|remove
argument_list|(
name|currentStream
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|currentStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|doClose
argument_list|()
expr_stmt|;
name|currentStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|maybeDeleteTempFile
argument_list|(
name|currentStream
argument_list|)
expr_stmt|;
name|postClose
argument_list|()
expr_stmt|;
block|}
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|currentStream
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/**      * Replace the original stream with the new one, optionally copying the content of the old one      * into the new one.      * When with Attachment, needs to replace the xml writer stream with the stream used by      * AttachmentSerializer or copy the cached output stream to the "real"      * output stream, i.e. onto the wire.      *       * @param out the new output stream      * @param copyOldContent flag indicating if the old content should be copied      * @throws IOException      */
DECL|method|resetOut (OutputStream out, boolean copyOldContent)
specifier|public
name|void
name|resetOut
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|copyOldContent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentStream
operator|instanceof
name|CachedOutputStream
condition|)
block|{
name|CachedOutputStream
name|ac
init|=
operator|(
name|CachedOutputStream
operator|)
name|currentStream
decl_stmt|;
name|InputStream
name|in
init|=
name|ac
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|inMemory
condition|)
block|{
if|if
condition|(
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
name|ByteArrayOutputStream
name|byteOut
init|=
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
decl_stmt|;
if|if
condition|(
name|copyOldContent
operator|&&
name|byteOut
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|byteOut
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown format of currentStream: "
operator|+
name|currentStream
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// read the file
name|currentStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyOldContent
condition|)
block|{
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|fin
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|streamList
operator|.
name|remove
argument_list|(
name|currentStream
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFile
operator|=
literal|null
expr_stmt|;
name|inMemory
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|currentStream
operator|=
name|out
expr_stmt|;
name|outputLocked
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|copyStream (InputStream in, OutputStream out, int bufferSize)
specifier|public
specifier|static
name|void
name|copyStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|totalLength
return|;
block|}
DECL|method|getBytes ()
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
if|if
condition|(
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
return|return
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
operator|)
operator|.
name|toByteArray
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown format of currentStream"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// read the file
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
return|return
name|IOConverter
operator|.
name|toBytes
argument_list|(
name|fin
argument_list|)
return|;
block|}
block|}
DECL|method|writeCacheTo (OutputStream out)
specifier|public
name|void
name|writeCacheTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
if|if
condition|(
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
operator|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown format of currentStream"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// read the file
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|fin
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeCacheTo (StringBuilder out, int limit)
specifier|public
name|void
name|writeCacheTo
parameter_list|(
name|StringBuilder
name|out
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|totalLength
operator|<
name|limit
operator|||
name|limit
operator|==
operator|-
literal|1
condition|)
block|{
name|writeCacheTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
if|if
condition|(
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
name|byte
name|bytes
index|[]
init|=
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
operator|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|IOHelper
operator|.
name|newStringFromBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown format of currentStream: "
operator|+
name|currentStream
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// read the file
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|x
init|=
name|fin
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
while|while
condition|(
name|x
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|(
name|count
operator|+
name|x
operator|)
operator|>
name|limit
condition|)
block|{
name|x
operator|=
name|limit
operator|-
name|count
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|IOHelper
operator|.
name|newStringFromBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|+=
name|x
expr_stmt|;
if|if
condition|(
name|count
operator|>=
name|limit
condition|)
block|{
name|x
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|fin
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeCacheTo (StringBuilder out)
specifier|public
name|void
name|writeCacheTo
parameter_list|(
name|StringBuilder
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
if|if
condition|(
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
operator|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|IOHelper
operator|.
name|newStringFromBytes
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown format of currentStream: "
operator|+
name|currentStream
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// read the file
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|x
init|=
name|fin
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
while|while
condition|(
name|x
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|IOHelper
operator|.
name|newStringFromBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|fin
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return the underlying output stream      */
DECL|method|getOut ()
specifier|public
name|OutputStream
name|getOut
parameter_list|()
block|{
return|return
name|currentStream
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|currentStream
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|CachedOutputStream
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Content: "
argument_list|)
decl_stmt|;
try|try
block|{
name|writeCacheTo
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|onWrite ()
specifier|protected
name|void
name|onWrite
parameter_list|()
throws|throws
name|IOException
block|{     }
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|outputLocked
condition|)
block|{
name|onWrite
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalLength
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|inMemory
operator|&&
name|totalLength
operator|>
name|threshold
operator|&&
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
name|createFileOutputStream
argument_list|()
expr_stmt|;
block|}
name|currentStream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|outputLocked
condition|)
block|{
name|onWrite
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalLength
operator|+=
name|b
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|inMemory
operator|&&
name|totalLength
operator|>
name|threshold
operator|&&
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
name|createFileOutputStream
argument_list|()
expr_stmt|;
block|}
name|currentStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|outputLocked
condition|)
block|{
name|onWrite
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalLength
operator|++
expr_stmt|;
if|if
condition|(
name|inMemory
operator|&&
name|totalLength
operator|>
name|threshold
operator|&&
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
name|createFileOutputStream
argument_list|()
expr_stmt|;
block|}
name|currentStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFileOutputStream ()
specifier|private
name|void
name|createFileOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
decl_stmt|;
if|if
condition|(
name|outputDir
operator|==
literal|null
condition|)
block|{
name|tempFile
operator|=
name|FileUtil
operator|.
name|createTempFile
argument_list|(
literal|"cos"
argument_list|,
literal|"tmp"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempFile
operator|=
name|FileUtil
operator|.
name|createTempFile
argument_list|(
literal|"cos"
argument_list|,
literal|"tmp"
argument_list|,
name|outputDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|currentStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
argument_list|)
expr_stmt|;
name|bout
operator|.
name|writeTo
argument_list|(
name|currentStream
argument_list|)
expr_stmt|;
name|inMemory
operator|=
literal|false
expr_stmt|;
name|streamList
operator|.
name|add
argument_list|(
name|currentStream
argument_list|)
expr_stmt|;
block|}
DECL|method|getTempFile ()
specifier|public
name|File
name|getTempFile
parameter_list|()
block|{
return|return
name|tempFile
operator|!=
literal|null
operator|&&
name|tempFile
operator|.
name|exists
argument_list|()
condition|?
name|tempFile
else|:
literal|null
return|;
block|}
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
if|if
condition|(
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
operator|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
try|try
block|{
name|FileInputStream
name|fileInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
block|{
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|maybeDeleteTempFile
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|streamList
operator|.
name|add
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
return|return
name|fileInputStream
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|IOHelper
operator|.
name|createIOException
argument_list|(
literal|"Cached file was already deleted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getStreamCache ()
specifier|public
name|StreamCache
name|getStreamCache
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
if|if
condition|(
name|currentStream
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
return|return
operator|new
name|InputStreamCache
argument_list|(
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|currentStream
operator|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|FileInputStreamCache
argument_list|(
name|tempFile
argument_list|,
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|IOHelper
operator|.
name|createIOException
argument_list|(
literal|"Cached file was already deleted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|maybeDeleteTempFile (Object stream)
specifier|private
name|void
name|maybeDeleteTempFile
parameter_list|(
name|Object
name|stream
parameter_list|)
block|{
name|streamList
operator|.
name|remove
argument_list|(
name|stream
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inMemory
operator|&&
name|tempFile
operator|!=
literal|null
operator|&&
name|streamList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFile
operator|=
literal|null
expr_stmt|;
name|currentStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|inMemory
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|setOutputDir (File outputDir)
specifier|public
name|void
name|setOutputDir
parameter_list|(
name|File
name|outputDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|outputDir
operator|=
name|outputDir
expr_stmt|;
block|}
DECL|method|setThreshold (long threshold)
specifier|public
name|void
name|setThreshold
parameter_list|(
name|long
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
block|}
end_class

end_unit

