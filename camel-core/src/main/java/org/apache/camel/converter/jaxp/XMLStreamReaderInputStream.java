begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|XMLStreamReaderInputStream
class|class
name|XMLStreamReaderInputStream
extends|extends
name|InputStream
block|{
DECL|field|BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|reader
specifier|private
name|XMLStreamReader
name|reader
decl_stmt|;
DECL|field|writer
specifier|private
name|XMLStreamWriter
name|writer
decl_stmt|;
DECL|field|chunk
specifier|private
name|TrimmableByteArrayOutputStream
name|chunk
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|charset
specifier|private
name|String
name|charset
decl_stmt|;
DECL|field|bpos
specifier|private
name|int
name|bpos
decl_stmt|;
DECL|method|XMLStreamReaderInputStream (XMLStreamReader reader, String charset, XMLOutputFactory outfactory)
name|XMLStreamReaderInputStream
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|String
name|charset
parameter_list|,
name|XMLOutputFactory
name|outfactory
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
expr_stmt|;
name|this
operator|.
name|chunk
operator|=
operator|new
name|TrimmableByteArrayOutputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|charset
operator|=
name|charset
operator|==
literal|null
condition|?
literal|"utf-8"
else|:
name|charset
expr_stmt|;
try|try
block|{
name|this
operator|.
name|writer
operator|=
name|outfactory
operator|.
name|createXMLStreamWriter
argument_list|(
name|chunk
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
DECL|method|XMLStreamReaderInputStream (XMLStreamReader reader, XMLOutputFactory outfactory)
name|XMLStreamReaderInputStream
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|XMLOutputFactory
name|outfactory
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
literal|"utf-8"
argument_list|,
name|outfactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|ba
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
return|return
name|read
argument_list|(
name|ba
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
condition|?
name|ba
index|[
literal|0
index|]
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|tlen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|n
init|=
name|ensureBuffering
argument_list|(
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|int
name|clen
init|=
name|len
operator|>
name|n
condition|?
name|n
else|:
name|len
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|clen
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|clen
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|clen
argument_list|)
expr_stmt|;
name|bpos
operator|-=
name|clen
expr_stmt|;
name|len
operator|-=
name|clen
expr_stmt|;
name|off
operator|+=
name|clen
expr_stmt|;
name|tlen
operator|+=
name|clen
expr_stmt|;
block|}
return|return
name|tlen
operator|>
literal|0
condition|?
name|tlen
else|:
operator|-
literal|1
return|;
block|}
DECL|method|ensureBuffering (int size)
specifier|private
name|int
name|ensureBuffering
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|size
operator|<
name|bpos
condition|)
block|{
return|return
name|bpos
return|;
block|}
comment|// refill the buffer as more buffering is requested than the current buffer status
try|try
block|{
comment|// very first event
if|if
condition|(
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
operator|==
name|reader
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeStartDocument
argument_list|(
name|charset
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chunk
operator|.
name|size
argument_list|()
operator|<
name|buffer
operator|.
name|length
condition|)
block|{
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|code
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
case|:
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
name|QName
name|qname
init|=
name|reader
operator|.
name|getName
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
name|writer
operator|.
name|writeCharacters
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
name|writer
operator|.
name|writeComment
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
name|writer
operator|.
name|writeCData
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
comment|// check if the chunk is full
specifier|final
name|int
name|csize
init|=
name|buffer
operator|.
name|length
operator|-
name|bpos
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|size
argument_list|()
operator|>
name|csize
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|chunk
operator|.
name|getByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
name|bpos
argument_list|,
name|csize
argument_list|)
expr_stmt|;
name|bpos
operator|=
name|buffer
operator|.
name|length
expr_stmt|;
name|chunk
operator|.
name|trim
argument_list|(
name|csize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|length
return|;
block|}
block|}
block|}
specifier|final
name|int
name|csize
init|=
name|chunk
operator|.
name|size
argument_list|()
operator|<
name|buffer
operator|.
name|length
operator|-
name|bpos
condition|?
name|chunk
operator|.
name|size
argument_list|()
else|:
name|buffer
operator|.
name|length
operator|-
name|bpos
decl_stmt|;
if|if
condition|(
name|csize
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|chunk
operator|.
name|getByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
name|bpos
argument_list|,
name|csize
argument_list|)
expr_stmt|;
name|bpos
operator|+=
name|csize
expr_stmt|;
name|chunk
operator|.
name|trim
argument_list|(
name|csize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|bpos
return|;
block|}
else|else
block|{
return|return
name|bpos
operator|>
literal|0
condition|?
name|bpos
else|:
operator|-
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|TrimmableByteArrayOutputStream
specifier|static
class|class
name|TrimmableByteArrayOutputStream
extends|extends
name|ByteArrayOutputStream
block|{
DECL|method|trim (int head, int tail)
specifier|public
name|void
name|trim
parameter_list|(
name|int
name|head
parameter_list|,
name|int
name|tail
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|head
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|count
operator|-
name|head
operator|-
name|tail
argument_list|)
expr_stmt|;
name|count
operator|-=
name|head
operator|+
name|tail
expr_stmt|;
block|}
DECL|method|toByteArray (int len)
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
DECL|method|getByteArray ()
name|byte
index|[]
name|getByteArray
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
block|}
block|}
end_class

end_unit

