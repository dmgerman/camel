begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.stream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|CipherInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|CipherOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|StreamCachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|SynchronizationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link StreamCache} for {@link File}s  */
end_comment

begin_class
DECL|class|FileInputStreamCache
specifier|public
specifier|final
class|class
name|FileInputStreamCache
extends|extends
name|InputStream
implements|implements
name|StreamCache
block|{
DECL|field|stream
specifier|private
name|InputStream
name|stream
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|tempFileManager
specifier|private
specifier|final
name|FileInputStreamCache
operator|.
name|TempFileManager
name|tempFileManager
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|ciphers
specifier|private
specifier|final
name|CipherPair
name|ciphers
decl_stmt|;
comment|/** Only for testing purposes.*/
DECL|method|FileInputStreamCache (File file)
specifier|public
name|FileInputStreamCache
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
operator|new
name|TempFileManager
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|FileInputStreamCache (TempFileManager closer)
name|FileInputStreamCache
parameter_list|(
name|TempFileManager
name|closer
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
operator|.
name|file
operator|=
name|closer
operator|.
name|getTempFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ciphers
operator|=
name|closer
operator|.
name|getCiphers
argument_list|()
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|tempFileManager
operator|=
name|closer
expr_stmt|;
name|this
operator|.
name|tempFileManager
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// reset by closing and creating a new stream based on the file
name|close
argument_list|()
expr_stmt|;
comment|// reset by creating a new stream based on the file
name|stream
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot reset stream from file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
DECL|method|writeTo (OutputStream os)
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|==
literal|null
operator|&&
name|ciphers
operator|==
literal|null
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOHelper
operator|.
name|copy
argument_list|(
name|getInputStream
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copy (Exchange exchange)
specifier|public
name|StreamCache
name|copy
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|tempFileManager
operator|.
name|addExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|FileInputStreamCache
name|copy
init|=
operator|new
name|FileInputStreamCache
argument_list|(
name|tempFileManager
argument_list|)
decl_stmt|;
return|return
name|copy
return|;
block|}
DECL|method|inMemory ()
specifier|public
name|boolean
name|inMemory
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getInputStream
argument_list|()
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
return|;
block|}
DECL|method|getInputStream ()
specifier|protected
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
name|createInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
return|;
block|}
DECL|method|createInputStream (File file)
specifier|private
name|InputStream
name|createInputStream
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ciphers
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
operator|new
name|CipherInputStream
argument_list|(
name|in
argument_list|,
name|ciphers
operator|.
name|getDecryptor
argument_list|()
argument_list|)
block|{
name|boolean
name|closed
decl_stmt|;
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
comment|/**       * Manages the temporary file for the file input stream caches.      *       * Collects all FileInputStreamCache instances of the temporary file.      * Counts the number of exchanges which have a FileInputStreamCache  instance of the temporary file.      * Deletes the temporary file, if all exchanges are done.      *       * @see CachedOutputStream      */
DECL|class|TempFileManager
specifier|static
class|class
name|TempFileManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TempFileManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Indicator whether the file input stream caches are closed on completion of the exchanges. */
DECL|field|closedOnCompletion
specifier|private
specifier|final
name|boolean
name|closedOnCompletion
decl_stmt|;
DECL|field|exchangeCounter
specifier|private
name|AtomicInteger
name|exchangeCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|tempFile
specifier|private
name|File
name|tempFile
decl_stmt|;
DECL|field|outputStream
specifier|private
name|OutputStream
name|outputStream
decl_stmt|;
comment|// file output stream
DECL|field|ciphers
specifier|private
name|CipherPair
name|ciphers
decl_stmt|;
comment|// there can be several input streams, for example in the multi-cast, or wiretap parallel processing
DECL|field|fileInputStreamCaches
specifier|private
name|List
argument_list|<
name|FileInputStreamCache
argument_list|>
name|fileInputStreamCaches
decl_stmt|;
comment|/** Only for testing.*/
DECL|method|TempFileManager (File file, boolean closedOnCompletion)
specifier|private
name|TempFileManager
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|closedOnCompletion
parameter_list|)
block|{
name|this
argument_list|(
name|closedOnCompletion
argument_list|)
expr_stmt|;
name|this
operator|.
name|tempFile
operator|=
name|file
expr_stmt|;
block|}
DECL|method|TempFileManager (boolean closedOnCompletion)
name|TempFileManager
parameter_list|(
name|boolean
name|closedOnCompletion
parameter_list|)
block|{
name|this
operator|.
name|closedOnCompletion
operator|=
name|closedOnCompletion
expr_stmt|;
block|}
comment|/** Adds a FileInputStreamCache instance to the closer.          *<p>          * Must be synchronized, because can be accessed by several threads.           */
DECL|method|add (FileInputStreamCache fileInputStreamCache)
specifier|synchronized
name|void
name|add
parameter_list|(
name|FileInputStreamCache
name|fileInputStreamCache
parameter_list|)
block|{
if|if
condition|(
name|fileInputStreamCaches
operator|==
literal|null
condition|)
block|{
name|fileInputStreamCaches
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|fileInputStreamCaches
operator|.
name|add
argument_list|(
name|fileInputStreamCache
argument_list|)
expr_stmt|;
block|}
DECL|method|addExchange (Exchange exchange)
name|void
name|addExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|closedOnCompletion
condition|)
block|{
name|exchangeCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// add on completion so we can cleanup after the exchange is done such as deleting temporary files
name|Synchronization
name|onCompletion
init|=
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|int
name|actualExchanges
init|=
name|exchangeCounter
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualExchanges
operator|==
literal|0
condition|)
block|{
comment|// only one exchange (one thread) left, therefore we must not synchronize the following lines of code
try|try
block|{
name|closeFileInputStreams
argument_list|()
expr_stmt|;
if|if
condition|(
name|outputStream
operator|!=
literal|null
condition|)
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|cleanUpTempFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error deleting temporary cache file: "
operator|+
name|tempFile
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing streams. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OnCompletion[CachedOutputStream]"
return|;
block|}
block|}
decl_stmt|;
name|UnitOfWork
name|streamCacheUnitOfWork
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|STREAM_CACHE_UNIT_OF_WORK
argument_list|,
name|UnitOfWork
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamCacheUnitOfWork
operator|!=
literal|null
condition|)
block|{
comment|// The stream cache must sometimes not be closed when the exchange is deleted. This is for example the
comment|// case in the splitter and multi-cast case with AggregationStrategy where the result of the sub-routes
comment|// are aggregated later in the main route. Here, the cached streams of the sub-routes must be closed with
comment|// the Unit of Work of the main route.
name|streamCacheUnitOfWork
operator|.
name|addSynchronization
argument_list|(
name|onCompletion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add on completion so we can cleanup after the exchange is done such as deleting temporary files
name|exchange
operator|.
name|addOnCompletion
argument_list|(
name|onCompletion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createOutputStream (StreamCachingStrategy strategy)
name|OutputStream
name|createOutputStream
parameter_list|(
name|StreamCachingStrategy
name|strategy
parameter_list|)
throws|throws
name|IOException
block|{
comment|// should only be called once
if|if
condition|(
name|tempFile
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The method 'createOutputStream' can only be called once!"
argument_list|)
throw|;
block|}
name|tempFile
operator|=
name|FileUtil
operator|.
name|createTempFile
argument_list|(
literal|"cos"
argument_list|,
literal|".tmp"
argument_list|,
name|strategy
operator|.
name|getSpoolDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating temporary stream cache file: {}"
argument_list|,
name|tempFile
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tempFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|strategy
operator|.
name|getSpoolChiper
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|ciphers
operator|==
literal|null
condition|)
block|{
name|ciphers
operator|=
operator|new
name|CipherPair
argument_list|(
name|strategy
operator|.
name|getSpoolChiper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|out
operator|=
operator|new
name|CipherOutputStream
argument_list|(
name|out
argument_list|,
name|ciphers
operator|.
name|getEncryptor
argument_list|()
argument_list|)
block|{
name|boolean
name|closed
decl_stmt|;
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
name|outputStream
operator|=
name|out
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|newStreamCache ()
name|FileInputStreamCache
name|newStreamCache
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|FileInputStreamCache
argument_list|(
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cached file "
operator|+
name|tempFile
operator|+
literal|" not found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|closeFileInputStreams ()
name|void
name|closeFileInputStreams
parameter_list|()
block|{
if|if
condition|(
name|fileInputStreamCaches
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileInputStreamCache
name|fileInputStreamCache
range|:
name|fileInputStreamCaches
control|)
block|{
name|fileInputStreamCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|fileInputStreamCaches
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanUpTempFile ()
name|void
name|cleanUpTempFile
parameter_list|()
block|{
comment|// cleanup temporary file
try|try
block|{
if|if
condition|(
name|tempFile
operator|!=
literal|null
condition|)
block|{
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
name|tempFile
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error deleting temporary cache file: "
operator|+
name|tempFile
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTempFile ()
name|File
name|getTempFile
parameter_list|()
block|{
return|return
name|tempFile
return|;
block|}
DECL|method|getCiphers ()
name|CipherPair
name|getCiphers
parameter_list|()
block|{
return|return
name|ciphers
return|;
block|}
block|}
block|}
end_class

end_unit

