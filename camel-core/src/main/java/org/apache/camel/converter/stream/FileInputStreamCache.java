begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.stream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|CipherInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * A {@link StreamCache} for {@link File}s  */
end_comment

begin_class
DECL|class|FileInputStreamCache
specifier|public
specifier|final
class|class
name|FileInputStreamCache
extends|extends
name|InputStream
implements|implements
name|StreamCache
block|{
DECL|field|stream
specifier|private
name|InputStream
name|stream
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|ciphers
specifier|private
specifier|final
name|CipherPair
name|ciphers
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|closer
specifier|private
specifier|final
name|FileInputStreamCache
operator|.
name|FileInputStreamCloser
name|closer
decl_stmt|;
DECL|method|FileInputStreamCache (File file)
specifier|public
name|FileInputStreamCache
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
name|file
argument_list|,
literal|null
argument_list|,
operator|new
name|FileInputStreamCloser
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|FileInputStreamCache (File file, CipherPair ciphers, FileInputStreamCloser closer)
name|FileInputStreamCache
parameter_list|(
name|File
name|file
parameter_list|,
name|CipherPair
name|ciphers
parameter_list|,
name|FileInputStreamCloser
name|closer
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|stream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ciphers
operator|=
name|ciphers
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|closer
operator|=
name|closer
expr_stmt|;
name|this
operator|.
name|closer
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// reset by closing and creating a new stream based on the file
name|close
argument_list|()
expr_stmt|;
comment|// reset by creating a new stream based on the file
name|stream
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot reset stream from file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
DECL|method|writeTo (OutputStream os)
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|==
literal|null
operator|&&
name|ciphers
operator|==
literal|null
condition|)
block|{
name|FileInputStream
name|s
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
name|WritableByteChannel
name|out
decl_stmt|;
if|if
condition|(
name|os
operator|instanceof
name|WritableByteChannel
condition|)
block|{
name|out
operator|=
operator|(
name|WritableByteChannel
operator|)
name|os
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|FileChannel
name|fc
init|=
name|s
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|long
name|i
init|=
name|fc
operator|.
name|transferTo
argument_list|(
name|pos
argument_list|,
name|len
operator|-
name|pos
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|i
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|fc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|IOHelper
operator|.
name|copy
argument_list|(
name|getInputStream
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copy ()
specifier|public
name|StreamCache
name|copy
parameter_list|()
throws|throws
name|IOException
block|{
name|FileInputStreamCache
name|copy
init|=
operator|new
name|FileInputStreamCache
argument_list|(
name|file
argument_list|,
name|ciphers
argument_list|,
name|closer
argument_list|)
decl_stmt|;
return|return
name|copy
return|;
block|}
DECL|method|inMemory ()
specifier|public
name|boolean
name|inMemory
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getInputStream
argument_list|()
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
return|;
block|}
DECL|method|getInputStream ()
specifier|protected
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
name|createInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
return|;
block|}
DECL|method|createInputStream (File file)
specifier|private
name|InputStream
name|createInputStream
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ciphers
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
operator|new
name|CipherInputStream
argument_list|(
name|in
argument_list|,
name|ciphers
operator|.
name|getDecryptor
argument_list|()
argument_list|)
block|{
name|boolean
name|closed
decl_stmt|;
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
comment|/**       * Collects all FileInputStreamCache instances of a temporary file which must be closed      * at the end of the route.      *       * @see CachedOutputStream      *       */
DECL|class|FileInputStreamCloser
specifier|static
class|class
name|FileInputStreamCloser
block|{
comment|// there can be several input streams, for example in the multi-cast parallel processing
DECL|field|fileInputStreamCaches
specifier|private
name|List
argument_list|<
name|FileInputStreamCache
argument_list|>
name|fileInputStreamCaches
decl_stmt|;
comment|/** Adds a FileInputStreamCache instance to the closer.          *<p>          * Must be synchronized, because can be accessed by several threads.           */
DECL|method|add (FileInputStreamCache fileInputStreamCache)
specifier|synchronized
name|void
name|add
parameter_list|(
name|FileInputStreamCache
name|fileInputStreamCache
parameter_list|)
block|{
if|if
condition|(
name|fileInputStreamCaches
operator|==
literal|null
condition|)
block|{
name|fileInputStreamCaches
operator|=
operator|new
name|ArrayList
argument_list|<
name|FileInputStreamCache
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|fileInputStreamCaches
operator|.
name|add
argument_list|(
name|fileInputStreamCache
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|fileInputStreamCaches
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileInputStreamCache
name|fileInputStreamCache
range|:
name|fileInputStreamCaches
control|)
block|{
name|fileInputStreamCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|fileInputStreamCaches
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

