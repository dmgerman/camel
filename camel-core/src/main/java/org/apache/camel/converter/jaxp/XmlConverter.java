begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BytesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A helper class to transform to and from various JAXB types such as {@link Source} and {@link Document}  *  * @version   */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|XmlConverter
specifier|public
class|class
name|XmlConverter
block|{
annotation|@
name|Deprecated
comment|//It will be removed in Camel 3.0, please use the Exchange.DEFAULT_CHARSET
DECL|field|DEFAULT_CHARSET_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CHARSET_PROPERTY
init|=
literal|"org.apache.camel.default.charset"
decl_stmt|;
DECL|field|OUTPUT_PROPERTIES_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_PROPERTIES_PREFIX
init|=
literal|"org.apache.camel.xmlconverter.output."
decl_stmt|;
DECL|field|defaultCharset
specifier|public
specifier|static
name|String
name|defaultCharset
init|=
name|ObjectHelper
operator|.
name|getSystemProperty
argument_list|(
name|Exchange
operator|.
name|DEFAULT_CHARSET_PROPERTY
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|/*      * When converting a DOM tree to a SAXSource, we try to use Xalan internal DOM parser if      * available. Else, transform the DOM tree to a String and build a SAXSource on top of it.      */
DECL|field|DOM_TO_SAX_CLASS
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|DOM_TO_SAX_CLASS
decl_stmt|;
DECL|field|documentBuilderFactory
specifier|private
name|DocumentBuilderFactory
name|documentBuilderFactory
decl_stmt|;
DECL|field|transformerFactory
specifier|private
name|TransformerFactory
name|transformerFactory
decl_stmt|;
static|static
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// will not warn the user if the class could not be found
name|cl
operator|=
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
literal|"org.apache.xalan.xsltc.trax.DOM2SAX"
argument_list|,
name|XmlConverter
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|DOM_TO_SAX_CLASS
operator|=
name|cl
expr_stmt|;
block|}
DECL|method|XmlConverter ()
specifier|public
name|XmlConverter
parameter_list|()
block|{     }
DECL|method|XmlConverter (DocumentBuilderFactory documentBuilderFactory)
specifier|public
name|XmlConverter
parameter_list|(
name|DocumentBuilderFactory
name|documentBuilderFactory
parameter_list|)
block|{
name|this
operator|.
name|documentBuilderFactory
operator|=
name|documentBuilderFactory
expr_stmt|;
block|}
comment|/**      * Returns the default set of output properties for conversions.      */
DECL|method|defaultOutputProperties ()
specifier|public
name|Properties
name|defaultOutputProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|defaultCharset
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|/**      * Converts the given input Source into the required result      */
DECL|method|toResult (Source source, Result result)
specifier|public
name|void
name|toResult
parameter_list|(
name|Source
name|source
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|TransformerException
block|{
name|toResult
argument_list|(
name|source
argument_list|,
name|result
argument_list|,
name|defaultOutputProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the given input Source into the required result      */
DECL|method|toResult (Source source, Result result, Properties outputProperties)
specifier|public
name|void
name|toResult
parameter_list|(
name|Source
name|source
parameter_list|,
name|Result
name|result
parameter_list|,
name|Properties
name|outputProperties
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Transformer
name|transformer
init|=
name|createTransformer
argument_list|()
decl_stmt|;
if|if
condition|(
name|transformer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"Could not create a transformer - JAXP is misconfigured!"
argument_list|)
throw|;
block|}
name|transformer
operator|.
name|setOutputProperties
argument_list|(
name|outputProperties
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the given NodeList to a boolean      */
annotation|@
name|Converter
DECL|method|toBoolean (NodeList list)
specifier|public
name|Boolean
name|toBoolean
parameter_list|(
name|NodeList
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Converts the given byte[] to a Source      */
annotation|@
name|Converter
DECL|method|toBytesSource (byte[] data)
specifier|public
name|BytesSource
name|toBytesSource
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
operator|new
name|BytesSource
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Converts the given String to a Source      */
annotation|@
name|Converter
DECL|method|toStringSource (String data)
specifier|public
name|StringSource
name|toStringSource
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
operator|new
name|StringSource
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Converts the given Document to a Source      * @deprecated use toDOMSource instead      */
annotation|@
name|Deprecated
DECL|method|toSource (Document document)
specifier|public
name|DOMSource
name|toSource
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
return|return
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
return|;
block|}
comment|/**      * Converts the given Node to a Source      * @throws TransformerException       * @throws ParserConfigurationException       * @deprecated  use toDOMSource instead      */
annotation|@
name|Deprecated
DECL|method|toSource (Node node)
specifier|public
name|Source
name|toSource
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
return|return
name|toDOMSource
argument_list|(
name|node
argument_list|)
return|;
block|}
comment|/**      * Converts the given Node to a Source      * @throws TransformerException       * @throws ParserConfigurationException       */
annotation|@
name|Converter
DECL|method|toDOMSource (Node node)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
name|Document
name|document
init|=
name|toDOMDocument
argument_list|(
name|node
argument_list|)
decl_stmt|;
return|return
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
return|;
block|}
comment|/**      * Converts the given Document to a DOMSource      */
annotation|@
name|Converter
DECL|method|toDOMSource (Document document)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
return|return
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
return|;
block|}
comment|/**      * Converts the given String to a Source      */
annotation|@
name|Converter
DECL|method|toSource (String data)
specifier|public
name|Source
name|toSource
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
operator|new
name|StringSource
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * Converts the given input Source into text.      *      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toString (Source source)
specifier|public
name|String
name|toString
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toString
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Converts the given input Source into text      */
annotation|@
name|Converter
DECL|method|toString (Source source, Exchange exchange)
specifier|public
name|String
name|toString
parameter_list|(
name|Source
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StringSource
condition|)
block|{
return|return
operator|(
operator|(
name|StringSource
operator|)
name|source
operator|)
operator|.
name|getText
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|BytesSource
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
operator|(
operator|(
name|BytesSource
operator|)
name|source
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
comment|// check the camelContext properties first
name|Properties
name|properties
init|=
name|ObjectHelper
operator|.
name|getCamelPropertiesWithPrefix
argument_list|(
name|OUTPUT_PROPERTIES_PREFIX
argument_list|,
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|toResult
argument_list|(
name|source
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|// using the old way to deal with it
name|toResult
argument_list|(
name|source
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Converts the given input Source into bytes      */
annotation|@
name|Converter
DECL|method|toByteArray (Source source, Exchange exchange)
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|(
name|Source
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
name|String
name|answer
init|=
name|toString
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|exchange
argument_list|,
name|answer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|answer
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
comment|/**      * Converts the given input Node into text      *      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toString (Node node)
specifier|public
name|String
name|toString
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toString
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Converts the given input Node into text      */
annotation|@
name|Converter
DECL|method|toString (Node node, Exchange exchange)
specifier|public
name|String
name|toString
parameter_list|(
name|Node
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toString
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|exchange
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link DOMSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toDOMSource (Source source)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
if|if
condition|(
name|source
operator|instanceof
name|DOMSource
condition|)
block|{
return|return
operator|(
name|DOMSource
operator|)
name|source
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|SAXSource
condition|)
block|{
return|return
name|toDOMSourceFromSAX
argument_list|(
operator|(
name|SAXSource
operator|)
name|source
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StreamSource
condition|)
block|{
return|return
name|toDOMSourceFromStream
argument_list|(
operator|(
name|StreamSource
operator|)
name|source
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StAXSource
condition|)
block|{
return|return
name|toDOMSourceFromStAX
argument_list|(
operator|(
name|StAXSource
operator|)
name|source
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Converts the source instance to a {@link DOMSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toDOMSource (String text)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
name|Source
name|source
init|=
name|toSource
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
return|return
name|toDOMSourceFromStream
argument_list|(
operator|(
name|StreamSource
operator|)
name|source
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Converts the source instance to a {@link DOMSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toDOMSource (byte[] bytes)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|toDOMSource
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      *      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toSAXSource (String source)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
return|return
name|toSAXSource
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toSAXSource (String source, Exchange exchange)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|String
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
return|return
name|toSAXSource
argument_list|(
name|toSource
argument_list|(
name|source
argument_list|)
argument_list|,
name|exchange
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link StAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      * @throws XMLStreamException       */
annotation|@
name|Converter
DECL|method|toStAXSource (String source, Exchange exchange)
specifier|public
name|StAXSource
name|toStAXSource
parameter_list|(
name|String
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|r
init|=
operator|new
name|StaxConverter
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|source
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|StAXSource
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link StAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      * @throws XMLStreamException      */
annotation|@
name|Converter
DECL|method|toStAXSource (byte[] in, Exchange exchange)
specifier|public
name|StAXSource
name|toStAXSource
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|r
init|=
operator|new
name|StaxConverter
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|in
argument_list|)
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StAXSource
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      *      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toSAXSource (InputStream source)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|InputStream
name|source
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
return|return
name|toSAXSource
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toSAXSource (InputStream source, Exchange exchange)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
return|return
name|toSAXSource
argument_list|(
name|toStreamSource
argument_list|(
name|source
argument_list|)
argument_list|,
name|exchange
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toSAXSource (byte[] in, Exchange exchange)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
return|return
name|toSAXSource
argument_list|(
name|toStreamSource
argument_list|(
name|in
argument_list|,
name|exchange
argument_list|)
argument_list|,
name|exchange
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link StAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      * @throws XMLStreamException       */
annotation|@
name|Converter
DECL|method|toStAXSource (InputStream source, Exchange exchange)
specifier|public
name|StAXSource
name|toStAXSource
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|r
init|=
operator|new
name|StaxConverter
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StAXSource
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toSAXSource (File file, Exchange exchange)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|File
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
name|InputStream
name|is
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|toSAXSource
argument_list|(
name|is
argument_list|,
name|exchange
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link StAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      * @throws FileNotFoundException       * @throws XMLStreamException       */
annotation|@
name|Converter
DECL|method|toStAXSource (File file, Exchange exchange)
specifier|public
name|StAXSource
name|toStAXSource
parameter_list|(
name|File
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|XMLStreamException
block|{
name|InputStream
name|is
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|XMLStreamReader
name|r
init|=
operator|new
name|StaxConverter
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StAXSource
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      *      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toSAXSource (Source source)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
return|return
name|toSAXSource
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Converts the source instance to a {@link SAXSource} or returns null if the conversion is not      * supported (making it easy to derive from this class to add new kinds of conversion).      */
annotation|@
name|Converter
DECL|method|toSAXSource (Source source, Exchange exchange)
specifier|public
name|SAXSource
name|toSAXSource
parameter_list|(
name|Source
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
if|if
condition|(
name|source
operator|instanceof
name|SAXSource
condition|)
block|{
return|return
operator|(
name|SAXSource
operator|)
name|source
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|DOMSource
condition|)
block|{
return|return
name|toSAXSourceFromDOM
argument_list|(
operator|(
name|DOMSource
operator|)
name|source
argument_list|,
name|exchange
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StreamSource
condition|)
block|{
return|return
name|toSAXSourceFromStream
argument_list|(
operator|(
name|StreamSource
operator|)
name|source
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StAXSource
condition|)
block|{
return|return
name|toSAXSourceFromStAX
argument_list|(
operator|(
name|StAXSource
operator|)
name|source
argument_list|,
name|exchange
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toStreamSource (Source source)
specifier|public
name|StreamSource
name|toStreamSource
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toStreamSource
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSource (Source source, Exchange exchange)
specifier|public
name|StreamSource
name|toStreamSource
parameter_list|(
name|Source
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|source
operator|instanceof
name|StreamSource
condition|)
block|{
return|return
operator|(
name|StreamSource
operator|)
name|source
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|DOMSource
condition|)
block|{
return|return
name|toStreamSourceFromDOM
argument_list|(
operator|(
name|DOMSource
operator|)
name|source
argument_list|,
name|exchange
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|SAXSource
condition|)
block|{
return|return
name|toStreamSourceFromSAX
argument_list|(
operator|(
name|SAXSource
operator|)
name|source
argument_list|,
name|exchange
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StAXSource
condition|)
block|{
return|return
name|toStreamSourceFromStAX
argument_list|(
operator|(
name|StAXSource
operator|)
name|source
argument_list|,
name|exchange
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Converter
DECL|method|toStreamSource (InputStream in)
specifier|public
name|StreamSource
name|toStreamSource
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|in
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSource (Reader in)
specifier|public
name|StreamSource
name|toStreamSource
parameter_list|(
name|Reader
name|in
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|in
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSource (File in)
specifier|public
name|StreamSource
name|toStreamSource
parameter_list|(
name|File
name|in
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|in
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSource (byte[] in, Exchange exchange)
specifier|public
name|StreamSource
name|toStreamSource
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSource (ByteBuffer in, Exchange exchange)
specifier|public
name|StreamSource
name|toStreamSource
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toStreamSourceFromSAX (SAXSource source)
specifier|public
name|StreamSource
name|toStreamSourceFromSAX
parameter_list|(
name|SAXSource
name|source
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toStreamSourceFromSAX
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSourceFromSAX (SAXSource source, Exchange exchange)
specifier|public
name|StreamSource
name|toStreamSourceFromSAX
parameter_list|(
name|SAXSource
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
name|InputSource
name|inputSource
init|=
name|source
operator|.
name|getInputSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|inputSource
operator|.
name|getCharacterStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|inputSource
operator|.
name|getCharacterStream
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|inputSource
operator|.
name|getByteStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|inputSource
operator|.
name|getByteStream
argument_list|()
argument_list|)
return|;
block|}
block|}
name|String
name|result
init|=
name|toString
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringSource
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toStreamSourceFromDOM (DOMSource source)
specifier|public
name|StreamSource
name|toStreamSourceFromDOM
parameter_list|(
name|DOMSource
name|source
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toStreamSourceFromDOM
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSourceFromDOM (DOMSource source, Exchange exchange)
specifier|public
name|StreamSource
name|toStreamSourceFromDOM
parameter_list|(
name|DOMSource
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
name|String
name|result
init|=
name|toString
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringSource
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toStreamSourceFromStAX (StAXSource source, Exchange exchange)
specifier|public
name|StreamSource
name|toStreamSourceFromStAX
parameter_list|(
name|StAXSource
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
name|String
name|result
init|=
name|toString
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringSource
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toSAXSourceFromStream (StreamSource source)
specifier|public
name|SAXSource
name|toSAXSourceFromStream
parameter_list|(
name|StreamSource
name|source
parameter_list|)
block|{
name|InputSource
name|inputSource
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|getReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inputSource
operator|=
operator|new
name|InputSource
argument_list|(
name|source
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputSource
operator|=
operator|new
name|InputSource
argument_list|(
name|source
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inputSource
operator|.
name|setSystemId
argument_list|(
name|source
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|inputSource
operator|.
name|setPublicId
argument_list|(
name|source
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SAXSource
argument_list|(
name|inputSource
argument_list|)
return|;
block|}
comment|/**      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toReaderFromSource (Source src)
specifier|public
name|Reader
name|toReaderFromSource
parameter_list|(
name|Source
name|src
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toReaderFromSource
argument_list|(
name|src
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toReaderFromSource (Source src, Exchange exchange)
specifier|public
name|Reader
name|toReaderFromSource
parameter_list|(
name|Source
name|src
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
name|StreamSource
name|stSrc
init|=
name|toStreamSource
argument_list|(
name|src
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Reader
name|r
init|=
name|stSrc
operator|.
name|getReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|stSrc
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
annotation|@
name|Converter
DECL|method|toDOMSource (InputStream is)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|String
name|systemId
init|=
name|source
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|createDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|builder
operator|.
name|parse
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|,
name|systemId
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toDOMSource (File file)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|InputStream
name|is
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|toDOMSource
argument_list|(
name|is
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toDOMSourceFromStream (StreamSource source)
specifier|public
name|DOMSource
name|toDOMSourceFromStream
parameter_list|(
name|StreamSource
name|source
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|Document
name|document
decl_stmt|;
name|String
name|systemId
init|=
name|source
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|createDocumentBuilder
argument_list|()
decl_stmt|;
name|Reader
name|reader
init|=
name|source
operator|.
name|getReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputStream
name|inputStream
init|=
name|source
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|InputSource
name|inputsource
init|=
operator|new
name|InputSource
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|inputsource
operator|.
name|setSystemId
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|inputsource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No input stream or reader available on StreamSource: "
operator|+
name|source
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|,
name|systemId
argument_list|)
return|;
block|}
comment|/**      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toSAXSourceFromDOM (DOMSource source)
specifier|public
name|SAXSource
name|toSAXSourceFromDOM
parameter_list|(
name|DOMSource
name|source
parameter_list|)
throws|throws
name|TransformerException
block|{
return|return
name|toSAXSourceFromDOM
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toSAXSourceFromDOM (DOMSource source, Exchange exchange)
specifier|public
name|SAXSource
name|toSAXSourceFromDOM
parameter_list|(
name|DOMSource
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|DOM_TO_SAX_CLASS
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|cns
init|=
name|DOM_TO_SAX_CLASS
operator|.
name|getConstructor
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|XMLReader
name|converter
init|=
operator|(
name|XMLReader
operator|)
name|cns
operator|.
name|newInstance
argument_list|(
name|source
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SAXSource
argument_list|(
name|converter
argument_list|,
operator|new
name|InputSource
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|str
init|=
name|toString
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
operator|new
name|SAXSource
argument_list|(
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Converter
DECL|method|toSAXSourceFromStAX (StAXSource source, Exchange exchange)
specifier|public
name|SAXSource
name|toSAXSourceFromStAX
parameter_list|(
name|StAXSource
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
block|{
name|String
name|str
init|=
name|toString
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
operator|new
name|SAXSource
argument_list|(
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toDOMSourceFromSAX (SAXSource source)
specifier|public
name|DOMSource
name|toDOMSourceFromSAX
parameter_list|(
name|SAXSource
name|source
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
return|return
operator|new
name|DOMSource
argument_list|(
name|toDOMNodeFromSAX
argument_list|(
name|source
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toDOMSourceFromStAX (StAXSource source)
specifier|public
name|DOMSource
name|toDOMSourceFromStAX
parameter_list|(
name|StAXSource
name|source
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
return|return
operator|new
name|DOMSource
argument_list|(
name|toDOMNodeFromStAX
argument_list|(
name|source
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toDOMNodeFromSAX (SAXSource source)
specifier|public
name|Node
name|toDOMNodeFromSAX
parameter_list|(
name|SAXSource
name|source
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|toResult
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getNode
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toDOMNodeFromStAX (StAXSource source)
specifier|public
name|Node
name|toDOMNodeFromStAX
parameter_list|(
name|StAXSource
name|source
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|TransformerException
block|{
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|toResult
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getNode
argument_list|()
return|;
block|}
comment|/**      * Convert a NodeList consisting of just 1 node to a DOM Node.      * @param nl the NodeList      * @return the DOM Node      */
annotation|@
name|Converter
DECL|method|toDOMNodeFromSingleNodeList (NodeList nl)
specifier|public
name|Node
name|toDOMNodeFromSingleNodeList
parameter_list|(
name|NodeList
name|nl
parameter_list|)
block|{
return|return
name|nl
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|?
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Convert a NodeList consisting of just 1 node to a DOM Document.      * Cannot convert NodeList with length> 1 because they require a root node.      * @param nl the NodeList      * @return the DOM Document      */
annotation|@
name|Converter
DECL|method|toDOMDocumentFromSingleNodeList (NodeList nl)
specifier|public
name|Document
name|toDOMDocumentFromSingleNodeList
parameter_list|(
name|NodeList
name|nl
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
return|return
name|nl
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|?
name|toDOMDocument
argument_list|(
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Converts the given TRaX Source into a W3C DOM node      */
annotation|@
name|Converter
DECL|method|toDOMNode (Source source)
specifier|public
name|Node
name|toDOMNode
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|DOMSource
name|domSrc
init|=
name|toDOMSource
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|domSrc
operator|!=
literal|null
condition|?
name|domSrc
operator|.
name|getNode
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Create a DOM element from the given source.      */
annotation|@
name|Converter
DECL|method|toDOMElement (Source source)
specifier|public
name|Element
name|toDOMElement
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|Node
name|node
init|=
name|toDOMNode
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|toDOMElement
argument_list|(
name|node
argument_list|)
return|;
block|}
comment|/**      * Create a DOM element from the DOM node.      * Simply cast if the node is an Element, or      * return the root element if it is a Document.      */
annotation|@
name|Converter
DECL|method|toDOMElement (Node node)
specifier|public
name|Element
name|toDOMElement
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|TransformerException
block|{
comment|// If the node is an document, return the root element
if|if
condition|(
name|node
operator|instanceof
name|Document
condition|)
block|{
return|return
operator|(
operator|(
name|Document
operator|)
name|node
operator|)
operator|.
name|getDocumentElement
argument_list|()
return|;
comment|// If the node is an element, just cast it
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|node
return|;
comment|// Other node types are not handled
block|}
else|else
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"Unable to convert DOM node to an Element"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Converts the given data to a DOM document      *      * @param data is the data to be parsed      * @return the parsed document      */
annotation|@
name|Converter
DECL|method|toDOMDocument (byte[] data)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|documentBuilder
init|=
name|getDocumentBuilderFactory
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|documentBuilder
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@link InputStream} to a DOM document      *      * @param in is the data to be parsed      * @return the parsed document      */
annotation|@
name|Converter
DECL|method|toDOMDocument (InputStream in)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|documentBuilder
init|=
name|getDocumentBuilderFactory
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|documentBuilder
operator|.
name|parse
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@link InputStream} to a DOM document      *      * @param in is the data to be parsed      * @return the parsed document      */
annotation|@
name|Converter
DECL|method|toDOMDocument (Reader in)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
name|Reader
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
return|return
name|toDOMDocument
argument_list|(
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@link InputSource} to a DOM document      *      * @param in is the data to be parsed      * @return the parsed document      */
annotation|@
name|Converter
DECL|method|toDOMDocument (InputSource in)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
name|InputSource
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|documentBuilder
init|=
name|getDocumentBuilderFactory
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|documentBuilder
operator|.
name|parse
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@link String} to a DOM document      *      * @param text is the data to be parsed      * @return the parsed document      */
annotation|@
name|Converter
DECL|method|toDOMDocument (String text)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
return|return
name|toDOMDocument
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts the given {@link File} to a DOM document      *      * @param file is the data to be parsed      * @return the parsed document      */
annotation|@
name|Converter
DECL|method|toDOMDocument (File file)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|documentBuilder
init|=
name|getDocumentBuilderFactory
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|documentBuilder
operator|.
name|parse
argument_list|(
name|file
argument_list|)
return|;
block|}
comment|/**      * Create a DOM document from the given source.      */
annotation|@
name|Converter
DECL|method|toDOMDocument (Source source)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|Node
name|node
init|=
name|toDOMNode
argument_list|(
name|source
argument_list|)
decl_stmt|;
return|return
name|toDOMDocument
argument_list|(
name|node
argument_list|)
return|;
block|}
comment|/**      * Create a DOM document from the given Node.      *      * If the node is an document, just cast it, if the node is an root element, retrieve its      * owner element or create a new document and import the node.      */
annotation|@
name|Converter
DECL|method|toDOMDocument (final Node node)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
comment|// If the node is the document, just cast it
if|if
condition|(
name|node
operator|instanceof
name|Document
condition|)
block|{
return|return
operator|(
name|Document
operator|)
name|node
return|;
comment|// If the node is an element
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
comment|// If this is the root element, return its owner document
if|if
condition|(
name|elem
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
operator|==
name|elem
condition|)
block|{
return|return
name|elem
operator|.
name|getOwnerDocument
argument_list|()
return|;
comment|// else, create a new doc and copy the element inside it
block|}
else|else
block|{
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
comment|// import node must not occur concurrent on the same node (must be its owner)
comment|// so we need to synchronize on it
synchronized|synchronized
init|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
init|)
block|{
name|doc
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|importNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
comment|// other element types are not handled
block|}
else|else
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"Unable to convert DOM node to a Document: "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
comment|/**      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toInputStream (DOMSource source)
specifier|public
name|InputStream
name|toInputStream
parameter_list|(
name|DOMSource
name|source
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
return|return
name|toInputStream
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toInputStream (DOMSource source, Exchange exchange)
specifier|public
name|InputStream
name|toInputStream
parameter_list|(
name|DOMSource
name|source
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
name|String
name|s
init|=
name|toString
argument_list|(
name|source
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @deprecated will be removed in Camel 3.0. Use the method which has 2 parameters.      */
annotation|@
name|Deprecated
DECL|method|toInputStream (Document dom)
specifier|public
name|InputStream
name|toInputStream
parameter_list|(
name|Document
name|dom
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
return|return
name|toInputStream
argument_list|(
name|dom
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toInputStream (Document dom, Exchange exchange)
specifier|public
name|InputStream
name|toInputStream
parameter_list|(
name|Document
name|dom
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
name|String
name|s
init|=
name|toString
argument_list|(
name|dom
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toInputSource (InputStream is, Exchange exchange)
specifier|public
name|InputSource
name|toInputSource
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toInputSource (File file, Exchange exchange)
specifier|public
name|InputSource
name|toInputSource
parameter_list|(
name|File
name|file
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|InputStream
name|is
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getDocumentBuilderFactory ()
specifier|public
name|DocumentBuilderFactory
name|getDocumentBuilderFactory
parameter_list|()
block|{
if|if
condition|(
name|documentBuilderFactory
operator|==
literal|null
condition|)
block|{
name|documentBuilderFactory
operator|=
name|createDocumentBuilderFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|documentBuilderFactory
return|;
block|}
DECL|method|setDocumentBuilderFactory (DocumentBuilderFactory documentBuilderFactory)
specifier|public
name|void
name|setDocumentBuilderFactory
parameter_list|(
name|DocumentBuilderFactory
name|documentBuilderFactory
parameter_list|)
block|{
name|this
operator|.
name|documentBuilderFactory
operator|=
name|documentBuilderFactory
expr_stmt|;
block|}
comment|// Helper methods
comment|//-------------------------------------------------------------------------
DECL|method|createDocumentBuilderFactory ()
specifier|public
name|DocumentBuilderFactory
name|createDocumentBuilderFactory
parameter_list|()
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setIgnoringElementContentWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
DECL|method|createDocumentBuilder ()
specifier|public
name|DocumentBuilder
name|createDocumentBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|getDocumentBuilderFactory
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
return|;
block|}
DECL|method|createDocument ()
specifier|public
name|Document
name|createDocument
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|builder
init|=
name|createDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|newDocument
argument_list|()
return|;
block|}
DECL|method|getTransformerFactory ()
specifier|public
name|TransformerFactory
name|getTransformerFactory
parameter_list|()
block|{
if|if
condition|(
name|transformerFactory
operator|==
literal|null
condition|)
block|{
name|transformerFactory
operator|=
name|createTransformerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|transformerFactory
return|;
block|}
DECL|method|setTransformerFactory (TransformerFactory transformerFactory)
specifier|public
name|void
name|setTransformerFactory
parameter_list|(
name|TransformerFactory
name|transformerFactory
parameter_list|)
block|{
name|this
operator|.
name|transformerFactory
operator|=
name|transformerFactory
expr_stmt|;
block|}
comment|/**      * @deprecated use {@link #createTransformer}, will be removed in Camel 3.0      */
annotation|@
name|Deprecated
DECL|method|createTransfomer ()
specifier|public
name|Transformer
name|createTransfomer
parameter_list|()
throws|throws
name|TransformerConfigurationException
block|{
return|return
name|createTransformer
argument_list|()
return|;
block|}
DECL|method|createTransformer ()
specifier|public
name|Transformer
name|createTransformer
parameter_list|()
throws|throws
name|TransformerConfigurationException
block|{
name|TransformerFactory
name|factory
init|=
name|getTransformerFactory
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|newTransformer
argument_list|()
return|;
block|}
DECL|method|createTransformerFactory ()
specifier|public
name|TransformerFactory
name|createTransformerFactory
parameter_list|()
block|{
name|TransformerFactory
name|factory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setErrorListener
argument_list|(
operator|new
name|XmlErrorListener
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
block|}
end_class

end_unit

