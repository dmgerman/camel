begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|ObjectConverter
operator|.
name|toBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactoryConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFunctionResolver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_comment
comment|/**  * Creates an XPath expression builder  *  * @version $Revision: 531854 $  */
end_comment

begin_class
DECL|class|XPathBuilder
specifier|public
class|class
name|XPathBuilder
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|Expression
argument_list|<
name|E
argument_list|>
implements|,
name|Predicate
argument_list|<
name|E
argument_list|>
block|{
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|field|xpathFactory
specifier|private
name|XPathFactory
name|xpathFactory
decl_stmt|;
DECL|field|documentType
specifier|private
name|Class
name|documentType
init|=
name|Document
operator|.
name|class
decl_stmt|;
DECL|field|resultType
specifier|private
name|QName
name|resultType
init|=
literal|null
decl_stmt|;
DECL|field|objectModelUri
specifier|private
name|String
name|objectModelUri
init|=
literal|null
decl_stmt|;
DECL|field|namespaceContext
specifier|private
name|DefaultNamespaceContext
name|namespaceContext
decl_stmt|;
DECL|field|functionResolver
specifier|private
name|XPathFunctionResolver
name|functionResolver
decl_stmt|;
DECL|field|expression
specifier|private
name|XPathExpression
name|expression
decl_stmt|;
DECL|field|variableResolver
specifier|private
name|MessageVariableResolver
name|variableResolver
init|=
operator|new
name|MessageVariableResolver
argument_list|()
decl_stmt|;
DECL|method|xpath (String text)
specifier|public
specifier|static
name|XPathBuilder
name|xpath
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|XPathBuilder
argument_list|(
name|text
argument_list|)
return|;
block|}
DECL|method|XPathBuilder (String text)
specifier|public
name|XPathBuilder
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"XPath: "
operator|+
name|text
return|;
block|}
DECL|method|matches (E exchange)
specifier|public
name|boolean
name|matches
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
name|Object
name|booleanResult
init|=
name|evaluateAs
argument_list|(
name|exchange
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
return|return
name|toBoolean
argument_list|(
name|booleanResult
argument_list|)
return|;
block|}
DECL|method|assertMatches (String text, E exchange)
specifier|public
name|void
name|assertMatches
parameter_list|(
name|String
name|text
parameter_list|,
name|E
name|exchange
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|booleanResult
init|=
name|evaluateAs
argument_list|(
name|exchange
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toBoolean
argument_list|(
name|booleanResult
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|this
operator|+
literal|" failed on "
operator|+
name|exchange
operator|+
literal|" as returned<"
operator|+
name|booleanResult
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
DECL|method|evaluate (E exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
return|return
name|evaluateAs
argument_list|(
name|exchange
argument_list|,
name|resultType
argument_list|)
return|;
block|}
comment|// Builder methods
comment|//-------------------------------------------------------------------------
comment|/**      * Sets the expression result type to boolean      *      * @return the current builder      */
DECL|method|booleanResult ()
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|booleanResult
parameter_list|()
block|{
name|resultType
operator|=
name|XPathConstants
operator|.
name|BOOLEAN
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the expression result type to boolean      *      * @return the current builder      */
DECL|method|nodeResult ()
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|nodeResult
parameter_list|()
block|{
name|resultType
operator|=
name|XPathConstants
operator|.
name|NODE
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the expression result type to boolean      *      * @return the current builder      */
DECL|method|nodeSetResult ()
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|nodeSetResult
parameter_list|()
block|{
name|resultType
operator|=
name|XPathConstants
operator|.
name|NODESET
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the expression result type to boolean      *      * @return the current builder      */
DECL|method|numberResult ()
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|numberResult
parameter_list|()
block|{
name|resultType
operator|=
name|XPathConstants
operator|.
name|NUMBER
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the expression result type to boolean      *      * @return the current builder      */
DECL|method|stringResult ()
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|stringResult
parameter_list|()
block|{
name|resultType
operator|=
name|XPathConstants
operator|.
name|STRING
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the object model URI to use      *      * @return the current builder      */
DECL|method|objectModel (String uri)
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|objectModel
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|objectModelUri
operator|=
name|uri
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the {@link XPathFunctionResolver} instance to use on these XPath expressions      *      * @return the current builder      */
DECL|method|functionResolver (XPathFunctionResolver functionResolver)
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|functionResolver
parameter_list|(
name|XPathFunctionResolver
name|functionResolver
parameter_list|)
block|{
name|this
operator|.
name|functionResolver
operator|=
name|functionResolver
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Registers the namespace prefix and URI with the builder so that the prefix can be used in XPath expressions      *      * @param prefix is the namespace prefix that can be used in the XPath expressions      * @param uri is the namespace URI to which the prefix refers      * @return the current builder      */
DECL|method|namespace (String prefix, String uri)
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|namespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|getNamespaceContext
argument_list|()
operator|.
name|add
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Registers a variable (in the global namespace) which can be referred to from XPath expressions      */
DECL|method|variable (String name, Object value)
specifier|public
name|XPathBuilder
argument_list|<
name|E
argument_list|>
name|variable
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|variableResolver
operator|.
name|addVariable
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getXPathFactory ()
specifier|public
name|XPathFactory
name|getXPathFactory
parameter_list|()
throws|throws
name|XPathFactoryConfigurationException
block|{
if|if
condition|(
name|xpathFactory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|objectModelUri
operator|!=
literal|null
condition|)
block|{
name|xpathFactory
operator|=
name|XPathFactory
operator|.
name|newInstance
argument_list|(
name|objectModelUri
argument_list|)
expr_stmt|;
block|}
name|xpathFactory
operator|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|xpathFactory
return|;
block|}
DECL|method|setXPathFactory (XPathFactory xpathFactory)
specifier|public
name|void
name|setXPathFactory
parameter_list|(
name|XPathFactory
name|xpathFactory
parameter_list|)
block|{
name|this
operator|.
name|xpathFactory
operator|=
name|xpathFactory
expr_stmt|;
block|}
DECL|method|getDocumentType ()
specifier|public
name|Class
name|getDocumentType
parameter_list|()
block|{
return|return
name|documentType
return|;
block|}
DECL|method|setDocumentType (Class documentType)
specifier|public
name|void
name|setDocumentType
parameter_list|(
name|Class
name|documentType
parameter_list|)
block|{
name|this
operator|.
name|documentType
operator|=
name|documentType
expr_stmt|;
block|}
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
DECL|method|getResultType ()
specifier|public
name|QName
name|getResultType
parameter_list|()
block|{
return|return
name|resultType
return|;
block|}
DECL|method|getNamespaceContext ()
specifier|public
name|DefaultNamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
if|if
condition|(
name|namespaceContext
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|namespaceContext
operator|=
operator|new
name|DefaultNamespaceContext
argument_list|(
name|getXPathFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathFactoryConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExpressionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|namespaceContext
return|;
block|}
DECL|method|setNamespaceContext (DefaultNamespaceContext namespaceContext)
specifier|public
name|void
name|setNamespaceContext
parameter_list|(
name|DefaultNamespaceContext
name|namespaceContext
parameter_list|)
block|{
name|this
operator|.
name|namespaceContext
operator|=
name|namespaceContext
expr_stmt|;
block|}
DECL|method|getFunctionResolver ()
specifier|public
name|XPathFunctionResolver
name|getFunctionResolver
parameter_list|()
block|{
return|return
name|functionResolver
return|;
block|}
DECL|method|setFunctionResolver (XPathFunctionResolver functionResolver)
specifier|public
name|void
name|setFunctionResolver
parameter_list|(
name|XPathFunctionResolver
name|functionResolver
parameter_list|)
block|{
name|this
operator|.
name|functionResolver
operator|=
name|functionResolver
expr_stmt|;
block|}
DECL|method|getExpression ()
specifier|public
name|XPathExpression
name|getExpression
parameter_list|()
throws|throws
name|XPathFactoryConfigurationException
throws|,
name|XPathExpressionException
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
name|expression
operator|=
name|createXPathExpression
argument_list|()
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
comment|/**      * Evaluates the expression as the given result type      */
DECL|method|evaluateAs (E exchange, QName resultType)
specifier|protected
specifier|synchronized
name|Object
name|evaluateAs
parameter_list|(
name|E
name|exchange
parameter_list|,
name|QName
name|resultType
parameter_list|)
block|{
name|variableResolver
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|document
init|=
name|getDocument
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|document
operator|instanceof
name|InputSource
condition|)
block|{
name|InputSource
name|inputSource
init|=
operator|(
name|InputSource
operator|)
name|document
decl_stmt|;
return|return
name|getExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|inputSource
argument_list|,
name|resultType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|document
argument_list|,
name|resultType
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|document
operator|instanceof
name|InputSource
condition|)
block|{
name|InputSource
name|inputSource
init|=
operator|(
name|InputSource
operator|)
name|document
decl_stmt|;
return|return
name|getExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|inputSource
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|document
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidXPathExpression
argument_list|(
name|getText
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathFactoryConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidXPathExpression
argument_list|(
name|getText
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createXPathExpression ()
specifier|protected
name|XPathExpression
name|createXPathExpression
parameter_list|()
throws|throws
name|XPathExpressionException
throws|,
name|XPathFactoryConfigurationException
block|{
name|XPath
name|xPath
init|=
name|getXPathFactory
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
comment|// lets now clear any factory references to avoid keeping them around
name|xpathFactory
operator|=
literal|null
expr_stmt|;
name|xPath
operator|.
name|setNamespaceContext
argument_list|(
name|getNamespaceContext
argument_list|()
argument_list|)
expr_stmt|;
name|xPath
operator|.
name|setXPathVariableResolver
argument_list|(
name|variableResolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|functionResolver
operator|!=
literal|null
condition|)
block|{
name|xPath
operator|.
name|setXPathFunctionResolver
argument_list|(
name|functionResolver
argument_list|)
expr_stmt|;
block|}
return|return
name|xPath
operator|.
name|compile
argument_list|(
name|text
argument_list|)
return|;
block|}
comment|/**      * Strategy method to extract the document from the exchange      */
DECL|method|getDocument (E exchange)
specifier|protected
name|Object
name|getDocument
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Class
name|type
init|=
name|getDocumentType
argument_list|()
decl_stmt|;
name|Object
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|in
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|in
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
comment|// lets try coerce some common types into something JAXP can deal with
if|if
condition|(
name|answer
operator|instanceof
name|String
condition|)
block|{
name|answer
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|answer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

