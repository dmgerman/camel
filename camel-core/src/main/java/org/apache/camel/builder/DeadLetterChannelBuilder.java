begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DeadLetterChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RecipientList
import|;
end_import

begin_comment
comment|/**  * A builder of a<a href="http://activemq.apache.org/camel/dead-letter-channel.html">Dead Letter Channel</a>  *   * @version $Revision$  */
end_comment

begin_class
DECL|class|DeadLetterChannelBuilder
specifier|public
class|class
name|DeadLetterChannelBuilder
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
extends|extends
name|BuilderSupport
argument_list|<
name|E
argument_list|>
implements|implements
name|ErrorHandlerBuilder
argument_list|<
name|E
argument_list|>
block|{
DECL|field|redeliveryPolicy
specifier|private
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
DECL|field|deadLetterFactory
specifier|private
name|ProcessorFactory
argument_list|<
name|E
argument_list|>
name|deadLetterFactory
decl_stmt|;
DECL|field|defaultDeadLetterEndpoint
specifier|private
name|Processor
argument_list|<
name|E
argument_list|>
name|defaultDeadLetterEndpoint
decl_stmt|;
DECL|field|defaultDeadLetterEndpointExpression
specifier|private
name|Expression
argument_list|<
name|E
argument_list|>
name|defaultDeadLetterEndpointExpression
decl_stmt|;
DECL|field|defaultDeadLetterEndpointUri
specifier|private
name|String
name|defaultDeadLetterEndpointUri
init|=
literal|"log:org.apache.camel.DeadLetterChannel:error"
decl_stmt|;
DECL|method|DeadLetterChannelBuilder ()
specifier|public
name|DeadLetterChannelBuilder
parameter_list|()
block|{     }
DECL|method|DeadLetterChannelBuilder (ProcessorFactory<E> deadLetterFactory)
specifier|public
name|DeadLetterChannelBuilder
parameter_list|(
name|ProcessorFactory
argument_list|<
name|E
argument_list|>
name|deadLetterFactory
parameter_list|)
block|{
name|this
operator|.
name|deadLetterFactory
operator|=
name|deadLetterFactory
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|ErrorHandlerBuilder
argument_list|<
name|E
argument_list|>
name|copy
parameter_list|()
block|{
name|DeadLetterChannelBuilder
argument_list|<
name|E
argument_list|>
name|answer
init|=
operator|new
name|DeadLetterChannelBuilder
argument_list|<
name|E
argument_list|>
argument_list|(
name|deadLetterFactory
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setRedeliveryPolicy
argument_list|(
name|getRedeliveryPolicy
argument_list|()
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createErrorHandler (Processor<E> processor)
specifier|public
name|Processor
argument_list|<
name|E
argument_list|>
name|createErrorHandler
parameter_list|(
name|Processor
argument_list|<
name|E
argument_list|>
name|processor
parameter_list|)
block|{
name|Processor
argument_list|<
name|E
argument_list|>
name|deadLetter
init|=
name|getDeadLetterFactory
argument_list|()
operator|.
name|createProcessor
argument_list|()
decl_stmt|;
return|return
operator|new
name|DeadLetterChannel
argument_list|<
name|E
argument_list|>
argument_list|(
name|processor
argument_list|,
name|deadLetter
argument_list|,
name|getRedeliveryPolicy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRedeliveryPolicy ()
specifier|public
name|RedeliveryPolicy
name|getRedeliveryPolicy
parameter_list|()
block|{
return|return
name|redeliveryPolicy
return|;
block|}
comment|/**      * Sets the redelivery policy      */
DECL|method|setRedeliveryPolicy (RedeliveryPolicy redeliveryPolicy)
specifier|public
name|void
name|setRedeliveryPolicy
parameter_list|(
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|)
block|{
name|this
operator|.
name|redeliveryPolicy
operator|=
name|redeliveryPolicy
expr_stmt|;
block|}
DECL|method|getDeadLetterFactory ()
specifier|public
name|ProcessorFactory
argument_list|<
name|E
argument_list|>
name|getDeadLetterFactory
parameter_list|()
block|{
if|if
condition|(
name|deadLetterFactory
operator|==
literal|null
condition|)
block|{
name|deadLetterFactory
operator|=
operator|new
name|ProcessorFactory
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|public
name|Processor
argument_list|<
name|E
argument_list|>
name|createProcessor
parameter_list|()
block|{
return|return
name|getDefaultDeadLetterEndpoint
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|deadLetterFactory
return|;
block|}
comment|/**      * Sets the default dead letter queue factory      */
DECL|method|setDeadLetterFactory (ProcessorFactory<E> deadLetterFactory)
specifier|public
name|void
name|setDeadLetterFactory
parameter_list|(
name|ProcessorFactory
argument_list|<
name|E
argument_list|>
name|deadLetterFactory
parameter_list|)
block|{
name|this
operator|.
name|deadLetterFactory
operator|=
name|deadLetterFactory
expr_stmt|;
block|}
DECL|method|getDefaultDeadLetterEndpoint ()
specifier|public
name|Processor
argument_list|<
name|E
argument_list|>
name|getDefaultDeadLetterEndpoint
parameter_list|()
block|{
if|if
condition|(
name|defaultDeadLetterEndpoint
operator|==
literal|null
condition|)
block|{
name|defaultDeadLetterEndpoint
operator|=
operator|new
name|RecipientList
argument_list|<
name|E
argument_list|>
argument_list|(
name|getDefaultDeadLetterEndpointExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultDeadLetterEndpoint
return|;
block|}
comment|/**       * Sets the default dead letter endpoint used       */
DECL|method|setDefaultDeadLetterEndpoint (Processor<E> defaultDeadLetterEndpoint)
specifier|public
name|void
name|setDefaultDeadLetterEndpoint
parameter_list|(
name|Processor
argument_list|<
name|E
argument_list|>
name|defaultDeadLetterEndpoint
parameter_list|)
block|{
name|this
operator|.
name|defaultDeadLetterEndpoint
operator|=
name|defaultDeadLetterEndpoint
expr_stmt|;
block|}
DECL|method|getDefaultDeadLetterEndpointExpression ()
specifier|public
name|Expression
argument_list|<
name|E
argument_list|>
name|getDefaultDeadLetterEndpointExpression
parameter_list|()
block|{
if|if
condition|(
name|defaultDeadLetterEndpointExpression
operator|==
literal|null
condition|)
block|{
name|defaultDeadLetterEndpointExpression
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|getDefaultDeadLetterEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultDeadLetterEndpointExpression
return|;
block|}
comment|/**      * Sets the expression used to decide the dead letter channel endpoint for an exchange      * if no factory is provided via {@link #setDeadLetterFactory(ProcessorFactory)}      */
DECL|method|setDefaultDeadLetterEndpointExpression (Expression<E> defaultDeadLetterEndpointExpression)
specifier|public
name|void
name|setDefaultDeadLetterEndpointExpression
parameter_list|(
name|Expression
argument_list|<
name|E
argument_list|>
name|defaultDeadLetterEndpointExpression
parameter_list|)
block|{
name|this
operator|.
name|defaultDeadLetterEndpointExpression
operator|=
name|defaultDeadLetterEndpointExpression
expr_stmt|;
block|}
DECL|method|getDefaultDeadLetterEndpointUri ()
specifier|public
name|String
name|getDefaultDeadLetterEndpointUri
parameter_list|()
block|{
return|return
name|defaultDeadLetterEndpointUri
return|;
block|}
comment|/**      * Sets the default dead letter endpoint URI used if no factory is provided via {@link #setDeadLetterFactory(ProcessorFactory)}      * and no expression is provided via {@link #setDefaultDeadLetterEndpointExpression(Expression)}      *      * @param defaultDeadLetterEndpointUri the default URI if no deadletter factory or expression is provided      */
DECL|method|setDefaultDeadLetterEndpointUri (String defaultDeadLetterEndpointUri)
specifier|public
name|void
name|setDefaultDeadLetterEndpointUri
parameter_list|(
name|String
name|defaultDeadLetterEndpointUri
parameter_list|)
block|{
name|this
operator|.
name|defaultDeadLetterEndpointUri
operator|=
name|defaultDeadLetterEndpointUri
expr_stmt|;
block|}
block|}
end_class

end_unit

