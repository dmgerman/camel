begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Camel specific {@link javax.xml.transform.URIResolver} which is capable of loading files  * from the classpath and file system.  *<p/>  * Use prefix<tt>classpath:</tt> or<tt>file:</tt> to denote either classpath or file system.  * If no prefix is provided then the prefix from the<tt>location</tt> parameter is used.  * If it neither has a prefix then<tt>classpath:</tt> is used.  *<p/>  * This implementation<b>cannot</b> load files over http.  *  * @version   */
end_comment

begin_class
DECL|class|XsltUriResolver
specifier|public
class|class
name|XsltUriResolver
implements|implements
name|URIResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XsltUriResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|final
name|ClassResolver
name|resolver
decl_stmt|;
DECL|field|location
specifier|private
specifier|final
name|String
name|location
decl_stmt|;
DECL|field|baseScheme
specifier|private
specifier|final
name|String
name|baseScheme
decl_stmt|;
DECL|method|XsltUriResolver (ClassResolver resolver, String location)
specifier|public
name|XsltUriResolver
parameter_list|(
name|ClassResolver
name|resolver
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
if|if
condition|(
name|ResourceHelper
operator|.
name|hasScheme
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|baseScheme
operator|=
name|ResourceHelper
operator|.
name|getScheme
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// default to use classpath
name|baseScheme
operator|=
literal|"classpath:"
expr_stmt|;
block|}
block|}
DECL|method|resolve (String href, String base)
specifier|public
name|Source
name|resolve
parameter_list|(
name|String
name|href
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|href
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"include href is empty"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Resolving URI with href: {} and base: {}"
argument_list|,
name|href
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|String
name|scheme
init|=
name|ResourceHelper
operator|.
name|getScheme
argument_list|(
name|href
argument_list|)
decl_stmt|;
if|if
condition|(
name|scheme
operator|!=
literal|null
condition|)
block|{
comment|// need to compact paths for file/classpath as it can be relative paths using .. to go backwards
if|if
condition|(
literal|"file:"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
operator|||
literal|"classpath:"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|href
operator|=
name|FileUtil
operator|.
name|compactPath
argument_list|(
name|href
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolving URI from {}: {}"
argument_list|,
name|scheme
argument_list|,
name|href
argument_list|)
expr_stmt|;
name|InputStream
name|is
decl_stmt|;
try|try
block|{
name|is
operator|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|resolver
argument_list|,
name|href
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
return|;
block|}
comment|// if href and location is the same, then its the initial resolve
if|if
condition|(
name|href
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|baseScheme
operator|+
name|href
decl_stmt|;
return|return
name|resolve
argument_list|(
name|path
argument_list|,
name|base
argument_list|)
return|;
block|}
comment|// okay then its relative to the starting location from the XSLT component
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|baseScheme
operator|+
name|href
expr_stmt|;
return|return
name|resolve
argument_list|(
name|path
argument_list|,
name|base
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|ResourceHelper
operator|.
name|hasScheme
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|href
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|baseScheme
operator|+
name|path
operator|+
literal|"/"
operator|+
name|href
expr_stmt|;
block|}
return|return
name|resolve
argument_list|(
name|path
argument_list|,
name|base
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

