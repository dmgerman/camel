begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expressions
import|;
end_import

begin_comment
comment|/**  * A builder of expressions or predicates based on values.  *  * @version $Revision: $  */
end_comment

begin_class
DECL|class|ValueBuilder
specifier|public
class|class
name|ValueBuilder
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
block|{
DECL|field|expression
specifier|private
name|Expression
argument_list|<
name|E
argument_list|>
name|expression
decl_stmt|;
DECL|method|ValueBuilder (Expression<E> expression)
specifier|public
name|ValueBuilder
parameter_list|(
name|Expression
argument_list|<
name|E
argument_list|>
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|isNotEqualTo (Object value)
specifier|public
name|Predicate
argument_list|<
name|E
argument_list|>
name|isNotEqualTo
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Expression
argument_list|<
name|E
argument_list|>
name|right
init|=
name|Expressions
operator|.
name|constantExpression
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Predicates
operator|.
name|isNotEqualTo
argument_list|(
name|expression
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|isEqualTo (Object value)
specifier|public
name|Predicate
argument_list|<
name|E
argument_list|>
name|isEqualTo
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Expression
argument_list|<
name|E
argument_list|>
name|right
init|=
name|Expressions
operator|.
name|constantExpression
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Predicates
operator|.
name|isEqualTo
argument_list|(
name|expression
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|isLessThan (Object value)
specifier|public
name|Predicate
argument_list|<
name|E
argument_list|>
name|isLessThan
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Expression
argument_list|<
name|E
argument_list|>
name|right
init|=
name|Expressions
operator|.
name|constantExpression
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Predicates
operator|.
name|isLessThan
argument_list|(
name|expression
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|isLessThanOrEqualTo (Object value)
specifier|public
name|Predicate
argument_list|<
name|E
argument_list|>
name|isLessThanOrEqualTo
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Expression
argument_list|<
name|E
argument_list|>
name|right
init|=
name|Expressions
operator|.
name|constantExpression
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Predicates
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|expression
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|isGreaterThan (Object value)
specifier|public
name|Predicate
argument_list|<
name|E
argument_list|>
name|isGreaterThan
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Expression
argument_list|<
name|E
argument_list|>
name|right
init|=
name|Expressions
operator|.
name|constantExpression
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Predicates
operator|.
name|isGreaterThan
argument_list|(
name|expression
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|isGreaterThanOrEqualTo (Object value)
specifier|public
name|Predicate
argument_list|<
name|E
argument_list|>
name|isGreaterThanOrEqualTo
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Expression
argument_list|<
name|E
argument_list|>
name|right
init|=
name|Expressions
operator|.
name|constantExpression
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Predicates
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|expression
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|getExpression ()
specifier|public
name|Expression
argument_list|<
name|E
argument_list|>
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
block|}
end_class

end_unit

