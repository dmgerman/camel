begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|LoggingErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Uses the {@link Logger} as an error handler, will log at<tt>ERROR</tt> level by default.  *  * @version  * @deprecated use dead letter channel with a log endpoint  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|LoggingErrorHandlerBuilder
specifier|public
class|class
name|LoggingErrorHandlerBuilder
extends|extends
name|ErrorHandlerBuilderSupport
block|{
DECL|field|log
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|level
specifier|private
name|LoggingLevel
name|level
init|=
name|LoggingLevel
operator|.
name|ERROR
decl_stmt|;
DECL|method|LoggingErrorHandlerBuilder ()
specifier|public
name|LoggingErrorHandlerBuilder
parameter_list|()
block|{     }
DECL|method|LoggingErrorHandlerBuilder (final Logger log)
specifier|public
name|LoggingErrorHandlerBuilder
parameter_list|(
specifier|final
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|LoggingErrorHandlerBuilder (final Logger log, final LoggingLevel level)
specifier|public
name|LoggingErrorHandlerBuilder
parameter_list|(
specifier|final
name|Logger
name|log
parameter_list|,
specifier|final
name|LoggingLevel
name|level
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
DECL|method|supportTransacted ()
specifier|public
name|boolean
name|supportTransacted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|cloneBuilder ()
specifier|public
name|ErrorHandlerBuilder
name|cloneBuilder
parameter_list|()
block|{
name|LoggingErrorHandlerBuilder
name|answer
init|=
operator|new
name|LoggingErrorHandlerBuilder
argument_list|()
decl_stmt|;
name|cloneBuilder
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|cloneBuilder (LoggingErrorHandlerBuilder other)
specifier|protected
name|void
name|cloneBuilder
parameter_list|(
name|LoggingErrorHandlerBuilder
name|other
parameter_list|)
block|{
name|super
operator|.
name|cloneBuilder
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|other
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|other
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|createErrorHandler (final RouteContext routeContext, final Processor processor)
specifier|public
name|Processor
name|createErrorHandler
parameter_list|(
specifier|final
name|RouteContext
name|routeContext
parameter_list|,
specifier|final
name|Processor
name|processor
parameter_list|)
block|{
name|CamelLogger
name|logger
init|=
operator|new
name|CamelLogger
argument_list|(
name|log
argument_list|,
name|level
argument_list|)
decl_stmt|;
comment|// configure policy to use the selected logging level, and only log exhausted
name|RedeliveryPolicy
name|policy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setLogExhausted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRetriesExhaustedLogLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setLogStackTrace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setLogRetryAttempted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRetryAttemptedLogLevel
argument_list|(
name|LoggingLevel
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setLogRetryStackTrace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setLogContinued
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setLogHandled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LoggingErrorHandler
name|handler
init|=
operator|new
name|LoggingErrorHandler
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|processor
argument_list|,
name|logger
argument_list|,
name|policy
argument_list|,
name|getExceptionPolicyStrategy
argument_list|()
argument_list|)
decl_stmt|;
name|configure
argument_list|(
name|routeContext
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
DECL|method|getLevel ()
specifier|public
name|LoggingLevel
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
DECL|method|setLevel (final LoggingLevel level)
specifier|public
name|void
name|setLevel
parameter_list|(
specifier|final
name|LoggingLevel
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
DECL|method|getLog ()
specifier|public
name|Logger
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
DECL|method|setLog (final Logger log)
specifier|public
name|void
name|setLog
parameter_list|(
specifier|final
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
DECL|method|getLogName ()
specifier|public
name|String
name|getLogName
parameter_list|()
block|{
return|return
name|log
operator|!=
literal|null
condition|?
name|log
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|setLogName (String logName)
specifier|public
name|void
name|setLogName
parameter_list|(
name|String
name|logName
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
expr_stmt|;
block|}
DECL|method|level (final LoggingLevel level)
specifier|public
name|LoggingErrorHandlerBuilder
name|level
parameter_list|(
specifier|final
name|LoggingLevel
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|log (final Logger log)
specifier|public
name|LoggingErrorHandlerBuilder
name|log
parameter_list|(
specifier|final
name|Logger
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|logName (final String logName)
specifier|public
name|LoggingErrorHandlerBuilder
name|logName
parameter_list|(
specifier|final
name|String
name|logName
parameter_list|)
block|{
name|setLogName
argument_list|(
name|logName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

