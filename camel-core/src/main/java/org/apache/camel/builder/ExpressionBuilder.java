begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchEndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchLanguageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|bean
operator|.
name|BeanLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|MethodCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|TokenPairExpressionIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|TokenXMLExpressionIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|XMLTokenExpressionIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|GroupIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|OgnlHelper
import|;
end_import

begin_comment
comment|/**  * A helper class for working with<a href="http://camel.apache.org/expression.html">expressions</a>.  *  * @version   */
end_comment

begin_class
DECL|class|ExpressionBuilder
specifier|public
specifier|final
class|class
name|ExpressionBuilder
block|{
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|ExpressionBuilder ()
specifier|private
name|ExpressionBuilder
parameter_list|()
block|{     }
comment|/**      * Returns an expression for the inbound message attachments      *      * @return an expression object which will return the inbound message attachments      */
DECL|method|attachmentsExpression ()
specifier|public
specifier|static
name|Expression
name|attachmentsExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"attachments"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the inbound message attachments      *      * @return an expression object which will return the inbound message attachments      */
DECL|method|attachmentValuesExpression ()
specifier|public
specifier|static
name|Expression
name|attachmentValuesExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"attachments"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the header value with the given name      *<p/>      * Will fallback and look in properties if not found in headers.      *      * @param headerName the name of the header the expression will return      * @return an expression object which will return the header value      */
DECL|method|headerExpression (final String headerName)
specifier|public
specifier|static
name|Expression
name|headerExpression
parameter_list|(
specifier|final
name|String
name|headerName
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|header
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
comment|// fall back on a property
name|header
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"header("
operator|+
name|headerName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the header value with the given name converted to the given type      *<p/>      * Will fallback and look in properties if not found in headers.      *      * @param headerName the name of the header the expression will return      * @param type the type to convert to      * @return an expression object which will return the header value      */
DECL|method|headerExpression (final String headerName, final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|headerExpression
parameter_list|(
specifier|final
name|String
name|headerName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|header
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
comment|// fall back on a property
name|header
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|headerName
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"headerAs("
operator|+
name|headerName
operator|+
literal|", "
operator|+
name|type
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the header value with the given name converted to the given type      *<p/>      * Will fallback and look in properties if not found in headers.      *      * @param headerName the name of the header the expression will return      * @param name the type to convert to as a FQN class name      * @return an expression object which will return the header value      */
DECL|method|headerExpression (final String headerName, final String name)
specifier|public
specifier|static
name|Expression
name|headerExpression
parameter_list|(
specifier|final
name|String
name|headerName
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|header
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
comment|// fall back on a property
name|header
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|headerName
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"headerAs("
operator|+
name|headerName
operator|+
literal|", "
operator|+
name|name
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message header invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the header in a simple OGNL syntax      */
DECL|method|headersOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|headersOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|KeyedOgnlExpressionAdapter
argument_list|(
name|ognl
argument_list|,
literal|"headerOgnl("
operator|+
name|ognl
operator|+
literal|")"
argument_list|,
operator|new
name|KeyedOgnlExpressionAdapter
operator|.
name|KeyedEntityRetrievalStrategy
argument_list|()
block|{
specifier|public
name|Object
name|getKeyedEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns an expression for the inbound message headers      *      * @return an expression object which will return the inbound headers      */
DECL|method|headersExpression ()
specifier|public
specifier|static
name|Expression
name|headersExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"headers"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the out header value with the given name      *<p/>      * Will fallback and look in properties if not found in headers.      *      * @param headerName the name of the header the expression will return      * @return an expression object which will return the header value      */
DECL|method|outHeaderExpression (final String headerName)
specifier|public
specifier|static
name|Expression
name|outHeaderExpression
parameter_list|(
specifier|final
name|String
name|headerName
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|Object
name|header
init|=
name|out
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
comment|// let's try the exchange header
name|header
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outHeader("
operator|+
name|headerName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the outbound message headers      *      * @return an expression object which will return the headers, will be<tt>null</tt> if the      * exchange is not out capable.      */
DECL|method|outHeadersExpression ()
specifier|public
specifier|static
name|Expression
name|outHeadersExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// only get out headers if the MEP is out capable
if|if
condition|(
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outHeaders"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the exchange pattern      *      * @see org.apache.camel.Exchange#getPattern()      * @return an expression object which will return the exchange pattern      */
DECL|method|exchangePatternExpression ()
specifier|public
specifier|static
name|Expression
name|exchangePatternExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getPattern
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangePattern"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for an exception set on the exchange      *      * @see Exchange#getException()      * @return an expression object which will return the exception set on the exchange      */
DECL|method|exchangeExceptionExpression ()
specifier|public
specifier|static
name|Expression
name|exchangeExceptionExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|exception
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeException"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for an exception set on the exchange      *<p/>      * Is used to get the caused exception that typically have been wrapped in some sort      * of Camel wrapper exception      * @param type the exception type      * @see Exchange#getException(Class)      * @return an expression object which will return the exception set on the exchange      */
DECL|method|exchangeExceptionExpression (final Class<Exception> type)
specifier|public
specifier|static
name|Expression
name|exchangeExceptionExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|Exception
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|ObjectHelper
operator|.
name|getException
argument_list|(
name|type
argument_list|,
name|exception
argument_list|)
return|;
block|}
return|return
name|exception
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeException["
operator|+
name|type
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges exception invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the body in a simple OGNL syntax      */
DECL|method|exchangeExceptionOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|exchangeExceptionOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|exception
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeExceptionOgnl("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the type converter      *      * @return an expression object which will return the type converter      */
DECL|method|typeConverterExpression ()
specifier|public
specifier|static
name|Expression
name|typeConverterExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"typeConverter"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the {@link org.apache.camel.spi.Registry}      *      * @return an expression object which will return the registry      */
DECL|method|registryExpression ()
specifier|public
specifier|static
name|Expression
name|registryExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"registry"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for lookup a bean in the {@link org.apache.camel.spi.Registry}      *      * @return an expression object which will return the bean      */
DECL|method|refExpression (final String ref)
specifier|public
specifier|static
name|Expression
name|refExpression
parameter_list|(
specifier|final
name|String
name|ref
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
name|ref
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ref("
operator|+
name|ref
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the {@link org.apache.camel.CamelContext}      *      * @return an expression object which will return the camel context      */
DECL|method|camelContextExpression ()
specifier|public
specifier|static
name|Expression
name|camelContextExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"camelContext"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the {@link org.apache.camel.CamelContext} name      *      * @return an expression object which will return the camel context name      */
DECL|method|camelContextNameExpression ()
specifier|public
specifier|static
name|Expression
name|camelContextNameExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"camelContextName"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for an exception message set on the exchange      *      * @see<tt>Exchange.getException().getMessage()</tt>      * @return an expression object which will return the exception message set on the exchange      */
DECL|method|exchangeExceptionMessageExpression ()
specifier|public
specifier|static
name|Expression
name|exchangeExceptionMessageExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|exception
operator|!=
literal|null
condition|?
name|exception
operator|.
name|getMessage
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeExceptionMessage"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for an exception stacktrace set on the exchange      *      * @return an expression object which will return the exception stacktrace set on the exchange      */
DECL|method|exchangeExceptionStackTraceExpression ()
specifier|public
specifier|static
name|Expression
name|exchangeExceptionStackTraceExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|pw
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeExceptionStackTrace"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the property value of exchange with the given name      *      * @param propertyName the name of the property the expression will return      * @return an expression object which will return the property value      */
DECL|method|propertyExpression (final String propertyName)
specifier|public
specifier|static
name|Expression
name|propertyExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"property("
operator|+
name|propertyName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the property value of exchange with the given name invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the property in a simple OGNL syntax      */
DECL|method|propertyOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|propertyOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|KeyedOgnlExpressionAdapter
argument_list|(
name|ognl
argument_list|,
literal|"propertyOgnl("
operator|+
name|ognl
operator|+
literal|")"
argument_list|,
operator|new
name|KeyedOgnlExpressionAdapter
operator|.
name|KeyedEntityRetrievalStrategy
argument_list|()
block|{
specifier|public
name|Object
name|getKeyedEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns an expression for the properties of exchange      *      * @return an expression object which will return the properties      */
DECL|method|propertiesExpression ()
specifier|public
specifier|static
name|Expression
name|propertiesExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"properties"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the properties of the camel context      *      * @return an expression object which will return the properties      */
DECL|method|camelContextPropertiesExpression ()
specifier|public
specifier|static
name|Expression
name|camelContextPropertiesExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"camelContextProperties"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the property value of the camel context with the given name      *      * @param propertyName the name of the property the expression will return      * @return an expression object which will return the property value      */
DECL|method|camelContextPropertyExpression (final String propertyName)
specifier|public
specifier|static
name|Expression
name|camelContextPropertyExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"camelContextProperty("
operator|+
name|propertyName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for a system property value with the given name      *      * @param propertyName the name of the system property the expression will return      * @return an expression object which will return the system property value      */
DECL|method|systemPropertyExpression (final String propertyName)
specifier|public
specifier|static
name|Expression
name|systemPropertyExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|systemPropertyExpression
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns an expression for a system property value with the given name      *      * @param propertyName the name of the system property the expression will return      * @param defaultValue default value to return if no system property exists      * @return an expression object which will return the system property value      */
DECL|method|systemPropertyExpression (final String propertyName, final String defaultValue)
specifier|public
specifier|static
name|Expression
name|systemPropertyExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"systemProperty("
operator|+
name|propertyName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for a system environment value with the given name      *      * @param propertyName the name of the system environment the expression will return      * @return an expression object which will return the system property value      */
DECL|method|systemEnvironmentExpression (final String propertyName)
specifier|public
specifier|static
name|Expression
name|systemEnvironmentExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|systemEnvironmentExpression
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns an expression for a system environment value with the given name      *      * @param propertyName the name of the system environment the expression will return      * @param defaultValue default value to return if no system environment exists      * @return an expression object which will return the system environment value      */
DECL|method|systemEnvironmentExpression (final String propertyName, final String defaultValue)
specifier|public
specifier|static
name|Expression
name|systemEnvironmentExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|answer
init|=
name|System
operator|.
name|getenv
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"systemEnvironment("
operator|+
name|propertyName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the constant value      *      * @param value the value the expression will return      * @return an expression object which will return the constant value      */
DECL|method|constantExpression (final Object value)
specifier|public
specifier|static
name|Expression
name|constantExpression
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for evaluating the expression/predicate using the given language      *      * @param expression  the expression or predicate      * @return an expression object which will evaluate the expression/predicate using the given language      */
DECL|method|languageExpression (final String language, final String expression)
specifier|public
specifier|static
name|Expression
name|languageExpression
parameter_list|(
specifier|final
name|String
name|language
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Language
name|lan
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|lan
operator|!=
literal|null
condition|)
block|{
return|return
name|lan
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchLanguageException
argument_list|(
name|language
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Language
name|lan
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|lan
operator|!=
literal|null
condition|)
block|{
return|return
name|lan
operator|.
name|createPredicate
argument_list|(
name|expression
argument_list|)
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchLanguageException
argument_list|(
name|language
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"language["
operator|+
name|language
operator|+
literal|":"
operator|+
name|expression
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for a type value      *      * @param name the type name      * @return an expression object which will return the type value      */
DECL|method|typeExpression (final String name)
specifier|public
specifier|static
name|Expression
name|typeExpression
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// it may refer to a class type
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
name|int
name|pos
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|String
name|before
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|name
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|before
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|lookupConstantFieldValue
argument_list|(
name|type
argument_list|,
name|after
argument_list|)
return|;
block|}
block|}
throw|throw
name|ObjectHelper
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Cannot find type "
operator|+
name|name
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"type:"
operator|+
name|name
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression that caches the evaluation of another expression      * and returns the cached value, to avoid re-evaluating the expression.      *      * @param expression  the target expression to cache      * @return the cached value      */
DECL|method|cacheExpression (final Expression expression)
specifier|public
specifier|static
name|Expression
name|cacheExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|cache
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|answer
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|cache
operator|.
name|set
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|expression
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body      */
DECL|method|bodyExpression ()
specifier|public
specifier|static
name|Expression
name|bodyExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"body"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the body in a simple OGNL syntax      */
DECL|method|bodyOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|bodyOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|body
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bodyOgnl("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for invoking a method (support OGNL syntax) on the given expression      *      * @param exp   the expression to evaluate and invoke the method on its result      * @param ognl  methods to invoke on the evaluated expression in a simple OGNL syntax      */
DECL|method|ognlExpression (final Expression exp, final String ognl)
specifier|public
specifier|static
name|Expression
name|ognlExpression
parameter_list|(
specifier|final
name|Expression
name|exp
parameter_list|,
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|value
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ognl("
operator|+
name|exp
operator|+
literal|", "
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges camelContext invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the body in a simple OGNL syntax      */
DECL|method|camelContextOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|camelContextOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|CamelContext
name|context
init|=
name|exchange
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|context
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"camelContextOgnl("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type      */
DECL|method|bodyExpression (final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|bodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bodyAs["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type      */
DECL|method|bodyExpression (final String name)
specifier|public
specifier|static
name|Expression
name|bodyExpression
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bodyAs["
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type      */
DECL|method|mandatoryBodyExpression (final String name)
specifier|public
specifier|static
name|Expression
name|mandatoryBodyExpression
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"mandatoryBodyAs["
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the current thread name      */
DECL|method|threadNameExpression ()
specifier|public
specifier|static
name|Expression
name|threadNameExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"threadName"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the {@code null} value      */
DECL|method|nullExpression ()
specifier|public
specifier|static
name|Expression
name|nullExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"null"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type.      *<p/>      * Does<b>not</b> allow null bodies.      */
DECL|method|mandatoryBodyExpression (final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|mandatoryBodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|mandatoryBodyExpression
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type      *      * @param type the type      * @param nullBodyAllowed whether null bodies is allowed and if so a null is returned,      *                        otherwise an exception is thrown      */
DECL|method|mandatoryBodyExpression (final Class<T> type, final boolean nullBodyAllowed)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|mandatoryBodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|boolean
name|nullBodyAllowed
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|nullBodyAllowed
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if its a bean invocation then if it has no arguments then it should be threaded as null body allowed
name|BeanInvocation
name|bi
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BeanInvocation
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
operator|&&
operator|(
name|bi
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
operator|||
name|bi
operator|.
name|getArgs
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|||
name|bi
operator|.
name|getArgs
argument_list|()
index|[
literal|0
index|]
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
try|try
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"mandatoryBodyAs["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body type      */
DECL|method|bodyTypeExpression ()
specifier|public
specifier|static
name|Expression
name|bodyTypeExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|.
name|getClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bodyType"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the out messages body      */
DECL|method|outBodyExpression ()
specifier|public
specifier|static
name|Expression
name|outBodyExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outBody"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges outbound message body converted      * to the given type      */
DECL|method|outBodyExpression (final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|outBodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outBodyAs["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the fault messages body      */
DECL|method|faultBodyExpression ()
specifier|public
specifier|static
name|Expression
name|faultBodyExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|isFault
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"faultBody"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges fault message body converted      * to the given type      */
DECL|method|faultBodyExpression (final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|faultBodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|isFault
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"faultBodyAs["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchange      */
DECL|method|exchangeExpression ()
specifier|public
specifier|static
name|Expression
name|exchangeExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchange"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the IN message      */
DECL|method|inMessageExpression ()
specifier|public
specifier|static
name|Expression
name|inMessageExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"inMessage"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the OUT message      */
DECL|method|outMessageExpression ()
specifier|public
specifier|static
name|Expression
name|outMessageExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outMessage"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression which converts the given expression to the given type      */
DECL|method|convertToExpression (final Expression expression, final Class<?> type)
specifier|public
specifier|static
name|Expression
name|convertToExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|expression
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|expression
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression which converts the given expression to the given type the type      * expression is evaluated to      */
DECL|method|convertToExpression (final Expression expression, final Expression type)
specifier|public
specifier|static
name|Expression
name|convertToExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|Expression
name|type
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|result
init|=
name|type
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|expression
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|expression
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a tokenize expression which will tokenize the string with the      * given token      */
DECL|method|tokenizeExpression (final Expression expression, final String token)
specifier|public
specifier|static
name|Expression
name|tokenizeExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|token
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|ObjectHelper
operator|.
name|getScanner
argument_list|(
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|useDelimiter
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|scanner
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"tokenize("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|token
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an {@link TokenPairExpressionIterator} expression      */
DECL|method|tokenizePairExpression (String startToken, String endToken, boolean includeTokens)
specifier|public
specifier|static
name|Expression
name|tokenizePairExpression
parameter_list|(
name|String
name|startToken
parameter_list|,
name|String
name|endToken
parameter_list|,
name|boolean
name|includeTokens
parameter_list|)
block|{
return|return
operator|new
name|TokenPairExpressionIterator
argument_list|(
name|startToken
argument_list|,
name|endToken
argument_list|,
name|includeTokens
argument_list|)
return|;
block|}
comment|/**      * Returns an {@link TokenXMLExpressionIterator} expression      */
DECL|method|tokenizeXMLExpression (String tagName, String inheritNamespaceTagName)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLExpression
parameter_list|(
name|String
name|tagName
parameter_list|,
name|String
name|inheritNamespaceTagName
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|tagName
argument_list|,
literal|"tagName"
argument_list|)
expr_stmt|;
comment|// must be XML tokens
if|if
condition|(
operator|!
name|tagName
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|tagName
operator|=
literal|"<"
operator|+
name|tagName
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tagName
operator|.
name|endsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|tagName
operator|=
name|tagName
operator|+
literal|">"
expr_stmt|;
block|}
if|if
condition|(
name|inheritNamespaceTagName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|inheritNamespaceTagName
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|inheritNamespaceTagName
operator|=
literal|"<"
operator|+
name|inheritNamespaceTagName
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inheritNamespaceTagName
operator|.
name|endsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|inheritNamespaceTagName
operator|=
name|inheritNamespaceTagName
operator|+
literal|">"
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TokenXMLExpressionIterator
argument_list|(
name|tagName
argument_list|,
name|inheritNamespaceTagName
argument_list|)
return|;
block|}
DECL|method|tokenizeXMLAwareExpression (String path, char mode)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLAwareExpression
parameter_list|(
name|String
name|path
parameter_list|,
name|char
name|mode
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|path
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
return|return
operator|new
name|XMLTokenExpressionIterator
argument_list|(
name|path
argument_list|,
name|mode
argument_list|)
return|;
block|}
DECL|method|tokenizeXMLAwareExpression (String path, char mode, int group)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLAwareExpression
parameter_list|(
name|String
name|path
parameter_list|,
name|char
name|mode
parameter_list|,
name|int
name|group
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|path
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
return|return
operator|new
name|XMLTokenExpressionIterator
argument_list|(
name|path
argument_list|,
name|mode
argument_list|,
name|group
argument_list|)
return|;
block|}
comment|/**      * Returns a tokenize expression which will tokenize the string with the      * given regex      */
DECL|method|regexTokenizeExpression (final Expression expression, final String regexTokenizer)
specifier|public
specifier|static
name|Expression
name|regexTokenizeExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|regexTokenizer
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regexTokenizer
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|ObjectHelper
operator|.
name|getScanner
argument_list|(
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|useDelimiter
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|scanner
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regexTokenize("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|groupIteratorExpression (final Expression expression, final String token, final int group)
specifier|public
specifier|static
name|Expression
name|groupIteratorExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|int
name|group
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// evaluate expression as iterator
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Iterator
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|it
argument_list|,
literal|"expression: "
operator|+
name|expression
operator|+
literal|" evaluated on "
operator|+
name|exchange
operator|+
literal|" must return an java.util.Iterator"
argument_list|)
expr_stmt|;
return|return
operator|new
name|GroupIterator
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|it
argument_list|,
name|token
argument_list|,
name|group
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"group "
operator|+
name|expression
operator|+
literal|" "
operator|+
name|group
operator|+
literal|" times"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a sort expression which will sort the expression with the given comparator.      *<p/>      * The expression is evaluated as a {@link List} object to allow sorting.      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|sortExpression (final Expression expression, final Comparator comparator)
specifier|public
specifier|static
name|Expression
name|sortExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|Comparator
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"sort("
operator|+
name|expression
operator|+
literal|" by: "
operator|+
name|comparator
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Transforms the expression into a String then performs the regex      * replaceAll to transform the String and return the result      */
DECL|method|regexReplaceAll (final Expression expression, final String regex, final String replacement)
specifier|public
specifier|static
name|Expression
name|regexReplaceAll
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|regex
parameter_list|,
specifier|final
name|String
name|replacement
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|text
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|replacement
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regexReplaceAll("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Transforms the expression into a String then performs the regex      * replaceAll to transform the String and return the result      */
DECL|method|regexReplaceAll (final Expression expression, final String regex, final Expression replacementExpression)
specifier|public
specifier|static
name|Expression
name|regexReplaceAll
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|regex
parameter_list|,
specifier|final
name|Expression
name|replacementExpression
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|text
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|replacement
init|=
name|replacementExpression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|replacement
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|replacement
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regexReplaceAll("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Appends the String evaluations of the two expressions together      */
DECL|method|append (final Expression left, final Expression right)
specifier|public
specifier|static
name|Expression
name|append
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|left
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|+
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"append("
operator|+
name|left
operator|+
literal|", "
operator|+
name|right
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Prepends the String evaluations of the two expressions together      */
DECL|method|prepend (final Expression left, final Expression right)
specifier|public
specifier|static
name|Expression
name|prepend
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|right
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|+
name|left
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"prepend("
operator|+
name|left
operator|+
literal|", "
operator|+
name|right
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression which returns the string concatenation value of the various      * expressions      *      * @param expressions the expression to be concatenated dynamically      * @return an expression which when evaluated will return the concatenated values      */
DECL|method|concatExpression (final Collection<Expression> expressions)
specifier|public
specifier|static
name|Expression
name|concatExpression
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
return|return
name|concatExpression
argument_list|(
name|expressions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns an expression which returns the string concatenation value of the various      * expressions      *      * @param expressions the expression to be concatenated dynamically      * @param expression the text description of the expression      * @return an expression which when evaluated will return the concatenated values      */
DECL|method|concatExpression (final Collection<Expression> expressions, final String expression)
specifier|public
specifier|static
name|Expression
name|concatExpression
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
name|String
name|text
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
return|;
block|}
else|else
block|{
return|return
literal|"concat"
operator|+
name|expressions
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Returns an Expression for the inbound message id      */
DECL|method|messageIdExpression ()
specifier|public
specifier|static
name|Expression
name|messageIdExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"messageId"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an Expression for the exchange id      */
DECL|method|exchangeIdExpression ()
specifier|public
specifier|static
name|Expression
name|exchangeIdExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getExchangeId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeId"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an Expression for the route id      */
DECL|method|routeIdExpression ()
specifier|public
specifier|static
name|Expression
name|routeIdExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
name|UnitOfWork
name|uow
init|=
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
decl_stmt|;
name|RouteContext
name|rc
init|=
name|uow
operator|!=
literal|null
condition|?
name|uow
operator|.
name|getRouteContext
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|rc
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// fallback and get from route id on the exchange
name|answer
operator|=
name|exchange
operator|.
name|getFromRouteId
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"routeId"
return|;
block|}
block|}
return|;
block|}
DECL|method|dateExpression (final String command, final String pattern)
specifier|public
specifier|static
name|Expression
name|dateExpression
parameter_list|(
specifier|final
name|String
name|command
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Date
name|date
decl_stmt|;
if|if
condition|(
literal|"now"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|date
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"header."
argument_list|)
operator|||
name|command
operator|.
name|startsWith
argument_list|(
literal|"in.header."
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|date
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find java.util.Date object at command: "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"out.header."
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|date
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find java.util.Date object at command: "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|Long
name|num
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|!=
literal|null
operator|&&
name|num
operator|>
literal|0
condition|)
block|{
name|date
operator|=
operator|new
name|Date
argument_list|(
name|num
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|date
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find "
operator|+
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
operator|+
literal|" header at command: "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Command not supported for dateExpression: "
operator|+
name|command
argument_list|)
throw|;
block|}
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"date("
operator|+
name|command
operator|+
literal|":"
operator|+
name|pattern
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|simpleExpression (final String expression)
specifier|public
specifier|static
name|Expression
name|simpleExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// resolve language using context to have a clear separation of packages
comment|// must call evaluate to return the nested language evaluate when evaluating
comment|// stacked expressions
name|Language
name|language
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
decl_stmt|;
return|return
name|language
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"simple("
operator|+
name|expression
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|beanExpression (final String expression)
specifier|public
specifier|static
name|Expression
name|beanExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// resolve language using context to have a clear separation of packages
comment|// must call evaluate to return the nested language evaluate when evaluating
comment|// stacked expressions
name|Language
name|language
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"bean"
argument_list|)
decl_stmt|;
return|return
name|language
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bean("
operator|+
name|expression
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|beanExpression (final Class<?> beanType, final String methodName)
specifier|public
specifier|static
name|Expression
name|beanExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|)
block|{
return|return
name|BeanLanguage
operator|.
name|bean
argument_list|(
name|beanType
argument_list|,
name|methodName
argument_list|)
return|;
block|}
DECL|method|beanExpression (final Object bean, final String methodName)
specifier|public
specifier|static
name|Expression
name|beanExpression
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|)
block|{
return|return
name|BeanLanguage
operator|.
name|bean
argument_list|(
name|bean
argument_list|,
name|methodName
argument_list|)
return|;
block|}
DECL|method|beanExpression (final String beanRef, final String methodName)
specifier|public
specifier|static
name|Expression
name|beanExpression
parameter_list|(
specifier|final
name|String
name|beanRef
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|)
block|{
name|String
name|expression
init|=
name|methodName
operator|!=
literal|null
condition|?
name|beanRef
operator|+
literal|"."
operator|+
name|methodName
else|:
name|beanRef
decl_stmt|;
return|return
name|beanExpression
argument_list|(
name|expression
argument_list|)
return|;
block|}
comment|/**      * Returns an expression processing the exchange to the given endpoint uri      *      * @param uri endpoint uri to send the exchange to      * @return an expression object which will return the OUT body      */
DECL|method|toExpression (final String uri)
specifier|public
specifier|static
name|Expression
name|toExpression
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchEndpointException
argument_list|(
name|uri
argument_list|)
throw|;
block|}
name|Producer
name|producer
decl_stmt|;
try|try
block|{
name|producer
operator|=
name|endpoint
operator|.
name|createProducer
argument_list|()
expr_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|producer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// return the OUT body, but check for exchange pattern
if|if
condition|(
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"to("
operator|+
name|uri
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileNameExpression ()
specifier|public
specifier|static
name|Expression
name|fileNameExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:name"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileOnlyNameExpression ()
specifier|public
specifier|static
name|Expression
name|fileOnlyNameExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|answer
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME_ONLY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|answer
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:onlyname"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileNameNoExtensionExpression ()
specifier|public
specifier|static
name|Expression
name|fileNameNoExtensionExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|stripExt
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:name.noext"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileOnlyNameNoExtensionExpression ()
specifier|public
specifier|static
name|Expression
name|fileOnlyNameNoExtensionExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|fileOnlyNameExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|stripExt
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:onlyname.noext"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileExtensionExpression ()
specifier|public
specifier|static
name|Expression
name|fileExtensionExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:ext"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileParentExpression ()
specifier|public
specifier|static
name|Expression
name|fileParentExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFileParent"
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:parent"
return|;
block|}
block|}
return|;
block|}
DECL|method|filePathExpression ()
specifier|public
specifier|static
name|Expression
name|filePathExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFilePath"
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:path"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileAbsolutePathExpression ()
specifier|public
specifier|static
name|Expression
name|fileAbsolutePathExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFileAbsolutePath"
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:absolute.path"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileAbsoluteExpression ()
specifier|public
specifier|static
name|Expression
name|fileAbsoluteExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFileAbsolute"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:absolute"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileSizeExpression ()
specifier|public
specifier|static
name|Expression
name|fileSizeExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LENGTH
argument_list|,
name|Long
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:length"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileLastModifiedExpression ()
specifier|public
specifier|static
name|Expression
name|fileLastModifiedExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Long
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:modified"
return|;
block|}
block|}
return|;
block|}
DECL|method|propertiesComponentExpression (final String key, final String locations)
specifier|public
specifier|static
name|Expression
name|propertiesComponentExpression
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|locations
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
comment|// the properties component is optional as we got locations
comment|// getComponent will create a new component if none already exists
name|Component
name|component
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|PropertiesComponent
name|pc
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|PropertiesComponent
operator|.
name|class
argument_list|,
name|component
argument_list|)
decl_stmt|;
comment|// enclose key with {{ }} to force parsing
name|String
index|[]
name|paths
init|=
name|locations
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
return|return
name|pc
operator|.
name|parseUri
argument_list|(
name|pc
operator|.
name|getPrefixToken
argument_list|()
operator|+
name|key
operator|+
name|pc
operator|.
name|getSuffixToken
argument_list|()
argument_list|,
name|paths
argument_list|)
return|;
block|}
else|else
block|{
comment|// the properties component is mandatory if no locations provided
name|Component
name|component
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|hasComponent
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PropertiesComponent with name properties must be defined"
operator|+
literal|" in CamelContext to support property placeholders in expressions"
argument_list|)
throw|;
block|}
name|PropertiesComponent
name|pc
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|PropertiesComponent
operator|.
name|class
argument_list|,
name|component
argument_list|)
decl_stmt|;
comment|// enclose key with {{ }} to force parsing
return|return
name|pc
operator|.
name|parseUri
argument_list|(
name|pc
operator|.
name|getPrefixToken
argument_list|()
operator|+
name|key
operator|+
name|pc
operator|.
name|getSuffixToken
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"properties("
operator|+
name|key
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Expression adapter for OGNL expression from Message Header or Exchange property      */
DECL|class|KeyedOgnlExpressionAdapter
specifier|private
specifier|static
class|class
name|KeyedOgnlExpressionAdapter
extends|extends
name|ExpressionAdapter
block|{
DECL|field|ognl
specifier|private
specifier|final
name|String
name|ognl
decl_stmt|;
DECL|field|toStringValue
specifier|private
specifier|final
name|String
name|toStringValue
decl_stmt|;
DECL|field|keyedEntityRetrievalStrategy
specifier|private
specifier|final
name|KeyedEntityRetrievalStrategy
name|keyedEntityRetrievalStrategy
decl_stmt|;
DECL|method|KeyedOgnlExpressionAdapter (String ognl, String toStringValue, KeyedEntityRetrievalStrategy keyedEntityRetrievalStrategy)
specifier|public
name|KeyedOgnlExpressionAdapter
parameter_list|(
name|String
name|ognl
parameter_list|,
name|String
name|toStringValue
parameter_list|,
name|KeyedEntityRetrievalStrategy
name|keyedEntityRetrievalStrategy
parameter_list|)
block|{
name|this
operator|.
name|ognl
operator|=
name|ognl
expr_stmt|;
name|this
operator|.
name|toStringValue
operator|=
name|toStringValue
expr_stmt|;
name|this
operator|.
name|keyedEntityRetrievalStrategy
operator|=
name|keyedEntityRetrievalStrategy
expr_stmt|;
block|}
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// try with full name first
name|Object
name|property
init|=
name|keyedEntityRetrievalStrategy
operator|.
name|getKeyedEntity
argument_list|(
name|exchange
argument_list|,
name|ognl
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
return|;
block|}
comment|// Split ognl except when this is not a Map, Array
comment|// and we would like to keep the dots within the key name
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|OgnlHelper
operator|.
name|splitOgnl
argument_list|(
name|ognl
argument_list|)
decl_stmt|;
comment|// remove any OGNL operators so we got the pure key name
name|String
name|key
init|=
name|OgnlHelper
operator|.
name|removeOperators
argument_list|(
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|property
operator|=
name|keyedEntityRetrievalStrategy
operator|.
name|getKeyedEntity
argument_list|(
name|exchange
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// the remainder is the rest of the ognl without the key
name|String
name|remainder
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|ognl
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|property
argument_list|,
name|remainder
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toStringValue
return|;
block|}
comment|/**          * Strategy to retrieve the value based on the key          */
DECL|interface|KeyedEntityRetrievalStrategy
specifier|public
interface|interface
name|KeyedEntityRetrievalStrategy
block|{
DECL|method|getKeyedEntity (Exchange exchange, String key)
name|Object
name|getKeyedEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|key
parameter_list|)
function_decl|;
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

