begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|bean
operator|.
name|BeanLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DeadLetterChannel
import|;
end_import

begin_comment
comment|/**  * A helper class for working with<a href="http://activemq.apache.org/camel/expression.html">expressions</a>.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|ExpressionBuilder
specifier|public
specifier|final
class|class
name|ExpressionBuilder
block|{
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|ExpressionBuilder ()
specifier|private
name|ExpressionBuilder
parameter_list|()
block|{     }
comment|/**      * Returns an expression for the header value with the given name      *      * @param headerName the name of the header the expression will return      * @return an expression object which will return the header value      */
DECL|method|headerExpression (final String headerName)
specifier|public
specifier|static
name|Expression
name|headerExpression
parameter_list|(
specifier|final
name|String
name|headerName
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|header
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
comment|// lets try the exchange header
name|header
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"header("
operator|+
name|headerName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the inbound message headers      *      * @see Message#getHeaders()      * @return an expression object which will return the inbound headers      */
DECL|method|headersExpression ()
specifier|public
specifier|static
name|Expression
name|headersExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"headers"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the out header value with the given name      *      * @param headerName the name of the header the expression will return      * @return an expression object which will return the header value      */
DECL|method|outHeaderExpression (final String headerName)
specifier|public
specifier|static
name|Expression
name|outHeaderExpression
parameter_list|(
specifier|final
name|String
name|headerName
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|header
init|=
name|out
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
comment|// lets try the exchange header
name|header
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outHeader("
operator|+
name|headerName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the outbound message headers      *      * @see Message#getHeaders()      * @return an expression object which will return the inbound headers      */
DECL|method|outHeadersExpression ()
specifier|public
specifier|static
name|Expression
name|outHeadersExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outHeaders"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for an exception set on the exchange      *      * @see Exchange#getException()      * @return an expression object which will return the exception set on the exchange      */
DECL|method|exchangeExceptionExpression ()
specifier|public
specifier|static
name|Expression
name|exchangeExceptionExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Throwable
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|DeadLetterChannel
operator|.
name|EXCEPTION_CAUSE_PROPERTY
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|exception
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeException"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the property value with the given name      *      * @see Exchange#getProperty(String)      * @param propertyName the name of the property the expression will return      * @return an expression object which will return the property value      */
DECL|method|propertyExpression (final String propertyName)
specifier|public
specifier|static
name|Expression
name|propertyExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"property("
operator|+
name|propertyName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the property value with the given name      *      * @see Exchange#getProperties()      * @return an expression object which will return the properties      */
DECL|method|propertiesExpression ()
specifier|public
specifier|static
name|Expression
name|propertiesExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"properties"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for a system property value with the given name      *      * @param propertyName the name of the system property the expression will      *                return      * @return an expression object which will return the system property value      */
DECL|method|systemPropertyExpression (final String propertyName)
specifier|public
specifier|static
name|Expression
name|systemPropertyExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|systemPropertyExpression
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns an expression for a system property value with the given name      *      * @param propertyName the name of the system property the expression will      *                return      * @return an expression object which will return the system property value      */
DECL|method|systemPropertyExpression (final String propertyName, final String defaultValue)
specifier|public
specifier|static
name|Expression
name|systemPropertyExpression
parameter_list|(
specifier|final
name|String
name|propertyName
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"systemProperty("
operator|+
name|propertyName
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the constant value      *      * @param value the value the expression will return      * @return an expression object which will return the constant value      */
DECL|method|constantExpression (final Object value)
specifier|public
specifier|static
name|Expression
name|constantExpression
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body      */
DECL|method|bodyExpression ()
specifier|public
specifier|static
name|Expression
name|bodyExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"body"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type      */
DECL|method|bodyExpression (final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|bodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bodyAs["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the out messages body      */
DECL|method|outBodyExpression ()
specifier|public
specifier|static
name|Expression
name|outBodyExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|out
operator|.
name|getBody
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outBody"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges outbound message body converted      * to the given type      */
DECL|method|outBodyExpression (final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|outBodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|out
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outBodyAs["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the fault messages body      */
DECL|method|faultBodyExpression ()
specifier|public
specifier|static
name|Expression
name|faultBodyExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getFault
argument_list|()
operator|.
name|getBody
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"faultBody"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges fault message body converted      * to the given type      */
DECL|method|faultBodyExpression (final Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Expression
name|faultBodyExpression
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getFault
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"faultBodyAs["
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchange      */
DECL|method|exchangeExpression ()
specifier|public
specifier|static
name|Expression
name|exchangeExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchange"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the IN message      */
DECL|method|inMessageExpression ()
specifier|public
specifier|static
name|Expression
name|inMessageExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"inMessage"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the OUT message      */
DECL|method|outMessageExpression ()
specifier|public
specifier|static
name|Expression
name|outMessageExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"outMessage"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression which converts the given expression to the given      * type      */
DECL|method|convertTo (final Expression expression, final Class type)
specifier|public
specifier|static
name|Expression
name|convertTo
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|Class
name|type
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|expression
operator|+
literal|".convertTo("
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|".class)"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a tokenize expression which will tokenize the string with the      * given token      */
DECL|method|tokenizeExpression (final Expression expression, final String token)
specifier|public
specifier|static
name|Expression
name|tokenizeExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|token
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|getScanner
argument_list|(
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|useDelimiter
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|scanner
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"tokenize("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|token
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a tokenize expression which will tokenize the string with the      * given regex      */
DECL|method|regexTokenize (final Expression expression, final String regexTokenizer)
specifier|public
specifier|static
name|Expression
name|regexTokenize
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|regexTokenizer
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regexTokenizer
argument_list|)
decl_stmt|;
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|getScanner
argument_list|(
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|useDelimiter
argument_list|(
name|regexTokenizer
argument_list|)
expr_stmt|;
return|return
name|scanner
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regexTokenize("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|getScanner (Exchange exchange, Object value)
specifier|private
specifier|static
name|Scanner
name|getScanner
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|String
name|charset
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Readable
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
operator|(
name|Readable
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|InputStream
condition|)
block|{
name|scanner
operator|=
name|charset
operator|==
literal|null
condition|?
operator|new
name|Scanner
argument_list|(
operator|(
name|InputStream
operator|)
name|value
argument_list|)
else|:
operator|new
name|Scanner
argument_list|(
operator|(
name|InputStream
operator|)
name|value
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|File
condition|)
block|{
try|try
block|{
name|scanner
operator|=
name|charset
operator|==
literal|null
condition|?
operator|new
name|Scanner
argument_list|(
operator|(
name|File
operator|)
name|value
argument_list|)
else|:
operator|new
name|Scanner
argument_list|(
operator|(
name|File
operator|)
name|value
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ReadableByteChannel
condition|)
block|{
name|scanner
operator|=
name|charset
operator|==
literal|null
condition|?
operator|new
name|Scanner
argument_list|(
operator|(
name|ReadableByteChannel
operator|)
name|value
argument_list|)
else|:
operator|new
name|Scanner
argument_list|(
operator|(
name|ReadableByteChannel
operator|)
name|value
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
comment|// value is not a suitable type, try to convert value to a string
name|String
name|text
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|scanner
operator|=
operator|new
name|Scanner
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|scanner
return|;
block|}
comment|/**      * Transforms the expression into a String then performs the regex      * replaceAll to transform the String and return the result      */
DECL|method|regexReplaceAll (final Expression expression, final String regex, final String replacement)
specifier|public
specifier|static
name|Expression
name|regexReplaceAll
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|String
name|regex
parameter_list|,
specifier|final
name|String
name|replacement
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|text
init|=
name|evaluateStringExpression
argument_list|(
name|expression
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|replacement
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regexReplaceAll("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Transforms the expression into a String then performs the regex      * replaceAll to transform the String and return the result      */
DECL|method|regexReplaceAll (final Expression expression, String regex, final Expression replacementExpression)
specifier|public
specifier|static
name|Expression
name|regexReplaceAll
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
name|String
name|regex
parameter_list|,
specifier|final
name|Expression
name|replacementExpression
parameter_list|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|text
init|=
name|evaluateStringExpression
argument_list|(
name|expression
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|String
name|replacement
init|=
name|evaluateStringExpression
argument_list|(
name|replacementExpression
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|replacement
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|replacement
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regexReplaceAll("
operator|+
name|expression
operator|+
literal|", "
operator|+
name|pattern
operator|.
name|pattern
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Appends the String evaluations of the two expressions together      */
DECL|method|append (final Expression left, final Expression right)
specifier|public
specifier|static
name|Expression
name|append
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|evaluateStringExpression
argument_list|(
name|left
argument_list|,
name|exchange
argument_list|)
operator|+
name|evaluateStringExpression
argument_list|(
name|right
argument_list|,
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"append("
operator|+
name|left
operator|+
literal|", "
operator|+
name|right
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Evaluates the expression on the given exchange and returns the String      * representation      *      * @param expression the expression to evaluate      * @param exchange the exchange to use to evaluate the expression      * @return the String representation of the expression or null if it could      *         not be evaluated      */
DECL|method|evaluateStringExpression (Expression expression, Exchange exchange)
specifier|public
specifier|static
name|String
name|evaluateStringExpression
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Returns an expression for the given system property      */
DECL|method|systemProperty (final String name)
specifier|public
specifier|static
name|Expression
name|systemProperty
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|systemProperty
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns an expression for the given system property      */
DECL|method|systemProperty (final String name, final String defaultValue)
specifier|public
specifier|static
name|Expression
name|systemProperty
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression which returns the string concatenation value of the various      * expressions      *      * @param expressions the expression to be concatenated dynamically      * @return an expression which when evaluated will return the concatenated values      */
DECL|method|concatExpression (final Collection<Expression> expressions)
specifier|public
specifier|static
name|Expression
name|concatExpression
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
return|return
name|concatExpression
argument_list|(
name|expressions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns an expression which returns the string concatenation value of the various      * expressions      *      * @param expressions the expression to be concatenated dynamically      * @param expression the text description of the expression      * @return an expression which when evaluated will return the concatenated values      */
DECL|method|concatExpression (final Collection<Expression> expressions, final String expression)
specifier|public
specifier|static
name|Expression
name|concatExpression
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
name|String
name|text
init|=
name|evaluateStringExpression
argument_list|(
name|expression
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
return|;
block|}
else|else
block|{
return|return
literal|"concat"
operator|+
name|expressions
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Returns an Expression for the inbound message id      */
DECL|method|messageIdExpression ()
specifier|public
specifier|static
name|Expression
name|messageIdExpression
parameter_list|()
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"messageId"
return|;
block|}
block|}
return|;
block|}
DECL|method|dateExpression (final String command, final String pattern)
specifier|public
specifier|static
name|Expression
name|dateExpression
parameter_list|(
specifier|final
name|String
name|command
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Date
name|date
decl_stmt|;
if|if
condition|(
literal|"now"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|date
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"header."
argument_list|)
operator|||
name|command
operator|.
name|startsWith
argument_list|(
literal|"in.header."
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|date
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find java.util.Date object at "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"out.header."
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|date
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find java.util.Date object at "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Command not supported for dateExpression: "
operator|+
name|command
argument_list|)
throw|;
block|}
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"date("
operator|+
name|command
operator|+
literal|":"
operator|+
name|pattern
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|simpleExpression (final String simple)
specifier|public
specifier|static
name|Expression
name|simpleExpression
parameter_list|(
specifier|final
name|String
name|simple
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// must call evalute to return the nested langauge evaluate when evaluating
comment|// stacked expressions
return|return
name|SimpleLanguage
operator|.
name|simple
argument_list|(
name|simple
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"simple("
operator|+
name|simple
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|beanExpression (final String bean)
specifier|public
specifier|static
name|Expression
name|beanExpression
parameter_list|(
specifier|final
name|String
name|bean
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// must call evalute to return the nested langauge evaluate when evaluating
comment|// stacked expressions
return|return
name|BeanLanguage
operator|.
name|bean
argument_list|(
name|bean
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bean("
operator|+
name|bean
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

