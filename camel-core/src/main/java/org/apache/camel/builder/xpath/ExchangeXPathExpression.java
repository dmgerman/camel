begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.xpath
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xpath
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_comment
comment|/**  * An {@link Expression} which uses XPath to perform the evaluation  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|ExchangeXPathExpression
specifier|public
class|class
name|ExchangeXPathExpression
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|Expression
argument_list|<
name|E
argument_list|>
implements|,
name|Predicate
argument_list|<
name|E
argument_list|>
block|{
DECL|field|expression
specifier|private
specifier|final
name|XPathExpression
name|expression
decl_stmt|;
DECL|field|variableResolver
specifier|private
specifier|final
name|MessageVariableResolver
name|variableResolver
decl_stmt|;
DECL|field|documentType
specifier|private
name|Class
name|documentType
decl_stmt|;
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|resultType
specifier|private
name|QName
name|resultType
decl_stmt|;
DECL|method|ExchangeXPathExpression (XPathBuilder builder, XPathExpression expression, MessageVariableResolver variableResolver)
specifier|public
name|ExchangeXPathExpression
parameter_list|(
name|XPathBuilder
name|builder
parameter_list|,
name|XPathExpression
name|expression
parameter_list|,
name|MessageVariableResolver
name|variableResolver
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|variableResolver
operator|=
name|variableResolver
expr_stmt|;
name|this
operator|.
name|documentType
operator|=
name|builder
operator|.
name|getDocumentType
argument_list|()
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|builder
operator|.
name|getText
argument_list|()
expr_stmt|;
name|this
operator|.
name|resultType
operator|=
name|builder
operator|.
name|getResultType
argument_list|()
expr_stmt|;
block|}
DECL|method|matches (E exchange)
specifier|public
name|boolean
name|matches
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|toBoolean
argument_list|(
name|evaluateAs
argument_list|(
name|exchange
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
return|;
block|}
DECL|method|evaluate (E exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
return|return
name|evaluateAs
argument_list|(
name|exchange
argument_list|,
name|resultType
argument_list|)
return|;
block|}
DECL|method|getDocumentType ()
specifier|public
name|Class
name|getDocumentType
parameter_list|()
block|{
return|return
name|documentType
return|;
block|}
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
DECL|method|getVariableResolver ()
specifier|public
name|MessageVariableResolver
name|getVariableResolver
parameter_list|()
block|{
return|return
name|variableResolver
return|;
block|}
comment|/**      * Evaluates the expression as the given result type      */
DECL|method|evaluateAs (E exchange, QName resultType)
specifier|protected
specifier|synchronized
name|Object
name|evaluateAs
parameter_list|(
name|E
name|exchange
parameter_list|,
name|QName
name|resultType
parameter_list|)
block|{
name|variableResolver
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|document
init|=
name|getDocument
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|document
operator|instanceof
name|InputSource
condition|)
block|{
name|InputSource
name|inputSource
init|=
operator|(
name|InputSource
operator|)
name|document
decl_stmt|;
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|inputSource
argument_list|,
name|resultType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|document
argument_list|,
name|resultType
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|document
operator|instanceof
name|InputSource
condition|)
block|{
name|InputSource
name|inputSource
init|=
operator|(
name|InputSource
operator|)
name|document
decl_stmt|;
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|inputSource
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|document
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidXPathExpression
argument_list|(
name|getText
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Strategy method to extract the document from the exchange      */
DECL|method|getDocument (E exchange)
specifier|protected
name|Object
name|getDocument
parameter_list|(
name|E
name|exchange
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Class
name|type
init|=
name|getDocumentType
argument_list|()
decl_stmt|;
name|Object
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|in
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|in
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
comment|// lets try coerce some common types into something JAXP can deal with
if|if
condition|(
name|answer
operator|instanceof
name|String
condition|)
block|{
name|answer
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|answer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

