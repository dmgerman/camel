begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|InterceptorProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 519943 $  */
end_comment

begin_class
DECL|class|InterceptorBuilder
specifier|public
class|class
name|InterceptorBuilder
parameter_list|<
name|E
extends|extends
name|Exchange
parameter_list|>
implements|implements
name|ProcessorBuilder
argument_list|<
name|E
argument_list|>
block|{
DECL|field|intercepts
specifier|private
specifier|final
name|List
argument_list|<
name|InterceptorProcessor
argument_list|<
name|E
argument_list|>
argument_list|>
name|intercepts
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptorProcessor
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|parent
specifier|private
specifier|final
name|DestinationBuilder
argument_list|<
name|E
argument_list|>
name|parent
decl_stmt|;
DECL|field|target
specifier|private
name|DestinationBuilder
argument_list|<
name|E
argument_list|>
name|target
decl_stmt|;
DECL|method|InterceptorBuilder (DestinationBuilder<E> parent)
specifier|public
name|InterceptorBuilder
parameter_list|(
name|DestinationBuilder
argument_list|<
name|E
argument_list|>
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|add (InterceptorProcessor<E> intercept)
specifier|public
name|InterceptorBuilder
argument_list|<
name|E
argument_list|>
name|add
parameter_list|(
name|InterceptorProcessor
argument_list|<
name|E
argument_list|>
name|intercept
parameter_list|)
block|{
name|intercepts
operator|.
name|add
argument_list|(
name|intercept
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|target ()
specifier|public
name|DestinationBuilder
argument_list|<
name|E
argument_list|>
name|target
parameter_list|()
block|{
name|this
operator|.
name|target
operator|=
operator|new
name|DestinationBuilder
argument_list|<
name|E
argument_list|>
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|target
return|;
block|}
DECL|method|createProcessor ()
specifier|public
name|Processor
argument_list|<
name|E
argument_list|>
name|createProcessor
parameter_list|()
block|{
comment|// The target is required.
if|if
condition|(
name|target
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"target provided."
argument_list|)
throw|;
comment|// Interceptors are optional
name|InterceptorProcessor
argument_list|<
name|E
argument_list|>
name|first
init|=
literal|null
decl_stmt|;
name|InterceptorProcessor
argument_list|<
name|E
argument_list|>
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|InterceptorProcessor
argument_list|<
name|E
argument_list|>
name|p
range|:
name|intercepts
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|p
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setNext
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|p
expr_stmt|;
block|}
name|Processor
argument_list|<
name|E
argument_list|>
name|p
init|=
name|target
operator|.
name|createProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setNext
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|first
operator|==
literal|null
condition|?
name|p
else|:
name|first
return|;
block|}
block|}
end_class

end_unit

