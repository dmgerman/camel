begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ExceptionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|ErrorHandlerSupport
import|;
end_import

begin_comment
comment|/**  * Base class for builders of error handling.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|ErrorHandlerBuilderSupport
specifier|public
specifier|abstract
class|class
name|ErrorHandlerBuilderSupport
implements|implements
name|ErrorHandlerBuilder
block|{
DECL|field|exceptions
specifier|private
name|List
argument_list|<
name|ExceptionType
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|ExceptionType
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addErrorHandlers (ExceptionType exception)
specifier|public
name|void
name|addErrorHandlers
parameter_list|(
name|ExceptionType
name|exception
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
DECL|method|configure (ErrorHandlerSupport handler)
specifier|protected
name|void
name|configure
parameter_list|(
name|ErrorHandlerSupport
name|handler
parameter_list|)
block|{
for|for
control|(
name|ExceptionType
name|exception
range|:
name|exceptions
control|)
block|{
name|handler
operator|.
name|addExceptionPolicy
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExceptions ()
specifier|public
name|List
argument_list|<
name|ExceptionType
argument_list|>
name|getExceptions
parameter_list|()
block|{
return|return
name|exceptions
return|;
block|}
DECL|method|setErrorHandlers (List<ExceptionType> exceptions)
specifier|public
name|void
name|setErrorHandlers
parameter_list|(
name|List
argument_list|<
name|ExceptionType
argument_list|>
name|exceptions
parameter_list|)
block|{
name|this
operator|.
name|exceptions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|exceptions
operator|.
name|addAll
argument_list|(
name|exceptions
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

