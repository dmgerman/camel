begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link AdviceWithTask} tasks which are used by the {@link AdviceWithRouteBuilder}.  */
end_comment

begin_class
DECL|class|AdviceWithTasks
specifier|public
specifier|final
class|class
name|AdviceWithTasks
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AdviceWithTasks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AdviceWithTasks ()
specifier|private
name|AdviceWithTasks
parameter_list|()
block|{
comment|// utility class
block|}
comment|/**      * Match by is used for pluggable match by logic.      */
DECL|interface|MatchBy
specifier|private
interface|interface
name|MatchBy
block|{
DECL|method|getId ()
name|String
name|getId
parameter_list|()
function_decl|;
DECL|method|match (ProcessorDefinition processor)
name|boolean
name|match
parameter_list|(
name|ProcessorDefinition
name|processor
parameter_list|)
function_decl|;
block|}
comment|/**      * Will match by id of the processor.      */
DECL|class|MatchById
specifier|private
specifier|static
specifier|final
class|class
name|MatchById
implements|implements
name|MatchBy
block|{
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|MatchById (String id)
specifier|private
name|MatchById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|match (ProcessorDefinition processor)
specifier|public
name|boolean
name|match
parameter_list|(
name|ProcessorDefinition
name|processor
parameter_list|)
block|{
return|return
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|processor
operator|.
name|getId
argument_list|()
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
comment|/**      * Will match by the to string representation of the processor.      */
DECL|class|MatchByToString
specifier|private
specifier|static
specifier|final
class|class
name|MatchByToString
implements|implements
name|MatchBy
block|{
DECL|field|toString
specifier|private
specifier|final
name|String
name|toString
decl_stmt|;
DECL|method|MatchByToString (String toString)
specifier|private
name|MatchByToString
parameter_list|(
name|String
name|toString
parameter_list|)
block|{
name|this
operator|.
name|toString
operator|=
name|toString
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|toString
return|;
block|}
DECL|method|match (ProcessorDefinition processor)
specifier|public
name|boolean
name|match
parameter_list|(
name|ProcessorDefinition
name|processor
parameter_list|)
block|{
return|return
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|processor
operator|.
name|toString
argument_list|()
argument_list|,
name|toString
argument_list|)
return|;
block|}
block|}
DECL|method|replaceByToString (final RouteDefinition route, final String toString, final ProcessorDefinition replace)
specifier|public
specifier|static
name|AdviceWithTask
name|replaceByToString
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|toString
parameter_list|,
specifier|final
name|ProcessorDefinition
name|replace
parameter_list|)
block|{
return|return
name|doReplace
argument_list|(
name|route
argument_list|,
operator|new
name|MatchByToString
argument_list|(
name|toString
argument_list|)
argument_list|,
name|replace
argument_list|)
return|;
block|}
DECL|method|replaceById (final RouteDefinition route, final String id, final ProcessorDefinition replace)
specifier|public
specifier|static
name|AdviceWithTask
name|replaceById
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|ProcessorDefinition
name|replace
parameter_list|)
block|{
return|return
name|doReplace
argument_list|(
name|route
argument_list|,
operator|new
name|MatchById
argument_list|(
name|id
argument_list|)
argument_list|,
name|replace
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doReplace (final RouteDefinition route, final MatchBy matchBy, final ProcessorDefinition replace)
specifier|private
specifier|static
name|AdviceWithTask
name|doReplace
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|MatchBy
name|matchBy
parameter_list|,
specifier|final
name|ProcessorDefinition
name|replace
parameter_list|)
block|{
return|return
operator|new
name|AdviceWithTask
argument_list|()
block|{
specifier|public
name|void
name|task
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|ProcessorDefinition
argument_list|>
name|it
init|=
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ProcessorDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcessorDefinition
name|output
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchBy
operator|.
name|match
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|ProcessorDefinition
name|parent
init|=
name|output
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|indexOf
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|replace
argument_list|)
expr_stmt|;
name|Object
name|old
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AdviceWith ("
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|") : ["
operator|+
name|old
operator|+
literal|"] --> replace ["
operator|+
name|replace
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are no outputs which matches: "
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|" in the route: "
operator|+
name|route
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|removeByToString (final RouteDefinition route, final String toString)
specifier|public
specifier|static
name|AdviceWithTask
name|removeByToString
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|toString
parameter_list|)
block|{
return|return
name|doRemove
argument_list|(
name|route
argument_list|,
operator|new
name|MatchByToString
argument_list|(
name|toString
argument_list|)
argument_list|)
return|;
block|}
DECL|method|removeById (final RouteDefinition route, final String id)
specifier|public
specifier|static
name|AdviceWithTask
name|removeById
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
return|return
name|doRemove
argument_list|(
name|route
argument_list|,
operator|new
name|MatchById
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|method|doRemove (final RouteDefinition route, final MatchBy matchBy)
specifier|private
specifier|static
name|AdviceWithTask
name|doRemove
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|MatchBy
name|matchBy
parameter_list|)
block|{
return|return
operator|new
name|AdviceWithTask
argument_list|()
block|{
specifier|public
name|void
name|task
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|ProcessorDefinition
argument_list|>
name|it
init|=
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ProcessorDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcessorDefinition
name|output
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchBy
operator|.
name|match
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|ProcessorDefinition
name|parent
init|=
name|output
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|indexOf
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|Object
name|old
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AdviceWith ("
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|") : ["
operator|+
name|old
operator|+
literal|"] --> remove"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are no outputs which matches: "
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|" in the route: "
operator|+
name|route
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|beforeByToString (final RouteDefinition route, final String toString, final ProcessorDefinition before)
specifier|public
specifier|static
name|AdviceWithTask
name|beforeByToString
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|toString
parameter_list|,
specifier|final
name|ProcessorDefinition
name|before
parameter_list|)
block|{
return|return
name|doBefore
argument_list|(
name|route
argument_list|,
operator|new
name|MatchByToString
argument_list|(
name|toString
argument_list|)
argument_list|,
name|before
argument_list|)
return|;
block|}
DECL|method|beforeById (final RouteDefinition route, final String id, final ProcessorDefinition before)
specifier|public
specifier|static
name|AdviceWithTask
name|beforeById
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|ProcessorDefinition
name|before
parameter_list|)
block|{
return|return
name|doBefore
argument_list|(
name|route
argument_list|,
operator|new
name|MatchById
argument_list|(
name|id
argument_list|)
argument_list|,
name|before
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doBefore (final RouteDefinition route, final MatchBy matchBy, final ProcessorDefinition before)
specifier|private
specifier|static
name|AdviceWithTask
name|doBefore
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|MatchBy
name|matchBy
parameter_list|,
specifier|final
name|ProcessorDefinition
name|before
parameter_list|)
block|{
return|return
operator|new
name|AdviceWithTask
argument_list|()
block|{
specifier|public
name|void
name|task
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|ProcessorDefinition
argument_list|>
name|it
init|=
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ProcessorDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcessorDefinition
name|output
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchBy
operator|.
name|match
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|ProcessorDefinition
name|parent
init|=
name|output
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|indexOf
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|Object
name|existing
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AdviceWith ("
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|") : ["
operator|+
name|existing
operator|+
literal|"] --> before ["
operator|+
name|before
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are no outputs which matches: "
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|" in the route: "
operator|+
name|route
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|afterByToString (final RouteDefinition route, final String toString, final ProcessorDefinition after)
specifier|public
specifier|static
name|AdviceWithTask
name|afterByToString
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|toString
parameter_list|,
specifier|final
name|ProcessorDefinition
name|after
parameter_list|)
block|{
return|return
name|doAfter
argument_list|(
name|route
argument_list|,
operator|new
name|MatchByToString
argument_list|(
name|toString
argument_list|)
argument_list|,
name|after
argument_list|)
return|;
block|}
DECL|method|afterById (final RouteDefinition route, final String id, final ProcessorDefinition after)
specifier|public
specifier|static
name|AdviceWithTask
name|afterById
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|ProcessorDefinition
name|after
parameter_list|)
block|{
return|return
name|doAfter
argument_list|(
name|route
argument_list|,
operator|new
name|MatchById
argument_list|(
name|id
argument_list|)
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doAfter (final RouteDefinition route, final MatchBy matchBy, final ProcessorDefinition after)
specifier|private
specifier|static
name|AdviceWithTask
name|doAfter
parameter_list|(
specifier|final
name|RouteDefinition
name|route
parameter_list|,
specifier|final
name|MatchBy
name|matchBy
parameter_list|,
specifier|final
name|ProcessorDefinition
name|after
parameter_list|)
block|{
return|return
operator|new
name|AdviceWithTask
argument_list|()
block|{
specifier|public
name|void
name|task
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|ProcessorDefinition
argument_list|>
name|it
init|=
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ProcessorDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcessorDefinition
name|output
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchBy
operator|.
name|match
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|ProcessorDefinition
name|parent
init|=
name|output
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|indexOf
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
name|Object
name|existing
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AdviceWith ("
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|") : ["
operator|+
name|existing
operator|+
literal|"] --> after ["
operator|+
name|after
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There are no outputs which matches: "
operator|+
name|matchBy
operator|.
name|getId
argument_list|()
operator|+
literal|" in the route: "
operator|+
name|route
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

