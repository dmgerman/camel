begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|EventNotifierSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeCreatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|event
operator|.
name|ExchangeFailureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|ExchangeNotifierBuilder
specifier|public
class|class
name|ExchangeNotifierBuilder
block|{
comment|// TODO work in progress
DECL|field|predicates
specifier|private
specifier|final
name|List
argument_list|<
name|EventPredicateHolder
argument_list|>
name|predicates
init|=
operator|new
name|ArrayList
argument_list|<
name|EventPredicateHolder
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|notifier
specifier|private
specifier|final
name|EventNotifier
name|notifier
init|=
operator|new
name|ExchangeNotifier
argument_list|()
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|stack
specifier|private
specifier|final
name|Stack
argument_list|<
name|EventPredicate
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|EventPredicate
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|matches
specifier|private
name|boolean
name|matches
decl_stmt|;
DECL|field|operation
specifier|private
name|EventOperation
name|operation
decl_stmt|;
DECL|method|ExchangeNotifierBuilder (CamelContext context)
specifier|public
name|ExchangeNotifierBuilder
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
DECL|method|from (final String endpointUri)
specifier|public
name|ExchangeNotifierBuilder
name|from
parameter_list|(
specifier|final
name|String
name|endpointUri
parameter_list|)
block|{
name|stack
operator|.
name|push
argument_list|(
operator|new
name|EventPredicateSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeCreated
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|endpointUri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeCompleted
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|endpointUri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|endpointUri
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"from("
operator|+
name|endpointUri
operator|+
literal|")"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|whenReceived (final int number)
specifier|public
name|ExchangeNotifierBuilder
name|whenReceived
parameter_list|(
specifier|final
name|int
name|number
parameter_list|)
block|{
name|stack
operator|.
name|push
argument_list|(
operator|new
name|EventPredicateSupport
argument_list|()
block|{
specifier|private
name|int
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeCreated
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|current
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
name|current
operator|>=
name|number
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"whenReceived("
operator|+
name|number
operator|+
literal|")"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|whenDone (final int number)
specifier|public
name|ExchangeNotifierBuilder
name|whenDone
parameter_list|(
specifier|final
name|int
name|number
parameter_list|)
block|{
name|stack
operator|.
name|add
argument_list|(
operator|new
name|EventPredicateSupport
argument_list|()
block|{
specifier|private
name|int
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeCompleted
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|current
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|current
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
name|current
operator|>=
name|number
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"whenDone("
operator|+
name|number
operator|+
literal|")"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|whenCompleted (final int number)
specifier|public
name|ExchangeNotifierBuilder
name|whenCompleted
parameter_list|(
specifier|final
name|int
name|number
parameter_list|)
block|{
name|stack
operator|.
name|add
argument_list|(
operator|new
name|EventPredicateSupport
argument_list|()
block|{
specifier|private
name|int
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeCompleted
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|current
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
name|current
operator|>=
name|number
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"whenCompleted("
operator|+
name|number
operator|+
literal|")"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|whenFailed (final int number)
specifier|public
name|ExchangeNotifierBuilder
name|whenFailed
parameter_list|(
specifier|final
name|int
name|number
parameter_list|)
block|{
name|stack
operator|.
name|add
argument_list|(
operator|new
name|EventPredicateSupport
argument_list|()
block|{
specifier|private
name|int
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|onExchangeFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|current
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
name|current
operator|>=
name|number
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"whenFailed("
operator|+
name|number
operator|+
literal|")"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|and ()
specifier|public
name|ExchangeNotifierBuilder
name|and
parameter_list|()
block|{
name|doCreate
argument_list|(
name|EventOperation
operator|.
name|and
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|or ()
specifier|public
name|ExchangeNotifierBuilder
name|or
parameter_list|()
block|{
name|doCreate
argument_list|(
name|EventOperation
operator|.
name|or
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|not ()
specifier|public
name|ExchangeNotifierBuilder
name|not
parameter_list|()
block|{
name|doCreate
argument_list|(
name|EventOperation
operator|.
name|not
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|create ()
specifier|public
name|ExchangeNotifierBuilder
name|create
parameter_list|()
block|{
name|doCreate
argument_list|(
name|EventOperation
operator|.
name|and
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|doCreate (EventOperation newOperation)
specifier|private
name|void
name|doCreate
parameter_list|(
name|EventOperation
name|newOperation
parameter_list|)
block|{
comment|// init operation depending on the newOperation
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|newOperation
operator|==
name|EventOperation
operator|.
name|or
condition|?
name|EventOperation
operator|.
name|or
else|:
name|EventOperation
operator|.
name|and
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CompoundEventPredicate
name|compound
init|=
operator|new
name|CompoundEventPredicate
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
operator|new
name|EventPredicateHolder
argument_list|(
name|operation
argument_list|,
name|compound
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|operation
operator|=
name|newOperation
expr_stmt|;
block|}
DECL|method|matches ()
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
return|return
name|matches
return|;
block|}
DECL|method|matches (long timeout, TimeUnit timeUnit)
specifier|public
name|boolean
name|matches
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|latch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|matches
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|EventPredicateHolder
argument_list|>
name|it
init|=
name|predicates
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// a crud way of skipping the first invisible operation
return|return
name|ObjectHelper
operator|.
name|after
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|"()."
argument_list|)
return|;
block|}
DECL|class|ExchangeNotifier
specifier|private
class|class
name|ExchangeNotifier
extends|extends
name|EventNotifierSupport
block|{
DECL|method|notify (EventObject event)
specifier|public
name|void
name|notify
parameter_list|(
name|EventObject
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|instanceof
name|ExchangeCreatedEvent
condition|)
block|{
name|onExchangeCreated
argument_list|(
operator|(
name|ExchangeCreatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeCompletedEvent
condition|)
block|{
name|onExchangeCompleted
argument_list|(
operator|(
name|ExchangeCompletedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeFailureEvent
condition|)
block|{
name|onExchangeFailure
argument_list|(
operator|(
name|ExchangeFailureEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
name|computeMatches
argument_list|()
expr_stmt|;
block|}
DECL|method|isEnabled (EventObject event)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|EventObject
name|event
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|onExchangeCreated (ExchangeCreatedEvent event)
specifier|private
name|void
name|onExchangeCreated
parameter_list|(
name|ExchangeCreatedEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|EventPredicateHolder
name|predicate
range|:
name|predicates
control|)
block|{
name|predicate
operator|.
name|getPredicate
argument_list|()
operator|.
name|onExchangeCreated
argument_list|(
name|event
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onExchangeCompleted (ExchangeCompletedEvent event)
specifier|private
name|void
name|onExchangeCompleted
parameter_list|(
name|ExchangeCompletedEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|EventPredicateHolder
name|predicate
range|:
name|predicates
control|)
block|{
name|predicate
operator|.
name|getPredicate
argument_list|()
operator|.
name|onExchangeCompleted
argument_list|(
name|event
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onExchangeFailure (ExchangeFailureEvent event)
specifier|private
name|void
name|onExchangeFailure
parameter_list|(
name|ExchangeFailureEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|EventPredicateHolder
name|predicate
range|:
name|predicates
control|)
block|{
name|predicate
operator|.
name|getPredicate
argument_list|()
operator|.
name|onExchangeFailure
argument_list|(
name|event
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|computeMatches ()
specifier|private
specifier|synchronized
name|void
name|computeMatches
parameter_list|()
block|{
name|Boolean
name|answer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EventPredicateHolder
name|holder
range|:
name|predicates
control|)
block|{
name|EventOperation
name|operation
init|=
name|holder
operator|.
name|getOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|EventOperation
operator|.
name|and
operator|==
name|operation
condition|)
block|{
if|if
condition|(
name|holder
operator|.
name|getPredicate
argument_list|()
operator|.
name|matches
argument_list|()
condition|)
block|{
name|answer
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
literal|false
expr_stmt|;
comment|// and break out since its an AND so it must match
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|EventOperation
operator|.
name|or
operator|==
name|operation
condition|)
block|{
if|if
condition|(
name|holder
operator|.
name|getPredicate
argument_list|()
operator|.
name|matches
argument_list|()
condition|)
block|{
name|answer
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|EventOperation
operator|.
name|not
operator|==
name|operation
condition|)
block|{
if|if
condition|(
name|holder
operator|.
name|getPredicate
argument_list|()
operator|.
name|matches
argument_list|()
condition|)
block|{
name|answer
operator|=
literal|false
expr_stmt|;
comment|// and break out since its a NOT so it must not match
break|break;
block|}
else|else
block|{
name|answer
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|matches
operator|=
name|answer
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we only care about Exchange events
name|setIgnoreCamelContextEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setIgnoreRouteEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setIgnoreServiceEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{         }
block|}
DECL|interface|EventPredicate
specifier|public
interface|interface
name|EventPredicate
block|{
DECL|method|matches ()
name|boolean
name|matches
parameter_list|()
function_decl|;
DECL|method|onExchangeCreated (Exchange exchange)
name|boolean
name|onExchangeCreated
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
function_decl|;
DECL|method|onExchangeCompleted (Exchange exchange)
name|boolean
name|onExchangeCompleted
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
function_decl|;
DECL|method|onExchangeFailure (Exchange exchange)
name|boolean
name|onExchangeFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
function_decl|;
block|}
DECL|class|EventPredicateSupport
specifier|private
specifier|abstract
class|class
name|EventPredicateSupport
implements|implements
name|EventPredicate
block|{
DECL|method|onExchangeCreated (Exchange exchange)
specifier|public
name|boolean
name|onExchangeCreated
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|onExchangeCompleted (Exchange exchange)
specifier|public
name|boolean
name|onExchangeCompleted
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|onExchangeFailure (Exchange exchange)
specifier|public
name|boolean
name|onExchangeFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|enum|EventOperation
specifier|private
enum|enum
name|EventOperation
block|{
DECL|enumConstant|and
DECL|enumConstant|or
DECL|enumConstant|not
name|and
block|,
name|or
block|,
name|not
block|;     }
DECL|class|EventPredicateHolder
specifier|private
class|class
name|EventPredicateHolder
block|{
DECL|field|operation
specifier|private
specifier|final
name|EventOperation
name|operation
decl_stmt|;
DECL|field|predicate
specifier|private
specifier|final
name|EventPredicate
name|predicate
decl_stmt|;
DECL|method|EventPredicateHolder (EventOperation operation, EventPredicate predicate)
specifier|private
name|EventPredicateHolder
parameter_list|(
name|EventOperation
name|operation
parameter_list|,
name|EventPredicate
name|predicate
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
name|predicate
expr_stmt|;
block|}
DECL|method|getOperation ()
specifier|public
name|EventOperation
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
DECL|method|getPredicate ()
specifier|public
name|EventPredicate
name|getPredicate
parameter_list|()
block|{
return|return
name|predicate
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|operation
operator|.
name|name
argument_list|()
operator|+
literal|"()."
operator|+
name|predicate
return|;
block|}
block|}
DECL|class|CompoundEventPredicate
specifier|private
class|class
name|CompoundEventPredicate
implements|implements
name|EventPredicate
block|{
DECL|field|predicates
specifier|private
name|Stack
argument_list|<
name|EventPredicate
argument_list|>
name|predicates
init|=
operator|new
name|Stack
argument_list|<
name|EventPredicate
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|CompoundEventPredicate (Stack<EventPredicate> predicates)
specifier|private
name|CompoundEventPredicate
parameter_list|(
name|Stack
argument_list|<
name|EventPredicate
argument_list|>
name|predicates
parameter_list|)
block|{
name|this
operator|.
name|predicates
operator|.
name|addAll
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
block|}
DECL|method|matches ()
specifier|public
name|boolean
name|matches
parameter_list|()
block|{
for|for
control|(
name|EventPredicate
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
operator|!
name|predicate
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|onExchangeCreated (Exchange exchange)
specifier|public
name|boolean
name|onExchangeCreated
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
for|for
control|(
name|EventPredicate
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
operator|!
name|predicate
operator|.
name|onExchangeCreated
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|onExchangeCompleted (Exchange exchange)
specifier|public
name|boolean
name|onExchangeCompleted
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
for|for
control|(
name|EventPredicate
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
operator|!
name|predicate
operator|.
name|onExchangeCompleted
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|onExchangeFailure (Exchange exchange)
specifier|public
name|boolean
name|onExchangeFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
for|for
control|(
name|EventPredicate
name|predicate
range|:
name|predicates
control|)
block|{
if|if
condition|(
operator|!
name|predicate
operator|.
name|onExchangeFailure
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|EventPredicate
argument_list|>
name|it
init|=
name|predicates
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

