begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|AvroDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|Base64DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BeanioDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BindyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|BoonDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|CastorDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|CsvDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|CustomDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|GzipDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|HL7DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|IcalDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|JacksonXMLDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|JaxbDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|JibxDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|JsonDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|JsonLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|LZFDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|MimeMultipartDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|PGPDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|ProtobufDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|RssDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|SerializationDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|SoapJaxbDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|StringDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|SyslogDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|TidyMarkupDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|XMLBeansDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|XMLSecurityDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|XStreamDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|XmlJsonDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|YAMLDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|YAMLLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|ZipDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|ZipFileDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_comment
comment|/**  * An expression for constructing the different possible {@link org.apache.camel.spi.DataFormat}  * options.  *  * @version   */
end_comment

begin_class
DECL|class|DataFormatClause
specifier|public
class|class
name|DataFormatClause
parameter_list|<
name|T
extends|extends
name|ProcessorDefinition
parameter_list|<
name|?
parameter_list|>
parameter_list|>
block|{
DECL|field|processorType
specifier|private
specifier|final
name|T
name|processorType
decl_stmt|;
DECL|field|operation
specifier|private
specifier|final
name|Operation
name|operation
decl_stmt|;
comment|/**      * {@link org.apache.camel.spi.DataFormat} operations.      */
DECL|enum|Operation
specifier|public
enum|enum
name|Operation
block|{
DECL|enumConstant|Marshal
DECL|enumConstant|Unmarshal
name|Marshal
block|,
name|Unmarshal
block|}
DECL|method|DataFormatClause (T processorType, Operation operation)
specifier|public
name|DataFormatClause
parameter_list|(
name|T
name|processorType
parameter_list|,
name|Operation
name|operation
parameter_list|)
block|{
name|this
operator|.
name|processorType
operator|=
name|processorType
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
comment|/**      * Uses the Avro data format      */
DECL|method|avro ()
specifier|public
name|T
name|avro
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|AvroDataFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|method|avro (Object schema)
specifier|public
name|T
name|avro
parameter_list|(
name|Object
name|schema
parameter_list|)
block|{
name|AvroDataFormat
name|dataFormat
init|=
operator|new
name|AvroDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
DECL|method|avro (String instanceClassName)
specifier|public
name|T
name|avro
parameter_list|(
name|String
name|instanceClassName
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|AvroDataFormat
argument_list|(
name|instanceClassName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the base64 data format      */
DECL|method|base64 ()
specifier|public
name|T
name|base64
parameter_list|()
block|{
name|Base64DataFormat
name|dataFormat
init|=
operator|new
name|Base64DataFormat
argument_list|()
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the base64 data format      */
DECL|method|base64 (int lineLength, String lineSeparator, boolean urlSafe)
specifier|public
name|T
name|base64
parameter_list|(
name|int
name|lineLength
parameter_list|,
name|String
name|lineSeparator
parameter_list|,
name|boolean
name|urlSafe
parameter_list|)
block|{
name|Base64DataFormat
name|dataFormat
init|=
operator|new
name|Base64DataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setLineLength
argument_list|(
name|lineLength
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setLineSeparator
argument_list|(
name|lineSeparator
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setUrlSafe
argument_list|(
name|urlSafe
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the beanio data format      */
DECL|method|beanio (String mapping, String streamName)
specifier|public
name|T
name|beanio
parameter_list|(
name|String
name|mapping
parameter_list|,
name|String
name|streamName
parameter_list|)
block|{
name|BeanioDataFormat
name|dataFormat
init|=
operator|new
name|BeanioDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setStreamName
argument_list|(
name|streamName
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the beanio data format      */
DECL|method|beanio (String mapping, String streamName, String encoding)
specifier|public
name|T
name|beanio
parameter_list|(
name|String
name|mapping
parameter_list|,
name|String
name|streamName
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
name|BeanioDataFormat
name|dataFormat
init|=
operator|new
name|BeanioDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setStreamName
argument_list|(
name|streamName
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the beanio data format      */
DECL|method|beanio (String mapping, String streamName, String encoding, boolean ignoreUnidentifiedRecords, boolean ignoreUnexpectedRecords, boolean ignoreInvalidRecords)
specifier|public
name|T
name|beanio
parameter_list|(
name|String
name|mapping
parameter_list|,
name|String
name|streamName
parameter_list|,
name|String
name|encoding
parameter_list|,
name|boolean
name|ignoreUnidentifiedRecords
parameter_list|,
name|boolean
name|ignoreUnexpectedRecords
parameter_list|,
name|boolean
name|ignoreInvalidRecords
parameter_list|)
block|{
name|BeanioDataFormat
name|dataFormat
init|=
operator|new
name|BeanioDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setStreamName
argument_list|(
name|streamName
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setIgnoreUnidentifiedRecords
argument_list|(
name|ignoreUnidentifiedRecords
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setIgnoreUnexpectedRecords
argument_list|(
name|ignoreUnexpectedRecords
argument_list|)
expr_stmt|;
name|dataFormat
operator|.
name|setIgnoreInvalidRecords
argument_list|(
name|ignoreInvalidRecords
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the Bindy data format      *      * @param type      the type of bindy data format to use      * @param classType the POJO class type      */
DECL|method|bindy (BindyType type, Class<?> classType)
specifier|public
name|T
name|bindy
parameter_list|(
name|BindyType
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
name|BindyDataFormat
name|bindy
init|=
operator|new
name|BindyDataFormat
argument_list|()
decl_stmt|;
name|bindy
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|bindy
operator|.
name|setClassType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|bindy
argument_list|)
return|;
block|}
comment|/**      * Uses the Boon data format      *      * @param classType the POJO class type      */
DECL|method|boon (Class<?> classType)
specifier|public
name|T
name|boon
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classType
parameter_list|)
block|{
name|BoonDataFormat
name|boon
init|=
operator|new
name|BoonDataFormat
argument_list|()
decl_stmt|;
name|boon
operator|.
name|setUnmarshalType
argument_list|(
name|classType
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|boon
argument_list|)
return|;
block|}
comment|/**      * Uses the CSV data format      */
DECL|method|csv ()
specifier|public
name|T
name|csv
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|CsvDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the CSV data format for a huge file.      * Sequential access through an iterator.      */
DECL|method|csvLazyLoad ()
specifier|public
name|T
name|csvLazyLoad
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|CsvDataFormat
argument_list|(
literal|true
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the custom data format      */
DECL|method|custom (String ref)
specifier|public
name|T
name|custom
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|CustomDataFormat
argument_list|(
name|ref
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the Castor data format      */
DECL|method|castor ()
specifier|public
name|T
name|castor
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|CastorDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the Castor data format      *      * @param mappingFile name of mapping file to locate in classpath      */
DECL|method|castor (String mappingFile)
specifier|public
name|T
name|castor
parameter_list|(
name|String
name|mappingFile
parameter_list|)
block|{
name|CastorDataFormat
name|castor
init|=
operator|new
name|CastorDataFormat
argument_list|()
decl_stmt|;
name|castor
operator|.
name|setMappingFile
argument_list|(
name|mappingFile
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|castor
argument_list|)
return|;
block|}
comment|/**      * Uses the Castor data format      *      * @param mappingFile name of mapping file to locate in classpath      * @param validation  whether validation is enabled or not      */
DECL|method|castor (String mappingFile, boolean validation)
specifier|public
name|T
name|castor
parameter_list|(
name|String
name|mappingFile
parameter_list|,
name|boolean
name|validation
parameter_list|)
block|{
name|CastorDataFormat
name|castor
init|=
operator|new
name|CastorDataFormat
argument_list|()
decl_stmt|;
name|castor
operator|.
name|setMappingFile
argument_list|(
name|mappingFile
argument_list|)
expr_stmt|;
name|castor
operator|.
name|setValidation
argument_list|(
name|validation
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|castor
argument_list|)
return|;
block|}
comment|/**      * Uses the GZIP deflater data format      */
DECL|method|gzip ()
specifier|public
name|T
name|gzip
parameter_list|()
block|{
name|GzipDataFormat
name|gzdf
init|=
operator|new
name|GzipDataFormat
argument_list|()
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|gzdf
argument_list|)
return|;
block|}
comment|/**      * Uses the HL7 data format      */
DECL|method|hl7 ()
specifier|public
name|T
name|hl7
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|HL7DataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the HL7 data format      */
DECL|method|hl7 (boolean validate)
specifier|public
name|T
name|hl7
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|HL7DataFormat
name|hl7
init|=
operator|new
name|HL7DataFormat
argument_list|()
decl_stmt|;
name|hl7
operator|.
name|setValidate
argument_list|(
name|validate
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|hl7
argument_list|)
return|;
block|}
comment|/**      * Uses the HL7 data format      */
DECL|method|hl7 (Object parser)
specifier|public
name|T
name|hl7
parameter_list|(
name|Object
name|parser
parameter_list|)
block|{
name|HL7DataFormat
name|hl7
init|=
operator|new
name|HL7DataFormat
argument_list|()
decl_stmt|;
name|hl7
operator|.
name|setParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|hl7
argument_list|)
return|;
block|}
comment|/**      * Uses the iCal data format      */
DECL|method|ical (boolean validating)
specifier|public
name|T
name|ical
parameter_list|(
name|boolean
name|validating
parameter_list|)
block|{
name|IcalDataFormat
name|ical
init|=
operator|new
name|IcalDataFormat
argument_list|()
decl_stmt|;
name|ical
operator|.
name|setValidating
argument_list|(
name|validating
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|ical
argument_list|)
return|;
block|}
comment|/**      * Uses the LZF deflater data format      */
DECL|method|lzf ()
specifier|public
name|T
name|lzf
parameter_list|()
block|{
name|LZFDataFormat
name|lzfdf
init|=
operator|new
name|LZFDataFormat
argument_list|()
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|lzfdf
argument_list|)
return|;
block|}
comment|/**      * Uses the MIME Multipart data format      */
DECL|method|mimeMultipart ()
specifier|public
name|T
name|mimeMultipart
parameter_list|()
block|{
name|MimeMultipartDataFormat
name|mm
init|=
operator|new
name|MimeMultipartDataFormat
argument_list|()
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|mm
argument_list|)
return|;
block|}
comment|/**      * Uses the MIME Multipart data format      *      * @param multipartSubType Specifies the subtype of the MIME Multipart      */
DECL|method|mimeMultipart (String multipartSubType)
specifier|public
name|T
name|mimeMultipart
parameter_list|(
name|String
name|multipartSubType
parameter_list|)
block|{
name|MimeMultipartDataFormat
name|mm
init|=
operator|new
name|MimeMultipartDataFormat
argument_list|()
decl_stmt|;
name|mm
operator|.
name|setMultipartSubType
argument_list|(
name|multipartSubType
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|mm
argument_list|)
return|;
block|}
comment|/**      * Uses the MIME Multipart data format      *      * @param multipartSubType           the subtype of the MIME Multipart      * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled      *                                   into a MIME Multipart (with only one body part).      * @param headersInline              define the MIME Multipart headers as part of the message body      *                                   or as Camel headers      * @param binaryContent              have binary encoding for binary content (true) or use Base-64      *                                   encoding for binary content (false)      */
DECL|method|mimeMultipart (String multipartSubType, boolean multipartWithoutAttachment, boolean headersInline, boolean binaryContent)
specifier|public
name|T
name|mimeMultipart
parameter_list|(
name|String
name|multipartSubType
parameter_list|,
name|boolean
name|multipartWithoutAttachment
parameter_list|,
name|boolean
name|headersInline
parameter_list|,
name|boolean
name|binaryContent
parameter_list|)
block|{
name|MimeMultipartDataFormat
name|mm
init|=
operator|new
name|MimeMultipartDataFormat
argument_list|()
decl_stmt|;
name|mm
operator|.
name|setMultipartSubType
argument_list|(
name|multipartSubType
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setMultipartWithoutAttachment
argument_list|(
name|multipartWithoutAttachment
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setHeadersInline
argument_list|(
name|headersInline
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setBinaryContent
argument_list|(
name|binaryContent
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|mm
argument_list|)
return|;
block|}
comment|/**      * Uses the MIME Multipart data format      *      * @param multipartSubType           the subtype of the MIME Multipart      * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled      *                                   into a MIME Multipart (with only one body part).      * @param headersInline              define the MIME Multipart headers as part of the message body      *                                   or as Camel headers      * @param includeHeadeers            if headersInline is set to true all camel headers matching this      *                                   regex are also stored as MIME headers on the Multipart      * @param binaryContent              have binary encoding for binary content (true) or use Base-64      *                                   encoding for binary content (false)      */
DECL|method|mimeMultipart (String multipartSubType, boolean multipartWithoutAttachment, boolean headersInline, String includeHeaders, boolean binaryContent)
specifier|public
name|T
name|mimeMultipart
parameter_list|(
name|String
name|multipartSubType
parameter_list|,
name|boolean
name|multipartWithoutAttachment
parameter_list|,
name|boolean
name|headersInline
parameter_list|,
name|String
name|includeHeaders
parameter_list|,
name|boolean
name|binaryContent
parameter_list|)
block|{
name|MimeMultipartDataFormat
name|mm
init|=
operator|new
name|MimeMultipartDataFormat
argument_list|()
decl_stmt|;
name|mm
operator|.
name|setMultipartSubType
argument_list|(
name|multipartSubType
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setMultipartWithoutAttachment
argument_list|(
name|multipartWithoutAttachment
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setHeadersInline
argument_list|(
name|headersInline
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setIncludeHeaders
argument_list|(
name|includeHeaders
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setBinaryContent
argument_list|(
name|binaryContent
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|mm
argument_list|)
return|;
block|}
comment|/**      * Uses the MIME Multipart data format      *      * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled      *                                   into a MIME Multipart (with only one body part).      * @param headersInline              define the MIME Multipart headers as part of the message body      *                                   or as Camel headers      * @param binaryContent              have binary encoding for binary content (true) or use Base-64      *                                   encoding for binary content (false)      */
DECL|method|mimeMultipart (boolean multipartWithoutAttachment, boolean headersInline, boolean binaryContent)
specifier|public
name|T
name|mimeMultipart
parameter_list|(
name|boolean
name|multipartWithoutAttachment
parameter_list|,
name|boolean
name|headersInline
parameter_list|,
name|boolean
name|binaryContent
parameter_list|)
block|{
name|MimeMultipartDataFormat
name|mm
init|=
operator|new
name|MimeMultipartDataFormat
argument_list|()
decl_stmt|;
name|mm
operator|.
name|setMultipartWithoutAttachment
argument_list|(
name|multipartWithoutAttachment
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setHeadersInline
argument_list|(
name|headersInline
argument_list|)
expr_stmt|;
name|mm
operator|.
name|setBinaryContent
argument_list|(
name|binaryContent
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|mm
argument_list|)
return|;
block|}
comment|/**      * Uses the PGP data format      */
DECL|method|pgp (String keyFileName, String keyUserid)
specifier|public
name|T
name|pgp
parameter_list|(
name|String
name|keyFileName
parameter_list|,
name|String
name|keyUserid
parameter_list|)
block|{
name|PGPDataFormat
name|pgp
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgp
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgp
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|pgp
argument_list|)
return|;
block|}
comment|/**      * Uses the PGP data format      */
DECL|method|pgp (String keyFileName, String keyUserid, String password)
specifier|public
name|T
name|pgp
parameter_list|(
name|String
name|keyFileName
parameter_list|,
name|String
name|keyUserid
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|PGPDataFormat
name|pgp
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgp
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgp
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgp
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|pgp
argument_list|)
return|;
block|}
comment|/**      * Uses the PGP data format      */
DECL|method|pgp (String keyFileName, String keyUserid, String password, boolean armored, boolean integrity)
specifier|public
name|T
name|pgp
parameter_list|(
name|String
name|keyFileName
parameter_list|,
name|String
name|keyUserid
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|armored
parameter_list|,
name|boolean
name|integrity
parameter_list|)
block|{
name|PGPDataFormat
name|pgp
init|=
operator|new
name|PGPDataFormat
argument_list|()
decl_stmt|;
name|pgp
operator|.
name|setKeyFileName
argument_list|(
name|keyFileName
argument_list|)
expr_stmt|;
name|pgp
operator|.
name|setKeyUserid
argument_list|(
name|keyUserid
argument_list|)
expr_stmt|;
name|pgp
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|pgp
operator|.
name|setArmored
argument_list|(
name|armored
argument_list|)
expr_stmt|;
name|pgp
operator|.
name|setIntegrity
argument_list|(
name|integrity
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|pgp
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format      */
DECL|method|jacksonxml ()
specifier|public
name|T
name|jacksonxml
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|JacksonXMLDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format      *      * @param unmarshalType      *            unmarshal type for xml jackson type      */
DECL|method|jacksonxml (Class<?> unmarshalType)
specifier|public
name|T
name|jacksonxml
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|)
block|{
name|JacksonXMLDataFormat
name|jacksonXMLDataFormat
init|=
operator|new
name|JacksonXMLDataFormat
argument_list|()
decl_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|jacksonXMLDataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format      *      * @param unmarshalType      *            unmarshal type for xml jackson type      * @param jsonView      *            the view type for xml jackson type      */
DECL|method|jacksonxml (Class<?> unmarshalType, Class<?> jsonView)
specifier|public
name|T
name|jacksonxml
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|)
block|{
name|JacksonXMLDataFormat
name|jacksonXMLDataFormat
init|=
operator|new
name|JacksonXMLDataFormat
argument_list|()
decl_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|jacksonXMLDataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format using the Jackson library turning pretty      * printing on or off      *       * @param prettyPrint      *            turn pretty printing on or off      */
DECL|method|jacksonxml (boolean prettyPrint)
specifier|public
name|T
name|jacksonxml
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JacksonXMLDataFormat
name|jacksonXMLDataFormat
init|=
operator|new
name|JacksonXMLDataFormat
argument_list|()
decl_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|jacksonXMLDataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format      *      * @param unmarshalType      *            unmarshal type for xml jackson type      * @param prettyPrint      *            turn pretty printing on or off      */
DECL|method|jacksonxml (Class<?> unmarshalType, boolean prettyPrint)
specifier|public
name|T
name|jacksonxml
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JacksonXMLDataFormat
name|jacksonXMLDataFormat
init|=
operator|new
name|JacksonXMLDataFormat
argument_list|()
decl_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|jacksonXMLDataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format      *      * @param unmarshalType      *            unmarshal type for xml jackson type      * @param jsonView      *            the view type for xml jackson type      * @param prettyPrint      *            turn pretty printing on or off      */
DECL|method|jacksonxml (Class<?> unmarshalType, Class<?> jsonView, boolean prettyPrint)
specifier|public
name|T
name|jacksonxml
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JacksonXMLDataFormat
name|jacksonXMLDataFormat
init|=
operator|new
name|JacksonXMLDataFormat
argument_list|()
decl_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|jacksonXMLDataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format      *      * @param unmarshalType      *            unmarshal type for xml jackson type      * @param jsonView      *            the view type for xml jackson type      * @param include      *            include such as<tt>ALWAYS</tt>,<tt>NON_NULL</tt>, etc.      */
DECL|method|jacksonxml (Class<?> unmarshalType, Class<?> jsonView, String include)
specifier|public
name|T
name|jacksonxml
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|,
name|String
name|include
parameter_list|)
block|{
name|JacksonXMLDataFormat
name|jacksonXMLDataFormat
init|=
operator|new
name|JacksonXMLDataFormat
argument_list|()
decl_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setInclude
argument_list|(
name|include
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|jacksonXMLDataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson XML data format      *      * @param unmarshalType      *            unmarshal type for xml jackson type      * @param jsonView      *            the view type for xml jackson type      * @param include      *            include such as<tt>ALWAYS</tt>,<tt>NON_NULL</tt>, etc.      * @param prettyPrint      *            turn pretty printing on or off      */
DECL|method|jacksonxml (Class<?> unmarshalType, Class<?> jsonView, String include, boolean prettyPrint)
specifier|public
name|T
name|jacksonxml
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|,
name|String
name|include
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JacksonXMLDataFormat
name|jacksonXMLDataFormat
init|=
operator|new
name|JacksonXMLDataFormat
argument_list|()
decl_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setInclude
argument_list|(
name|include
argument_list|)
expr_stmt|;
name|jacksonXMLDataFormat
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|jacksonXMLDataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the JAXB data format      */
DECL|method|jaxb ()
specifier|public
name|T
name|jaxb
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|JaxbDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the JAXB data format with context path      */
DECL|method|jaxb (String contextPath)
specifier|public
name|T
name|jaxb
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|JaxbDataFormat
name|dataFormat
init|=
operator|new
name|JaxbDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setContextPath
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
comment|/**      * Uses the JAXB data format turning pretty printing on or off      */
DECL|method|jaxb (boolean prettyPrint)
specifier|public
name|T
name|jaxb
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|JaxbDataFormat
argument_list|(
name|prettyPrint
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the JiBX data format.      */
DECL|method|jibx ()
specifier|public
name|T
name|jibx
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|JibxDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the JiBX data format with unmarshall class.      */
DECL|method|jibx (Class<?> unmarshallClass)
specifier|public
name|T
name|jibx
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshallClass
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|JibxDataFormat
argument_list|(
name|unmarshallClass
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the JSON data format using the XStream json library      */
DECL|method|json ()
specifier|public
name|T
name|json
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|JsonDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the JSON data format using the XStream json library turning pretty printing on or off      *       * @param prettyPrint turn pretty printing on or off      */
DECL|method|json (boolean prettyPrint)
specifier|public
name|T
name|json
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|()
decl_stmt|;
name|json
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the JSON data format      *      * @param library the json library to use      */
DECL|method|json (JsonLibrary library)
specifier|public
name|T
name|json
parameter_list|(
name|JsonLibrary
name|library
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|JsonDataFormat
argument_list|(
name|library
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the JSON data format      *      * @param library     the json library to use      * @param prettyPrint turn pretty printing on or off      */
DECL|method|json (JsonLibrary library, boolean prettyPrint)
specifier|public
name|T
name|json
parameter_list|(
name|JsonLibrary
name|library
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|(
name|library
argument_list|)
decl_stmt|;
name|json
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the JSON data format      *      * @param type          the json type to use      * @param unmarshalType unmarshal type for json jackson type      */
DECL|method|json (JsonLibrary type, Class<?> unmarshalType)
specifier|public
name|T
name|json
parameter_list|(
name|JsonLibrary
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|json
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the JSON data format      *      * @param type          the json type to use      * @param unmarshalType unmarshal type for json jackson type      * @param prettyPrint   turn pretty printing on or off      */
DECL|method|json (JsonLibrary type, Class<?> unmarshalType, boolean prettyPrint)
specifier|public
name|T
name|json
parameter_list|(
name|JsonLibrary
name|type
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|json
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|json
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson JSON data format      *      * @param unmarshalType unmarshal type for json jackson type      * @param jsonView      the view type for json jackson type      */
DECL|method|json (Class<?> unmarshalType, Class<?> jsonView)
specifier|public
name|T
name|json
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|(
name|JsonLibrary
operator|.
name|Jackson
argument_list|)
decl_stmt|;
name|json
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|json
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson JSON data format      *      * @param unmarshalType unmarshal type for json jackson type      * @param jsonView      the view type for json jackson type      * @param prettyPrint   turn pretty printing on or off      */
DECL|method|json (Class<?> unmarshalType, Class<?> jsonView, boolean prettyPrint)
specifier|public
name|T
name|json
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|(
name|JsonLibrary
operator|.
name|Jackson
argument_list|)
decl_stmt|;
name|json
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|json
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
name|json
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson JSON data format      *      * @param unmarshalType unmarshal type for json jackson type      * @param jsonView      the view type for json jackson type      * @param include       include such as<tt>ALWAYS</tt>,<tt>NON_NULL</tt>, etc.      */
DECL|method|json (Class<?> unmarshalType, Class<?> jsonView, String include)
specifier|public
name|T
name|json
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|,
name|String
name|include
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|(
name|JsonLibrary
operator|.
name|Jackson
argument_list|)
decl_stmt|;
name|json
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|json
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
name|json
operator|.
name|setInclude
argument_list|(
name|include
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the Jackson JSON data format      *      * @param unmarshalType unmarshal type for json jackson type      * @param jsonView      the view type for json jackson type      * @param include       include such as<tt>ALWAYS</tt>,<tt>NON_NULL</tt>, etc.       * @param prettyPrint  turn pretty printing on or off      */
DECL|method|json (Class<?> unmarshalType, Class<?> jsonView, String include, boolean prettyPrint)
specifier|public
name|T
name|json
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|jsonView
parameter_list|,
name|String
name|include
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|JsonDataFormat
name|json
init|=
operator|new
name|JsonDataFormat
argument_list|(
name|JsonLibrary
operator|.
name|Jackson
argument_list|)
decl_stmt|;
name|json
operator|.
name|setUnmarshalType
argument_list|(
name|unmarshalType
argument_list|)
expr_stmt|;
name|json
operator|.
name|setJsonView
argument_list|(
name|jsonView
argument_list|)
expr_stmt|;
name|json
operator|.
name|setInclude
argument_list|(
name|include
argument_list|)
expr_stmt|;
name|json
operator|.
name|setPrettyPrint
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Uses the protobuf data format      */
DECL|method|protobuf ()
specifier|public
name|T
name|protobuf
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|ProtobufDataFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|method|protobuf (Object defaultInstance)
specifier|public
name|T
name|protobuf
parameter_list|(
name|Object
name|defaultInstance
parameter_list|)
block|{
name|ProtobufDataFormat
name|dataFormat
init|=
operator|new
name|ProtobufDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setDefaultInstance
argument_list|(
name|defaultInstance
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|dataFormat
argument_list|)
return|;
block|}
DECL|method|protobuf (String instanceClassName)
specifier|public
name|T
name|protobuf
parameter_list|(
name|String
name|instanceClassName
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|ProtobufDataFormat
argument_list|(
name|instanceClassName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the RSS data format      */
DECL|method|rss ()
specifier|public
name|T
name|rss
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|RssDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the Java Serialization data format      */
DECL|method|serialization ()
specifier|public
name|T
name|serialization
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|SerializationDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap 1.1 JAXB data format      */
DECL|method|soapjaxb ()
specifier|public
name|T
name|soapjaxb
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|SoapJaxbDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap 1.1 JAXB data format      */
DECL|method|soapjaxb (String contextPath)
specifier|public
name|T
name|soapjaxb
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|SoapJaxbDataFormat
argument_list|(
name|contextPath
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap 1.1 JAXB data format      */
DECL|method|soapjaxb (String contextPath, String elementNameStrategyRef)
specifier|public
name|T
name|soapjaxb
parameter_list|(
name|String
name|contextPath
parameter_list|,
name|String
name|elementNameStrategyRef
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|SoapJaxbDataFormat
argument_list|(
name|contextPath
argument_list|,
name|elementNameStrategyRef
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap 1.1 JAXB data format      */
DECL|method|soapjaxb (String contextPath, Object elementNameStrategy)
specifier|public
name|T
name|soapjaxb
parameter_list|(
name|String
name|contextPath
parameter_list|,
name|Object
name|elementNameStrategy
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|SoapJaxbDataFormat
argument_list|(
name|contextPath
argument_list|,
name|elementNameStrategy
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap 1.2 JAXB data format      */
DECL|method|soapjaxb12 ()
specifier|public
name|T
name|soapjaxb12
parameter_list|()
block|{
name|SoapJaxbDataFormat
name|soap
init|=
operator|new
name|SoapJaxbDataFormat
argument_list|()
decl_stmt|;
name|soap
operator|.
name|setVersion
argument_list|(
literal|"1.2"
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|soap
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap 1.2 JAXB data format      */
DECL|method|soapjaxb12 (String contextPath)
specifier|public
name|T
name|soapjaxb12
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|SoapJaxbDataFormat
name|soap
init|=
operator|new
name|SoapJaxbDataFormat
argument_list|(
name|contextPath
argument_list|)
decl_stmt|;
name|soap
operator|.
name|setVersion
argument_list|(
literal|"1.2"
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|soap
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap 1.2 JAXB data format      */
DECL|method|soapjaxb12 (String contextPath, String elementNameStrategyRef)
specifier|public
name|T
name|soapjaxb12
parameter_list|(
name|String
name|contextPath
parameter_list|,
name|String
name|elementNameStrategyRef
parameter_list|)
block|{
name|SoapJaxbDataFormat
name|soap
init|=
operator|new
name|SoapJaxbDataFormat
argument_list|(
name|contextPath
argument_list|,
name|elementNameStrategyRef
argument_list|)
decl_stmt|;
name|soap
operator|.
name|setVersion
argument_list|(
literal|"1.2"
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|soap
argument_list|)
return|;
block|}
comment|/**      * Uses the Soap JAXB data format      */
DECL|method|soapjaxb12 (String contextPath, Object elementNameStrategy)
specifier|public
name|T
name|soapjaxb12
parameter_list|(
name|String
name|contextPath
parameter_list|,
name|Object
name|elementNameStrategy
parameter_list|)
block|{
name|SoapJaxbDataFormat
name|soap
init|=
operator|new
name|SoapJaxbDataFormat
argument_list|(
name|contextPath
argument_list|,
name|elementNameStrategy
argument_list|)
decl_stmt|;
name|soap
operator|.
name|setVersion
argument_list|(
literal|"1.2"
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|soap
argument_list|)
return|;
block|}
comment|/**      * Uses the String data format      */
DECL|method|string ()
specifier|public
name|T
name|string
parameter_list|()
block|{
return|return
name|string
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Uses the String data format supporting encoding using given charset      */
DECL|method|string (String charset)
specifier|public
name|T
name|string
parameter_list|(
name|String
name|charset
parameter_list|)
block|{
name|StringDataFormat
name|sdf
init|=
operator|new
name|StringDataFormat
argument_list|()
decl_stmt|;
name|sdf
operator|.
name|setCharset
argument_list|(
name|charset
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|sdf
argument_list|)
return|;
block|}
comment|/**      * Uses the Syslog data format      */
DECL|method|syslog ()
specifier|public
name|T
name|syslog
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|SyslogDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Return WellFormed HTML (an XML Document) either      * {@link java.lang.String} or {@link org.w3c.dom.Node}      */
DECL|method|tidyMarkup (Class<?> dataObjectType)
specifier|public
name|T
name|tidyMarkup
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|dataObjectType
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|TidyMarkupDataFormat
argument_list|(
name|dataObjectType
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Return TidyMarkup in the default format      * as {@link org.w3c.dom.Node}      */
DECL|method|tidyMarkup ()
specifier|public
name|T
name|tidyMarkup
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|TidyMarkupDataFormat
argument_list|(
name|Node
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the XStream data format.      *<p/>      * Favor using {@link #xstream(String)} to pass in a permission      */
DECL|method|xstream ()
specifier|public
name|T
name|xstream
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|XStreamDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the xstream by setting the encoding or permission      *      * @param encodingOrPermission is either an encoding or permission syntax      */
DECL|method|xstream (String encodingOrPermission)
specifier|public
name|T
name|xstream
parameter_list|(
name|String
name|encodingOrPermission
parameter_list|)
block|{
comment|// is it an encoding? if not we assume its a permission
if|if
condition|(
name|Charset
operator|.
name|isSupported
argument_list|(
name|encodingOrPermission
argument_list|)
condition|)
block|{
return|return
name|xstream
argument_list|(
name|encodingOrPermission
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|xstream
argument_list|(
literal|null
argument_list|,
name|encodingOrPermission
argument_list|)
return|;
block|}
block|}
comment|/**      * Uses the xstream by setting the encoding      */
DECL|method|xstream (String encoding, String permission)
specifier|public
name|T
name|xstream
parameter_list|(
name|String
name|encoding
parameter_list|,
name|String
name|permission
parameter_list|)
block|{
name|XStreamDataFormat
name|xdf
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xdf
operator|.
name|setPermissions
argument_list|(
name|permission
argument_list|)
expr_stmt|;
name|xdf
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
return|return
name|dataFormat
argument_list|(
name|xdf
argument_list|)
return|;
block|}
comment|/**      * Uses the xstream by permitting the java type      *      * @param type the pojo xstream should use as allowed permission      */
DECL|method|xstream (Class<?> type)
specifier|public
name|T
name|xstream
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|xstream
argument_list|(
literal|null
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Uses the xstream by permitting the java type      *      * @param encoding encoding to use      * @param type the pojo class(es) xstream should use as allowed permission      */
DECL|method|xstream (String encoding, Class<?>... type)
specifier|public
name|T
name|xstream
parameter_list|(
name|String
name|encoding
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|type
parameter_list|)
block|{
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|type
control|)
block|{
name|csb
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|csb
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|xstream
argument_list|(
name|encoding
argument_list|,
name|csb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the YAML data format      *      * @param library the yaml library to use      */
DECL|method|yaml (YAMLLibrary library)
specifier|public
name|T
name|yaml
parameter_list|(
name|YAMLLibrary
name|library
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|YAMLDataFormat
argument_list|(
name|library
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the YAML data format      *      * @param type          the yaml type to use      * @param type          the type for json snakeyaml type      */
DECL|method|yaml (YAMLLibrary library, Class<?> type)
specifier|public
name|T
name|yaml
parameter_list|(
name|YAMLLibrary
name|library
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|YAMLDataFormat
argument_list|(
name|library
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML ()
specifier|public
name|T
name|secureXML
parameter_list|()
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|()
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, boolean secureTagContents)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, boolean secureTagContents, String passPhrase)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|passPhrase
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|,
name|passPhrase
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String passPhrase)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|passPhrase
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|,
name|passPhrase
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, boolean secureTagContents, String passPhrase, String xmlCipherAlgorithm)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|passPhrase
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|,
name|passPhrase
argument_list|,
name|xmlCipherAlgorithm
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String passPhrase, String xmlCipherAlgorithm)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|passPhrase
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|,
name|passPhrase
argument_list|,
name|xmlCipherAlgorithm
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * @deprecated Use {@link #secureXML(String, Map, boolean, String, String, String, String)} instead.      * Uses the XML Security data format      */
annotation|@
name|Deprecated
DECL|method|secureXML (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|String
name|keyOrTrustStoreParametersId
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParametersId
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId, String keyPassword)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|String
name|keyOrTrustStoreParametersId
parameter_list|,
name|String
name|keyPassword
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParametersId
argument_list|,
name|keyPassword
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParameters
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters, String keyPassword)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|,
name|String
name|keyPassword
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParameters
argument_list|,
name|keyPassword
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|String
name|keyOrTrustStoreParametersId
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParametersId
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId, String keyPassword)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|String
name|keyOrTrustStoreParametersId
parameter_list|,
name|String
name|keyPassword
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParametersId
argument_list|,
name|keyPassword
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParameters
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters, String keyPassword)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|,
name|String
name|keyPassword
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParameters
argument_list|,
name|keyPassword
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the XML Security data format      */
DECL|method|secureXML (String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters, String keyPassword, String digestAlgorithm)
specifier|public
name|T
name|secureXML
parameter_list|(
name|String
name|secureTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|boolean
name|secureTagContents
parameter_list|,
name|String
name|recipientKeyAlias
parameter_list|,
name|String
name|xmlCipherAlgorithm
parameter_list|,
name|String
name|keyCipherAlgorithm
parameter_list|,
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|,
name|String
name|keyPassword
parameter_list|,
name|String
name|digestAlgorithm
parameter_list|)
block|{
name|XMLSecurityDataFormat
name|xsdf
init|=
operator|new
name|XMLSecurityDataFormat
argument_list|(
name|secureTag
argument_list|,
name|namespaces
argument_list|,
name|secureTagContents
argument_list|,
name|recipientKeyAlias
argument_list|,
name|xmlCipherAlgorithm
argument_list|,
name|keyCipherAlgorithm
argument_list|,
name|keyOrTrustStoreParameters
argument_list|,
name|keyPassword
argument_list|,
name|digestAlgorithm
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|xsdf
argument_list|)
return|;
block|}
comment|/**      * Uses the xmlBeans data format      */
DECL|method|xmlBeans ()
specifier|public
name|T
name|xmlBeans
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|XMLBeansDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the xmljson dataformat, based on json-lib      */
DECL|method|xmljson ()
specifier|public
name|T
name|xmljson
parameter_list|()
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|XmlJsonDataFormat
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Uses the xmljson dataformat, based on json-lib, initializing custom options with a Map      */
DECL|method|xmljson (Map<String, String> options)
specifier|public
name|T
name|xmljson
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
return|return
name|dataFormat
argument_list|(
operator|new
name|XmlJsonDataFormat
argument_list|(
name|options
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Uses the ZIP deflater data format      */
DECL|method|zip ()
specifier|public
name|T
name|zip
parameter_list|()
block|{
name|ZipDataFormat
name|zdf
init|=
operator|new
name|ZipDataFormat
argument_list|(
name|Deflater
operator|.
name|DEFAULT_COMPRESSION
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|zdf
argument_list|)
return|;
block|}
comment|/**      * Uses the ZIP deflater data format      */
DECL|method|zip (int compressionLevel)
specifier|public
name|T
name|zip
parameter_list|(
name|int
name|compressionLevel
parameter_list|)
block|{
name|ZipDataFormat
name|zdf
init|=
operator|new
name|ZipDataFormat
argument_list|(
name|compressionLevel
argument_list|)
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|zdf
argument_list|)
return|;
block|}
comment|/**      * Uses the ZIP file data format      */
DECL|method|zipFile ()
specifier|public
name|T
name|zipFile
parameter_list|()
block|{
name|ZipFileDataFormat
name|zfdf
init|=
operator|new
name|ZipFileDataFormat
argument_list|()
decl_stmt|;
return|return
name|dataFormat
argument_list|(
name|zfdf
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|dataFormat (DataFormatDefinition dataFormatType)
specifier|private
name|T
name|dataFormat
parameter_list|(
name|DataFormatDefinition
name|dataFormatType
parameter_list|)
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|Unmarshal
case|:
return|return
operator|(
name|T
operator|)
name|processorType
operator|.
name|unmarshal
argument_list|(
name|dataFormatType
argument_list|)
return|;
case|case
name|Marshal
case|:
return|return
operator|(
name|T
operator|)
name|processorType
operator|.
name|marshal
argument_list|(
name|dataFormatType
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown DataFormat operation: "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

