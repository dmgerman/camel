begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|// TODO: Document me
end_comment

begin_class
DECL|class|ProcessClause
specifier|public
class|class
name|ProcessClause
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Processor
block|{
DECL|field|parent
specifier|private
specifier|final
name|T
name|parent
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|method|ProcessClause (T parent)
specifier|public
name|ProcessClause
parameter_list|(
name|T
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|// *******************************
comment|// Exchange
comment|// *******************************
comment|/**      * TODO: document      *      * Note: this is experimental and subject to changes in future releases.      */
DECL|method|exchange (final Consumer<Exchange> consumer)
specifier|public
name|T
name|exchange
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|Exchange
argument_list|>
name|consumer
parameter_list|)
block|{
name|processor
operator|=
name|consumer
operator|::
name|accept
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|// *******************************
comment|// Message
comment|// *******************************
comment|/**      * TODO: document      *      * Note: this is experimental and subject to changes in future releases.      */
DECL|method|message (final Consumer<Message> consumer)
specifier|public
name|T
name|message
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|Message
argument_list|>
name|consumer
parameter_list|)
block|{
name|processor
operator|=
name|e
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|// *******************************
comment|// Body
comment|// *******************************
comment|/**      * TODO: document      *      * Note: this is experimental and subject to changes in future releases.      */
DECL|method|body (final Consumer<Object> consumer)
specifier|public
name|T
name|body
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
name|processor
operator|=
name|e
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|/**      * TODO: document      *      * Note: this is experimental and subject to changes in future releases.      */
DECL|method|body (Class<B> type, final Consumer<B> consumer)
specifier|public
parameter_list|<
name|B
parameter_list|>
name|T
name|body
parameter_list|(
name|Class
argument_list|<
name|B
argument_list|>
name|type
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|B
argument_list|>
name|consumer
parameter_list|)
block|{
name|processor
operator|=
name|e
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|/**      * TODO: document      *      * Note: this is experimental and subject to changes in future releases.      */
DECL|method|body (final BiConsumer<Object, Map<String, Object>> consumer)
specifier|public
name|T
name|body
parameter_list|(
specifier|final
name|BiConsumer
argument_list|<
name|Object
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|consumer
parameter_list|)
block|{
name|processor
operator|=
name|e
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|/**      * TODO: document      *      * Note: this is experimental and subject to changes in future releases.      */
DECL|method|body (Class<B> type, final BiConsumer<B, Map<String, Object>> consumer)
specifier|public
parameter_list|<
name|B
parameter_list|>
name|T
name|body
parameter_list|(
name|Class
argument_list|<
name|B
argument_list|>
name|type
parameter_list|,
specifier|final
name|BiConsumer
argument_list|<
name|B
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|consumer
parameter_list|)
block|{
name|processor
operator|=
name|e
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
argument_list|,
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
block|}
end_class

end_unit

