begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ThreadPoolRejectedPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolProfile
import|;
end_import

begin_comment
comment|/**  * A builder to create thread pools.  *  * @version   */
end_comment

begin_class
DECL|class|ThreadPoolBuilder
specifier|public
specifier|final
class|class
name|ThreadPoolBuilder
block|{
DECL|field|profile
specifier|private
name|ThreadPoolProfile
name|profile
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Deprecated
DECL|method|ThreadPoolBuilder (CamelContext context)
specifier|public
name|ThreadPoolBuilder
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|profile
operator|=
operator|new
name|ThreadPoolProfile
argument_list|()
expr_stmt|;
block|}
DECL|method|ThreadPoolBuilder (String name)
specifier|public
name|ThreadPoolBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
operator|new
name|ThreadPoolProfile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|defaultProfile (Boolean defaultProfile)
specifier|public
name|ThreadPoolBuilder
name|defaultProfile
parameter_list|(
name|Boolean
name|defaultProfile
parameter_list|)
block|{
name|profile
operator|.
name|setDefaultProfile
argument_list|(
name|defaultProfile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|poolSize (Integer poolSize)
specifier|public
name|ThreadPoolBuilder
name|poolSize
parameter_list|(
name|Integer
name|poolSize
parameter_list|)
block|{
name|profile
operator|.
name|setPoolSize
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxPoolSize (Integer maxPoolSize)
specifier|public
name|ThreadPoolBuilder
name|maxPoolSize
parameter_list|(
name|Integer
name|maxPoolSize
parameter_list|)
block|{
name|profile
operator|.
name|setMaxPoolSize
argument_list|(
name|maxPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|keepAliveTime (Integer keepAliveTime)
specifier|public
name|ThreadPoolBuilder
name|keepAliveTime
parameter_list|(
name|Integer
name|keepAliveTime
parameter_list|)
block|{
name|profile
operator|.
name|setKeepAliveTime
argument_list|(
name|keepAliveTime
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|keepAliveTime (Long keepAliveTime)
specifier|public
name|ThreadPoolBuilder
name|keepAliveTime
parameter_list|(
name|Long
name|keepAliveTime
parameter_list|)
block|{
name|profile
operator|.
name|setKeepAliveTime
argument_list|(
name|keepAliveTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|keepAliveTime (Integer keepAliveTime, TimeUnit timeUnit)
specifier|public
name|ThreadPoolBuilder
name|keepAliveTime
parameter_list|(
name|Integer
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
if|if
condition|(
name|keepAliveTime
operator|!=
literal|null
condition|)
block|{
name|profile
operator|.
name|setKeepAliveTime
argument_list|(
name|keepAliveTime
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|profile
operator|.
name|setTimeUnit
argument_list|(
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|keepAliveTime (Long keepAliveTime, TimeUnit timeUnit)
specifier|public
name|ThreadPoolBuilder
name|keepAliveTime
parameter_list|(
name|Long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|profile
operator|.
name|setKeepAliveTime
argument_list|(
name|keepAliveTime
argument_list|)
expr_stmt|;
name|profile
operator|.
name|setTimeUnit
argument_list|(
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|public
name|ThreadPoolBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|profile
operator|.
name|setTimeUnit
argument_list|(
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxQueueSize (Integer maxQueueSize)
specifier|public
name|ThreadPoolBuilder
name|maxQueueSize
parameter_list|(
name|Integer
name|maxQueueSize
parameter_list|)
block|{
name|profile
operator|.
name|setMaxQueueSize
argument_list|(
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|rejectedPolicy (ThreadPoolRejectedPolicy rejectedPolicy)
specifier|public
name|ThreadPoolBuilder
name|rejectedPolicy
parameter_list|(
name|ThreadPoolRejectedPolicy
name|rejectedPolicy
parameter_list|)
block|{
name|profile
operator|.
name|setRejectedPolicy
argument_list|(
name|rejectedPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|daemon ()
specifier|public
name|ThreadPoolBuilder
name|daemon
parameter_list|()
block|{
name|profile
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|daemon (Boolean daemon)
specifier|public
name|ThreadPoolBuilder
name|daemon
parameter_list|(
name|Boolean
name|daemon
parameter_list|)
block|{
name|profile
operator|.
name|setDaemon
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|threadName (String name)
specifier|public
name|ThreadPoolBuilder
name|threadName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|profile
operator|.
name|setThreadName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ThreadPoolProfile
name|build
parameter_list|()
block|{
return|return
name|this
operator|.
name|profile
return|;
block|}
comment|/**      * Builds the new thread pool      * @deprecated use build instead and fetch the ExecutorService from the ExecutorServiceManager       *      * @param name name which is appended to the thread name      * @return the created thread pool      * @throws Exception is thrown if error building the thread pool      */
annotation|@
name|Deprecated
DECL|method|build (String name)
specifier|public
name|ExecutorService
name|build
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|build
argument_list|(
literal|null
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**      * Builds the new thread pool      * @deprecated use build instead and fetch the ExecutorService from the ExecutorServiceManager      *      * @param source the source object, usually it should be<tt>this</tt> passed in as parameter      * @param name   name which is appended to the thread name      * @return the created thread pool      * @throws Exception is thrown if error building the thread pool      */
annotation|@
name|Deprecated
DECL|method|build (Object source, String name)
specifier|public
name|ExecutorService
name|build
parameter_list|(
name|Object
name|source
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|profile
operator|.
name|setId
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|getExecutorService
argument_list|(
name|profile
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|singleThreadExecutor (String id)
specifier|public
specifier|static
name|ThreadPoolProfile
name|singleThreadExecutor
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|ThreadPoolBuilder
argument_list|(
name|id
argument_list|)
operator|.
name|poolSize
argument_list|(
literal|1
argument_list|)
operator|.
name|maxPoolSize
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|fixedThreadExecutor (String id, int poolSize)
specifier|public
specifier|static
name|ThreadPoolProfile
name|fixedThreadExecutor
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|poolSize
parameter_list|)
block|{
return|return
operator|new
name|ThreadPoolBuilder
argument_list|(
name|id
argument_list|)
operator|.
name|poolSize
argument_list|(
name|poolSize
argument_list|)
operator|.
name|maxPoolSize
argument_list|(
name|poolSize
argument_list|)
operator|.
name|keepAliveTime
argument_list|(
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

