begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A helper class for creating namespaces which can then be used to create XPath expressions  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|NamespaceBuilder
specifier|public
class|class
name|NamespaceBuilder
block|{
DECL|field|namespaces
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|namespaceContext ()
specifier|public
specifier|static
name|NamespaceBuilder
name|namespaceContext
parameter_list|()
block|{
return|return
operator|new
name|NamespaceBuilder
argument_list|()
return|;
block|}
DECL|method|namespaceContext (String prefix, String uri)
specifier|public
specifier|static
name|NamespaceBuilder
name|namespaceContext
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|NamespaceBuilder
argument_list|()
operator|.
name|namespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
return|;
block|}
DECL|method|namespace (String prefix, String uri)
specifier|public
name|NamespaceBuilder
name|namespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|namespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates a new XPath expression using the current namespaces      *      * @param xpath the XPath expression      * @return a new XPath expression      */
DECL|method|xpath (String xpath)
specifier|public
name|XPathBuilder
name|xpath
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
name|XPathBuilder
name|answer
init|=
name|XPathBuilder
operator|.
name|xpath
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|namespaces
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|answer
operator|.
name|namespace
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

