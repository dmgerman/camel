begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * Represents the data type URN which is used for message data type contract.  * Java class doesn't always explain the data type completely, for example XML and JSON  * data format is sometimes serialized as a {@code String}, {@code InputStream} or etc.  * The {@link DataTypeAware} message stores the DataType as a part of the message to carry  * those data type information even if it's marshaled, so that it could be  * leveraged to detect required {@link Transformer} and {@link Validator}.  * DataType consists of two parts, 'model' and 'name'. Its string representation is  * 'model:name' connected with colon. For example 'java:com.example.Order', 'xml:ABCOrder'  * or 'json:XYZOrder'. These type name other than java class name allows the message to  * carry the name of the message data structure even if it's marshaled.  *   * @see {@link DataTypeAware} {@link Transformer} {@link Validator}  */
end_comment

begin_class
DECL|class|DataType
specifier|public
class|class
name|DataType
block|{
DECL|field|JAVA_TYPE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_TYPE_PREFIX
init|=
literal|"java"
decl_stmt|;
DECL|field|model
specifier|private
name|String
name|model
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|isJavaType
specifier|private
name|boolean
name|isJavaType
decl_stmt|;
DECL|field|typeString
specifier|private
name|String
name|typeString
decl_stmt|;
DECL|method|DataType (String urn)
specifier|public
name|DataType
parameter_list|(
name|String
name|urn
parameter_list|)
block|{
if|if
condition|(
name|urn
operator|!=
literal|null
condition|)
block|{
name|String
name|split
index|[]
init|=
name|StringHelper
operator|.
name|splitOnCharacter
argument_list|(
name|urn
argument_list|,
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|model
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
name|isJavaType
operator|=
name|model
operator|.
name|equals
argument_list|(
name|JAVA_TYPE_PREFIX
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|name
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|method|DataType (Class<?> clazz)
specifier|public
name|DataType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|model
operator|=
name|JAVA_TYPE_PREFIX
expr_stmt|;
name|isJavaType
operator|=
literal|true
expr_stmt|;
name|name
operator|=
name|clazz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
DECL|method|getModel ()
specifier|public
name|String
name|getModel
parameter_list|()
block|{
return|return
name|model
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|isJavaType ()
specifier|public
name|boolean
name|isJavaType
parameter_list|()
block|{
return|return
name|isJavaType
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|typeString
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|typeString
operator|=
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|model
operator|+
literal|":"
operator|+
name|name
else|:
name|model
expr_stmt|;
block|}
return|return
name|this
operator|.
name|typeString
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object target)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|instanceof
name|DataType
condition|)
block|{
name|DataType
name|targetdt
init|=
operator|(
name|DataType
operator|)
name|target
decl_stmt|;
name|String
name|targetModel
init|=
name|targetdt
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|String
name|targetName
init|=
name|targetdt
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetModel
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|targetName
operator|==
literal|null
condition|)
block|{
return|return
name|targetModel
operator|.
name|equals
argument_list|(
name|getModel
argument_list|()
argument_list|)
operator|&&
name|getName
argument_list|()
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|targetModel
operator|.
name|equals
argument_list|(
name|getModel
argument_list|()
argument_list|)
operator|&&
name|targetName
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

