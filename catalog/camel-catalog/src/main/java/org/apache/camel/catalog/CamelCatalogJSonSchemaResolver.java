begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * {@link JSonSchemaResolver} used by {@link CamelCatalog} that is able to load all the resources that the complete camel-catalog JAR provides.  */
end_comment

begin_class
DECL|class|CamelCatalogJSonSchemaResolver
specifier|public
class|class
name|CamelCatalogJSonSchemaResolver
implements|implements
name|JSonSchemaResolver
block|{
DECL|field|MODEL_DIR
specifier|private
specifier|static
specifier|final
name|String
name|MODEL_DIR
init|=
literal|"org/apache/camel/catalog/models"
decl_stmt|;
DECL|field|camelCatalog
specifier|private
specifier|final
name|CamelCatalog
name|camelCatalog
decl_stmt|;
comment|// 3rd party components/data-formats
DECL|field|extraComponents
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraComponents
decl_stmt|;
DECL|field|extraComponentsJSonSchema
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraComponentsJSonSchema
decl_stmt|;
DECL|field|extraDataFormats
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraDataFormats
decl_stmt|;
DECL|field|extraDataFormatsJSonSchema
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraDataFormatsJSonSchema
decl_stmt|;
DECL|method|CamelCatalogJSonSchemaResolver (CamelCatalog camelCatalog, Map<String, String> extraComponents, Map<String, String> extraComponentsJSonSchema, Map<String, String> extraDataFormats, Map<String, String> extraDataFormatsJSonSchema)
specifier|public
name|CamelCatalogJSonSchemaResolver
parameter_list|(
name|CamelCatalog
name|camelCatalog
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraComponents
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraComponentsJSonSchema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraDataFormats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraDataFormatsJSonSchema
parameter_list|)
block|{
name|this
operator|.
name|camelCatalog
operator|=
name|camelCatalog
expr_stmt|;
name|this
operator|.
name|extraComponents
operator|=
name|extraComponents
expr_stmt|;
name|this
operator|.
name|extraComponentsJSonSchema
operator|=
name|extraComponentsJSonSchema
expr_stmt|;
name|this
operator|.
name|extraDataFormats
operator|=
name|extraDataFormats
expr_stmt|;
name|this
operator|.
name|extraDataFormatsJSonSchema
operator|=
name|extraDataFormatsJSonSchema
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponentJSonSchema (String name)
specifier|public
name|String
name|getComponentJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
name|file
init|=
name|camelCatalog
operator|.
name|getRuntimeProvider
argument_list|()
operator|.
name|getComponentJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
specifier|final
name|String
name|fromVersionManager
init|=
name|loadResourceFromVersionManager
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromVersionManager
operator|!=
literal|null
condition|)
block|{
return|return
name|fromVersionManager
return|;
block|}
comment|// its maybe a third party so try to see if we have the json schema already
specifier|final
name|String
name|answer
init|=
name|extraComponentsJSonSchema
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
comment|// or if we can load it from the classpath
specifier|final
name|String
name|className
init|=
name|extraComponents
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|loadFromClasspath
argument_list|(
name|className
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatJSonSchema (String name)
specifier|public
name|String
name|getDataFormatJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
name|file
init|=
name|camelCatalog
operator|.
name|getRuntimeProvider
argument_list|()
operator|.
name|getDataFormatJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
specifier|final
name|String
name|fromVersionManager
init|=
name|loadResourceFromVersionManager
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromVersionManager
operator|!=
literal|null
condition|)
block|{
return|return
name|fromVersionManager
return|;
block|}
comment|// its maybe a third party so try to see if we have the json schema already
specifier|final
name|String
name|schema
init|=
name|extraDataFormatsJSonSchema
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
return|return
name|schema
return|;
block|}
comment|// or if we can load it from the classpath
specifier|final
name|String
name|className
init|=
name|extraDataFormats
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|loadFromClasspath
argument_list|(
name|className
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLanguageJSonSchema (String name)
specifier|public
name|String
name|getLanguageJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// if we try to look method then its in the bean.json file
if|if
condition|(
literal|"method"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"bean"
expr_stmt|;
block|}
specifier|final
name|String
name|file
init|=
name|camelCatalog
operator|.
name|getRuntimeProvider
argument_list|()
operator|.
name|getLanguageJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
return|return
name|loadResourceFromVersionManager
argument_list|(
name|file
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getModelJSonSchema (String name)
specifier|public
name|String
name|getModelJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
name|file
init|=
name|MODEL_DIR
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
return|return
name|loadResourceFromVersionManager
argument_list|(
name|file
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOtherJSonSchema (String name)
specifier|public
name|String
name|getOtherJSonSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
name|file
init|=
name|camelCatalog
operator|.
name|getRuntimeProvider
argument_list|()
operator|.
name|getOtherJSonSchemaDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".json"
decl_stmt|;
return|return
name|loadResourceFromVersionManager
argument_list|(
name|file
argument_list|)
return|;
block|}
DECL|method|loadFromClasspath (final String className, final String fileName)
name|String
name|loadFromClasspath
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|String
name|packageName
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|packageName
operator|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|packageName
operator|+
literal|"/"
operator|+
name|fileName
operator|+
literal|".json"
decl_stmt|;
return|return
name|loadResourceFromVersionManager
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadResourceFromVersionManager (final String file)
name|String
name|loadResourceFromVersionManager
parameter_list|(
specifier|final
name|String
name|file
parameter_list|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|camelCatalog
operator|.
name|getVersionManager
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
init|)
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
return|return
name|CatalogHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

