begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.catalog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|CamelCatalogJsonSchemaTest
specifier|public
class|class
name|CamelCatalogJsonSchemaTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelCatalogJsonSchemaTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|catalog
specifier|private
name|CamelCatalog
name|catalog
init|=
operator|new
name|DefaultCamelCatalog
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testValidateJsonComponent ()
specifier|public
name|void
name|testValidateJsonComponent
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|catalog
operator|.
name|findComponentNames
argument_list|()
control|)
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating {} component"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"with JSon: {}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"component"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"componentProperties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
name|validateComponentSyntax
argument_list|(
name|name
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateComponentSyntax (String name, JsonNode tree)
specifier|private
name|void
name|validateComponentSyntax
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|tree
parameter_list|)
block|{
name|String
name|syntax
init|=
name|tree
operator|.
name|get
argument_list|(
literal|"component"
argument_list|)
operator|.
name|get
argument_list|(
literal|"syntax"
argument_list|)
operator|.
name|textValue
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Empty syntax for component "
operator|+
name|name
argument_list|,
name|syntax
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pathProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|requiredProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|it
init|=
name|tree
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|fields
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|property
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"path"
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"kind"
argument_list|)
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|pathProperties
operator|.
name|add
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|requiredProperties
operator|.
name|add
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|syntaxParts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|syntax
operator|.
name|split
argument_list|(
literal|"[/:#.]"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Syntax must start with component name"
argument_list|,
name|name
argument_list|,
name|syntaxParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|part
range|:
name|syntaxParts
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|syntaxParts
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|part
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Component %s. Syntax %s. Part %s is not defined as UriPath"
argument_list|,
name|name
argument_list|,
name|syntax
argument_list|,
name|part
argument_list|)
argument_list|,
name|pathProperties
operator|.
name|contains
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|requiredPart
range|:
name|requiredProperties
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Component %s. Syntax %s. Required param %s is not defined in syntax"
argument_list|,
name|name
argument_list|,
name|syntax
argument_list|,
name|requiredPart
argument_list|)
argument_list|,
name|syntaxParts
operator|.
name|contains
argument_list|(
name|requiredPart
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateJsonDataFormats ()
specifier|public
name|void
name|testValidateJsonDataFormats
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|catalog
operator|.
name|findDataFormatNames
argument_list|()
control|)
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|dataFormatJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating {} dataformat"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"with JSon: {}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"dataformat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateJsonLanguages ()
specifier|public
name|void
name|testValidateJsonLanguages
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|catalog
operator|.
name|findLanguageNames
argument_list|()
control|)
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|languageJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating {} language"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"with JSon: {}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"language"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateJsonModels ()
specifier|public
name|void
name|testValidateJsonModels
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|catalog
operator|.
name|findModelNames
argument_list|()
control|)
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|modelJSonSchema
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating {} model"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"with JSon: {}"
argument_list|,
name|json
argument_list|)
expr_stmt|;
comment|// validate we can parse the json
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|tree
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"model"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|name
argument_list|,
name|tree
operator|.
name|has
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

