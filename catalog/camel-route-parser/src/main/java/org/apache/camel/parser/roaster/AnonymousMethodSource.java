begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.parser.roaster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|roaster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|AnnotationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaDocSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|ParameterSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|TypeVariableSource
import|;
end_import

begin_comment
comment|/**  * In use when we have discovered a RouteBuilder being as anonymous inner class  */
end_comment

begin_class
DECL|class|AnonymousMethodSource
specifier|public
class|class
name|AnonymousMethodSource
implements|implements
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
block|{
comment|// this implementation should only implement the needed logic to support the parser
DECL|field|origin
specifier|private
specifier|final
name|JavaClassSource
name|origin
decl_stmt|;
DECL|field|internal
specifier|private
specifier|final
name|Object
name|internal
decl_stmt|;
DECL|method|AnonymousMethodSource (JavaClassSource origin, Object internal)
specifier|public
name|AnonymousMethodSource
parameter_list|(
name|JavaClassSource
name|origin
parameter_list|,
name|Object
name|internal
parameter_list|)
block|{
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
name|this
operator|.
name|internal
operator|=
name|internal
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDefault (boolean b)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setDefault
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setSynchronized (boolean b)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setSynchronized
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setNative (boolean b)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setNative
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setReturnType (Class<?> aClass)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setReturnType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setReturnType (String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setReturnType
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setReturnType (JavaType<?> javaType)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setReturnType
parameter_list|(
name|JavaType
argument_list|<
name|?
argument_list|>
name|javaType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setReturnTypeVoid ()
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setReturnTypeVoid
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setBody (String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setBody
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setConstructor (boolean b)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setConstructor
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setParameters (String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setParameters
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addThrows (String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addThrows
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addThrows (Class<? extends Exception> aClass)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addThrows
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeThrows (String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeThrows
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeThrows (Class<? extends Exception> aClass)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeThrows
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isSynchronized ()
specifier|public
name|boolean
name|isSynchronized
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isNative ()
specifier|public
name|boolean
name|isNative
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getBody ()
specifier|public
name|String
name|getBody
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isConstructor ()
specifier|public
name|boolean
name|isConstructor
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getReturnType ()
specifier|public
name|Type
argument_list|<
name|JavaClassSource
argument_list|>
name|getReturnType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isReturnTypeVoid ()
specifier|public
name|boolean
name|isReturnTypeVoid
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getParameters ()
specifier|public
name|List
argument_list|<
name|ParameterSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toSignature ()
specifier|public
name|String
name|toSignature
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getThrownExceptions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getThrownExceptions
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isDefault ()
specifier|public
name|boolean
name|isDefault
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|addParameter (Class<?> aClass, String s)
specifier|public
name|ParameterSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addParameter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addParameter (String s, String s1)
specifier|public
name|ParameterSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addParameter
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addParameter (JavaType<?> javaType, String s)
specifier|public
name|ParameterSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addParameter
parameter_list|(
name|JavaType
argument_list|<
name|?
argument_list|>
name|javaType
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeAllAnnotations ()
specifier|public
name|void
name|removeAllAnnotations
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|removeParameter (ParameterSource<JavaClassSource> parameterSource)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeParameter
parameter_list|(
name|ParameterSource
argument_list|<
name|JavaClassSource
argument_list|>
name|parameterSource
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeParameter (Class<?> aClass, String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeParameter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeParameter (String s, String s1)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeParameter
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeParameter (JavaType<?> javaType, String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeParameter
parameter_list|(
name|JavaType
argument_list|<
name|?
argument_list|>
name|javaType
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setAbstract (boolean b)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setAbstract
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAnnotations ()
specifier|public
name|List
argument_list|<
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|getAnnotations
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasAnnotation (Class<? extends Annotation> aClass)
specifier|public
name|boolean
name|hasAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasAnnotation (String s)
specifier|public
name|boolean
name|hasAnnotation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getAnnotation (Class<? extends Annotation> aClass)
specifier|public
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAnnotation (String s)
specifier|public
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|getAnnotation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addAnnotation ()
specifier|public
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addAnnotation
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addAnnotation (Class<? extends Annotation> aClass)
specifier|public
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|aClass
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addAnnotation (String s)
specifier|public
name|AnnotationSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addAnnotation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeAnnotation (org.jboss.forge.roaster.model.Annotation<JavaClassSource> annotation)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeAnnotation
parameter_list|(
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|Annotation
argument_list|<
name|JavaClassSource
argument_list|>
name|annotation
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getTypeVariables ()
specifier|public
name|List
argument_list|<
name|TypeVariableSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|getTypeVariables
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getTypeVariable (String s)
specifier|public
name|TypeVariableSource
argument_list|<
name|JavaClassSource
argument_list|>
name|getTypeVariable
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addTypeVariable ()
specifier|public
name|TypeVariableSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addTypeVariable
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addTypeVariable (String s)
specifier|public
name|TypeVariableSource
argument_list|<
name|JavaClassSource
argument_list|>
name|addTypeVariable
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeTypeVariable (String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeTypeVariable
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeTypeVariable (TypeVariable<?> typeVariable)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasJavaDoc ()
specifier|public
name|boolean
name|hasJavaDoc
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isAbstract ()
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setFinal (boolean b)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setFinal
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isFinal ()
specifier|public
name|boolean
name|isFinal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getInternal ()
specifier|public
name|Object
name|getInternal
parameter_list|()
block|{
return|return
name|internal
return|;
block|}
annotation|@
name|Override
DECL|method|getJavaDoc ()
specifier|public
name|JavaDocSource
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|getJavaDoc
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeJavaDoc ()
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|removeJavaDoc
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setName (String s)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getOrigin ()
specifier|public
name|JavaClassSource
name|getOrigin
parameter_list|()
block|{
return|return
name|origin
return|;
block|}
annotation|@
name|Override
DECL|method|setStatic (boolean b)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setStatic
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isStatic ()
specifier|public
name|boolean
name|isStatic
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setPackagePrivate ()
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setPackagePrivate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setPublic ()
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setPublic
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setPrivate ()
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setPrivate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setProtected ()
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setProtected
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setVisibility (Visibility visibility)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setVisibility
parameter_list|(
name|Visibility
name|visibility
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isPackagePrivate ()
specifier|public
name|boolean
name|isPackagePrivate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isPublic ()
specifier|public
name|boolean
name|isPublic
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isPrivate ()
specifier|public
name|boolean
name|isPrivate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isProtected ()
specifier|public
name|boolean
name|isProtected
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getVisibility ()
specifier|public
name|Visibility
name|getVisibility
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnNumber ()
specifier|public
name|int
name|getColumnNumber
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getStartPosition ()
specifier|public
name|int
name|getStartPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getEndPosition ()
specifier|public
name|int
name|getEndPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getLineNumber ()
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hasTypeVariable (String arg0)
specifier|public
name|boolean
name|hasTypeVariable
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setReturnType (Type<?> arg0)
specifier|public
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|setReturnType
parameter_list|(
name|Type
argument_list|<
name|?
argument_list|>
name|arg0
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

