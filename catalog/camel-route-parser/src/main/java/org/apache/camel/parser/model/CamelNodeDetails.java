begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.parser.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|CamelNodeDetails
specifier|public
class|class
name|CamelNodeDetails
block|{
comment|// source code details
DECL|field|fileName
specifier|private
name|String
name|fileName
decl_stmt|;
DECL|field|lineNumber
specifier|private
name|String
name|lineNumber
decl_stmt|;
DECL|field|lineNumberEnd
specifier|private
name|String
name|lineNumberEnd
decl_stmt|;
DECL|field|linePosition
specifier|private
name|int
name|linePosition
decl_stmt|;
comment|// java source code details
DECL|field|className
specifier|private
name|String
name|className
decl_stmt|;
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
comment|// camel node details
DECL|field|parent
specifier|private
specifier|final
name|CamelNodeDetails
name|parent
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|order
specifier|private
specifier|final
name|int
name|order
decl_stmt|;
DECL|field|outputs
specifier|private
name|List
argument_list|<
name|CamelNodeDetails
argument_list|>
name|outputs
decl_stmt|;
DECL|field|routeId
specifier|private
name|String
name|routeId
decl_stmt|;
DECL|method|CamelNodeDetails (CamelNodeDetails parent, String name, int order, CamelNodeDetails copy)
specifier|public
name|CamelNodeDetails
parameter_list|(
name|CamelNodeDetails
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|order
parameter_list|,
name|CamelNodeDetails
name|copy
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|this
operator|.
name|routeId
operator|=
name|copy
operator|.
name|getRouteId
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|copy
operator|.
name|getFileName
argument_list|()
expr_stmt|;
name|this
operator|.
name|lineNumber
operator|=
name|copy
operator|.
name|getLineNumber
argument_list|()
expr_stmt|;
name|this
operator|.
name|lineNumberEnd
operator|=
name|copy
operator|.
name|getLineNumberEnd
argument_list|()
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|copy
operator|.
name|getClassName
argument_list|()
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
name|copy
operator|.
name|getMethodName
argument_list|()
expr_stmt|;
block|}
DECL|method|CamelNodeDetails (CamelNodeDetails parent, String name, int order)
specifier|public
name|CamelNodeDetails
parameter_list|(
name|CamelNodeDetails
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
DECL|method|addPreliminaryOutput (CamelNodeDetails output)
specifier|public
name|void
name|addPreliminaryOutput
parameter_list|(
name|CamelNodeDetails
name|output
parameter_list|)
block|{
if|if
condition|(
name|outputs
operator|==
literal|null
condition|)
block|{
name|outputs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// the parser walks the EIPs backwards so add from the top
name|outputs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|addOutput (CamelNodeDetails output)
specifier|public
name|void
name|addOutput
parameter_list|(
name|CamelNodeDetails
name|output
parameter_list|)
block|{
if|if
condition|(
name|outputs
operator|==
literal|null
condition|)
block|{
name|outputs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|getParent ()
specifier|public
name|CamelNodeDetails
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getOrder ()
specifier|public
name|int
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
DECL|method|getOutputs ()
specifier|public
name|List
argument_list|<
name|CamelNodeDetails
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
DECL|method|getRouteId ()
specifier|public
name|String
name|getRouteId
parameter_list|()
block|{
return|return
name|routeId
return|;
block|}
DECL|method|setRouteId (String routeId)
specifier|public
name|void
name|setRouteId
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
name|this
operator|.
name|routeId
operator|=
name|routeId
expr_stmt|;
block|}
DECL|method|getFileName ()
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
DECL|method|setFileName (String fileName)
specifier|public
name|void
name|setFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
DECL|method|getLineNumber ()
specifier|public
name|String
name|getLineNumber
parameter_list|()
block|{
return|return
name|lineNumber
return|;
block|}
DECL|method|setLineNumber (String lineNumber)
specifier|public
name|void
name|setLineNumber
parameter_list|(
name|String
name|lineNumber
parameter_list|)
block|{
name|this
operator|.
name|lineNumber
operator|=
name|lineNumber
expr_stmt|;
block|}
DECL|method|getLineNumberEnd ()
specifier|public
name|String
name|getLineNumberEnd
parameter_list|()
block|{
return|return
name|lineNumberEnd
return|;
block|}
DECL|method|setLineNumberEnd (String lineNumberEnd)
specifier|public
name|void
name|setLineNumberEnd
parameter_list|(
name|String
name|lineNumberEnd
parameter_list|)
block|{
name|this
operator|.
name|lineNumberEnd
operator|=
name|lineNumberEnd
expr_stmt|;
block|}
DECL|method|getLinePosition ()
specifier|public
name|int
name|getLinePosition
parameter_list|()
block|{
return|return
name|linePosition
return|;
block|}
DECL|method|setLinePosition (int linePosition)
specifier|public
name|void
name|setLinePosition
parameter_list|(
name|int
name|linePosition
parameter_list|)
block|{
name|this
operator|.
name|linePosition
operator|=
name|linePosition
expr_stmt|;
block|}
DECL|method|getClassName ()
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
DECL|method|setClassName (String className)
specifier|public
name|void
name|setClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|dump (int level)
specifier|public
name|String
name|dump
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lineNumber
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|padString
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputs
operator|!=
literal|null
condition|)
block|{
name|level
operator|++
expr_stmt|;
for|for
control|(
name|CamelNodeDetails
name|child
range|:
name|outputs
control|)
block|{
name|String
name|text
init|=
name|child
operator|.
name|dump
argument_list|(
name|level
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|padString (int level)
specifier|private
specifier|static
name|String
name|padString
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|level
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

