begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.parser
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|helper
operator|.
name|CamelJavaParserHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|helper
operator|.
name|CamelJavaRestDslParserHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|RestConfigurationDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|parser
operator|.
name|model
operator|.
name|RestServiceDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|JavaClassSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|forge
operator|.
name|roaster
operator|.
name|model
operator|.
name|source
operator|.
name|MethodSource
import|;
end_import

begin_comment
comment|/**  * A Camel parser that parses Camel Java Rest DSL source code.  *<p/>  * This implementation is higher level details, and uses the lower level parser {@link CamelJavaRestDslParserHelper}.  */
end_comment

begin_class
DECL|class|RestDslParser
specifier|public
specifier|final
class|class
name|RestDslParser
block|{
DECL|method|RestDslParser ()
specifier|private
name|RestDslParser
parameter_list|()
block|{     }
comment|/**      * Parses the java source class and build a rest configuration model of the discovered rest configurations in the java source class.      *      * @param clazz                   the java source class      * @param baseDir                 the base of the source code      * @param fullyQualifiedFileName  the fully qualified source code file name      * @return a list of rest configurations (often there is only one)      */
DECL|method|parseRestConfiguration (JavaClassSource clazz, String baseDir, String fullyQualifiedFileName, boolean includeInlinedRouteBuilders)
specifier|public
specifier|static
name|List
argument_list|<
name|RestConfigurationDetails
argument_list|>
name|parseRestConfiguration
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|String
name|baseDir
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|boolean
name|includeInlinedRouteBuilders
parameter_list|)
block|{
name|List
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
init|=
name|CamelJavaParserHelper
operator|.
name|findConfigureMethod
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|methods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInlinedRouteBuilders
condition|)
block|{
name|List
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|inlinedMethods
init|=
name|CamelJavaParserHelper
operator|.
name|findInlinedConfigureMethods
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inlinedMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|methods
operator|.
name|addAll
argument_list|(
name|inlinedMethods
argument_list|)
expr_stmt|;
block|}
block|}
name|CamelJavaRestDslParserHelper
name|parser
init|=
operator|new
name|CamelJavaRestDslParserHelper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RestConfigurationDetails
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
range|:
name|methods
control|)
block|{
comment|// there may be multiple route builder configure methods
name|List
argument_list|<
name|RestConfigurationDetails
argument_list|>
name|details
init|=
name|parser
operator|.
name|parseRestConfiguration
argument_list|(
name|clazz
argument_list|,
name|baseDir
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|configureMethod
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|details
argument_list|)
expr_stmt|;
block|}
comment|// we end up parsing bottom->up so reverse list
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|/**      * Parses the java source class and build a rest service model of the discovered rest services in the java source class.      *      * @param clazz                   the java source class      * @param baseDir                 the base of the source code      * @param fullyQualifiedFileName  the fully qualified source code file name      * @return a list of rest services      */
DECL|method|parseRestService (JavaClassSource clazz, String baseDir, String fullyQualifiedFileName, boolean includeInlinedRouteBuilders)
specifier|public
specifier|static
name|List
argument_list|<
name|RestServiceDetails
argument_list|>
name|parseRestService
parameter_list|(
name|JavaClassSource
name|clazz
parameter_list|,
name|String
name|baseDir
parameter_list|,
name|String
name|fullyQualifiedFileName
parameter_list|,
name|boolean
name|includeInlinedRouteBuilders
parameter_list|)
block|{
name|List
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|method
init|=
name|CamelJavaParserHelper
operator|.
name|findConfigureMethod
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|methods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeInlinedRouteBuilders
condition|)
block|{
name|List
argument_list|<
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
argument_list|>
name|inlinedMethods
init|=
name|CamelJavaParserHelper
operator|.
name|findInlinedConfigureMethods
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inlinedMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|methods
operator|.
name|addAll
argument_list|(
name|inlinedMethods
argument_list|)
expr_stmt|;
block|}
block|}
name|CamelJavaRestDslParserHelper
name|parser
init|=
operator|new
name|CamelJavaRestDslParserHelper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RestServiceDetails
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MethodSource
argument_list|<
name|JavaClassSource
argument_list|>
name|configureMethod
range|:
name|methods
control|)
block|{
comment|// there may be multiple route builder configure methods
name|List
argument_list|<
name|RestServiceDetails
argument_list|>
name|details
init|=
name|parser
operator|.
name|parseRestService
argument_list|(
name|clazz
argument_list|,
name|baseDir
argument_list|,
name|fullyQualifiedFileName
argument_list|,
name|configureMethod
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|details
argument_list|)
expr_stmt|;
block|}
comment|// we end up parsing bottom->up so reverse list
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

