begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|RepositorySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|mojo
operator|.
name|exec
operator|.
name|AbstractExecMojo
import|;
end_import

begin_comment
comment|/**  * Base class for maven goals.  */
end_comment

begin_class
DECL|class|AbstractMainMojo
specifier|public
specifier|abstract
class|class
name|AbstractMainMojo
extends|extends
name|AbstractExecMojo
block|{
comment|/**      * Whether to log the classpath when starting      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.logClasspath"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|logClasspath
specifier|protected
name|boolean
name|logClasspath
decl_stmt|;
comment|/**      * Whether to allow downloading Camel catalog version from the internet. This is needed if the project      * uses a different Camel version than this plugin is using by default.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.downloadVersion"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|downloadVersion
specifier|protected
name|boolean
name|downloadVersion
decl_stmt|;
DECL|field|classLoader
specifier|protected
specifier|transient
name|ClassLoader
name|classLoader
decl_stmt|;
annotation|@
name|Component
DECL|field|repositorySystem
specifier|private
name|RepositorySystem
name|repositorySystem
decl_stmt|;
annotation|@
name|Component
DECL|field|artifactResolver
specifier|private
name|ArtifactResolver
name|artifactResolver
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"localRepository"
argument_list|)
DECL|field|localRepository
specifier|private
name|ArtifactRepository
name|localRepository
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project.remoteArtifactRepositories"
argument_list|)
DECL|field|remoteRepositories
specifier|private
name|List
name|remoteRepositories
decl_stmt|;
DECL|method|findCamelVersion (MavenProject project)
specifier|protected
specifier|static
name|String
name|findCamelVersion
parameter_list|(
name|MavenProject
name|project
parameter_list|)
block|{
name|Dependency
name|candidate
init|=
literal|null
decl_stmt|;
name|List
name|list
init|=
name|project
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"org.apache.camel"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"camel-core"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// favor camel-core
name|candidate
operator|=
name|dep
expr_stmt|;
break|break;
block|}
else|else
block|{
name|candidate
operator|=
name|dep
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
return|return
name|candidate
operator|.
name|getVersion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|resolveCamelComponentsFromClasspath ()
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|resolveCamelComponentsFromClasspath
parameter_list|()
throws|throws
name|MojoFailureException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|classLoader
operator|=
name|getClassLoader
argument_list|()
expr_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|en
init|=
name|classLoader
operator|.
name|getResources
argument_list|(
literal|"META-INF/services/org/apache/camel/component.properties"
argument_list|)
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|(
name|InputStream
operator|)
name|url
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|prop
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|comps
init|=
name|prop
operator|.
name|getProperty
argument_list|(
literal|"components"
argument_list|)
decl_stmt|;
if|if
condition|(
name|comps
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|comps
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|components
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error during discovering Camel components from classpath due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|components
return|;
block|}
comment|/**      * Set up a classloader for scanning      */
DECL|method|getClassLoader ()
specifier|private
name|ClassLoader
name|getClassLoader
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|MojoExecutionException
block|{
name|Set
argument_list|<
name|URL
argument_list|>
name|classpathURLs
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// add project classpath
name|URL
name|mainClasses
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getOutputDirectory
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|classpathURLs
operator|.
name|add
argument_list|(
name|mainClasses
argument_list|)
expr_stmt|;
comment|// add maven dependencies
name|Set
argument_list|<
name|Artifact
argument_list|>
name|deps
init|=
name|project
operator|.
name|getArtifacts
argument_list|()
decl_stmt|;
name|deps
operator|.
name|addAll
argument_list|(
name|getAllNonTestScopedDependencies
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|dep
range|:
name|deps
control|)
block|{
name|File
name|file
init|=
name|dep
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|classpathURLs
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logClasspath
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Classpath:"
argument_list|)
expr_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|classpathURLs
control|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|URLClassLoader
argument_list|(
name|classpathURLs
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|classpathURLs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAllNonTestScopedDependencies ()
specifier|private
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|getAllNonTestScopedDependencies
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|Artifact
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|getAllDependencies
argument_list|()
control|)
block|{
comment|// do not add test artifacts
if|if
condition|(
operator|!
name|artifact
operator|.
name|getScope
argument_list|()
operator|.
name|equals
argument_list|(
name|Artifact
operator|.
name|SCOPE_TEST
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"google-collections"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip this as we conflict with guava
continue|continue;
block|}
if|if
condition|(
operator|!
name|artifact
operator|.
name|isResolved
argument_list|()
condition|)
block|{
name|ArtifactResolutionRequest
name|req
init|=
operator|new
name|ArtifactResolutionRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|req
operator|.
name|setResolveTransitively
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|req
operator|.
name|setLocalRepository
argument_list|(
name|localRepository
argument_list|)
expr_stmt|;
name|req
operator|.
name|setRemoteRepositories
argument_list|(
name|remoteRepositories
argument_list|)
expr_stmt|;
name|artifactResolver
operator|.
name|resolve
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|// generic method to retrieve all the transitive dependencies
DECL|method|getAllDependencies ()
specifier|private
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|getAllDependencies
parameter_list|()
block|{
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|dependencies
init|=
name|project
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dependencies
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|dependencies
operator|.
name|next
argument_list|()
decl_stmt|;
name|Artifact
name|art
init|=
name|repositorySystem
operator|.
name|createDependencyArtifact
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|art
argument_list|)
expr_stmt|;
block|}
return|return
name|artifacts
return|;
block|}
block|}
end_class

end_unit

