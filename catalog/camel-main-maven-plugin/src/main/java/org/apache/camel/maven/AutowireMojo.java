begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|CamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|DefaultCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|JSonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|maven
operator|.
name|MavenVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ExcludesArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|InvalidVersionSpecificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Exclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|mojo
operator|.
name|exec
operator|.
name|AbstractExecMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reflections
operator|.
name|Reflections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reflections
operator|.
name|scanners
operator|.
name|SubTypesScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reflections
operator|.
name|util
operator|.
name|ClasspathHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reflections
operator|.
name|util
operator|.
name|ConfigurationBuilder
import|;
end_import

begin_comment
comment|/**  * Pre scans your project and prepare autowiring by classpath scanning  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"autowire"
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE
argument_list|)
DECL|class|AutowireMojo
specifier|public
class|class
name|AutowireMojo
extends|extends
name|AbstractExecMojo
block|{
comment|/**      * Whether to allow downloading Camel catalog version from the internet. This is needed if the project      * uses a different Camel version than this plugin is using by default.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.downloadVersion"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|downloadVersion
specifier|private
name|boolean
name|downloadVersion
decl_stmt|;
comment|/**      * Whether to log the classpath when starting      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.logClasspath"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|logClasspath
specifier|protected
name|boolean
name|logClasspath
decl_stmt|;
annotation|@
name|Component
DECL|field|artifactFactory
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
annotation|@
name|Component
DECL|field|artifactResolver
specifier|private
name|ArtifactResolver
name|artifactResolver
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"localRepository"
argument_list|)
DECL|field|localRepository
specifier|private
name|ArtifactRepository
name|localRepository
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"project.remoteArtifactRepositories"
argument_list|)
DECL|field|remoteRepositories
specifier|private
name|List
name|remoteRepositories
decl_stmt|;
DECL|field|classLoader
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
comment|// CHECKSTYLE:OFF
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|CamelCatalog
name|catalog
init|=
operator|new
name|DefaultCamelCatalog
argument_list|()
decl_stmt|;
comment|// add activemq as known component
name|catalog
operator|.
name|addComponent
argument_list|(
literal|"activemq"
argument_list|,
literal|"org.apache.activemq.camel.component.ActiveMQComponent"
argument_list|)
expr_stmt|;
comment|// enable loading other catalog versions dynamically
name|catalog
operator|.
name|setVersionManager
argument_list|(
operator|new
name|MavenVersionManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// enable caching
name|catalog
operator|.
name|enableCache
argument_list|()
expr_stmt|;
name|String
name|detectedVersion
init|=
name|findCamelVersion
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|detectedVersion
operator|!=
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Detected Camel version used in project: "
operator|+
name|detectedVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|downloadVersion
condition|)
block|{
name|String
name|catalogVersion
init|=
name|catalog
operator|.
name|getCatalogVersion
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|findCamelVersion
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
operator|!
name|version
operator|.
name|equals
argument_list|(
name|catalogVersion
argument_list|)
condition|)
block|{
comment|// the project uses a different Camel version so attempt to load it
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Downloading Camel version: "
operator|+
name|version
argument_list|)
expr_stmt|;
name|boolean
name|loaded
init|=
name|catalog
operator|.
name|loadVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Error downloading Camel version: "
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|catalog
operator|.
name|getLoadedVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Pre-scanning using downloaded Camel version: "
operator|+
name|catalog
operator|.
name|getLoadedVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Pre-scanning using Camel version: "
operator|+
name|catalog
operator|.
name|getCatalogVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// find all Camel components on classpath and check in the camel-catalog for all component options
comment|// then check each option if its a complex type and an interface
comment|// and if so scan class-path and find the single class implementing this interface
comment|// write this to META-INF/services/org/apache/camel/autowire-by-classpath
comment|// find all Camel components on classpath
name|Set
argument_list|<
name|String
argument_list|>
name|components
init|=
name|resolveCamelComponentsFromClasspath
argument_list|()
decl_stmt|;
if|if
condition|(
name|components
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"No Camel components discovered in classpath"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Discovered "
operator|+
name|components
operator|.
name|size
argument_list|()
operator|+
literal|" Camel components from classpath: "
operator|+
name|components
argument_list|)
expr_stmt|;
block|}
name|Reflections
name|reflections
init|=
operator|new
name|Reflections
argument_list|(
operator|new
name|ConfigurationBuilder
argument_list|()
operator|.
name|addUrls
argument_list|(
name|ClasspathHelper
operator|.
name|forClassLoader
argument_list|(
name|classLoader
argument_list|)
argument_list|)
operator|.
name|addClassLoader
argument_list|(
name|classLoader
argument_list|)
operator|.
name|setScanners
argument_list|(
operator|new
name|SubTypesScanner
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|autowires
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|componentName
range|:
name|components
control|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Autowiring Camel component: "
operator|+
name|componentName
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot find component JSon metadata for component: "
operator|+
name|componentName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|JSonSchemaHelper
operator|.
name|getNames
argument_list|(
name|rows
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|row
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|safeJavaType
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"object"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// resolve javatype as class
try|try
block|{
name|Class
name|clazz
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|reflections
operator|.
name|getSubTypesOf
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
comment|// filter classes to not be interfaces or not a top level class
name|classes
operator|=
name|classes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
operator|!
name|c
operator|.
name|isInterface
argument_list|()
operator|&&
name|c
operator|.
name|getEnclosingClass
argument_list|()
operator|==
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Class
name|cls
init|=
name|classes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isValidAutowireClass
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|String
name|line
init|=
literal|"camel.component."
operator|+
name|componentName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"=#class:"
operator|+
name|cls
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|autowires
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|classes
operator|.
name|size
argument_list|()
operator|+
literal|" for autowire: "
operator|+
name|componentName
operator|+
literal|"."
operator|+
name|name
operator|+
literal|" -> "
operator|+
name|classes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot load class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|autowires
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// write the file
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|""
operator|+
name|autowires
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isValidAutowireClass (Class clazz)
specifier|protected
name|boolean
name|isValidAutowireClass
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
comment|// skip all from Apache Camel as they would be default anyway
return|return
operator|!
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel"
argument_list|)
return|;
block|}
DECL|method|safeJavaType (String javaType)
specifier|protected
name|String
name|safeJavaType
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
name|int
name|pos
init|=
name|javaType
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
return|return
name|javaType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
return|;
block|}
return|return
name|javaType
return|;
block|}
comment|// autowire
comment|// quartz2.xxxx=ddddd.
comment|//
DECL|method|resolveCamelComponentsFromClasspath ()
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|resolveCamelComponentsFromClasspath
parameter_list|()
throws|throws
name|MojoFailureException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|classLoader
operator|=
name|getClassLoader
argument_list|()
expr_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|en
init|=
name|classLoader
operator|.
name|getResources
argument_list|(
literal|"META-INF/services/org/apache/camel/component.properties"
argument_list|)
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|(
name|InputStream
operator|)
name|url
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|prop
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|comps
init|=
name|prop
operator|.
name|getProperty
argument_list|(
literal|"components"
argument_list|)
decl_stmt|;
if|if
condition|(
name|comps
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|comps
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|components
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// error
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error during scanning"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|components
return|;
block|}
DECL|method|findCamelVersion (MavenProject project)
specifier|private
specifier|static
name|String
name|findCamelVersion
parameter_list|(
name|MavenProject
name|project
parameter_list|)
block|{
name|Dependency
name|candidate
init|=
literal|null
decl_stmt|;
name|List
name|list
init|=
name|project
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|Dependency
name|dep
init|=
operator|(
name|Dependency
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"org.apache.camel"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"camel-core"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// favor camel-core
name|candidate
operator|=
name|dep
expr_stmt|;
break|break;
block|}
else|else
block|{
name|candidate
operator|=
name|dep
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
return|return
name|candidate
operator|.
name|getVersion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Set up a classloader for scanning      */
DECL|method|getClassLoader ()
specifier|private
name|ClassLoader
name|getClassLoader
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|MojoExecutionException
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|deps
init|=
name|project
operator|.
name|getArtifacts
argument_list|()
decl_stmt|;
name|deps
operator|.
name|addAll
argument_list|(
name|getAllNonTestScopedDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|URL
argument_list|>
name|classpathURLs
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|dep
range|:
name|deps
control|)
block|{
name|File
name|file
init|=
name|dep
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|classpathURLs
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logClasspath
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Classpath:"
argument_list|)
expr_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|classpathURLs
control|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|url
operator|.
name|getFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|URLClassLoader
argument_list|(
name|classpathURLs
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|classpathURLs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAllNonTestScopedDependencies ()
specifier|private
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|getAllNonTestScopedDependencies
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|Artifact
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|getAllDependencies
argument_list|()
control|)
block|{
comment|// do not add test artifacts
if|if
condition|(
operator|!
name|artifact
operator|.
name|getScope
argument_list|()
operator|.
name|equals
argument_list|(
name|Artifact
operator|.
name|SCOPE_TEST
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"google-collections"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
comment|// skip this as we conflict with guava
continue|continue;
block|}
if|if
condition|(
operator|!
name|artifact
operator|.
name|isResolved
argument_list|()
condition|)
block|{
name|ArtifactResolutionRequest
name|req
init|=
operator|new
name|ArtifactResolutionRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|req
operator|.
name|setResolveTransitively
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|req
operator|.
name|setLocalRepository
argument_list|(
name|localRepository
argument_list|)
expr_stmt|;
name|req
operator|.
name|setRemoteRepositories
argument_list|(
name|remoteRepositories
argument_list|)
expr_stmt|;
name|artifactResolver
operator|.
name|resolve
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|// generic method to retrieve all the transitive dependencies
DECL|method|getAllDependencies ()
specifier|private
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|getAllDependencies
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|dependencies
init|=
name|project
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dependencies
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|dependencies
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|groupId
init|=
name|dependency
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
name|String
name|artifactId
init|=
name|dependency
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|VersionRange
name|versionRange
decl_stmt|;
try|try
block|{
name|versionRange
operator|=
name|VersionRange
operator|.
name|createFromVersionSpec
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidVersionSpecificationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"unable to parse version"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|type
init|=
name|dependency
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
literal|"jar"
expr_stmt|;
block|}
name|String
name|classifier
init|=
name|dependency
operator|.
name|getClassifier
argument_list|()
decl_stmt|;
name|boolean
name|optional
init|=
name|dependency
operator|.
name|isOptional
argument_list|()
decl_stmt|;
name|String
name|scope
init|=
name|dependency
operator|.
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
block|{
name|scope
operator|=
name|Artifact
operator|.
name|SCOPE_COMPILE
expr_stmt|;
block|}
name|Artifact
name|art
init|=
name|this
operator|.
name|artifactFactory
operator|.
name|createDependencyArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|versionRange
argument_list|,
name|type
argument_list|,
name|classifier
argument_list|,
name|scope
argument_list|,
literal|null
argument_list|,
name|optional
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|.
name|equalsIgnoreCase
argument_list|(
name|Artifact
operator|.
name|SCOPE_SYSTEM
argument_list|)
condition|)
block|{
name|art
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
name|dependency
operator|.
name|getSystemPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|exclusions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exclusion
name|exclusion
range|:
name|dependency
operator|.
name|getExclusions
argument_list|()
control|)
block|{
name|exclusions
operator|.
name|add
argument_list|(
name|exclusion
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|exclusion
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArtifactFilter
name|newFilter
init|=
operator|new
name|ExcludesArtifactFilter
argument_list|(
name|exclusions
argument_list|)
decl_stmt|;
name|art
operator|.
name|setDependencyFilter
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|art
argument_list|)
expr_stmt|;
block|}
return|return
name|artifacts
return|;
block|}
block|}
end_class

end_unit

