begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|catalog
operator|.
name|JSonSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_comment
comment|/**  * Pre scans your project and builds spring boot tooling metafiles which fools tools to  * offer code completion for editing properties files.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"spring-boot-tooling"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PROCESS_CLASSES
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE
argument_list|)
DECL|class|SpringBootToolingMojo
specifier|public
class|class
name|SpringBootToolingMojo
extends|extends
name|AbstractMainMojo
block|{
comment|/**      * The output directory for generated spring boot tooling file      */
annotation|@
name|Parameter
argument_list|(
name|readonly
operator|=
literal|true
argument_list|,
name|defaultValue
operator|=
literal|"${project.build.directory}/../src/main/resources/META-INF/"
argument_list|)
DECL|field|outFolder
specifier|protected
name|File
name|outFolder
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|// perform common tasks
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// load camel-main metadata
name|String
name|mainJson
init|=
name|loadCamelMainConfigurationMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|mainJson
operator|==
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Cannot load camel-main-configuration-metadata.json from within the camel-main JAR from the classpath."
operator|+
literal|" Not possible to build spring boot configuration file for this project"
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|componentData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|componentName
range|:
name|camelComponentsOnClasspath
control|)
block|{
name|String
name|json
init|=
name|catalog
operator|.
name|componentJSonSchema
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Cannot find component JSon metadata for component: "
operator|+
name|componentName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|rows
init|=
name|JSonSchemaHelper
operator|.
name|parseJsonSchema
argument_list|(
literal|"componentProperties"
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|JSonSchemaHelper
operator|.
name|getNames
argument_list|(
name|rows
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|row
init|=
name|JSonSchemaHelper
operator|.
name|getRow
argument_list|(
name|rows
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|springBootJavaType
argument_list|(
name|safeJavaType
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|"javaType"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|row
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
operator|.
name|get
argument_list|(
literal|"defaultValue"
argument_list|)
decl_stmt|;
comment|// we want to use dash in the name
name|String
name|dash
init|=
name|camelCaseToDash
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|key
init|=
literal|"camel.component."
operator|+
name|componentName
operator|+
literal|"."
operator|+
name|dash
decl_stmt|;
name|componentData
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|key
block|,
name|javaType
block|,
name|desc
block|,
name|defaultValue
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|componentData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|componentData
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|row
init|=
name|componentData
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|row
index|[
literal|0
index|]
decl_stmt|;
name|String
name|javaType
init|=
name|row
index|[
literal|1
index|]
decl_stmt|;
name|String
name|desc
init|=
name|row
index|[
literal|2
index|]
decl_stmt|;
name|String
name|defaultValue
init|=
name|row
index|[
literal|3
index|]
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"      \"name\": \""
operator|+
name|name
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"      \"type\": \""
operator|+
name|javaType
operator|+
literal|"\",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"      \"description\": \""
operator|+
name|desc
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|springBootDefaultValueQuotes
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"      \"defaultValue\": \""
operator|+
name|defaultValue
operator|+
literal|"\"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"      \"defaultValue\": "
operator|+
name|defaultValue
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|componentData
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    },\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"  ]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// okay then add the components into the main json at the end so they get merged together
name|int
name|pos
init|=
name|mainJson
operator|.
name|lastIndexOf
argument_list|(
literal|"    }"
argument_list|)
decl_stmt|;
name|String
name|newJson
init|=
name|mainJson
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|newJson
operator|=
name|newJson
operator|+
literal|"    },\n"
expr_stmt|;
name|newJson
operator|=
name|newJson
operator|+
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|outFolder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|outFolder
argument_list|,
literal|"spring-configuration-metadata.json"
argument_list|)
decl_stmt|;
try|try
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|newJson
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created file: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Cannot write to file "
operator|+
name|file
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|camelCaseToDash (String name)
specifier|private
specifier|static
name|String
name|camelCaseToDash
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// somme words we dont want ID -> i-d, but keep it as id
name|String
name|answer
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"-i-d-"
argument_list|,
literal|"-id-"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"-u-r-i-"
argument_list|,
literal|"-uri-"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"-u-r-l-"
argument_list|,
literal|"-url-"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"-j-m-s-"
argument_list|,
literal|"-jms-"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceAll
argument_list|(
literal|"-j-m-x-"
argument_list|,
literal|"-jmx-"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"-i-d$"
argument_list|,
literal|"-id"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"-u-r-i$"
argument_list|,
literal|"-uri"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"-u-r-l$"
argument_list|,
literal|"-url"
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|springBootJavaType (String javaType)
specifier|private
specifier|static
name|String
name|springBootJavaType
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
if|if
condition|(
literal|"boolean"
operator|.
name|equalsIgnoreCase
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|"java.lang.Boolean"
return|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equalsIgnoreCase
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|"java.lang.Integer"
return|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equalsIgnoreCase
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|"java.lang.Long"
return|;
block|}
elseif|else
if|if
condition|(
literal|"string"
operator|.
name|equalsIgnoreCase
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|"java.lang.String"
return|;
block|}
return|return
name|javaType
return|;
block|}
DECL|method|springBootDefaultValueQuotes (String javaType)
specifier|private
specifier|static
name|boolean
name|springBootDefaultValueQuotes
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
if|if
condition|(
literal|"java.lang.Boolean"
operator|.
name|equalsIgnoreCase
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Integer"
operator|.
name|equalsIgnoreCase
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Long"
operator|.
name|equalsIgnoreCase
argument_list|(
name|javaType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|loadCamelMainConfigurationMetadata ()
specifier|protected
name|String
name|loadCamelMainConfigurationMetadata
parameter_list|()
throws|throws
name|MojoFailureException
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/camel-main-configuration-metadata.json"
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|IOHelper
operator|.
name|loadText
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Error during discovering camel-main from classpath due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

