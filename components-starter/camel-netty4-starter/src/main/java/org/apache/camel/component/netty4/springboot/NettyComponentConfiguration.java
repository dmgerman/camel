begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EventExecutorGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|ClientInitializerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyServerBootstrapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|ServerInitializerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|TextLineDelimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|DeprecatedConfigurationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|NestedConfigurationProperty
import|;
end_import

begin_comment
comment|/**  * Socket level networking using TCP or UDP with the Netty 4.x library.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.netty4"
argument_list|)
DECL|class|NettyComponentConfiguration
specifier|public
class|class
name|NettyComponentConfiguration
block|{
comment|/**      * The thread pool size for the EventExecutorGroup if its in use. The      * default value is 16.      */
DECL|field|maximumPoolSize
specifier|private
name|Integer
name|maximumPoolSize
decl_stmt|;
comment|/**      * To use the NettyConfiguration as configuration when creating endpoints.      */
DECL|field|configuration
specifier|private
name|NettyConfigurationNestedConfiguration
name|configuration
decl_stmt|;
comment|/**      * To use the given EventExecutorGroup      */
annotation|@
name|NestedConfigurationProperty
DECL|field|executorService
specifier|private
name|EventExecutorGroup
name|executorService
decl_stmt|;
DECL|method|getMaximumPoolSize ()
specifier|public
name|Integer
name|getMaximumPoolSize
parameter_list|()
block|{
return|return
name|maximumPoolSize
return|;
block|}
DECL|method|setMaximumPoolSize (Integer maximumPoolSize)
specifier|public
name|void
name|setMaximumPoolSize
parameter_list|(
name|Integer
name|maximumPoolSize
parameter_list|)
block|{
name|this
operator|.
name|maximumPoolSize
operator|=
name|maximumPoolSize
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|NettyConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( NettyConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|NettyConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getExecutorService ()
specifier|public
name|EventExecutorGroup
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
DECL|method|setExecutorService (EventExecutorGroup executorService)
specifier|public
name|void
name|setExecutorService
parameter_list|(
name|EventExecutorGroup
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
DECL|class|NettyConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|NettyConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|NettyConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * Allows to use a timeout for the Netty producer when calling a remote          * server. By default no timeout is in use. The value is in milli          * seconds, so eg 30000 is 30 seconds. The requestTimeout is using          * Netty's ReadTimeoutHandler to trigger the timeout.          */
DECL|field|requestTimeout
specifier|private
name|Long
name|requestTimeout
decl_stmt|;
comment|/**          * Setting to set endpoint as one-way or request-response          */
DECL|field|sync
specifier|private
name|Boolean
name|sync
decl_stmt|;
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          */
DECL|field|textline
specifier|private
name|Boolean
name|textline
decl_stmt|;
comment|/**          * The max line length to use for the textline codec.          */
DECL|field|decoderMaxLineLength
specifier|private
name|Integer
name|decoderMaxLineLength
decl_stmt|;
comment|/**          * The delimiter to use for the textline codec. Possible values are LINE          * and NULL.          */
DECL|field|delimiter
specifier|private
name|TextLineDelimiter
name|delimiter
init|=
name|TextLineDelimiter
operator|.
name|LINE
decl_stmt|;
comment|/**          * Whether or not to auto append missing end delimiter when sending          * using the textline codec.          */
DECL|field|autoAppendDelimiter
specifier|private
name|Boolean
name|autoAppendDelimiter
decl_stmt|;
comment|/**          * The encoding (a charset name) to use for the textline codec. If not          * provided, Camel will use the JVM default Charset.          */
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          */
DECL|field|decoders
specifier|private
name|List
name|decoders
decl_stmt|;
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          */
DECL|field|encoders
specifier|private
name|List
name|encoders
decl_stmt|;
comment|/**          * A custom ChannelHandler class that can be used to perform special          * marshalling of outbound payloads.          */
annotation|@
name|Deprecated
DECL|field|encoder
specifier|private
name|ChannelHandler
name|encoder
decl_stmt|;
comment|/**          * A custom ChannelHandler class that can be used to perform special          * marshalling of inbound payloads.          */
annotation|@
name|Deprecated
DECL|field|decoder
specifier|private
name|ChannelHandler
name|decoder
decl_stmt|;
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          */
DECL|field|disconnect
specifier|private
name|Boolean
name|disconnect
decl_stmt|;
comment|/**          * Channels can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          */
DECL|field|lazyChannelCreation
specifier|private
name|Boolean
name|lazyChannelCreation
decl_stmt|;
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          */
DECL|field|transferExchange
specifier|private
name|Boolean
name|transferExchange
decl_stmt|;
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          */
DECL|field|allowSerializedHeaders
specifier|private
name|Boolean
name|allowSerializedHeaders
decl_stmt|;
comment|/**          * If sync is enabled then this option dictates NettyConsumer if it          * should disconnect where there is no reply to send back.          */
DECL|field|disconnectOnNoReply
specifier|private
name|Boolean
name|disconnectOnNoReply
decl_stmt|;
comment|/**          * If sync is enabled this option dictates NettyConsumer which logging          * level to use when logging a there is no reply to send back.          */
DECL|field|noReplyLogLevel
specifier|private
name|LoggingLevel
name|noReplyLogLevel
init|=
name|LoggingLevel
operator|.
name|WARN
decl_stmt|;
comment|/**          * If the server (NettyConsumer) catches an exception then its logged          * using this logging level.          */
DECL|field|serverExceptionCaughtLogLevel
specifier|private
name|LoggingLevel
name|serverExceptionCaughtLogLevel
init|=
name|LoggingLevel
operator|.
name|WARN
decl_stmt|;
comment|/**          * If the server (NettyConsumer) catches an          * java.nio.channels.ClosedChannelException then its logged using this          * logging level. This is used to avoid logging the closed channel          * exceptions, as clients can disconnect abruptly and then cause a flood          * of closed exceptions in the Netty server.          */
DECL|field|serverClosedChannelExceptionCaughtLogLevel
specifier|private
name|LoggingLevel
name|serverClosedChannelExceptionCaughtLogLevel
init|=
name|LoggingLevel
operator|.
name|DEBUG
decl_stmt|;
comment|/**          * The netty component installs a default codec if both, encoder/deocder          * is null and textline is false. Setting allowDefaultCodec to false          * prevents the netty component from installing a default codec as the          * first element in the filter chain.          */
DECL|field|allowDefaultCodec
specifier|private
name|Boolean
name|allowDefaultCodec
decl_stmt|;
comment|/**          * @deprecated use #setClientInitializerFactory          */
annotation|@
name|Deprecated
DECL|field|clientPipelineFactory
specifier|private
name|ClientInitializerFactory
name|clientPipelineFactory
decl_stmt|;
comment|/**          * To use a custom ClientInitializerFactory          */
DECL|field|clientInitializerFactory
specifier|private
name|ClientInitializerFactory
name|clientInitializerFactory
decl_stmt|;
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          */
DECL|field|usingExecutorService
specifier|private
name|Boolean
name|usingExecutorService
decl_stmt|;
comment|/**          * Sets the cap on the number of objects that can be allocated by the          * pool (checked out to clients, or idle awaiting checkout) at a given          * time. Use a negative value for no limit.          */
DECL|field|producerPoolMaxActive
specifier|private
name|Integer
name|producerPoolMaxActive
decl_stmt|;
comment|/**          * Sets the minimum number of instances allowed in the producer pool          * before the evictor thread (if active) spawns new objects.          */
DECL|field|producerPoolMinIdle
specifier|private
name|Integer
name|producerPoolMinIdle
decl_stmt|;
comment|/**          * Sets the cap on the number of "idle" instances in the pool.          */
DECL|field|producerPoolMaxIdle
specifier|private
name|Integer
name|producerPoolMaxIdle
decl_stmt|;
comment|/**          * Sets the minimum amount of time (value in millis) an object may sit          * idle in the pool before it is eligible for eviction by the idle          * object evictor.          */
DECL|field|producerPoolMinEvictableIdle
specifier|private
name|Long
name|producerPoolMinEvictableIdle
decl_stmt|;
comment|/**          * Whether producer pool is enabled or not. Important: Do not turn this          * off, as the pooling is needed for handling concurrency and reliable          * request/reply.          */
DECL|field|producerPoolEnabled
specifier|private
name|Boolean
name|producerPoolEnabled
decl_stmt|;
comment|/**          * This option supports connection less udp sending which is a real fire          * and forget. A connected udp send receive the PortUnreachableException          * if no one is listen on the receiving port.          */
DECL|field|udpConnectionlessSending
specifier|private
name|Boolean
name|udpConnectionlessSending
decl_stmt|;
comment|/**          * If the clientMode is true, netty consumer will connect the address as          * a TCP client.          */
DECL|field|clientMode
specifier|private
name|Boolean
name|clientMode
decl_stmt|;
comment|/**          * If the useByteBuf is true, netty producer will turn the message body          * into {@link ByteBuf} before sending it out.          */
DECL|field|useByteBuf
specifier|private
name|Boolean
name|useByteBuf
decl_stmt|;
comment|/**          * For UDP only. If enabled the using byte array codec instead of Java          * serialization protocol.          */
DECL|field|udpByteArrayCodec
specifier|private
name|Boolean
name|udpByteArrayCodec
decl_stmt|;
comment|/**          * This option allows producers to reuse the same Netty {@link Channel}          * for the lifecycle of processing the {@link Exchange} . This is          * useable if you need to call a server multiple times in a Camel route          * and want to use the same network connection. When using this the          * channel is not returned to the connection pool until the          * {@link Exchange} is done; or disconnected if the disconnect option is          * set to true.          *<p/>          * The reused {@link Channel} is stored on the {@link Exchange} as an          * exchange property with the key {@link NettyConstants#NETTY_CHANNEL}          * which allows you to obtain the channel during routing and use it as          * well.          */
DECL|field|reuseChannel
specifier|private
name|Boolean
name|reuseChannel
decl_stmt|;
comment|/**          * The protocol to use which can be tcp or udp.          */
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
comment|/**          * The hostname.          *<p/>          * For the consumer the hostname is localhost or 0.0.0.0 For the          * producer the hostname is the remote host to connect to          */
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
comment|/**          * The host port number          */
DECL|field|port
specifier|private
name|Integer
name|port
decl_stmt|;
comment|/**          * Setting to choose Multicast over UDP          */
DECL|field|broadcast
specifier|private
name|Boolean
name|broadcast
decl_stmt|;
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          */
DECL|field|sendBufferSize
specifier|private
name|Integer
name|sendBufferSize
decl_stmt|;
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          */
DECL|field|receiveBufferSize
specifier|private
name|Integer
name|receiveBufferSize
decl_stmt|;
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          */
DECL|field|receiveBufferSizePredictor
specifier|private
name|Integer
name|receiveBufferSizePredictor
decl_stmt|;
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads*2. User can use this operation          * to override the default workerCount from Netty          */
DECL|field|workerCount
specifier|private
name|Integer
name|workerCount
decl_stmt|;
comment|/**          * When netty works on nio mode, it uses default bossCount parameter          * from Netty, which is 1. User can use this operation to override the          * default bossCount from Netty          */
DECL|field|bossCount
specifier|private
name|Integer
name|bossCount
decl_stmt|;
comment|/**          * Setting to ensure socket is not closed due to inactivity          */
DECL|field|keepAlive
specifier|private
name|Boolean
name|keepAlive
decl_stmt|;
comment|/**          * Setting to improve TCP protocol performance          */
DECL|field|tcpNoDelay
specifier|private
name|Boolean
name|tcpNoDelay
decl_stmt|;
comment|/**          * Setting to facilitate socket multiplexing          */
DECL|field|reuseAddress
specifier|private
name|Boolean
name|reuseAddress
decl_stmt|;
comment|/**          * Time to wait for a socket connection to be available. Value is in          * millis.          */
DECL|field|connectTimeout
specifier|private
name|Integer
name|connectTimeout
decl_stmt|;
comment|/**          * Allows to configure a backlog for netty consumer (server). Note the          * backlog is just a best effort depending on the OS. Setting this          * option to a value such as 200, 500 or 1000, tells the TCP stack how          * long the "accept" queue can be If this option is not configured, then          * the backlog depends on OS setting.          */
DECL|field|backlog
specifier|private
name|Integer
name|backlog
decl_stmt|;
comment|/**          * Setting to specify whether SSL encryption is applied to this endpoint          */
DECL|field|ssl
specifier|private
name|Boolean
name|ssl
decl_stmt|;
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          */
DECL|field|sslClientCertHeaders
specifier|private
name|Boolean
name|sslClientCertHeaders
decl_stmt|;
comment|/**          * Reference to a class that could be used to return an SSL Handler          */
annotation|@
name|NestedConfigurationProperty
DECL|field|sslHandler
specifier|private
name|SslHandler
name|sslHandler
decl_stmt|;
comment|/**          * To configure security using SSLContextParameters          */
annotation|@
name|NestedConfigurationProperty
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
comment|/**          * Configures whether the server needs client authentication when using          * SSL.          */
DECL|field|needClientAuth
specifier|private
name|Boolean
name|needClientAuth
decl_stmt|;
comment|/**          * Client side certificate keystore to be used for encryption          */
annotation|@
name|Deprecated
DECL|field|keyStoreFile
specifier|private
name|File
name|keyStoreFile
decl_stmt|;
comment|/**          * Server side certificate keystore to be used for encryption          */
annotation|@
name|Deprecated
DECL|field|trustStoreFile
specifier|private
name|File
name|trustStoreFile
decl_stmt|;
comment|/**          * Client side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with "classpath:",          * "file:", or "http:" to load the resource from different systems.          */
DECL|field|keyStoreResource
specifier|private
name|String
name|keyStoreResource
decl_stmt|;
comment|/**          * Server side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with "classpath:",          * "file:", or "http:" to load the resource from different systems.          */
DECL|field|trustStoreResource
specifier|private
name|String
name|trustStoreResource
decl_stmt|;
comment|/**          * Keystore format to be used for payload encryption. Defaults to "JKS"          * if not set          */
DECL|field|keyStoreFormat
specifier|private
name|String
name|keyStoreFormat
decl_stmt|;
comment|/**          * Security provider to be used for payload encryption. Defaults to          * "SunX509" if not set.          */
DECL|field|securityProvider
specifier|private
name|String
name|securityProvider
decl_stmt|;
comment|/**          * Password setting to use in order to encrypt/decrypt payloads sent          * using SSH          */
DECL|field|passphrase
specifier|private
name|String
name|passphrase
decl_stmt|;
comment|/**          * @deprecated use #setServerInitializerFactory          */
annotation|@
name|Deprecated
DECL|field|serverPipelineFactory
specifier|private
name|ServerInitializerFactory
name|serverPipelineFactory
decl_stmt|;
comment|/**          * To use a custom ServerInitializerFactory          */
DECL|field|serverInitializerFactory
specifier|private
name|ServerInitializerFactory
name|serverInitializerFactory
decl_stmt|;
comment|/**          * To use a custom NettyServerBootstrapFactory          */
DECL|field|nettyServerBootstrapFactory
specifier|private
name|NettyServerBootstrapFactory
name|nettyServerBootstrapFactory
decl_stmt|;
comment|/**          * Allows to configure additional netty options using "option." as          * prefix. For example "option.child.keepAlive=false" to set the netty          * option "child.keepAlive=false". See the Netty documentation for          * possible options that can be used.          */
DECL|field|options
specifier|private
name|Map
name|options
decl_stmt|;
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html          */
DECL|field|nativeTransport
specifier|private
name|Boolean
name|nativeTransport
decl_stmt|;
comment|/**          * Set the BossGroup which could be used for handling the new connection          * of the server side across the NettyEndpoint          */
DECL|field|bossGroup
specifier|private
name|EventLoopGroup
name|bossGroup
decl_stmt|;
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers. By default each          * consumer has their own boss pool with 1 core thread.          */
DECL|field|workerGroup
specifier|private
name|EventLoopGroup
name|workerGroup
decl_stmt|;
comment|/**          * To use a explicit ChannelGroup.          */
DECL|field|channelGroup
specifier|private
name|ChannelGroup
name|channelGroup
decl_stmt|;
comment|/**          * When using UDP then this option can be used to specify a network          * interface by its name, such as eth0 to join a multicast group.          */
DECL|field|networkInterface
specifier|private
name|String
name|networkInterface
decl_stmt|;
comment|/**          * Which protocols to enable when using SSL          */
DECL|field|enabledProtocols
specifier|private
name|String
name|enabledProtocols
init|=
literal|"DEFAULT_ENABLED_PROTOCOLS"
decl_stmt|;
DECL|field|reconnect
specifier|private
name|Boolean
name|reconnect
decl_stmt|;
DECL|field|reconnectInterval
specifier|private
name|Integer
name|reconnectInterval
decl_stmt|;
DECL|method|getRequestTimeout ()
specifier|public
name|Long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|requestTimeout
return|;
block|}
DECL|method|setRequestTimeout (Long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|Long
name|requestTimeout
parameter_list|)
block|{
name|this
operator|.
name|requestTimeout
operator|=
name|requestTimeout
expr_stmt|;
block|}
DECL|method|getSync ()
specifier|public
name|Boolean
name|getSync
parameter_list|()
block|{
return|return
name|sync
return|;
block|}
DECL|method|setSync (Boolean sync)
specifier|public
name|void
name|setSync
parameter_list|(
name|Boolean
name|sync
parameter_list|)
block|{
name|this
operator|.
name|sync
operator|=
name|sync
expr_stmt|;
block|}
DECL|method|getTextline ()
specifier|public
name|Boolean
name|getTextline
parameter_list|()
block|{
return|return
name|textline
return|;
block|}
DECL|method|setTextline (Boolean textline)
specifier|public
name|void
name|setTextline
parameter_list|(
name|Boolean
name|textline
parameter_list|)
block|{
name|this
operator|.
name|textline
operator|=
name|textline
expr_stmt|;
block|}
DECL|method|getDecoderMaxLineLength ()
specifier|public
name|Integer
name|getDecoderMaxLineLength
parameter_list|()
block|{
return|return
name|decoderMaxLineLength
return|;
block|}
DECL|method|setDecoderMaxLineLength (Integer decoderMaxLineLength)
specifier|public
name|void
name|setDecoderMaxLineLength
parameter_list|(
name|Integer
name|decoderMaxLineLength
parameter_list|)
block|{
name|this
operator|.
name|decoderMaxLineLength
operator|=
name|decoderMaxLineLength
expr_stmt|;
block|}
DECL|method|getDelimiter ()
specifier|public
name|TextLineDelimiter
name|getDelimiter
parameter_list|()
block|{
return|return
name|delimiter
return|;
block|}
DECL|method|setDelimiter (TextLineDelimiter delimiter)
specifier|public
name|void
name|setDelimiter
parameter_list|(
name|TextLineDelimiter
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
block|}
DECL|method|getAutoAppendDelimiter ()
specifier|public
name|Boolean
name|getAutoAppendDelimiter
parameter_list|()
block|{
return|return
name|autoAppendDelimiter
return|;
block|}
DECL|method|setAutoAppendDelimiter (Boolean autoAppendDelimiter)
specifier|public
name|void
name|setAutoAppendDelimiter
parameter_list|(
name|Boolean
name|autoAppendDelimiter
parameter_list|)
block|{
name|this
operator|.
name|autoAppendDelimiter
operator|=
name|autoAppendDelimiter
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getDecoders ()
specifier|public
name|List
name|getDecoders
parameter_list|()
block|{
return|return
name|decoders
return|;
block|}
DECL|method|setDecoders (List decoders)
specifier|public
name|void
name|setDecoders
parameter_list|(
name|List
name|decoders
parameter_list|)
block|{
name|this
operator|.
name|decoders
operator|=
name|decoders
expr_stmt|;
block|}
DECL|method|getEncoders ()
specifier|public
name|List
name|getEncoders
parameter_list|()
block|{
return|return
name|encoders
return|;
block|}
DECL|method|setEncoders (List encoders)
specifier|public
name|void
name|setEncoders
parameter_list|(
name|List
name|encoders
parameter_list|)
block|{
name|this
operator|.
name|encoders
operator|=
name|encoders
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|DeprecatedConfigurationProperty
DECL|method|getEncoder ()
specifier|public
name|ChannelHandler
name|getEncoder
parameter_list|()
block|{
return|return
name|encoder
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setEncoder (ChannelHandler encoder)
specifier|public
name|void
name|setEncoder
parameter_list|(
name|ChannelHandler
name|encoder
parameter_list|)
block|{
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|DeprecatedConfigurationProperty
DECL|method|getDecoder ()
specifier|public
name|ChannelHandler
name|getDecoder
parameter_list|()
block|{
return|return
name|decoder
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setDecoder (ChannelHandler decoder)
specifier|public
name|void
name|setDecoder
parameter_list|(
name|ChannelHandler
name|decoder
parameter_list|)
block|{
name|this
operator|.
name|decoder
operator|=
name|decoder
expr_stmt|;
block|}
DECL|method|getDisconnect ()
specifier|public
name|Boolean
name|getDisconnect
parameter_list|()
block|{
return|return
name|disconnect
return|;
block|}
DECL|method|setDisconnect (Boolean disconnect)
specifier|public
name|void
name|setDisconnect
parameter_list|(
name|Boolean
name|disconnect
parameter_list|)
block|{
name|this
operator|.
name|disconnect
operator|=
name|disconnect
expr_stmt|;
block|}
DECL|method|getLazyChannelCreation ()
specifier|public
name|Boolean
name|getLazyChannelCreation
parameter_list|()
block|{
return|return
name|lazyChannelCreation
return|;
block|}
DECL|method|setLazyChannelCreation (Boolean lazyChannelCreation)
specifier|public
name|void
name|setLazyChannelCreation
parameter_list|(
name|Boolean
name|lazyChannelCreation
parameter_list|)
block|{
name|this
operator|.
name|lazyChannelCreation
operator|=
name|lazyChannelCreation
expr_stmt|;
block|}
DECL|method|getTransferExchange ()
specifier|public
name|Boolean
name|getTransferExchange
parameter_list|()
block|{
return|return
name|transferExchange
return|;
block|}
DECL|method|setTransferExchange (Boolean transferExchange)
specifier|public
name|void
name|setTransferExchange
parameter_list|(
name|Boolean
name|transferExchange
parameter_list|)
block|{
name|this
operator|.
name|transferExchange
operator|=
name|transferExchange
expr_stmt|;
block|}
DECL|method|getAllowSerializedHeaders ()
specifier|public
name|Boolean
name|getAllowSerializedHeaders
parameter_list|()
block|{
return|return
name|allowSerializedHeaders
return|;
block|}
DECL|method|setAllowSerializedHeaders (Boolean allowSerializedHeaders)
specifier|public
name|void
name|setAllowSerializedHeaders
parameter_list|(
name|Boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|this
operator|.
name|allowSerializedHeaders
operator|=
name|allowSerializedHeaders
expr_stmt|;
block|}
DECL|method|getDisconnectOnNoReply ()
specifier|public
name|Boolean
name|getDisconnectOnNoReply
parameter_list|()
block|{
return|return
name|disconnectOnNoReply
return|;
block|}
DECL|method|setDisconnectOnNoReply (Boolean disconnectOnNoReply)
specifier|public
name|void
name|setDisconnectOnNoReply
parameter_list|(
name|Boolean
name|disconnectOnNoReply
parameter_list|)
block|{
name|this
operator|.
name|disconnectOnNoReply
operator|=
name|disconnectOnNoReply
expr_stmt|;
block|}
DECL|method|getNoReplyLogLevel ()
specifier|public
name|LoggingLevel
name|getNoReplyLogLevel
parameter_list|()
block|{
return|return
name|noReplyLogLevel
return|;
block|}
DECL|method|setNoReplyLogLevel (LoggingLevel noReplyLogLevel)
specifier|public
name|void
name|setNoReplyLogLevel
parameter_list|(
name|LoggingLevel
name|noReplyLogLevel
parameter_list|)
block|{
name|this
operator|.
name|noReplyLogLevel
operator|=
name|noReplyLogLevel
expr_stmt|;
block|}
DECL|method|getServerExceptionCaughtLogLevel ()
specifier|public
name|LoggingLevel
name|getServerExceptionCaughtLogLevel
parameter_list|()
block|{
return|return
name|serverExceptionCaughtLogLevel
return|;
block|}
DECL|method|setServerExceptionCaughtLogLevel ( LoggingLevel serverExceptionCaughtLogLevel)
specifier|public
name|void
name|setServerExceptionCaughtLogLevel
parameter_list|(
name|LoggingLevel
name|serverExceptionCaughtLogLevel
parameter_list|)
block|{
name|this
operator|.
name|serverExceptionCaughtLogLevel
operator|=
name|serverExceptionCaughtLogLevel
expr_stmt|;
block|}
DECL|method|getServerClosedChannelExceptionCaughtLogLevel ()
specifier|public
name|LoggingLevel
name|getServerClosedChannelExceptionCaughtLogLevel
parameter_list|()
block|{
return|return
name|serverClosedChannelExceptionCaughtLogLevel
return|;
block|}
DECL|method|setServerClosedChannelExceptionCaughtLogLevel ( LoggingLevel serverClosedChannelExceptionCaughtLogLevel)
specifier|public
name|void
name|setServerClosedChannelExceptionCaughtLogLevel
parameter_list|(
name|LoggingLevel
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|)
block|{
name|this
operator|.
name|serverClosedChannelExceptionCaughtLogLevel
operator|=
name|serverClosedChannelExceptionCaughtLogLevel
expr_stmt|;
block|}
DECL|method|getAllowDefaultCodec ()
specifier|public
name|Boolean
name|getAllowDefaultCodec
parameter_list|()
block|{
return|return
name|allowDefaultCodec
return|;
block|}
DECL|method|setAllowDefaultCodec (Boolean allowDefaultCodec)
specifier|public
name|void
name|setAllowDefaultCodec
parameter_list|(
name|Boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|this
operator|.
name|allowDefaultCodec
operator|=
name|allowDefaultCodec
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|DeprecatedConfigurationProperty
DECL|method|getClientPipelineFactory ()
specifier|public
name|ClientInitializerFactory
name|getClientPipelineFactory
parameter_list|()
block|{
return|return
name|clientPipelineFactory
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setClientPipelineFactory ( ClientInitializerFactory clientPipelineFactory)
specifier|public
name|void
name|setClientPipelineFactory
parameter_list|(
name|ClientInitializerFactory
name|clientPipelineFactory
parameter_list|)
block|{
name|this
operator|.
name|clientPipelineFactory
operator|=
name|clientPipelineFactory
expr_stmt|;
block|}
DECL|method|getClientInitializerFactory ()
specifier|public
name|ClientInitializerFactory
name|getClientInitializerFactory
parameter_list|()
block|{
return|return
name|clientInitializerFactory
return|;
block|}
DECL|method|setClientInitializerFactory ( ClientInitializerFactory clientInitializerFactory)
specifier|public
name|void
name|setClientInitializerFactory
parameter_list|(
name|ClientInitializerFactory
name|clientInitializerFactory
parameter_list|)
block|{
name|this
operator|.
name|clientInitializerFactory
operator|=
name|clientInitializerFactory
expr_stmt|;
block|}
DECL|method|getUsingExecutorService ()
specifier|public
name|Boolean
name|getUsingExecutorService
parameter_list|()
block|{
return|return
name|usingExecutorService
return|;
block|}
DECL|method|setUsingExecutorService (Boolean usingExecutorService)
specifier|public
name|void
name|setUsingExecutorService
parameter_list|(
name|Boolean
name|usingExecutorService
parameter_list|)
block|{
name|this
operator|.
name|usingExecutorService
operator|=
name|usingExecutorService
expr_stmt|;
block|}
DECL|method|getProducerPoolMaxActive ()
specifier|public
name|Integer
name|getProducerPoolMaxActive
parameter_list|()
block|{
return|return
name|producerPoolMaxActive
return|;
block|}
DECL|method|setProducerPoolMaxActive (Integer producerPoolMaxActive)
specifier|public
name|void
name|setProducerPoolMaxActive
parameter_list|(
name|Integer
name|producerPoolMaxActive
parameter_list|)
block|{
name|this
operator|.
name|producerPoolMaxActive
operator|=
name|producerPoolMaxActive
expr_stmt|;
block|}
DECL|method|getProducerPoolMinIdle ()
specifier|public
name|Integer
name|getProducerPoolMinIdle
parameter_list|()
block|{
return|return
name|producerPoolMinIdle
return|;
block|}
DECL|method|setProducerPoolMinIdle (Integer producerPoolMinIdle)
specifier|public
name|void
name|setProducerPoolMinIdle
parameter_list|(
name|Integer
name|producerPoolMinIdle
parameter_list|)
block|{
name|this
operator|.
name|producerPoolMinIdle
operator|=
name|producerPoolMinIdle
expr_stmt|;
block|}
DECL|method|getProducerPoolMaxIdle ()
specifier|public
name|Integer
name|getProducerPoolMaxIdle
parameter_list|()
block|{
return|return
name|producerPoolMaxIdle
return|;
block|}
DECL|method|setProducerPoolMaxIdle (Integer producerPoolMaxIdle)
specifier|public
name|void
name|setProducerPoolMaxIdle
parameter_list|(
name|Integer
name|producerPoolMaxIdle
parameter_list|)
block|{
name|this
operator|.
name|producerPoolMaxIdle
operator|=
name|producerPoolMaxIdle
expr_stmt|;
block|}
DECL|method|getProducerPoolMinEvictableIdle ()
specifier|public
name|Long
name|getProducerPoolMinEvictableIdle
parameter_list|()
block|{
return|return
name|producerPoolMinEvictableIdle
return|;
block|}
DECL|method|setProducerPoolMinEvictableIdle ( Long producerPoolMinEvictableIdle)
specifier|public
name|void
name|setProducerPoolMinEvictableIdle
parameter_list|(
name|Long
name|producerPoolMinEvictableIdle
parameter_list|)
block|{
name|this
operator|.
name|producerPoolMinEvictableIdle
operator|=
name|producerPoolMinEvictableIdle
expr_stmt|;
block|}
DECL|method|getProducerPoolEnabled ()
specifier|public
name|Boolean
name|getProducerPoolEnabled
parameter_list|()
block|{
return|return
name|producerPoolEnabled
return|;
block|}
DECL|method|setProducerPoolEnabled (Boolean producerPoolEnabled)
specifier|public
name|void
name|setProducerPoolEnabled
parameter_list|(
name|Boolean
name|producerPoolEnabled
parameter_list|)
block|{
name|this
operator|.
name|producerPoolEnabled
operator|=
name|producerPoolEnabled
expr_stmt|;
block|}
DECL|method|getUdpConnectionlessSending ()
specifier|public
name|Boolean
name|getUdpConnectionlessSending
parameter_list|()
block|{
return|return
name|udpConnectionlessSending
return|;
block|}
DECL|method|setUdpConnectionlessSending (Boolean udpConnectionlessSending)
specifier|public
name|void
name|setUdpConnectionlessSending
parameter_list|(
name|Boolean
name|udpConnectionlessSending
parameter_list|)
block|{
name|this
operator|.
name|udpConnectionlessSending
operator|=
name|udpConnectionlessSending
expr_stmt|;
block|}
DECL|method|getClientMode ()
specifier|public
name|Boolean
name|getClientMode
parameter_list|()
block|{
return|return
name|clientMode
return|;
block|}
DECL|method|setClientMode (Boolean clientMode)
specifier|public
name|void
name|setClientMode
parameter_list|(
name|Boolean
name|clientMode
parameter_list|)
block|{
name|this
operator|.
name|clientMode
operator|=
name|clientMode
expr_stmt|;
block|}
DECL|method|getUseByteBuf ()
specifier|public
name|Boolean
name|getUseByteBuf
parameter_list|()
block|{
return|return
name|useByteBuf
return|;
block|}
DECL|method|setUseByteBuf (Boolean useByteBuf)
specifier|public
name|void
name|setUseByteBuf
parameter_list|(
name|Boolean
name|useByteBuf
parameter_list|)
block|{
name|this
operator|.
name|useByteBuf
operator|=
name|useByteBuf
expr_stmt|;
block|}
DECL|method|getUdpByteArrayCodec ()
specifier|public
name|Boolean
name|getUdpByteArrayCodec
parameter_list|()
block|{
return|return
name|udpByteArrayCodec
return|;
block|}
DECL|method|setUdpByteArrayCodec (Boolean udpByteArrayCodec)
specifier|public
name|void
name|setUdpByteArrayCodec
parameter_list|(
name|Boolean
name|udpByteArrayCodec
parameter_list|)
block|{
name|this
operator|.
name|udpByteArrayCodec
operator|=
name|udpByteArrayCodec
expr_stmt|;
block|}
DECL|method|getReuseChannel ()
specifier|public
name|Boolean
name|getReuseChannel
parameter_list|()
block|{
return|return
name|reuseChannel
return|;
block|}
DECL|method|setReuseChannel (Boolean reuseChannel)
specifier|public
name|void
name|setReuseChannel
parameter_list|(
name|Boolean
name|reuseChannel
parameter_list|)
block|{
name|this
operator|.
name|reuseChannel
operator|=
name|reuseChannel
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getBroadcast ()
specifier|public
name|Boolean
name|getBroadcast
parameter_list|()
block|{
return|return
name|broadcast
return|;
block|}
DECL|method|setBroadcast (Boolean broadcast)
specifier|public
name|void
name|setBroadcast
parameter_list|(
name|Boolean
name|broadcast
parameter_list|)
block|{
name|this
operator|.
name|broadcast
operator|=
name|broadcast
expr_stmt|;
block|}
DECL|method|getSendBufferSize ()
specifier|public
name|Integer
name|getSendBufferSize
parameter_list|()
block|{
return|return
name|sendBufferSize
return|;
block|}
DECL|method|setSendBufferSize (Integer sendBufferSize)
specifier|public
name|void
name|setSendBufferSize
parameter_list|(
name|Integer
name|sendBufferSize
parameter_list|)
block|{
name|this
operator|.
name|sendBufferSize
operator|=
name|sendBufferSize
expr_stmt|;
block|}
DECL|method|getReceiveBufferSize ()
specifier|public
name|Integer
name|getReceiveBufferSize
parameter_list|()
block|{
return|return
name|receiveBufferSize
return|;
block|}
DECL|method|setReceiveBufferSize (Integer receiveBufferSize)
specifier|public
name|void
name|setReceiveBufferSize
parameter_list|(
name|Integer
name|receiveBufferSize
parameter_list|)
block|{
name|this
operator|.
name|receiveBufferSize
operator|=
name|receiveBufferSize
expr_stmt|;
block|}
DECL|method|getReceiveBufferSizePredictor ()
specifier|public
name|Integer
name|getReceiveBufferSizePredictor
parameter_list|()
block|{
return|return
name|receiveBufferSizePredictor
return|;
block|}
DECL|method|setReceiveBufferSizePredictor ( Integer receiveBufferSizePredictor)
specifier|public
name|void
name|setReceiveBufferSizePredictor
parameter_list|(
name|Integer
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|this
operator|.
name|receiveBufferSizePredictor
operator|=
name|receiveBufferSizePredictor
expr_stmt|;
block|}
DECL|method|getWorkerCount ()
specifier|public
name|Integer
name|getWorkerCount
parameter_list|()
block|{
return|return
name|workerCount
return|;
block|}
DECL|method|setWorkerCount (Integer workerCount)
specifier|public
name|void
name|setWorkerCount
parameter_list|(
name|Integer
name|workerCount
parameter_list|)
block|{
name|this
operator|.
name|workerCount
operator|=
name|workerCount
expr_stmt|;
block|}
DECL|method|getBossCount ()
specifier|public
name|Integer
name|getBossCount
parameter_list|()
block|{
return|return
name|bossCount
return|;
block|}
DECL|method|setBossCount (Integer bossCount)
specifier|public
name|void
name|setBossCount
parameter_list|(
name|Integer
name|bossCount
parameter_list|)
block|{
name|this
operator|.
name|bossCount
operator|=
name|bossCount
expr_stmt|;
block|}
DECL|method|getKeepAlive ()
specifier|public
name|Boolean
name|getKeepAlive
parameter_list|()
block|{
return|return
name|keepAlive
return|;
block|}
DECL|method|setKeepAlive (Boolean keepAlive)
specifier|public
name|void
name|setKeepAlive
parameter_list|(
name|Boolean
name|keepAlive
parameter_list|)
block|{
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
block|}
DECL|method|getTcpNoDelay ()
specifier|public
name|Boolean
name|getTcpNoDelay
parameter_list|()
block|{
return|return
name|tcpNoDelay
return|;
block|}
DECL|method|setTcpNoDelay (Boolean tcpNoDelay)
specifier|public
name|void
name|setTcpNoDelay
parameter_list|(
name|Boolean
name|tcpNoDelay
parameter_list|)
block|{
name|this
operator|.
name|tcpNoDelay
operator|=
name|tcpNoDelay
expr_stmt|;
block|}
DECL|method|getReuseAddress ()
specifier|public
name|Boolean
name|getReuseAddress
parameter_list|()
block|{
return|return
name|reuseAddress
return|;
block|}
DECL|method|setReuseAddress (Boolean reuseAddress)
specifier|public
name|void
name|setReuseAddress
parameter_list|(
name|Boolean
name|reuseAddress
parameter_list|)
block|{
name|this
operator|.
name|reuseAddress
operator|=
name|reuseAddress
expr_stmt|;
block|}
DECL|method|getConnectTimeout ()
specifier|public
name|Integer
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
DECL|method|setConnectTimeout (Integer connectTimeout)
specifier|public
name|void
name|setConnectTimeout
parameter_list|(
name|Integer
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
DECL|method|getBacklog ()
specifier|public
name|Integer
name|getBacklog
parameter_list|()
block|{
return|return
name|backlog
return|;
block|}
DECL|method|setBacklog (Integer backlog)
specifier|public
name|void
name|setBacklog
parameter_list|(
name|Integer
name|backlog
parameter_list|)
block|{
name|this
operator|.
name|backlog
operator|=
name|backlog
expr_stmt|;
block|}
DECL|method|getSsl ()
specifier|public
name|Boolean
name|getSsl
parameter_list|()
block|{
return|return
name|ssl
return|;
block|}
DECL|method|setSsl (Boolean ssl)
specifier|public
name|void
name|setSsl
parameter_list|(
name|Boolean
name|ssl
parameter_list|)
block|{
name|this
operator|.
name|ssl
operator|=
name|ssl
expr_stmt|;
block|}
DECL|method|getSslClientCertHeaders ()
specifier|public
name|Boolean
name|getSslClientCertHeaders
parameter_list|()
block|{
return|return
name|sslClientCertHeaders
return|;
block|}
DECL|method|setSslClientCertHeaders (Boolean sslClientCertHeaders)
specifier|public
name|void
name|setSslClientCertHeaders
parameter_list|(
name|Boolean
name|sslClientCertHeaders
parameter_list|)
block|{
name|this
operator|.
name|sslClientCertHeaders
operator|=
name|sslClientCertHeaders
expr_stmt|;
block|}
DECL|method|getSslHandler ()
specifier|public
name|SslHandler
name|getSslHandler
parameter_list|()
block|{
return|return
name|sslHandler
return|;
block|}
DECL|method|setSslHandler (SslHandler sslHandler)
specifier|public
name|void
name|setSslHandler
parameter_list|(
name|SslHandler
name|sslHandler
parameter_list|)
block|{
name|this
operator|.
name|sslHandler
operator|=
name|sslHandler
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters ( SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getNeedClientAuth ()
specifier|public
name|Boolean
name|getNeedClientAuth
parameter_list|()
block|{
return|return
name|needClientAuth
return|;
block|}
DECL|method|setNeedClientAuth (Boolean needClientAuth)
specifier|public
name|void
name|setNeedClientAuth
parameter_list|(
name|Boolean
name|needClientAuth
parameter_list|)
block|{
name|this
operator|.
name|needClientAuth
operator|=
name|needClientAuth
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|DeprecatedConfigurationProperty
DECL|method|getKeyStoreFile ()
specifier|public
name|File
name|getKeyStoreFile
parameter_list|()
block|{
return|return
name|keyStoreFile
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setKeyStoreFile (File keyStoreFile)
specifier|public
name|void
name|setKeyStoreFile
parameter_list|(
name|File
name|keyStoreFile
parameter_list|)
block|{
name|this
operator|.
name|keyStoreFile
operator|=
name|keyStoreFile
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|DeprecatedConfigurationProperty
DECL|method|getTrustStoreFile ()
specifier|public
name|File
name|getTrustStoreFile
parameter_list|()
block|{
return|return
name|trustStoreFile
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setTrustStoreFile (File trustStoreFile)
specifier|public
name|void
name|setTrustStoreFile
parameter_list|(
name|File
name|trustStoreFile
parameter_list|)
block|{
name|this
operator|.
name|trustStoreFile
operator|=
name|trustStoreFile
expr_stmt|;
block|}
DECL|method|getKeyStoreResource ()
specifier|public
name|String
name|getKeyStoreResource
parameter_list|()
block|{
return|return
name|keyStoreResource
return|;
block|}
DECL|method|setKeyStoreResource (String keyStoreResource)
specifier|public
name|void
name|setKeyStoreResource
parameter_list|(
name|String
name|keyStoreResource
parameter_list|)
block|{
name|this
operator|.
name|keyStoreResource
operator|=
name|keyStoreResource
expr_stmt|;
block|}
DECL|method|getTrustStoreResource ()
specifier|public
name|String
name|getTrustStoreResource
parameter_list|()
block|{
return|return
name|trustStoreResource
return|;
block|}
DECL|method|setTrustStoreResource (String trustStoreResource)
specifier|public
name|void
name|setTrustStoreResource
parameter_list|(
name|String
name|trustStoreResource
parameter_list|)
block|{
name|this
operator|.
name|trustStoreResource
operator|=
name|trustStoreResource
expr_stmt|;
block|}
DECL|method|getKeyStoreFormat ()
specifier|public
name|String
name|getKeyStoreFormat
parameter_list|()
block|{
return|return
name|keyStoreFormat
return|;
block|}
DECL|method|setKeyStoreFormat (String keyStoreFormat)
specifier|public
name|void
name|setKeyStoreFormat
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|)
block|{
name|this
operator|.
name|keyStoreFormat
operator|=
name|keyStoreFormat
expr_stmt|;
block|}
DECL|method|getSecurityProvider ()
specifier|public
name|String
name|getSecurityProvider
parameter_list|()
block|{
return|return
name|securityProvider
return|;
block|}
DECL|method|setSecurityProvider (String securityProvider)
specifier|public
name|void
name|setSecurityProvider
parameter_list|(
name|String
name|securityProvider
parameter_list|)
block|{
name|this
operator|.
name|securityProvider
operator|=
name|securityProvider
expr_stmt|;
block|}
DECL|method|getPassphrase ()
specifier|public
name|String
name|getPassphrase
parameter_list|()
block|{
return|return
name|passphrase
return|;
block|}
DECL|method|setPassphrase (String passphrase)
specifier|public
name|void
name|setPassphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|this
operator|.
name|passphrase
operator|=
name|passphrase
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|DeprecatedConfigurationProperty
DECL|method|getServerPipelineFactory ()
specifier|public
name|ServerInitializerFactory
name|getServerPipelineFactory
parameter_list|()
block|{
return|return
name|serverPipelineFactory
return|;
block|}
annotation|@
name|Deprecated
DECL|method|setServerPipelineFactory ( ServerInitializerFactory serverPipelineFactory)
specifier|public
name|void
name|setServerPipelineFactory
parameter_list|(
name|ServerInitializerFactory
name|serverPipelineFactory
parameter_list|)
block|{
name|this
operator|.
name|serverPipelineFactory
operator|=
name|serverPipelineFactory
expr_stmt|;
block|}
DECL|method|getServerInitializerFactory ()
specifier|public
name|ServerInitializerFactory
name|getServerInitializerFactory
parameter_list|()
block|{
return|return
name|serverInitializerFactory
return|;
block|}
DECL|method|setServerInitializerFactory ( ServerInitializerFactory serverInitializerFactory)
specifier|public
name|void
name|setServerInitializerFactory
parameter_list|(
name|ServerInitializerFactory
name|serverInitializerFactory
parameter_list|)
block|{
name|this
operator|.
name|serverInitializerFactory
operator|=
name|serverInitializerFactory
expr_stmt|;
block|}
DECL|method|getNettyServerBootstrapFactory ()
specifier|public
name|NettyServerBootstrapFactory
name|getNettyServerBootstrapFactory
parameter_list|()
block|{
return|return
name|nettyServerBootstrapFactory
return|;
block|}
DECL|method|setNettyServerBootstrapFactory ( NettyServerBootstrapFactory nettyServerBootstrapFactory)
specifier|public
name|void
name|setNettyServerBootstrapFactory
parameter_list|(
name|NettyServerBootstrapFactory
name|nettyServerBootstrapFactory
parameter_list|)
block|{
name|this
operator|.
name|nettyServerBootstrapFactory
operator|=
name|nettyServerBootstrapFactory
expr_stmt|;
block|}
DECL|method|getOptions ()
specifier|public
name|Map
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|setOptions (Map options)
specifier|public
name|void
name|setOptions
parameter_list|(
name|Map
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
DECL|method|getNativeTransport ()
specifier|public
name|Boolean
name|getNativeTransport
parameter_list|()
block|{
return|return
name|nativeTransport
return|;
block|}
DECL|method|setNativeTransport (Boolean nativeTransport)
specifier|public
name|void
name|setNativeTransport
parameter_list|(
name|Boolean
name|nativeTransport
parameter_list|)
block|{
name|this
operator|.
name|nativeTransport
operator|=
name|nativeTransport
expr_stmt|;
block|}
DECL|method|getBossGroup ()
specifier|public
name|EventLoopGroup
name|getBossGroup
parameter_list|()
block|{
return|return
name|bossGroup
return|;
block|}
DECL|method|setBossGroup (EventLoopGroup bossGroup)
specifier|public
name|void
name|setBossGroup
parameter_list|(
name|EventLoopGroup
name|bossGroup
parameter_list|)
block|{
name|this
operator|.
name|bossGroup
operator|=
name|bossGroup
expr_stmt|;
block|}
DECL|method|getWorkerGroup ()
specifier|public
name|EventLoopGroup
name|getWorkerGroup
parameter_list|()
block|{
return|return
name|workerGroup
return|;
block|}
DECL|method|setWorkerGroup (EventLoopGroup workerGroup)
specifier|public
name|void
name|setWorkerGroup
parameter_list|(
name|EventLoopGroup
name|workerGroup
parameter_list|)
block|{
name|this
operator|.
name|workerGroup
operator|=
name|workerGroup
expr_stmt|;
block|}
DECL|method|getChannelGroup ()
specifier|public
name|ChannelGroup
name|getChannelGroup
parameter_list|()
block|{
return|return
name|channelGroup
return|;
block|}
DECL|method|setChannelGroup (ChannelGroup channelGroup)
specifier|public
name|void
name|setChannelGroup
parameter_list|(
name|ChannelGroup
name|channelGroup
parameter_list|)
block|{
name|this
operator|.
name|channelGroup
operator|=
name|channelGroup
expr_stmt|;
block|}
DECL|method|getNetworkInterface ()
specifier|public
name|String
name|getNetworkInterface
parameter_list|()
block|{
return|return
name|networkInterface
return|;
block|}
DECL|method|setNetworkInterface (String networkInterface)
specifier|public
name|void
name|setNetworkInterface
parameter_list|(
name|String
name|networkInterface
parameter_list|)
block|{
name|this
operator|.
name|networkInterface
operator|=
name|networkInterface
expr_stmt|;
block|}
DECL|method|getEnabledProtocols ()
specifier|public
name|String
name|getEnabledProtocols
parameter_list|()
block|{
return|return
name|enabledProtocols
return|;
block|}
DECL|method|setEnabledProtocols (String enabledProtocols)
specifier|public
name|void
name|setEnabledProtocols
parameter_list|(
name|String
name|enabledProtocols
parameter_list|)
block|{
name|this
operator|.
name|enabledProtocols
operator|=
name|enabledProtocols
expr_stmt|;
block|}
DECL|method|getReconnect ()
specifier|public
name|Boolean
name|getReconnect
parameter_list|()
block|{
return|return
name|reconnect
return|;
block|}
DECL|method|setReconnect (Boolean reconnect)
specifier|public
name|void
name|setReconnect
parameter_list|(
name|Boolean
name|reconnect
parameter_list|)
block|{
name|this
operator|.
name|reconnect
operator|=
name|reconnect
expr_stmt|;
block|}
DECL|method|getReconnectInterval ()
specifier|public
name|Integer
name|getReconnectInterval
parameter_list|()
block|{
return|return
name|reconnectInterval
return|;
block|}
DECL|method|setReconnectInterval (Integer reconnectInterval)
specifier|public
name|void
name|setReconnectInterval
parameter_list|(
name|Integer
name|reconnectInterval
parameter_list|)
block|{
name|this
operator|.
name|reconnectInterval
operator|=
name|reconnectInterval
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

