begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmlsecurity.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|AlgorithmMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|URIDereferencer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|spec
operator|.
name|XPathFilterParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|KeyAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|ValidationFailedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignature2Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|api
operator|.
name|XmlSignatureProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|processor
operator|.
name|XmlSignerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmlsecurity
operator|.
name|processor
operator|.
name|XmlVerifierConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * Used to sign and verify exchanges using the XML signature specification.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.xmlsecurity"
argument_list|)
DECL|class|XmlSignatureComponentConfiguration
specifier|public
class|class
name|XmlSignatureComponentConfiguration
block|{
comment|/**      * To use a shared XmlSignerConfiguration configuration to use as base for      * configuring endpoints. Properties of the shared configuration can also be      * set individually.      */
DECL|field|signerConfiguration
specifier|private
name|XmlSignerConfiguration
name|signerConfiguration
decl_stmt|;
comment|/**      * To use a shared XmlVerifierConfiguration configuration to use as base for      * configuring endpoints. Properties of the shared configuration can also be      * set individually.      */
DECL|field|verifierConfiguration
specifier|private
name|XmlVerifierConfiguration
name|verifierConfiguration
decl_stmt|;
comment|/**      * If you want to restrict the remote access via reference URIs you can      * setSigner an own dereferencer. Optional parameter. If not setSigner the      * provider default dereferencer is used which can resolve URI fragments      * HTTP file and XPpointer URIs. Attention: The implementation is provider      * dependent!      */
DECL|field|signerUriDereferencer
specifier|private
name|URIDereferencer
name|signerUriDereferencer
decl_stmt|;
comment|/**      * You can setSigner a base URI which is used in the URI dereferencing.      * Relative URIs are then concatenated with the base URI.      */
DECL|field|signerBaseUri
specifier|private
name|String
name|signerBaseUri
decl_stmt|;
comment|/**      * Disallows that the incoming XML document contains DTD DOCTYPE      * declaration. The default value is link BooleanTRUE.      */
DECL|field|signerDisallowDoctypeDecl
specifier|private
name|Boolean
name|signerDisallowDoctypeDecl
decl_stmt|;
comment|/**      * For the signing process a private key is necessary. You specify a key      * accessor bean which provides this private key. The key accessor bean must      * implement the KeyAccessor interface. The package      * org.apache.camel.component.xmlsecurity.api contains the default      * implementation class DefaultKeyAccessor which reads the private key from      * a Java keystore.      */
DECL|field|signerKeyAccessor
specifier|private
name|KeyAccessor
name|signerKeyAccessor
decl_stmt|;
comment|/**      * Indicator whether the XML declaration in the outgoing message body should      * be omitted. Default value is false. Can be overwritten by the header link      * XmlSignatureConstantsHEADER_OMIT_XML_DECLARATION.      */
DECL|field|signerOmitXmlDeclaration
specifier|private
name|Boolean
name|signerOmitXmlDeclaration
decl_stmt|;
comment|/**      * Determines if the XML signature specific headers be cleared after signing      * and verification. Defaults to true.      */
DECL|field|signerClearHeaders
specifier|private
name|Boolean
name|signerClearHeaders
decl_stmt|;
comment|/**      * Canonicalization method used to canonicalize the SignedInfo element      * before the digest is calculated. You can use the helper methods      * XmlSignatureHelper.getCanonicalizationMethod(String algorithm) or      * getSignerCanonicalizationMethod(String algorithm List      * inclusiveNamespacePrefixes) to create a canonicalization method.      */
DECL|field|signerCanonicalizationMethod
specifier|private
name|AlgorithmMethod
name|signerCanonicalizationMethod
decl_stmt|;
comment|/**      * Classpath to the XML Schema. Must be specified in the detached XML      * Signature case for determining the ID attributes might be setSigner in      * the enveloped and enveloping case. If setSigner then the XML document is      * validated with the specified XML schema. The schema resource URI can be      * overwritten by the header link      * XmlSignatureConstantsHEADER_SCHEMA_RESOURCE_URI.      */
DECL|field|signerSchemaResourceUri
specifier|private
name|String
name|signerSchemaResourceUri
decl_stmt|;
comment|/**      * The character encoding of the resulting signed XML document. If null then      * the encoding of the original XML document is used.      */
DECL|field|signerOutputXmlEncoding
specifier|private
name|String
name|signerOutputXmlEncoding
decl_stmt|;
comment|/**      * Transforms which are executed on the message body before the digest is      * calculated. By default C14n is added and in the case of enveloped      * signature (see option parentLocalName) also      * http://www.w3.org/2000/09/xmldsigenveloped-signature is added at position      * 0 of the list. Use methods in XmlSignatureHelper to create the transform      * methods.      */
DECL|field|signerTransformMethods
specifier|private
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|signerTransformMethods
decl_stmt|;
comment|/**      * Signature algorithm. Default value is      * http://www.w3.org/2000/09/xmldsigrsa-sha1.      */
DECL|field|signerSignatureAlgorithm
specifier|private
name|String
name|signerSignatureAlgorithm
decl_stmt|;
comment|/**      * Digest algorithm URI. Optional parameter. This digest algorithm is used      * for calculating the digest of the input message. If this digest algorithm      * is not specified then the digest algorithm is calculated from the      * signature algorithm. Example: http://www.w3.org/2001/04/xmlencsha256      */
DECL|field|signerDigestAlgorithm
specifier|private
name|String
name|signerDigestAlgorithm
decl_stmt|;
comment|/**      * In order to protect the KeyInfo element from tampering you can add a      * reference to the signed info element so that it is protected via the      * signature value. The default value is true. Only relevant when a KeyInfo      * is returned by KeyAccessor. and link KeyInfogetId() is not null.      */
DECL|field|signerAddKeyInfoReference
specifier|private
name|Boolean
name|signerAddKeyInfoReference
decl_stmt|;
comment|/**      * Namespace prefix for the XML signature namespace      * http://www.w3.org/2000/09/xmldsig. Default value is ds. If null or an      * empty value is setSigner then no prefix is used for the XML signature      * namespace. See best practice      * http://www.w3.org/TR/xmldsig-bestpractices/signing-xml-      * without-namespaces      */
DECL|field|signerPrefixForXmlSignatureNamespace
specifier|private
name|String
name|signerPrefixForXmlSignatureNamespace
decl_stmt|;
comment|/**      * Local name of the parent element to which the XML signature element will      * be added. Only relevant for enveloped XML signature. Alternatively you      * can also use link setParentXpath(XPathFilterParameterSpec). Default value      * is null. The value must be null for enveloping and detached XML      * signature. This parameter or the parameter link      * setParentXpath(XPathFilterParameterSpec) for enveloped signature and the      * parameter link setXpathsToIdAttributes(List) for detached signature must      * not be setSigner in the same configuration. If the parameters parentXpath      * and parentLocalName are specified in the same configuration then an      * exception is thrown.      */
DECL|field|signerParentLocalName
specifier|private
name|String
name|signerParentLocalName
decl_stmt|;
comment|/**      * Namespace of the parent element to which the XML signature element will      * be added.      */
DECL|field|signerParentNamespace
specifier|private
name|String
name|signerParentNamespace
decl_stmt|;
comment|/**      * setSigners the content object Id attribute value. By default a UUID is      * generated. If you setSigner the null value then a new UUID will be      * generated. Only used in the enveloping case.      */
DECL|field|signerContentObjectId
specifier|private
name|String
name|signerContentObjectId
decl_stmt|;
comment|/**      * setSigners the signature Id. If this parameter is not setSigner (null      * value) then a unique ID is generated for the signature ID (default). If      * this parameter is setSigner to (empty string) then no Id attribute is      * created in the signature element.      */
DECL|field|signerSignatureId
specifier|private
name|String
name|signerSignatureId
decl_stmt|;
comment|/**      * Reference URI for the content to be signed. Only used in the enveloped      * case. If the reference URI contains an ID attribute value then the      * resource schema URI ( link setSchemaResourceUri(String)) must also be      * setSigner because the schema validator will then find out which      * attributes are ID attributes. Will be ignored in the enveloping or      * detached case.      */
DECL|field|signerContentReferenceUri
specifier|private
name|String
name|signerContentReferenceUri
decl_stmt|;
comment|/**      * Type of the content reference. The default value is null. This value can      * be overwritten by the header link      * XmlSignatureConstantsHEADER_CONTENT_REFERENCE_TYPE.      */
DECL|field|signerContentReferenceType
specifier|private
name|String
name|signerContentReferenceType
decl_stmt|;
comment|/**      * Indicator whether the message body contains plain text. The default value      * is false indicating that the message body contains XML. The value can be      * overwritten by the header link      * XmlSignatureConstantsHEADER_MESSAGE_IS_PLAIN_TEXT.      */
DECL|field|signerPlainText
specifier|private
name|Boolean
name|signerPlainText
decl_stmt|;
comment|/**      * Encoding of the plain text. Only relevant if the message body is plain      * text (see parameter link plainText. Default value is UTF-8.      */
DECL|field|signerPlainTextEncoding
specifier|private
name|String
name|signerPlainTextEncoding
decl_stmt|;
comment|/**      * For adding additional References and Objects to the XML signature which      * contain additional properties you can provide a bean which implements the      * XmlSignatureProperties interface.      */
DECL|field|signerProperties
specifier|private
name|XmlSignatureProperties
name|signerProperties
decl_stmt|;
comment|/**      * Define the elements which are signed in the detached case via XPATH      * expressions to ID attributes (attributes of type ID). For each element      * found via the XPATH expression a detached signature is created whose      * reference URI contains the corresponding attribute value (preceded by      * ''). The signature becomes the last sibling of the signed element.      * Elements with deeper hierarchy level are signed first. You can also      * setSigner the XPATH list dynamically via the header link      * XmlSignatureConstantsHEADER_XPATHS_TO_ID_ATTRIBUTES. The parameter link      * setParentLocalName(String) or link      * setParentXpath(XPathFilterParameterSpec) for enveloped signature and this      * parameter for detached signature must not be setSigner in the same      * configuration.      */
DECL|field|signerXpathsToIdAttributes
specifier|private
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|signerXpathsToIdAttributes
decl_stmt|;
comment|/**      * setSigners the XPath to find the parent node in the enveloped case.      * Either you specify the parent node via this method or the local name and      * namespace of the parent with the methods link setParentLocalName(String)      * and link setParentNamespace(String). Default value is null. The value      * must be null for enveloping and detached XML signature. If the parameters      * parentXpath and parentLocalName are specified in the same configuration      * then an exception is thrown.      */
DECL|field|signerParentXpath
specifier|private
name|XPathFilterParameterSpec
name|signerParentXpath
decl_stmt|;
comment|/**      * If you want to restrict the remote access via reference URIs you can      * setVerifier an own dereferencer. Optional parameter. If not setVerifier      * the provider default dereferencer is used which can resolve URI fragments      * HTTP file and XPpointer URIs. Attention: The implementation is provider      * dependent!      */
DECL|field|verifierUriDereferencer
specifier|private
name|URIDereferencer
name|verifierUriDereferencer
decl_stmt|;
comment|/**      * You can setVerifier a base URI which is used in the URI dereferencing.      * Relative URIs are then concatenated with the base URI.      */
DECL|field|verifierBaseUri
specifier|private
name|String
name|verifierBaseUri
decl_stmt|;
comment|/**      * Provides the key for validating the XML signature.      */
DECL|field|verifierKeySelector
specifier|private
name|KeySelector
name|verifierKeySelector
decl_stmt|;
comment|/**      * This interface allows the application to check the XML signature before      * the validation is executed. This step is recommended in      * http://www.w3.org/TR/xmldsig-bestpractices/check-what-is-signed      */
DECL|field|verifierXmlSignatureChecker
specifier|private
name|XmlSignatureChecker
name|verifierXmlSignatureChecker
decl_stmt|;
comment|/**      * Disallows that the incoming XML document contains DTD DOCTYPE      * declaration. The default value is link BooleanTRUE.      */
DECL|field|verifierDisallowDoctypeDecl
specifier|private
name|Boolean
name|verifierDisallowDoctypeDecl
decl_stmt|;
comment|/**      * Indicator whether the XML declaration in the outgoing message body should      * be omitted. Default value is false. Can be overwritten by the header link      * XmlSignatureConstantsHEADER_OMIT_XML_DECLARATION.      */
DECL|field|verifierOmitXmlDeclaration
specifier|private
name|Boolean
name|verifierOmitXmlDeclaration
decl_stmt|;
comment|/**      * Determines if the XML signature specific headers be cleared after signing      * and verification. Defaults to true.      */
DECL|field|verifierClearHeaders
specifier|private
name|Boolean
name|verifierClearHeaders
decl_stmt|;
comment|/**      * Classpath to the XML Schema. Must be specified in the detached XML      * Signature case for determining the ID attributes might be setVerifier in      * the enveloped and enveloping case. If setVerifier then the XML document      * is validated with the specified XML schema. The schema resource URI can      * be overwritten by the header link      * XmlSignatureConstantsHEADER_SCHEMA_RESOURCE_URI.      */
DECL|field|verifierSchemaResourceUri
specifier|private
name|String
name|verifierSchemaResourceUri
decl_stmt|;
comment|/**      * The character encoding of the resulting signed XML document. If null then      * the encoding of the original XML document is used.      */
DECL|field|verifierOutputXmlEncoding
specifier|private
name|String
name|verifierOutputXmlEncoding
decl_stmt|;
comment|/**      * Bean which maps the XML signature to the output-message after the      * validation. How this mapping should be done can be configured by the      * options outputNodeSearchType outputNodeSearch and      * removeSignatureElements. The default implementation offers three      * possibilities which are related to the three output node search types      * Default ElementName and XPath. The default implementation determines a      * node which is then serialized and setVerifier to the body of the output      * message If the search type is ElementName then the output node (which      * must be in this case an element) is determined by the local name and      * namespace defined in the search value (see option outputNodeSearch). If      * the search type is XPath then the output node is determined by the XPath      * specified in the search value (in this case the output node can be of      * type Element TextNode or Document). If the output node search type is      * Default then the following rules apply: In the enveloped XML signature      * case (there is a reference with URI= and transform      * http://www.w3.org/2000/09/xmldsigenveloped-signature) the incoming XML      * document without the Signature element is setVerifier to the output      * message body. In the non-enveloped XML signature case the message body is      * determined from a referenced Object; this is explained in more detail in      * chapter Output Node Determination in Enveloping XML Signature Case.      */
DECL|field|verifierXmlSignature2Message
specifier|private
name|XmlSignature2Message
name|verifierXmlSignature2Message
decl_stmt|;
comment|/**      * Handles the different validation failed situations. The default      * implementation throws specific exceptions for the different situations      * (All exceptions have the package name      * org.apache.camel.component.xmlsecurity.api and are a sub-class of      * XmlSignatureInvalidException. If the signature value validation fails a      * XmlSignatureInvalidValueException is thrown. If a reference validation      * fails a XmlSignatureInvalidContentHashException is thrown. For more      * detailed information see the JavaDoc.      */
DECL|field|verifierValidationFailedHandler
specifier|private
name|ValidationFailedHandler
name|verifierValidationFailedHandler
decl_stmt|;
comment|/**      * setVerifiers the output node search value for determining the node from      * the XML signature document which shall be setVerifier to the output      * message body. The class of the value depends on the type of the output      * node search. The output node search is forwarded to XmlSignature2Message.      */
DECL|field|verifierOutputNodeSearch
specifier|private
name|Object
name|verifierOutputNodeSearch
decl_stmt|;
comment|/**      * Determines the search type for determining the output node which is      * serialized into the output message bodyF. See link      * setOutputNodeSearch(Object). The supported default search types you can      * find in DefaultXmlSignature2Message.      */
DECL|field|verifierOutputNodeSearchType
specifier|private
name|String
name|verifierOutputNodeSearchType
decl_stmt|;
comment|/**      * Indicator whether the XML signature elements (elements with local name      * Signature and namesapce http://www.w3.org/2000/09/xmldsig) shall be      * removed from the document setVerifier to the output message. Normally      * this is only necessary if the XML signature is enveloped. The default      * value is link BooleanFALSE. This parameter is forwarded to      * XmlSignature2Message. This indicator has no effect if the output node      * search is of type link      * DefaultXmlSignature2MessageOUTPUT_NODE_SEARCH_TYPE_DEFAULT.F      */
DECL|field|verifierRemoveSignatureElements
specifier|private
name|Boolean
name|verifierRemoveSignatureElements
decl_stmt|;
comment|/**      * Enables secure validation. If true then secure validation is enabled.      */
DECL|field|verifierSecureValidation
specifier|private
name|Boolean
name|verifierSecureValidation
decl_stmt|;
comment|/**      * Name of handler to      */
DECL|field|verifierValidationFailedHandlerName
specifier|private
name|String
name|verifierValidationFailedHandlerName
decl_stmt|;
DECL|method|getSignerConfiguration ()
specifier|public
name|XmlSignerConfiguration
name|getSignerConfiguration
parameter_list|()
block|{
return|return
name|signerConfiguration
return|;
block|}
DECL|method|setSignerConfiguration ( XmlSignerConfiguration signerConfiguration)
specifier|public
name|void
name|setSignerConfiguration
parameter_list|(
name|XmlSignerConfiguration
name|signerConfiguration
parameter_list|)
block|{
name|this
operator|.
name|signerConfiguration
operator|=
name|signerConfiguration
expr_stmt|;
block|}
DECL|method|getVerifierConfiguration ()
specifier|public
name|XmlVerifierConfiguration
name|getVerifierConfiguration
parameter_list|()
block|{
return|return
name|verifierConfiguration
return|;
block|}
DECL|method|setVerifierConfiguration ( XmlVerifierConfiguration verifierConfiguration)
specifier|public
name|void
name|setVerifierConfiguration
parameter_list|(
name|XmlVerifierConfiguration
name|verifierConfiguration
parameter_list|)
block|{
name|this
operator|.
name|verifierConfiguration
operator|=
name|verifierConfiguration
expr_stmt|;
block|}
DECL|method|getSignerUriDereferencer ()
specifier|public
name|URIDereferencer
name|getSignerUriDereferencer
parameter_list|()
block|{
return|return
name|signerUriDereferencer
return|;
block|}
DECL|method|setSignerUriDereferencer (URIDereferencer signerUriDereferencer)
specifier|public
name|void
name|setSignerUriDereferencer
parameter_list|(
name|URIDereferencer
name|signerUriDereferencer
parameter_list|)
block|{
name|this
operator|.
name|signerUriDereferencer
operator|=
name|signerUriDereferencer
expr_stmt|;
block|}
DECL|method|getSignerBaseUri ()
specifier|public
name|String
name|getSignerBaseUri
parameter_list|()
block|{
return|return
name|signerBaseUri
return|;
block|}
DECL|method|setSignerBaseUri (String signerBaseUri)
specifier|public
name|void
name|setSignerBaseUri
parameter_list|(
name|String
name|signerBaseUri
parameter_list|)
block|{
name|this
operator|.
name|signerBaseUri
operator|=
name|signerBaseUri
expr_stmt|;
block|}
DECL|method|getSignerDisallowDoctypeDecl ()
specifier|public
name|Boolean
name|getSignerDisallowDoctypeDecl
parameter_list|()
block|{
return|return
name|signerDisallowDoctypeDecl
return|;
block|}
DECL|method|setSignerDisallowDoctypeDecl (Boolean signerDisallowDoctypeDecl)
specifier|public
name|void
name|setSignerDisallowDoctypeDecl
parameter_list|(
name|Boolean
name|signerDisallowDoctypeDecl
parameter_list|)
block|{
name|this
operator|.
name|signerDisallowDoctypeDecl
operator|=
name|signerDisallowDoctypeDecl
expr_stmt|;
block|}
DECL|method|getSignerKeyAccessor ()
specifier|public
name|KeyAccessor
name|getSignerKeyAccessor
parameter_list|()
block|{
return|return
name|signerKeyAccessor
return|;
block|}
DECL|method|setSignerKeyAccessor (KeyAccessor signerKeyAccessor)
specifier|public
name|void
name|setSignerKeyAccessor
parameter_list|(
name|KeyAccessor
name|signerKeyAccessor
parameter_list|)
block|{
name|this
operator|.
name|signerKeyAccessor
operator|=
name|signerKeyAccessor
expr_stmt|;
block|}
DECL|method|getSignerOmitXmlDeclaration ()
specifier|public
name|Boolean
name|getSignerOmitXmlDeclaration
parameter_list|()
block|{
return|return
name|signerOmitXmlDeclaration
return|;
block|}
DECL|method|setSignerOmitXmlDeclaration (Boolean signerOmitXmlDeclaration)
specifier|public
name|void
name|setSignerOmitXmlDeclaration
parameter_list|(
name|Boolean
name|signerOmitXmlDeclaration
parameter_list|)
block|{
name|this
operator|.
name|signerOmitXmlDeclaration
operator|=
name|signerOmitXmlDeclaration
expr_stmt|;
block|}
DECL|method|getSignerClearHeaders ()
specifier|public
name|Boolean
name|getSignerClearHeaders
parameter_list|()
block|{
return|return
name|signerClearHeaders
return|;
block|}
DECL|method|setSignerClearHeaders (Boolean signerClearHeaders)
specifier|public
name|void
name|setSignerClearHeaders
parameter_list|(
name|Boolean
name|signerClearHeaders
parameter_list|)
block|{
name|this
operator|.
name|signerClearHeaders
operator|=
name|signerClearHeaders
expr_stmt|;
block|}
DECL|method|getSignerCanonicalizationMethod ()
specifier|public
name|AlgorithmMethod
name|getSignerCanonicalizationMethod
parameter_list|()
block|{
return|return
name|signerCanonicalizationMethod
return|;
block|}
DECL|method|setSignerCanonicalizationMethod ( AlgorithmMethod signerCanonicalizationMethod)
specifier|public
name|void
name|setSignerCanonicalizationMethod
parameter_list|(
name|AlgorithmMethod
name|signerCanonicalizationMethod
parameter_list|)
block|{
name|this
operator|.
name|signerCanonicalizationMethod
operator|=
name|signerCanonicalizationMethod
expr_stmt|;
block|}
DECL|method|getSignerSchemaResourceUri ()
specifier|public
name|String
name|getSignerSchemaResourceUri
parameter_list|()
block|{
return|return
name|signerSchemaResourceUri
return|;
block|}
DECL|method|setSignerSchemaResourceUri (String signerSchemaResourceUri)
specifier|public
name|void
name|setSignerSchemaResourceUri
parameter_list|(
name|String
name|signerSchemaResourceUri
parameter_list|)
block|{
name|this
operator|.
name|signerSchemaResourceUri
operator|=
name|signerSchemaResourceUri
expr_stmt|;
block|}
DECL|method|getSignerOutputXmlEncoding ()
specifier|public
name|String
name|getSignerOutputXmlEncoding
parameter_list|()
block|{
return|return
name|signerOutputXmlEncoding
return|;
block|}
DECL|method|setSignerOutputXmlEncoding (String signerOutputXmlEncoding)
specifier|public
name|void
name|setSignerOutputXmlEncoding
parameter_list|(
name|String
name|signerOutputXmlEncoding
parameter_list|)
block|{
name|this
operator|.
name|signerOutputXmlEncoding
operator|=
name|signerOutputXmlEncoding
expr_stmt|;
block|}
DECL|method|getSignerTransformMethods ()
specifier|public
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|getSignerTransformMethods
parameter_list|()
block|{
return|return
name|signerTransformMethods
return|;
block|}
DECL|method|setSignerTransformMethods ( List<AlgorithmMethod> signerTransformMethods)
specifier|public
name|void
name|setSignerTransformMethods
parameter_list|(
name|List
argument_list|<
name|AlgorithmMethod
argument_list|>
name|signerTransformMethods
parameter_list|)
block|{
name|this
operator|.
name|signerTransformMethods
operator|=
name|signerTransformMethods
expr_stmt|;
block|}
DECL|method|getSignerSignatureAlgorithm ()
specifier|public
name|String
name|getSignerSignatureAlgorithm
parameter_list|()
block|{
return|return
name|signerSignatureAlgorithm
return|;
block|}
DECL|method|setSignerSignatureAlgorithm (String signerSignatureAlgorithm)
specifier|public
name|void
name|setSignerSignatureAlgorithm
parameter_list|(
name|String
name|signerSignatureAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|signerSignatureAlgorithm
operator|=
name|signerSignatureAlgorithm
expr_stmt|;
block|}
DECL|method|getSignerDigestAlgorithm ()
specifier|public
name|String
name|getSignerDigestAlgorithm
parameter_list|()
block|{
return|return
name|signerDigestAlgorithm
return|;
block|}
DECL|method|setSignerDigestAlgorithm (String signerDigestAlgorithm)
specifier|public
name|void
name|setSignerDigestAlgorithm
parameter_list|(
name|String
name|signerDigestAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|signerDigestAlgorithm
operator|=
name|signerDigestAlgorithm
expr_stmt|;
block|}
DECL|method|getSignerAddKeyInfoReference ()
specifier|public
name|Boolean
name|getSignerAddKeyInfoReference
parameter_list|()
block|{
return|return
name|signerAddKeyInfoReference
return|;
block|}
DECL|method|setSignerAddKeyInfoReference (Boolean signerAddKeyInfoReference)
specifier|public
name|void
name|setSignerAddKeyInfoReference
parameter_list|(
name|Boolean
name|signerAddKeyInfoReference
parameter_list|)
block|{
name|this
operator|.
name|signerAddKeyInfoReference
operator|=
name|signerAddKeyInfoReference
expr_stmt|;
block|}
DECL|method|getSignerPrefixForXmlSignatureNamespace ()
specifier|public
name|String
name|getSignerPrefixForXmlSignatureNamespace
parameter_list|()
block|{
return|return
name|signerPrefixForXmlSignatureNamespace
return|;
block|}
DECL|method|setSignerPrefixForXmlSignatureNamespace ( String signerPrefixForXmlSignatureNamespace)
specifier|public
name|void
name|setSignerPrefixForXmlSignatureNamespace
parameter_list|(
name|String
name|signerPrefixForXmlSignatureNamespace
parameter_list|)
block|{
name|this
operator|.
name|signerPrefixForXmlSignatureNamespace
operator|=
name|signerPrefixForXmlSignatureNamespace
expr_stmt|;
block|}
DECL|method|getSignerParentLocalName ()
specifier|public
name|String
name|getSignerParentLocalName
parameter_list|()
block|{
return|return
name|signerParentLocalName
return|;
block|}
DECL|method|setSignerParentLocalName (String signerParentLocalName)
specifier|public
name|void
name|setSignerParentLocalName
parameter_list|(
name|String
name|signerParentLocalName
parameter_list|)
block|{
name|this
operator|.
name|signerParentLocalName
operator|=
name|signerParentLocalName
expr_stmt|;
block|}
DECL|method|getSignerParentNamespace ()
specifier|public
name|String
name|getSignerParentNamespace
parameter_list|()
block|{
return|return
name|signerParentNamespace
return|;
block|}
DECL|method|setSignerParentNamespace (String signerParentNamespace)
specifier|public
name|void
name|setSignerParentNamespace
parameter_list|(
name|String
name|signerParentNamespace
parameter_list|)
block|{
name|this
operator|.
name|signerParentNamespace
operator|=
name|signerParentNamespace
expr_stmt|;
block|}
DECL|method|getSignerContentObjectId ()
specifier|public
name|String
name|getSignerContentObjectId
parameter_list|()
block|{
return|return
name|signerContentObjectId
return|;
block|}
DECL|method|setSignerContentObjectId (String signerContentObjectId)
specifier|public
name|void
name|setSignerContentObjectId
parameter_list|(
name|String
name|signerContentObjectId
parameter_list|)
block|{
name|this
operator|.
name|signerContentObjectId
operator|=
name|signerContentObjectId
expr_stmt|;
block|}
DECL|method|getSignerSignatureId ()
specifier|public
name|String
name|getSignerSignatureId
parameter_list|()
block|{
return|return
name|signerSignatureId
return|;
block|}
DECL|method|setSignerSignatureId (String signerSignatureId)
specifier|public
name|void
name|setSignerSignatureId
parameter_list|(
name|String
name|signerSignatureId
parameter_list|)
block|{
name|this
operator|.
name|signerSignatureId
operator|=
name|signerSignatureId
expr_stmt|;
block|}
DECL|method|getSignerContentReferenceUri ()
specifier|public
name|String
name|getSignerContentReferenceUri
parameter_list|()
block|{
return|return
name|signerContentReferenceUri
return|;
block|}
DECL|method|setSignerContentReferenceUri (String signerContentReferenceUri)
specifier|public
name|void
name|setSignerContentReferenceUri
parameter_list|(
name|String
name|signerContentReferenceUri
parameter_list|)
block|{
name|this
operator|.
name|signerContentReferenceUri
operator|=
name|signerContentReferenceUri
expr_stmt|;
block|}
DECL|method|getSignerContentReferenceType ()
specifier|public
name|String
name|getSignerContentReferenceType
parameter_list|()
block|{
return|return
name|signerContentReferenceType
return|;
block|}
DECL|method|setSignerContentReferenceType (String signerContentReferenceType)
specifier|public
name|void
name|setSignerContentReferenceType
parameter_list|(
name|String
name|signerContentReferenceType
parameter_list|)
block|{
name|this
operator|.
name|signerContentReferenceType
operator|=
name|signerContentReferenceType
expr_stmt|;
block|}
DECL|method|getSignerPlainText ()
specifier|public
name|Boolean
name|getSignerPlainText
parameter_list|()
block|{
return|return
name|signerPlainText
return|;
block|}
DECL|method|setSignerPlainText (Boolean signerPlainText)
specifier|public
name|void
name|setSignerPlainText
parameter_list|(
name|Boolean
name|signerPlainText
parameter_list|)
block|{
name|this
operator|.
name|signerPlainText
operator|=
name|signerPlainText
expr_stmt|;
block|}
DECL|method|getSignerPlainTextEncoding ()
specifier|public
name|String
name|getSignerPlainTextEncoding
parameter_list|()
block|{
return|return
name|signerPlainTextEncoding
return|;
block|}
DECL|method|setSignerPlainTextEncoding (String signerPlainTextEncoding)
specifier|public
name|void
name|setSignerPlainTextEncoding
parameter_list|(
name|String
name|signerPlainTextEncoding
parameter_list|)
block|{
name|this
operator|.
name|signerPlainTextEncoding
operator|=
name|signerPlainTextEncoding
expr_stmt|;
block|}
DECL|method|getSignerProperties ()
specifier|public
name|XmlSignatureProperties
name|getSignerProperties
parameter_list|()
block|{
return|return
name|signerProperties
return|;
block|}
DECL|method|setSignerProperties (XmlSignatureProperties signerProperties)
specifier|public
name|void
name|setSignerProperties
parameter_list|(
name|XmlSignatureProperties
name|signerProperties
parameter_list|)
block|{
name|this
operator|.
name|signerProperties
operator|=
name|signerProperties
expr_stmt|;
block|}
DECL|method|getSignerXpathsToIdAttributes ()
specifier|public
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|getSignerXpathsToIdAttributes
parameter_list|()
block|{
return|return
name|signerXpathsToIdAttributes
return|;
block|}
DECL|method|setSignerXpathsToIdAttributes ( List<XPathFilterParameterSpec> signerXpathsToIdAttributes)
specifier|public
name|void
name|setSignerXpathsToIdAttributes
parameter_list|(
name|List
argument_list|<
name|XPathFilterParameterSpec
argument_list|>
name|signerXpathsToIdAttributes
parameter_list|)
block|{
name|this
operator|.
name|signerXpathsToIdAttributes
operator|=
name|signerXpathsToIdAttributes
expr_stmt|;
block|}
DECL|method|getSignerParentXpath ()
specifier|public
name|XPathFilterParameterSpec
name|getSignerParentXpath
parameter_list|()
block|{
return|return
name|signerParentXpath
return|;
block|}
DECL|method|setSignerParentXpath (XPathFilterParameterSpec signerParentXpath)
specifier|public
name|void
name|setSignerParentXpath
parameter_list|(
name|XPathFilterParameterSpec
name|signerParentXpath
parameter_list|)
block|{
name|this
operator|.
name|signerParentXpath
operator|=
name|signerParentXpath
expr_stmt|;
block|}
DECL|method|getVerifierUriDereferencer ()
specifier|public
name|URIDereferencer
name|getVerifierUriDereferencer
parameter_list|()
block|{
return|return
name|verifierUriDereferencer
return|;
block|}
DECL|method|setVerifierUriDereferencer ( URIDereferencer verifierUriDereferencer)
specifier|public
name|void
name|setVerifierUriDereferencer
parameter_list|(
name|URIDereferencer
name|verifierUriDereferencer
parameter_list|)
block|{
name|this
operator|.
name|verifierUriDereferencer
operator|=
name|verifierUriDereferencer
expr_stmt|;
block|}
DECL|method|getVerifierBaseUri ()
specifier|public
name|String
name|getVerifierBaseUri
parameter_list|()
block|{
return|return
name|verifierBaseUri
return|;
block|}
DECL|method|setVerifierBaseUri (String verifierBaseUri)
specifier|public
name|void
name|setVerifierBaseUri
parameter_list|(
name|String
name|verifierBaseUri
parameter_list|)
block|{
name|this
operator|.
name|verifierBaseUri
operator|=
name|verifierBaseUri
expr_stmt|;
block|}
DECL|method|getVerifierKeySelector ()
specifier|public
name|KeySelector
name|getVerifierKeySelector
parameter_list|()
block|{
return|return
name|verifierKeySelector
return|;
block|}
DECL|method|setVerifierKeySelector (KeySelector verifierKeySelector)
specifier|public
name|void
name|setVerifierKeySelector
parameter_list|(
name|KeySelector
name|verifierKeySelector
parameter_list|)
block|{
name|this
operator|.
name|verifierKeySelector
operator|=
name|verifierKeySelector
expr_stmt|;
block|}
DECL|method|getVerifierXmlSignatureChecker ()
specifier|public
name|XmlSignatureChecker
name|getVerifierXmlSignatureChecker
parameter_list|()
block|{
return|return
name|verifierXmlSignatureChecker
return|;
block|}
DECL|method|setVerifierXmlSignatureChecker ( XmlSignatureChecker verifierXmlSignatureChecker)
specifier|public
name|void
name|setVerifierXmlSignatureChecker
parameter_list|(
name|XmlSignatureChecker
name|verifierXmlSignatureChecker
parameter_list|)
block|{
name|this
operator|.
name|verifierXmlSignatureChecker
operator|=
name|verifierXmlSignatureChecker
expr_stmt|;
block|}
DECL|method|getVerifierDisallowDoctypeDecl ()
specifier|public
name|Boolean
name|getVerifierDisallowDoctypeDecl
parameter_list|()
block|{
return|return
name|verifierDisallowDoctypeDecl
return|;
block|}
DECL|method|setVerifierDisallowDoctypeDecl ( Boolean verifierDisallowDoctypeDecl)
specifier|public
name|void
name|setVerifierDisallowDoctypeDecl
parameter_list|(
name|Boolean
name|verifierDisallowDoctypeDecl
parameter_list|)
block|{
name|this
operator|.
name|verifierDisallowDoctypeDecl
operator|=
name|verifierDisallowDoctypeDecl
expr_stmt|;
block|}
DECL|method|getVerifierOmitXmlDeclaration ()
specifier|public
name|Boolean
name|getVerifierOmitXmlDeclaration
parameter_list|()
block|{
return|return
name|verifierOmitXmlDeclaration
return|;
block|}
DECL|method|setVerifierOmitXmlDeclaration (Boolean verifierOmitXmlDeclaration)
specifier|public
name|void
name|setVerifierOmitXmlDeclaration
parameter_list|(
name|Boolean
name|verifierOmitXmlDeclaration
parameter_list|)
block|{
name|this
operator|.
name|verifierOmitXmlDeclaration
operator|=
name|verifierOmitXmlDeclaration
expr_stmt|;
block|}
DECL|method|getVerifierClearHeaders ()
specifier|public
name|Boolean
name|getVerifierClearHeaders
parameter_list|()
block|{
return|return
name|verifierClearHeaders
return|;
block|}
DECL|method|setVerifierClearHeaders (Boolean verifierClearHeaders)
specifier|public
name|void
name|setVerifierClearHeaders
parameter_list|(
name|Boolean
name|verifierClearHeaders
parameter_list|)
block|{
name|this
operator|.
name|verifierClearHeaders
operator|=
name|verifierClearHeaders
expr_stmt|;
block|}
DECL|method|getVerifierSchemaResourceUri ()
specifier|public
name|String
name|getVerifierSchemaResourceUri
parameter_list|()
block|{
return|return
name|verifierSchemaResourceUri
return|;
block|}
DECL|method|setVerifierSchemaResourceUri (String verifierSchemaResourceUri)
specifier|public
name|void
name|setVerifierSchemaResourceUri
parameter_list|(
name|String
name|verifierSchemaResourceUri
parameter_list|)
block|{
name|this
operator|.
name|verifierSchemaResourceUri
operator|=
name|verifierSchemaResourceUri
expr_stmt|;
block|}
DECL|method|getVerifierOutputXmlEncoding ()
specifier|public
name|String
name|getVerifierOutputXmlEncoding
parameter_list|()
block|{
return|return
name|verifierOutputXmlEncoding
return|;
block|}
DECL|method|setVerifierOutputXmlEncoding (String verifierOutputXmlEncoding)
specifier|public
name|void
name|setVerifierOutputXmlEncoding
parameter_list|(
name|String
name|verifierOutputXmlEncoding
parameter_list|)
block|{
name|this
operator|.
name|verifierOutputXmlEncoding
operator|=
name|verifierOutputXmlEncoding
expr_stmt|;
block|}
DECL|method|getVerifierXmlSignature2Message ()
specifier|public
name|XmlSignature2Message
name|getVerifierXmlSignature2Message
parameter_list|()
block|{
return|return
name|verifierXmlSignature2Message
return|;
block|}
DECL|method|setVerifierXmlSignature2Message ( XmlSignature2Message verifierXmlSignature2Message)
specifier|public
name|void
name|setVerifierXmlSignature2Message
parameter_list|(
name|XmlSignature2Message
name|verifierXmlSignature2Message
parameter_list|)
block|{
name|this
operator|.
name|verifierXmlSignature2Message
operator|=
name|verifierXmlSignature2Message
expr_stmt|;
block|}
DECL|method|getVerifierValidationFailedHandler ()
specifier|public
name|ValidationFailedHandler
name|getVerifierValidationFailedHandler
parameter_list|()
block|{
return|return
name|verifierValidationFailedHandler
return|;
block|}
DECL|method|setVerifierValidationFailedHandler ( ValidationFailedHandler verifierValidationFailedHandler)
specifier|public
name|void
name|setVerifierValidationFailedHandler
parameter_list|(
name|ValidationFailedHandler
name|verifierValidationFailedHandler
parameter_list|)
block|{
name|this
operator|.
name|verifierValidationFailedHandler
operator|=
name|verifierValidationFailedHandler
expr_stmt|;
block|}
DECL|method|getVerifierOutputNodeSearch ()
specifier|public
name|Object
name|getVerifierOutputNodeSearch
parameter_list|()
block|{
return|return
name|verifierOutputNodeSearch
return|;
block|}
DECL|method|setVerifierOutputNodeSearch (Object verifierOutputNodeSearch)
specifier|public
name|void
name|setVerifierOutputNodeSearch
parameter_list|(
name|Object
name|verifierOutputNodeSearch
parameter_list|)
block|{
name|this
operator|.
name|verifierOutputNodeSearch
operator|=
name|verifierOutputNodeSearch
expr_stmt|;
block|}
DECL|method|getVerifierOutputNodeSearchType ()
specifier|public
name|String
name|getVerifierOutputNodeSearchType
parameter_list|()
block|{
return|return
name|verifierOutputNodeSearchType
return|;
block|}
DECL|method|setVerifierOutputNodeSearchType ( String verifierOutputNodeSearchType)
specifier|public
name|void
name|setVerifierOutputNodeSearchType
parameter_list|(
name|String
name|verifierOutputNodeSearchType
parameter_list|)
block|{
name|this
operator|.
name|verifierOutputNodeSearchType
operator|=
name|verifierOutputNodeSearchType
expr_stmt|;
block|}
DECL|method|getVerifierRemoveSignatureElements ()
specifier|public
name|Boolean
name|getVerifierRemoveSignatureElements
parameter_list|()
block|{
return|return
name|verifierRemoveSignatureElements
return|;
block|}
DECL|method|setVerifierRemoveSignatureElements ( Boolean verifierRemoveSignatureElements)
specifier|public
name|void
name|setVerifierRemoveSignatureElements
parameter_list|(
name|Boolean
name|verifierRemoveSignatureElements
parameter_list|)
block|{
name|this
operator|.
name|verifierRemoveSignatureElements
operator|=
name|verifierRemoveSignatureElements
expr_stmt|;
block|}
DECL|method|getVerifierSecureValidation ()
specifier|public
name|Boolean
name|getVerifierSecureValidation
parameter_list|()
block|{
return|return
name|verifierSecureValidation
return|;
block|}
DECL|method|setVerifierSecureValidation (Boolean verifierSecureValidation)
specifier|public
name|void
name|setVerifierSecureValidation
parameter_list|(
name|Boolean
name|verifierSecureValidation
parameter_list|)
block|{
name|this
operator|.
name|verifierSecureValidation
operator|=
name|verifierSecureValidation
expr_stmt|;
block|}
DECL|method|getVerifierValidationFailedHandlerName ()
specifier|public
name|String
name|getVerifierValidationFailedHandlerName
parameter_list|()
block|{
return|return
name|verifierValidationFailedHandlerName
return|;
block|}
DECL|method|setVerifierValidationFailedHandlerName ( String verifierValidationFailedHandlerName)
specifier|public
name|void
name|setVerifierValidationFailedHandlerName
parameter_list|(
name|String
name|verifierValidationFailedHandlerName
parameter_list|)
block|{
name|this
operator|.
name|verifierValidationFailedHandlerName
operator|=
name|verifierValidationFailedHandlerName
expr_stmt|;
block|}
block|}
end_class

end_unit

