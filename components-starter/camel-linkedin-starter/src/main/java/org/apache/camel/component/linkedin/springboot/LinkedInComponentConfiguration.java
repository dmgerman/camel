begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.linkedin.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|api
operator|.
name|OAuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|api
operator|.
name|OAuthSecureStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|internal
operator|.
name|LinkedInApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * The linkedin component is uses for retrieving LinkedIn user profiles  * connections companies groups posts etc.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.linkedin"
argument_list|)
DECL|class|LinkedInComponentConfiguration
specifier|public
class|class
name|LinkedInComponentConfiguration
block|{
comment|/**      * To use the shared configuration      */
DECL|field|configuration
specifier|private
name|LinkedInConfigurationNestedConfiguration
name|configuration
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|LinkedInConfigurationNestedConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration ( LinkedInConfigurationNestedConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|LinkedInConfigurationNestedConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|class|LinkedInConfigurationNestedConfiguration
specifier|public
specifier|static
class|class
name|LinkedInConfigurationNestedConfiguration
block|{
DECL|field|CAMEL_NESTED_CLASS
specifier|public
specifier|static
specifier|final
name|Class
name|CAMEL_NESTED_CLASS
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|linkedin
operator|.
name|LinkedInConfiguration
operator|.
name|class
decl_stmt|;
comment|/**          * What kind of operation to perform          */
DECL|field|apiName
specifier|private
name|LinkedInApiName
name|apiName
decl_stmt|;
comment|/**          * What sub operation to use for the selected operation          */
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
comment|/**          * LinkedIn user account name, MUST be provided          */
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
comment|/**          * LinkedIn account password          */
DECL|field|userPassword
specifier|private
name|String
name|userPassword
decl_stmt|;
comment|/**          * Callback interface for providing an OAuth token or to store the token          * generated by the component. The callback should return null on the          * first call and then save the created token in the saveToken()          * callback. If the callback returns null the first time, a userPassword          * MUST be provided          */
DECL|field|secureStorage
specifier|private
name|OAuthSecureStorage
name|secureStorage
decl_stmt|;
comment|/**          * LinkedIn application client ID          */
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
comment|/**          * LinkedIn application client secret          */
DECL|field|clientSecret
specifier|private
name|String
name|clientSecret
decl_stmt|;
comment|/**          * List of LinkedIn scopes as specified at          * https://developer.linkedin.com/documents/authentication#granting          */
DECL|field|scopes
specifier|private
name|OAuthScope
index|[]
name|scopes
decl_stmt|;
comment|/**          * Application redirect URI, although the component never redirects to          * this page to avoid having to have a functioning redirect server. So          * for testing one could use https://localhost          */
DECL|field|redirectUri
specifier|private
name|String
name|redirectUri
decl_stmt|;
comment|/**          * Custom HTTP params, for example proxy host and port, use constants          * from AllClientPNames          */
DECL|field|httpParams
specifier|private
name|Map
name|httpParams
decl_stmt|;
comment|/**          * Flag to enable/disable lazy OAuth, default is true. when enabled,          * OAuth token retrieval or generation is not done until the first REST          * call          */
DECL|field|lazyAuth
specifier|private
name|Boolean
name|lazyAuth
decl_stmt|;
DECL|method|getApiName ()
specifier|public
name|LinkedInApiName
name|getApiName
parameter_list|()
block|{
return|return
name|apiName
return|;
block|}
DECL|method|setApiName (LinkedInApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|LinkedInApiName
name|apiName
parameter_list|)
block|{
name|this
operator|.
name|apiName
operator|=
name|apiName
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getUserPassword ()
specifier|public
name|String
name|getUserPassword
parameter_list|()
block|{
return|return
name|userPassword
return|;
block|}
DECL|method|setUserPassword (String userPassword)
specifier|public
name|void
name|setUserPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|this
operator|.
name|userPassword
operator|=
name|userPassword
expr_stmt|;
block|}
DECL|method|getSecureStorage ()
specifier|public
name|OAuthSecureStorage
name|getSecureStorage
parameter_list|()
block|{
return|return
name|secureStorage
return|;
block|}
DECL|method|setSecureStorage (OAuthSecureStorage secureStorage)
specifier|public
name|void
name|setSecureStorage
parameter_list|(
name|OAuthSecureStorage
name|secureStorage
parameter_list|)
block|{
name|this
operator|.
name|secureStorage
operator|=
name|secureStorage
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
DECL|method|setClientId (String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
block|}
DECL|method|getClientSecret ()
specifier|public
name|String
name|getClientSecret
parameter_list|()
block|{
return|return
name|clientSecret
return|;
block|}
DECL|method|setClientSecret (String clientSecret)
specifier|public
name|void
name|setClientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|this
operator|.
name|clientSecret
operator|=
name|clientSecret
expr_stmt|;
block|}
DECL|method|getScopes ()
specifier|public
name|OAuthScope
index|[]
name|getScopes
parameter_list|()
block|{
return|return
name|scopes
return|;
block|}
DECL|method|setScopes (OAuthScope[] scopes)
specifier|public
name|void
name|setScopes
parameter_list|(
name|OAuthScope
index|[]
name|scopes
parameter_list|)
block|{
name|this
operator|.
name|scopes
operator|=
name|scopes
expr_stmt|;
block|}
DECL|method|getRedirectUri ()
specifier|public
name|String
name|getRedirectUri
parameter_list|()
block|{
return|return
name|redirectUri
return|;
block|}
DECL|method|setRedirectUri (String redirectUri)
specifier|public
name|void
name|setRedirectUri
parameter_list|(
name|String
name|redirectUri
parameter_list|)
block|{
name|this
operator|.
name|redirectUri
operator|=
name|redirectUri
expr_stmt|;
block|}
DECL|method|getHttpParams ()
specifier|public
name|Map
name|getHttpParams
parameter_list|()
block|{
return|return
name|httpParams
return|;
block|}
DECL|method|setHttpParams (Map httpParams)
specifier|public
name|void
name|setHttpParams
parameter_list|(
name|Map
name|httpParams
parameter_list|)
block|{
name|this
operator|.
name|httpParams
operator|=
name|httpParams
expr_stmt|;
block|}
DECL|method|getLazyAuth ()
specifier|public
name|Boolean
name|getLazyAuth
parameter_list|()
block|{
return|return
name|lazyAuth
return|;
block|}
DECL|method|setLazyAuth (Boolean lazyAuth)
specifier|public
name|void
name|setLazyAuth
parameter_list|(
name|Boolean
name|lazyAuth
parameter_list|)
block|{
name|this
operator|.
name|lazyAuth
operator|=
name|lazyAuth
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

