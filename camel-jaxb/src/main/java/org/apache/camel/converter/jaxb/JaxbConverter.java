begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.jaxb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|HasAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|util
operator|.
name|JAXBSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|JaxbConverter
specifier|public
class|class
name|JaxbConverter
block|{
DECL|field|jaxbConverter
specifier|private
name|XmlConverter
name|jaxbConverter
decl_stmt|;
DECL|method|getJaxbConverter ()
specifier|public
name|XmlConverter
name|getJaxbConverter
parameter_list|()
block|{
if|if
condition|(
name|jaxbConverter
operator|==
literal|null
condition|)
block|{
name|jaxbConverter
operator|=
operator|new
name|XmlConverter
argument_list|()
expr_stmt|;
block|}
return|return
name|jaxbConverter
return|;
block|}
DECL|method|setJaxbConverter (XmlConverter jaxbConverter)
specifier|public
name|void
name|setJaxbConverter
parameter_list|(
name|XmlConverter
name|jaxbConverter
parameter_list|)
block|{
name|this
operator|.
name|jaxbConverter
operator|=
name|jaxbConverter
expr_stmt|;
block|}
DECL|method|toSource (@asAnnotationXmlRootElement.class)Object value)
specifier|public
specifier|static
name|JAXBSource
name|toSource
parameter_list|(
annotation|@
name|HasAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
name|Object
name|value
parameter_list|)
throws|throws
name|JAXBException
block|{
name|JAXBContext
name|context
init|=
name|createJaxbContext
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|JAXBSource
argument_list|(
name|context
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|toDocument (@asAnnotationXmlRootElement.class)Object value)
specifier|public
name|Document
name|toDocument
parameter_list|(
annotation|@
name|HasAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
name|Object
name|value
parameter_list|)
throws|throws
name|JAXBException
throws|,
name|ParserConfigurationException
block|{
name|JAXBContext
name|context
init|=
name|createJaxbContext
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Marshaller
name|marshaller
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|getJaxbConverter
argument_list|()
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|value
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|createJaxbContext (Object value)
specifier|protected
specifier|static
name|JAXBContext
name|createJaxbContext
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert from null value to JAXBSource"
argument_list|)
throw|;
block|}
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|context
return|;
block|}
comment|/*     public void write(OutputStream out, Object value) throws JAXBException {         JAXBContext context = JAXBContext.newInstance(value.getClass());         Marshaller marshaller = context.createMarshaller();         marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); 		marshaller.marshal(value, out);     } */
block|}
end_class

end_unit

