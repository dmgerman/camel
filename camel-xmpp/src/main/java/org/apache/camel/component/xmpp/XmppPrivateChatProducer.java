begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmpp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jivesoftware
operator|.
name|smack
operator|.
name|Chat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jivesoftware
operator|.
name|smack
operator|.
name|XMPPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jivesoftware
operator|.
name|smack
operator|.
name|packet
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|XmppPrivateChatProducer
specifier|public
class|class
name|XmppPrivateChatProducer
extends|extends
name|DefaultProducer
argument_list|<
name|XmppExchange
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|XmppPrivateChatProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|XmppEndpoint
name|endpoint
decl_stmt|;
DECL|field|participant
specifier|private
specifier|final
name|String
name|participant
decl_stmt|;
DECL|field|chat
specifier|private
name|Chat
name|chat
decl_stmt|;
DECL|method|XmppPrivateChatProducer (XmppEndpoint endpoint, String participant)
specifier|public
name|XmppPrivateChatProducer
parameter_list|(
name|XmppEndpoint
name|endpoint
parameter_list|,
name|String
name|participant
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|participant
operator|=
name|participant
expr_stmt|;
if|if
condition|(
name|participant
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No participant property specified"
argument_list|)
throw|;
block|}
block|}
DECL|method|onExchange (Exchange exchange)
specifier|public
name|void
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// lets convert to the type of an exchange
name|XmppExchange
name|xmppExchange
init|=
name|endpoint
operator|.
name|convertTo
argument_list|(
name|XmppExchange
operator|.
name|class
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|onExchange
argument_list|(
name|xmppExchange
argument_list|)
expr_stmt|;
block|}
DECL|method|onExchange (XmppExchange exchange)
specifier|public
name|void
name|onExchange
parameter_list|(
name|XmppExchange
name|exchange
parameter_list|)
block|{
comment|// TODO it would be nice if we could reuse the message from the exchange
name|Message
name|message
init|=
name|chat
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setTo
argument_list|(
name|participant
argument_list|)
expr_stmt|;
name|message
operator|.
name|setFrom
argument_list|(
name|endpoint
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setThread
argument_list|(
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setType
argument_list|(
name|Message
operator|.
name|Type
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|populateXmppMessage
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|">>>> message: "
operator|+
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|chat
operator|.
name|sendMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMPPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeXmppException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|chat
operator|==
literal|null
condition|)
block|{
name|chat
operator|=
name|endpoint
operator|.
name|getConnection
argument_list|()
operator|.
name|createChat
argument_list|(
name|getParticipant
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|chat
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getChat ()
specifier|public
name|Chat
name|getChat
parameter_list|()
block|{
return|return
name|chat
return|;
block|}
DECL|method|setChat (Chat chat)
specifier|public
name|void
name|setChat
parameter_list|(
name|Chat
name|chat
parameter_list|)
block|{
name|this
operator|.
name|chat
operator|=
name|chat
expr_stmt|;
block|}
DECL|method|getParticipant ()
specifier|public
name|String
name|getParticipant
parameter_list|()
block|{
return|return
name|participant
return|;
block|}
block|}
end_class

end_unit

