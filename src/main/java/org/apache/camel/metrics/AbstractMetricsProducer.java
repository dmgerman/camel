begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|metrics
operator|.
name|MetricsComponent
operator|.
name|HEADER_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|metrics
operator|.
name|MetricsComponent
operator|.
name|HEADER_PERFIX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_class
DECL|class|AbstractMetricsProducer
specifier|public
specifier|abstract
class|class
name|AbstractMetricsProducer
parameter_list|<
name|T
extends|extends
name|AbstractMetricsEndpoint
parameter_list|>
extends|extends
name|DefaultProducer
block|{
DECL|field|HEADER_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|HEADER_PATTERN
init|=
name|HEADER_PERFIX
operator|+
literal|"*"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractMetricsProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AbstractMetricsProducer (T endpoint)
specifier|public
name|AbstractMetricsProducer
parameter_list|(
name|T
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|endpoint
init|=
operator|(
name|T
operator|)
name|getEndpoint
argument_list|()
decl_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|defaultMetricsName
init|=
name|endpoint
operator|.
name|getMetricsName
argument_list|()
decl_stmt|;
name|String
name|finalMetricsName
init|=
name|getMetricsName
argument_list|(
name|in
argument_list|,
name|defaultMetricsName
argument_list|)
decl_stmt|;
name|MetricRegistry
name|registry
init|=
name|endpoint
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
try|try
block|{
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|,
name|registry
argument_list|,
name|finalMetricsName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to produce metrics for {} in {} - {}"
argument_list|,
name|finalMetricsName
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clearMetricsHeaders
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|doProcess (Exchange exchange, T endpoint, MetricRegistry registry, String metricsName)
specifier|protected
specifier|abstract
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|T
name|endpoint
parameter_list|,
name|MetricRegistry
name|registry
parameter_list|,
name|String
name|metricsName
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|getMetricsName (Message in, String defaultValue)
specifier|public
name|String
name|getMetricsName
parameter_list|(
name|Message
name|in
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|getStringHeader
argument_list|(
name|in
argument_list|,
name|HEADER_METRIC_NAME
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
DECL|method|getStringHeader (Message in, String header, String defaultValue)
specifier|public
name|String
name|getStringHeader
parameter_list|(
name|Message
name|in
parameter_list|,
name|String
name|header
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|headerValue
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|header
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|headerValue
argument_list|)
condition|?
name|headerValue
else|:
name|defaultValue
return|;
block|}
DECL|method|getLongHeader (Message in, String header, Long defaultValue)
specifier|public
name|Long
name|getLongHeader
parameter_list|(
name|Message
name|in
parameter_list|,
name|String
name|header
parameter_list|,
name|Long
name|defaultValue
parameter_list|)
block|{
return|return
name|in
operator|.
name|getHeader
argument_list|(
name|header
argument_list|,
name|defaultValue
argument_list|,
name|Long
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|clearMetricsHeaders (Message in)
specifier|protected
name|boolean
name|clearMetricsHeaders
parameter_list|(
name|Message
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|removeHeaders
argument_list|(
name|HEADER_PATTERN
argument_list|)
return|;
block|}
block|}
end_class

end_unit

