begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gridfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gridfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|Mongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|gridfs
operator|.
name|GridFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|GridFsEndpoint
specifier|public
class|class
name|GridFsEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GridFsEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mongoConnection
specifier|private
name|Mongo
name|mongoConnection
decl_stmt|;
DECL|field|database
specifier|private
name|String
name|database
decl_stmt|;
DECL|field|colCounters
specifier|private
name|String
name|colCounters
decl_stmt|;
DECL|field|colTP
specifier|private
name|String
name|colTP
decl_stmt|;
DECL|field|dbColCounters
specifier|private
name|DBCollection
name|dbColCounters
decl_stmt|;
DECL|field|dbColTP
specifier|private
name|DBCollection
name|dbColTP
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|field|gridFs
specifier|private
name|GridFS
name|gridFs
decl_stmt|;
DECL|method|GridFsEndpoint ()
specifier|public
name|GridFsEndpoint
parameter_list|()
block|{ }
DECL|method|GridFsEndpoint (String uri, GridFsComponent component)
specifier|public
name|GridFsEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|GridFsComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|GridFsEndpoint (String endpointUri)
specifier|public
name|GridFsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeConnection
argument_list|()
expr_stmt|;
return|return
operator|new
name|GridFsProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|initializeConnection ()
specifier|public
name|void
name|initializeConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialize GridFS endpoint: {}"
argument_list|,
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
operator|||
name|colCounters
operator|==
literal|null
operator|||
name|colTP
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Missing required endpoint configuration: database and/or colCounters and/or colTP"
argument_list|)
throw|;
block|}
name|db
operator|=
name|mongoConnection
operator|.
name|getDB
argument_list|(
name|database
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not initialize GridFsComponent. Database "
operator|+
name|database
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|dbColCounters
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|colCounters
argument_list|)
expr_stmt|;
name|dbColTP
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|colTP
argument_list|)
expr_stmt|;
name|gridFs
operator|=
operator|new
name|GridFS
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
DECL|method|getMongoConnection ()
specifier|public
name|Mongo
name|getMongoConnection
parameter_list|()
block|{
return|return
name|mongoConnection
return|;
block|}
DECL|method|setMongoConnection (Mongo mongoConnection)
specifier|public
name|void
name|setMongoConnection
parameter_list|(
name|Mongo
name|mongoConnection
parameter_list|)
block|{
name|this
operator|.
name|mongoConnection
operator|=
name|mongoConnection
expr_stmt|;
block|}
DECL|method|getDatabase ()
specifier|public
name|String
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
DECL|method|setDatabase (String database)
specifier|public
name|void
name|setDatabase
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
block|}
DECL|method|getColCounters ()
specifier|public
name|String
name|getColCounters
parameter_list|()
block|{
return|return
name|colCounters
return|;
block|}
DECL|method|setColCounters (String colCounters)
specifier|public
name|void
name|setColCounters
parameter_list|(
name|String
name|colCounters
parameter_list|)
block|{
name|this
operator|.
name|colCounters
operator|=
name|colCounters
expr_stmt|;
block|}
DECL|method|getColTP ()
specifier|public
name|String
name|getColTP
parameter_list|()
block|{
return|return
name|colTP
return|;
block|}
DECL|method|setColTP (String colTP)
specifier|public
name|void
name|setColTP
parameter_list|(
name|String
name|colTP
parameter_list|)
block|{
name|this
operator|.
name|colTP
operator|=
name|colTP
expr_stmt|;
block|}
DECL|method|getDbColCounters ()
specifier|public
name|DBCollection
name|getDbColCounters
parameter_list|()
block|{
return|return
name|dbColCounters
return|;
block|}
DECL|method|setDbColCounters (DBCollection dbColCounters)
specifier|public
name|void
name|setDbColCounters
parameter_list|(
name|DBCollection
name|dbColCounters
parameter_list|)
block|{
name|this
operator|.
name|dbColCounters
operator|=
name|dbColCounters
expr_stmt|;
block|}
DECL|method|getDbColTP ()
specifier|public
name|DBCollection
name|getDbColTP
parameter_list|()
block|{
return|return
name|dbColTP
return|;
block|}
DECL|method|setDbColTP (DBCollection dbColTP)
specifier|public
name|void
name|setDbColTP
parameter_list|(
name|DBCollection
name|dbColTP
parameter_list|)
block|{
name|this
operator|.
name|dbColTP
operator|=
name|dbColTP
expr_stmt|;
block|}
DECL|method|getDb ()
specifier|public
name|DB
name|getDb
parameter_list|()
block|{
return|return
name|db
return|;
block|}
DECL|method|setDb (DB db)
specifier|public
name|void
name|setDb
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
DECL|method|getGridFs ()
specifier|public
name|GridFS
name|getGridFs
parameter_list|()
block|{
return|return
name|gridFs
return|;
block|}
DECL|method|setGridFs (GridFS gridFs)
specifier|public
name|void
name|setGridFs
parameter_list|(
name|GridFS
name|gridFs
parameter_list|)
block|{
name|this
operator|.
name|gridFs
operator|=
name|gridFs
expr_stmt|;
block|}
block|}
end_class

end_unit

