begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gridfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gridfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|gridfs
operator|.
name|GridFSDBFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|gridfs
operator|.
name|GridFSInputFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|util
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_class
DECL|class|GridFsProducer
specifier|public
class|class
name|GridFsProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|GRIDFS_OPERATION
specifier|public
specifier|static
specifier|final
name|String
name|GRIDFS_OPERATION
init|=
literal|"gridfs.operation"
decl_stmt|;
DECL|field|GRIDFS_METADATA
specifier|public
specifier|static
specifier|final
name|String
name|GRIDFS_METADATA
init|=
literal|"gridfs.metadata"
decl_stmt|;
DECL|field|GRIDFS_CHUNKSIZE
specifier|public
specifier|static
specifier|final
name|String
name|GRIDFS_CHUNKSIZE
init|=
literal|"gridfs.chunksize"
decl_stmt|;
DECL|field|endpoint
specifier|private
name|GridFsEndpoint
name|endpoint
decl_stmt|;
DECL|method|GridFsProducer (GridFsEndpoint endpoint)
specifier|public
name|GridFsProducer
parameter_list|(
name|GridFsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operation
init|=
name|endpoint
operator|.
name|getOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GRIDFS_OPERATION
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|operation
operator|==
literal|null
operator|||
literal|"create"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
specifier|final
name|String
name|filename
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|chunkSize
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GRIDFS_CHUNKSIZE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|ins
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|GridFSInputFile
name|gfsFile
init|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|createFile
argument_list|(
name|ins
argument_list|,
name|filename
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunkSize
operator|!=
literal|null
operator|&&
name|chunkSize
operator|>
literal|0
condition|)
block|{
name|gfsFile
operator|.
name|setChunkSize
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|ct
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|!=
literal|null
condition|)
block|{
name|gfsFile
operator|.
name|setContentType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
name|String
name|metaData
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GRIDFS_METADATA
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBObject
name|dbObject
init|=
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|gfsFile
operator|.
name|setMetaData
argument_list|(
name|dbObject
argument_list|)
expr_stmt|;
name|gfsFile
operator|.
name|save
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME_PRODUCED
argument_list|,
name|gfsFile
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"remove"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
specifier|final
name|String
name|filename
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"findOne"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
specifier|final
name|String
name|filename
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|GridFSDBFile
name|file
init|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|findOne
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GRIDFS_METADATA
argument_list|,
name|JSON
operator|.
name|serialize
argument_list|(
name|file
operator|.
name|getMetaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_CONTENT_TYPE
argument_list|,
name|file
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LENGTH
argument_list|,
name|file
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|file
operator|.
name|getUploadDate
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|file
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"No GridFS file for "
operator|+
name|filename
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"listAll"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
specifier|final
name|String
name|filename
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBCursor
name|cursor
decl_stmt|;
if|if
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
name|cursor
operator|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|getFileList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cursor
operator|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|getFileList
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"filename"
argument_list|,
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|DBCursorFilenameReader
argument_list|(
name|cursor
argument_list|)
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"count"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
specifier|final
name|String
name|filename
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBCursor
name|cursor
decl_stmt|;
if|if
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
name|cursor
operator|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|getFileList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cursor
operator|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|getFileList
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"filename"
argument_list|,
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|cursor
operator|.
name|count
argument_list|()
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DBCursorFilenameReader
specifier|private
class|class
name|DBCursorFilenameReader
extends|extends
name|Reader
block|{
DECL|field|cursor
name|DBCursor
name|cursor
decl_stmt|;
DECL|field|current
name|StringBuilder
name|current
decl_stmt|;
DECL|field|pos
name|int
name|pos
decl_stmt|;
DECL|method|DBCursorFilenameReader (DBCursor c)
name|DBCursorFilenameReader
parameter_list|(
name|DBCursor
name|c
parameter_list|)
block|{
name|cursor
operator|=
name|c
expr_stmt|;
name|current
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|fill
argument_list|()
expr_stmt|;
block|}
DECL|method|fill ()
name|void
name|fill
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|current
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
while|while
condition|(
name|cursor
operator|.
name|hasNext
argument_list|()
operator|&&
name|current
operator|.
name|length
argument_list|()
operator|<
literal|4000
condition|)
block|{
name|DBObject
name|o
init|=
name|cursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|current
operator|.
name|append
argument_list|(
name|o
operator|.
name|get
argument_list|(
literal|"filename"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (char[] cbuf, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|==
name|current
operator|.
name|length
argument_list|()
condition|)
block|{
name|fill
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
name|current
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|len
operator|>
operator|(
name|current
operator|.
name|length
argument_list|()
operator|-
name|pos
operator|)
condition|)
block|{
name|len
operator|=
name|current
operator|.
name|length
argument_list|()
operator|-
name|pos
expr_stmt|;
block|}
name|current
operator|.
name|getChars
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|len
argument_list|,
name|cbuf
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|cursor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

