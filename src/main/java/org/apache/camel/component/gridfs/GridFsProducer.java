begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gridfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gridfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|gridfs
operator|.
name|GridFSInputFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|util
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
DECL|class|GridFsProducer
specifier|public
class|class
name|GridFsProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GridFsProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|GridFsEndpoint
name|endpoint
decl_stmt|;
DECL|method|GridFsProducer (GridFsEndpoint endpoint)
specifier|public
name|GridFsProducer
parameter_list|(
name|GridFsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// set DBObject for query
name|DBObject
name|dbObjQuery
init|=
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
literal|"{_id:'inventory'}"
argument_list|)
decl_stmt|;
comment|// set DBObject for update
name|DBObject
name|dbObjUpdate
init|=
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
literal|"{$inc:{seq:1}}"
argument_list|)
decl_stmt|;
comment|// get inventoryID
name|DBObject
name|invID
init|=
name|endpoint
operator|.
name|getDbColCounters
argument_list|()
operator|.
name|findAndModify
argument_list|(
name|dbObjQuery
argument_list|,
name|dbObjUpdate
argument_list|)
decl_stmt|;
comment|// get the in message body
name|String
name|TPID
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// TODO set generic
comment|// specific: get trading partner name, load_type, do_legacy
name|DBObject
name|dbObjTPQuery
init|=
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
literal|"{'tpid':'"
operator|+
name|TPID
operator|+
literal|"'}"
argument_list|)
decl_stmt|;
name|DBObject
name|tpName
init|=
name|endpoint
operator|.
name|getDbColTP
argument_list|()
operator|.
name|findOne
argument_list|(
name|dbObjTPQuery
argument_list|)
decl_stmt|;
comment|// set the tpName and tpLoadType in the headers
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"tpName"
argument_list|,
name|tpName
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"tpLoadType"
argument_list|,
name|tpName
operator|.
name|get
argument_list|(
literal|"load_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// most won't have do_legacy, so catch error and default to 'Y'
try|try
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"tpDoLegacy"
argument_list|,
name|tpName
operator|.
name|get
argument_list|(
literal|"do_legacy"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"tpDoLegacy"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
block|}
comment|// save the TPID for move
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"TPID"
argument_list|,
name|TPID
argument_list|)
expr_stmt|;
name|String
name|sInv
init|=
name|invID
operator|.
name|get
argument_list|(
literal|"seq"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// strip off decimal
name|sInv
operator|=
name|sInv
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sInv
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"mInv"
argument_list|,
name|sInv
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"gridFsInputFile"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|GridFSInputFile
name|gfsFile
init|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|createFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// set filename
name|gfsFile
operator|.
name|setFilename
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"gridFsFileName"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// add metadata
name|String
name|metaData
init|=
literal|"{'inventoryID':"
operator|+
name|sInv
operator|+
literal|", 'TPID':'"
operator|+
name|TPID
operator|+
literal|"', 'doc_type':'original', 'status':'initial_save'}"
decl_stmt|;
name|DBObject
name|dbObject
init|=
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|gfsFile
operator|.
name|setMetaData
argument_list|(
name|dbObject
argument_list|)
expr_stmt|;
comment|// save the input file into mongoDB
name|gfsFile
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

