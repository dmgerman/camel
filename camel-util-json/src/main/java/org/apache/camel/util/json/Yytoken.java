begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright 2016 Clifton Labs  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.camel.util.json
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|json
package|;
end_package

begin_comment
comment|/** Represents structural entities in JSON.  * @since 2.0.0 */
end_comment

begin_class
DECL|class|Yytoken
class|class
name|Yytoken
block|{
comment|/** Represents the different kinds of tokens. */
DECL|enum|Types
enum|enum
name|Types
block|{
comment|/** Tokens of this type will always have a value of ":" */
DECL|enumConstant|COLON
name|COLON
block|,
comment|/** Tokens of this type will always have a value of "," */
DECL|enumConstant|COMMA
name|COMMA
block|,
comment|/** Tokens of this type will always have a value that is a boolean, null, number, or string. */
DECL|enumConstant|DATUM
name|DATUM
block|,
comment|/** Tokens of this type will always have a value of "" */
DECL|enumConstant|END
name|END
block|,
comment|/** Tokens of this type will always have a value of "{" */
DECL|enumConstant|LEFT_BRACE
name|LEFT_BRACE
block|,
comment|/** Tokens of this type will always have a value of "[" */
DECL|enumConstant|LEFT_SQUARE
name|LEFT_SQUARE
block|,
comment|/** Tokens of this type will always have a value of "}" */
DECL|enumConstant|RIGHT_BRACE
name|RIGHT_BRACE
block|,
comment|/** Tokens of this type will always have a value of "]" */
DECL|enumConstant|RIGHT_SQUARE
name|RIGHT_SQUARE
block|;     }
DECL|field|type
specifier|private
specifier|final
name|Types
name|type
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
comment|/** @param type represents the kind of token the instantiated token will be.      * @param value represents the value the token is associated with, will be ignored unless type is equal to      *        Types.DATUM.      * @see Types */
DECL|method|Yytoken (final Types type, final Object value)
name|Yytoken
parameter_list|(
specifier|final
name|Types
name|type
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
comment|/* Sanity check. Make sure the value is ignored for the proper value unless it is a datum token. */
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COLON
case|:
name|this
operator|.
name|value
operator|=
literal|":"
expr_stmt|;
break|break;
case|case
name|COMMA
case|:
name|this
operator|.
name|value
operator|=
literal|","
expr_stmt|;
break|break;
case|case
name|END
case|:
name|this
operator|.
name|value
operator|=
literal|""
expr_stmt|;
break|break;
case|case
name|LEFT_BRACE
case|:
name|this
operator|.
name|value
operator|=
literal|"{"
expr_stmt|;
break|break;
case|case
name|LEFT_SQUARE
case|:
name|this
operator|.
name|value
operator|=
literal|"["
expr_stmt|;
break|break;
case|case
name|RIGHT_BRACE
case|:
name|this
operator|.
name|value
operator|=
literal|"}"
expr_stmt|;
break|break;
case|case
name|RIGHT_SQUARE
case|:
name|this
operator|.
name|value
operator|=
literal|"]"
expr_stmt|;
break|break;
default|default:
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
break|break;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/** @return which of the Types the token is.      * @see Types */
DECL|method|getType ()
name|Types
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
comment|/** @return what the token is.      * @see Types */
DECL|method|getValue ()
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|type
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

