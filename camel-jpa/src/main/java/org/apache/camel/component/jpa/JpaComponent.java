begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jpa
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|JpaTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|LocalEntityManagerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|JpaTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|SharedEntityManagerCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|LocalContainerEntityManagerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|JpaCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jca
operator|.
name|support
operator|.
name|LocalConnectionFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|jta
operator|.
name|JtaTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|dao
operator|.
name|DataAccessException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Persistence
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * A JPA Component  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|JpaComponent
specifier|public
class|class
name|JpaComponent
extends|extends
name|DefaultComponent
argument_list|<
name|Exchange
argument_list|>
implements|implements
name|EndpointResolver
block|{
DECL|field|entityManagerFactory
specifier|private
name|EntityManagerFactory
name|entityManagerFactory
decl_stmt|;
DECL|field|entityManagerProperties
specifier|private
name|Map
name|entityManagerProperties
decl_stmt|;
DECL|field|entityManagerName
specifier|private
name|String
name|entityManagerName
init|=
literal|"camel"
decl_stmt|;
DECL|field|template
specifier|private
name|JpaTemplate
name|template
decl_stmt|;
DECL|method|resolveComponent (CamelContext container, String uri)
specifier|public
name|Component
name|resolveComponent
parameter_list|(
name|CamelContext
name|container
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
DECL|method|resolveEndpoint (CamelContext container, String uri)
specifier|public
name|Endpoint
name|resolveEndpoint
parameter_list|(
name|CamelContext
name|container
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
literal|"jpa:"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|u
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|u
operator|.
name|getSchemeSpecificPart
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|paths
init|=
name|ObjectHelper
operator|.
name|splitOnCharacter
argument_list|(
name|path
argument_list|,
literal|":"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// ignore a prefix
if|if
condition|(
name|paths
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|paths
index|[
literal|1
index|]
expr_stmt|;
block|}
name|JpaEndpoint
name|endpoint
init|=
operator|new
name|JpaEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|Map
name|options
init|=
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|Map
name|consumerProperties
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"consumer."
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerProperties
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setConsumerProperties
argument_list|(
name|consumerProperties
argument_list|)
expr_stmt|;
block|}
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// lets interpret the next string as a class
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setEntityType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|endpoint
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getTemplate ()
specifier|public
name|JpaTemplate
name|getTemplate
parameter_list|()
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
name|template
operator|=
name|createTemplate
argument_list|()
expr_stmt|;
block|}
return|return
name|template
return|;
block|}
DECL|method|setTemplate (JpaTemplate template)
specifier|public
name|void
name|setTemplate
parameter_list|(
name|JpaTemplate
name|template
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
block|}
DECL|method|getEntityManagerFactory ()
specifier|public
name|EntityManagerFactory
name|getEntityManagerFactory
parameter_list|()
block|{
if|if
condition|(
name|entityManagerFactory
operator|==
literal|null
condition|)
block|{
name|entityManagerFactory
operator|=
name|createEntityManagerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|entityManagerFactory
return|;
block|}
DECL|method|setEntityManagerFactory (EntityManagerFactory entityManagerFactory)
specifier|public
name|void
name|setEntityManagerFactory
parameter_list|(
name|EntityManagerFactory
name|entityManagerFactory
parameter_list|)
block|{
name|this
operator|.
name|entityManagerFactory
operator|=
name|entityManagerFactory
expr_stmt|;
block|}
DECL|method|getEntityManagerProperties ()
specifier|public
name|Map
name|getEntityManagerProperties
parameter_list|()
block|{
if|if
condition|(
name|entityManagerProperties
operator|==
literal|null
condition|)
block|{
name|entityManagerProperties
operator|=
name|System
operator|.
name|getProperties
argument_list|()
expr_stmt|;
block|}
return|return
name|entityManagerProperties
return|;
block|}
DECL|method|setEntityManagerProperties (Map entityManagerProperties)
specifier|public
name|void
name|setEntityManagerProperties
parameter_list|(
name|Map
name|entityManagerProperties
parameter_list|)
block|{
name|this
operator|.
name|entityManagerProperties
operator|=
name|entityManagerProperties
expr_stmt|;
block|}
DECL|method|getEntityManagerName ()
specifier|public
name|String
name|getEntityManagerName
parameter_list|()
block|{
return|return
name|entityManagerName
return|;
block|}
DECL|method|setEntityManagerName (String entityManagerName)
specifier|public
name|void
name|setEntityManagerName
parameter_list|(
name|String
name|entityManagerName
parameter_list|)
block|{
name|this
operator|.
name|entityManagerName
operator|=
name|entityManagerName
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|createTemplate ()
specifier|protected
name|JpaTemplate
name|createTemplate
parameter_list|()
block|{
comment|/*      EntityManagerFactory emf = getEntityManagerFactory();         JpaTransactionManager transactionManager = new JpaTransactionManager(emf);         transactionManager.afterPropertiesSet();          final TransactionTemplate tranasctionTemplate = new TransactionTemplate(transactionManager);         tranasctionTemplate.afterPropertiesSet();          // lets auto-default to a JpaTemplate which implicitly creates a transaction         // TODO surely there's a cleaner way to get the JpaTemplate to create a transaction if one is not present??         return new JpaTemplate(emf) {             @Override             public Object execute(final JpaCallback action, final boolean exposeNativeEntityManager) throws DataAccessException {                 return tranasctionTemplate.execute(new TransactionCallback() {                     public Object doInTransaction(TransactionStatus status) {                         return doExecute(action, exposeNativeEntityManager);                     }                 });              }              public Object doExecute(final JpaCallback action, final boolean exposeNativeEntityManager) throws DataAccessException {                 return super.execute(action, exposeNativeEntityManager);             }         };*/
return|return
operator|new
name|JpaTemplate
argument_list|(
name|getEntityManagerFactory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createEntityManagerFactory ()
specifier|protected
name|EntityManagerFactory
name|createEntityManagerFactory
parameter_list|()
block|{
comment|//return Persistence.createEntityManagerFactory(entityManagerName);
return|return
name|Persistence
operator|.
name|createEntityManagerFactory
argument_list|(
name|entityManagerName
argument_list|,
name|getEntityManagerProperties
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createEntityManager ()
specifier|protected
name|EntityManager
name|createEntityManager
parameter_list|()
block|{
return|return
name|getEntityManagerFactory
argument_list|()
operator|.
name|createEntityManager
argument_list|()
return|;
block|}
block|}
end_class

end_unit

