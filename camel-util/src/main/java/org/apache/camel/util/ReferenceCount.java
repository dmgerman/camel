begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
DECL|class|ReferenceCount
specifier|public
specifier|final
class|class
name|ReferenceCount
block|{
DECL|field|count
specifier|private
specifier|final
name|AtomicLong
name|count
decl_stmt|;
DECL|field|onFirst
specifier|private
specifier|final
name|Runnable
name|onFirst
decl_stmt|;
DECL|field|onRelease
specifier|private
specifier|final
name|Runnable
name|onRelease
decl_stmt|;
DECL|method|ReferenceCount (Runnable onFirst, Runnable onRelease)
specifier|private
name|ReferenceCount
parameter_list|(
name|Runnable
name|onFirst
parameter_list|,
name|Runnable
name|onRelease
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|onFirst
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|onFirst
argument_list|,
literal|"onFirst"
argument_list|)
expr_stmt|;
name|this
operator|.
name|onRelease
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|onRelease
argument_list|,
literal|"onRelease"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the reference count.      */
DECL|method|get ()
specifier|public
name|long
name|get
parameter_list|()
block|{
return|return
name|count
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Increases the reference count invoke onFirst on the first increment;      */
DECL|method|retain ()
specifier|public
name|void
name|retain
parameter_list|()
throws|throws
name|IllegalStateException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|v
init|=
name|count
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Released"
argument_list|)
throw|;
block|}
if|if
condition|(
name|count
operator|.
name|compareAndSet
argument_list|(
name|v
argument_list|,
name|v
operator|+
literal|1
argument_list|)
condition|)
block|{
if|if
condition|(
name|v
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|onFirst
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
comment|/**      * Decreases the reference count and invoke onRelease if the reference count reaches {@code 0}.      */
DECL|method|release ()
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|IllegalStateException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|v
init|=
name|count
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ReferenceCount already released"
argument_list|)
throw|;
block|}
if|if
condition|(
name|count
operator|.
name|compareAndSet
argument_list|(
name|v
argument_list|,
name|v
operator|-
literal|1
argument_list|)
condition|)
block|{
if|if
condition|(
name|v
operator|==
literal|1
condition|)
block|{
name|onRelease
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
comment|// *******************************
comment|// Helpers
comment|// *******************************
DECL|method|on (Runnable onFirst, Runnable onRelease)
specifier|public
specifier|static
name|ReferenceCount
name|on
parameter_list|(
name|Runnable
name|onFirst
parameter_list|,
name|Runnable
name|onRelease
parameter_list|)
block|{
return|return
operator|new
name|ReferenceCount
argument_list|(
name|onFirst
argument_list|,
name|onRelease
argument_list|)
return|;
block|}
DECL|method|onRelease (Runnable onRelease)
specifier|public
specifier|static
name|ReferenceCount
name|onRelease
parameter_list|(
name|Runnable
name|onRelease
parameter_list|)
block|{
return|return
operator|new
name|ReferenceCount
argument_list|(
parameter_list|()
lambda|->
block|{ }
argument_list|,
name|onRelease
argument_list|)
return|;
block|}
block|}
end_class

end_unit

