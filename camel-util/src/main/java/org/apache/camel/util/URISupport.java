begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * URI utilities.  */
end_comment

begin_class
DECL|class|URISupport
specifier|public
specifier|final
class|class
name|URISupport
block|{
DECL|field|RAW_TOKEN_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RAW_TOKEN_PREFIX
init|=
literal|"RAW"
decl_stmt|;
DECL|field|RAW_TOKEN_START
specifier|public
specifier|static
specifier|final
name|char
index|[]
name|RAW_TOKEN_START
init|=
block|{
literal|'('
block|,
literal|'{'
block|}
decl_stmt|;
DECL|field|RAW_TOKEN_END
specifier|public
specifier|static
specifier|final
name|char
index|[]
name|RAW_TOKEN_END
init|=
block|{
literal|')'
block|,
literal|'}'
block|}
decl_stmt|;
comment|// Match any key-value pair in the URI query string whose key contains
comment|// "passphrase" or "password" or secret key (case-insensitive).
comment|// First capture group is the key, second is the value.
DECL|field|SECRETS
specifier|private
specifier|static
specifier|final
name|Pattern
name|SECRETS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([?&][^=]*(?:passphrase|password|secretKey)[^=]*)=(RAW[({].*[)}]|[^&]*)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
comment|// Match the user password in the URI as second capture group
comment|// (applies to URI with authority component and userinfo token in the form "user:password").
DECL|field|USERINFO_PASSWORD
specifier|private
specifier|static
specifier|final
name|Pattern
name|USERINFO_PASSWORD
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*://.*:)(.*)(@)"
argument_list|)
decl_stmt|;
comment|// Match the user password in the URI path as second capture group
comment|// (applies to URI path with authority component and userinfo token in the form "user:password").
DECL|field|PATH_USERINFO_PASSWORD
specifier|private
specifier|static
specifier|final
name|Pattern
name|PATH_USERINFO_PASSWORD
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*:)(.*)(@)"
argument_list|)
decl_stmt|;
DECL|field|CHARSET
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET
init|=
literal|"UTF-8"
decl_stmt|;
DECL|method|URISupport ()
specifier|private
name|URISupport
parameter_list|()
block|{
comment|// Helper class
block|}
comment|/**      * Removes detected sensitive information (such as passwords) from the URI and returns the result.      *      * @param uri The uri to sanitize.      * @see #SECRETS and #USERINFO_PASSWORD for the matched pattern      *      * @return Returns null if the uri is null, otherwise the URI with the passphrase, password or secretKey sanitized.      */
DECL|method|sanitizeUri (String uri)
specifier|public
specifier|static
name|String
name|sanitizeUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// use xxxxx as replacement as that works well with JMX also
name|String
name|sanitized
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|sanitized
operator|=
name|SECRETS
operator|.
name|matcher
argument_list|(
name|sanitized
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"$1=xxxxxx"
argument_list|)
expr_stmt|;
name|sanitized
operator|=
name|USERINFO_PASSWORD
operator|.
name|matcher
argument_list|(
name|sanitized
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"$1xxxxxx$3"
argument_list|)
expr_stmt|;
block|}
return|return
name|sanitized
return|;
block|}
comment|/**      * Removes detected sensitive information (such as passwords) from the      *<em>path part</em> of an URI (that is, the part without the query      * parameters or component prefix) and returns the result.      *      * @param path the URI path to sanitize      * @return null if the path is null, otherwise the sanitized path      */
DECL|method|sanitizePath (String path)
specifier|public
specifier|static
name|String
name|sanitizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|sanitized
init|=
name|path
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|sanitized
operator|=
name|PATH_USERINFO_PASSWORD
operator|.
name|matcher
argument_list|(
name|sanitized
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"$1xxxxxx$3"
argument_list|)
expr_stmt|;
block|}
return|return
name|sanitized
return|;
block|}
comment|/**      * Extracts the scheme specific path from the URI that is used as the remainder option when creating endpoints.      *      * @param u      the URI      * @param useRaw whether to force using raw values      * @return the remainder path      */
DECL|method|extractRemainderPath (URI u, boolean useRaw)
specifier|public
specifier|static
name|String
name|extractRemainderPath
parameter_list|(
name|URI
name|u
parameter_list|,
name|boolean
name|useRaw
parameter_list|)
block|{
name|String
name|path
init|=
name|useRaw
condition|?
name|u
operator|.
name|getRawSchemeSpecificPart
argument_list|()
else|:
name|u
operator|.
name|getSchemeSpecificPart
argument_list|()
decl_stmt|;
comment|// lets trim off any query arguments
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
operator|-
literal|1
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**      * Parses the query part of the uri (eg the parameters).      *<p/>      * The URI parameters will by default be URI encoded. However you can define a parameter      * values with the syntax:<tt>key=RAW(value)</tt> which tells Camel to not encode the value,      * and use the value as is (eg key=value) and the value has<b>not</b> been encoded.      *      * @param uri the uri      * @return the parameters, or an empty map if no parameters (eg never null)      * @throws URISyntaxException is thrown if uri has invalid syntax.      * @see #RAW_TOKEN_PREFIX      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|parseQuery (String uri)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
name|parseQuery
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses the query part of the uri (eg the parameters).      *<p/>      * The URI parameters will by default be URI encoded. However you can define a parameter      * values with the syntax:<tt>key=RAW(value)</tt> which tells Camel to not encode the value,      * and use the value as is (eg key=value) and the value has<b>not</b> been encoded.      *      * @param uri the uri      * @param useRaw whether to force using raw values      * @return the parameters, or an empty map if no parameters (eg never null)      * @throws URISyntaxException is thrown if uri has invalid syntax.      * @see #RAW_TOKEN_PREFIX      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|parseQuery (String uri, boolean useRaw)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|useRaw
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
name|parseQuery
argument_list|(
name|uri
argument_list|,
name|useRaw
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses the query part of the uri (eg the parameters).      *<p/>      * The URI parameters will by default be URI encoded. However you can define a parameter      * values with the syntax:<tt>key=RAW(value)</tt> which tells Camel to not encode the value,      * and use the value as is (eg key=value) and the value has<b>not</b> been encoded.      *      * @param uri the uri      * @param useRaw whether to force using raw values      * @param lenient whether to parse lenient and ignore trailing& markers which has no key or value which can happen when using HTTP components      * @return the parameters, or an empty map if no parameters (eg never null)      * @throws URISyntaxException is thrown if uri has invalid syntax.      * @see #RAW_TOKEN_PREFIX      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|parseQuery (String uri, boolean useRaw, boolean lenient)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|useRaw
parameter_list|,
name|boolean
name|lenient
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
comment|// return an empty map
return|return
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// must check for trailing& as the uri.split("&") will ignore those
if|if
condition|(
operator|!
name|lenient
operator|&&
name|uri
operator|.
name|endsWith
argument_list|(
literal|"&"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|URISyntaxException
argument_list|(
name|uri
argument_list|,
literal|"Invalid uri syntax: Trailing& marker found. "
operator|+
literal|"Check the uri and remove the trailing& marker."
argument_list|)
throw|;
block|}
name|URIScanner
name|scanner
init|=
operator|new
name|URIScanner
argument_list|(
name|CHARSET
argument_list|)
decl_stmt|;
return|return
name|scanner
operator|.
name|parseQuery
argument_list|(
name|uri
argument_list|,
name|useRaw
argument_list|)
return|;
block|}
comment|/**      * Scans RAW tokens in the string and returns the list of pair indexes which tell where      * a RAW token starts and ends in the string.      *<p/>      * This is a companion method with {@link #isRaw(int, List)} and the returned value is      * supposed to be used as the parameter of that method.      *      * @param str the string to scan RAW tokens      * @return the list of pair indexes which represent the start and end positions of a RAW token      * @see #isRaw(int, List)      * @see #RAW_TOKEN_PREFIX      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|scanRaw (String str)
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|scanRaw
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|URIScanner
operator|.
name|scanRaw
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/**      * Tests if the index is within any pair of the start and end indexes which represent      * the start and end positions of a RAW token.      *<p/>      * This is a companion method with {@link #scanRaw(String)} and is supposed to consume      * the returned value of that method as the second parameter<tt>pairs</tt>.      *      * @param index the index to be tested      * @param pairs the list of pair indexes which represent the start and end positions of a RAW token      * @return<tt>true</tt> if the index is within any pair of the indexes,<tt>false</tt> otherwise      * @see #scanRaw(String)      * @see #RAW_TOKEN_PREFIX      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|isRaw (int index, List<Pair<Integer>> pairs)
specifier|public
specifier|static
name|boolean
name|isRaw
parameter_list|(
name|int
name|index
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
return|return
name|URIScanner
operator|.
name|isRaw
argument_list|(
name|index
argument_list|,
name|pairs
argument_list|)
return|;
block|}
comment|/**      * Parses the query parameters of the uri (eg the query part).      *      * @param uri the uri      * @return the parameters, or an empty map if no parameters (eg never null)      * @throws URISyntaxException is thrown if uri has invalid syntax.      */
DECL|method|parseParameters (URI uri)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseParameters
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|query
init|=
name|uri
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|String
name|schemeSpecificPart
init|=
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|schemeSpecificPart
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
comment|// return an empty map
return|return
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|query
operator|=
name|schemeSpecificPart
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|query
operator|=
name|stripPrefix
argument_list|(
name|query
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
block|}
return|return
name|parseQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
comment|/**      * Traverses the given parameters, and resolve any parameter values which uses the RAW token      * syntax:<tt>key=RAW(value)</tt>. This method will then remove the RAW tokens, and replace      * the content of the value, with just the value.      *      * @param parameters the uri parameters      * @see #parseQuery(String)      * @see #RAW_TOKEN_PREFIX      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resolveRawParameterValues (Map<String, Object> parameters)
specifier|public
specifier|static
name|void
name|resolveRawParameterValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// if the value is a list then we need to iterate
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|obj
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|str
init|=
name|obj
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|URIScanner
operator|.
name|resolveRaw
argument_list|(
name|str
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|raw
parameter_list|)
lambda|->
block|{
comment|// update the string in the list
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|raw
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|str
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|URIScanner
operator|.
name|resolveRaw
argument_list|(
name|str
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|raw
parameter_list|)
lambda|->
name|entry
operator|.
name|setValue
argument_list|(
name|raw
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates a URI with the given query      *      * @param uri the uri      * @param query the query to append to the uri      * @return uri with the query appended      * @throws URISyntaxException is thrown if uri has invalid syntax.      */
DECL|method|createURIWithQuery (URI uri, String query)
specifier|public
specifier|static
name|URI
name|createURIWithQuery
parameter_list|(
name|URI
name|uri
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
comment|// assemble string as new uri and replace parameters with the query instead
name|String
name|s
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|before
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|s
argument_list|,
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|before
operator|==
literal|null
condition|)
block|{
name|before
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|s
argument_list|,
literal|"#"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|before
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|s
operator|+
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|s
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
operator|)
operator|&&
operator|(
name|uri
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|s
operator|=
name|s
operator|+
literal|"#"
operator|+
name|uri
operator|.
name|getFragment
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|URI
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**      * Strips the prefix from the value.      *<p/>      * Returns the value as-is if not starting with the prefix.      *      * @param value  the value      * @param prefix the prefix to remove from value      * @return the value without the prefix      */
DECL|method|stripPrefix (String value, String prefix)
specifier|public
specifier|static
name|String
name|stripPrefix
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|prefix
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Strips the suffix from the value.      *<p/>      * Returns the value as-is if not ending with the prefix.      *      * @param value the value      * @param suffix the suffix to remove from value      * @return the value without the suffix      */
DECL|method|stripSuffix (final String value, final String suffix)
specifier|public
specifier|static
name|String
name|stripSuffix
parameter_list|(
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|suffix
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
if|if
condition|(
name|value
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Assembles a query from the given map.      *      * @param options  the map with the options (eg key/value pairs)      * @return a query string with<tt>key1=value&key2=value2&...</tt>, or an empty string if there is no options.      * @throws URISyntaxException is thrown if uri has invalid syntax.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createQueryString (Map<String, Object> options)
specifier|public
specifier|static
name|String
name|createQueryString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
throws|throws
name|URISyntaxException
block|{
try|try
block|{
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|rc
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|Object
name|value
init|=
name|options
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// the value may be a list since the same key has multiple values
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|appendQueryStringParameter
argument_list|(
name|key
argument_list|,
name|s
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// append& separator if there is more in the list to append
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// use the value as a String
name|String
name|s
init|=
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|appendQueryStringParameter
argument_list|(
name|key
argument_list|,
name|s
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|URISyntaxException
name|se
init|=
operator|new
name|URISyntaxException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Invalid encoding"
argument_list|)
decl_stmt|;
name|se
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
block|}
DECL|method|appendQueryStringParameter (String key, String value, StringBuilder rc)
specifier|private
specifier|static
name|void
name|appendQueryStringParameter
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|StringBuilder
name|rc
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|rc
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|key
argument_list|,
name|CHARSET
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// only append if value is not null
name|rc
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|boolean
name|isRaw
init|=
name|URIScanner
operator|.
name|resolveRaw
argument_list|(
name|value
argument_list|,
parameter_list|(
name|str
parameter_list|,
name|raw
parameter_list|)
lambda|->
block|{
comment|// do not encode RAW parameters unless it has %
comment|// need to replace % with %25 to avoid losing "%" when decoding
name|String
name|s
init|=
name|StringHelper
operator|.
name|replaceAll
argument_list|(
name|str
argument_list|,
literal|"%"
argument_list|,
literal|"%25"
argument_list|)
decl_stmt|;
name|rc
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isRaw
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|value
argument_list|,
name|CHARSET
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a URI from the original URI and the remaining parameters      *<p/>      * Used by various Camel components      */
DECL|method|createRemainingURI (URI originalURI, Map<String, Object> params)
specifier|public
specifier|static
name|URI
name|createRemainingURI
parameter_list|(
name|URI
name|originalURI
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|s
init|=
name|createQueryString
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|s
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|createURIWithQuery
argument_list|(
name|originalURI
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/**      * Appends the given parameters to the given URI.      *<p/>      * It keeps the original parameters and if a new parameter is already defined in      * {@code originalURI}, it will be replaced by its value in {@code newParameters}.      *      * @param originalURI   the original URI      * @param newParameters the parameters to add      * @return the URI with all the parameters      * @throws URISyntaxException           is thrown if the uri syntax is invalid      * @throws UnsupportedEncodingException is thrown if encoding error      */
DECL|method|appendParametersToURI (String originalURI, Map<String, Object> newParameters)
specifier|public
specifier|static
name|String
name|appendParametersToURI
parameter_list|(
name|String
name|originalURI
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newParameters
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|UnsupportedEncodingException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|normalizeUri
argument_list|(
name|originalURI
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
name|parseParameters
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|putAll
argument_list|(
name|newParameters
argument_list|)
expr_stmt|;
return|return
name|createRemainingURI
argument_list|(
name|uri
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Normalizes the uri by reordering the parameters so they are sorted and thus      * we can use the uris for endpoint matching.      *<p/>      * The URI parameters will by default be URI encoded. However you can define a parameter      * values with the syntax:<tt>key=RAW(value)</tt> which tells Camel to not encode the value,      * and use the value as is (eg key=value) and the value has<b>not</b> been encoded.      *      * @param uri the uri      * @return the normalized uri      * @throws URISyntaxException in thrown if the uri syntax is invalid      * @throws UnsupportedEncodingException is thrown if encoding error      * @see #RAW_TOKEN_PREFIX      * @see #RAW_TOKEN_START      * @see #RAW_TOKEN_END      */
DECL|method|normalizeUri (String uri)
specifier|public
specifier|static
name|String
name|normalizeUri
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|UnsupportedEncodingException
block|{
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|u
operator|.
name|getSchemeSpecificPart
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|u
operator|.
name|getScheme
argument_list|()
decl_stmt|;
comment|// not possible to normalize
if|if
condition|(
name|scheme
operator|==
literal|null
operator|||
name|path
operator|==
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
comment|// lets trim off any query arguments
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
comment|// when the path has ?
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|u
operator|.
name|getScheme
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|path
operator|=
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// okay if we have user info in the path and they use @ in username or password,
comment|// then we need to encode them (but leave the last @ sign before the hostname)
comment|// this is needed as Camel end users may not encode their user info properly, but expect
comment|// this to work out of the box with Camel, and hence we need to fix it for them
name|String
name|userInfoPath
init|=
name|path
decl_stmt|;
if|if
condition|(
name|userInfoPath
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|userInfoPath
operator|=
name|userInfoPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userInfoPath
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringHelper
operator|.
name|countChar
argument_list|(
name|userInfoPath
argument_list|,
literal|'@'
argument_list|)
operator|>
literal|1
condition|)
block|{
name|int
name|max
init|=
name|userInfoPath
operator|.
name|lastIndexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
name|String
name|before
init|=
name|userInfoPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
decl_stmt|;
comment|// after must be from original path
name|String
name|after
init|=
name|path
operator|.
name|substring
argument_list|(
name|max
argument_list|)
decl_stmt|;
comment|// replace the @ with %40
name|before
operator|=
name|StringHelper
operator|.
name|replaceAll
argument_list|(
name|before
argument_list|,
literal|"@"
argument_list|,
literal|"%40"
argument_list|)
expr_stmt|;
name|path
operator|=
name|before
operator|+
name|after
expr_stmt|;
block|}
comment|// in case there are parameters we should reorder them
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
name|URISupport
operator|.
name|parseParameters
argument_list|(
name|u
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no parameters then just return
return|return
name|buildUri
argument_list|(
name|scheme
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
comment|// reorder parameters a..z
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|parameters
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|keys
operator|.
name|sort
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sorted
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|sorted
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// build uri object with sorted parameters
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|sorted
argument_list|)
decl_stmt|;
return|return
name|buildUri
argument_list|(
name|scheme
argument_list|,
name|path
argument_list|,
name|query
argument_list|)
return|;
block|}
block|}
DECL|method|buildUri (String scheme, String path, String query)
specifier|private
specifier|static
name|String
name|buildUri
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
block|{
comment|// must include :// to do a correct URI all components can work with
return|return
name|scheme
operator|+
literal|"://"
operator|+
name|path
operator|+
operator|(
name|query
operator|!=
literal|null
condition|?
literal|"?"
operator|+
name|query
else|:
literal|""
operator|)
return|;
block|}
DECL|method|extractProperties (Map<String, Object> properties, String optionPrefix)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|optionPrefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|optionPrefix
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|optionPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
DECL|method|pathAndQueryOf (final URI uri)
specifier|public
specifier|static
name|String
name|pathAndQueryOf
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|)
block|{
specifier|final
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|pathAndQuery
init|=
name|path
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|pathAndQuery
operator|=
literal|"/"
expr_stmt|;
block|}
specifier|final
name|String
name|query
init|=
name|uri
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|query
argument_list|)
condition|)
block|{
name|pathAndQuery
operator|+=
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
return|return
name|pathAndQuery
return|;
block|}
DECL|method|joinPaths (final String... paths)
specifier|public
specifier|static
name|String
name|joinPaths
parameter_list|(
specifier|final
name|String
modifier|...
name|paths
parameter_list|)
block|{
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
specifier|final
name|StringBuilder
name|joined
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|addedLast
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|paths
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|addedLast
condition|)
block|{
name|path
operator|=
name|stripSuffix
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|addedLast
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|joined
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|joined
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'/'
argument_list|)
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joined
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|joined
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

