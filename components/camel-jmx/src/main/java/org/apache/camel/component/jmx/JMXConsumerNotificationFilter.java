begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeChangeNotification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeChangeNotificationFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_comment
comment|/**  * {@link javax.management.NotificationFilter} that observes an attribute and optionally  * matches when the new value matches a string.  */
end_comment

begin_class
DECL|class|JMXConsumerNotificationFilter
specifier|public
class|class
name|JMXConsumerNotificationFilter
extends|extends
name|AttributeChangeNotificationFilter
block|{
DECL|field|stringToCompare
specifier|private
specifier|final
name|String
name|stringToCompare
decl_stmt|;
DECL|field|notifyMatch
specifier|private
specifier|final
name|boolean
name|notifyMatch
decl_stmt|;
DECL|method|JMXConsumerNotificationFilter (String observedAttribute, String stringToCompare, boolean notifyMatch)
specifier|public
name|JMXConsumerNotificationFilter
parameter_list|(
name|String
name|observedAttribute
parameter_list|,
name|String
name|stringToCompare
parameter_list|,
name|boolean
name|notifyMatch
parameter_list|)
block|{
name|enableAttribute
argument_list|(
name|observedAttribute
argument_list|)
expr_stmt|;
name|this
operator|.
name|stringToCompare
operator|=
name|stringToCompare
expr_stmt|;
name|this
operator|.
name|notifyMatch
operator|=
name|notifyMatch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isNotificationEnabled (Notification notification)
specifier|public
name|boolean
name|isNotificationEnabled
parameter_list|(
name|Notification
name|notification
parameter_list|)
block|{
name|boolean
name|enabled
init|=
name|super
operator|.
name|isNotificationEnabled
argument_list|(
name|notification
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|match
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|stringToCompare
operator|!=
literal|null
condition|)
block|{
name|AttributeChangeNotification
name|acn
init|=
operator|(
name|AttributeChangeNotification
operator|)
name|notification
decl_stmt|;
name|Object
name|newValue
init|=
name|acn
operator|.
name|getNewValue
argument_list|()
decl_stmt|;
comment|// special for null
if|if
condition|(
literal|"null"
operator|.
name|equals
argument_list|(
name|stringToCompare
argument_list|)
operator|&&
name|newValue
operator|==
literal|null
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
name|stringToCompare
operator|.
name|equals
argument_list|(
name|newValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|notifyMatch
operator|==
name|match
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

