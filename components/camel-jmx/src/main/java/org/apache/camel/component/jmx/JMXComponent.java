begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_comment
comment|/**  * Component for connecting JMX Notification events to a camel route.  * The endpoint created from this component allows users to specify  * an ObjectName to listen to and any JMX Notifications received from  * that object will flow into the route.  */
end_comment

begin_class
DECL|class|JMXComponent
specifier|public
class|class
name|JMXComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Override
DECL|method|createEndpoint (String aUri, String aRemaining, Map<String, Object> aParameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|aUri
parameter_list|,
name|String
name|aRemaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|aParameters
parameter_list|)
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|endpoint
init|=
operator|new
name|JMXEndpoint
argument_list|(
name|aUri
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// use the helper class to set all of the properties
name|EndpointHelper
operator|.
name|setReferenceProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|endpoint
argument_list|,
name|aParameters
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|endpoint
argument_list|,
name|aParameters
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setServerURL
argument_list|(
name|aRemaining
argument_list|)
expr_stmt|;
comment|// we may have some extra params left over for the object properties hashtable
comment|// these properties need to be consumed or the framework will throw an exception
comment|// for unused params
if|if
condition|(
operator|!
name|aParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|objectProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|aParameters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"key."
argument_list|)
condition|)
block|{
name|objectProperties
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
literal|"key."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|endpoint
operator|.
name|setObjectProperties
argument_list|(
name|objectProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getObjectDomain
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify domain"
argument_list|)
throw|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getObjectName
argument_list|()
operator|==
literal|null
operator|&&
name|endpoint
operator|.
name|getObjectProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify object name or object properties"
argument_list|)
throw|;
block|}
return|return
name|endpoint
return|;
block|}
block|}
end_class

end_unit

