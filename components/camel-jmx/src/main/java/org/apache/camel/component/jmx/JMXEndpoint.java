begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_comment
comment|/**  * Endpoint that describes a connection to an mbean.  *<p/>  * The component can connect to the local platform mbean server with the following URI:  *<p/>  *<code>jmx://platform?options</code>  *<p/>  * A remote mbean server url can be provided following the initial JMX scheme like so:  *<p/>  *<code>jmx:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?options</code>  *<p/>  * You can append query options to the URI in the following format, ?options=value&option2=value&...  *  * @author markford  */
end_comment

begin_class
DECL|class|JMXEndpoint
specifier|public
class|class
name|JMXEndpoint
extends|extends
name|DefaultEndpoint
block|{
comment|/**      * URI Property: Format for the message body. Either "xml" or "raw". If xml, the notification is serialized to xml. If raw, then the raw java object is set as the body.      */
DECL|field|mFormat
specifier|private
name|String
name|mFormat
init|=
literal|"xml"
decl_stmt|;
comment|/**      * URI Property: credentials for making a remote connection      */
DECL|field|mUser
specifier|private
name|String
name|mUser
decl_stmt|;
comment|/**      * URI Property: credentials for making a remote connection      */
DECL|field|mPassword
specifier|private
name|String
name|mPassword
decl_stmt|;
comment|/**      * URI Property: The domain for the mbean you're connecting to      */
DECL|field|mObjectDomain
specifier|private
name|String
name|mObjectDomain
decl_stmt|;
comment|/**      * URI Property: The name key for the mbean you're connecting to. This value is mutually exclusive with the object properties that get passed.      */
DECL|field|mObjectName
specifier|private
name|String
name|mObjectName
decl_stmt|;
comment|/**      * URI Property: Reference to a bean that implements the NotificationFilter.      */
DECL|field|mNotificationFilter
specifier|private
name|NotificationFilter
name|mNotificationFilter
decl_stmt|;
comment|/**      * URI Property: Value to handback to the listener when a notification is received. This value will be put in the message header with the key "jmx.handback"      */
DECL|field|mHandback
specifier|private
name|Object
name|mHandback
decl_stmt|;
comment|/**      * URI Property: properties for the object name. These values will be used if the objectName param is not set      */
DECL|field|mObjectProperties
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mObjectProperties
decl_stmt|;
comment|/**      * cached object name that was built from the objectName param or the hashtable      */
DECL|field|mJMXObjectName
specifier|private
name|ObjectName
name|mJMXObjectName
decl_stmt|;
comment|/**      * server url comes from the remaining endpoint      */
DECL|field|mServerURL
specifier|private
name|String
name|mServerURL
decl_stmt|;
DECL|method|JMXEndpoint (String aEndpointUri, JMXComponent aComponent)
specifier|public
name|JMXEndpoint
parameter_list|(
name|String
name|aEndpointUri
parameter_list|,
name|JMXComponent
name|aComponent
parameter_list|)
block|{
name|super
argument_list|(
name|aEndpointUri
argument_list|,
name|aComponent
argument_list|)
expr_stmt|;
block|}
DECL|method|createConsumer (Processor aProcessor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|aProcessor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|JMXConsumer
argument_list|(
name|this
argument_list|,
name|aProcessor
argument_list|)
return|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"producing JMX notifications is not supported"
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getFormat ()
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
name|mFormat
return|;
block|}
DECL|method|setFormat (String aFormat)
specifier|public
name|void
name|setFormat
parameter_list|(
name|String
name|aFormat
parameter_list|)
block|{
name|mFormat
operator|=
name|aFormat
expr_stmt|;
block|}
DECL|method|isXML ()
specifier|public
name|boolean
name|isXML
parameter_list|()
block|{
return|return
literal|"xml"
operator|.
name|equals
argument_list|(
name|getFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isPlatformServer ()
specifier|public
name|boolean
name|isPlatformServer
parameter_list|()
block|{
return|return
literal|"platform"
operator|.
name|equals
argument_list|(
name|getServerURL
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|mUser
return|;
block|}
DECL|method|setUser (String aUser)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|aUser
parameter_list|)
block|{
name|mUser
operator|=
name|aUser
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|mPassword
return|;
block|}
DECL|method|setPassword (String aPassword)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|aPassword
parameter_list|)
block|{
name|mPassword
operator|=
name|aPassword
expr_stmt|;
block|}
DECL|method|getObjectDomain ()
specifier|public
name|String
name|getObjectDomain
parameter_list|()
block|{
return|return
name|mObjectDomain
return|;
block|}
DECL|method|setObjectDomain (String aObjectDomain)
specifier|public
name|void
name|setObjectDomain
parameter_list|(
name|String
name|aObjectDomain
parameter_list|)
block|{
name|mObjectDomain
operator|=
name|aObjectDomain
expr_stmt|;
block|}
DECL|method|getObjectName ()
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|mObjectName
return|;
block|}
DECL|method|setObjectName (String aObjectName)
specifier|public
name|void
name|setObjectName
parameter_list|(
name|String
name|aObjectName
parameter_list|)
block|{
if|if
condition|(
name|getObjectProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot set both objectName and objectProperties"
argument_list|)
throw|;
block|}
name|mObjectName
operator|=
name|aObjectName
expr_stmt|;
block|}
DECL|method|getServerURL ()
specifier|protected
name|String
name|getServerURL
parameter_list|()
block|{
return|return
name|mServerURL
return|;
block|}
DECL|method|setServerURL (String aServerURL)
specifier|protected
name|void
name|setServerURL
parameter_list|(
name|String
name|aServerURL
parameter_list|)
block|{
name|mServerURL
operator|=
name|aServerURL
expr_stmt|;
block|}
DECL|method|getNotificationFilter ()
specifier|public
name|NotificationFilter
name|getNotificationFilter
parameter_list|()
block|{
return|return
name|mNotificationFilter
return|;
block|}
DECL|method|setNotificationFilter (NotificationFilter aFilterRef)
specifier|public
name|void
name|setNotificationFilter
parameter_list|(
name|NotificationFilter
name|aFilterRef
parameter_list|)
block|{
name|mNotificationFilter
operator|=
name|aFilterRef
expr_stmt|;
block|}
DECL|method|getHandback ()
specifier|public
name|Object
name|getHandback
parameter_list|()
block|{
return|return
name|mHandback
return|;
block|}
DECL|method|setHandback (Object aHandback)
specifier|public
name|void
name|setHandback
parameter_list|(
name|Object
name|aHandback
parameter_list|)
block|{
name|mHandback
operator|=
name|aHandback
expr_stmt|;
block|}
DECL|method|getObjectProperties ()
specifier|public
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getObjectProperties
parameter_list|()
block|{
return|return
name|mObjectProperties
return|;
block|}
comment|/**      * Setter for the ObjectProperties is either called by reflection when      * processing the URI or manually by the component.      *<p/>      * If the URI contained a value with a reference like "objectProperties=#myHashtable"      * then the Hashtable will be set in place.      *<p/>      * If there are extra properties that begin with "key." then the component will      * create a Hashtable with these values after removing the "key." prefix.      */
DECL|method|setObjectProperties (Hashtable<String, String> aObjectProperties)
specifier|public
name|void
name|setObjectProperties
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aObjectProperties
parameter_list|)
block|{
if|if
condition|(
name|getObjectName
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot set both objectName and objectProperties"
argument_list|)
throw|;
block|}
name|mObjectProperties
operator|=
name|aObjectProperties
expr_stmt|;
block|}
DECL|method|getJMXObjectName ()
specifier|protected
name|ObjectName
name|getJMXObjectName
parameter_list|()
throws|throws
name|MalformedObjectNameException
block|{
if|if
condition|(
name|mJMXObjectName
operator|==
literal|null
condition|)
block|{
name|ObjectName
name|on
init|=
name|buildObjectName
argument_list|()
decl_stmt|;
name|setJMXObjectName
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
return|return
name|mJMXObjectName
return|;
block|}
DECL|method|setJMXObjectName (ObjectName aCachedObjectName)
specifier|protected
name|void
name|setJMXObjectName
parameter_list|(
name|ObjectName
name|aCachedObjectName
parameter_list|)
block|{
name|mJMXObjectName
operator|=
name|aCachedObjectName
expr_stmt|;
block|}
DECL|method|buildObjectName ()
specifier|private
name|ObjectName
name|buildObjectName
parameter_list|()
throws|throws
name|MalformedObjectNameException
block|{
name|ObjectName
name|objectName
decl_stmt|;
if|if
condition|(
name|getObjectProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|getObjectDomain
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
literal|"name="
argument_list|)
operator|.
name|append
argument_list|(
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|objectName
operator|=
operator|new
name|ObjectName
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objectName
operator|=
operator|new
name|ObjectName
argument_list|(
name|getObjectDomain
argument_list|()
argument_list|,
name|getObjectProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|objectName
return|;
block|}
block|}
end_class

end_unit

