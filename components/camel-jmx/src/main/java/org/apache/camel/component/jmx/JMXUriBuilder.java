begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Builder for JMX endpoint URI's. Saves you from having to do the string concat'ing  * and messing up the param names  */
end_comment

begin_class
DECL|class|JMXUriBuilder
specifier|public
class|class
name|JMXUriBuilder
block|{
DECL|field|mQueryProps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mQueryProps
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mServerName
specifier|private
name|String
name|mServerName
init|=
literal|"platform"
decl_stmt|;
DECL|method|JMXUriBuilder ()
specifier|public
name|JMXUriBuilder
parameter_list|()
block|{     }
DECL|method|JMXUriBuilder (String aServerName)
specifier|public
name|JMXUriBuilder
parameter_list|(
name|String
name|aServerName
parameter_list|)
block|{
name|setServerName
argument_list|(
name|aServerName
argument_list|)
expr_stmt|;
block|}
DECL|method|withFormat (String aFormat)
specifier|public
name|JMXUriBuilder
name|withFormat
parameter_list|(
name|String
name|aFormat
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"format"
argument_list|,
name|aFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withUser (String aFormat)
specifier|public
name|JMXUriBuilder
name|withUser
parameter_list|(
name|String
name|aFormat
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"user"
argument_list|,
name|aFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withPassword (String aFormat)
specifier|public
name|JMXUriBuilder
name|withPassword
parameter_list|(
name|String
name|aFormat
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"password"
argument_list|,
name|aFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withObjectDomain (String aFormat)
specifier|public
name|JMXUriBuilder
name|withObjectDomain
parameter_list|(
name|String
name|aFormat
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"objectDomain"
argument_list|,
name|aFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withObjectName (String aFormat)
specifier|public
name|JMXUriBuilder
name|withObjectName
parameter_list|(
name|String
name|aFormat
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"objectName"
argument_list|,
name|aFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withNotificationFilter (String aFilter)
specifier|public
name|JMXUriBuilder
name|withNotificationFilter
parameter_list|(
name|String
name|aFilter
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"notificationFilter"
argument_list|,
name|aFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withHandback (String aHandback)
specifier|public
name|JMXUriBuilder
name|withHandback
parameter_list|(
name|String
name|aHandback
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"handback"
argument_list|,
name|aHandback
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withMonitorType (String aMonitorType)
specifier|public
name|JMXUriBuilder
name|withMonitorType
parameter_list|(
name|String
name|aMonitorType
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"monitorType"
argument_list|,
name|aMonitorType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withInitThreshold (int aInitThreshold)
specifier|public
name|JMXUriBuilder
name|withInitThreshold
parameter_list|(
name|int
name|aInitThreshold
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"initThreshold"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aInitThreshold
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withOffset (int aOffset)
specifier|public
name|JMXUriBuilder
name|withOffset
parameter_list|(
name|int
name|aOffset
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"offset"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aOffset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withModulus (int aModulus)
specifier|public
name|JMXUriBuilder
name|withModulus
parameter_list|(
name|int
name|aModulus
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"modulus"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aModulus
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withDifferenceMode (boolean aDifferenceMode)
specifier|public
name|JMXUriBuilder
name|withDifferenceMode
parameter_list|(
name|boolean
name|aDifferenceMode
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"differenceMode"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aDifferenceMode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withGranularityPeriod (long aPeriod)
specifier|public
name|JMXUriBuilder
name|withGranularityPeriod
parameter_list|(
name|long
name|aPeriod
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"granularityPeriod"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aPeriod
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withObservedAttribute (String aObservedAttribute)
specifier|public
name|JMXUriBuilder
name|withObservedAttribute
parameter_list|(
name|String
name|aObservedAttribute
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"observedAttribute"
argument_list|,
name|aObservedAttribute
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withNotifyHigh (boolean aNotifyHigh)
specifier|public
name|JMXUriBuilder
name|withNotifyHigh
parameter_list|(
name|boolean
name|aNotifyHigh
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"notifyHigh"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aNotifyHigh
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withNotifyLow (boolean aNotifyLow)
specifier|public
name|JMXUriBuilder
name|withNotifyLow
parameter_list|(
name|boolean
name|aNotifyLow
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"notifyLow"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aNotifyLow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withThresholdHigh (Number aThresholdHigh)
specifier|public
name|JMXUriBuilder
name|withThresholdHigh
parameter_list|(
name|Number
name|aThresholdHigh
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"thresholdHigh"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aThresholdHigh
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withThresholdLow (Number aThresholdLow)
specifier|public
name|JMXUriBuilder
name|withThresholdLow
parameter_list|(
name|Number
name|aThresholdLow
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"thresholdLow"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aThresholdLow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withNotifyDiffer (boolean aNotifyDiffer)
specifier|public
name|JMXUriBuilder
name|withNotifyDiffer
parameter_list|(
name|boolean
name|aNotifyDiffer
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"notifyDiffer"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aNotifyDiffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withNotifyMatch (boolean aNotifyMatch)
specifier|public
name|JMXUriBuilder
name|withNotifyMatch
parameter_list|(
name|boolean
name|aNotifyMatch
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"notifyMatch"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aNotifyMatch
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withStringToCompare (String aStringToCompare)
specifier|public
name|JMXUriBuilder
name|withStringToCompare
parameter_list|(
name|String
name|aStringToCompare
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"stringToCompare"
argument_list|,
name|aStringToCompare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withTestConnectionOnStartup (boolean aTestConnectionOnStartup)
specifier|public
name|JMXUriBuilder
name|withTestConnectionOnStartup
parameter_list|(
name|boolean
name|aTestConnectionOnStartup
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"testConnectionOnStartup"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aTestConnectionOnStartup
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withReconnectOnConnectionFailure (boolean aReconnectOnConnectionFailure)
specifier|public
name|JMXUriBuilder
name|withReconnectOnConnectionFailure
parameter_list|(
name|boolean
name|aReconnectOnConnectionFailure
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"reconnectOnConnectionFailure"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aReconnectOnConnectionFailure
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withReconnectDelay (int aReconnectDelay)
specifier|public
name|JMXUriBuilder
name|withReconnectDelay
parameter_list|(
name|int
name|aReconnectDelay
parameter_list|)
block|{
name|addProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aReconnectDelay
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Converts all of the values to params with the "key." prefix so the      * component will pick up on them and set them on the endpoint. Alternatively,      * you can pass in a reference to a Hashtable using the version of this      * method that takes a single string.      */
DECL|method|withObjectProperties (Map<String, String> aPropertiesSansKeyPrefix)
specifier|public
name|JMXUriBuilder
name|withObjectProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aPropertiesSansKeyPrefix
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|aPropertiesSansKeyPrefix
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addProperty
argument_list|(
literal|"key."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Your value should start with a hash mark since it's a reference to a value.      * This method will add the hash mark if it's not present.      */
DECL|method|withObjectPropertiesReference (String aReferenceToHashtable)
specifier|public
name|JMXUriBuilder
name|withObjectPropertiesReference
parameter_list|(
name|String
name|aReferenceToHashtable
parameter_list|)
block|{
if|if
condition|(
name|aReferenceToHashtable
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|addProperty
argument_list|(
literal|"objectProperties"
argument_list|,
name|aReferenceToHashtable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addProperty
argument_list|(
literal|"objectProperties"
argument_list|,
literal|"#"
operator|+
name|aReferenceToHashtable
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addProperty (String aName, String aValue)
specifier|protected
name|void
name|addProperty
parameter_list|(
name|String
name|aName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
name|mQueryProps
operator|.
name|put
argument_list|(
name|aName
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
DECL|method|getServerName ()
specifier|public
name|String
name|getServerName
parameter_list|()
block|{
return|return
name|mServerName
return|;
block|}
DECL|method|setServerName (String aServerName)
specifier|public
name|void
name|setServerName
parameter_list|(
name|String
name|aServerName
parameter_list|)
block|{
name|mServerName
operator|=
name|aServerName
expr_stmt|;
block|}
DECL|method|withServerName (String aServerName)
specifier|public
name|JMXUriBuilder
name|withServerName
parameter_list|(
name|String
name|aServerName
parameter_list|)
block|{
name|setServerName
argument_list|(
name|aServerName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"jmx:"
argument_list|)
operator|.
name|append
argument_list|(
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mQueryProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
name|String
name|delim
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|mQueryProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|delim
operator|=
literal|"&"
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

