begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for the endpoint. Most of the params in the endpoint are  * set via the endpoint helper so there's no much beyond some sanity  * checks here.  */
end_comment

begin_class
DECL|class|JMXEndpointTest
specifier|public
class|class
name|JMXEndpointTest
block|{
DECL|field|context
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|setObjectNameThrowsWhenObjectPropertiesIsSet ()
specifier|public
name|void
name|setObjectNameThrowsWhenObjectPropertiesIsSet
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|new
name|JMXEndpoint
argument_list|(
literal|"urn:ignored"
argument_list|,
operator|new
name|JMXComponent
argument_list|()
argument_list|)
decl_stmt|;
name|ep
operator|.
name|setObjectProperties
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// should fault since objectName is mutex with objectProperties
name|ep
operator|.
name|setObjectName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|defaultsToXml ()
specifier|public
name|void
name|defaultsToXml
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&objectName=theObjectName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ep
operator|.
name|isXML
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|formatRaw ()
specifier|public
name|void
name|formatRaw
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&objectName=theObjectName&format=raw"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ep
operator|.
name|isXML
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"raw"
argument_list|,
name|ep
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getJMXObjectName ()
specifier|public
name|void
name|getJMXObjectName
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&objectName=theObjectName"
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ep
operator|.
name|getJMXObjectName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FooDomain:name=theObjectName"
argument_list|,
name|on
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getJMXObjectNameWithProps ()
specifier|public
name|void
name|getJMXObjectNameWithProps
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&key.name=theObjectName"
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ep
operator|.
name|getJMXObjectName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FooDomain:name=theObjectName"
argument_list|,
name|on
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getJMXObjectNameCached ()
specifier|public
name|void
name|getJMXObjectNameCached
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&key.name=theObjectName"
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ep
operator|.
name|getJMXObjectName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|on
argument_list|,
name|ep
operator|.
name|getJMXObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|platformServer ()
specifier|public
name|void
name|platformServer
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&key.name=theObjectName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ep
operator|.
name|isPlatformServer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"platform"
argument_list|,
name|ep
operator|.
name|getServerURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|remoteServer ()
specifier|public
name|void
name|remoteServer
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?objectDomain=FooDomain&key.name=theObjectName"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ep
operator|.
name|isPlatformServer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi"
argument_list|,
name|ep
operator|.
name|getServerURL
argument_list|()
argument_list|)
expr_stmt|;
name|ep
operator|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx://service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?objectDomain=FooDomain&key.name=theObjectName"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ep
operator|.
name|isPlatformServer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi"
argument_list|,
name|ep
operator|.
name|getServerURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noProducer ()
specifier|public
name|void
name|noProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&key.name=theObjectName"
argument_list|)
decl_stmt|;
try|try
block|{
name|ep
operator|.
name|createProducer
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"producer pattern is not supported"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
DECL|method|credentials ()
specifier|public
name|void
name|credentials
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
operator|(
name|JMXEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&key.name=theObjectName&user=user1&password=1234"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"user1"
argument_list|,
name|ep
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1234"
argument_list|,
name|ep
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

