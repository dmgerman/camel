begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test behavior in the component for initializing an endpoint. Not much here beyond  * checking that the code for the required and mutually exclusive params is working.  */
end_comment

begin_class
DECL|class|JMXComponentTest
specifier|public
class|class
name|JMXComponentTest
block|{
DECL|field|context
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|withObjectProperties ()
specifier|public
name|void
name|withObjectProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&key.propOne=prop1&key.propTwo=prop2"
argument_list|,
name|JMXEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ep
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|ep
operator|.
name|getObjectProperties
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prop1"
argument_list|,
name|props
operator|.
name|get
argument_list|(
literal|"propOne"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prop2"
argument_list|,
name|props
operator|.
name|get
argument_list|(
literal|"propTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ep
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withObjectName ()
specifier|public
name|void
name|withObjectName
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXEndpoint
name|ep
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&objectName=theObjectName"
argument_list|,
name|JMXEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ep
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"theObjectName"
argument_list|,
name|ep
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|ep
operator|.
name|getObjectProperties
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withObjectNameAndObjectProperties ()
specifier|public
name|void
name|withObjectNameAndObjectProperties
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=FooDomain&objectName=theObjectName&key.propOne=prop1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResolveEndpointFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withoutDomain ()
specifier|public
name|void
name|withoutDomain
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectName=theObjectName"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"missing domain should have caused failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResolveEndpointFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withoutObjectNameAndObjectProperties ()
specifier|public
name|void
name|withoutObjectNameAndObjectProperties
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"jmx:platform?objectDomain=theObjectDomain"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"missing name should have caused failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResolveEndpointFailedException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

