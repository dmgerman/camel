begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx.beans
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
operator|.
name|beans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeChangeNotification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerNotification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationBroadcasterSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|relation
operator|.
name|RelationNotification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectionNotification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|timer
operator|.
name|TimerNotification
import|;
end_import

begin_comment
comment|/**  * Simple bean that is used for testing.  */
end_comment

begin_class
DECL|class|SimpleBean
specifier|public
class|class
name|SimpleBean
extends|extends
name|NotificationBroadcasterSupport
implements|implements
name|ISimpleMXBean
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1230507995730071242L
decl_stmt|;
DECL|field|mSequence
specifier|private
name|int
name|mSequence
decl_stmt|;
comment|/**      * Use the same timestamp every time so the assertions are easier      */
DECL|field|mTimestamp
specifier|private
name|long
name|mTimestamp
decl_stmt|;
DECL|field|mStringValue
specifier|private
name|String
name|mStringValue
decl_stmt|;
DECL|field|mMonitorNumber
specifier|private
name|int
name|mMonitorNumber
decl_stmt|;
DECL|method|getStringValue ()
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
name|mStringValue
return|;
block|}
DECL|method|setStringValue (String aStringValue)
specifier|public
name|void
name|setStringValue
parameter_list|(
name|String
name|aStringValue
parameter_list|)
block|{
name|String
name|oldValue
init|=
name|getStringValue
argument_list|()
decl_stmt|;
name|mStringValue
operator|=
name|aStringValue
expr_stmt|;
name|AttributeChangeNotification
name|acn
init|=
operator|new
name|AttributeChangeNotification
argument_list|(
name|this
argument_list|,
name|mSequence
operator|++
argument_list|,
name|mTimestamp
argument_list|,
literal|"attribute changed"
argument_list|,
literal|"stringValue"
argument_list|,
literal|"string"
argument_list|,
name|oldValue
argument_list|,
name|mStringValue
argument_list|)
decl_stmt|;
name|sendNotification
argument_list|(
name|acn
argument_list|)
expr_stmt|;
block|}
DECL|method|getMonitorNumber ()
specifier|public
name|Integer
name|getMonitorNumber
parameter_list|()
block|{
return|return
name|mMonitorNumber
return|;
block|}
DECL|method|setMonitorNumber (Integer aNumber)
specifier|public
name|void
name|setMonitorNumber
parameter_list|(
name|Integer
name|aNumber
parameter_list|)
block|{
name|mMonitorNumber
operator|=
name|aNumber
expr_stmt|;
block|}
DECL|method|getSequence ()
specifier|public
name|int
name|getSequence
parameter_list|()
block|{
return|return
name|mSequence
return|;
block|}
DECL|method|setSequence (int aSequence)
specifier|public
name|void
name|setSequence
parameter_list|(
name|int
name|aSequence
parameter_list|)
block|{
name|mSequence
operator|=
name|aSequence
expr_stmt|;
block|}
DECL|method|getTimestamp ()
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|mTimestamp
return|;
block|}
DECL|method|setTimestamp (long aTimestamp)
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|aTimestamp
parameter_list|)
block|{
name|mTimestamp
operator|=
name|aTimestamp
expr_stmt|;
block|}
DECL|method|userData (String aUserData)
specifier|public
name|void
name|userData
parameter_list|(
name|String
name|aUserData
parameter_list|)
block|{
name|Notification
name|n
init|=
operator|new
name|Notification
argument_list|(
literal|"userData"
argument_list|,
name|this
argument_list|,
name|mSequence
operator|++
argument_list|,
name|mTimestamp
argument_list|,
literal|"Here's my user data"
argument_list|)
decl_stmt|;
name|n
operator|.
name|setUserData
argument_list|(
name|aUserData
argument_list|)
expr_stmt|;
name|sendNotification
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|touch ()
specifier|public
name|void
name|touch
parameter_list|()
block|{
name|Notification
name|n
init|=
operator|new
name|Notification
argument_list|(
literal|"touched"
argument_list|,
name|this
argument_list|,
name|mSequence
operator|++
argument_list|,
name|mTimestamp
argument_list|,
literal|"I was touched"
argument_list|)
decl_stmt|;
name|sendNotification
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerConnectionNotification ()
specifier|public
name|void
name|triggerConnectionNotification
parameter_list|()
block|{
name|JMXConnectionNotification
name|n
init|=
operator|new
name|JMXConnectionNotification
argument_list|(
literal|"connection"
argument_list|,
name|this
argument_list|,
literal|"conn-123"
argument_list|,
name|mSequence
operator|++
argument_list|,
literal|"connection notification"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|n
operator|.
name|setTimeStamp
argument_list|(
name|mTimestamp
argument_list|)
expr_stmt|;
name|sendNotification
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerMBeanServerNotification ()
specifier|public
name|void
name|triggerMBeanServerNotification
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServerNotification
name|n
init|=
operator|new
name|MBeanServerNotification
argument_list|(
literal|"mbeanserver"
argument_list|,
name|this
argument_list|,
name|mSequence
operator|++
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"TestDomain"
argument_list|,
literal|"name"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|n
operator|.
name|setTimeStamp
argument_list|(
name|mTimestamp
argument_list|)
expr_stmt|;
name|sendNotification
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerRelationNotification ()
specifier|public
name|void
name|triggerRelationNotification
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ObjectName
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"TestDomain"
argument_list|,
literal|"name"
argument_list|,
literal|"mbean-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RelationNotification
name|n
init|=
operator|new
name|RelationNotification
argument_list|(
name|RelationNotification
operator|.
name|RELATION_BASIC_CREATION
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"TestDomain"
argument_list|,
literal|"name"
argument_list|,
literal|"source"
argument_list|)
argument_list|,
name|mSequence
operator|++
argument_list|,
name|mTimestamp
argument_list|,
literal|"relation message"
argument_list|,
literal|"relation-id"
argument_list|,
literal|"relation.type"
argument_list|,
operator|new
name|ObjectName
argument_list|(
literal|"TestDomain"
argument_list|,
literal|"name"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|sendNotification
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerTimerNotification ()
specifier|public
name|void
name|triggerTimerNotification
parameter_list|()
block|{
name|TimerNotification
name|n
init|=
operator|new
name|TimerNotification
argument_list|(
literal|"timer.notification"
argument_list|,
name|this
argument_list|,
name|mSequence
operator|++
argument_list|,
name|mTimestamp
argument_list|,
literal|"timer-notification"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|sendNotification
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

