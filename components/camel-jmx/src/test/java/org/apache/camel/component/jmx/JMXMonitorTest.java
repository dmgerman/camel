begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|monitor
operator|.
name|CounterMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jmx
operator|.
name|beans
operator|.
name|ISimpleMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Registers another bean that monitors an attribute on the simple bean.  * When the attribute changes, an event is fired that we'll assert on.  */
end_comment

begin_class
DECL|class|JMXMonitorTest
specifier|public
class|class
name|JMXMonitorTest
extends|extends
name|SimpleBeanFixture
block|{
comment|/**      * endpoint for the monitor bean      */
DECL|field|mMonitorSink
name|MockEndpoint
name|mMonitorSink
decl_stmt|;
annotation|@
name|Test
DECL|method|counter ()
specifier|public
name|void
name|counter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mMonitorSink
operator|.
name|getReceivedCounter
argument_list|()
argument_list|)
expr_stmt|;
name|mMonitorSink
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|()
operator|.
name|setExpectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ISimpleMXBean
name|simpleBean
init|=
name|getSimpleMXBean
argument_list|()
decl_stmt|;
comment|// we should get an event after the sequence reaches 2
comment|// changing the attrib increments the sequence
name|simpleBean
operator|.
name|setStringValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|// changing the attrib increments the sequence again
name|simpleBean
operator|.
name|setStringValue
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
comment|// we should have gotten 2 attribute change messages
name|waitForMessages
argument_list|()
expr_stmt|;
comment|// and 1 monitor message
name|assertTrue
argument_list|(
literal|"messages didn't arrive within timeout"
argument_list|,
name|mMonitorSink
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|monitorBody
init|=
name|XmlFixture
operator|.
name|toDoc
argument_list|(
name|mMonitorSink
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// strip the timestamp and dateTime fields so we can assert w/o having them trip us up
name|monitorBody
operator|=
name|XmlFixture
operator|.
name|stripTimestamp
argument_list|(
name|monitorBody
argument_list|)
expr_stmt|;
name|XmlFixture
operator|.
name|assertXMLIgnorePrefix
argument_list|(
literal|"failed to match"
argument_list|,
name|XmlFixture
operator|.
name|toDoc
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/resources/consumer-test/monitorNotification.xml"
argument_list|)
argument_list|)
argument_list|,
name|monitorBody
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initBean ()
specifier|protected
name|void
name|initBean
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add the simple bean
name|super
operator|.
name|initBean
argument_list|()
expr_stmt|;
comment|// add our monitor bean
name|CounterMonitor
name|monitor
init|=
operator|new
name|CounterMonitor
argument_list|()
decl_stmt|;
name|monitor
operator|.
name|addObservedObject
argument_list|(
name|makeObjectName
argument_list|(
literal|"simpleBean"
argument_list|)
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setObservedAttribute
argument_list|(
literal|"MonitorNumber"
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setNotify
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setInitThreshold
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setGranularityPeriod
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|registerBean
argument_list|(
name|monitor
argument_list|,
name|makeObjectName
argument_list|(
literal|"counter"
argument_list|)
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initContext ()
specifier|protected
name|void
name|initContext
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add the route for the simple bean
name|super
operator|.
name|initContext
argument_list|()
expr_stmt|;
comment|// add the route for the monitor bean
name|mMonitorSink
operator|=
operator|(
name|MockEndpoint
operator|)
name|getContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"mock:monitor"
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|buildFromURI
argument_list|()
operator|.
name|withObjectName
argument_list|(
literal|"counter"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|mMonitorSink
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

