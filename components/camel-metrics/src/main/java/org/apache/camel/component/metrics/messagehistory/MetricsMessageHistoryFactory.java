begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.metrics.messagehistory
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|metrics
operator|.
name|messagehistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MessageHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StaticService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|MessageHistoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A factory to setup and use {@link MetricsMessageHistory} as message history implementation.  */
end_comment

begin_class
DECL|class|MetricsMessageHistoryFactory
specifier|public
class|class
name|MetricsMessageHistoryFactory
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
implements|,
name|StaticService
implements|,
name|MessageHistoryFactory
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|messageHistoryService
specifier|private
name|MetricsMessageHistoryService
name|messageHistoryService
decl_stmt|;
DECL|field|metricsRegistry
specifier|private
name|MetricRegistry
name|metricsRegistry
decl_stmt|;
DECL|field|useJmx
specifier|private
name|boolean
name|useJmx
decl_stmt|;
DECL|field|jmxDomain
specifier|private
name|String
name|jmxDomain
init|=
literal|"org.apache.camel.metrics"
decl_stmt|;
DECL|field|prettyPrint
specifier|private
name|boolean
name|prettyPrint
decl_stmt|;
DECL|field|rateUnit
specifier|private
name|TimeUnit
name|rateUnit
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
DECL|field|durationUnit
specifier|private
name|TimeUnit
name|durationUnit
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
decl_stmt|;
DECL|field|namePattern
specifier|private
name|String
name|namePattern
init|=
literal|"##name##.##routeId##.##id##.##type##"
decl_stmt|;
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getMetricsRegistry ()
specifier|public
name|MetricRegistry
name|getMetricsRegistry
parameter_list|()
block|{
return|return
name|metricsRegistry
return|;
block|}
comment|/**      * To use a specific {@link com.codahale.metrics.MetricRegistry} instance.      *<p/>      * If no instance has been configured, then Camel will create a shared instance to be used.      */
DECL|method|setMetricsRegistry (MetricRegistry metricsRegistry)
specifier|public
name|void
name|setMetricsRegistry
parameter_list|(
name|MetricRegistry
name|metricsRegistry
parameter_list|)
block|{
name|this
operator|.
name|metricsRegistry
operator|=
name|metricsRegistry
expr_stmt|;
block|}
DECL|method|isUseJmx ()
specifier|public
name|boolean
name|isUseJmx
parameter_list|()
block|{
return|return
name|useJmx
return|;
block|}
comment|/**      * Whether to use JMX reported to enlist JMX MBeans with the metrics statistics.      */
DECL|method|setUseJmx (boolean useJmx)
specifier|public
name|void
name|setUseJmx
parameter_list|(
name|boolean
name|useJmx
parameter_list|)
block|{
name|this
operator|.
name|useJmx
operator|=
name|useJmx
expr_stmt|;
block|}
DECL|method|getJmxDomain ()
specifier|public
name|String
name|getJmxDomain
parameter_list|()
block|{
return|return
name|jmxDomain
return|;
block|}
comment|/**      * The JMX domain name to use for the enlisted JMX MBeans.      */
DECL|method|setJmxDomain (String jmxDomain)
specifier|public
name|void
name|setJmxDomain
parameter_list|(
name|String
name|jmxDomain
parameter_list|)
block|{
name|this
operator|.
name|jmxDomain
operator|=
name|jmxDomain
expr_stmt|;
block|}
DECL|method|isPrettyPrint ()
specifier|public
name|boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
comment|/**      * Whether to use pretty print when outputting JSon      */
DECL|method|setPrettyPrint (boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getRateUnit ()
specifier|public
name|TimeUnit
name|getRateUnit
parameter_list|()
block|{
return|return
name|rateUnit
return|;
block|}
comment|/**      * Sets the time unit to use for requests per unit (eg requests per second)      */
DECL|method|setRateUnit (TimeUnit rateUnit)
specifier|public
name|void
name|setRateUnit
parameter_list|(
name|TimeUnit
name|rateUnit
parameter_list|)
block|{
name|this
operator|.
name|rateUnit
operator|=
name|rateUnit
expr_stmt|;
block|}
DECL|method|getDurationUnit ()
specifier|public
name|TimeUnit
name|getDurationUnit
parameter_list|()
block|{
return|return
name|durationUnit
return|;
block|}
comment|/**      * Sets the time unit to use for timing the duration of processing a message in the route      */
DECL|method|setDurationUnit (TimeUnit durationUnit)
specifier|public
name|void
name|setDurationUnit
parameter_list|(
name|TimeUnit
name|durationUnit
parameter_list|)
block|{
name|this
operator|.
name|durationUnit
operator|=
name|durationUnit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newMessageHistory (String routeId, NamedNode namedNode, Date date)
specifier|public
name|MessageHistory
name|newMessageHistory
parameter_list|(
name|String
name|routeId
parameter_list|,
name|NamedNode
name|namedNode
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|Timer
name|timer
init|=
name|metricsRegistry
operator|.
name|timer
argument_list|(
name|createName
argument_list|(
literal|"history"
argument_list|,
name|routeId
argument_list|,
name|namedNode
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MetricsMessageHistory
argument_list|(
name|routeId
argument_list|,
name|namedNode
argument_list|,
name|timer
argument_list|)
return|;
block|}
DECL|method|createName (String type, String routeId, String id)
specifier|private
name|String
name|createName
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|routeId
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|String
name|name
init|=
name|camelContext
operator|.
name|getManagementName
argument_list|()
operator|!=
literal|null
condition|?
name|camelContext
operator|.
name|getManagementName
argument_list|()
else|:
name|camelContext
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|answer
init|=
name|namePattern
decl_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"##name##"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"##routeId##"
argument_list|,
name|routeId
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"##id##"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"##type##"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|messageHistoryService
operator|=
name|camelContext
operator|.
name|hasService
argument_list|(
name|MetricsMessageHistoryService
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|messageHistoryService
operator|==
literal|null
condition|)
block|{
name|messageHistoryService
operator|=
operator|new
name|MetricsMessageHistoryService
argument_list|()
expr_stmt|;
name|messageHistoryService
operator|.
name|setMetricsRegistry
argument_list|(
name|getMetricsRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|messageHistoryService
operator|.
name|setUseJmx
argument_list|(
name|isUseJmx
argument_list|()
argument_list|)
expr_stmt|;
name|messageHistoryService
operator|.
name|setJmxDomain
argument_list|(
name|getJmxDomain
argument_list|()
argument_list|)
expr_stmt|;
name|messageHistoryService
operator|.
name|setPrettyPrint
argument_list|(
name|isPrettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|messageHistoryService
operator|.
name|setRateUnit
argument_list|(
name|getRateUnit
argument_list|()
argument_list|)
expr_stmt|;
name|messageHistoryService
operator|.
name|setDurationUnit
argument_list|(
name|getDurationUnit
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addService
argument_list|(
name|messageHistoryService
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// use metrics registry from service if not explicit configured
if|if
condition|(
name|metricsRegistry
operator|==
literal|null
condition|)
block|{
name|metricsRegistry
operator|=
name|messageHistoryService
operator|.
name|getMetricsRegistry
argument_list|()
expr_stmt|;
block|}
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|metricsRegistry
argument_list|,
literal|"metricsRegistry"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

