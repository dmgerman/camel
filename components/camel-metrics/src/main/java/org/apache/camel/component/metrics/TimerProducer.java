begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|metrics
operator|.
name|MetricsConstants
operator|.
name|HEADER_TIMER_ACTION
import|;
end_import

begin_class
DECL|class|TimerProducer
specifier|public
class|class
name|TimerProducer
extends|extends
name|AbstractMetricsProducer
block|{
DECL|method|TimerProducer (MetricsEndpoint endpoint)
specifier|public
name|TimerProducer
parameter_list|(
name|MetricsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doProcess (Exchange exchange, MetricsEndpoint endpoint, MetricRegistry registry, String metricsName)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MetricsEndpoint
name|endpoint
parameter_list|,
name|MetricRegistry
name|registry
parameter_list|,
name|String
name|metricsName
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|MetricsTimerAction
name|action
init|=
name|endpoint
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|MetricsTimerAction
name|finalAction
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|action
argument_list|,
name|MetricsTimerAction
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalAction
operator|==
name|MetricsTimerAction
operator|.
name|start
condition|)
block|{
name|handleStart
argument_list|(
name|exchange
argument_list|,
name|registry
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finalAction
operator|==
name|MetricsTimerAction
operator|.
name|stop
condition|)
block|{
name|handleStop
argument_list|(
name|exchange
argument_list|,
name|registry
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No action provided for timer \"{}\""
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleStart (Exchange exchange, MetricRegistry registry, String metricsName)
name|void
name|handleStart
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MetricRegistry
name|registry
parameter_list|,
name|String
name|metricsName
parameter_list|)
block|{
name|String
name|propertyName
init|=
name|getPropertyName
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
name|Timer
operator|.
name|Context
name|context
init|=
name|getTimerContextFromExchange
argument_list|(
name|exchange
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|Timer
name|timer
init|=
name|registry
operator|.
name|timer
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
name|context
operator|=
name|timer
operator|.
name|time
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timer \"{}\" already running"
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleStop (Exchange exchange, MetricRegistry registry, String metricsName)
name|void
name|handleStop
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MetricRegistry
name|registry
parameter_list|,
name|String
name|metricsName
parameter_list|)
block|{
name|String
name|propertyName
init|=
name|getPropertyName
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
name|Timer
operator|.
name|Context
name|context
init|=
name|getTimerContextFromExchange
argument_list|(
name|exchange
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Timer \"{}\" not found"
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPropertyName (String metricsName)
name|String
name|getPropertyName
parameter_list|(
name|String
name|metricsName
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"timer"
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|metricsName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getTimerContextFromExchange (Exchange exchange, String propertyName)
name|Timer
operator|.
name|Context
name|getTimerContextFromExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|,
name|Timer
operator|.
name|Context
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

