begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|metrics
operator|.
name|MetricsConstants
operator|.
name|HEADER_GAUGE_SUBJECT
import|;
end_import

begin_class
DECL|class|GaugeProducer
specifier|public
class|class
name|GaugeProducer
extends|extends
name|AbstractMetricsProducer
block|{
DECL|method|GaugeProducer (MetricsEndpoint endpoint)
specifier|public
name|GaugeProducer
parameter_list|(
name|MetricsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|Gauge
argument_list|<
name|?
argument_list|>
name|gauge
init|=
name|endpoint
operator|.
name|getRegistry
argument_list|()
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
name|endpoint
operator|.
name|getMetricsName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gauge
operator|instanceof
name|CamelMetricsGauge
condition|)
block|{
name|CamelMetricsGauge
name|camelMetricsGauge
init|=
operator|(
name|CamelMetricsGauge
operator|)
name|gauge
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|camelMetricsGauge
operator|.
name|setValue
argument_list|(
name|endpoint
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|endpoint
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|getRegistry
argument_list|()
operator|.
name|register
argument_list|(
name|endpoint
operator|.
name|getMetricsName
argument_list|()
argument_list|,
operator|new
name|CamelMetricsGauge
argument_list|(
name|endpoint
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No subject found for Gauge \"{}\". Ignoring..."
argument_list|,
name|endpoint
operator|.
name|getMetricsName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doProcess (Exchange exchange, MetricsEndpoint endpoint, MetricRegistry registry, String metricsName)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MetricsEndpoint
name|endpoint
parameter_list|,
name|MetricRegistry
name|registry
parameter_list|,
name|String
name|metricsName
parameter_list|)
throws|throws
name|Exception
block|{
name|Gauge
argument_list|<
name|?
argument_list|>
name|gauge
init|=
name|registry
operator|.
name|getGauges
argument_list|()
operator|.
name|get
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
if|if
condition|(
name|gauge
operator|instanceof
name|CamelMetricsGauge
condition|)
block|{
name|CamelMetricsGauge
name|camelMetricsGauge
init|=
operator|(
name|CamelMetricsGauge
operator|)
name|gauge
decl_stmt|;
name|Object
name|subject
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HEADER_GAUGE_SUBJECT
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|camelMetricsGauge
operator|.
name|setValue
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Object
name|subject
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HEADER_GAUGE_SUBJECT
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|finalSubject
init|=
name|subject
operator|!=
literal|null
condition|?
name|subject
else|:
name|endpoint
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|finalSubject
operator|!=
literal|null
condition|)
block|{
name|registry
operator|.
name|register
argument_list|(
name|metricsName
argument_list|,
operator|new
name|CamelMetricsGauge
argument_list|(
name|finalSubject
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No subject found for Gauge \"{}\". Ignoring..."
argument_list|,
name|metricsName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CamelMetricsGauge
class|class
name|CamelMetricsGauge
implements|implements
name|Gauge
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|subject
specifier|private
name|Object
name|subject
decl_stmt|;
DECL|method|CamelMetricsGauge (Object subject)
name|CamelMetricsGauge
parameter_list|(
name|Object
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|subject
return|;
block|}
DECL|method|setValue (Object subject)
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

