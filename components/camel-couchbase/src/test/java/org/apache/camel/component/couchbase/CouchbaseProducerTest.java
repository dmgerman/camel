begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.couchbase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|couchbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|couchbase
operator|.
name|client
operator|.
name|CouchbaseClient
import|;
end_import

begin_import
import|import
name|net
operator|.
name|spy
operator|.
name|memcached
operator|.
name|internal
operator|.
name|OperationFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|couchbase
operator|.
name|CouchbaseConstants
operator|.
name|HEADER_TTL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|CouchbaseProducerTest
specifier|public
class|class
name|CouchbaseProducerTest
block|{
annotation|@
name|Mock
DECL|field|client
specifier|private
name|CouchbaseClient
name|client
decl_stmt|;
annotation|@
name|Mock
DECL|field|endpoint
specifier|private
name|CouchbaseEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|Mock
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
annotation|@
name|Mock
DECL|field|msg
specifier|private
name|Message
name|msg
decl_stmt|;
annotation|@
name|Mock
DECL|field|response
specifier|private
name|OperationFuture
argument_list|<
name|?
argument_list|>
name|response
decl_stmt|;
annotation|@
name|Mock
DECL|field|of
specifier|private
name|OperationFuture
argument_list|<
name|Boolean
argument_list|>
name|of
decl_stmt|;
DECL|field|producer
specifier|private
name|CouchbaseProducer
name|producer
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getProducerRetryAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CouchbaseConstants
operator|.
name|DEFAULT_PRODUCER_RETRIES
argument_list|)
expr_stmt|;
name|producer
operator|=
operator|new
name|CouchbaseProducer
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CouchbaseException
operator|.
name|class
argument_list|)
DECL|method|testBodyMandatory ()
specifier|public
name|void
name|testBodyMandatory
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testPersistToLowerThanSupported ()
specifier|public
name|void
name|testPersistToLowerThanSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|=
operator|new
name|CouchbaseProducer
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testPersistToHigherThanSupported ()
specifier|public
name|void
name|testPersistToHigherThanSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|=
operator|new
name|CouchbaseProducer
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testReplicateToLowerThanSupported ()
specifier|public
name|void
name|testReplicateToLowerThanSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|=
operator|new
name|CouchbaseProducer
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testReplicateToHigherThanSupported ()
specifier|public
name|void
name|testReplicateToHigherThanSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|=
operator|new
name|CouchbaseProducer
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaximumValuesForPersistToAndRepicateTo ()
specifier|public
name|void
name|testMaximumValuesForPersistToAndRepicateTo
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|producer
operator|=
operator|new
name|CouchbaseProducer
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception was thrown while testing maximum values for persistTo and replicateTo parameters "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExpiryTimeIsSet ()
specifier|public
name|void
name|testExpiryTimeIsSet
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|of
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|set
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|of
argument_list|)
expr_stmt|;
comment|// Mock out some headers so we can set an expiry
name|int
name|expiry
init|=
literal|5000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|testHeaders
operator|.
name|put
argument_list|(
literal|"CCB_TTL"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|expiry
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testHeaders
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|HEADER_TTL
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|expiry
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"CCB_PUT"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|set
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|eq
argument_list|(
name|expiry
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeOutRetryToException ()
specifier|public
name|void
name|testTimeOutRetryToException
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|of
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timed out waiting for operation"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|set
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|of
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"CCB_PUT"
argument_list|)
expr_stmt|;
try|try
block|{
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
name|verify
argument_list|(
name|of
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeOutRetryThenSuccess ()
specifier|public
name|void
name|testTimeOutRetryThenSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|of
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timed out waiting for operation"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|set
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|of
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"CCB_PUT"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|of
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|msg
argument_list|)
operator|.
name|setBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeOutRetryTwiceThenSuccess ()
specifier|public
name|void
name|testTimeOutRetryTwiceThenSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|of
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timed out waiting for operation"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timed out waiting for operation"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|set
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|of
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"CCB_PUT"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|of
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|msg
argument_list|)
operator|.
name|setBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

