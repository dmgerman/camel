begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.couchbase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|couchbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|couchbase
operator|.
name|CouchbaseConstants
operator|.
name|DEFAULT_COUCHBASE_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|CouchbaseEndpointTest
specifier|public
class|class
name|CouchbaseEndpointTest
block|{
annotation|@
name|Test
DECL|method|assertSingleton ()
specifier|public
name|void
name|assertSingleton
parameter_list|()
throws|throws
name|Exception
block|{
name|CouchbaseEndpoint
name|endpoint
init|=
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:http://localhost/bucket"
argument_list|,
literal|"http://localhost/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isSingleton
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testBucketRequired ()
specifier|public
name|void
name|testBucketRequired
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:http://localhost:80"
argument_list|,
literal|"http://localhost:80"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultPortIsSet ()
specifier|public
name|void
name|testDefaultPortIsSet
parameter_list|()
throws|throws
name|Exception
block|{
name|CouchbaseEndpoint
name|endpoint
init|=
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:http://localhost/bucket"
argument_list|,
literal|"http://localhost/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_COUCHBASE_PORT
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testHostnameRequired ()
specifier|public
name|void
name|testHostnameRequired
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:http://:80/bucket"
argument_list|,
literal|"couchbase://:80/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testSchemeRequired ()
specifier|public
name|void
name|testSchemeRequired
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:localhost:80/bucket"
argument_list|,
literal|"localhost:80/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCouchbaseEndpoint ()
specifier|public
name|void
name|testCouchbaseEndpoint
parameter_list|()
block|{
operator|new
name|CouchbaseEndpoint
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testCouchbaseEndpointWithoutProtocol ()
specifier|public
name|void
name|testCouchbaseEndpointWithoutProtocol
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"localhost:80/bucket"
argument_list|,
literal|"localhost:80/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCouchbaseEndpointUri ()
specifier|public
name|void
name|testCouchbaseEndpointUri
parameter_list|()
block|{
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:localhost:80/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testCouchbaseEndpointCreateProducer ()
specifier|public
name|void
name|testCouchbaseEndpointCreateProducer
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:localhost:80/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
operator|.
name|createProducer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testCouchbaseEndpointCreateConsumer ()
specifier|public
name|void
name|testCouchbaseEndpointCreateConsumer
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|CouchbaseEndpoint
argument_list|(
literal|"couchbase:localhost:80/bucket"
argument_list|,
operator|new
name|CouchbaseComponent
argument_list|()
argument_list|)
operator|.
name|createConsumer
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Nothing to do
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCouchbaseEndpontSettersAndGetters ()
specifier|public
name|void
name|testCouchbaseEndpontSettersAndGetters
parameter_list|()
block|{
name|CouchbaseEndpoint
name|endpoint
init|=
operator|new
name|CouchbaseEndpoint
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|setProtocol
argument_list|(
literal|"couchbase"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"couchbase"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setBucket
argument_list|(
literal|"bucket"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getBucket
argument_list|()
operator|.
name|equals
argument_list|(
literal|"bucket"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setHostname
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getHostname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPort
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
operator|==
literal|80
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setOperation
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"PUT"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setStartingIdForInsertsFrom
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getStartingIdForInsertsFrom
argument_list|()
operator|==
literal|1L
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setProducerRetryAttempts
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getProducerRetryAttempts
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setProducerRetryPause
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getProducerRetryPause
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDesignDocumentName
argument_list|(
literal|"beer"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getDesignDocumentName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"beer"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setViewName
argument_list|(
literal|"brewery_beers"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getViewName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"brewery_beers"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getLimit
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setSkip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getSkip
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setRangeStartKey
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getRangeStartKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setRangeEndKey
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getRangeEndKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setConsumerProcessedStrategy
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getConsumerProcessedStrategy
argument_list|()
operator|.
name|equals
argument_list|(
literal|"delete"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setOpTimeOut
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getOpTimeOut
argument_list|()
operator|==
literal|1L
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setTimeoutExceptionThreshold
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getTimeoutExceptionThreshold
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setReadBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getReadBufferSize
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setShouldOptimize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isShouldOptimize
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setMaxReconnectDelay
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getMaxReconnectDelay
argument_list|()
operator|==
literal|1L
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setOpQueueMaxBlockTime
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getOpQueueMaxBlockTime
argument_list|()
operator|==
literal|1L
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setObsPollInterval
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getObsPollInterval
argument_list|()
operator|==
literal|1L
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setObsTimeout
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getObsTimeout
argument_list|()
operator|==
literal|1L
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDescending
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

