begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultLanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|OsgiLanguageResolver
specifier|public
class|class
name|OsgiLanguageResolver
extends|extends
name|DefaultLanguageResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OsgiLanguageResolver
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getLog ()
specifier|protected
name|Log
name|getLog
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
annotation|@
name|Override
DECL|method|findLanguage (String name, CamelContext context)
specifier|protected
name|Class
name|findLanguage
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Activator
operator|.
name|getLanguage
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findLanguageResolver (String name, CamelContext context)
specifier|protected
name|Class
name|findLanguageResolver
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Activator
operator|.
name|getLanguageResolver
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

