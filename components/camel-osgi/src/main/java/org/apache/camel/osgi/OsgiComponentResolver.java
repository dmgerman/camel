begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ComponentResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|SynchronousBundleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|util
operator|.
name|BundleDelegatingClassLoader
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: gnodet  * Date: Sep 20, 2007  * Time: 10:37:31 AM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
DECL|class|OsgiComponentResolver
specifier|public
class|class
name|OsgiComponentResolver
implements|implements
name|ComponentResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OsgiComponentResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bundleContext
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
DECL|field|components
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
name|components
decl_stmt|;
DECL|class|BundleListener
specifier|private
class|class
name|BundleListener
implements|implements
name|SynchronousBundleListener
block|{
DECL|method|bundleChanged (BundleEvent event)
specifier|public
name|void
name|bundleChanged
parameter_list|(
name|BundleEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|Bundle
name|bundle
init|=
name|event
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|RESOLVED
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bundle resolved: "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mayBeAddComponentFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|UNRESOLVED
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bundle unresolved: "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mayBeRemoveComponentFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Exception handing bundle changed event"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ComponentEntry
specifier|private
class|class
name|ComponentEntry
block|{
DECL|field|bundle
name|Bundle
name|bundle
decl_stmt|;
DECL|field|path
name|String
name|path
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|type
name|Class
name|type
decl_stmt|;
block|}
DECL|method|OsgiComponentResolver (BundleContext bundleContext)
specifier|public
name|OsgiComponentResolver
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|components
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing OsgiComponentResolver"
argument_list|)
expr_stmt|;
name|components
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
argument_list|()
expr_stmt|;
name|bundleContext
operator|.
name|addBundleListener
argument_list|(
operator|new
name|BundleListener
argument_list|()
argument_list|)
expr_stmt|;
name|Bundle
index|[]
name|previousBundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|previousBundles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|state
init|=
name|previousBundles
index|[
name|i
index|]
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|Bundle
operator|.
name|RESOLVED
operator|||
name|state
operator|==
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
try|try
block|{
name|mayBeAddComponentFor
argument_list|(
name|previousBundles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Component "
operator|+
name|previousBundles
index|[
name|i
index|]
operator|+
literal|" not added due to "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|mayBeAddComponentFor (Bundle bundle)
specifier|protected
specifier|synchronized
name|void
name|mayBeAddComponentFor
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|Enumeration
name|e
init|=
name|bundle
operator|.
name|getEntryPaths
argument_list|(
literal|"/META-INF/services/org/apache/camel/component/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ComponentEntry
name|entry
init|=
operator|new
name|ComponentEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|entry
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|entry
operator|.
name|name
operator|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|components
operator|.
name|put
argument_list|(
name|entry
operator|.
name|name
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mayBeRemoveComponentFor (Bundle bundle)
specifier|protected
specifier|synchronized
name|void
name|mayBeRemoveComponentFor
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
for|for
control|(
name|ComponentEntry
name|entry
range|:
name|components
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|bundle
operator|==
name|bundle
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing entry: "
operator|+
name|entry
operator|.
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|components
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getComponent (String name)
specifier|protected
specifier|synchronized
name|Class
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|ComponentEntry
name|entry
init|=
name|components
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|entry
operator|.
name|type
operator|==
literal|null
condition|)
block|{
name|URL
name|url
init|=
name|entry
operator|.
name|bundle
operator|.
name|getEntry
argument_list|(
name|entry
operator|.
name|path
argument_list|)
decl_stmt|;
comment|// lets load the file
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|BufferedInputStream
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{                 }
block|}
name|String
name|classname
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|ClassLoader
name|loader
init|=
name|BundleDelegatingClassLoader
operator|.
name|createBundleClassLoaderFor
argument_list|(
name|entry
operator|.
name|bundle
argument_list|)
decl_stmt|;
name|entry
operator|.
name|type
operator|=
name|loader
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found component: "
operator|+
name|name
operator|+
literal|" via type: "
operator|+
name|entry
operator|.
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
operator|.
name|type
return|;
block|}
DECL|method|resolveComponent (String name, CamelContext context)
specifier|public
name|Component
name|resolveComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|bean
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bean
operator|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|bean
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found component: "
operator|+
name|name
operator|+
literal|" in registry: "
operator|+
name|bean
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignored error looking up bean: "
operator|+
name|name
operator|+
literal|". Error: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bean
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bean
operator|instanceof
name|Component
condition|)
block|{
return|return
operator|(
name|Component
operator|)
name|bean
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bean with name: "
operator|+
name|name
operator|+
literal|" in registry is not a Component: "
operator|+
name|bean
argument_list|)
throw|;
block|}
block|}
comment|// Check in OSGi bundles
name|init
argument_list|()
expr_stmt|;
name|Class
name|type
init|=
literal|null
decl_stmt|;
try|try
block|{
name|type
operator|=
name|getComponent
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI, no Component registered for scheme : "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|Component
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|(
name|Component
operator|)
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type is not a Component implementation. Found: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

