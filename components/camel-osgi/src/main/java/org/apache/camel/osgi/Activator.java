begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|SynchronousBundleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|util
operator|.
name|BundleDelegatingClassLoader
import|;
end_import

begin_class
DECL|class|Activator
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
implements|,
name|SynchronousBundleListener
block|{
DECL|field|META_INF_TYPE_CONVERTER
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_TYPE_CONVERTER
init|=
literal|"META-INF/services/org/apache/camel/TypeConverter"
decl_stmt|;
DECL|field|META_INF_COMPONENT
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_COMPONENT
init|=
literal|"META-INF/services/org/apache/camel/component/"
decl_stmt|;
DECL|field|META_INF_LANGUAGE
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_LANGUAGE
init|=
literal|"META-INF/services/org/apache/camel/language/"
decl_stmt|;
DECL|field|META_INF_LANGUAGE_RESOLVER
specifier|public
specifier|static
specifier|final
name|String
name|META_INF_LANGUAGE_RESOLVER
init|=
literal|"META-INF/services/org/apache/camel/language/resolver/"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|COMPONENTS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
name|COMPONENTS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|TYPE_CONVERTERS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|URL
argument_list|,
name|TypeConverterEntry
argument_list|>
name|TYPE_CONVERTERS
init|=
operator|new
name|HashMap
argument_list|<
name|URL
argument_list|,
name|TypeConverterEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LANGUAGES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
name|LANGUAGES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LANGUAGE_RESOLVERS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
name|LANGUAGE_RESOLVERS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|bundle
specifier|private
specifier|static
name|Bundle
name|bundle
decl_stmt|;
DECL|class|ComponentEntry
specifier|private
class|class
name|ComponentEntry
block|{
DECL|field|bundle
name|Bundle
name|bundle
decl_stmt|;
DECL|field|path
name|String
name|path
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|type
name|Class
name|type
decl_stmt|;
block|}
DECL|class|TypeConverterEntry
specifier|public
class|class
name|TypeConverterEntry
block|{
DECL|field|bundle
name|Bundle
name|bundle
decl_stmt|;
DECL|field|resource
name|URL
name|resource
decl_stmt|;
DECL|field|converterPackages
name|Set
argument_list|<
name|String
argument_list|>
name|converterPackages
decl_stmt|;
block|}
DECL|method|bundleChanged (BundleEvent event)
specifier|public
name|void
name|bundleChanged
parameter_list|(
name|BundleEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Bundle changed: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Bundle
name|bundle
init|=
name|event
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|RESOLVED
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bundle resolved: "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mayBeAddComponentAndLanguageFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|mayBeAddTypeConverterFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|UNRESOLVED
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bundle unresolved: "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mayBeRemoveComponentAndLanguageFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|mayBeRemoveTypeConverterFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Exception occured during bundleChanged for event: "
operator|+
name|event
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addComponentEntry (String entryPath, Bundle bundle, Map<String, ComponentEntry> entries, Class clazz)
specifier|protected
specifier|synchronized
name|void
name|addComponentEntry
parameter_list|(
name|String
name|entryPath
parameter_list|,
name|Bundle
name|bundle
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
name|entries
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
comment|// Check bundle compatibility
try|try
block|{
if|if
condition|(
name|bundle
operator|.
name|loadClass
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|clazz
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return;
block|}
name|Enumeration
name|e
init|=
name|bundle
operator|.
name|getEntryPaths
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ComponentEntry
name|entry
init|=
operator|new
name|ComponentEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|entry
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|entry
operator|.
name|name
operator|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|name
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mayBeAddComponentAndLanguageFor (Bundle bundle)
specifier|protected
name|void
name|mayBeAddComponentAndLanguageFor
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|addComponentEntry
argument_list|(
name|META_INF_COMPONENT
argument_list|,
name|bundle
argument_list|,
name|COMPONENTS
argument_list|,
name|Component
operator|.
name|class
argument_list|)
expr_stmt|;
name|addComponentEntry
argument_list|(
name|META_INF_LANGUAGE
argument_list|,
name|bundle
argument_list|,
name|LANGUAGES
argument_list|,
name|Language
operator|.
name|class
argument_list|)
expr_stmt|;
name|addComponentEntry
argument_list|(
name|META_INF_LANGUAGE_RESOLVER
argument_list|,
name|bundle
argument_list|,
name|LANGUAGE_RESOLVERS
argument_list|,
name|LanguageResolver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|mayBeAddTypeConverterFor (Bundle bundle)
specifier|protected
specifier|synchronized
name|void
name|mayBeAddTypeConverterFor
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
comment|// Check bundle compatibility
try|try
block|{
name|Class
name|clazz
init|=
name|TypeConverter
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|bundle
operator|.
name|loadClass
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|clazz
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return;
block|}
try|try
block|{
name|Enumeration
name|e
init|=
name|bundle
operator|.
name|getResources
argument_list|(
name|META_INF_TYPE_CONVERTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|resource
init|=
operator|(
name|URL
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|resource
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TypeConverterEntry
name|entry
init|=
operator|new
name|TypeConverterEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|entry
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|entry
operator|.
name|converterPackages
operator|=
name|getConverterPackages
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|TYPE_CONVERTERS
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
comment|// can't find the resource
block|}
block|}
DECL|method|mayBeRemoveComponentAndLanguageFor (Bundle bundle)
specifier|protected
name|void
name|mayBeRemoveComponentAndLanguageFor
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|removeComponentEntry
argument_list|(
name|bundle
argument_list|,
name|COMPONENTS
argument_list|)
expr_stmt|;
name|removeComponentEntry
argument_list|(
name|bundle
argument_list|,
name|LANGUAGES
argument_list|)
expr_stmt|;
name|removeComponentEntry
argument_list|(
name|bundle
argument_list|,
name|LANGUAGE_RESOLVERS
argument_list|)
expr_stmt|;
block|}
DECL|method|removeComponentEntry (Bundle bundle, Map<String, ComponentEntry> entries)
specifier|protected
name|void
name|removeComponentEntry
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|ComponentEntry
index|[]
name|entriesArray
init|=
name|entries
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ComponentEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|ComponentEntry
name|entry
range|:
name|entriesArray
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|bundle
operator|==
name|bundle
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing entry: "
operator|+
name|entry
operator|.
name|path
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mayBeRemoveTypeConverterFor (Bundle bundle)
specifier|protected
specifier|synchronized
name|void
name|mayBeRemoveTypeConverterFor
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|TypeConverterEntry
index|[]
name|entriesArray
init|=
name|TYPE_CONVERTERS
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|TypeConverterEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|TypeConverterEntry
name|entry
range|:
name|entriesArray
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|bundle
operator|==
name|bundle
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing entry: "
operator|+
name|entry
operator|.
name|resource
operator|+
literal|" in bundle "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|COMPONENTS
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|start (BundleContext context)
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator starting"
argument_list|)
expr_stmt|;
name|bundle
operator|=
name|context
operator|.
name|getBundle
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using bundle: "
operator|+
name|bundle
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking existing bundles for Camel components, languages and type converters"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Bundle
name|bundle
range|:
name|context
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|RESOLVED
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|STARTING
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|STOPPING
condition|)
block|{
name|mayBeAddComponentAndLanguageFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|mayBeAddTypeConverterFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator started"
argument_list|)
expr_stmt|;
block|}
DECL|method|stop (BundleContext context)
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator stopping"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing Camel bundles"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Bundle
name|bundle
range|:
name|context
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|RESOLVED
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|STARTING
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|STOPPING
condition|)
block|{
name|mayBeRemoveComponentAndLanguageFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|mayBeRemoveTypeConverterFor
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel activator stopped"
argument_list|)
expr_stmt|;
block|}
DECL|method|getConverterPackages (URL resource)
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getConverterPackages
parameter_list|(
name|URL
name|resource
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|packages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|resource
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|tokenize
argument_list|(
name|packages
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// Do nothing here
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|ObjectHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|packages
return|;
block|}
DECL|method|tokenize (Set<String> packages, String line)
specifier|protected
name|void
name|tokenize
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|packages
parameter_list|,
name|String
name|line
parameter_list|)
block|{
name|StringTokenizer
name|iter
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|iter
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packages
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getBundle ()
specifier|protected
specifier|static
name|Bundle
name|getBundle
parameter_list|()
block|{
return|return
name|bundle
return|;
block|}
DECL|method|getTypeConverterEntries ()
specifier|protected
specifier|static
specifier|synchronized
name|TypeConverterEntry
index|[]
name|getTypeConverterEntries
parameter_list|()
block|{
name|Collection
argument_list|<
name|TypeConverterEntry
argument_list|>
name|entries
init|=
name|TYPE_CONVERTERS
operator|.
name|values
argument_list|()
decl_stmt|;
return|return
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|TypeConverterEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getComponent (String name)
specifier|public
specifier|static
specifier|synchronized
name|Class
name|getComponent
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finding Component: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|getClassFromEntries
argument_list|(
name|name
argument_list|,
name|COMPONENTS
argument_list|)
return|;
block|}
DECL|method|getLanguage (String name)
specifier|public
specifier|static
specifier|synchronized
name|Class
name|getLanguage
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finding Language: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|getClassFromEntries
argument_list|(
name|name
argument_list|,
name|LANGUAGES
argument_list|)
return|;
block|}
DECL|method|getLanguageResolver (String name)
specifier|public
specifier|static
specifier|synchronized
name|Class
name|getLanguageResolver
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finding LanguageResolver: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|getClassFromEntries
argument_list|(
name|name
argument_list|,
name|LANGUAGE_RESOLVERS
argument_list|)
return|;
block|}
DECL|method|getClassFromEntries (String name, Map<String, ComponentEntry> entries)
specifier|protected
specifier|static
specifier|synchronized
name|Class
name|getClassFromEntries
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ComponentEntry
argument_list|>
name|entries
parameter_list|)
throws|throws
name|Exception
block|{
name|ComponentEntry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|entry
operator|.
name|type
operator|==
literal|null
condition|)
block|{
name|URL
name|url
init|=
name|entry
operator|.
name|bundle
operator|.
name|getEntry
argument_list|(
name|entry
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The entry "
operator|+
name|name
operator|+
literal|"'s url is"
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
comment|// lets load the file
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|BufferedInputStream
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{                 }
block|}
name|String
name|classname
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|ClassLoader
name|loader
init|=
name|BundleDelegatingClassLoader
operator|.
name|createBundleClassLoaderFor
argument_list|(
name|entry
operator|.
name|bundle
argument_list|)
decl_stmt|;
name|entry
operator|.
name|type
operator|=
name|loader
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found entry: "
operator|+
name|name
operator|+
literal|" via type: "
operator|+
name|entry
operator|.
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
operator|.
name|type
return|;
block|}
block|}
end_class

end_unit

