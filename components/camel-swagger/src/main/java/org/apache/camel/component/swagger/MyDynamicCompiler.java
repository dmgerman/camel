begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|JavaCompiler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|JavaFileObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|SimpleJavaFileObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|StandardJavaFileManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|ToolProvider
import|;
end_import

begin_class
DECL|class|MyDynamicCompiler
specifier|public
class|class
name|MyDynamicCompiler
block|{
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"package foobar;\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"public class HelloWorld {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    public void doStuff() {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"        System.out.println(\"Hello world\");\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/foobar/"
argument_list|)
decl_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
literal|"target/foobar/HelloWorld.java"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
literal|"target/foobar/HelloWorld.java"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|JavaCompiler
name|compiler
init|=
name|ToolProvider
operator|.
name|getSystemJavaCompiler
argument_list|()
decl_stmt|;
name|StandardJavaFileManager
name|fileManager
init|=
name|compiler
operator|.
name|getStandardFileManager
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//        List<SimpleJavaFileObject> list = new ArrayList<SimpleJavaFileObject>();
comment|//        list.add(new JavaSourceFromString("foobar.HelloWorld", sb.toString()));
name|boolean
name|done
init|=
name|compiler
operator|.
name|getTask
argument_list|(
literal|null
argument_list|,
name|fileManager
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fileManager
operator|.
name|getJavaFileObjectsFromFiles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|done
argument_list|)
expr_stmt|;
name|URLClassLoader
name|classLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Class
name|clazz
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"foobar.HelloWorld"
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|fileManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|JavaSourceFromString
specifier|public
specifier|static
class|class
name|JavaSourceFromString
extends|extends
name|SimpleJavaFileObject
block|{
comment|/**          * The source code of this "file".          */
DECL|field|code
specifier|final
name|String
name|code
decl_stmt|;
comment|/**          * Constructs a new JavaSourceFromString.          * @param name the name of the compilation unit represented by this file object          * @param code the source code for the compilation unit represented by this file object          */
DECL|method|JavaSourceFromString (String name, String code)
specifier|public
name|JavaSourceFromString
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|code
parameter_list|)
block|{
name|super
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"string:///"
operator|+
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|JavaFileObject
operator|.
name|Kind
operator|.
name|SOURCE
operator|.
name|extension
argument_list|)
argument_list|,
name|JavaFileObject
operator|.
name|Kind
operator|.
name|SOURCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCharContent (boolean ignoreEncodingErrors)
specifier|public
name|CharSequence
name|getCharContent
parameter_list|(
name|boolean
name|ignoreEncodingErrors
parameter_list|)
block|{
return|return
name|code
return|;
block|}
block|}
block|}
end_class

end_unit

