begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_class
DECL|class|LuceneComponent
specifier|public
class|class
name|LuceneComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|config
specifier|private
name|LuceneConfiguration
name|config
decl_stmt|;
DECL|method|LuceneComponent ()
specifier|public
name|LuceneComponent
parameter_list|()
block|{
name|super
argument_list|(
name|LuceneEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|LuceneConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|LuceneComponent (CamelContext context)
specifier|public
name|LuceneComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|LuceneEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|LuceneConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|config
operator|.
name|parseURI
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|,
name|parameters
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LuceneEndpoint
name|luceneEndpoint
init|=
operator|new
name|LuceneEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|luceneEndpoint
operator|.
name|getConfig
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|luceneEndpoint
return|;
block|}
DECL|method|getConfig ()
specifier|public
name|LuceneConfiguration
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|/**      * To use a shared lucene configuration. Properties of the shared configuration can also be set individually.      */
DECL|method|setConfig (LuceneConfiguration config)
specifier|public
name|void
name|setConfig
parameter_list|(
name|LuceneConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|config
operator|.
name|getHost
argument_list|()
return|;
block|}
comment|/**      * The URL to the lucene server      * @param host      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|config
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
DECL|method|getOperation ()
specifier|public
name|LuceneOperation
name|getOperation
parameter_list|()
block|{
return|return
name|config
operator|.
name|getOperation
argument_list|()
return|;
block|}
comment|/**      * Operation to do such as insert or query.      * @param operation      */
DECL|method|setOperation (LuceneOperation operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|LuceneOperation
name|operation
parameter_list|)
block|{
name|config
operator|.
name|setOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceDirectory ()
specifier|public
name|File
name|getSourceDirectory
parameter_list|()
block|{
return|return
name|config
operator|.
name|getSourceDirectory
argument_list|()
return|;
block|}
comment|/**      * An optional directory containing files to be used to be analyzed and added to the index at producer startup.      * @param sourceDirectory      */
DECL|method|setSourceDirectory (File sourceDirectory)
specifier|public
name|void
name|setSourceDirectory
parameter_list|(
name|File
name|sourceDirectory
parameter_list|)
block|{
name|config
operator|.
name|setSourceDirectory
argument_list|(
name|sourceDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|getIndexDirectory ()
specifier|public
name|File
name|getIndexDirectory
parameter_list|()
block|{
return|return
name|config
operator|.
name|getIndexDirectory
argument_list|()
return|;
block|}
comment|/**      * A file system directory in which index files are created upon analysis of the document by the specified analyzer      * @param indexDirectory      */
DECL|method|setIndexDirectory (File indexDirectory)
specifier|public
name|void
name|setIndexDirectory
parameter_list|(
name|File
name|indexDirectory
parameter_list|)
block|{
name|config
operator|.
name|setIndexDirectory
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|getAnalyzer ()
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|config
operator|.
name|getAnalyzer
argument_list|()
return|;
block|}
comment|/**      * An Analyzer builds TokenStreams, which analyze text. It thus represents a policy for extracting index terms from text.      * The value for analyzer can be any class that extends the abstract class org.apache.lucene.analysis.Analyzer.      * Lucene also offers a rich set of analyzers out of the box      * @param analyzer      */
DECL|method|setAnalyzer (Analyzer analyzer)
specifier|public
name|void
name|setAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|config
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaxHits ()
specifier|public
name|int
name|getMaxHits
parameter_list|()
block|{
return|return
name|config
operator|.
name|getMaxHits
argument_list|()
return|;
block|}
comment|/**      * An integer value that limits the result set of the search operation      * @param maxHits      */
DECL|method|setMaxHits (int maxHits)
specifier|public
name|void
name|setMaxHits
parameter_list|(
name|int
name|maxHits
parameter_list|)
block|{
name|config
operator|.
name|setMaxHits
argument_list|(
name|maxHits
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

