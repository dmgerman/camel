begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spark
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|spark
operator|.
name|Request
import|;
end_import

begin_class
DECL|class|DefaultSparkBinding
specifier|public
class|class
name|DefaultSparkBinding
implements|implements
name|SparkBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSparkBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
operator|new
name|SparkHeaderFilterStrategy
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|toCamelMessage (Request request, Exchange exchange, SparkConfiguration configuration)
specifier|public
name|Message
name|toCamelMessage
parameter_list|(
name|Request
name|request
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|SparkConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toCamelMessage: {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|SparkMessage
name|answer
init|=
operator|new
name|SparkMessage
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isMapHeaders
argument_list|()
condition|)
block|{
name|populateCamelHeaders
argument_list|(
name|request
argument_list|,
name|answer
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|isDisableStreamCache
argument_list|()
condition|)
block|{
comment|// keep the body as a input stream
name|answer
operator|.
name|setBody
argument_list|(
name|request
operator|.
name|raw
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setBody
argument_list|(
name|request
operator|.
name|body
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|populateCamelHeaders (Request request, Map<String, Object> headers, Exchange exchange, SparkConfiguration configuration)
specifier|public
name|void
name|populateCamelHeaders
parameter_list|(
name|Request
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|SparkConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
comment|// store the method and query and other info in headers as String types
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|request
operator|.
name|raw
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|request
operator|.
name|raw
argument_list|()
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URL
argument_list|,
name|request
operator|.
name|raw
argument_list|()
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|request
operator|.
name|raw
argument_list|()
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|request
operator|.
name|raw
argument_list|()
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|request
operator|.
name|raw
argument_list|()
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|request
operator|.
name|attributes
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|request
operator|.
name|attribute
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|decoded
init|=
name|shouldUrlDecodeHeader
argument_list|(
name|configuration
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|key
argument_list|,
name|decoded
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|SparkHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|key
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|request
operator|.
name|headers
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|request
operator|.
name|headers
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|decoded
init|=
name|shouldUrlDecodeHeader
argument_list|(
name|configuration
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|key
argument_list|,
name|decoded
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|SparkHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|key
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|request
operator|.
name|params
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|mapKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|decoded
init|=
name|shouldUrlDecodeHeader
argument_list|(
name|configuration
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|key
argument_list|,
name|decoded
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|SparkHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|key
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|splat
init|=
name|request
operator|.
name|splat
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"splat"
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|key
argument_list|,
name|splat
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|SparkHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|key
argument_list|,
name|splat
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Decodes the header if needed to, or returns the header value as is.      *      * @param configuration the configuration      * @param headerName    the header name      * @param value         the current header value      * @param charset       the charset to use for decoding      * @return the decoded value (if decoded was needed) or a<tt>toString</tt> representation of the value.      * @throws java.io.UnsupportedEncodingException is thrown if error decoding.      */
DECL|method|shouldUrlDecodeHeader (SparkConfiguration configuration, String headerName, Object value, String charset)
specifier|protected
name|String
name|shouldUrlDecodeHeader
parameter_list|(
name|SparkConfiguration
name|configuration
parameter_list|,
name|String
name|headerName
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// do not decode Content-Type
if|if
condition|(
name|Exchange
operator|.
name|CONTENT_TYPE
operator|.
name|equals
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|isUrlDecodeHeaders
argument_list|()
condition|)
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|charset
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|mapKey (String key)
specifier|protected
name|String
name|mapKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
block|}
end_class

end_unit

