begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spark.annotations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spark
operator|.
name|annotations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|AbstractJavaRDDLike
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|findMethodsWithAnnotation
import|;
end_import

begin_class
DECL|class|AnnotatedRddCallback
specifier|public
specifier|final
class|class
name|AnnotatedRddCallback
block|{
DECL|method|AnnotatedRddCallback ()
specifier|private
name|AnnotatedRddCallback
parameter_list|()
block|{     }
DECL|method|annotatedRddCallback (final Object callback)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spark
operator|.
name|RddCallback
name|annotatedRddCallback
parameter_list|(
specifier|final
name|Object
name|callback
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Method
argument_list|>
name|rddCallbacks
init|=
name|findMethodsWithAnnotation
argument_list|(
name|callback
operator|.
name|getClass
argument_list|()
argument_list|,
name|RddCallback
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rddCallbacks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spark
operator|.
name|RddCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|onRdd
parameter_list|(
name|AbstractJavaRDDLike
name|rdd
parameter_list|,
name|Object
modifier|...
name|payloads
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|payloads
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|arguments
operator|.
name|add
argument_list|(
name|rdd
argument_list|)
expr_stmt|;
name|arguments
operator|.
name|addAll
argument_list|(
name|asList
argument_list|(
name|payloads
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|)
block|{
name|arguments
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Method
name|callbackMethod
init|=
name|rddCallbacks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|callbackMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|callbackMethod
operator|.
name|invoke
argument_list|(
name|callback
argument_list|,
name|arguments
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|arguments
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can't find methods annotated with @Rdd."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

