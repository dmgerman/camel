begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.zipfile
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|zipfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Dataformat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|InputStreamIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|OutputStreamBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|FILE_NAME
import|;
end_import

begin_comment
comment|/**  * Zip file data format.  * See {@link org.apache.camel.model.dataformat.ZipDataFormat} for "deflate" compression.  */
end_comment

begin_class
annotation|@
name|Dataformat
argument_list|(
literal|"zipfile"
argument_list|)
DECL|class|ZipFileDataFormat
specifier|public
class|class
name|ZipFileDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
block|{
DECL|field|usingIterator
specifier|private
name|boolean
name|usingIterator
decl_stmt|;
DECL|field|allowEmptyDirectory
specifier|private
name|boolean
name|allowEmptyDirectory
decl_stmt|;
DECL|field|preservePathElements
specifier|private
name|boolean
name|preservePathElements
decl_stmt|;
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"zipfile"
return|;
block|}
annotation|@
name|Override
DECL|method|marshal (final Exchange exchange, final Object graph, final OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|graph
parameter_list|,
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|filename
decl_stmt|;
name|String
name|filepath
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|filepath
operator|==
literal|null
condition|)
block|{
comment|// generate the file name as the camel file component would do
name|filename
operator|=
name|filepath
operator|=
name|StringHelper
operator|.
name|sanitize
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|filepath
argument_list|)
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// remove any path elements
block|}
name|ZipOutputStream
name|zos
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|preservePathElements
condition|)
block|{
name|createZipEntries
argument_list|(
name|zos
argument_list|,
name|filepath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createZipEntries
argument_list|(
name|zos
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|TypeConverter
name|converter
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|// favour using input stream
name|InputStream
name|is
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
comment|// okay so try to see if its an iterator which we can wrap as input stream
name|Iterator
name|it
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Iterator
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
literal|null
condition|)
block|{
name|is
operator|=
operator|new
name|InputStreamIterator
argument_list|(
name|converter
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidPayloadException
argument_list|(
name|exchange
argument_list|,
name|body
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|IOHelper
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|zos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|,
name|zos
argument_list|)
expr_stmt|;
block|}
name|String
name|newFilename
init|=
name|filename
operator|+
literal|".zip"
decl_stmt|;
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
name|FILE_NAME
argument_list|,
name|newFilename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (final Exchange exchange, final InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|usingIterator
condition|)
block|{
name|ZipIterator
name|zipIterator
init|=
operator|new
name|ZipIterator
argument_list|(
name|exchange
argument_list|,
name|inputStream
argument_list|)
decl_stmt|;
name|zipIterator
operator|.
name|setAllowEmptyDirectory
argument_list|(
name|allowEmptyDirectory
argument_list|)
expr_stmt|;
return|return
name|zipIterator
return|;
block|}
else|else
block|{
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|OutputStreamBuilder
name|osb
init|=
name|OutputStreamBuilder
operator|.
name|withExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
try|try
block|{
name|ZipEntry
name|entry
init|=
name|zis
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
name|FILE_NAME
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|zis
argument_list|,
name|osb
argument_list|)
expr_stmt|;
block|}
name|entry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Zip file has more than 1 entry."
argument_list|)
throw|;
block|}
return|return
name|osb
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|zis
argument_list|,
name|osb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createZipEntries (ZipOutputStream zos, String filepath)
specifier|private
name|void
name|createZipEntries
parameter_list|(
name|ZipOutputStream
name|zos
parameter_list|,
name|String
name|filepath
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Path
argument_list|>
name|elements
init|=
name|Paths
operator|.
name|get
argument_list|(
name|filepath
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|elements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Path
name|path
init|=
name|elements
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|element
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// If there are more elements to come this element is a directory
comment|// The "/" at the end tells the ZipEntry it is a folder
if|if
condition|(
name|elements
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|element
operator|+=
literal|"/"
expr_stmt|;
block|}
comment|// Each entry needs the complete path, including previous created folders.
name|zos
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|sb
operator|+
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isUsingIterator ()
specifier|public
name|boolean
name|isUsingIterator
parameter_list|()
block|{
return|return
name|usingIterator
return|;
block|}
DECL|method|setUsingIterator (boolean usingIterator)
specifier|public
name|void
name|setUsingIterator
parameter_list|(
name|boolean
name|usingIterator
parameter_list|)
block|{
name|this
operator|.
name|usingIterator
operator|=
name|usingIterator
expr_stmt|;
block|}
DECL|method|isAllowEmptyDirectory ()
specifier|public
name|boolean
name|isAllowEmptyDirectory
parameter_list|()
block|{
return|return
name|allowEmptyDirectory
return|;
block|}
DECL|method|setAllowEmptyDirectory (boolean allowEmptyDirectory)
specifier|public
name|void
name|setAllowEmptyDirectory
parameter_list|(
name|boolean
name|allowEmptyDirectory
parameter_list|)
block|{
name|this
operator|.
name|allowEmptyDirectory
operator|=
name|allowEmptyDirectory
expr_stmt|;
block|}
DECL|method|isPreservePathElements ()
specifier|public
name|boolean
name|isPreservePathElements
parameter_list|()
block|{
return|return
name|preservePathElements
return|;
block|}
DECL|method|setPreservePathElements (boolean preservePathElements)
specifier|public
name|void
name|setPreservePathElements
parameter_list|(
name|boolean
name|preservePathElements
parameter_list|)
block|{
name|this
operator|.
name|preservePathElements
operator|=
name|preservePathElements
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

