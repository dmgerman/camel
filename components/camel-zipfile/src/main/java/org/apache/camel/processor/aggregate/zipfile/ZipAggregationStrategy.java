begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate.zipfile
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|zipfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFileOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_comment
comment|/**  * This aggregation strategy will aggregate all incoming messages into a ZIP file.  *<p>If the incoming exchanges contain {@link GenericFileMessage} file name will   * be taken from the body otherwise the body content will be treated as a byte   * array and the ZIP entry will be named using the message id.</p>  *<p><b>Note:</b> Please note that this aggregation strategy requires eager   * completion check to work properly.</p>  *   */
end_comment

begin_class
DECL|class|ZipAggregationStrategy
specifier|public
class|class
name|ZipAggregationStrategy
implements|implements
name|AggregationStrategy
block|{
DECL|field|filePrefix
specifier|private
name|String
name|filePrefix
decl_stmt|;
DECL|field|fileSuffix
specifier|private
name|String
name|fileSuffix
init|=
literal|".zip"
decl_stmt|;
comment|/**      * Gets the prefix used when creating the ZIP file name.      * @return the prefix      */
DECL|method|getFilePrefix ()
specifier|public
name|String
name|getFilePrefix
parameter_list|()
block|{
return|return
name|filePrefix
return|;
block|}
comment|/**      * Sets the prefix that will be used when creating the ZIP filename.      * @param filePrefix prefix to use on ZIP file.      */
DECL|method|setFilePrefix (String filePrefix)
specifier|public
name|void
name|setFilePrefix
parameter_list|(
name|String
name|filePrefix
parameter_list|)
block|{
name|this
operator|.
name|filePrefix
operator|=
name|filePrefix
expr_stmt|;
block|}
comment|/**      * Gets the suffix used when creating the ZIP file name.      * @return the suffix      */
DECL|method|getFileSuffix ()
specifier|public
name|String
name|getFileSuffix
parameter_list|()
block|{
return|return
name|fileSuffix
return|;
block|}
comment|/**      * Sets the suffix that will be used when creating the ZIP filename.      * @param fileSuffix suffix to use on ZIP file.      */
DECL|method|setFileSuffix (String fileSuffix)
specifier|public
name|void
name|setFileSuffix
parameter_list|(
name|String
name|fileSuffix
parameter_list|)
block|{
name|this
operator|.
name|fileSuffix
operator|=
name|fileSuffix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
name|File
name|zipFile
decl_stmt|;
name|Exchange
name|answer
init|=
name|oldExchange
decl_stmt|;
comment|// Guard against empty new exchanges
if|if
condition|(
name|newExchange
operator|==
literal|null
condition|)
block|{
return|return
name|oldExchange
return|;
block|}
comment|// First time for this aggregation
if|if
condition|(
name|oldExchange
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|zipFile
operator|=
name|FileUtil
operator|.
name|createTempFile
argument_list|(
name|this
operator|.
name|filePrefix
argument_list|,
name|this
operator|.
name|fileSuffix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|DefaultEndpoint
name|endpoint
init|=
operator|(
name|DefaultEndpoint
operator|)
name|newExchange
operator|.
name|getFromEndpoint
argument_list|()
decl_stmt|;
name|answer
operator|=
name|endpoint
operator|.
name|createExchange
argument_list|()
expr_stmt|;
name|answer
operator|.
name|addOnCompletion
argument_list|(
operator|new
name|DeleteZipFileOnCompletion
argument_list|(
name|zipFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zipFile
operator|=
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// Handle GenericFileMessages
if|if
condition|(
name|GenericFileMessage
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|File
name|appendFile
init|=
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|appendFile
operator|!=
literal|null
condition|)
block|{
name|addFilesToZip
argument_list|(
name|zipFile
argument_list|,
operator|new
name|File
index|[]
block|{
name|appendFile
block|}
argument_list|)
expr_stmt|;
name|GenericFile
argument_list|<
name|File
argument_list|>
name|genericFile
init|=
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
name|zipFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|zipFile
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|genericFile
operator|.
name|bindToExchange
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
literal|"Could not get body as file."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Handle all other messages
name|byte
index|[]
name|buffer
init|=
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
try|try
block|{
name|addEntryToZip
argument_list|(
name|zipFile
argument_list|,
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|GenericFile
argument_list|<
name|File
argument_list|>
name|genericFile
init|=
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
name|zipFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|zipFile
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|genericFile
operator|.
name|bindToExchange
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GenericFileOperationFailedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|addFilesToZip (File source, File[] files)
specifier|private
specifier|static
name|void
name|addFilesToZip
parameter_list|(
name|File
name|source
parameter_list|,
name|File
index|[]
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmpZip
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|source
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tmpZip
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|renameTo
argument_list|(
name|tmpZip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not make temp file ("
operator|+
name|source
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|ZipInputStream
name|zin
init|=
operator|new
name|ZipInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpZip
argument_list|)
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|out
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|source
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
init|;
name|read
operator|>
operator|-
literal|1
condition|;
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ZipEntry
name|ze
init|=
name|zin
operator|.
name|getNextEntry
argument_list|()
init|;
name|ze
operator|!=
literal|null
condition|;
name|ze
operator|=
name|zin
operator|.
name|getNextEntry
argument_list|()
control|)
block|{
name|out
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|read
init|=
name|zin
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
init|;
name|read
operator|>
operator|-
literal|1
condition|;
name|read
operator|=
name|zin
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|zin
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmpZip
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|addEntryToZip (File source, String entryName, byte[] buffer, int length)
specifier|private
specifier|static
name|void
name|addEntryToZip
parameter_list|(
name|File
name|source
parameter_list|,
name|String
name|entryName
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmpZip
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|source
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tmpZip
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|renameTo
argument_list|(
name|tmpZip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not make temp file ("
operator|+
name|source
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|ZipInputStream
name|zin
init|=
operator|new
name|ZipInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpZip
argument_list|)
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|out
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|source
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|entryName
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
for|for
control|(
name|ZipEntry
name|ze
init|=
name|zin
operator|.
name|getNextEntry
argument_list|()
init|;
name|ze
operator|!=
literal|null
condition|;
name|ze
operator|=
name|zin
operator|.
name|getNextEntry
argument_list|()
control|)
block|{
name|out
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|read
init|=
name|zin
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
init|;
name|read
operator|>
operator|-
literal|1
condition|;
name|read
operator|=
name|zin
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|zin
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmpZip
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**      * This callback class is used to clean up the temporary ZIP file once the exchange has completed.      *      */
DECL|class|DeleteZipFileOnCompletion
specifier|private
class|class
name|DeleteZipFileOnCompletion
implements|implements
name|Synchronization
block|{
DECL|field|fileToDelete
specifier|private
name|File
name|fileToDelete
decl_stmt|;
DECL|method|DeleteZipFileOnCompletion (File fileToDelete)
specifier|public
name|DeleteZipFileOnCompletion
parameter_list|(
name|File
name|fileToDelete
parameter_list|)
block|{
name|this
operator|.
name|fileToDelete
operator|=
name|fileToDelete
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (Exchange exchange)
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// Keep the file if somthing gone a miss.
block|}
annotation|@
name|Override
DECL|method|onComplete (Exchange exchange)
specifier|public
name|void
name|onComplete
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|FileUtil
operator|.
name|deleteFile
argument_list|(
name|this
operator|.
name|fileToDelete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

