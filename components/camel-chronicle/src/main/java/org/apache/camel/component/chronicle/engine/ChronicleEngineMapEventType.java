begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.chronicle.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|chronicle
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|api
operator|.
name|map
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|map
operator|.
name|InsertedEvent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|map
operator|.
name|RemovedEvent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|map
operator|.
name|UpdatedEvent
import|;
end_import

begin_enum
DECL|enum|ChronicleEngineMapEventType
specifier|public
enum|enum
name|ChronicleEngineMapEventType
block|{
DECL|enumConstant|INSERT
name|INSERT
parameter_list|(
name|InsertedEvent
operator|.
name|class
parameter_list|)
operator|,
DECL|enumConstant|UPDATE
constructor|UPDATE(UpdatedEvent.class
block|)
enum|,
DECL|enumConstant|REMOVE
name|REMOVE
argument_list|(
name|RemovedEvent
operator|.
name|class
argument_list|)
enum|;
end_enum

begin_decl_stmt
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|ChronicleEngineMapEventType
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|MapEvent
argument_list|>
name|type
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|ChronicleEngineMapEventType (Class<? extends MapEvent> type)
name|ChronicleEngineMapEventType
argument_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MapEvent
argument_list|>
name|type
argument_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
block|;     }
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|MapEvent
argument_list|>
name|getType
argument_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
end_expr_stmt

begin_function
DECL|method|getType (String name)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|MapEvent
argument_list|>
name|getType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|valueOf
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|fromEvent (MapEvent event)
specifier|public
specifier|static
name|ChronicleEngineMapEventType
name|fromEvent
parameter_list|(
name|MapEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|InsertedEvent
condition|)
block|{
return|return
name|ChronicleEngineMapEventType
operator|.
name|INSERT
return|;
block|}
if|if
condition|(
name|event
operator|instanceof
name|UpdatedEvent
condition|)
block|{
return|return
name|ChronicleEngineMapEventType
operator|.
name|UPDATE
return|;
block|}
if|if
condition|(
name|event
operator|instanceof
name|RemovedEvent
condition|)
block|{
return|return
name|ChronicleEngineMapEventType
operator|.
name|REMOVE
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown event type: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
end_function

unit|}
end_unit

