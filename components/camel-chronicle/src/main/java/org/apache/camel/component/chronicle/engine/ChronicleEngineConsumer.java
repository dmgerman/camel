begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.chronicle.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|chronicle
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|api
operator|.
name|map
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|api
operator|.
name|pubsub
operator|.
name|InvalidSubscriberException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|api
operator|.
name|pubsub
operator|.
name|Subscriber
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|api
operator|.
name|pubsub
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|api
operator|.
name|tree
operator|.
name|AssetTree
import|;
end_import

begin_import
import|import
name|net
operator|.
name|openhft
operator|.
name|chronicle
operator|.
name|engine
operator|.
name|tree
operator|.
name|TopologicalEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_comment
comment|/**  * The Chronicle Engine consumer.  */
end_comment

begin_class
DECL|class|ChronicleEngineConsumer
specifier|public
class|class
name|ChronicleEngineConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|client
specifier|private
name|AssetTree
name|client
decl_stmt|;
DECL|method|ChronicleEngineConsumer (ChronicleEngineEnpoint endpoint, Processor processor)
specifier|public
name|ChronicleEngineConsumer
parameter_list|(
name|ChronicleEngineEnpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|endpoint
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"AssetTree already configured"
argument_list|)
throw|;
block|}
name|ChronicleEngineEnpoint
name|endpoint
init|=
operator|(
name|ChronicleEngineEnpoint
operator|)
name|getEndpoint
argument_list|()
decl_stmt|;
name|ChronicleEngineConfiguration
name|conf
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|client
operator|=
name|endpoint
operator|.
name|createRemoteAssetTree
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isSubscribeMapEvents
argument_list|()
condition|)
block|{
name|client
operator|.
name|registerSubscriber
argument_list|(
name|endpoint
operator|.
name|getPath
argument_list|()
argument_list|,
name|MapEvent
operator|.
name|class
argument_list|,
operator|new
name|EngineMapEventListener
argument_list|(
name|conf
operator|.
name|getFilteredMapEvents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|isSubscribeTopologicalEvents
argument_list|()
condition|)
block|{
name|client
operator|.
name|registerSubscriber
argument_list|(
name|endpoint
operator|.
name|getPath
argument_list|()
argument_list|,
name|TopologicalEvent
operator|.
name|class
argument_list|,
operator|new
name|EngineTopologicalEventListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|isSubscribeTopicEvents
argument_list|()
condition|)
block|{
name|client
operator|.
name|registerTopicSubscriber
argument_list|(
name|endpoint
operator|.
name|getPath
argument_list|()
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|,
operator|new
name|EngineTopicEventListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ****************************
comment|// MAP EVENT LISTENER
comment|// ****************************
DECL|class|EngineMapEventListener
specifier|private
class|class
name|EngineMapEventListener
implements|implements
name|Subscriber
argument_list|<
name|MapEvent
argument_list|>
block|{
DECL|field|filteredEvents
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|MapEvent
argument_list|>
argument_list|>
name|filteredEvents
decl_stmt|;
DECL|method|EngineMapEventListener (String[] events)
name|EngineMapEventListener
parameter_list|(
name|String
index|[]
name|events
parameter_list|)
block|{
name|this
operator|.
name|filteredEvents
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|events
operator|!=
literal|null
operator|&&
name|events
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|filteredEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|event
range|:
name|events
control|)
block|{
name|filteredEvents
operator|.
name|add
argument_list|(
name|ChronicleEngineMapEventType
operator|.
name|getType
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onMessage (MapEvent event)
specifier|public
name|void
name|onMessage
parameter_list|(
name|MapEvent
name|event
parameter_list|)
throws|throws
name|InvalidSubscriberException
block|{
if|if
condition|(
name|filteredEvents
operator|!=
literal|null
operator|&&
name|filteredEvents
operator|.
name|contains
argument_list|(
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|ASSET_NAME
argument_list|,
name|event
operator|.
name|assetName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|MAP_EVENT_TYPE
argument_list|,
name|ChronicleEngineMapEventType
operator|.
name|fromEvent
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|KEY
argument_list|,
name|event
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|oldValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|OLD_VALUE
argument_list|,
name|event
operator|.
name|oldValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// ****************************
comment|// TOPOLOGICAL EVENT LISTENER
comment|// ****************************
DECL|class|EngineTopologicalEventListener
specifier|private
class|class
name|EngineTopologicalEventListener
implements|implements
name|Subscriber
argument_list|<
name|TopologicalEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onMessage (TopologicalEvent event)
specifier|public
name|void
name|onMessage
parameter_list|(
name|TopologicalEvent
name|event
parameter_list|)
throws|throws
name|InvalidSubscriberException
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|ASSET_NAME
argument_list|,
name|event
operator|.
name|assetName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|TOPOLOGICAL_EVENT_NAME
argument_list|,
name|event
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|TOPOLOGICAL_EVENT_FULL_NAME
argument_list|,
name|event
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|TOPOLOGICAL_EVENT_ADDED
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|event
operator|.
name|added
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// ****************************
comment|// TOPIC EVENT LISTENER
comment|// ****************************
DECL|class|EngineTopicEventListener
specifier|private
class|class
name|EngineTopicEventListener
implements|implements
name|TopicSubscriber
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
annotation|@
name|Override
DECL|method|onMessage (Object topic, Object dataMessage)
specifier|public
name|void
name|onMessage
parameter_list|(
name|Object
name|topic
parameter_list|,
name|Object
name|dataMessage
parameter_list|)
throws|throws
name|InvalidSubscriberException
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ChronicleEngineConstants
operator|.
name|TOPIC
argument_list|,
name|topic
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|dataMessage
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

