begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servletlistener
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servletlistener
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ManagementStatisticsLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementLifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|ManagedManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link ServletContextListener} which is used to bootstrap  * {@link org.apache.camel.CamelContext} in web applications.  *   * @param<R> the type of the {@link Registry} being {@link #createRegistry() created}  */
end_comment

begin_class
DECL|class|CamelServletContextListener
specifier|public
specifier|abstract
class|class
name|CamelServletContextListener
parameter_list|<
name|R
extends|extends
name|Registry
parameter_list|>
implements|implements
name|ServletContextListener
block|{
comment|/**      * instance is used for testing purpose      */
DECL|field|instance
specifier|public
specifier|static
name|ServletCamelContext
name|instance
decl_stmt|;
comment|/**      * Key to store the created {@link org.apache.camel.CamelContext} as an attribute on the {@link javax.servlet.ServletContext}.      */
DECL|field|CAMEL_CONTEXT_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CAMEL_CONTEXT_KEY
init|=
literal|"CamelContext"
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelServletContextListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|protected
name|ServletCamelContext
name|camelContext
decl_stmt|;
DECL|field|camelContextLifecycle
specifier|protected
name|CamelContextLifecycle
argument_list|<
name|R
argument_list|>
name|camelContextLifecycle
decl_stmt|;
DECL|field|test
specifier|protected
name|boolean
name|test
decl_stmt|;
DECL|field|registry
specifier|protected
name|R
name|registry
decl_stmt|;
annotation|@
name|Override
DECL|method|contextInitialized (ServletContextEvent sce)
specifier|public
name|void
name|contextInitialized
parameter_list|(
name|ServletContextEvent
name|sce
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelContextServletListener initializing ..."
argument_list|)
expr_stmt|;
comment|// create jndi and camel context
try|try
block|{
name|registry
operator|=
name|createRegistry
argument_list|()
expr_stmt|;
name|camelContext
operator|=
operator|new
name|ServletCamelContext
argument_list|(
name|registry
argument_list|,
name|sce
operator|.
name|getServletContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating CamelContext."
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// get the init parameters
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|extractInitParameters
argument_list|(
name|sce
argument_list|)
decl_stmt|;
comment|// special for test parameter
name|String
name|test
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|test
argument_list|)
condition|)
block|{
name|this
operator|.
name|test
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"In test mode? {}"
argument_list|,
name|this
operator|.
name|test
argument_list|)
expr_stmt|;
comment|// set properties on the camel context from the init parameters
try|try
block|{
name|initPropertyPlaceholder
argument_list|(
name|camelContext
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|initJmx
argument_list|(
name|camelContext
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|initCamelContext
argument_list|(
name|camelContext
argument_list|,
name|map
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error setting init parameters on CamelContext."
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// any custom CamelContextLifecycle
name|String
name|lifecycle
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|remove
argument_list|(
literal|"CamelContextLifecycle"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|CamelContextLifecycle
argument_list|<
name|R
argument_list|>
argument_list|>
name|clazz
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|lifecycle
argument_list|,
name|CamelContextLifecycle
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|camelContextLifecycle
operator|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating CamelContextLifecycle class with name "
operator|+
name|lifecycle
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|camelContextLifecycle
operator|!=
literal|null
condition|)
block|{
name|camelContextLifecycle
operator|.
name|beforeAddRoutes
argument_list|(
name|camelContext
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error before adding routes to CamelContext."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error before adding routes to CamelContext."
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// get the routes and add to the CamelContext
name|List
argument_list|<
name|Object
argument_list|>
name|routes
init|=
name|extractRoutes
argument_list|(
name|map
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|route
range|:
name|routes
control|)
block|{
if|if
condition|(
name|route
operator|instanceof
name|RouteBuilder
condition|)
block|{
try|try
block|{
name|camelContext
operator|.
name|addRoutes
argument_list|(
operator|(
name|RoutesBuilder
operator|)
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error adding route "
operator|+
name|route
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|route
operator|instanceof
name|Set
condition|)
block|{
comment|// its a set of route builders
for|for
control|(
name|Object
name|routesBuilder
range|:
operator|(
name|Set
argument_list|<
name|?
argument_list|>
operator|)
name|route
control|)
block|{
try|try
block|{
name|camelContext
operator|.
name|addRoutes
argument_list|(
operator|(
name|RoutesBuilder
operator|)
name|routesBuilder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error adding route "
operator|+
name|routesBuilder
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|route
operator|instanceof
name|RoutesDefinition
condition|)
block|{
try|try
block|{
name|camelContext
operator|.
name|addRouteDefinitions
argument_list|(
operator|(
operator|(
name|RoutesDefinition
operator|)
name|route
operator|)
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error adding route(s) "
operator|+
name|route
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|route
operator|instanceof
name|RouteDefinition
condition|)
block|{
try|try
block|{
name|camelContext
operator|.
name|addRouteDefinition
argument_list|(
operator|(
name|RouteDefinition
operator|)
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error adding route(s) "
operator|+
name|route
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported route: "
operator|+
name|route
argument_list|)
throw|;
block|}
block|}
comment|// just log if we could not use all the parameters, as they may be used by others
if|if
condition|(
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There are {} ServletContext init parameters, unknown to Camel. Maybe they are used by other frameworks? [{}]"
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|camelContextLifecycle
operator|!=
literal|null
condition|)
block|{
name|camelContextLifecycle
operator|.
name|afterAddRoutes
argument_list|(
name|camelContext
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error after adding routes to CamelContext."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error after adding routes to CamelContext."
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|camelContextLifecycle
operator|!=
literal|null
condition|)
block|{
name|camelContextLifecycle
operator|.
name|beforeStart
argument_list|(
name|camelContext
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
name|camelContext
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|camelContextLifecycle
operator|!=
literal|null
condition|)
block|{
name|camelContextLifecycle
operator|.
name|afterStart
argument_list|(
name|camelContext
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting CamelContext."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error starting CamelContext."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|test
condition|)
block|{
name|instance
operator|=
name|camelContext
expr_stmt|;
block|}
comment|// store the CamelContext as an attribute
name|sce
operator|.
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|CAMEL_CONTEXT_KEY
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelContextServletListener initialized"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contextDestroyed (ServletContextEvent sce)
specifier|public
name|void
name|contextDestroyed
parameter_list|(
name|ServletContextEvent
name|sce
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelContextServletListener destroying ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|camelContextLifecycle
operator|!=
literal|null
condition|)
block|{
name|camelContextLifecycle
operator|.
name|beforeStop
argument_list|(
name|camelContext
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|camelContextLifecycle
operator|!=
literal|null
condition|)
block|{
name|camelContextLifecycle
operator|.
name|afterStop
argument_list|(
name|camelContext
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error stopping CamelContext. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|camelContext
operator|=
literal|null
expr_stmt|;
name|registry
operator|=
literal|null
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
comment|// store the CamelContext as an attribute
name|sce
operator|.
name|getServletContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|CAMEL_CONTEXT_KEY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelContextServletListener destroyed"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the {@link Registry} implementation to use.      */
DECL|method|createRegistry ()
specifier|protected
specifier|abstract
name|R
name|createRegistry
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Extracts all the init parameters, and will do reference lookup in {@link #createRegistry() registry}      * in case the value starts with a {@code #} sign.      */
DECL|method|extractInitParameters (ServletContextEvent sce)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractInitParameters
parameter_list|(
name|ServletContextEvent
name|sce
parameter_list|)
block|{
comment|// configure CamelContext with the init parameter
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|sce
operator|.
name|getServletContext
argument_list|()
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|sce
operator|.
name|getServletContext
argument_list|()
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|Object
name|target
init|=
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
comment|// a reference lookup in registry
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|target
operator|=
name|lookupRegistryByName
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolved the servlet context's initialization parameter {} to {}"
argument_list|,
name|value
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**      * Initializes the property placeholders by registering the {@link PropertiesComponent} with      * the configuration from the given init parameters.      */
DECL|method|initPropertyPlaceholder (ServletCamelContext camelContext, Map<String, Object> parameters)
specifier|private
name|void
name|initPropertyPlaceholder
parameter_list|(
name|ServletCamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// setup property placeholder first
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"propertyPlaceholder."
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PropertiesComponent
name|pc
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|pc
argument_list|,
name|properties
argument_list|)
expr_stmt|;
comment|// validate we could set all parameters
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error setting propertyPlaceholder parameters on CamelContext."
operator|+
literal|" There are "
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|+
literal|" unknown parameters. ["
operator|+
name|properties
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// register the properties component
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"properties"
argument_list|,
name|pc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Initializes JMX on {@link ServletCamelContext} with the configuration from the given init parameters.      */
DECL|method|initJmx (ServletCamelContext camelContext, Map<String, Object> parameters)
specifier|private
name|void
name|initJmx
parameter_list|(
name|ServletCamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// setup jmx
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"jmx."
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|disabled
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|remove
argument_list|(
literal|"disabled"
argument_list|)
decl_stmt|;
name|boolean
name|disableJmx
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|disabled
operator|!=
literal|null
condition|?
name|disabled
else|:
literal|"false"
argument_list|)
decl_stmt|;
if|if
condition|(
name|disableJmx
condition|)
block|{
comment|// disable JMX which is a bit special to do
name|LOG
operator|.
name|info
argument_list|(
literal|"JMXAgent disabled"
argument_list|)
expr_stmt|;
comment|// clear the existing lifecycle strategies define by the DefaultCamelContext constructor
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// no need to add a lifecycle strategy as we do not need one as JMX is disabled
name|camelContext
operator|.
name|setManagementStrategy
argument_list|(
operator|new
name|DefaultManagementStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMXAgent enabled"
argument_list|)
expr_stmt|;
name|DefaultManagementAgent
name|agent
init|=
operator|new
name|DefaultManagementAgent
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|agent
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|ManagementStrategy
name|managementStrategy
init|=
operator|new
name|ManagedManagementStrategy
argument_list|(
name|camelContext
argument_list|,
name|agent
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|setManagementStrategy
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
comment|// clear the existing lifecycle strategies defined by the DefaultCamelContext constructor
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|camelContext
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|DefaultManagementLifecycleStrategy
argument_list|(
name|camelContext
argument_list|)
argument_list|)
expr_stmt|;
comment|// set additional configuration from agent
name|boolean
name|onlyId
init|=
name|agent
operator|.
name|getOnlyRegisterProcessorWithCustomId
argument_list|()
operator|!=
literal|null
operator|&&
name|agent
operator|.
name|getOnlyRegisterProcessorWithCustomId
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|onlyManageProcessorWithCustomId
argument_list|(
name|onlyId
argument_list|)
expr_stmt|;
name|String
name|statisticsLevel
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|remove
argument_list|(
literal|"statisticsLevel"
argument_list|)
decl_stmt|;
if|if
condition|(
name|statisticsLevel
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setStatisticsLevel
argument_list|(
name|ManagementStatisticsLevel
operator|.
name|valueOf
argument_list|(
name|statisticsLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|loadStatisticsEnabled
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|remove
argument_list|(
literal|"loadStatisticsEnabled"
argument_list|)
decl_stmt|;
name|Boolean
name|statisticsEnabled
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|loadStatisticsEnabled
operator|!=
literal|null
condition|?
name|loadStatisticsEnabled
else|:
literal|"true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|statisticsEnabled
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setLoadStatisticsEnabled
argument_list|(
name|statisticsEnabled
argument_list|)
expr_stmt|;
block|}
block|}
comment|// validate we could set all parameters
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error setting jmx parameters on CamelContext."
operator|+
literal|" There are "
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|+
literal|" unknown parameters. ["
operator|+
name|properties
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Initializes the {@link ServletCamelContext} by setting the supported init parameters.      */
DECL|method|initCamelContext (ServletCamelContext camelContext, Map<String, Object> parameters)
specifier|private
name|void
name|initCamelContext
parameter_list|(
name|ServletCamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|messageHistory
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"messageHistory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageHistory
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setMessageHistory
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|messageHistory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|streamCache
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"streamCache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamCache
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setStreamCaching
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|streamCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|trace
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"trace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setTracing
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|trace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|delayer
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"delayer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setDelayer
argument_list|(
name|CamelContextHelper
operator|.
name|parseLong
argument_list|(
name|camelContext
argument_list|,
name|delayer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|handleFault
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"handleFault"
argument_list|)
decl_stmt|;
if|if
condition|(
name|handleFault
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setHandleFault
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|handleFault
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|errorHandlerRef
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"errorHandlerRef"
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorHandlerRef
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setErrorHandlerBuilder
argument_list|(
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|autoStartup
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"autoStartup"
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoStartup
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setAutoStartup
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|autoStartup
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|useMDCLogging
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"useMDCLogging"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useMDCLogging
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setUseMDCLogging
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|useMDCLogging
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|useBreadcrumb
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"useBreadcrumb"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useBreadcrumb
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setUseBreadcrumb
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|camelContext
argument_list|,
name|useBreadcrumb
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|managementNamePattern
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"managementNamePattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|managementNamePattern
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getManagementNameStrategy
argument_list|()
operator|.
name|setNamePattern
argument_list|(
name|managementNamePattern
argument_list|)
expr_stmt|;
block|}
name|String
name|threadNamePattern
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"threadNamePattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadNamePattern
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|setThreadNamePattern
argument_list|(
name|threadNamePattern
argument_list|)
expr_stmt|;
block|}
comment|// extract any additional properties. prefixes
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"properties."
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|camelContext
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|""
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Extract the routes from the parameters.      *      * @param map parameters      * @return a list of routes, which can be of different types. See source code for more details.      */
DECL|method|extractRoutes (Map<String, Object> map)
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|extractRoutes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|UK
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"routebuilder"
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// we can have multiple values assigned, separated by comma, so create an iterator
name|String
name|value
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|value
operator|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// trim value before usage, as people can indent the values
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Object
name|target
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
comment|// a reference lookup in jndi
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|target
operator|=
name|lookupRegistryByName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ResourceHelper
operator|.
name|hasScheme
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// XML resource from classpath or file system
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|camelContext
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|target
operator|=
name|camelContext
operator|.
name|loadRoutesDefinition
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading routes from resource: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"packagescan:"
argument_list|)
condition|)
block|{
comment|// using package scanning
name|String
name|path
init|=
name|value
operator|.
name|substring
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|camelContext
operator|.
name|getPackageScanClassResolver
argument_list|()
operator|.
name|findImplementations
argument_list|(
name|RouteBuilder
operator|.
name|class
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|RouteBuilder
argument_list|>
name|builders
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|target
operator|=
name|builders
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|classes
control|)
block|{
try|try
block|{
name|RouteBuilder
name|route
init|=
operator|(
name|RouteBuilder
operator|)
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating RouteBuilder "
operator|+
name|clazz
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// assume its a FQN classname for a RouteBuilder class
try|try
block|{
name|Class
argument_list|<
name|RouteBuilder
argument_list|>
name|clazz
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|value
argument_list|,
name|RouteBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|target
operator|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating RouteBuilder "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// after adding the route builders we should remove them from the map
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|lookupRegistryByName (String name)
specifier|private
name|Object
name|lookupRegistryByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|registry
operator|.
name|lookupByName
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

