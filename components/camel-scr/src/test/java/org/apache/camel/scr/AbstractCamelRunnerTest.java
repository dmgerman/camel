begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.scr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|scr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|AbstractCamelRunnerTest
specifier|public
class|class
name|AbstractCamelRunnerTest
block|{
annotation|@
name|Rule
DECL|field|testName
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|log
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"*******************************************************************"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test: "
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"*******************************************************************"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeepConfigure ()
specifier|public
name|void
name|testDeepConfigure
parameter_list|()
throws|throws
name|Exception
block|{
name|ConcreteCamelRunner
name|integration
init|=
operator|new
name|ConcreteCamelRunner
argument_list|()
decl_stmt|;
name|integration
operator|.
name|activate
argument_list|(
literal|null
argument_list|,
name|integration
operator|.
name|getDefaultProperties
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Overriding camelContextId failed (deep configure)"
argument_list|,
name|integration
operator|.
name|getDefaultProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"camelContextId"
argument_list|)
argument_list|,
name|integration
operator|.
name|getContext
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testActivateDeactivate ()
specifier|public
name|void
name|testActivateDeactivate
parameter_list|()
block|{
name|ConcreteCamelRunner
name|integration
init|=
operator|new
name|ConcreteCamelRunner
argument_list|()
decl_stmt|;
try|try
block|{
name|integration
operator|.
name|activate
argument_list|(
literal|null
argument_list|,
name|integration
operator|.
name|getDefaultProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|AbstractCamelRunner
operator|.
name|START_DELAY
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|integration
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel context has not started."
argument_list|,
name|integration
operator|.
name|camelContextStarted
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel context has not stopped."
argument_list|,
name|integration
operator|.
name|camelContextStopped
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not enough routes added."
argument_list|,
name|integration
operator|.
name|routeAdded
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPrepareRunStop ()
specifier|public
name|void
name|testPrepareRunStop
parameter_list|()
block|{
name|ConcreteCamelRunner
name|integration
init|=
operator|new
name|ConcreteCamelRunner
argument_list|()
decl_stmt|;
try|try
block|{
name|integration
operator|.
name|prepare
argument_list|(
literal|null
argument_list|,
name|integration
operator|.
name|getDefaultProperties
argument_list|()
argument_list|)
expr_stmt|;
name|integration
operator|.
name|run
argument_list|()
expr_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|integration
operator|.
name|getContext
argument_list|()
operator|.
name|isStartingRoutes
argument_list|()
condition|)
do|;
name|integration
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel context has not started."
argument_list|,
name|integration
operator|.
name|camelContextStarted
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel context has not stopped."
argument_list|,
name|integration
operator|.
name|camelContextStopped
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not enough routes added."
argument_list|,
name|integration
operator|.
name|routeAdded
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelayedStart ()
specifier|public
name|void
name|testDelayedStart
parameter_list|()
block|{
name|ConcreteCamelRunner
name|integration
init|=
operator|new
name|ConcreteCamelRunner
argument_list|()
decl_stmt|;
try|try
block|{
name|integration
operator|.
name|activate
argument_list|(
literal|null
argument_list|,
name|integration
operator|.
name|getDefaultProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|integration
operator|.
name|gotCamelComponent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|AbstractCamelRunner
operator|.
name|START_DELAY
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel context has started too early"
argument_list|,
name|integration
operator|.
name|camelContextStarted
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel context has not started."
argument_list|,
name|integration
operator|.
name|camelContextStarted
operator|==
literal|1
argument_list|)
expr_stmt|;
name|integration
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel context has not stopped."
argument_list|,
name|integration
operator|.
name|camelContextStopped
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not enough routes added."
argument_list|,
name|integration
operator|.
name|routeAdded
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelayedStartCancel ()
specifier|public
name|void
name|testDelayedStartCancel
parameter_list|()
block|{
name|ConcreteCamelRunner
name|integration
init|=
operator|new
name|ConcreteCamelRunner
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|integration
operator|.
name|getDefaultProperties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"from"
argument_list|,
literal|"notfound:something"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"camelroute.id"
argument_list|,
literal|"test/notfound-mock"
argument_list|)
expr_stmt|;
try|try
block|{
name|integration
operator|.
name|activate
argument_list|(
literal|null
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|AbstractCamelRunner
operator|.
name|START_DELAY
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|integration
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Routes have been added."
argument_list|,
name|integration
operator|.
name|routeAdded
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

