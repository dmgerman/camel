begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.scr.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|scr
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|// CHECKSTYLE:OFF
end_comment

begin_comment
comment|// turn off checkstyle as it fails internally
end_comment

begin_comment
comment|/**  * Helper class.  */
end_comment

begin_class
DECL|class|ScrHelper
specifier|public
specifier|final
class|class
name|ScrHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScrHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ScrHelper ()
specifier|private
name|ScrHelper
parameter_list|()
block|{     }
DECL|method|getScrProperties (String componentName)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getScrProperties
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getScrProperties
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"target/classes/OSGI-INF/%s.xml"
argument_list|,
name|componentName
argument_list|)
argument_list|,
name|componentName
argument_list|)
return|;
block|}
DECL|method|getScrProperties (String xmlLocation, String componentName)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getScrProperties
parameter_list|(
name|String
name|xmlLocation
parameter_list|,
name|String
name|componentName
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|dom
init|=
name|readXML
argument_list|(
operator|new
name|File
argument_list|(
name|xmlLocation
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|XPath
name|xPath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|(
name|XPathFactory
operator|.
name|DEFAULT_OBJECT_MODEL_URI
argument_list|,
literal|"com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl"
argument_list|,
literal|null
argument_list|)
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|xPath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|NamespaceContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
literal|"scr"
case|:
try|try
block|{
name|XPathExpression
name|scrNamespace
init|=
name|xPath
operator|.
name|compile
argument_list|(
literal|"/*/namespace::*[name()='scr']"
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|scrNamespace
operator|.
name|evaluate
argument_list|(
name|dom
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
return|return
name|node
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
comment|// ignore
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error evaluating xpath to obtain namespace prefix. This exception is ignored and using namespace: http://www.osgi.org/xmlns/scr/v1.1.0"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|"http://www.osgi.org/xmlns/scr/v1.1.0"
return|;
default|default:
comment|// noop
block|}
return|return
name|XMLConstants
operator|.
name|NULL_NS_URI
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|propertyListExpression
init|=
name|String
operator|.
name|format
argument_list|(
literal|"/components/scr:component[@name='%s']/property"
argument_list|,
name|componentName
argument_list|)
decl_stmt|;
name|XPathExpression
name|propertyList
init|=
name|xPath
operator|.
name|compile
argument_list|(
name|propertyListExpression
argument_list|)
decl_stmt|;
name|XPathExpression
name|propertyName
init|=
name|xPath
operator|.
name|compile
argument_list|(
literal|"@name"
argument_list|)
decl_stmt|;
name|XPathExpression
name|propertyValue
init|=
name|xPath
operator|.
name|compile
argument_list|(
literal|"@value"
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|propertyList
operator|.
name|evaluate
argument_list|(
name|dom
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|propertyName
operator|.
name|evaluate
argument_list|(
name|node
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|propertyValue
operator|.
name|evaluate
argument_list|(
name|node
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|readXML (File xml)
specifier|private
specifier|static
name|Document
name|readXML
parameter_list|(
name|File
name|xml
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentBuilderFactory
name|builderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|builderFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|builderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|parse
argument_list|(
name|xml
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// CHECKSTYLE:ON
end_comment

end_unit

