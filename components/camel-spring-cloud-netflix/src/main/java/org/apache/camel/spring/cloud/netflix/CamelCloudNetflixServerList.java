begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.cloud.netflix
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|netflix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|client
operator|.
name|config
operator|.
name|IClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|AbstractServerList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ribbon
operator|.
name|cloud
operator|.
name|RibbonServiceDefinition
import|;
end_import

begin_class
DECL|class|CamelCloudNetflixServerList
specifier|public
class|class
name|CamelCloudNetflixServerList
extends|extends
name|AbstractServerList
argument_list|<
name|RibbonServiceDefinition
argument_list|>
block|{
DECL|field|serviceDiscovery
specifier|private
name|ServiceDiscovery
name|serviceDiscovery
decl_stmt|;
DECL|field|serviceFilter
specifier|private
name|ServiceFilter
name|serviceFilter
decl_stmt|;
DECL|field|serviceId
specifier|private
name|String
name|serviceId
decl_stmt|;
DECL|method|CamelCloudNetflixServerList ()
specifier|public
name|CamelCloudNetflixServerList
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|list
lambda|->
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|CamelCloudNetflixServerList (ServiceDiscovery serviceDiscovery, ServiceFilter serviceFilter)
specifier|public
name|CamelCloudNetflixServerList
parameter_list|(
name|ServiceDiscovery
name|serviceDiscovery
parameter_list|,
name|ServiceFilter
name|serviceFilter
parameter_list|)
block|{
name|this
operator|.
name|serviceDiscovery
operator|=
name|serviceDiscovery
expr_stmt|;
name|this
operator|.
name|serviceFilter
operator|=
name|serviceFilter
expr_stmt|;
block|}
DECL|method|getServiceDiscovery ()
specifier|public
name|ServiceDiscovery
name|getServiceDiscovery
parameter_list|()
block|{
return|return
name|serviceDiscovery
return|;
block|}
DECL|method|setServiceDiscovery (ServiceDiscovery serviceDiscovery)
specifier|public
name|void
name|setServiceDiscovery
parameter_list|(
name|ServiceDiscovery
name|serviceDiscovery
parameter_list|)
block|{
name|this
operator|.
name|serviceDiscovery
operator|=
name|serviceDiscovery
expr_stmt|;
block|}
DECL|method|getServiceFilter ()
specifier|public
name|ServiceFilter
name|getServiceFilter
parameter_list|()
block|{
return|return
name|serviceFilter
return|;
block|}
DECL|method|setServiceFilter (ServiceFilter serviceFilter)
specifier|public
name|void
name|setServiceFilter
parameter_list|(
name|ServiceFilter
name|serviceFilter
parameter_list|)
block|{
name|this
operator|.
name|serviceFilter
operator|=
name|serviceFilter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initWithNiwsConfig (IClientConfig clientConfig)
specifier|public
name|void
name|initWithNiwsConfig
parameter_list|(
name|IClientConfig
name|clientConfig
parameter_list|)
block|{
name|this
operator|.
name|serviceId
operator|=
name|clientConfig
operator|.
name|getClientName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInitialListOfServers ()
specifier|public
name|List
argument_list|<
name|RibbonServiceDefinition
argument_list|>
name|getInitialListOfServers
parameter_list|()
block|{
if|if
condition|(
name|serviceId
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|services
init|=
name|serviceDiscovery
operator|.
name|getInitialListOfServices
argument_list|(
name|serviceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceFilter
operator|!=
literal|null
condition|)
block|{
name|services
operator|=
name|serviceFilter
operator|.
name|apply
argument_list|(
name|services
argument_list|)
expr_stmt|;
block|}
return|return
name|convert
argument_list|(
name|services
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUpdatedListOfServers ()
specifier|public
name|List
argument_list|<
name|RibbonServiceDefinition
argument_list|>
name|getUpdatedListOfServers
parameter_list|()
block|{
if|if
condition|(
name|serviceId
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|services
init|=
name|serviceDiscovery
operator|.
name|getUpdatedListOfServices
argument_list|(
name|serviceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceFilter
operator|!=
literal|null
condition|)
block|{
name|services
operator|=
name|serviceFilter
operator|.
name|apply
argument_list|(
name|services
argument_list|)
expr_stmt|;
block|}
return|return
name|convert
argument_list|(
name|services
argument_list|)
return|;
block|}
comment|// *************************************************************************
comment|// Helpers
comment|// *************************************************************************
DECL|method|convert (List<? extends ServiceDefinition> definitions)
specifier|private
name|List
argument_list|<
name|RibbonServiceDefinition
argument_list|>
name|convert
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|ServiceDefinition
argument_list|>
name|definitions
parameter_list|)
block|{
if|if
condition|(
name|definitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|definitions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RibbonServiceDefinition
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

