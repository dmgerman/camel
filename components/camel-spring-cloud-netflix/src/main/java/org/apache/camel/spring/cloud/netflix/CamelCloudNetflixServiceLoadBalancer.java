begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.cloud.netflix
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|netflix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|netflix
operator|.
name|loadbalancer
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceLoadBalancerFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|cloud
operator|.
name|client
operator|.
name|loadbalancer
operator|.
name|LoadBalancerClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|cloud
operator|.
name|netflix
operator|.
name|ribbon
operator|.
name|RibbonLoadBalancerClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|ConversionService
import|;
end_import

begin_class
DECL|class|CamelCloudNetflixServiceLoadBalancer
specifier|public
class|class
name|CamelCloudNetflixServiceLoadBalancer
implements|implements
name|ServiceLoadBalancer
block|{
DECL|field|client
specifier|private
specifier|final
name|LoadBalancerClient
name|client
decl_stmt|;
DECL|field|conversionServices
specifier|private
specifier|final
name|List
argument_list|<
name|ConversionService
argument_list|>
name|conversionServices
decl_stmt|;
DECL|method|CamelCloudNetflixServiceLoadBalancer (LoadBalancerClient client, List<ConversionService> conversionServices)
specifier|public
name|CamelCloudNetflixServiceLoadBalancer
parameter_list|(
name|LoadBalancerClient
name|client
parameter_list|,
name|List
argument_list|<
name|ConversionService
argument_list|>
name|conversionServices
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|conversionServices
operator|=
name|conversionServices
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (String serviceName, ServiceLoadBalancerFunction<T> function)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|process
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|ServiceLoadBalancerFunction
argument_list|<
name|T
argument_list|>
name|function
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|execute
argument_list|(
name|serviceName
argument_list|,
name|instance
lambda|->
block|{
name|ServiceDefinition
name|definition
init|=
literal|null
decl_stmt|;
comment|//
comment|// this should not be needed but there is a bug or misbehavior on
comment|// spring cloud netflix side (2.x) that prevent ribbon load balancer
comment|// to propagate metadata from i.e. consul, see:
comment|//
comment|//     https://github.com/spring-cloud/spring-cloud-consul/issues/424
comment|//
comment|// so here we do try to find a converter that is able to use the
comment|// underlying server implementation to extract meta-data and any
comment|// other thing needed by Camel.
comment|//
if|if
condition|(
name|instance
operator|instanceof
name|RibbonLoadBalancerClient
operator|.
name|RibbonServer
condition|)
block|{
name|Server
name|server
init|=
name|RibbonLoadBalancerClient
operator|.
name|RibbonServer
operator|.
name|class
operator|.
name|cast
argument_list|(
name|instance
argument_list|)
operator|.
name|getServer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conversionServices
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ConversionService
name|cs
init|=
name|conversionServices
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|canConvert
argument_list|(
name|server
operator|.
name|getClass
argument_list|()
argument_list|,
name|ServiceDefinition
operator|.
name|class
argument_list|)
condition|)
block|{
name|definition
operator|=
name|cs
operator|.
name|convert
argument_list|(
name|server
argument_list|,
name|ServiceDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|// If no conversion is possible we use the info found on service
comment|// instance given by the load balancer as it is so the result may
comment|// be incomplete
if|if
condition|(
name|definition
operator|==
literal|null
condition|)
block|{
name|definition
operator|=
operator|new
name|DefaultServiceDefinition
argument_list|(
name|instance
operator|.
name|getServiceId
argument_list|()
argument_list|,
name|instance
operator|.
name|getHost
argument_list|()
argument_list|,
name|instance
operator|.
name|getPort
argument_list|()
argument_list|,
name|instance
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|function
operator|.
name|apply
argument_list|(
name|definition
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

