begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.javaspace
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|javaspace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|ProxyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|JavaSpaceRequestReplyTest
specifier|public
class|class
name|JavaSpaceRequestReplyTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|spring
specifier|private
name|ClassPathXmlApplicationContext
name|spring
decl_stmt|;
annotation|@
name|Test
DECL|method|testJavaSpaceRequestReply ()
specifier|public
name|void
name|testJavaSpaceRequestReply
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:input"
argument_list|)
decl_stmt|;
name|ITestPojo
name|proxy
init|=
name|ProxyHelper
operator|.
name|createProxy
argument_list|(
name|endpoint
argument_list|,
name|ITestPojo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Request
name|req
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|req
operator|.
name|setPayload
argument_list|(
literal|"REQUEST "
operator|+
name|i
argument_list|)
expr_stmt|;
name|Reply
name|reply
init|=
name|proxy
operator|.
name|method
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reply
operator|.
name|getPayload
argument_list|()
operator|.
name|equals
argument_list|(
literal|"REPLY for REQUEST "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|stop
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} took {} milliseconds"
argument_list|,
name|getTestMethodName
argument_list|()
argument_list|,
name|stop
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJavaSpaceConcurrentRequestReply ()
specifier|public
name|void
name|testJavaSpaceConcurrentRequestReply
parameter_list|()
throws|throws
name|Exception
block|{
name|Vector
argument_list|<
name|FutureTask
argument_list|<
name|Reply
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|Vector
argument_list|<>
argument_list|()
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:input"
argument_list|)
decl_stmt|;
name|ExecutorService
name|es
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|Request
name|req
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|req
operator|.
name|setPayload
argument_list|(
literal|"REQUEST "
operator|+
name|i
argument_list|)
expr_stmt|;
name|ITestPojo
name|proxy
init|=
name|ProxyHelper
operator|.
name|createProxy
argument_list|(
name|endpoint
argument_list|,
name|ITestPojo
operator|.
name|class
argument_list|)
decl_stmt|;
name|FutureTask
argument_list|<
name|Reply
argument_list|>
name|task
init|=
operator|new
name|FutureTask
argument_list|<>
argument_list|(
operator|new
name|PojoCallable
argument_list|(
name|req
argument_list|,
name|proxy
argument_list|)
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|es
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FutureTask
argument_list|<
name|Reply
argument_list|>
name|futureTask
range|:
name|tasks
control|)
block|{
name|assertTrue
argument_list|(
name|futureTask
operator|.
name|get
argument_list|()
operator|.
name|getPayload
argument_list|()
operator|.
name|equals
argument_list|(
literal|"REPLY for REQUEST "
operator|+
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|stop
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} took {} milliseconds"
argument_list|,
name|getTestMethodName
argument_list|()
argument_list|,
name|stop
operator|-
name|start
argument_list|)
expr_stmt|;
name|es
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|spring
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/javaspace/spring.xml"
argument_list|)
expr_stmt|;
name|SpringCamelContext
name|ctx
init|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|spring
argument_list|)
decl_stmt|;
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:input"
argument_list|)
operator|.
name|to
argument_list|(
literal|"javaspace:jini://localhost?spaceName=mySpace"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"javaspace:jini://localhost?concurrentConsumers=10&spaceName=mySpace"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:pojo"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"javaspace:jini://localhost?concurrentConsumers=10&spaceName=mySpace"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:pojo"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"javaspace:jini://localhost?concurrentConsumers=10&spaceName=mySpace"
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:pojo"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_class
DECL|class|PojoCallable
class|class
name|PojoCallable
implements|implements
name|Callable
argument_list|<
name|Reply
argument_list|>
block|{
DECL|field|proxy
specifier|final
name|ITestPojo
name|proxy
decl_stmt|;
DECL|field|request
specifier|final
name|Request
name|request
decl_stmt|;
DECL|method|PojoCallable (Request request, ITestPojo proxy)
name|PojoCallable
parameter_list|(
name|Request
name|request
parameter_list|,
name|ITestPojo
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
block|}
DECL|method|call ()
specifier|public
name|Reply
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|proxy
operator|.
name|method
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
end_class

end_unit

