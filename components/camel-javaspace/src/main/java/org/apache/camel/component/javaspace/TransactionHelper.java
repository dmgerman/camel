begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.javaspace
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|javaspace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|RMISecurityManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|discovery
operator|.
name|LookupLocator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|entry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|lookup
operator|.
name|ServiceRegistrar
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|lookup
operator|.
name|ServiceTemplate
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|transaction
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|transaction
operator|.
name|TransactionFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|transaction
operator|.
name|server
operator|.
name|TransactionManager
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|TransactionHelper
specifier|public
class|class
name|TransactionHelper
block|{
DECL|field|me
specifier|private
specifier|static
name|TransactionHelper
name|me
decl_stmt|;
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
DECL|field|trManager
specifier|private
name|TransactionManager
name|trManager
decl_stmt|;
DECL|method|TransactionHelper (String uri)
specifier|public
name|TransactionHelper
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
DECL|method|getInstance (String uri)
specifier|public
specifier|static
name|TransactionHelper
name|getInstance
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|me
operator|==
literal|null
condition|)
block|{
name|me
operator|=
operator|new
name|TransactionHelper
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|me
return|;
block|}
comment|/**      * getJiniTransaction Returns a transaction manager proxy.      *       * @param timeout - The length of time our transaction should live before timing out.      * @return Transaction.Created      * @throws Exception can be thrown      */
DECL|method|getJiniTransaction (long timeout)
specifier|public
name|Transaction
operator|.
name|Created
name|getJiniTransaction
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|==
name|trManager
condition|)
block|{
name|trManager
operator|=
name|findTransactionManager
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|Transaction
operator|.
name|Created
name|tCreated
init|=
name|TransactionFactory
operator|.
name|create
argument_list|(
name|trManager
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
return|return
name|tCreated
return|;
block|}
DECL|method|findTransactionManager (String uri)
specifier|private
name|TransactionManager
name|findTransactionManager
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
if|if
condition|(
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|RMISecurityManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Creating service template to find transaction manager service by matching fields.
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|net
operator|.
name|jini
operator|.
name|core
operator|.
name|transaction
operator|.
name|server
operator|.
name|TransactionManager
operator|.
name|class
block|}
empty_stmt|;
comment|// Name sn = new Name("*");
name|ServiceTemplate
name|tmpl
init|=
operator|new
name|ServiceTemplate
argument_list|(
literal|null
argument_list|,
name|classes
argument_list|,
operator|new
name|Entry
index|[]
block|{}
argument_list|)
decl_stmt|;
comment|// Creating a lookup locator
name|LookupLocator
name|locator
init|=
operator|new
name|LookupLocator
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|ServiceRegistrar
name|sr
init|=
name|locator
operator|.
name|getRegistrar
argument_list|()
decl_stmt|;
name|TransactionManager
name|tm
init|=
operator|(
name|TransactionManager
operator|)
name|sr
operator|.
name|lookup
argument_list|(
name|tmpl
argument_list|)
decl_stmt|;
return|return
name|tm
return|;
block|}
block|}
end_class

end_unit

