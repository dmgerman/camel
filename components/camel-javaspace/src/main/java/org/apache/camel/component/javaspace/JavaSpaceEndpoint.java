begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.javaspace
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|javaspace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * Sending and receiving messages through JavaSpace.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"javaspace"
argument_list|,
name|title
operator|=
literal|"JavaSpace"
argument_list|,
name|syntax
operator|=
literal|"javaspace:url"
argument_list|,
name|consumerClass
operator|=
name|JavaSpaceConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"messaging"
argument_list|)
DECL|class|JavaSpaceEndpoint
specifier|public
class|class
name|JavaSpaceEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|url
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|spaceName
specifier|private
name|String
name|spaceName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|)
DECL|field|concurrentConsumers
specifier|private
name|int
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"take"
argument_list|,
name|enums
operator|=
literal|"take,read"
argument_list|)
DECL|field|verb
specifier|private
name|String
name|verb
init|=
literal|"take"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|templateId
specifier|private
name|String
name|templateId
decl_stmt|;
annotation|@
name|UriParam
DECL|field|transactional
specifier|private
name|boolean
name|transactional
decl_stmt|;
annotation|@
name|UriParam
DECL|field|transactionTimeout
specifier|private
name|long
name|transactionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|JavaSpaceEndpoint (String endpointUri, String remaining, JavaSpaceComponent component)
specifier|public
name|JavaSpaceEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|JavaSpaceComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|remaining
expr_stmt|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|JavaSpaceConsumer
name|answer
init|=
operator|new
name|JavaSpaceConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|JavaSpaceProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getVerb ()
specifier|public
name|String
name|getVerb
parameter_list|()
block|{
return|return
name|verb
return|;
block|}
comment|/**      * Specifies the verb for getting JavaSpace entries.      */
DECL|method|setVerb (String verb)
specifier|public
name|void
name|setVerb
parameter_list|(
name|String
name|verb
parameter_list|)
block|{
name|this
operator|.
name|verb
operator|=
name|verb
expr_stmt|;
block|}
DECL|method|isTransactional ()
specifier|public
name|boolean
name|isTransactional
parameter_list|()
block|{
return|return
name|transactional
return|;
block|}
comment|/**      * If true, sending and receiving entries is performed within a transaction.      */
DECL|method|setTransactional (boolean transactional)
specifier|public
name|void
name|setTransactional
parameter_list|(
name|boolean
name|transactional
parameter_list|)
block|{
name|this
operator|.
name|transactional
operator|=
name|transactional
expr_stmt|;
block|}
comment|/**      * The URL to the JavaSpace server      */
DECL|method|getUrl ()
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
comment|/**      * Specifies the number of concurrent consumers getting entries from the JavaSpace.      */
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
DECL|method|getSpaceName ()
specifier|public
name|String
name|getSpaceName
parameter_list|()
block|{
return|return
name|spaceName
return|;
block|}
comment|/**      * Specifies the JavaSpace name.      */
DECL|method|setSpaceName (String spaceName)
specifier|public
name|void
name|setSpaceName
parameter_list|(
name|String
name|spaceName
parameter_list|)
block|{
name|this
operator|.
name|spaceName
operator|=
name|spaceName
expr_stmt|;
block|}
DECL|method|getTemplateId ()
specifier|public
name|String
name|getTemplateId
parameter_list|()
block|{
return|return
name|templateId
return|;
block|}
comment|/**      * If present, this option specifies the Spring bean ID of the template to use for reading/taking entries.      */
DECL|method|setTemplateId (String templateId)
specifier|public
name|void
name|setTemplateId
parameter_list|(
name|String
name|templateId
parameter_list|)
block|{
name|this
operator|.
name|templateId
operator|=
name|templateId
expr_stmt|;
block|}
DECL|method|getTransactionTimeout ()
specifier|public
name|long
name|getTransactionTimeout
parameter_list|()
block|{
return|return
name|transactionTimeout
return|;
block|}
comment|/**      * Specifies the transaction timeout in millis. By default there is no timeout.      */
DECL|method|setTransactionTimeout (long transactionTimeout)
specifier|public
name|void
name|setTransactionTimeout
parameter_list|(
name|long
name|transactionTimeout
parameter_list|)
block|{
name|this
operator|.
name|transactionTimeout
operator|=
name|transactionTimeout
expr_stmt|;
block|}
block|}
end_class

end_unit

