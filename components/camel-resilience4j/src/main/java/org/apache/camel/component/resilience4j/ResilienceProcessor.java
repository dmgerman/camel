begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.resilience4j
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|resilience4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|io
operator|.
name|github
operator|.
name|resilience4j
operator|.
name|bulkhead
operator|.
name|Bulkhead
import|;
end_import

begin_import
import|import
name|io
operator|.
name|github
operator|.
name|resilience4j
operator|.
name|bulkhead
operator|.
name|BulkheadConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|github
operator|.
name|resilience4j
operator|.
name|circuitbreaker
operator|.
name|CallNotPermittedException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|github
operator|.
name|resilience4j
operator|.
name|circuitbreaker
operator|.
name|CircuitBreaker
import|;
end_import

begin_import
import|import
name|io
operator|.
name|github
operator|.
name|resilience4j
operator|.
name|circuitbreaker
operator|.
name|CircuitBreakerConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|github
operator|.
name|resilience4j
operator|.
name|timelimiter
operator|.
name|TimeLimiter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|github
operator|.
name|resilience4j
operator|.
name|timelimiter
operator|.
name|TimeLimiterConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|vavr
operator|.
name|control
operator|.
name|Try
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Navigate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CircuitBreakerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|AsyncProcessorSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of Circuit Breaker EIP using resilience4j.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed Resilience Processor"
argument_list|)
DECL|class|ResilienceProcessor
specifier|public
class|class
name|ResilienceProcessor
extends|extends
name|AsyncProcessorSupport
implements|implements
name|CamelContextAware
implements|,
name|Navigate
argument_list|<
name|Processor
argument_list|>
implements|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Traceable
implements|,
name|IdAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResilienceProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|circuitBreaker
specifier|private
specifier|volatile
name|CircuitBreaker
name|circuitBreaker
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|circuitBreakerConfig
specifier|private
specifier|final
name|CircuitBreakerConfig
name|circuitBreakerConfig
decl_stmt|;
DECL|field|bulkheadConfig
specifier|private
specifier|final
name|BulkheadConfig
name|bulkheadConfig
decl_stmt|;
DECL|field|timeLimiterConfig
specifier|private
specifier|final
name|TimeLimiterConfig
name|timeLimiterConfig
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|fallback
specifier|private
specifier|final
name|Processor
name|fallback
decl_stmt|;
DECL|field|shutdownExecutorService
specifier|private
name|boolean
name|shutdownExecutorService
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|method|ResilienceProcessor (CircuitBreakerConfig circuitBreakerConfig, BulkheadConfig bulkheadConfig, TimeLimiterConfig timeLimiterConfig, Processor processor, Processor fallback)
specifier|public
name|ResilienceProcessor
parameter_list|(
name|CircuitBreakerConfig
name|circuitBreakerConfig
parameter_list|,
name|BulkheadConfig
name|bulkheadConfig
parameter_list|,
name|TimeLimiterConfig
name|timeLimiterConfig
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Processor
name|fallback
parameter_list|)
block|{
name|this
operator|.
name|circuitBreakerConfig
operator|=
name|circuitBreakerConfig
expr_stmt|;
name|this
operator|.
name|bulkheadConfig
operator|=
name|bulkheadConfig
expr_stmt|;
name|this
operator|.
name|timeLimiterConfig
operator|=
name|timeLimiterConfig
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|fallback
operator|=
name|fallback
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|setId (String id)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getCircuitBreaker ()
specifier|public
name|CircuitBreaker
name|getCircuitBreaker
parameter_list|()
block|{
return|return
name|circuitBreaker
return|;
block|}
DECL|method|setCircuitBreaker (CircuitBreaker circuitBreaker)
specifier|public
name|void
name|setCircuitBreaker
parameter_list|(
name|CircuitBreaker
name|circuitBreaker
parameter_list|)
block|{
name|this
operator|.
name|circuitBreaker
operator|=
name|circuitBreaker
expr_stmt|;
block|}
DECL|method|isShutdownExecutorService ()
specifier|public
name|boolean
name|isShutdownExecutorService
parameter_list|()
block|{
return|return
name|shutdownExecutorService
return|;
block|}
DECL|method|setShutdownExecutorService (boolean shutdownExecutorService)
specifier|public
name|void
name|setShutdownExecutorService
parameter_list|(
name|boolean
name|shutdownExecutorService
parameter_list|)
block|{
name|this
operator|.
name|shutdownExecutorService
operator|=
name|shutdownExecutorService
expr_stmt|;
block|}
DECL|method|getExecutorService ()
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
DECL|method|setExecutorService (ExecutorService executorService)
specifier|public
name|void
name|setExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTraceLabel ()
specifier|public
name|String
name|getTraceLabel
parameter_list|()
block|{
return|return
literal|"resilience4j"
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current failure rate in percentage."
argument_list|)
DECL|method|getFailureRate ()
specifier|public
name|float
name|getFailureRate
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFailureRate
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current percentage of calls which were slower than a certain threshold."
argument_list|)
DECL|method|getSlowCallRate ()
specifier|public
name|float
name|getSlowCallRate
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSlowCallRate
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current total number of calls which were slower than a certain threshold."
argument_list|)
DECL|method|getNumberOfSlowCalls ()
specifier|public
name|int
name|getNumberOfSlowCalls
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumberOfSlowCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current number of successful calls which were slower than a certain threshold."
argument_list|)
DECL|method|getNumberOfSlowSuccessfulCalls ()
specifier|public
name|int
name|getNumberOfSlowSuccessfulCalls
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumberOfSlowCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current number of failed calls which were slower than a certain threshold."
argument_list|)
DECL|method|getNumberOfSlowFailedCalls ()
specifier|public
name|int
name|getNumberOfSlowFailedCalls
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumberOfSlowFailedCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current total number of buffered calls in the ring buffer."
argument_list|)
DECL|method|getNumberOfBufferedCalls ()
specifier|public
name|int
name|getNumberOfBufferedCalls
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumberOfBufferedCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current number of failed buffered calls in the ring buffer."
argument_list|)
DECL|method|getNumberOfFailedCalls ()
specifier|public
name|int
name|getNumberOfFailedCalls
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumberOfFailedCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current number of successful buffered calls in the ring buffer"
argument_list|)
DECL|method|getNumberOfSuccessfulCalls ()
specifier|public
name|int
name|getNumberOfSuccessfulCalls
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumberOfSuccessfulCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current number of not permitted calls, when the state is OPEN."
argument_list|)
DECL|method|getNumberOfNotPermittedCalls ()
specifier|public
name|long
name|getNumberOfNotPermittedCalls
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumberOfNotPermittedCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Returns the current state of the circuit breaker"
argument_list|)
DECL|method|getCircuitBreakerState ()
specifier|public
name|String
name|getCircuitBreakerState
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
return|return
name|circuitBreaker
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Transitions the circuit breaker to CLOSED state."
argument_list|)
DECL|method|transitionToCloseState ()
specifier|public
name|void
name|transitionToCloseState
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
name|circuitBreaker
operator|.
name|transitionToClosedState
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Transitions the circuit breaker to OPEN state."
argument_list|)
DECL|method|transitionToOpenState ()
specifier|public
name|void
name|transitionToOpenState
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
name|circuitBreaker
operator|.
name|transitionToOpenState
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Transitions the circuit breaker to HALF_OPEN state."
argument_list|)
DECL|method|transitionToHalfOpenState ()
specifier|public
name|void
name|transitionToHalfOpenState
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
name|circuitBreaker
operator|.
name|transitionToHalfOpenState
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Transitions the state machine to a FORCED_OPEN state, stopping state transition, metrics and event publishing."
argument_list|)
DECL|method|transitionToForcedOpenState ()
specifier|public
name|void
name|transitionToForcedOpenState
parameter_list|()
block|{
if|if
condition|(
name|circuitBreaker
operator|!=
literal|null
condition|)
block|{
name|circuitBreaker
operator|.
name|transitionToForcedOpenState
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCircuitBreakerFailureRateThreshold ()
specifier|public
name|float
name|getCircuitBreakerFailureRateThreshold
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|getFailureRateThreshold
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCircuitBreakerSlowCallRateThreshold ()
specifier|public
name|float
name|getCircuitBreakerSlowCallRateThreshold
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|getSlowCallRateThreshold
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCircuitBreakerMinimumNumberOfCalls ()
specifier|public
name|int
name|getCircuitBreakerMinimumNumberOfCalls
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|getMinimumNumberOfCalls
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCircuitBreakerPermittedNumberOfCallsInHalfOpenState ()
specifier|public
name|int
name|getCircuitBreakerPermittedNumberOfCallsInHalfOpenState
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|getPermittedNumberOfCallsInHalfOpenState
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCircuitBreakerSlidingWindowSize ()
specifier|public
name|int
name|getCircuitBreakerSlidingWindowSize
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|getSlidingWindowSize
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCircuitBreakerSlidingWindowType ()
specifier|public
name|String
name|getCircuitBreakerSlidingWindowType
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|getSlidingWindowType
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCircuitBreakerWaitDurationInOpenState ()
specifier|public
name|long
name|getCircuitBreakerWaitDurationInOpenState
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|getWaitDurationInOpenState
argument_list|()
operator|.
name|getSeconds
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isCircuitBreakerTransitionFromOpenToHalfOpenEnabled ()
specifier|public
name|boolean
name|isCircuitBreakerTransitionFromOpenToHalfOpenEnabled
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|isAutomaticTransitionFromOpenToHalfOpenEnabled
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isCircuitBreakerWritableStackTraceEnabled ()
specifier|public
name|boolean
name|isCircuitBreakerWritableStackTraceEnabled
parameter_list|()
block|{
return|return
name|circuitBreakerConfig
operator|.
name|isWritableStackTraceEnabled
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isBulkheadEnabled ()
specifier|public
name|boolean
name|isBulkheadEnabled
parameter_list|()
block|{
return|return
name|bulkheadConfig
operator|!=
literal|null
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getBulkheadMaxConcurrentCalls ()
specifier|public
name|int
name|getBulkheadMaxConcurrentCalls
parameter_list|()
block|{
if|if
condition|(
name|bulkheadConfig
operator|!=
literal|null
condition|)
block|{
return|return
name|bulkheadConfig
operator|.
name|getMaxConcurrentCalls
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|()
DECL|method|getBulkheadMaxWaitDuration ()
specifier|public
name|long
name|getBulkheadMaxWaitDuration
parameter_list|()
block|{
if|if
condition|(
name|bulkheadConfig
operator|!=
literal|null
condition|)
block|{
return|return
name|bulkheadConfig
operator|.
name|getMaxWaitDuration
argument_list|()
operator|.
name|toMillis
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|ManagedAttribute
DECL|method|isTimeoutEnabled ()
specifier|public
name|boolean
name|isTimeoutEnabled
parameter_list|()
block|{
return|return
name|timeLimiterConfig
operator|!=
literal|null
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getTimeoutDuration ()
specifier|public
name|long
name|getTimeoutDuration
parameter_list|()
block|{
if|if
condition|(
name|timeLimiterConfig
operator|!=
literal|null
condition|)
block|{
return|return
name|timeLimiterConfig
operator|.
name|getTimeoutDuration
argument_list|()
operator|.
name|toMillis
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|List
argument_list|<
name|Processor
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Processor
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|processor
argument_list|)
expr_stmt|;
if|if
condition|(
name|fallback
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|fallback
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// run this as if we run inside try .. catch so there is no regular
comment|// Camel error handler
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TRY_ROUTE_BLOCK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Callable
argument_list|<
name|Exchange
argument_list|>
name|task
init|=
name|CircuitBreaker
operator|.
name|decorateCallable
argument_list|(
name|circuitBreaker
argument_list|,
operator|new
name|CircuitBreakerTask
argument_list|(
name|processor
argument_list|,
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|Throwable
argument_list|,
name|Exchange
argument_list|>
name|fallbackTask
init|=
operator|new
name|CircuitBreakerFallbackTask
argument_list|(
name|fallback
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|bulkheadConfig
operator|!=
literal|null
condition|)
block|{
name|Bulkhead
name|bh
init|=
name|Bulkhead
operator|.
name|of
argument_list|(
name|id
argument_list|,
name|bulkheadConfig
argument_list|)
decl_stmt|;
name|task
operator|=
name|Bulkhead
operator|.
name|decorateCallable
argument_list|(
name|bh
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeLimiterConfig
operator|!=
literal|null
condition|)
block|{
comment|// timeout handling is more complex with thread-pools
specifier|final
name|CircuitBreakerTimeoutTask
name|timeoutTask
init|=
operator|new
name|CircuitBreakerTimeoutTask
argument_list|(
name|task
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Supplier
argument_list|<
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
argument_list|>
name|futureSupplier
decl_stmt|;
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|futureSupplier
operator|=
parameter_list|()
lambda|->
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
name|timeoutTask
operator|::
name|get
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|futureSupplier
operator|=
parameter_list|()
lambda|->
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
name|timeoutTask
operator|::
name|get
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
block|}
name|TimeLimiter
name|tl
init|=
name|TimeLimiter
operator|.
name|of
argument_list|(
name|id
argument_list|,
name|timeLimiterConfig
argument_list|)
decl_stmt|;
name|task
operator|=
name|TimeLimiter
operator|.
name|decorateFutureSupplier
argument_list|(
name|tl
argument_list|,
name|futureSupplier
argument_list|)
expr_stmt|;
block|}
name|Try
operator|.
name|ofCallable
argument_list|(
name|task
argument_list|)
operator|.
name|recover
argument_list|(
name|fallbackTask
argument_list|)
operator|.
name|andFinally
argument_list|(
parameter_list|()
lambda|->
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|circuitBreaker
operator|==
literal|null
condition|)
block|{
name|circuitBreaker
operator|=
name|CircuitBreaker
operator|.
name|of
argument_list|(
name|id
argument_list|,
name|circuitBreakerConfig
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|shutdownExecutorService
operator|&&
name|executorService
operator|!=
literal|null
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CircuitBreakerTask
specifier|private
specifier|static
specifier|final
class|class
name|CircuitBreakerTask
implements|implements
name|Callable
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|method|CircuitBreakerTask (Processor processor, Exchange exchange)
specifier|private
name|CircuitBreakerTask
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Exchange
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running processor: {} with exchange: {}"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// prepare a copy of exchange so downstream processors don't
comment|// cause side-effects if they mutate the exchange
comment|// in case timeout processing and continue with the fallback etc
name|Exchange
name|copy
init|=
name|ExchangeHelper
operator|.
name|createCorrelatedCopy
argument_list|(
name|exchange
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// process the processor until its fully done
name|processor
operator|.
name|process
argument_list|(
name|copy
argument_list|)
expr_stmt|;
if|if
condition|(
name|copy
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|copy
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// copy the result as its regarded as success
name|ExchangeHelper
operator|.
name|copyResults
argument_list|(
name|exchange
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SUCCESSFUL_EXECUTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_FROM_FALLBACK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// throw exception so resilient4j know it was a failure
throw|throw
name|RuntimeExchangeException
operator|.
name|wrapRuntimeException
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|exchange
return|;
block|}
block|}
DECL|class|CircuitBreakerFallbackTask
specifier|private
specifier|static
specifier|final
class|class
name|CircuitBreakerFallbackTask
implements|implements
name|Function
argument_list|<
name|Throwable
argument_list|,
name|Exchange
argument_list|>
block|{
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|method|CircuitBreakerFallbackTask (Processor processor, Exchange exchange)
specifier|private
name|CircuitBreakerFallbackTask
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (Throwable throwable)
specifier|public
name|Exchange
name|apply
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|throwable
operator|instanceof
name|TimeoutException
condition|)
block|{
comment|// the circuit breaker triggered a timeout (and there is no
comment|// fallback) so lets mark the exchange as failed
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SUCCESSFUL_EXECUTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_FROM_FALLBACK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SHORT_CIRCUITED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_TIMED_OUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|CallNotPermittedException
condition|)
block|{
comment|// the circuit breaker triggered a call rejected
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SUCCESSFUL_EXECUTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_FROM_FALLBACK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SHORT_CIRCUITED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_REJECTED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
else|else
block|{
comment|// throw exception so resilient4j know it was a failure
throw|throw
name|RuntimeExchangeException
operator|.
name|wrapRuntimeException
argument_list|(
name|throwable
argument_list|)
throw|;
block|}
block|}
comment|// fallback route is handling the exception so its short-circuited
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SUCCESSFUL_EXECUTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_FROM_FALLBACK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CircuitBreakerConstants
operator|.
name|RESPONSE_SHORT_CIRCUITED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// store the last to endpoint as the failure endpoint
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ENDPOINT
argument_list|)
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|FAILURE_ENDPOINT
argument_list|,
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// give the rest of the pipeline another chance
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_HANDLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|ROUTE_STOP
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// and we should not be regarded as exhausted as we are in a try ..
comment|// catch block
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|REDELIVERY_EXHAUSTED
argument_list|)
expr_stmt|;
comment|// run the fallback processor
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running fallback: {} with exchange: {}"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// process the fallback until its fully done
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running fallback: {} with exchange: {} done"
argument_list|,
name|processor
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
block|}
DECL|class|CircuitBreakerTimeoutTask
specifier|private
specifier|static
specifier|final
class|class
name|CircuitBreakerTimeoutTask
implements|implements
name|Supplier
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|future
specifier|private
specifier|final
name|Callable
argument_list|<
name|Exchange
argument_list|>
name|future
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|method|CircuitBreakerTimeoutTask (Callable<Exchange> future, Exchange exchange)
specifier|private
name|CircuitBreakerTimeoutTask
parameter_list|(
name|Callable
argument_list|<
name|Exchange
argument_list|>
name|future
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|Exchange
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|future
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
block|}
block|}
end_class

end_unit

