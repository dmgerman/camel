begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.xpath
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|xpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|language
operator|.
name|DefaultAnnotationExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|language
operator|.
name|LanguageAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|language
operator|.
name|NamespacePrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Factory for the XPath expression annotations.  */
end_comment

begin_class
DECL|class|XPathAnnotationExpressionFactory
specifier|public
class|class
name|XPathAnnotationExpressionFactory
extends|extends
name|DefaultAnnotationExpressionFactory
block|{
annotation|@
name|Override
DECL|method|createExpression (CamelContext camelContext, Annotation annotation, LanguageAnnotation languageAnnotation, Class<?> expressionReturnType)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Annotation
name|annotation
parameter_list|,
name|LanguageAnnotation
name|languageAnnotation
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expressionReturnType
parameter_list|)
block|{
name|String
name|xpath
init|=
name|getExpressionFromAnnotation
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|resultType
init|=
name|getResultType
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultType
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
name|resultType
operator|=
name|expressionReturnType
expr_stmt|;
block|}
name|XPathBuilder
name|builder
init|=
name|XPathBuilder
operator|.
name|xpath
argument_list|(
name|xpath
argument_list|,
name|resultType
argument_list|)
decl_stmt|;
name|NamespacePrefix
index|[]
name|namespaces
init|=
name|getExpressionNameSpacePrefix
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NamespacePrefix
name|namespacePrefix
range|:
name|namespaces
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|namespace
argument_list|(
name|namespacePrefix
operator|.
name|prefix
argument_list|()
argument_list|,
name|namespacePrefix
operator|.
name|uri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set the header name that we want the XPathBuilder to apply the XPath expression to
name|String
name|headerName
init|=
name|getHeaderName
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setHeaderName
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|getResultType (Annotation annotation)
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getResultType
parameter_list|(
name|Annotation
name|annotation
parameter_list|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|getAnnotationObjectValue
argument_list|(
name|annotation
argument_list|,
literal|"resultType"
argument_list|)
return|;
block|}
DECL|method|getExpressionNameSpacePrefix (Annotation annotation)
specifier|protected
name|NamespacePrefix
index|[]
name|getExpressionNameSpacePrefix
parameter_list|(
name|Annotation
name|annotation
parameter_list|)
block|{
return|return
operator|(
name|NamespacePrefix
index|[]
operator|)
name|getAnnotationObjectValue
argument_list|(
name|annotation
argument_list|,
literal|"namespaces"
argument_list|)
return|;
block|}
comment|/**      * Extracts the value of the header method in the Annotation. For backwards      * compatibility this method will return null if the annotation's method is      * not found.      *       * @return If the annotation has the method 'header' then the name of the      *         header we want to apply the XPath expression to. Otherwise null      *         will be returned      */
DECL|method|getHeaderName (Annotation annotation)
specifier|protected
name|String
name|getHeaderName
parameter_list|(
name|Annotation
name|annotation
parameter_list|)
block|{
name|String
name|headerValue
init|=
literal|null
decl_stmt|;
try|try
block|{
name|headerValue
operator|=
operator|(
name|String
operator|)
name|getAnnotationObjectValue
argument_list|(
name|annotation
argument_list|,
literal|"headerName"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do Nothing
block|}
return|return
name|headerValue
return|;
block|}
block|}
end_class

end_unit

