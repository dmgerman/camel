begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.docker
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|DockerClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|model
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|BooleanUtils
import|;
end_import

begin_comment
comment|/**  * Utility methods for Docker Component  */
end_comment

begin_class
DECL|class|DockerHelper
specifier|public
class|class
name|DockerHelper
block|{
DECL|field|STRING_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|STRING_DELIMITER
init|=
literal|";"
decl_stmt|;
comment|/**      * Validates the URI parameters for a given {@link DockerOperation}      *       * @param dockerOperation      * @param parameters      */
DECL|method|validateParameters (DockerOperation dockerOperation, Map<String,Object> parameters)
specifier|public
specifier|static
name|void
name|validateParameters
parameter_list|(
name|DockerOperation
name|dockerOperation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|validParamMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|validParamMap
operator|.
name|putAll
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_DEFAULT_PARAMETERS
argument_list|)
expr_stmt|;
name|validParamMap
operator|.
name|putAll
argument_list|(
name|dockerOperation
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|parameters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|transformedKey
init|=
name|DockerHelper
operator|.
name|transformToHeaderName
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Validate URI parameter name
if|if
condition|(
operator|!
name|validParamMap
operator|.
name|containsKey
argument_list|(
name|transformedKey
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DockerClientException
argument_list|(
name|key
operator|+
literal|" is not a valid URI parameter"
argument_list|)
throw|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterClass
init|=
name|validParamMap
operator|.
name|get
argument_list|(
name|transformedKey
argument_list|)
decl_stmt|;
name|Object
name|parameterValue
init|=
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameterClass
operator|==
literal|null
operator|||
name|parameterValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DockerClientException
argument_list|(
literal|"Failed to validate parameter type for property "
operator|+
name|key
argument_list|)
throw|;
block|}
if|if
condition|(
name|Integer
operator|.
name|class
operator|==
name|parameterClass
condition|)
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|parameterValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|class
operator|==
name|parameterClass
condition|)
block|{
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
operator|(
name|String
operator|)
name|parameterValue
argument_list|,
literal|"true"
argument_list|,
literal|"false"
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DockerClientException
argument_list|(
literal|"Failed to validate parameter type for property "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Transforms a Docker Component header value to its' analogous URI parameter      * @param name      * @return      */
DECL|method|transformFromHeaderName (String name)
specifier|public
specifier|static
name|String
name|transformFromHeaderName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|StringBuilder
name|formattedName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|nameSubstring
init|=
name|name
operator|.
name|substring
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameSubstring
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|formattedName
operator|.
name|append
argument_list|(
name|nameSubstring
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|formattedName
operator|.
name|append
argument_list|(
name|nameSubstring
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|formattedName
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Transforms a Docker Component URI parameter to its' analogous header value      * @param name      * @return      */
DECL|method|transformToHeaderName (String name)
specifier|public
specifier|static
name|String
name|transformToHeaderName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|StringBuilder
name|formattedName
init|=
operator|new
name|StringBuilder
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_PREFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|formattedName
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|formattedName
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|formattedName
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Attempts to locate a given property name within a URI parameter or the message header.       * A found value in a message header takes precedence over a URI parameter.      *       * @param name      * @param configuration      * @param message      * @param clazz      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getProperty (String name, DockerConfiguration configuration, Message message, Class<T> clazz)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|DockerConfiguration
name|configuration
parameter_list|,
name|Message
name|message
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
comment|// First attempt to locate property from Message Header, then fallback to Endpoint property
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|T
name|headerProperty
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerProperty
operator|!=
literal|null
condition|)
block|{
return|return
name|headerProperty
return|;
block|}
block|}
name|Object
name|prop
init|=
name|configuration
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|transformFromHeaderName
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prop
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|prop
return|;
block|}
elseif|else
if|if
condition|(
name|Integer
operator|.
name|class
operator|==
name|clazz
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|prop
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|class
operator|==
name|clazz
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
operator|(
name|String
operator|)
name|prop
argument_list|,
literal|"true"
argument_list|,
literal|"false"
argument_list|,
literal|"null"
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Attempts to locate a given property which is an array by name within a URI parameter or the message header.       * A found value in a message header takes precedence over a URI parameter.      *       * @param name      * @param message      * @param clazz      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getArrayProperty (String name, Message message, Class<T> clazz)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|getArrayProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Message
name|message
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|Object
name|header
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|header
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|T
index|[]
name|headerArray
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|headerArray
index|[
literal|0
index|]
operator|=
operator|(
name|T
operator|)
name|header
expr_stmt|;
return|return
name|headerArray
return|;
block|}
if|if
condition|(
name|header
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
if|if
condition|(
name|header
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
index|[]
operator|)
name|header
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getAuthConfig (DockerConfiguration configuration, Message message)
specifier|public
specifier|static
name|AuthConfig
name|getAuthConfig
parameter_list|(
name|DockerConfiguration
name|configuration
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|String
name|username
init|=
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_USERNAME
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_PASSWORD
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|username
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|password
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|String
name|email
init|=
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_EMAIL
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|serverAddress
init|=
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_SERVER_ADDRESS
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|AuthConfig
name|authConfig
init|=
operator|new
name|AuthConfig
argument_list|()
decl_stmt|;
name|authConfig
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|authConfig
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|authConfig
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|authConfig
operator|.
name|setServerAddress
argument_list|(
name|serverAddress
argument_list|)
expr_stmt|;
return|return
name|authConfig
return|;
block|}
DECL|method|parseDelimitedStringHeader (String headerName, Message message)
specifier|public
specifier|static
name|String
index|[]
name|parseDelimitedStringHeader
parameter_list|(
name|String
name|headerName
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|Object
name|header
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|header
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|header
operator|)
operator|.
name|split
argument_list|(
name|STRING_DELIMITER
argument_list|)
return|;
block|}
if|if
condition|(
name|header
operator|instanceof
name|String
index|[]
condition|)
block|{
return|return
operator|(
operator|(
name|String
index|[]
operator|)
name|header
operator|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

