begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.docker.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|DockerClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|command
operator|.
name|AttachContainerCmd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|command
operator|.
name|BuildImageCmd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|command
operator|.
name|ExecStartCmd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|command
operator|.
name|LogContainerCmd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|command
operator|.
name|PullImageCmd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|command
operator|.
name|PushImageCmd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|command
operator|.
name|WaitContainerCmd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|model
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|model
operator|.
name|BuildResponseItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|model
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|model
operator|.
name|PullResponseItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|model
operator|.
name|PushResponseItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|api
operator|.
name|model
operator|.
name|WaitResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|core
operator|.
name|command
operator|.
name|AttachContainerResultCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|core
operator|.
name|command
operator|.
name|BuildImageResultCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|core
operator|.
name|command
operator|.
name|ExecStartResultCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|core
operator|.
name|command
operator|.
name|LogContainerResultCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|core
operator|.
name|command
operator|.
name|PullImageResultCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|core
operator|.
name|command
operator|.
name|PushImageResultCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|dockerjava
operator|.
name|core
operator|.
name|command
operator|.
name|WaitContainerResultCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|DockerClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|DockerComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|DockerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|DockerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|DockerEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|DockerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|DockerOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|docker
operator|.
name|exception
operator|.
name|DockerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Docker producer.  */
end_comment

begin_class
DECL|class|AsyncDockerProducer
specifier|public
class|class
name|AsyncDockerProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncDockerProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
name|DockerConfiguration
name|configuration
decl_stmt|;
DECL|field|component
specifier|private
name|DockerComponent
name|component
decl_stmt|;
DECL|method|AsyncDockerProducer (DockerEndpoint endpoint)
specifier|public
name|AsyncDockerProducer
parameter_list|(
name|DockerEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|component
operator|=
operator|(
name|DockerComponent
operator|)
name|endpoint
operator|.
name|getComponent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|DockerClient
name|client
init|=
name|DockerClientFactory
operator|.
name|getDockerClient
argument_list|(
name|component
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|DockerOperation
name|operation
init|=
name|configuration
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operation
condition|)
block|{
comment|/** Images **/
case|case
name|BUILD_IMAGE
case|:
comment|// result contain an image id value
name|result
operator|=
name|executeBuildImageRequest
argument_list|(
name|client
argument_list|,
name|message
argument_list|)
operator|.
name|exec
argument_list|(
operator|new
name|BuildImageResultCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|BuildResponseItem
name|item
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"build image callback {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|super
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|String
name|imageId
init|=
operator|(
operator|(
name|BuildImageResultCallback
operator|)
name|result
operator|)
operator|.
name|awaitImageId
argument_list|()
decl_stmt|;
operator|(
operator|(
name|BuildImageResultCallback
operator|)
name|result
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|=
name|imageId
expr_stmt|;
block|}
break|break;
case|case
name|PULL_IMAGE
case|:
name|result
operator|=
name|executePullImageRequest
argument_list|(
name|client
argument_list|,
name|message
argument_list|)
operator|.
name|exec
argument_list|(
operator|new
name|PullImageResultCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|PullResponseItem
name|item
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"pull image callback {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|super
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|PullImageResultCallback
operator|)
name|result
operator|)
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
operator|(
operator|(
name|PullImageResultCallback
operator|)
name|result
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|PUSH_IMAGE
case|:
name|result
operator|=
name|executePushImageRequest
argument_list|(
name|client
argument_list|,
name|message
argument_list|)
operator|.
name|exec
argument_list|(
operator|new
name|PushImageResultCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|PushResponseItem
name|item
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"push image callback {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|super
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|PushImageResultCallback
operator|)
name|result
operator|)
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
operator|(
operator|(
name|PushImageResultCallback
operator|)
name|result
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
comment|/** Containers **/
case|case
name|ATTACH_CONTAINER
case|:
name|result
operator|=
name|executeAttachContainerRequest
argument_list|(
name|client
argument_list|,
name|message
argument_list|)
operator|.
name|exec
argument_list|(
operator|new
name|AttachContainerResultCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Frame
name|item
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"attach container callback {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|super
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|AttachContainerResultCallback
operator|)
name|result
operator|)
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
operator|(
operator|(
name|AttachContainerResultCallback
operator|)
name|result
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|LOG_CONTAINER
case|:
name|result
operator|=
name|executeLogContainerRequest
argument_list|(
name|client
argument_list|,
name|message
argument_list|)
operator|.
name|exec
argument_list|(
operator|new
name|LogContainerResultCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Frame
name|item
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"log container callback {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|super
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|LogContainerResultCallback
operator|)
name|result
operator|)
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
operator|(
operator|(
name|LogContainerResultCallback
operator|)
name|result
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|WAIT_CONTAINER
case|:
comment|// result contain a status code value
name|result
operator|=
name|executeWaitContainerRequest
argument_list|(
name|client
argument_list|,
name|message
argument_list|)
operator|.
name|exec
argument_list|(
operator|new
name|WaitContainerResultCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|WaitResponse
name|item
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"wait contanier callback {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|super
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|Integer
name|statusCode
init|=
operator|(
operator|(
name|WaitContainerResultCallback
operator|)
name|result
operator|)
operator|.
name|awaitStatusCode
argument_list|()
decl_stmt|;
operator|(
operator|(
name|WaitContainerResultCallback
operator|)
name|result
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|=
name|statusCode
expr_stmt|;
block|}
break|break;
case|case
name|EXEC_START
case|:
name|result
operator|=
name|executeExecStartRequest
argument_list|(
name|client
argument_list|,
name|message
argument_list|)
operator|.
name|exec
argument_list|(
operator|new
name|ExecStartResultCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Frame
name|item
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"exec start callback {}"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|super
operator|.
name|onNext
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|ExecStartResultCallback
operator|)
name|result
operator|)
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ExecStartResultCallback
operator|)
name|result
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|DockerException
argument_list|(
literal|"Invalid operation: "
operator|+
name|operation
argument_list|)
throw|;
block|}
comment|// If request included a response, set as body
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DockerException
decl||
name|InterruptedException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * Produces a build image request      *      * @param client      * @param message      * @return      * @throws DockerException      */
DECL|method|executeBuildImageRequest (DockerClient client, Message message)
specifier|private
name|BuildImageCmd
name|executeBuildImageRequest
parameter_list|(
name|DockerClient
name|client
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|DockerException
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing Docker Build Image Request"
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|BuildImageCmd
name|buildImageCmd
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|InputStream
condition|)
block|{
name|buildImageCmd
operator|=
name|client
operator|.
name|buildImageCmd
argument_list|(
operator|(
name|InputStream
operator|)
name|body
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|File
condition|)
block|{
name|buildImageCmd
operator|=
name|client
operator|.
name|buildImageCmd
argument_list|(
operator|(
name|File
operator|)
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DockerException
argument_list|(
literal|"Unable to location source Image"
argument_list|)
throw|;
block|}
name|Boolean
name|noCache
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_NO_CACHE
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|noCache
operator|!=
literal|null
condition|)
block|{
name|buildImageCmd
operator|.
name|withNoCache
argument_list|(
name|noCache
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|quiet
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_QUIET
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|quiet
operator|!=
literal|null
condition|)
block|{
name|buildImageCmd
operator|.
name|withQuiet
argument_list|(
name|quiet
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|remove
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_REMOVE
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|remove
operator|!=
literal|null
condition|)
block|{
name|buildImageCmd
operator|.
name|withRemove
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
name|String
name|tag
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TAG
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|buildImageCmd
operator|.
name|withTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
return|return
name|buildImageCmd
return|;
block|}
comment|/**      * Produces a pull image request      *      * @param client      * @param message      * @return      */
DECL|method|executePullImageRequest (DockerClient client, Message message)
specifier|private
name|PullImageCmd
name|executePullImageRequest
parameter_list|(
name|DockerClient
name|client
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing Docker Pull Image Request"
argument_list|)
expr_stmt|;
name|String
name|repository
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_REPOSITORY
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|repository
argument_list|,
literal|"Repository must be specified"
argument_list|)
expr_stmt|;
name|PullImageCmd
name|pullImageCmd
init|=
name|client
operator|.
name|pullImageCmd
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|String
name|registry
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_REGISTRY
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|pullImageCmd
operator|.
name|withRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
name|String
name|tag
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TAG
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|pullImageCmd
operator|.
name|withTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|AuthConfig
name|authConfig
init|=
name|client
operator|.
name|authConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|authConfig
operator|!=
literal|null
condition|)
block|{
name|pullImageCmd
operator|.
name|withAuthConfig
argument_list|(
name|authConfig
argument_list|)
expr_stmt|;
block|}
return|return
name|pullImageCmd
return|;
block|}
comment|/**      * Produces a push image request      *      * @param client      * @param message      * @return      */
DECL|method|executePushImageRequest (DockerClient client, Message message)
specifier|private
name|PushImageCmd
name|executePushImageRequest
parameter_list|(
name|DockerClient
name|client
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing Docker Push Image Request"
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_NAME
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|name
argument_list|,
literal|"Image name must be specified"
argument_list|)
expr_stmt|;
name|PushImageCmd
name|pushImageCmd
init|=
name|client
operator|.
name|pushImageCmd
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|tag
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TAG
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|pushImageCmd
operator|.
name|withTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|AuthConfig
name|authConfig
init|=
name|client
operator|.
name|authConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|authConfig
operator|!=
literal|null
condition|)
block|{
name|pushImageCmd
operator|.
name|withAuthConfig
argument_list|(
name|authConfig
argument_list|)
expr_stmt|;
block|}
return|return
name|pushImageCmd
return|;
block|}
comment|/**      * Produce a attach container request      *      * @param client      * @param message      * @return      */
DECL|method|executeAttachContainerRequest (DockerClient client, Message message)
specifier|private
name|AttachContainerCmd
name|executeAttachContainerRequest
parameter_list|(
name|DockerClient
name|client
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing Docker Attach Container Request"
argument_list|)
expr_stmt|;
name|String
name|containerId
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_CONTAINER_ID
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|containerId
argument_list|,
literal|"Container ID must be specified"
argument_list|)
expr_stmt|;
name|AttachContainerCmd
name|attachContainerCmd
init|=
name|client
operator|.
name|attachContainerCmd
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|Boolean
name|followStream
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_FOLLOW_STREAM
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|followStream
operator|!=
literal|null
condition|)
block|{
name|attachContainerCmd
operator|.
name|withFollowStream
argument_list|(
name|followStream
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|logs
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_LOGS
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|logs
operator|!=
literal|null
condition|)
block|{
name|attachContainerCmd
operator|.
name|withLogs
argument_list|(
name|logs
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|stdErr
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_STD_ERR
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|stdErr
operator|!=
literal|null
condition|)
block|{
name|attachContainerCmd
operator|.
name|withStdErr
argument_list|(
name|stdErr
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|stdOut
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_STD_OUT
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|stdOut
operator|!=
literal|null
condition|)
block|{
name|attachContainerCmd
operator|.
name|withStdOut
argument_list|(
name|stdOut
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|timestamps
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TIMESTAMPS
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamps
operator|!=
literal|null
condition|)
block|{
name|attachContainerCmd
operator|.
name|withTimestamps
argument_list|(
name|timestamps
argument_list|)
expr_stmt|;
block|}
return|return
name|attachContainerCmd
return|;
block|}
comment|/**      * Produce a log container request      *      * @param client      * @param message      * @return      */
DECL|method|executeLogContainerRequest (DockerClient client, Message message)
specifier|private
name|LogContainerCmd
name|executeLogContainerRequest
parameter_list|(
name|DockerClient
name|client
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing Docker Log Container Request"
argument_list|)
expr_stmt|;
name|String
name|containerId
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_CONTAINER_ID
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|containerId
argument_list|,
literal|"Container ID must be specified"
argument_list|)
expr_stmt|;
name|LogContainerCmd
name|logContainerCmd
init|=
name|client
operator|.
name|logContainerCmd
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|Boolean
name|followStream
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_FOLLOW_STREAM
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|followStream
operator|!=
literal|null
condition|)
block|{
name|logContainerCmd
operator|.
name|withFollowStream
argument_list|(
name|followStream
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|stdErr
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_STD_ERR
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|stdErr
operator|!=
literal|null
condition|)
block|{
name|logContainerCmd
operator|.
name|withStdErr
argument_list|(
name|stdErr
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|stdOut
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_STD_OUT
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|stdOut
operator|!=
literal|null
condition|)
block|{
name|logContainerCmd
operator|.
name|withStdOut
argument_list|(
name|stdOut
argument_list|)
expr_stmt|;
block|}
name|Integer
name|tail
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TAIL
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tail
operator|!=
literal|null
condition|)
block|{
name|logContainerCmd
operator|.
name|withTail
argument_list|(
name|tail
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|tailAll
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TAIL_ALL
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tailAll
operator|!=
literal|null
operator|&&
name|tailAll
condition|)
block|{
name|logContainerCmd
operator|.
name|withTailAll
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|timestamps
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TIMESTAMPS
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamps
operator|!=
literal|null
condition|)
block|{
name|logContainerCmd
operator|.
name|withTimestamps
argument_list|(
name|timestamps
argument_list|)
expr_stmt|;
block|}
return|return
name|logContainerCmd
return|;
block|}
comment|/**      * Produce a wait container request      *      * @param client      * @param message      * @return      */
DECL|method|executeWaitContainerRequest (DockerClient client, Message message)
specifier|private
name|WaitContainerCmd
name|executeWaitContainerRequest
parameter_list|(
name|DockerClient
name|client
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing Docker Wait Container Request"
argument_list|)
expr_stmt|;
name|String
name|containerId
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_CONTAINER_ID
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|containerId
argument_list|,
literal|"Container ID must be specified"
argument_list|)
expr_stmt|;
name|WaitContainerCmd
name|waitContainerCmd
init|=
name|client
operator|.
name|waitContainerCmd
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
return|return
name|waitContainerCmd
return|;
block|}
comment|/**      * Produces a exec start request      *      * @param client      * @param message      * @return      */
DECL|method|executeExecStartRequest (DockerClient client, Message message)
specifier|private
name|ExecStartCmd
name|executeExecStartRequest
parameter_list|(
name|DockerClient
name|client
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing Docker Exec Start Request"
argument_list|)
expr_stmt|;
name|String
name|execId
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_EXEC_ID
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|execId
argument_list|,
literal|"Exec ID must be specified"
argument_list|)
expr_stmt|;
name|ExecStartCmd
name|execStartCmd
init|=
name|client
operator|.
name|execStartCmd
argument_list|(
name|execId
argument_list|)
decl_stmt|;
name|Boolean
name|detach
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_DETACH
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|detach
operator|!=
literal|null
condition|)
block|{
name|execStartCmd
operator|.
name|withDetach
argument_list|(
name|detach
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|tty
init|=
name|DockerHelper
operator|.
name|getProperty
argument_list|(
name|DockerConstants
operator|.
name|DOCKER_TTY
argument_list|,
name|configuration
argument_list|,
name|message
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tty
operator|!=
literal|null
condition|)
block|{
name|execStartCmd
operator|.
name|withTty
argument_list|(
name|tty
argument_list|)
expr_stmt|;
block|}
return|return
name|execStartCmd
return|;
block|}
block|}
end_class

end_unit

