begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ehcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ehcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|CacheConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|ResourcePools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|builders
operator|.
name|CacheManagerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|event
operator|.
name|EventFiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|event
operator|.
name|EventOrdering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|xml
operator|.
name|XmlConfiguration
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|EhcacheConfiguration
specifier|public
class|class
name|EhcacheConfiguration
block|{
DECL|field|PREFIX_CACHE
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX_CACHE
init|=
literal|"cache."
decl_stmt|;
DECL|field|PREFIX_POOL
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX_POOL
init|=
literal|"pool."
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|CamelContext
name|context
decl_stmt|;
DECL|field|cacheName
specifier|private
specifier|final
name|String
name|cacheName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configUri
specifier|private
name|String
name|configUri
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|createCacheIfNotExist
specifier|private
name|boolean
name|createCacheIfNotExist
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|action
specifier|private
name|String
name|action
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
annotation|@
name|UriParam
DECL|field|cacheManager
specifier|private
name|CacheManager
name|cacheManager
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|defaultCacheConfiguration
specifier|private
name|CacheConfiguration
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|defaultCacheConfiguration
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|defaultCacheResourcePools
specifier|private
name|ResourcePools
name|defaultCacheResourcePools
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|prefix
operator|=
name|PREFIX_CACHE
argument_list|,
name|multiValue
operator|=
literal|true
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|cacheConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CacheConfiguration
argument_list|>
name|cacheConfigurations
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|prefix
operator|=
name|PREFIX_POOL
argument_list|,
name|multiValue
operator|=
literal|true
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|cacheResourcePools
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ResourcePools
argument_list|>
name|cacheResourcePools
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|enums
operator|=
literal|"ORDERED,UNORDERED"
argument_list|,
name|defaultValue
operator|=
literal|"ORDERED"
argument_list|)
DECL|field|eventOrdering
specifier|private
name|EventOrdering
name|eventOrdering
init|=
name|EventOrdering
operator|.
name|ORDERED
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|enums
operator|=
literal|"ASYNCHRONOUS, SYNCHRONOUS"
argument_list|,
name|defaultValue
operator|=
literal|"ASYNCHRONOUS"
argument_list|)
DECL|field|eventFiring
specifier|private
name|EventFiring
name|eventFiring
init|=
name|EventFiring
operator|.
name|ASYNCHRONOUS
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|enums
operator|=
literal|"EVICTED,EXPIRED,REMOVED,CREATED,UPDATED"
argument_list|,
name|defaultValue
operator|=
literal|"EVICTED,EXPIRED,REMOVED,CREATED,UPDATED"
argument_list|)
DECL|field|eventTypes
specifier|private
name|Set
argument_list|<
name|EventType
argument_list|>
name|eventTypes
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|EventType
operator|.
name|values
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|EventType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|EhcacheConfiguration (String cacheName)
name|EhcacheConfiguration
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
block|}
DECL|method|EhcacheConfiguration (CamelContext context, String cacheName)
name|EhcacheConfiguration
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|cacheName
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|cacheName
operator|=
name|cacheName
expr_stmt|;
block|}
DECL|method|getContext ()
specifier|public
name|CamelContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getCacheName ()
specifier|public
name|String
name|getCacheName
parameter_list|()
block|{
return|return
name|cacheName
return|;
block|}
DECL|method|getConfigUri ()
specifier|public
name|String
name|getConfigUri
parameter_list|()
block|{
return|return
name|configUri
return|;
block|}
DECL|method|getConfigUriAsUrl ()
specifier|public
name|URL
name|getConfigUriAsUrl
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|context
operator|!=
literal|null
condition|?
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsUrl
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|configUri
argument_list|)
else|:
operator|new
name|URL
argument_list|(
name|configUri
argument_list|)
return|;
block|}
comment|/**      * URI pointing to the Ehcache XML configuration file's location      */
DECL|method|setConfigUri (String configUri)
specifier|public
name|void
name|setConfigUri
parameter_list|(
name|String
name|configUri
parameter_list|)
block|{
name|this
operator|.
name|configUri
operator|=
name|configUri
expr_stmt|;
block|}
DECL|method|isCreateCacheIfNotExist ()
specifier|public
name|boolean
name|isCreateCacheIfNotExist
parameter_list|()
block|{
return|return
name|createCacheIfNotExist
return|;
block|}
comment|/**      * Configure if a cache need to be created if it does exist or can't be      * pre-configured.      */
DECL|method|setCreateCacheIfNotExist (boolean createCacheIfNotExist)
specifier|public
name|void
name|setCreateCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|this
operator|.
name|createCacheIfNotExist
operator|=
name|createCacheIfNotExist
expr_stmt|;
block|}
DECL|method|getAction ()
specifier|public
name|String
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * To configure the default cache action. If an action is set in the message      * header, then the operation from the header takes precedence.      */
DECL|method|setAction (String action)
specifier|public
name|void
name|setAction
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * To configure the default action key. If a key is set in the message      * header, then the key from the header takes precedence.      */
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getCacheManager ()
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|cacheManager
return|;
block|}
comment|/**      * The cache manager      */
DECL|method|setCacheManager (CacheManager cacheManager)
specifier|public
name|void
name|setCacheManager
parameter_list|(
name|CacheManager
name|cacheManager
parameter_list|)
block|{
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
block|}
DECL|method|hasCacheManager ()
specifier|public
name|boolean
name|hasCacheManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheManager
operator|!=
literal|null
return|;
block|}
DECL|method|getEventOrdering ()
specifier|public
name|EventOrdering
name|getEventOrdering
parameter_list|()
block|{
return|return
name|eventOrdering
return|;
block|}
comment|/**      * Set the the delivery mode (ordered, unordered)      */
DECL|method|setEventOrdering (String eventOrdering)
specifier|public
name|void
name|setEventOrdering
parameter_list|(
name|String
name|eventOrdering
parameter_list|)
block|{
name|setEventOrdering
argument_list|(
name|EventOrdering
operator|.
name|valueOf
argument_list|(
name|eventOrdering
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setEventOrdering (EventOrdering eventOrdering)
specifier|public
name|void
name|setEventOrdering
parameter_list|(
name|EventOrdering
name|eventOrdering
parameter_list|)
block|{
name|this
operator|.
name|eventOrdering
operator|=
name|eventOrdering
expr_stmt|;
block|}
DECL|method|getEventFiring ()
specifier|public
name|EventFiring
name|getEventFiring
parameter_list|()
block|{
return|return
name|eventFiring
return|;
block|}
comment|/**      * Set the the delivery mode (synchronous, asynchronous)      */
DECL|method|setEventFiring (String eventFiring)
specifier|public
name|void
name|setEventFiring
parameter_list|(
name|String
name|eventFiring
parameter_list|)
block|{
name|setEventFiring
argument_list|(
name|EventFiring
operator|.
name|valueOf
argument_list|(
name|eventFiring
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setEventFiring (EventFiring eventFiring)
specifier|public
name|void
name|setEventFiring
parameter_list|(
name|EventFiring
name|eventFiring
parameter_list|)
block|{
name|this
operator|.
name|eventFiring
operator|=
name|eventFiring
expr_stmt|;
block|}
DECL|method|getEventTypes ()
specifier|public
name|Set
argument_list|<
name|EventType
argument_list|>
name|getEventTypes
parameter_list|()
block|{
return|return
name|eventTypes
return|;
block|}
comment|/**      * Set the type of events to listen for      */
DECL|method|setEventTypes (String eventTypesString)
specifier|public
name|void
name|setEventTypes
parameter_list|(
name|String
name|eventTypesString
parameter_list|)
block|{
name|Set
argument_list|<
name|EventType
argument_list|>
name|eventTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|events
init|=
name|eventTypesString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|event
range|:
name|events
control|)
block|{
name|eventTypes
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|valueOf
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setEventTypes
argument_list|(
name|eventTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|setEventTypes (Set<EventType> eventTypes)
specifier|public
name|void
name|setEventTypes
parameter_list|(
name|Set
argument_list|<
name|EventType
argument_list|>
name|eventTypes
parameter_list|)
block|{
name|this
operator|.
name|eventTypes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|eventTypes
argument_list|)
expr_stmt|;
block|}
comment|// ****************************
comment|// Cache Configuration
comment|// ****************************
comment|/**      * The default cache configuration to be used to create caches.      */
DECL|method|setDefaultCacheConfiguration (CacheConfiguration<?, ?> defaultCacheConfiguration)
specifier|public
name|void
name|setDefaultCacheConfiguration
parameter_list|(
name|CacheConfiguration
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|defaultCacheConfiguration
parameter_list|)
block|{
name|this
operator|.
name|defaultCacheConfiguration
operator|=
name|defaultCacheConfiguration
expr_stmt|;
block|}
DECL|method|getDefaultCacheConfiguration ()
specifier|public
name|CacheConfiguration
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getDefaultCacheConfiguration
parameter_list|()
block|{
return|return
name|defaultCacheConfiguration
return|;
block|}
comment|/**      * The cache configuration to be used for cache cacheName.      */
DECL|method|addCacheConfiguration (String cacheName, CacheConfiguration cacheConfiguration)
specifier|public
name|void
name|addCacheConfiguration
parameter_list|(
name|String
name|cacheName
parameter_list|,
name|CacheConfiguration
name|cacheConfiguration
parameter_list|)
block|{
if|if
condition|(
name|cacheConfigurations
operator|==
literal|null
condition|)
block|{
name|cacheConfigurations
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|cacheConfigurations
operator|.
name|put
argument_list|(
name|cacheName
argument_list|,
name|cacheConfiguration
argument_list|)
expr_stmt|;
block|}
DECL|method|addCacheConfigurationFromParameters (Map<String, Object> parameters)
name|EhcacheConfiguration
name|addCacheConfigurationFromParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|models
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
name|PREFIX_CACHE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|models
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addCacheConfiguration
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|EndpointHelper
operator|.
name|resolveParameter
argument_list|(
name|context
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|CacheConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getCacheConfiguration (String cacheName)
specifier|public
name|CacheConfiguration
name|getCacheConfiguration
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
return|return
name|cacheConfigurations
operator|!=
literal|null
condition|?
name|cacheConfigurations
operator|.
name|getOrDefault
argument_list|(
name|cacheName
argument_list|,
name|defaultCacheConfiguration
argument_list|)
else|:
name|defaultCacheConfiguration
return|;
block|}
comment|// ****************************
comment|// Cache Resource Pools
comment|// ****************************
DECL|method|getDefaultCacheResourcePools ()
specifier|public
name|ResourcePools
name|getDefaultCacheResourcePools
parameter_list|()
block|{
return|return
name|defaultCacheResourcePools
return|;
block|}
comment|/**      * The default resource pools to be used to create caches.      */
DECL|method|setDefaultCacheResourcePools (ResourcePools defaultCacheResourcePools)
specifier|public
name|void
name|setDefaultCacheResourcePools
parameter_list|(
name|ResourcePools
name|defaultCacheResourcePools
parameter_list|)
block|{
name|this
operator|.
name|defaultCacheResourcePools
operator|=
name|defaultCacheResourcePools
expr_stmt|;
block|}
comment|/**      * The resource pools to be used for cache cacheName.      */
DECL|method|addResourcePools (String cacheName, ResourcePools resourcePools)
specifier|public
name|void
name|addResourcePools
parameter_list|(
name|String
name|cacheName
parameter_list|,
name|ResourcePools
name|resourcePools
parameter_list|)
block|{
if|if
condition|(
name|cacheResourcePools
operator|==
literal|null
condition|)
block|{
name|cacheResourcePools
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|cacheResourcePools
operator|.
name|put
argument_list|(
name|cacheName
argument_list|,
name|resourcePools
argument_list|)
expr_stmt|;
block|}
DECL|method|addResourcePoolsFromParameters (Map<String, Object> parameters)
name|EhcacheConfiguration
name|addResourcePoolsFromParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|models
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
name|PREFIX_POOL
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|models
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addResourcePools
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|EndpointHelper
operator|.
name|resolveParameter
argument_list|(
name|context
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|ResourcePools
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getResourcePools (String cacheName)
specifier|public
name|ResourcePools
name|getResourcePools
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
return|return
name|cacheResourcePools
operator|!=
literal|null
condition|?
name|cacheResourcePools
operator|.
name|getOrDefault
argument_list|(
name|cacheName
argument_list|,
name|defaultCacheResourcePools
argument_list|)
else|:
name|defaultCacheResourcePools
return|;
block|}
comment|// ****************************
comment|// Helpers
comment|// ****************************
DECL|method|create (CamelContext context, String remaining, Map<String, Object> parameters)
specifier|static
name|EhcacheConfiguration
name|create
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|EhcacheConfiguration
name|configuration
init|=
operator|new
name|EhcacheConfiguration
argument_list|(
name|context
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|addCacheConfigurationFromParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|addResourcePoolsFromParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setReferenceProperties
argument_list|(
name|context
argument_list|,
name|configuration
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setProperties
argument_list|(
name|context
argument_list|,
name|configuration
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|createCacheManager ()
name|CacheManager
name|createCacheManager
parameter_list|()
throws|throws
name|IOException
block|{
name|CacheManager
name|manager
decl_stmt|;
if|if
condition|(
name|cacheManager
operator|!=
literal|null
condition|)
block|{
name|manager
operator|=
name|cacheManager
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configUri
operator|!=
literal|null
condition|)
block|{
name|manager
operator|=
name|CacheManagerBuilder
operator|.
name|newCacheManager
argument_list|(
operator|new
name|XmlConfiguration
argument_list|(
name|getConfigUriAsUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CacheManagerBuilder
name|builder
init|=
name|CacheManagerBuilder
operator|.
name|newCacheManagerBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheConfigurations
operator|!=
literal|null
condition|)
block|{
name|cacheConfigurations
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|withCache
argument_list|)
expr_stmt|;
block|}
name|manager
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|manager
return|;
block|}
block|}
end_class

end_unit

