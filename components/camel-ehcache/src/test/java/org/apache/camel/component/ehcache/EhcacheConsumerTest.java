begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ehcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ehcache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|EhcacheConsumerTest
specifier|public
class|class
name|EhcacheConsumerTest
extends|extends
name|EhcacheTestSupport
block|{
annotation|@
name|Test
DECL|method|testEvents ()
specifier|public
name|void
name|testEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|generateRandomString
argument_list|()
decl_stmt|;
name|String
index|[]
name|values
init|=
name|generateRandomArrayOfStrings
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|MockEndpoint
name|created
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:created"
argument_list|)
decl_stmt|;
name|created
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|created
operator|.
name|expectedHeaderReceived
argument_list|(
name|EhcacheConstants
operator|.
name|KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|created
operator|.
name|expectedHeaderReceived
argument_list|(
name|EhcacheConstants
operator|.
name|EVENT_TYPE
argument_list|,
name|EventType
operator|.
name|CREATED
argument_list|)
expr_stmt|;
name|MockEndpoint
name|updated
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:updated"
argument_list|)
decl_stmt|;
name|updated
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|updated
operator|.
name|expectedHeaderReceived
argument_list|(
name|EhcacheConstants
operator|.
name|KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|updated
operator|.
name|expectedHeaderReceived
argument_list|(
name|EhcacheConstants
operator|.
name|OLD_VALUE
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|updated
operator|.
name|expectedHeaderReceived
argument_list|(
name|EhcacheConstants
operator|.
name|EVENT_TYPE
argument_list|,
name|EventType
operator|.
name|UPDATED
argument_list|)
expr_stmt|;
name|MockEndpoint
name|all
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:all"
argument_list|)
decl_stmt|;
name|all
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|all
operator|.
name|expectedHeaderValuesReceivedInAnyOrder
argument_list|(
name|EhcacheConstants
operator|.
name|KEY
argument_list|,
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|all
operator|.
name|expectedHeaderValuesReceivedInAnyOrder
argument_list|(
name|EhcacheConstants
operator|.
name|OLD_VALUE
argument_list|,
literal|null
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|all
operator|.
name|expectedHeaderValuesReceivedInAnyOrder
argument_list|(
name|EhcacheConstants
operator|.
name|EVENT_TYPE
argument_list|,
name|EventType
operator|.
name|CREATED
argument_list|,
name|EventType
operator|.
name|UPDATED
argument_list|)
expr_stmt|;
name|all
operator|.
name|expectedBodiesReceived
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|getCache
argument_list|(
name|TEST_CACHE_NAME
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|fromF
argument_list|(
literal|"ehcache://%s?cacheManager=#cacheManager&eventTypes=CREATED"
argument_list|,
name|TEST_CACHE_NAME
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:created"
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"ehcache://%s?cacheManager=#cacheManager&eventTypes=UPDATED"
argument_list|,
name|TEST_CACHE_NAME
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:updated"
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"ehcache://%s?cacheManager=#cacheManager"
argument_list|,
name|TEST_CACHE_NAME
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:all"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

