begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ehcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ehcache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|ResourcePools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|SizedResourcePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|builders
operator|.
name|CacheConfigurationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|builders
operator|.
name|ResourcePoolsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|units
operator|.
name|EntryUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ehcache
operator|.
name|config
operator|.
name|units
operator|.
name|MemoryUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|EhcacheConfigurationTest
specifier|public
class|class
name|EhcacheConfigurationTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOGGER
specifier|public
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EhcacheConfigurationTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"ehcache://myCacheConf?configuration=#myConf"
argument_list|)
DECL|field|ehcacheConf
specifier|private
name|EhcacheEndpoint
name|ehcacheConf
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"myConf"
argument_list|,
name|CacheConfigurationBuilder
operator|.
name|newCacheConfigurationBuilder
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|ResourcePoolsBuilder
operator|.
name|newResourcePoolsBuilder
argument_list|()
operator|.
name|heap
argument_list|(
literal|100
argument_list|,
name|EntryUnit
operator|.
name|ENTRIES
argument_list|)
operator|.
name|offheap
argument_list|(
literal|1
argument_list|,
name|MemoryUnit
operator|.
name|MB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Test
DECL|method|testProgrammaticConfiguration ()
specifier|public
name|void
name|testProgrammaticConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|EhcacheManager
name|manager
init|=
name|ehcacheConf
operator|.
name|getManager
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
literal|"myCacheConf"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourcePools
name|pools
init|=
name|cache
operator|.
name|getRuntimeConfiguration
argument_list|()
operator|.
name|getResourcePools
argument_list|()
decl_stmt|;
name|SizedResourcePool
name|h
init|=
name|pools
operator|.
name|getPoolForResource
argument_list|(
name|ResourceType
operator|.
name|Core
operator|.
name|HEAP
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|h
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EntryUnit
operator|.
name|ENTRIES
argument_list|,
name|h
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
name|SizedResourcePool
name|o
init|=
name|pools
operator|.
name|getPoolForResource
argument_list|(
name|ResourceType
operator|.
name|Core
operator|.
name|OFFHEAP
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|o
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MemoryUnit
operator|.
name|MB
argument_list|,
name|o
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ****************************
comment|// Route
comment|// ****************************
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct://start"
argument_list|)
operator|.
name|to
argument_list|(
name|ehcacheConf
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

