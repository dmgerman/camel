begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.routebox
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|routebox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|LoggingExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|RouteboxServiceSupport
specifier|public
specifier|abstract
class|class
name|RouteboxServiceSupport
extends|extends
name|ServiceSupport
block|{
DECL|field|log
specifier|private
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
DECL|field|endpoint
specifier|private
name|RouteboxEndpoint
name|endpoint
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|startedInnerContext
specifier|private
specifier|volatile
name|boolean
name|startedInnerContext
decl_stmt|;
DECL|method|RouteboxServiceSupport (RouteboxEndpoint endpoint)
specifier|public
name|RouteboxServiceSupport
parameter_list|(
name|RouteboxEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
if|if
condition|(
name|exceptionHandler
operator|==
literal|null
condition|)
block|{
name|exceptionHandler
operator|=
operator|new
name|LoggingExceptionHandler
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doStopInnerContext ()
specifier|protected
name|void
name|doStopInnerContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|endpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|getInnerContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|setStartedInnerContext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doStartInnerContext ()
specifier|protected
name|void
name|doStartInnerContext
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add Route Builders and definitions to the inner camel context and start the context
name|CamelContext
name|context
init|=
name|endpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|getInnerContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|routeBuildersList
init|=
name|endpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|getRouteBuilders
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|routeBuildersList
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|RouteBuilder
name|routeBuilder
range|:
name|routeBuildersList
control|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding RouteBuilder "
operator|+
name|routeBuilder
operator|+
literal|" to "
operator|+
name|context
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addRoutes
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|setStartedInnerContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteboxEndpoint ()
specifier|public
name|RouteboxEndpoint
name|getRouteboxEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
DECL|method|setRouteboxEndpoint (RouteboxEndpoint endpoint)
specifier|public
name|void
name|setRouteboxEndpoint
parameter_list|(
name|RouteboxEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|getExecutor ()
specifier|public
name|ExecutorService
name|getExecutor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
DECL|method|setExecutor (ExecutorService executor)
specifier|public
name|void
name|setExecutor
parameter_list|(
name|ExecutorService
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
DECL|method|setStartedInnerContext (boolean startedInnerContext)
specifier|public
name|void
name|setStartedInnerContext
parameter_list|(
name|boolean
name|startedInnerContext
parameter_list|)
block|{
name|this
operator|.
name|startedInnerContext
operator|=
name|startedInnerContext
expr_stmt|;
block|}
DECL|method|isStartedInnerContext ()
specifier|public
name|boolean
name|isStartedInnerContext
parameter_list|()
block|{
return|return
name|startedInnerContext
return|;
block|}
DECL|method|setExceptionHandler (ExceptionHandler exceptionHandler)
specifier|public
name|void
name|setExceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
operator|.
name|exceptionHandler
operator|=
name|exceptionHandler
expr_stmt|;
block|}
DECL|method|getExceptionHandler ()
specifier|public
name|ExceptionHandler
name|getExceptionHandler
parameter_list|()
block|{
return|return
name|exceptionHandler
return|;
block|}
block|}
end_class

end_unit

