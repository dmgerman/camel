begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.routebox.direct
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|routebox
operator|.
name|direct
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|SuspendableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|routebox
operator|.
name|RouteboxConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|routebox
operator|.
name|RouteboxServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|LoggingExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|AsyncProcessorTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownAware
import|;
end_import

begin_class
DECL|class|RouteboxDirectConsumer
specifier|public
class|class
name|RouteboxDirectConsumer
extends|extends
name|RouteboxServiceSupport
implements|implements
name|RouteboxConsumer
implements|,
name|ShutdownAware
implements|,
name|SuspendableService
block|{
DECL|field|producer
specifier|protected
name|ProducerTemplate
name|producer
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|asyncProcessor
specifier|private
specifier|volatile
name|AsyncProcessor
name|asyncProcessor
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
DECL|method|RouteboxDirectConsumer (RouteboxDirectEndpoint endpoint, Processor processor)
specifier|public
name|RouteboxDirectConsumer
parameter_list|(
name|RouteboxDirectEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|producer
operator|=
name|endpoint
operator|.
name|getConfig
argument_list|()
operator|.
name|getInnerProducerTemplate
argument_list|()
expr_stmt|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add consumer to endpoint
name|boolean
name|existing
init|=
name|this
operator|==
operator|(
operator|(
name|RouteboxDirectEndpoint
operator|)
name|getRouteboxEndpoint
argument_list|()
operator|)
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|existing
operator|&&
operator|(
operator|(
name|RouteboxDirectEndpoint
operator|)
name|getRouteboxEndpoint
argument_list|()
operator|)
operator|.
name|hasConsumer
argument_list|(
name|this
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add a 2nd consumer to the same endpoint. Endpoint "
operator|+
name|getRouteboxEndpoint
argument_list|()
operator|+
literal|" only allows one consumer."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|existing
condition|)
block|{
operator|(
operator|(
name|RouteboxDirectEndpoint
operator|)
name|getRouteboxEndpoint
argument_list|()
operator|)
operator|.
name|addConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// now start the inner context
if|if
condition|(
operator|!
name|isStartedInnerContext
argument_list|()
condition|)
block|{
name|doStartInnerContext
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
operator|(
operator|(
name|RouteboxDirectEndpoint
operator|)
name|getRouteboxEndpoint
argument_list|()
operator|)
operator|.
name|removeConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// now stop the inner context
if|if
condition|(
name|isStartedInnerContext
argument_list|()
condition|)
block|{
name|doStopInnerContext
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
operator|(
operator|(
name|RouteboxDirectEndpoint
operator|)
name|getRouteboxEndpoint
argument_list|()
operator|)
operator|.
name|removeConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
comment|// resume by using the start logic
name|doStart
argument_list|()
expr_stmt|;
block|}
DECL|method|processRequest (Exchange exchange)
specifier|public
name|Exchange
name|processRequest
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
return|;
block|}
comment|/**      * Provides an {@link org.apache.camel.AsyncProcessor} interface to the configured      * processor on the consumer. If the processor does not implement the interface,      * it will be adapted so that it does.      */
DECL|method|getAsyncProcessor ()
specifier|public
specifier|synchronized
name|AsyncProcessor
name|getAsyncProcessor
parameter_list|()
block|{
if|if
condition|(
name|asyncProcessor
operator|==
literal|null
condition|)
block|{
name|asyncProcessor
operator|=
name|AsyncProcessorTypeConverter
operator|.
name|convert
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
return|return
name|asyncProcessor
return|;
block|}
DECL|method|getExceptionHandler ()
specifier|public
name|ExceptionHandler
name|getExceptionHandler
parameter_list|()
block|{
if|if
condition|(
name|exceptionHandler
operator|==
literal|null
condition|)
block|{
name|exceptionHandler
operator|=
operator|new
name|LoggingExceptionHandler
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exceptionHandler
return|;
block|}
DECL|method|setExceptionHandler (ExceptionHandler exceptionHandler)
specifier|public
name|void
name|setExceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
operator|.
name|exceptionHandler
operator|=
name|exceptionHandler
expr_stmt|;
block|}
comment|/**      * Handles the given exception using the {@link #getExceptionHandler()}      *       * @param t the exception to handle      */
DECL|method|handleException (Throwable t)
specifier|protected
name|void
name|handleException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|newt
init|=
operator|(
name|t
operator|==
literal|null
operator|)
condition|?
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Handling [null] exception"
argument_list|)
else|:
name|t
decl_stmt|;
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
name|newt
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.camel.spi.ShutdownAware#deferShutdown(org.apache.camel.ShutdownRunningTask)      */
DECL|method|deferShutdown (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|boolean
name|deferShutdown
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
comment|// deny stopping on shutdown as we want direct consumers to run in case some other queues
comment|// depend on this consumer to run, so it can complete its exchanges
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.camel.spi.ShutdownAware#getPendingExchangesSize()      */
DECL|method|getPendingExchangesSize ()
specifier|public
name|int
name|getPendingExchangesSize
parameter_list|()
block|{
comment|// return 0 as we do not have an internal memory queue with a variable size
comment|// of inflight messages.
return|return
literal|0
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.camel.spi.ShutdownAware#prepareShutdown()      */
DECL|method|prepareShutdown ()
specifier|public
name|void
name|prepareShutdown
parameter_list|()
block|{              }
DECL|method|getEndpoint ()
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|Endpoint
operator|)
name|getRouteboxEndpoint
argument_list|()
return|;
block|}
DECL|method|getProcessor ()
specifier|public
name|Processor
name|getProcessor
parameter_list|()
block|{
return|return
name|processor
return|;
block|}
block|}
end_class

end_unit

