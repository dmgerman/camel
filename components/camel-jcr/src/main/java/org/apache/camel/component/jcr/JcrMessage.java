begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents a {@link org.apache.camel.Message} for working with JCR  *  * @version $Id$  */
end_comment

begin_class
DECL|class|JcrMessage
specifier|public
class|class
name|JcrMessage
extends|extends
name|DefaultMessage
block|{
DECL|field|eventIterator
specifier|private
name|EventIterator
name|eventIterator
decl_stmt|;
DECL|field|eventList
specifier|private
name|List
argument_list|<
name|Event
argument_list|>
name|eventList
decl_stmt|;
DECL|method|JcrMessage (EventIterator eventIterator)
specifier|public
name|JcrMessage
parameter_list|(
name|EventIterator
name|eventIterator
parameter_list|)
block|{
name|this
operator|.
name|eventIterator
operator|=
name|eventIterator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|eventIterator
operator|!=
literal|null
condition|)
block|{
return|return
literal|"JcrMessage[eventIterator: "
operator|+
name|eventIterator
operator|+
literal|", eventList: "
operator|+
name|eventList
operator|+
literal|"]"
return|;
block|}
return|return
literal|"JcrMessage@"
operator|+
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyFrom (org.apache.camel.Message that)
specifier|public
name|void
name|copyFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
name|this
condition|)
block|{
comment|// the same instance so do not need to copy
return|return;
block|}
comment|// must initialize headers before we set the JmsMessage to avoid Camel
comment|// populating it before we do the copy
name|getHeaders
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|that
operator|instanceof
name|JcrMessage
condition|)
block|{
name|JcrMessage
name|thatMessage
init|=
operator|(
name|JcrMessage
operator|)
name|that
decl_stmt|;
name|this
operator|.
name|eventIterator
operator|=
name|thatMessage
operator|.
name|eventIterator
expr_stmt|;
name|this
operator|.
name|eventList
operator|=
name|thatMessage
operator|.
name|eventList
expr_stmt|;
block|}
comment|// copy body and fault flag
name|setBody
argument_list|(
name|that
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|setFault
argument_list|(
name|that
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
comment|// we have already cleared the headers
if|if
condition|(
name|that
operator|.
name|hasHeaders
argument_list|()
condition|)
block|{
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getAttachments
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|that
operator|.
name|hasAttachments
argument_list|()
condition|)
block|{
name|getAttachmentObjects
argument_list|()
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|getAttachmentObjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEventIterator ()
specifier|public
name|EventIterator
name|getEventIterator
parameter_list|()
block|{
return|return
name|eventIterator
return|;
block|}
annotation|@
name|Override
DECL|method|createBody ()
specifier|protected
name|Object
name|createBody
parameter_list|()
block|{
if|if
condition|(
name|eventList
operator|==
literal|null
condition|)
block|{
name|eventList
operator|=
operator|new
name|LinkedList
argument_list|<
name|Event
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|eventIterator
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|eventIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|eventList
operator|.
name|add
argument_list|(
name|eventIterator
operator|.
name|nextEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|eventList
return|;
block|}
block|}
end_class

end_unit

