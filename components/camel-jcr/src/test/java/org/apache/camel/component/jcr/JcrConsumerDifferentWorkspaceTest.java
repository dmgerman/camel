begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|JcrConsumerDifferentWorkspaceTest
specifier|public
class|class
name|JcrConsumerDifferentWorkspaceTest
extends|extends
name|JcrRouteDifferentWorkspaceTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JcrConsumerDifferentWorkspaceTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|absPath
specifier|private
name|String
name|absPath
init|=
literal|"/home/test"
decl_stmt|;
DECL|field|eventTypes
specifier|private
name|int
name|eventTypes
init|=
name|Event
operator|.
name|NODE_ADDED
decl_stmt|;
DECL|field|deep
specifier|private
name|boolean
name|deep
init|=
literal|true
decl_stmt|;
DECL|field|noLocal
specifier|private
name|boolean
name|noLocal
decl_stmt|;
annotation|@
name|Test
DECL|method|testJcrConsumer ()
specifier|public
name|void
name|testJcrConsumer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start consumer thread first
name|JcrConsumerThread
name|consumerThread
init|=
operator|new
name|JcrConsumerThread
argument_list|()
decl_stmt|;
name|consumerThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait until the consumer thread has tried to receive event at least once
while|while
condition|(
name|consumerThread
operator|.
name|getReceiveTrialTimes
argument_list|()
operator|<
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
block|}
comment|// now create a node under the specified event node path
name|Session
name|session
init|=
name|openSession
argument_list|(
name|CUSTOM_WORKSPACE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|folderNode
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|folderNodeName
range|:
name|absPath
operator|.
name|split
argument_list|(
literal|"\\/"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|folderNodeName
argument_list|)
condition|)
block|{
if|if
condition|(
name|folderNode
operator|.
name|hasNode
argument_list|(
name|folderNodeName
argument_list|)
condition|)
block|{
name|folderNode
operator|.
name|getNode
argument_list|(
name|folderNodeName
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|folderNode
operator|=
name|folderNode
operator|.
name|addNode
argument_list|(
name|folderNodeName
argument_list|,
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
block|}
block|}
name|folderNode
operator|.
name|addNode
argument_list|(
literal|"node"
argument_list|,
literal|"nt:unstructured"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
comment|// wait until the consumer thread captures an event
name|consumerThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|consumerThread
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|instanceof
name|JcrMessage
argument_list|)
expr_stmt|;
name|EventIterator
name|eventIterator
init|=
operator|(
operator|(
name|JcrMessage
operator|)
name|message
operator|)
operator|.
name|getEventIterator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|eventIterator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|eventIterator
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|eventList
init|=
name|message
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|eventList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Event
name|event
init|=
operator|(
name|Event
operator|)
name|eventList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Event
operator|.
name|NODE_ADDED
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|absPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"jcr://user:pass@repository"
decl_stmt|;
name|uri
operator|+=
name|absPath
expr_stmt|;
name|uri
operator|+=
literal|"?eventTypes="
operator|+
name|eventTypes
expr_stmt|;
name|uri
operator|+=
literal|"&deep="
operator|+
name|deep
expr_stmt|;
name|uri
operator|+=
literal|"&noLocal="
operator|+
name|noLocal
expr_stmt|;
name|uri
operator|+=
literal|"&workspaceName="
operator|+
name|CUSTOM_WORKSPACE_NAME
expr_stmt|;
name|from
argument_list|(
name|uri
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:a"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|JcrConsumerThread
specifier|private
class|class
name|JcrConsumerThread
extends|extends
name|Thread
block|{
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|receiveTrialTimes
specifier|private
name|int
name|receiveTrialTimes
decl_stmt|;
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
name|exchange
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|"direct:a"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
operator|++
name|receiveTrialTimes
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"JcrConsumerThread receive exchange, {} after {} trials"
argument_list|,
name|exchange
argument_list|,
name|receiveTrialTimes
argument_list|)
expr_stmt|;
block|}
DECL|method|getExchange ()
specifier|public
name|Exchange
name|getExchange
parameter_list|()
block|{
return|return
name|exchange
return|;
block|}
DECL|method|getReceiveTrialTimes ()
specifier|public
name|int
name|getReceiveTrialTimes
parameter_list|()
block|{
return|return
name|receiveTrialTimes
return|;
block|}
block|}
block|}
end_class

end_unit

