begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultFactoryFinderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|DefaultTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|DateValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for JCR type conversions ({@link JcrConverter})  */
end_comment

begin_class
DECL|class|JcrConverterTest
specifier|public
class|class
name|JcrConverterTest
extends|extends
name|Assert
block|{
DECL|field|converter
specifier|protected
name|TypeConverter
name|converter
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|converter
operator|=
operator|new
name|DefaultTypeConverter
argument_list|(
operator|new
name|DefaultPackageScanClassResolver
argument_list|()
argument_list|,
operator|new
name|Injector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsAutoWiring
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
operator|new
name|DefaultFactoryFinderResolver
argument_list|()
operator|.
name|resolveDefaultFactoryFinder
argument_list|(
operator|new
name|DefaultClassResolver
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|converter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBooleanValueConverter ()
specifier|public
name|void
name|testBooleanValueConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertJcrConverterAvailable
argument_list|(
name|BooleanValue
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBinaryValueConverter ()
specifier|public
name|void
name|testBinaryValueConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertJcrConverterAvailable
argument_list|(
name|BinaryValue
operator|.
name|class
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"test"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDateValueConverter ()
specifier|public
name|void
name|testDateValueConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertJcrConverterAvailable
argument_list|(
name|DateValue
operator|.
name|class
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStringValueConverter ()
specifier|public
name|void
name|testStringValueConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertJcrConverterAvailable
argument_list|(
name|StringValue
operator|.
name|class
argument_list|,
literal|"plain text"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertJcrConverterAvailable (Class<?> expected, Object object)
specifier|private
name|void
name|assertJcrConverterAvailable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|expected
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|Value
name|value
init|=
name|converter
operator|.
name|convertTo
argument_list|(
name|Value
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

