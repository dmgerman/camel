begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsonpath
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharConversionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Special stream for JSON streams. Determines from the first 4 bytes the JSON  * encoding according to JSON specification RFC-4627 or newer. In addition BOMs  * are taken into account.  *<p>  * This class is not thread safe.  */
end_comment

begin_class
DECL|class|JsonStream
specifier|public
class|class
name|JsonStream
extends|extends
name|FilterInputStream
block|{
DECL|field|BOM_UTF_32BE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BOM_UTF_32BE
init|=
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
DECL|field|BOM_UTF_32LE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BOM_UTF_32LE
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
DECL|field|BOM_UTF_32_2143
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BOM_UTF_32_2143
init|=
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
decl_stmt|;
DECL|field|BOM_UTF_32_3412
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BOM_UTF_32_3412
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
DECL|field|BOM_UTF_16BE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BOM_UTF_16BE
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
DECL|field|BOM_UTF_16LE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BOM_UTF_16LE
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
decl_stmt|;
DECL|field|BOM_UTF_8
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BOM_UTF_8
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|}
decl_stmt|;
DECL|field|fourByteBuffer
specifier|private
specifier|final
name|byte
index|[]
name|fourByteBuffer
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
comment|/* input index of the four byte buffer (BOMs are skipped) */
DECL|field|inputIndex
specifier|private
name|int
name|inputIndex
decl_stmt|;
comment|/* read bytes into the buffer */
DECL|field|inputEnd
specifier|private
name|int
name|inputEnd
decl_stmt|;
DECL|field|encoding
specifier|private
specifier|final
name|Charset
name|encoding
decl_stmt|;
comment|/**      * Constructor. Determines the encoding during the instantiation according      * to JSON specification RFC-4627 or newer. In addition BOMs are taken into      * account.      *       * @param in      *            input stream must contain a JSON content      * @throws IOException      *             if an error occurs during the determination of the encoding      * @throws CharConversionException      *             if the UCS4 endianess 2143 or 3412 is used      * @throws IllegalArgumentException      *             if the input stream is<code>null</code>      */
DECL|method|JsonStream (InputStream in)
specifier|public
name|JsonStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"input stream is null"
argument_list|)
throw|;
block|}
name|inputEnd
operator|=
name|inputIndex
operator|=
literal|0
expr_stmt|;
name|Charset
name|enc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loadAtLeast
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|enc
operator|=
name|getEncodingFromBOM
argument_list|()
expr_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
comment|// no BOM
name|enc
operator|=
name|getUTF32EncodingFromNullPattern
argument_list|()
expr_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
name|enc
operator|=
name|getUTF16EncodingFromNullPattern
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|loadAtLeast
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|enc
operator|=
name|getUTF16EncodingFromNullPattern
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
comment|// not found; as per specification, this means it must be UTF-8.
name|enc
operator|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
name|encoding
operator|=
name|enc
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|Charset
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|loadAtLeast (int minimum)
specifier|private
name|boolean
name|loadAtLeast
parameter_list|(
name|int
name|minimum
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|received
init|=
name|inputEnd
operator|-
name|inputIndex
decl_stmt|;
while|while
condition|(
name|received
operator|<
name|minimum
condition|)
block|{
name|int
name|count
init|=
name|in
operator|.
name|read
argument_list|(
name|fourByteBuffer
argument_list|,
name|inputEnd
argument_list|,
name|fourByteBuffer
operator|.
name|length
operator|-
name|inputEnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|inputEnd
operator|+=
name|count
expr_stmt|;
name|received
operator|+=
name|count
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getEncodingFromBOM ()
specifier|private
name|Charset
name|getEncodingFromBOM
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 32-bit encoding BOMs
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|fourByteBuffer
argument_list|,
name|BOM_UTF_32BE
argument_list|)
condition|)
block|{
name|inputIndex
operator|=
literal|4
expr_stmt|;
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-32BE"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|fourByteBuffer
argument_list|,
name|BOM_UTF_32LE
argument_list|)
condition|)
block|{
name|inputIndex
operator|=
literal|4
expr_stmt|;
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-32LE"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|fourByteBuffer
argument_list|,
name|BOM_UTF_32_2143
argument_list|)
condition|)
block|{
throw|throw
name|getExceptionUnsupportedUCS4
argument_list|(
literal|"2143"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|fourByteBuffer
argument_list|,
name|BOM_UTF_32_3412
argument_list|)
condition|)
block|{
throw|throw
name|getExceptionUnsupportedUCS4
argument_list|(
literal|"3412"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|firstTwoBytes
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|fourByteBuffer
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|//  16-bit encoding BOMs
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|firstTwoBytes
argument_list|,
name|BOM_UTF_16BE
argument_list|)
condition|)
block|{
name|inputIndex
operator|=
literal|2
expr_stmt|;
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16BE"
argument_list|)
return|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|firstTwoBytes
argument_list|,
name|BOM_UTF_16LE
argument_list|)
condition|)
block|{
name|inputIndex
operator|=
literal|2
expr_stmt|;
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16LE"
argument_list|)
return|;
block|}
name|byte
index|[]
name|firstThreeBytes
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|fourByteBuffer
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// UTF-8 BOM?
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|firstThreeBytes
argument_list|,
name|BOM_UTF_8
argument_list|)
condition|)
block|{
name|inputIndex
operator|=
literal|3
expr_stmt|;
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getUTF32EncodingFromNullPattern ()
specifier|private
name|Charset
name|getUTF32EncodingFromNullPattern
parameter_list|()
throws|throws
name|IOException
block|{
comment|//content without BOM
if|if
condition|(
name|fourByteBuffer
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|1
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|2
index|]
operator|==
literal|0
condition|)
block|{
comment|//  00 00 00 xx
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-32BE"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fourByteBuffer
index|[
literal|1
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|2
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|3
index|]
operator|==
literal|0
condition|)
block|{
comment|// xx 00 00 00
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-32LE"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fourByteBuffer
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|2
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|3
index|]
operator|==
literal|0
condition|)
block|{
comment|// 00 xx 00 00
throw|throw
name|getExceptionUnsupportedUCS4
argument_list|(
literal|"3412"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|fourByteBuffer
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|1
index|]
operator|==
literal|0
operator|&&
name|fourByteBuffer
index|[
literal|3
index|]
operator|==
literal|0
condition|)
block|{
comment|//00 00 xx 00
throw|throw
name|getExceptionUnsupportedUCS4
argument_list|(
literal|"2143"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Cannot be valid UTF-32 encoded JSON...
return|return
literal|null
return|;
block|}
block|}
DECL|method|getUTF16EncodingFromNullPattern ()
specifier|private
name|Charset
name|getUTF16EncodingFromNullPattern
parameter_list|()
block|{
if|if
condition|(
name|fourByteBuffer
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16BE"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fourByteBuffer
index|[
literal|1
index|]
operator|==
literal|0
condition|)
block|{
return|return
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16LE"
argument_list|)
return|;
block|}
else|else
block|{
comment|// not  UTF-16
return|return
literal|null
return|;
block|}
block|}
DECL|method|getExceptionUnsupportedUCS4 (String type)
specifier|private
name|CharConversionException
name|getExceptionUnsupportedUCS4
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CharConversionException
argument_list|(
literal|"Unsupported UCS-4 endianness ("
operator|+
name|type
operator|+
literal|") detected"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputIndex
operator|<
name|inputEnd
condition|)
block|{
name|int
name|result
init|=
name|fourByteBuffer
index|[
name|inputIndex
index|]
decl_stmt|;
name|inputIndex
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
try|try
block|{
return|return
name|in
operator|.
name|read
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|EOFException
name|ex
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (byte b[])
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputIndex
operator|<
name|inputEnd
condition|)
block|{
name|int
name|minimum
init|=
name|Math
operator|.
name|min
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|inputEnd
operator|-
name|inputIndex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minimum
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
name|fourByteBuffer
index|[
name|inputIndex
index|]
expr_stmt|;
name|inputIndex
operator|++
expr_stmt|;
block|}
name|int
name|rest
init|=
name|b
operator|.
name|length
operator|-
name|minimum
decl_stmt|;
if|if
condition|(
name|rest
operator|==
literal|0
condition|)
block|{
return|return
name|minimum
return|;
block|}
try|try
block|{
name|int
name|additionalRead
init|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|minimum
argument_list|,
name|rest
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalRead
operator|<
literal|0
condition|)
block|{
return|return
name|minimum
return|;
block|}
else|else
block|{
return|return
name|minimum
operator|+
name|additionalRead
return|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|EOFException
name|ex
parameter_list|)
block|{
return|return
name|minimum
return|;
block|}
block|}
else|else
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputIndex
operator|<
name|inputEnd
condition|)
block|{
name|int
name|minimum
init|=
name|Math
operator|.
name|min
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|inputEnd
operator|-
name|inputIndex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minimum
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|off
operator|+
name|i
index|]
operator|=
name|fourByteBuffer
index|[
name|inputIndex
index|]
expr_stmt|;
name|inputIndex
operator|++
expr_stmt|;
block|}
name|int
name|rest
init|=
name|b
operator|.
name|length
operator|-
name|minimum
decl_stmt|;
if|if
condition|(
name|rest
operator|==
literal|0
condition|)
block|{
return|return
name|minimum
return|;
block|}
try|try
block|{
name|int
name|additionalRead
init|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|minimum
operator|+
name|off
argument_list|,
name|rest
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalRead
operator|<
literal|0
condition|)
block|{
return|return
name|minimum
return|;
block|}
else|else
block|{
return|return
name|minimum
operator|+
name|additionalRead
return|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|EOFException
name|ex
parameter_list|)
block|{
return|return
name|minimum
return|;
block|}
block|}
else|else
block|{
try|try
block|{
return|return
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|EOFException
name|ex
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputIndex
operator|<
name|inputEnd
condition|)
block|{
name|long
name|minimum
init|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
call|(
name|long
call|)
argument_list|(
name|inputEnd
operator|-
name|inputIndex
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minimum
condition|;
name|i
operator|++
control|)
block|{
name|inputIndex
operator|++
expr_stmt|;
block|}
name|long
name|rest
init|=
name|n
operator|-
name|minimum
decl_stmt|;
if|if
condition|(
name|rest
operator|==
literal|0
condition|)
block|{
return|return
name|minimum
return|;
block|}
name|long
name|additionalSkipped
init|=
name|in
operator|.
name|skip
argument_list|(
name|rest
argument_list|)
decl_stmt|;
return|return
name|additionalSkipped
operator|+
name|minimum
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"reset not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

