begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsonpath.easypredicate
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
operator|.
name|easypredicate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
operator|.
name|easypredicate
operator|.
name|EasyPredicateOperators
operator|.
name|hasOperator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
operator|.
name|easypredicate
operator|.
name|EasyPredicateOperators
operator|.
name|isOperator
import|;
end_import

begin_comment
comment|/**  * To allow defining very easy jsonpath predicates using the syntax: left OP right  *<p/>  * The easy parser is only in use if the predicate do not start with the<tt>$</tt> sign which is used by jsonpath.  * The parser is intended for predicates only.  */
end_comment

begin_class
DECL|class|EasyPredicateParser
specifier|public
class|class
name|EasyPredicateParser
block|{
comment|/**      * Parses the predicate      *      * @param predicate the predicate      * @return the parsed predicate or the original predicate if easy parser did not kick-in      */
DECL|method|parse (String predicate)
specifier|public
name|String
name|parse
parameter_list|(
name|String
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|predicate
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
comment|// regular json path so skip
return|return
name|predicate
return|;
block|}
comment|// must have an operator
if|if
condition|(
operator|!
name|hasOperator
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
return|return
name|predicate
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// grab before operator
name|String
index|[]
name|parts
init|=
name|tokens
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
comment|// only support one operator currently
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|String
name|prev
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|op
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|String
name|next
init|=
name|parts
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|isOperator
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|before
decl_stmt|;
name|String
name|after
decl_stmt|;
name|int
name|pos
init|=
name|prev
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|before
operator|=
literal|"..*"
expr_stmt|;
name|after
operator|=
name|prev
expr_stmt|;
block|}
else|else
block|{
name|before
operator|=
name|prev
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|after
operator|=
name|prev
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"$"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|before
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[?(@."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")]"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// not able to parse so return as-is
return|return
name|predicate
return|;
block|}
comment|/**      * Splits the predicate into: left OP right      *      * @param predicate the predicate      * @return the splitted parts      */
DECL|method|tokens (String predicate)
specifier|private
specifier|static
name|String
index|[]
name|tokens
parameter_list|(
name|String
name|predicate
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|part
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|predicate
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// is there a new operator
name|String
name|s
init|=
name|predicate
operator|.
name|substring
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|op
init|=
name|EasyPredicateOperators
operator|.
name|getOperatorAtStart
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|part
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|op
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|// move i ahead
name|i
operator|=
name|i
operator|+
name|op
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|char
name|ch
init|=
name|predicate
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|part
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ant leftovers
if|if
condition|(
name|part
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|part
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

