begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsonpath.jackson
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
operator|.
name|jackson
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
operator|.
name|JsonPathAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_comment
comment|/**  * A Jackson {@link JsonPathAdapter} which is using Jackson to convert the message  * body to {@link Map}. This allows us to support POJO classes with camel-jsonpath.  */
end_comment

begin_class
DECL|class|JacksonJsonAdapter
specifier|public
class|class
name|JacksonJsonAdapter
implements|implements
name|JsonPathAdapter
block|{
DECL|field|JACKSON_JAXB_MODULE
specifier|private
specifier|static
specifier|final
name|String
name|JACKSON_JAXB_MODULE
init|=
literal|"com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule"
decl_stmt|;
DECL|field|defaultMapper
specifier|private
specifier|final
name|ObjectMapper
name|defaultMapper
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|JacksonJsonAdapter ()
specifier|public
name|JacksonJsonAdapter
parameter_list|()
block|{
name|defaultMapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (CamelContext camelContext)
specifier|public
name|void
name|init
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
comment|// Attempt to enables JAXB processing so we can easily convert JAXB annotated pojos also
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|JACKSON_JAXB_MODULE
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|Object
name|obj
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Module
condition|)
block|{
name|Module
name|module
init|=
operator|(
name|Module
operator|)
name|obj
decl_stmt|;
name|defaultMapper
operator|.
name|registerModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|readValue (Object body, Exchange exchange)
specifier|public
name|Map
name|readValue
parameter_list|(
name|Object
name|body
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ObjectMapper
name|mapper
init|=
name|resolveObjectMapper
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|mapper
operator|.
name|convertValue
argument_list|(
name|body
argument_list|,
name|Map
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore because we are attempting to convert
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|writeAsString (Object value, Exchange exchange)
specifier|public
name|String
name|writeAsString
parameter_list|(
name|Object
name|value
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ObjectMapper
name|mapper
init|=
name|resolveObjectMapper
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore because we are attempting to convert
block|}
return|return
literal|null
return|;
block|}
DECL|method|resolveObjectMapper (Registry registry)
specifier|private
name|ObjectMapper
name|resolveObjectMapper
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|Set
argument_list|<
name|ObjectMapper
argument_list|>
name|mappers
init|=
name|registry
operator|.
name|findByType
argument_list|(
name|ObjectMapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|mappers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
return|return
name|defaultMapper
return|;
block|}
block|}
end_class

end_unit

