begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsonpath.easypredicate
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
operator|.
name|easypredicate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Json path operators  */
end_comment

begin_class
DECL|class|EasyPredicateOperators
specifier|public
specifier|final
class|class
name|EasyPredicateOperators
block|{
DECL|field|EQ
specifier|private
specifier|static
specifier|final
name|String
name|EQ
init|=
literal|"=="
decl_stmt|;
DECL|field|NE
specifier|private
specifier|static
specifier|final
name|String
name|NE
init|=
literal|"!="
decl_stmt|;
DECL|field|LT
specifier|private
specifier|static
specifier|final
name|String
name|LT
init|=
literal|"<"
decl_stmt|;
DECL|field|LE
specifier|private
specifier|static
specifier|final
name|String
name|LE
init|=
literal|"<="
decl_stmt|;
DECL|field|GT
specifier|private
specifier|static
specifier|final
name|String
name|GT
init|=
literal|">"
decl_stmt|;
DECL|field|GE
specifier|private
specifier|static
specifier|final
name|String
name|GE
init|=
literal|">="
decl_stmt|;
DECL|field|REG
specifier|private
specifier|static
specifier|final
name|String
name|REG
init|=
literal|"=~"
decl_stmt|;
DECL|field|IN
specifier|private
specifier|static
specifier|final
name|String
name|IN
init|=
literal|"in"
decl_stmt|;
DECL|field|NIN
specifier|private
specifier|static
specifier|final
name|String
name|NIN
init|=
literal|"nin"
decl_stmt|;
DECL|field|SIZE
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY
init|=
literal|"empty"
decl_stmt|;
DECL|field|OPS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|OPS
init|=
operator|new
name|String
index|[]
block|{
name|EQ
block|,
name|NE
block|,
name|LT
block|,
name|LE
block|,
name|GT
block|,
name|GE
block|,
name|REG
block|,
name|IN
block|,
name|NIN
block|,
name|SIZE
block|,
name|EMPTY
block|}
decl_stmt|;
DECL|method|EasyPredicateOperators ()
specifier|private
name|EasyPredicateOperators
parameter_list|()
block|{     }
comment|/**      * Does the expression have any operator (with single space around)?      */
DECL|method|hasOperator (String exp)
specifier|static
name|boolean
name|hasOperator
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
comment|// need to have space around operator to not match eg in used in some other word
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|OPS
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
name|exp
operator|.
name|contains
argument_list|(
literal|" "
operator|+
name|o
operator|+
literal|""
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Is this an operator (with no space around)      */
DECL|method|isOperator (String exp)
specifier|static
name|boolean
name|isOperator
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|OPS
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|s
lambda|->
name|Objects
operator|.
name|equals
argument_list|(
name|s
argument_list|,
name|exp
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Gets the operator (with single space around)      */
DECL|method|getOperatorAtStart (String exp)
specifier|static
name|String
name|getOperatorAtStart
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|OPS
argument_list|)
operator|.
name|filter
argument_list|(
name|o
lambda|->
name|exp
operator|.
name|startsWith
argument_list|(
literal|" "
operator|+
name|o
operator|+
literal|""
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

