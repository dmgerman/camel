begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsonpath
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|PredicateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JsonPathCBRTest
specifier|public
class|class
name|JsonPathCBRTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|jsonpath
argument_list|(
literal|"$.store.book[?(@.price< 10)]"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:cheap"
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|jsonpath
argument_list|(
literal|"$.store.book[?(@.price< 30)]"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:average"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:expensive"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bicycle"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|method
argument_list|(
operator|new
name|BeanPredicate
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:cheap"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:expensive"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bicycle2"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|PredicateBuilder
operator|.
name|isLessThan
argument_list|(
name|ExpressionBuilder
operator|.
name|languageExpression
argument_list|(
literal|"jsonpath"
argument_list|,
literal|"$.store.bicycle.price"
argument_list|)
argument_list|,
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:cheap"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:expensive"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|BeanPredicate
specifier|public
specifier|static
class|class
name|BeanPredicate
block|{
DECL|method|checkPrice (@sonPathR) double price)
specifier|public
name|boolean
name|checkPrice
parameter_list|(
annotation|@
name|JsonPath
argument_list|(
literal|"$.store.bicycle.price"
argument_list|)
name|double
name|price
parameter_list|)
block|{
return|return
name|price
operator|<
literal|100
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCheapBicycle ()
specifier|public
name|void
name|testCheapBicycle
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessageToBicycleRoute
argument_list|(
literal|"direct:bicycle"
argument_list|)
expr_stmt|;
name|resetMocks
argument_list|()
expr_stmt|;
name|sendMessageToBicycleRoute
argument_list|(
literal|"direct:bicycle2"
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessageToBicycleRoute (String startPoint)
specifier|private
name|void
name|sendMessageToBicycleRoute
parameter_list|(
name|String
name|startPoint
parameter_list|)
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:cheap"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:average"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:expensive"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|startPoint
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/cheap.json"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheap ()
specifier|public
name|void
name|testCheap
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:cheap"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:average"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:expensive"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/cheap.json"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAverage ()
specifier|public
name|void
name|testAverage
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:cheap"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:average"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:expensive"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/average.json"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpensive ()
specifier|public
name|void
name|testExpensive
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:cheap"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:average"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:expensive"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/expensive.json"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

