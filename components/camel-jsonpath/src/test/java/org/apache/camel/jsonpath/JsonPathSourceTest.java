begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsonpath
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JsonPathSourceTest
specifier|public
class|class
name|JsonPathSourceTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|MESSAGE1
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE1
init|=
literal|"Joseph und seine Br\u00fcder"
decl_stmt|;
DECL|field|MESSAGE2
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE2
init|=
literal|"G\u00f6tzend\u00e4mmerung"
decl_stmt|;
DECL|field|DEFAULT_CHARSET
specifier|private
specifier|static
specifier|final
name|Charset
name|DEFAULT_CHARSET
init|=
name|Charset
operator|.
name|defaultCharset
argument_list|()
decl_stmt|;
annotation|@
name|AfterClass
DECL|method|setDefaultCharsetBack ()
specifier|public
specifier|static
name|void
name|setDefaultCharsetBack
parameter_list|()
block|{
name|switchToDefaultCharset
argument_list|(
name|DEFAULT_CHARSET
operator|.
name|displayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|jsonpath
argument_list|(
literal|"$.store.book[0].title"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:title"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:second"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|jsonpath
argument_list|(
literal|"$.store.book[1].title"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:title"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testPriceResultTypeOnGenericFileUTF8 ()
specifier|public
name|void
name|testPriceResultTypeOnGenericFileUTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|switchToDefaultCharset
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|MESSAGE1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|message
argument_list|(
literal|1
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|MESSAGE2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:second"
argument_list|,
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriceResultTypeOnGenericFileUTF8OnWindows ()
specifier|public
name|void
name|testPriceResultTypeOnGenericFileUTF8OnWindows
parameter_list|()
throws|throws
name|Exception
block|{
name|switchToDefaultCharset
argument_list|(
literal|"windows-1252"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|MESSAGE1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|message
argument_list|(
literal|1
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|MESSAGE2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:second"
argument_list|,
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/germanbooks-utf8.json"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriceResultTypeOnGenericFileISO88591 ()
specifier|public
name|void
name|testPriceResultTypeOnGenericFileISO88591
parameter_list|()
throws|throws
name|Exception
block|{
name|switchToDefaultCharset
argument_list|(
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|MESSAGE1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:title"
argument_list|)
operator|.
name|message
argument_list|(
literal|1
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|MESSAGE2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
literal|"src/test/resources/germanbooks-iso-8859-1.json"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/germanbooks-iso-8859-1.json"
argument_list|)
argument_list|,
literal|"ISO-8859-1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:second"
argument_list|,
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
literal|"src/test/resources/germanbooks-iso-8859-1.json"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/resources/germanbooks-iso-8859-1.json"
argument_list|)
argument_list|,
literal|"ISO-8859-1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|switchToDefaultCharset (String charset)
specifier|private
specifier|static
name|void
name|switchToDefaultCharset
parameter_list|(
name|String
name|charset
parameter_list|)
block|{
try|try
block|{
name|Field
name|defaultCharset
init|=
name|Charset
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"defaultCharset"
argument_list|)
decl_stmt|;
name|defaultCharset
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultCharset
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing here
block|}
block|}
block|}
end_class

end_unit

