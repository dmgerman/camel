begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jsonpath
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jsonpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|JsonStreamTest
specifier|public
class|class
name|JsonStreamTest
block|{
annotation|@
name|Test
DECL|method|utf8 ()
specifier|public
name|void
name|utf8
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUTF8.txt"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|iSO88591 ()
specifier|public
name|void
name|iSO88591
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|test
argument_list|(
literal|"json_stream/jsonISO8859-1.txt"
argument_list|,
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Error exepcted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected:<ISO-8859-1> but was:<UTF-8>"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|utf8WithoutBOM ()
specifier|public
name|void
name|utf8WithoutBOM
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUTF8WithoutBOM.txt"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf16BEWithBom ()
specifier|public
name|void
name|utf16BEWithBom
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUCS2BigEndianWithBOM.txt"
argument_list|,
literal|"UTF-16BE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf16BEWithoutBom ()
specifier|public
name|void
name|utf16BEWithoutBom
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUCS2BigEndianWithoutBOM.txt"
argument_list|,
literal|"UTF-16BE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf16LEWithBom ()
specifier|public
name|void
name|utf16LEWithBom
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUCS2LittleEndianWithBom.txt"
argument_list|,
literal|"UTF-16LE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf16LEWithoutBom ()
specifier|public
name|void
name|utf16LEWithoutBom
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUCS2LittleEndianWithoutBOM.txt"
argument_list|,
literal|"UTF-16LE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf32BEWithBOM ()
specifier|public
name|void
name|utf32BEWithBOM
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUTF32BEWithBOM.txt"
argument_list|,
literal|"UTF-32BE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf32BEWithoutBOM ()
specifier|public
name|void
name|utf32BEWithoutBOM
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUTF32BEWithoutBOM.txt"
argument_list|,
literal|"UTF-32BE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf32LEWithBOM ()
specifier|public
name|void
name|utf32LEWithBOM
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUTF32LEWithBOM.txt"
argument_list|,
literal|"UTF-32LE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|utf32LEWithoutBOM ()
specifier|public
name|void
name|utf32LEWithoutBOM
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/jsonUTF32LEWithoutBOM.txt"
argument_list|,
literal|"UTF-32LE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oneChar ()
specifier|public
name|void
name|oneChar
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/oneChar"
argument_list|,
literal|"UTF-8"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fourChar ()
specifier|public
name|void
name|fourChar
parameter_list|()
throws|throws
name|Exception
block|{
name|test
argument_list|(
literal|"json_stream/fourChar"
argument_list|,
literal|"UTF-8"
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
block|}
DECL|method|test (String file, String encoding)
specifier|private
name|void
name|test
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
name|test
argument_list|(
name|file
argument_list|,
name|encoding
argument_list|,
literal|"{ \"a\": \"1\", \"b\": \"2\", \"c\": { \"a\": \"c.a.1\", \"b\": \"c.b.2\" }, \"d\": [\"a\", \"b\", \"c\"], \"e\": [1, 2, 3], \"f\": true, \"g\": null}"
argument_list|)
expr_stmt|;
block|}
DECL|method|test (String file, String encoding, String expectedString)
specifier|private
name|void
name|test
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|encoding
parameter_list|,
name|String
name|expectedString
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|JsonStreamTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" not found"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|JsonStream
name|js
init|=
operator|new
name|JsonStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Charset
name|actual
init|=
name|js
operator|.
name|getEncoding
argument_list|()
decl_stmt|;
name|Charset
name|expected
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
name|readBytes
argument_list|(
name|js
argument_list|)
decl_stmt|;
name|String
name|actualString
init|=
operator|new
name|String
argument_list|(
name|result
argument_list|,
name|js
operator|.
name|getEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedString
argument_list|,
name|actualString
argument_list|)
expr_stmt|;
block|}
DECL|method|readBytes (JsonStream js)
name|byte
index|[]
name|readBytes
parameter_list|(
name|JsonStream
name|js
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read all
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|len
init|=
name|js
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|js
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|result
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buffer
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

