begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.facebook.data
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|facebook4j
operator|.
name|Facebook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|config
operator|.
name|FacebookEndpointConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test {@link FacebookMethodsTypeHelper}.  */
end_comment

begin_class
DECL|class|FacebookMethodsTypeHelperTest
specifier|public
class|class
name|FacebookMethodsTypeHelperTest
block|{
DECL|field|names
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|getExcludes
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|getExcludes
decl_stmt|;
DECL|field|searchIncludes
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|searchIncludes
decl_stmt|;
DECL|method|FacebookMethodsTypeHelperTest ()
specifier|public
name|FacebookMethodsTypeHelperTest
parameter_list|()
block|{
comment|// get all method names
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
range|:
name|Facebook
operator|.
name|class
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|aClass
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Methods"
argument_list|)
condition|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|aClass
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|getShortName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|getExcludes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"places"
argument_list|)
expr_stmt|;
name|searchIncludes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"checkins"
argument_list|,
literal|"events"
argument_list|,
literal|"groups"
argument_list|,
literal|"locations"
argument_list|,
literal|"places"
argument_list|,
literal|"posts"
argument_list|,
literal|"users"
argument_list|)
expr_stmt|;
block|}
DECL|method|getShortName (String name)
specifier|private
name|String
name|getShortName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"search"
argument_list|)
operator|&&
operator|!
literal|"search"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
annotation|@
name|Test
DECL|method|testGetCandidateMethods ()
specifier|public
name|void
name|testGetCandidateMethods
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|FacebookMethodsType
name|method
range|:
name|FacebookMethodsType
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|shortName
init|=
name|getShortName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|argNames
init|=
name|method
operator|.
name|getArgNames
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|method
operator|.
name|getArgNames
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FacebookMethodsType
argument_list|>
name|candidates
init|=
name|FacebookMethodsTypeHelper
operator|.
name|getCandidateMethods
argument_list|(
name|name
argument_list|,
name|argNames
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"No candidate methods for "
operator|+
name|name
argument_list|,
name|candidates
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|shortName
argument_list|)
operator|&&
operator|!
literal|"search"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|searchIncludes
operator|.
name|contains
argument_list|(
name|shortName
argument_list|)
condition|)
block|{
name|candidates
operator|=
name|FacebookMethodsTypeHelper
operator|.
name|getCandidateMethods
argument_list|(
name|FacebookMethodsTypeHelper
operator|.
name|convertToSearchMethod
argument_list|(
name|shortName
argument_list|)
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No candidate search methods for "
operator|+
name|shortName
argument_list|,
name|candidates
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFilterMethods ()
specifier|public
name|void
name|testFilterMethods
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
annotation|@
name|Test
DECL|method|testGetArguments ()
specifier|public
name|void
name|testGetArguments
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
name|Facebook
operator|.
name|class
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|interfaces
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Methods"
argument_list|)
condition|)
block|{
comment|// check all methods of this *Methods interface
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
comment|// will throw an exception if can't be found
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
name|FacebookMethodsTypeHelper
operator|.
name|getArguments
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nArgs
init|=
name|arguments
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nArgs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nArgs
condition|;
name|i
operator|++
control|)
block|{
name|types
operator|.
name|add
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing parameters for "
operator|+
name|method
argument_list|,
name|types
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAllArguments ()
specifier|public
name|void
name|testAllArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"Missing arguments"
argument_list|,
name|FacebookMethodsTypeHelper
operator|.
name|allArguments
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetType ()
specifier|public
name|void
name|testGetType
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Field
name|field
range|:
name|FacebookEndpointConfiguration
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// skip readingOptions
if|if
condition|(
literal|"readingOptions"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|actualType
init|=
name|FacebookMethodsTypeHelper
operator|.
name|getType
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// test for auto boxing, un-boxing
if|if
condition|(
name|actualType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|expectedType
operator|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|expectedType
operator|.
name|getField
argument_list|(
literal|"TYPE"
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
operator|&&
name|actualType
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// skip lists, since they will be converted in invokeMethod()
name|expectedType
operator|=
name|actualType
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Missing property "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|expectedType
argument_list|,
name|actualType
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertToGetMethod ()
specifier|public
name|void
name|testConvertToGetMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Invalid get method name"
argument_list|,
name|FacebookMethodsType
operator|.
name|GET_ACCOUNTS
operator|.
name|getName
argument_list|()
argument_list|,
name|FacebookMethodsTypeHelper
operator|.
name|convertToGetMethod
argument_list|(
literal|"accounts"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertToSearchMethod ()
specifier|public
name|void
name|testConvertToSearchMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Invalid search method name"
argument_list|,
name|FacebookMethodsType
operator|.
name|SEARCHPOSTS
operator|.
name|getName
argument_list|()
argument_list|,
name|FacebookMethodsTypeHelper
operator|.
name|convertToSearchMethod
argument_list|(
literal|"posts"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

