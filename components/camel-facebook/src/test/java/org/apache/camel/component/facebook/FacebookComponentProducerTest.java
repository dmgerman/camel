begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.facebook
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|facebook4j
operator|.
name|Facebook
import|;
end_import

begin_import
import|import
name|facebook4j
operator|.
name|FacebookException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookMethodsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FacebookComponentProducerTest
specifier|public
class|class
name|FacebookComponentProducerTest
extends|extends
name|CamelFacebookTestSupport
block|{
DECL|field|noArgNames
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|noArgNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|idExcludes
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idExcludes
decl_stmt|;
DECL|field|readingExcludes
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|readingExcludes
decl_stmt|;
DECL|method|FacebookComponentProducerTest ()
specifier|public
name|FacebookComponentProducerTest
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|Facebook
operator|.
name|class
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
specifier|final
name|String
name|clazzName
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazzName
operator|.
name|endsWith
argument_list|(
literal|"Methods"
argument_list|)
operator|&&
operator|!
name|clazzName
operator|.
name|equals
argument_list|(
literal|"GameMethods"
argument_list|)
condition|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
comment|// find all the no-arg methods
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|FacebookMethodsType
operator|.
name|findMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|shortName
init|=
name|getShortName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|generalExcludes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"home"
argument_list|,
literal|"tabs"
argument_list|,
literal|"updates"
argument_list|,
literal|"blocked"
argument_list|,
literal|"pageSettings"
argument_list|,
literal|"pageAdmins"
argument_list|,
literal|"milestones"
argument_list|,
literal|"offers"
argument_list|,
literal|"pokes"
argument_list|,
literal|"promotablePosts"
argument_list|,
literal|"outbox"
argument_list|,
literal|"inbox"
argument_list|,
literal|"notifications"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|generalExcludes
operator|.
name|contains
argument_list|(
name|shortName
argument_list|)
condition|)
block|{
name|noArgNames
operator|.
name|add
argument_list|(
name|shortName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|idExcludes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|idExcludes
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"me"
argument_list|,
literal|"home"
argument_list|,
literal|"searchCheckins"
argument_list|,
literal|"taggableFriends"
argument_list|)
argument_list|)
expr_stmt|;
name|readingExcludes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|readingExcludes
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"pictureURL"
argument_list|,
literal|"permissions"
argument_list|,
literal|"taggableFriends"
argument_list|,
literal|"sSLPictureURL"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FacebookMethodsType
name|types
range|:
name|FacebookMethodsType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|types
operator|.
name|getArgNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"pageId"
argument_list|)
condition|)
block|{
name|idExcludes
operator|.
name|add
argument_list|(
name|getShortName
argument_list|(
name|types
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|readingExcludes
operator|.
name|add
argument_list|(
name|getShortName
argument_list|(
name|types
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testProducers ()
specifier|public
name|void
name|testProducers
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|noArgNames
control|)
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
operator|+
name|name
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct://test"
operator|+
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// with user id
if|if
condition|(
operator|!
name|idExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mock
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultId"
operator|+
name|name
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct://testId"
operator|+
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// with reading
if|if
condition|(
operator|!
name|readingExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mock
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultReading"
operator|+
name|name
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct://testReading"
operator|+
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// with user id and reading
if|if
condition|(
operator|!
operator|(
name|idExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|readingExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
name|mock
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultIdReading"
operator|+
name|name
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct://testIdReading"
operator|+
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// with user id and reading
if|if
condition|(
operator|!
operator|(
name|idExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|readingExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
name|mock
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultIdReadingHeader"
operator|+
name|name
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct://testIdReadingHeader"
operator|+
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJsonStoreEnabled ()
specifier|public
name|void
name|testJsonStoreEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|rawJSON
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct://testJsonStoreEnabled"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"me"
block|}
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"NULL rawJSON"
argument_list|,
name|rawJSON
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Empty rawJSON"
argument_list|,
name|rawJSON
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// Deprecated exceptions are ignored in the tests since this depends on the
comment|// configuration and/or creation date of the Facebook application.
name|onException
argument_list|(
name|FacebookException
operator|.
name|class
argument_list|)
operator|.
name|setHandledPolicy
argument_list|(
operator|new
name|IgnoreDeprecatedExceptions
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------
comment|// producer tests
comment|//---------------
comment|// generate test routes for all methods with no args
for|for
control|(
name|String
name|name
range|:
name|noArgNames
control|)
block|{
name|from
argument_list|(
literal|"direct://test"
operator|+
name|name
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"mock"
argument_list|,
name|constant
argument_list|(
literal|"mock:result"
operator|+
name|name
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"facebook://"
operator|+
name|name
operator|+
literal|"?"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
operator|+
name|name
argument_list|)
expr_stmt|;
comment|// with user id
if|if
condition|(
operator|!
name|idExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|from
argument_list|(
literal|"direct://testId"
operator|+
name|name
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"mock"
argument_list|,
name|constant
argument_list|(
literal|"mock:resultId"
operator|+
name|name
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"facebook://"
operator|+
name|name
operator|+
literal|"?userId=me&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultId"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
comment|// reading options
if|if
condition|(
operator|!
name|readingExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|from
argument_list|(
literal|"direct://testReading"
operator|+
name|name
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"mock"
argument_list|,
name|constant
argument_list|(
literal|"mock:resultReading"
operator|+
name|name
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"facebook://"
operator|+
name|name
operator|+
literal|"?reading.limit=10&reading.locale=en,US&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultReading"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
comment|// with id and reading options
if|if
condition|(
operator|!
operator|(
name|idExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|readingExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
name|from
argument_list|(
literal|"direct://testIdReading"
operator|+
name|name
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"mock"
argument_list|,
name|constant
argument_list|(
literal|"mock:resultIdReading"
operator|+
name|name
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"facebook://"
operator|+
name|name
operator|+
literal|"?userId=me&reading.limit=10&reading.locale=en,US&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultIdReading"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
comment|// with id and reading options
if|if
condition|(
operator|!
operator|(
name|idExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|readingExcludes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
name|from
argument_list|(
literal|"direct://testIdReadingHeader"
operator|+
name|name
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"mock"
argument_list|,
name|constant
argument_list|(
literal|"mock:resultIdReadingHeader"
operator|+
name|name
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"CamelFacebook.reading.limit"
argument_list|,
name|constant
argument_list|(
literal|"10"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"facebook://"
operator|+
name|name
operator|+
literal|"?userId=me&reading.locale=en,US&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultIdReadingHeader"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|from
argument_list|(
literal|"direct://testJsonStoreEnabled"
argument_list|)
operator|.
name|to
argument_list|(
literal|"facebook://users?inBody=ids&jsonStoreEnabled=true&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|setBody
argument_list|(
name|simple
argument_list|(
literal|"header."
operator|+
name|FacebookConstants
operator|.
name|RAW_JSON_HEADER
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO add tests for the rest of the supported methods
block|}
block|}
return|;
block|}
DECL|class|IgnoreDeprecatedExceptions
specifier|private
class|class
name|IgnoreDeprecatedExceptions
implements|implements
name|Predicate
block|{
annotation|@
name|Override
DECL|method|matches (Exchange exchange)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|RuntimeCamelException
name|camelException
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|RuntimeCamelException
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelException
operator|!=
literal|null
operator|&&
name|camelException
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|camelException
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FacebookException
condition|)
block|{
name|FacebookException
name|facebookException
init|=
operator|(
name|FacebookException
operator|)
name|camelException
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|facebookException
operator|.
name|getErrorCode
argument_list|()
operator|==
literal|11
operator|||
name|facebookException
operator|.
name|getErrorCode
argument_list|()
operator|==
literal|12
condition|)
block|{
name|getMockEndpoint
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"mock"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

