begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.facebook
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|facebook4j
operator|.
name|FacebookException
import|;
end_import

begin_import
import|import
name|facebook4j
operator|.
name|api
operator|.
name|SearchMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPollingConsumerPollStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FacebookComponentConsumerTest
specifier|public
class|class
name|FacebookComponentConsumerTest
extends|extends
name|CamelFacebookTestSupport
block|{
DECL|field|APACHE_FOUNDATION_PAGE_ID
specifier|public
specifier|static
specifier|final
name|String
name|APACHE_FOUNDATION_PAGE_ID
init|=
literal|"6538157161"
decl_stmt|;
DECL|field|searchNames
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|searchNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|excludedNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|excludedNames
decl_stmt|;
DECL|method|FacebookComponentConsumerTest ()
specifier|public
name|FacebookComponentConsumerTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// find search methods for consumer tests
for|for
control|(
name|Method
name|method
range|:
name|SearchMethods
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|getShortName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"locations"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
literal|"checkins"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|searchNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|excludedNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"places"
argument_list|,
literal|"users"
argument_list|,
literal|"search"
argument_list|,
literal|"pages"
argument_list|,
literal|"searchPosts"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumers ()
specifier|public
name|void
name|testConsumers
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|String
name|name
range|:
name|searchNames
control|)
block|{
name|MockEndpoint
name|mock
decl_stmt|;
if|if
condition|(
operator|!
name|excludedNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mock
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumeResult"
operator|+
name|name
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|mock
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumeQueryResult"
operator|+
name|name
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJsonStoreEnabled ()
specifier|public
name|void
name|testJsonStoreEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:testJsonStoreEnabled"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
specifier|final
name|String
name|rawJSON
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|FacebookConstants
operator|.
name|RAW_JSON_HEADER
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null rawJSON"
argument_list|,
name|rawJSON
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Empty rawJSON"
argument_list|,
name|rawJSON
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPage ()
specifier|public
name|void
name|testPage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:testPage"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPostSetup ()
specifier|protected
name|void
name|doPostSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|ignoreDeprecatedApiError
argument_list|()
expr_stmt|;
block|}
DECL|method|ignoreDeprecatedApiError ()
specifier|private
name|void
name|ignoreDeprecatedApiError
parameter_list|()
block|{
for|for
control|(
specifier|final
name|Route
name|route
range|:
name|context
argument_list|()
operator|.
name|getRoutes
argument_list|()
control|)
block|{
operator|(
operator|(
name|ScheduledPollConsumer
operator|)
name|route
operator|.
name|getConsumer
argument_list|()
operator|)
operator|.
name|setPollStrategy
argument_list|(
operator|new
name|DefaultPollingConsumerPollStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|rollback
parameter_list|(
name|Consumer
name|consumer
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|int
name|retryCounter
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FacebookException
condition|)
block|{
name|FacebookException
name|facebookException
init|=
operator|(
name|FacebookException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|facebookException
operator|.
name|getErrorCode
argument_list|()
operator|==
literal|11
operator|||
name|facebookException
operator|.
name|getErrorCode
argument_list|()
operator|==
literal|12
operator|||
name|facebookException
operator|.
name|getErrorCode
argument_list|()
operator|==
literal|1
condition|)
block|{
name|context
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|method
init|=
operator|(
operator|(
name|FacebookEndpoint
operator|)
name|route
operator|.
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumeQueryResult"
operator|+
name|method
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock2
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumeResult"
operator|+
name|method
argument_list|)
decl_stmt|;
name|mock2
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring failed Facebook deprecated API call"
argument_list|,
name|facebookException
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|rollback
argument_list|(
name|consumer
argument_list|,
name|endpoint
argument_list|,
name|retryCounter
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start with a 30 day window for the first delayed poll
name|String
name|since
init|=
literal|"RAW("
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
name|FacebookConstants
operator|.
name|FACEBOOK_DATE_FORMAT
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|")"
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|searchNames
control|)
block|{
if|if
condition|(
operator|!
name|excludedNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// consumer.sendEmptyMessageWhenIdle is true since user may not have some items like events
name|from
argument_list|(
literal|"facebook://"
operator|+
name|name
operator|+
literal|"?reading.limit=10&reading.locale=en.US&reading.since="
operator|+
name|since
operator|+
literal|"&consumer.initialDelay=1000&consumer.sendEmptyMessageWhenIdle=true&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumeResult"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|from
argument_list|(
literal|"facebook://"
operator|+
name|name
operator|+
literal|"?query=cheese&reading.limit=10&reading.locale=en.US&reading.since="
operator|+
name|since
operator|+
literal|"&consumer.initialDelay=1000&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumeQueryResult"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|from
argument_list|(
literal|"facebook://me?jsonStoreEnabled=true&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:testJsonStoreEnabled"
argument_list|)
expr_stmt|;
comment|// test unix timestamp support
name|long
name|unixSince
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|-
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"facebook://page?pageId="
operator|+
name|APACHE_FOUNDATION_PAGE_ID
operator|+
literal|"&reading.limit=10&reading.since="
operator|+
name|unixSince
operator|+
literal|"&"
operator|+
name|getOauthParams
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:testPage"
argument_list|)
expr_stmt|;
comment|// TODO add tests for the rest of the supported methods
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

