begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.facebook
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookMethodsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookPropertiesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|ReadingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|facebook4j
operator|.
name|Reading
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|FacebookConstants
operator|.
name|FACEBOOK_DATE_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|FacebookConstants
operator|.
name|READING_PPROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|FacebookConstants
operator|.
name|READING_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookMethodsTypeHelper
operator|.
name|MatchType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookMethodsTypeHelper
operator|.
name|filterMethods
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookMethodsTypeHelper
operator|.
name|getHighestPriorityMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookMethodsTypeHelper
operator|.
name|getMissingProperties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
operator|.
name|FacebookMethodsTypeHelper
operator|.
name|invokeMethod
import|;
end_import

begin_comment
comment|/**  * The Facebook consumer.  */
end_comment

begin_class
DECL|class|FacebookConsumer
specifier|public
class|class
name|FacebookConsumer
extends|extends
name|ScheduledPollConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FacebookConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SINCE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SINCE_PREFIX
init|=
literal|"since="
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|FacebookEndpoint
name|endpoint
decl_stmt|;
DECL|field|method
specifier|private
specifier|final
name|FacebookMethodsType
name|method
decl_stmt|;
DECL|field|endpointProperties
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|endpointProperties
decl_stmt|;
DECL|field|sinceTime
specifier|private
name|String
name|sinceTime
decl_stmt|;
DECL|field|untilTime
specifier|private
name|String
name|untilTime
decl_stmt|;
DECL|method|FacebookConsumer (FacebookEndpoint endpoint, Processor processor)
specifier|public
name|FacebookConsumer
parameter_list|(
name|FacebookEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
comment|// determine the consumer method to invoke
name|this
operator|.
name|method
operator|=
name|findMethod
argument_list|(
name|endpoint
operator|.
name|getCandidates
argument_list|()
argument_list|)
expr_stmt|;
comment|// get endpoint properties in a map
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|FacebookPropertiesHelper
operator|.
name|getEndpointProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
comment|// skip since and until fields?
specifier|final
name|Reading
name|reading
init|=
operator|(
name|Reading
operator|)
name|properties
operator|.
name|get
argument_list|(
name|READING_PPROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|reading
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|queryString
init|=
name|reading
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryString
operator|.
name|contains
argument_list|(
literal|"since="
argument_list|)
condition|)
block|{
comment|// use the user supplied value to start with
specifier|final
name|int
name|startIndex
init|=
name|queryString
operator|.
name|indexOf
argument_list|(
name|SINCE_PREFIX
argument_list|)
operator|+
name|SINCE_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|endIndex
init|=
name|queryString
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|startIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|endIndex
operator|=
name|queryString
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|sinceTime
operator|=
name|queryString
operator|.
name|substring
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"%3(a|A)"
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using supplied property {}since value {}"
argument_list|,
name|READING_PREFIX
argument_list|,
name|this
operator|.
name|sinceTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryString
operator|.
name|contains
argument_list|(
literal|"until="
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding configured property {}until"
argument_list|,
name|READING_PREFIX
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|endpointProperties
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
DECL|method|findMethod (List<FacebookMethodsType> candidates)
specifier|private
name|FacebookMethodsType
name|findMethod
parameter_list|(
name|List
argument_list|<
name|FacebookMethodsType
argument_list|>
name|candidates
parameter_list|)
block|{
name|FacebookMethodsType
name|result
decl_stmt|;
comment|// find one that takes the largest subset of endpoint parameters
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|argNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|argNames
operator|.
name|addAll
argument_list|(
name|FacebookPropertiesHelper
operator|.
name|getEndpointPropertyNames
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add reading property for polling, if it doesn't already exist!
name|argNames
operator|.
name|add
argument_list|(
name|READING_PPROPERTY
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|argNamesArray
init|=
name|argNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FacebookMethodsType
argument_list|>
name|filteredMethods
init|=
name|filterMethods
argument_list|(
name|endpoint
operator|.
name|getCandidates
argument_list|()
argument_list|,
name|MatchType
operator|.
name|SUPER_SET
argument_list|,
name|argNamesArray
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing properties for %s, need one or more from %s"
argument_list|,
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|getMissingProperties
argument_list|(
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getNameStyle
argument_list|()
argument_list|,
name|argNames
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|filteredMethods
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// single match
name|result
operator|=
name|filteredMethods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|getHighestPriorityMethod
argument_list|(
name|filteredMethods
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using highest priority method {} from methods {}"
argument_list|,
name|method
argument_list|,
name|filteredMethods
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Note mark this consumer as not greedy to avoid making too many Facebook calls
name|setGreedy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// invoke the consumer method
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
init|=
name|getMethodArguments
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|result
init|=
name|invokeMethod
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFacebook
argument_list|()
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|// process result according to type
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|(
name|result
operator|instanceof
name|Collection
operator|||
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|)
condition|)
block|{
comment|// create an exchange for every element
specifier|final
name|Object
name|array
init|=
name|getResultAsArray
argument_list|(
name|result
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|processResult
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
else|else
block|{
name|processResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
comment|// number of messages polled
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|processResult (Object result)
specifier|private
name|void
name|processResult
parameter_list|(
name|Object
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
try|try
block|{
comment|// send message to next processor in the route
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// log exception if an exception occurred and was not handled
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getResultAsArray (Object result)
specifier|private
name|Object
name|getResultAsArray
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// no conversion needed
return|return
name|result
return|;
block|}
comment|// must be a Collection
comment|// TODO add support for Paging using ResponseList
name|Collection
name|collection
init|=
operator|(
name|Collection
operator|)
name|result
decl_stmt|;
return|return
name|collection
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|collection
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getMethodArguments ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMethodArguments
parameter_list|()
block|{
comment|// start by setting the Reading since and until fields,
comment|// these are used to avoid reading duplicate results across polls
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|arguments
operator|.
name|putAll
argument_list|(
name|endpointProperties
argument_list|)
expr_stmt|;
name|Reading
name|reading
init|=
operator|(
name|Reading
operator|)
name|arguments
operator|.
name|remove
argument_list|(
name|READING_PPROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|reading
operator|==
literal|null
condition|)
block|{
name|reading
operator|=
operator|new
name|Reading
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|reading
operator|=
name|ReadingBuilder
operator|.
name|copy
argument_list|(
name|reading
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error creating property [%s]: %s"
argument_list|,
name|READING_PPROPERTY
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error creating property [%s]: %s"
argument_list|,
name|READING_PPROPERTY
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// now set since and until for this poll
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FACEBOOK_DATE_FORMAT
argument_list|)
decl_stmt|;
specifier|final
name|long
name|currentMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|sinceTime
operator|==
literal|null
condition|)
block|{
comment|// first poll, set this to (current time - initial poll delay)
specifier|final
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|(
name|currentMillis
operator|-
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|getInitialDelay
argument_list|()
argument_list|,
name|getTimeUnit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|sinceTime
operator|=
name|dateFormat
operator|.
name|format
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|untilTime
operator|!=
literal|null
condition|)
block|{
comment|// use the last 'until' time
name|this
operator|.
name|sinceTime
operator|=
name|this
operator|.
name|untilTime
expr_stmt|;
block|}
name|this
operator|.
name|untilTime
operator|=
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|currentMillis
argument_list|)
argument_list|)
expr_stmt|;
name|reading
operator|.
name|since
argument_list|(
name|this
operator|.
name|sinceTime
argument_list|)
expr_stmt|;
name|reading
operator|.
name|until
argument_list|(
name|this
operator|.
name|untilTime
argument_list|)
expr_stmt|;
name|arguments
operator|.
name|put
argument_list|(
name|READING_PPROPERTY
argument_list|,
name|reading
argument_list|)
expr_stmt|;
return|return
name|arguments
return|;
block|}
block|}
end_class

end_unit

