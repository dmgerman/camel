begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.facebook.data
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|facebook4j
operator|.
name|Reading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|facebook
operator|.
name|FacebookConstants
import|;
end_import

begin_comment
comment|/**  * Builds {@link facebook4j.Reading} instances.  */
end_comment

begin_class
DECL|class|ReadingBuilder
specifier|public
specifier|final
class|class
name|ReadingBuilder
block|{
DECL|method|ReadingBuilder ()
specifier|private
name|ReadingBuilder
parameter_list|()
block|{
comment|// Helper class
block|}
DECL|method|copy (Reading reading, boolean skipSinceUtil)
specifier|public
specifier|static
name|Reading
name|copy
parameter_list|(
name|Reading
name|reading
parameter_list|,
name|boolean
name|skipSinceUtil
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
comment|// use private field access to make a copy
name|Field
name|field
init|=
name|Reading
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"parameterMap"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|source
init|=
operator|(
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
name|reading
argument_list|)
decl_stmt|;
comment|// create another reading, and add all fields from source
name|Reading
name|copy
init|=
operator|new
name|Reading
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|copyMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|copyMap
operator|.
name|putAll
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipSinceUtil
condition|)
block|{
name|copyMap
operator|.
name|remove
argument_list|(
literal|"since"
argument_list|)
expr_stmt|;
name|copyMap
operator|.
name|remove
argument_list|(
literal|"until"
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|set
argument_list|(
name|copy
argument_list|,
name|copyMap
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|/**      * Sets Reading properties.      * @param reading Reading object to populate      * @param readingProperties Map to extract properties      */
DECL|method|setProperties (Reading reading, Map<String, Object> readingProperties)
specifier|public
specifier|static
name|void
name|setProperties
parameter_list|(
name|Reading
name|reading
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|readingProperties
parameter_list|)
block|{
specifier|final
name|String
name|fields
init|=
operator|(
name|String
operator|)
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|reading
operator|.
name|fields
argument_list|(
name|fields
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|limit
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"limit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|reading
operator|.
name|limit
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|offset
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"offset"
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|reading
operator|.
name|offset
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|offset
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|FacebookConstants
operator|.
name|FACEBOOK_DATE_FORMAT
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|until
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"until"
argument_list|)
decl_stmt|;
if|if
condition|(
name|until
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reading
operator|.
name|until
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|until
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error parsing property 'until' :"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Object
name|since
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"since"
argument_list|)
decl_stmt|;
if|if
condition|(
name|since
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reading
operator|.
name|since
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|since
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error parsing property 'since' :"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Object
name|metadata
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"metadata"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|metadata
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|reading
operator|.
name|metadata
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Object
name|locale
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"locale"
argument_list|)
decl_stmt|;
if|if
condition|(
name|locale
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|args
init|=
name|locale
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|args
operator|.
name|length
condition|)
block|{
case|case
literal|1
case|:
name|reading
operator|.
name|locale
argument_list|(
operator|new
name|Locale
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|reading
operator|.
name|locale
argument_list|(
operator|new
name|Locale
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|reading
operator|.
name|locale
argument_list|(
operator|new
name|Locale
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid value for property 'locale' %s, "
operator|+
literal|"must be of the form [language][,country][,variant]"
argument_list|,
name|locale
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Object
name|with
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"with"
argument_list|)
decl_stmt|;
if|if
condition|(
name|with
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|with
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|reading
operator|.
name|withLocation
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Object
name|filter
init|=
name|readingProperties
operator|.
name|remove
argument_list|(
literal|"filter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|reading
operator|.
name|filter
argument_list|(
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

