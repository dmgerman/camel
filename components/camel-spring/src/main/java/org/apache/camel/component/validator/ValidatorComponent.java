begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ProcessorEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
operator|.
name|SpringValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|DefaultResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The<a href="http://activemq.apache.org/camel/validator.html">Validator Component</a>  * for validating XML against some schema  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|ValidatorComponent
specifier|public
class|class
name|ValidatorComponent
extends|extends
name|DefaultComponent
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ValidatorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceLoader
specifier|private
name|ResourceLoader
name|resourceLoader
init|=
operator|new
name|DefaultResourceLoader
argument_list|()
decl_stmt|;
DECL|method|getResourceLoader ()
specifier|public
name|ResourceLoader
name|getResourceLoader
parameter_list|()
block|{
return|return
name|resourceLoader
return|;
block|}
DECL|method|setResourceLoader (ResourceLoader resourceLoader)
specifier|public
name|void
name|setResourceLoader
parameter_list|(
name|ResourceLoader
name|resourceLoader
parameter_list|)
block|{
name|this
operator|.
name|resourceLoader
operator|=
name|resourceLoader
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map parameters)
specifier|protected
name|Endpoint
argument_list|<
name|Exchange
argument_list|>
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|SpringValidator
name|validator
init|=
operator|new
name|SpringValidator
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|resolveMandatoryResource
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|validator
operator|.
name|setSchemaResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|this
operator|+
literal|" using schema resource: "
operator|+
name|resource
argument_list|)
expr_stmt|;
block|}
name|configureValidator
argument_list|(
name|validator
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|ProcessorEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|validator
argument_list|)
return|;
block|}
DECL|method|configureValidator (SpringValidator validator, String uri, String remaining, Map parameters)
specifier|protected
name|void
name|configureValidator
parameter_list|(
name|SpringValidator
name|validator
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|validator
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
DECL|method|resolveMandatoryResource (String uri)
specifier|protected
name|Resource
name|resolveMandatoryResource
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|getResourceLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find resource for URI: "
operator|+
name|uri
operator|+
literal|" using: "
operator|+
name|getResourceLoader
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|resource
return|;
block|}
block|}
block|}
end_class

end_unit

