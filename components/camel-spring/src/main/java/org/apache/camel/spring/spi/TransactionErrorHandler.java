begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|ErrorHandlerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|exceptionpolicy
operator|.
name|ExceptionPolicyStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|DefaultTransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallbackWithoutResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionSynchronizationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_comment
comment|/**  * The<a href="http://camel.apache.org/transactional-client.html">Transactional Client</a>  * EIP pattern.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|TransactionErrorHandler
specifier|public
class|class
name|TransactionErrorHandler
extends|extends
name|ErrorHandlerSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransactionErrorHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|transactionTemplate
specifier|private
specifier|final
name|TransactionTemplate
name|transactionTemplate
decl_stmt|;
DECL|field|output
specifier|private
name|Processor
name|output
decl_stmt|;
DECL|method|TransactionErrorHandler (TransactionTemplate transactionTemplate)
specifier|public
name|TransactionErrorHandler
parameter_list|(
name|TransactionTemplate
name|transactionTemplate
parameter_list|)
block|{
name|this
operator|.
name|transactionTemplate
operator|=
name|transactionTemplate
expr_stmt|;
block|}
DECL|method|TransactionErrorHandler (TransactionTemplate transactionTemplate, Processor output, ExceptionPolicyStrategy exceptionPolicy)
specifier|public
name|TransactionErrorHandler
parameter_list|(
name|TransactionTemplate
name|transactionTemplate
parameter_list|,
name|Processor
name|output
parameter_list|,
name|ExceptionPolicyStrategy
name|exceptionPolicy
parameter_list|)
block|{
name|this
operator|.
name|transactionTemplate
operator|=
name|transactionTemplate
expr_stmt|;
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|setExceptionPolicy
argument_list|(
name|exceptionPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
comment|// if no output then dont do any description
return|return
literal|""
return|;
block|}
return|return
literal|"TransactionErrorHandler:"
operator|+
name|propagationBehaviorToString
argument_list|(
name|transactionTemplate
operator|.
name|getPropagationBehavior
argument_list|()
argument_list|)
operator|+
literal|"["
operator|+
name|getOutput
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|process (final Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|output
operator|==
literal|null
condition|)
block|{
comment|// no output then just return as nothing to wrap in a transaction
return|return;
block|}
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallbackWithoutResult
argument_list|()
block|{
specifier|protected
name|void
name|doInTransactionWithoutResult
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
comment|// wrapper exception to throw if the exchange failed
comment|// IMPORTANT: Must be a runtime exception to let Spring regard it as to do "rollback"
name|TransactedRuntimeCamelException
name|rce
decl_stmt|;
comment|// find out if there is an actual transaction alive, and thus we are in transacted mode
name|boolean
name|activeTx
init|=
name|TransactionSynchronizationManager
operator|.
name|isActualTransactionActive
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|activeTx
condition|)
block|{
name|activeTx
operator|=
name|status
operator|.
name|isNewTransaction
argument_list|()
operator|&&
operator|!
name|status
operator|.
name|isCompleted
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|activeTx
condition|)
block|{
if|if
condition|(
name|DefaultTransactionStatus
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|status
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|DefaultTransactionStatus
name|defStatus
init|=
name|DefaultTransactionStatus
operator|.
name|class
operator|.
name|cast
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|activeTx
operator|=
name|defStatus
operator|.
name|hasTransaction
argument_list|()
operator|&&
operator|!
name|status
operator|.
name|isCompleted
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Is actual transaction active: "
operator|+
name|activeTx
argument_list|)
expr_stmt|;
block|}
comment|// okay mark the exchange as transacted, then the DeadLetterChannel or others know
comment|// its a transacted exchange
if|if
condition|(
name|activeTx
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TRANSACTED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// process the exchange
name|output
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// an exception occured maybe an onException can handle it
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// handle onException
comment|// but test beforehand if we have already handled it, if so we should not do it again
name|boolean
name|handled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|instanceof
name|TransactedRuntimeCamelException
condition|)
block|{
name|TransactedRuntimeCamelException
name|trce
init|=
name|exchange
operator|.
name|getException
argument_list|(
name|TransactedRuntimeCamelException
operator|.
name|class
argument_list|)
decl_stmt|;
name|handled
operator|=
name|trce
operator|.
name|isHandled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|handled
condition|)
block|{
comment|// not handled before so handle it once
name|handleException
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|// after handling and still an exception or marked as rollback only then rollback
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|||
name|exchange
operator|.
name|isRollbackOnly
argument_list|()
condition|)
block|{
name|rce
operator|=
name|wrapTransactedRuntimeException
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeTx
condition|)
block|{
name|status
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|rce
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting transaction to rollbackOnly due to exception being thrown: "
operator|+
name|rce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting transaction to rollbackOnly as Exchange was marked as rollback only"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// rethrow if an exception occured
if|if
condition|(
name|rce
operator|!=
literal|null
condition|)
block|{
throw|throw
name|rce
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|wrapTransactedRuntimeException (Exception exception)
specifier|protected
name|TransactedRuntimeCamelException
name|wrapTransactedRuntimeException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|TransactedRuntimeCamelException
condition|)
block|{
return|return
operator|(
name|TransactedRuntimeCamelException
operator|)
name|exception
return|;
block|}
else|else
block|{
name|TransactedRuntimeCamelException
name|answer
init|=
operator|new
name|TransactedRuntimeCamelException
argument_list|(
name|exception
argument_list|)
decl_stmt|;
comment|// Mark as handled so we dont want to handle the same exception twice or more in other
comment|// wrapped transaction error handlers in this route.
comment|// We need to mark this information in the exception as we need to propagage
comment|// the exception back by rehtrowing it. We cannot mark it on the exchange as Camel
comment|// uses copies of exchanges in its pipeline and the data isnt copied back in case
comment|// when an exception occured
name|answer
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
comment|/**      * Handles when an exception occured during processing. Is used to let the exception policy      * deal with it, eg letting an onException handle it.      *      * @param exchange  the current exchange      */
DECL|method|handleException (Exchange exchange)
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Exception
name|e
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// store the original caused exception in a property, so we can restore it later
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// find the error handler to use (if any)
name|OnExceptionDefinition
name|exceptionPolicy
init|=
name|getExceptionPolicy
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionPolicy
operator|!=
literal|null
condition|)
block|{
name|Predicate
name|handledPredicate
init|=
name|exceptionPolicy
operator|.
name|getHandledPolicy
argument_list|()
decl_stmt|;
name|Processor
name|processor
init|=
name|exceptionPolicy
operator|.
name|getErrorHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|prepareExchangeBeforeOnException
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|deliverToFaultProcessor
argument_list|(
name|exchange
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|prepareExchangeAfterOnException
argument_list|(
name|exchange
argument_list|,
name|handledPredicate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deliverToFaultProcessor (Exchange exchange, Processor faultProcessor)
specifier|private
name|void
name|deliverToFaultProcessor
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|faultProcessor
parameter_list|)
block|{
try|try
block|{
name|faultProcessor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fault processor also failed so set the exception
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareExchangeBeforeOnException (Exchange exchange)
specifier|private
name|void
name|prepareExchangeBeforeOnException
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// okay lower the exception as we are handling it by onException
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// clear rollback flags
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ROLLBACK_ONLY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// reset cached streams so they can be read again
name|MessageHelper
operator|.
name|resetStreamCache
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareExchangeAfterOnException (Exchange exchange, Predicate handledPredicate)
specifier|private
name|void
name|prepareExchangeAfterOnException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Predicate
name|handledPredicate
parameter_list|)
block|{
if|if
condition|(
name|handledPredicate
operator|==
literal|null
operator|||
operator|!
name|handledPredicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This exchange is not handled so its marked as rollback only: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// exception not handled, put exception back in the exchange
name|exchange
operator|.
name|setException
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// mark as rollback so we dont do multiple onException for this one
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|ROLLBACK_ONLY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This exchange is handled so its marked as not failed: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_HANDLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|propagationBehaviorToString (int propagationBehavior)
specifier|protected
name|String
name|propagationBehaviorToString
parameter_list|(
name|int
name|propagationBehavior
parameter_list|)
block|{
name|String
name|rc
decl_stmt|;
switch|switch
condition|(
name|propagationBehavior
condition|)
block|{
case|case
name|TransactionDefinition
operator|.
name|PROPAGATION_MANDATORY
case|:
name|rc
operator|=
literal|"PROPAGATION_MANDATORY"
expr_stmt|;
break|break;
case|case
name|TransactionDefinition
operator|.
name|PROPAGATION_NESTED
case|:
name|rc
operator|=
literal|"PROPAGATION_NESTED"
expr_stmt|;
break|break;
case|case
name|TransactionDefinition
operator|.
name|PROPAGATION_NEVER
case|:
name|rc
operator|=
literal|"PROPAGATION_NEVER"
expr_stmt|;
break|break;
case|case
name|TransactionDefinition
operator|.
name|PROPAGATION_NOT_SUPPORTED
case|:
name|rc
operator|=
literal|"PROPAGATION_NOT_SUPPORTED"
expr_stmt|;
break|break;
case|case
name|TransactionDefinition
operator|.
name|PROPAGATION_REQUIRED
case|:
name|rc
operator|=
literal|"PROPAGATION_REQUIRED"
expr_stmt|;
break|break;
case|case
name|TransactionDefinition
operator|.
name|PROPAGATION_REQUIRES_NEW
case|:
name|rc
operator|=
literal|"PROPAGATION_REQUIRES_NEW"
expr_stmt|;
break|break;
case|case
name|TransactionDefinition
operator|.
name|PROPAGATION_SUPPORTS
case|:
name|rc
operator|=
literal|"PROPAGATION_SUPPORTS"
expr_stmt|;
break|break;
default|default:
name|rc
operator|=
literal|"UNKNOWN"
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the output processor      */
DECL|method|getOutput ()
specifier|public
name|Processor
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
DECL|method|setOutput (Processor output)
specifier|public
name|void
name|setOutput
parameter_list|(
name|Processor
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
block|}
end_class

end_unit

