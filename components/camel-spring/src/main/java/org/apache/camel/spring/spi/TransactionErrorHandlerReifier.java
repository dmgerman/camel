begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ErrorHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|errorhandler
operator|.
name|DefaultErrorHandlerReifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TransactedPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransactedDefinition
operator|.
name|PROPAGATION_REQUIRED
import|;
end_import

begin_class
DECL|class|TransactionErrorHandlerReifier
specifier|public
class|class
name|TransactionErrorHandlerReifier
extends|extends
name|DefaultErrorHandlerReifier
argument_list|<
name|TransactionErrorHandlerBuilder
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransactionErrorHandlerReifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TransactionErrorHandlerReifier (ErrorHandlerFactory definition)
specifier|public
name|TransactionErrorHandlerReifier
parameter_list|(
name|ErrorHandlerFactory
name|definition
parameter_list|)
block|{
name|super
argument_list|(
name|definition
argument_list|)
expr_stmt|;
block|}
DECL|method|createErrorHandler (RouteContext routeContext, Processor processor)
specifier|public
name|Processor
name|createErrorHandler
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|TransactionTemplate
name|transactionTemplate
init|=
name|definition
operator|.
name|getTransactionTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|transactionTemplate
operator|==
literal|null
condition|)
block|{
comment|// lookup in context if no transaction template has been configured
name|LOG
operator|.
name|debug
argument_list|(
literal|"No TransactionTemplate configured on TransactionErrorHandlerBuilder. Will try find it in the registry."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TransactedPolicy
argument_list|>
name|mapPolicy
init|=
name|routeContext
operator|.
name|lookupByType
argument_list|(
name|TransactedPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapPolicy
operator|!=
literal|null
operator|&&
name|mapPolicy
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|TransactedPolicy
name|policy
init|=
name|mapPolicy
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|SpringTransactionPolicy
condition|)
block|{
name|transactionTemplate
operator|=
operator|(
operator|(
name|SpringTransactionPolicy
operator|)
name|policy
operator|)
operator|.
name|getTransactionTemplate
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transactionTemplate
operator|==
literal|null
condition|)
block|{
name|TransactedPolicy
name|policy
init|=
name|routeContext
operator|.
name|lookup
argument_list|(
name|PROPAGATION_REQUIRED
argument_list|,
name|TransactedPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|SpringTransactionPolicy
condition|)
block|{
name|transactionTemplate
operator|=
operator|(
operator|(
name|SpringTransactionPolicy
operator|)
name|policy
operator|)
operator|.
name|getTransactionTemplate
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transactionTemplate
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TransactionTemplate
argument_list|>
name|mapTemplate
init|=
name|routeContext
operator|.
name|lookupByType
argument_list|(
name|TransactionTemplate
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapTemplate
operator|==
literal|null
operator|||
name|mapTemplate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No TransactionTemplate found in registry."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mapTemplate
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|transactionTemplate
operator|=
name|mapTemplate
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found {} TransactionTemplate in registry. Cannot determine which one to use. "
operator|+
literal|"Please configure a TransactionTemplate on the TransactionErrorHandlerBuilder"
argument_list|,
name|mapTemplate
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transactionTemplate
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PlatformTransactionManager
argument_list|>
name|mapManager
init|=
name|routeContext
operator|.
name|lookupByType
argument_list|(
name|PlatformTransactionManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapManager
operator|==
literal|null
operator|||
name|mapManager
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No PlatformTransactionManager found in registry."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mapManager
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|transactionTemplate
operator|=
operator|new
name|TransactionTemplate
argument_list|(
name|mapManager
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found {} PlatformTransactionManager in registry. Cannot determine which one to use for TransactionTemplate. "
operator|+
literal|"Please configure a TransactionTemplate on the TransactionErrorHandlerBuilder"
argument_list|,
name|mapManager
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transactionTemplate
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found TransactionTemplate in registry to use: {}"
argument_list|,
name|transactionTemplate
argument_list|)
expr_stmt|;
block|}
block|}
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|transactionTemplate
argument_list|,
literal|"transactionTemplate"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|TransactionErrorHandler
name|answer
init|=
operator|new
name|TransactionErrorHandler
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|processor
argument_list|,
name|definition
operator|.
name|getLogger
argument_list|()
argument_list|,
name|definition
operator|.
name|getOnRedelivery
argument_list|()
argument_list|,
name|definition
operator|.
name|getRedeliveryPolicy
argument_list|()
argument_list|,
name|definition
operator|.
name|getExceptionPolicyStrategy
argument_list|()
argument_list|,
name|transactionTemplate
argument_list|,
name|definition
operator|.
name|getRetryWhilePolicy
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
argument_list|,
name|getExecutorService
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
argument_list|,
name|definition
operator|.
name|getRollbackLoggingLevel
argument_list|()
argument_list|,
name|definition
operator|.
name|getOnExceptionOccurred
argument_list|()
argument_list|)
decl_stmt|;
comment|// configure error handler before we can use it
name|configure
argument_list|(
name|routeContext
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

