begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.handler
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelPropertyPlaceholderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SendDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NamespaceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelConsumerTemplateFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelContextFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelEndpointFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelJMXAgentDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelProducerTemplateFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|remoting
operator|.
name|CamelProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|remoting
operator|.
name|CamelServiceExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|view
operator|.
name|ModelFileGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanDefinitionStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|RuntimeBeanReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|parsing
operator|.
name|BeanComponentDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|NamespaceHandlerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_comment
comment|/**  * Camel namespace for the spring XML configuration file.  */
end_comment

begin_class
DECL|class|CamelNamespaceHandler
specifier|public
class|class
name|CamelNamespaceHandler
extends|extends
name|NamespaceHandlerSupport
block|{
DECL|field|SPRING_NS
specifier|private
specifier|static
specifier|final
name|String
name|SPRING_NS
init|=
literal|"http://camel.apache.org/schema/spring"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CamelNamespaceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpointParser
specifier|protected
name|BeanDefinitionParser
name|endpointParser
init|=
operator|new
name|BeanDefinitionParser
argument_list|(
name|CamelEndpointFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|beanPostProcessorParser
specifier|protected
name|BeanDefinitionParser
name|beanPostProcessorParser
init|=
operator|new
name|BeanDefinitionParser
argument_list|(
name|CamelBeanPostProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|parserElementNames
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|parserElementNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jaxbContext
specifier|private
name|JAXBContext
name|jaxbContext
decl_stmt|;
DECL|field|parserMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BeanDefinitionParser
argument_list|>
name|parserMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BeanDefinitionParser
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|autoRegisterMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BeanDefinition
argument_list|>
name|autoRegisterMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BeanDefinition
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|renameNamespaceRecursive (Node node)
specifier|public
specifier|static
name|void
name|renameNamespaceRecursive
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Document
name|doc
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|)
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|startsWith
argument_list|(
name|SPRING_NS
operator|+
literal|"/v"
argument_list|)
condition|)
block|{
name|doc
operator|.
name|renameNode
argument_list|(
name|node
argument_list|,
name|SPRING_NS
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeList
name|list
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|renameNamespaceRecursive
argument_list|(
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createModelFileGenerator ()
specifier|public
name|ModelFileGenerator
name|createModelFileGenerator
parameter_list|()
throws|throws
name|JAXBException
block|{
return|return
operator|new
name|ModelFileGenerator
argument_list|(
name|getJaxbContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|addBeanDefinitionParser
argument_list|(
literal|"proxy"
argument_list|,
name|CamelProxyFactoryBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addBeanDefinitionParser
argument_list|(
literal|"template"
argument_list|,
name|CamelProducerTemplateFactoryBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addBeanDefinitionParser
argument_list|(
literal|"consumerTemplate"
argument_list|,
name|CamelConsumerTemplateFactoryBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addBeanDefinitionParser
argument_list|(
literal|"export"
argument_list|,
name|CamelServiceExporter
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addBeanDefinitionParser
argument_list|(
literal|"endpoint"
argument_list|,
name|CamelEndpointFactoryBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// jmx agent and property placeholder cannot be used outside of the camel context
name|addBeanDefinitionParser
argument_list|(
literal|"jmxAgent"
argument_list|,
name|CamelJMXAgentDefinition
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addBeanDefinitionParser
argument_list|(
literal|"propertyPlaceholder"
argument_list|,
name|CamelPropertyPlaceholderDefinition
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// camel context
name|boolean
name|osgi
init|=
literal|false
decl_stmt|;
name|Class
name|cl
init|=
name|CamelContextFactoryBean
operator|.
name|class
decl_stmt|;
try|try
block|{
name|cl
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.camel.osgi.CamelContextFactoryBean"
argument_list|)
expr_stmt|;
name|osgi
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// not running with camel-osgi so we fallback to the regular factory bean
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot find class so assuming not running in OSGi container: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|osgi
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"camel-osgi.jar/camel-spring-osgi.jar detected in classpath"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"camel-osgi.jar/camel-spring-osgi.jar not detected in classpath"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using "
operator|+
name|cl
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" as CamelContextBeanDefinitionParser"
argument_list|)
expr_stmt|;
block|}
name|registerParser
argument_list|(
literal|"camelContext"
argument_list|,
operator|new
name|CamelContextBeanDefinitionParser
argument_list|(
name|cl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addBeanDefinitionParser (String elementName, Class<?> type, boolean register)
specifier|private
name|void
name|addBeanDefinitionParser
parameter_list|(
name|String
name|elementName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|boolean
name|register
parameter_list|)
block|{
name|BeanDefinitionParser
name|parser
init|=
operator|new
name|BeanDefinitionParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|register
condition|)
block|{
name|registerParser
argument_list|(
name|elementName
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
name|parserMap
operator|.
name|put
argument_list|(
name|elementName
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
DECL|method|createBeanPostProcessor (ParserContext parserContext, String contextId, Element childElement, BeanDefinitionBuilder parentBuilder)
specifier|protected
name|void
name|createBeanPostProcessor
parameter_list|(
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|contextId
parameter_list|,
name|Element
name|childElement
parameter_list|,
name|BeanDefinitionBuilder
name|parentBuilder
parameter_list|)
block|{
name|String
name|beanPostProcessorId
init|=
name|contextId
operator|+
literal|":beanPostProcessor"
decl_stmt|;
name|childElement
operator|.
name|setAttribute
argument_list|(
literal|"id"
argument_list|,
name|beanPostProcessorId
argument_list|)
expr_stmt|;
name|BeanDefinition
name|definition
init|=
name|beanPostProcessorParser
operator|.
name|parse
argument_list|(
name|childElement
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
comment|// only register to camel context id as a String. Then we can look it up later
comment|// otherwise we get a circular reference in spring and it will not allow custom bean post processing
comment|// see more at CAMEL-1663
name|definition
operator|.
name|getPropertyValues
argument_list|()
operator|.
name|addPropertyValue
argument_list|(
literal|"camelId"
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
name|parentBuilder
operator|.
name|addPropertyReference
argument_list|(
literal|"beanPostProcessor"
argument_list|,
name|beanPostProcessorId
argument_list|)
expr_stmt|;
block|}
DECL|method|registerParser (String name, org.springframework.beans.factory.xml.BeanDefinitionParser parser)
specifier|protected
name|void
name|registerParser
parameter_list|(
name|String
name|name
parameter_list|,
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|BeanDefinitionParser
name|parser
parameter_list|)
block|{
name|parserElementNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registerBeanDefinitionParser
argument_list|(
name|name
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
DECL|method|parseUsingJaxb (Element element, ParserContext parserContext, Binder<Node> binder)
specifier|protected
name|Object
name|parseUsingJaxb
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
parameter_list|)
block|{
try|try
block|{
return|return
name|binder
operator|.
name|unmarshal
argument_list|(
name|element
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BeanDefinitionStoreException
argument_list|(
literal|"Failed to parse JAXB element: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getJaxbContext ()
specifier|public
name|JAXBContext
name|getJaxbContext
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|jaxbContext
operator|==
literal|null
condition|)
block|{
name|jaxbContext
operator|=
name|createJaxbContext
argument_list|()
expr_stmt|;
block|}
return|return
name|jaxbContext
return|;
block|}
DECL|method|createJaxbContext ()
specifier|protected
name|JAXBContext
name|createJaxbContext
parameter_list|()
throws|throws
name|JAXBException
block|{
name|StringBuilder
name|packages
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|getJaxbPackages
argument_list|()
control|)
block|{
if|if
condition|(
name|packages
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packages
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|packages
operator|.
name|append
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cl
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|packages
operator|.
name|toString
argument_list|()
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getJaxbPackages ()
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|>
name|getJaxbPackages
parameter_list|()
block|{
name|Set
argument_list|<
name|Class
argument_list|>
name|classes
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelContextFactoryBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|config
operator|.
name|StreamResequencerConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|DataFormatsDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
operator|.
name|RoundRobinLoadBalancerDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|classes
return|;
block|}
DECL|class|CamelContextBeanDefinitionParser
specifier|protected
class|class
name|CamelContextBeanDefinitionParser
extends|extends
name|BeanDefinitionParser
block|{
DECL|method|CamelContextBeanDefinitionParser (Class type)
specifier|public
name|CamelContextBeanDefinitionParser
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doParse (Element element, ParserContext parserContext, BeanDefinitionBuilder builder)
specifier|protected
name|void
name|doParse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|BeanDefinitionBuilder
name|builder
parameter_list|)
block|{
name|renameNamespaceRecursive
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|super
operator|.
name|doParse
argument_list|(
name|element
argument_list|,
name|parserContext
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|String
name|contextId
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
comment|// lets avoid folks having to explicitly give an ID to a camel context
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|contextId
argument_list|)
condition|)
block|{
name|contextId
operator|=
literal|"camelContext"
expr_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
literal|"id"
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
comment|// now lets parse the routes with JAXB
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|binder
operator|=
name|getJaxbContext
argument_list|()
operator|.
name|createBinder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BeanDefinitionStoreException
argument_list|(
literal|"Failed to create the JAXB binder : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|parseUsingJaxb
argument_list|(
name|element
argument_list|,
name|parserContext
argument_list|,
name|binder
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|CamelContextFactoryBean
condition|)
block|{
comment|// set the property value with the JAXB parsed value
name|CamelContextFactoryBean
name|factoryBean
init|=
operator|(
name|CamelContextFactoryBean
operator|)
name|value
decl_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"id"
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"routes"
argument_list|,
name|factoryBean
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"intercepts"
argument_list|,
name|factoryBean
operator|.
name|getIntercepts
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"interceptFroms"
argument_list|,
name|factoryBean
operator|.
name|getInterceptFroms
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"interceptSendToEndpoints"
argument_list|,
name|factoryBean
operator|.
name|getInterceptSendToEndpoints
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"dataFormats"
argument_list|,
name|factoryBean
operator|.
name|getDataFormats
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"onCompletions"
argument_list|,
name|factoryBean
operator|.
name|getOnCompletions
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"onExceptions"
argument_list|,
name|factoryBean
operator|.
name|getOnExceptions
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"builderRefs"
argument_list|,
name|factoryBean
operator|.
name|getBuilderRefs
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"properties"
argument_list|,
name|factoryBean
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"packageScan"
argument_list|,
name|factoryBean
operator|.
name|getPackageScan
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|factoryBean
operator|.
name|getPackages
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"packages"
argument_list|,
name|factoryBean
operator|.
name|getPackages
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"camelPropertyPlaceholder"
argument_list|,
name|factoryBean
operator|.
name|getCamelPropertyPlaceholder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"camelJMXAgent"
argument_list|,
name|factoryBean
operator|.
name|getCamelJMXAgent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|createdBeanPostProcessor
init|=
literal|false
decl_stmt|;
name|NodeList
name|list
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|childElement
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|String
name|localName
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"beanPostProcessor"
argument_list|)
condition|)
block|{
name|createBeanPostProcessor
argument_list|(
name|parserContext
argument_list|,
name|contextId
argument_list|,
name|childElement
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|createdBeanPostProcessor
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"endpoint"
argument_list|)
condition|)
block|{
name|registerEndpoint
argument_list|(
name|childElement
argument_list|,
name|parserContext
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BeanDefinitionParser
name|parser
init|=
name|parserMap
operator|.
name|get
argument_list|(
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|BeanDefinition
name|definition
init|=
name|parser
operator|.
name|parse
argument_list|(
name|childElement
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|childElement
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|parserContext
operator|.
name|registerComponent
argument_list|(
operator|new
name|BeanComponentDefinition
argument_list|(
name|definition
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the templates with the camel context
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"template"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"consumerTemplate"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"proxy"
argument_list|)
operator|||
name|localName
operator|.
name|equals
argument_list|(
literal|"export"
argument_list|)
condition|)
block|{
comment|// set the camel context
name|definition
operator|.
name|getPropertyValues
argument_list|()
operator|.
name|addPropertyValue
argument_list|(
literal|"camelContext"
argument_list|,
operator|new
name|RuntimeBeanReference
argument_list|(
name|contextId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// register as endpoint defined indirectly in the routes by from/to types having id explicit set
name|registerEndpointsWithIdsDefinedInFromOrToTypes
argument_list|(
name|element
argument_list|,
name|parserContext
argument_list|,
name|contextId
argument_list|,
name|binder
argument_list|)
expr_stmt|;
comment|// register templates if not already defined
name|registerTemplates
argument_list|(
name|element
argument_list|,
name|parserContext
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
comment|// lets inject the namespaces into any namespace aware POJOs
name|injectNamespaces
argument_list|(
name|element
argument_list|,
name|binder
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|createdBeanPostProcessor
condition|)
block|{
comment|// no bean processor element so lets create it by our self
name|Element
name|childElement
init|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"beanPostProcessor"
argument_list|)
decl_stmt|;
name|element
operator|.
name|appendChild
argument_list|(
name|childElement
argument_list|)
expr_stmt|;
name|createBeanPostProcessor
argument_list|(
name|parserContext
argument_list|,
name|contextId
argument_list|,
name|childElement
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|injectNamespaces (Element element, Binder<Node> binder)
specifier|protected
name|void
name|injectNamespaces
parameter_list|(
name|Element
name|element
parameter_list|,
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
parameter_list|)
block|{
name|NodeList
name|list
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Namespaces
name|namespaces
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|childElement
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|Object
name|object
init|=
name|binder
operator|.
name|getJAXBNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|NamespaceAware
condition|)
block|{
name|NamespaceAware
name|namespaceAware
init|=
operator|(
name|NamespaceAware
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|namespaces
operator|==
literal|null
condition|)
block|{
name|namespaces
operator|=
operator|new
name|Namespaces
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|namespaces
operator|.
name|configure
argument_list|(
name|namespaceAware
argument_list|)
expr_stmt|;
block|}
name|injectNamespaces
argument_list|(
name|childElement
argument_list|,
name|binder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Used for auto registering endpoints from the<tt>from</tt> or<tt>to</tt> DSL if they have an id attribute set      */
DECL|method|registerEndpointsWithIdsDefinedInFromOrToTypes (Element element, ParserContext parserContext, String contextId, Binder<Node> binder)
specifier|protected
name|void
name|registerEndpointsWithIdsDefinedInFromOrToTypes
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|contextId
parameter_list|,
name|Binder
argument_list|<
name|Node
argument_list|>
name|binder
parameter_list|)
block|{
name|NodeList
name|list
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|childElement
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|Object
name|object
init|=
name|binder
operator|.
name|getJAXBNode
argument_list|(
name|child
argument_list|)
decl_stmt|;
comment|// we only want from/to types to be registered as endpoints
if|if
condition|(
name|object
operator|instanceof
name|FromDefinition
operator|||
name|object
operator|instanceof
name|SendDefinition
condition|)
block|{
name|registerEndpoint
argument_list|(
name|childElement
argument_list|,
name|parserContext
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
comment|// recursive
name|registerEndpointsWithIdsDefinedInFromOrToTypes
argument_list|(
name|childElement
argument_list|,
name|parserContext
argument_list|,
name|contextId
argument_list|,
name|binder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Used for auto registering producer and consumer templates if not already defined in XML.      */
DECL|method|registerTemplates (Element element, ParserContext parserContext, String contextId)
specifier|protected
name|void
name|registerTemplates
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|contextId
parameter_list|)
block|{
name|boolean
name|template
init|=
literal|false
decl_stmt|;
name|boolean
name|consumerTemplate
init|=
literal|false
decl_stmt|;
name|NodeList
name|list
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|childElement
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|String
name|localName
init|=
name|childElement
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"template"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|template
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"consumerTemplate"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|consumerTemplate
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// either we have not used template before or we have auto registered it already and therefore we
comment|// need it to allow to do it so it can remove the existing auto registered as there is now a clash id
comment|// since we have multiple camel contexts
name|boolean
name|canDoTemplate
init|=
name|autoRegisterMap
operator|.
name|get
argument_list|(
literal|"template"
argument_list|)
operator|!=
literal|null
operator|||
operator|!
name|parserContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|isBeanNameInUse
argument_list|(
literal|"template"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|template
operator|&&
name|canDoTemplate
condition|)
block|{
name|String
name|id
init|=
literal|"template"
decl_stmt|;
comment|// auto create a template
name|Element
name|templateElement
init|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"template"
argument_list|)
decl_stmt|;
name|templateElement
operator|.
name|setAttribute
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|BeanDefinitionParser
name|parser
init|=
name|parserMap
operator|.
name|get
argument_list|(
literal|"template"
argument_list|)
decl_stmt|;
name|BeanDefinition
name|definition
init|=
name|parser
operator|.
name|parse
argument_list|(
name|templateElement
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
comment|// auto register it
name|autoRegisterBeanDefinition
argument_list|(
name|id
argument_list|,
name|definition
argument_list|,
name|parserContext
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
comment|// either we have not used template before or we have auto registered it already and therefore we
comment|// need it to allow to do it so it can remove the existing auto registered as there is now a clash id
comment|// since we have multiple camel contexts
name|boolean
name|canDoConsumerTemplate
init|=
name|autoRegisterMap
operator|.
name|get
argument_list|(
literal|"consumerTemplate"
argument_list|)
operator|!=
literal|null
operator|||
operator|!
name|parserContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|isBeanNameInUse
argument_list|(
literal|"consumerTemplate"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|consumerTemplate
operator|&&
name|canDoConsumerTemplate
condition|)
block|{
name|String
name|id
init|=
literal|"consumerTemplate"
decl_stmt|;
comment|// auto create a template
name|Element
name|templateElement
init|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"consumerTemplate"
argument_list|)
decl_stmt|;
name|templateElement
operator|.
name|setAttribute
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|BeanDefinitionParser
name|parser
init|=
name|parserMap
operator|.
name|get
argument_list|(
literal|"consumerTemplate"
argument_list|)
decl_stmt|;
name|BeanDefinition
name|definition
init|=
name|parser
operator|.
name|parse
argument_list|(
name|templateElement
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
comment|// auto register it
name|autoRegisterBeanDefinition
argument_list|(
name|id
argument_list|,
name|definition
argument_list|,
name|parserContext
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoRegisterBeanDefinition (String id, BeanDefinition definition, ParserContext parserContext, String contextId)
specifier|private
name|void
name|autoRegisterBeanDefinition
parameter_list|(
name|String
name|id
parameter_list|,
name|BeanDefinition
name|definition
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|contextId
parameter_list|)
block|{
comment|// it is a bit cumbersome to work with the spring bean definition parser
comment|// as we kinda need to eagerly register the bean definition on the parser context
comment|// and then later we might find out that we should not have done that in case we have multiple camel contexts
comment|// that would have a id clash by auto registering the same bean definition with the same id such as a producer template
comment|// see if we have already auto registered this id
name|BeanDefinition
name|existing
init|=
name|autoRegisterMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
comment|// no then add it to the map and register it
name|autoRegisterMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|parserContext
operator|.
name|registerComponent
argument_list|(
operator|new
name|BeanComponentDefinition
argument_list|(
name|definition
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered default: "
operator|+
name|definition
operator|.
name|getBeanClassName
argument_list|()
operator|+
literal|" with id: "
operator|+
name|id
operator|+
literal|" on camel context: "
operator|+
name|contextId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// ups we have already registered it before with same id, but on another camel context
comment|// this is not good so we need to remove all traces of this auto registering.
comment|// end user must manually add the needed XML elements and provide unique ids access all camel context himself.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unregistered default: "
operator|+
name|definition
operator|.
name|getBeanClassName
argument_list|()
operator|+
literal|" with id: "
operator|+
name|id
operator|+
literal|" as we have multiple camel contexts and they must use unique ids."
operator|+
literal|" You must define the definition in the XML file manually to avoid id clashes when using multiple camel contexts"
argument_list|)
expr_stmt|;
block|}
name|parserContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|removeBeanDefinition
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerEndpoint (Element childElement, ParserContext parserContext, String contextId)
specifier|private
name|void
name|registerEndpoint
parameter_list|(
name|Element
name|childElement
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|contextId
parameter_list|)
block|{
name|String
name|id
init|=
name|childElement
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
comment|// must have an id to be registered
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|BeanDefinition
name|definition
init|=
name|endpointParser
operator|.
name|parse
argument_list|(
name|childElement
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
name|definition
operator|.
name|getPropertyValues
argument_list|()
operator|.
name|addPropertyValue
argument_list|(
literal|"camelContext"
argument_list|,
operator|new
name|RuntimeBeanReference
argument_list|(
name|contextId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Need to add this dependency of CamelContext for Spring 3.0
try|try
block|{
name|Method
name|method
init|=
name|definition
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setDependsOn"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|definition
argument_list|,
operator|(
name|Object
operator|)
operator|new
name|String
index|[]
block|{
name|contextId
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing here
block|}
name|parserContext
operator|.
name|registerBeanComponent
argument_list|(
operator|new
name|BeanComponentDefinition
argument_list|(
name|definition
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

