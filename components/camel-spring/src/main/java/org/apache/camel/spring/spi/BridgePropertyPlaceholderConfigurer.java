begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|ConfigurableListableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|PropertyPlaceholderConfigurer
import|;
end_import

begin_comment
comment|/**  * A {@link PropertyPlaceholderConfigurer} that bridges Camel's<a href="http://camel.apache.org/using-propertyplaceholder.html">  * property placeholder</a> with the Spring property placeholder mechanism.  */
end_comment

begin_class
DECL|class|BridgePropertyPlaceholderConfigurer
specifier|public
class|class
name|BridgePropertyPlaceholderConfigurer
extends|extends
name|PropertyPlaceholderConfigurer
implements|implements
name|PropertiesResolver
block|{
comment|// NOTE: this class must be in the spi package as if its in the root package, then Spring fails to parse the XML
comment|// files due some weird spring issue. But that is okay as having this class in the spi package is fine anyway.
DECL|field|properties
specifier|private
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|field|resolver
specifier|private
name|PropertiesResolver
name|resolver
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
annotation|@
name|Override
DECL|method|processProperties (ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)
specifier|protected
name|void
name|processProperties
parameter_list|(
name|ConfigurableListableBeanFactory
name|beanFactoryToProcess
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|BeansException
block|{
comment|// store all the spring properties so we can refer to them later
name|properties
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|super
operator|.
name|processProperties
argument_list|(
name|beanFactoryToProcess
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBeanName (String beanName)
specifier|public
name|void
name|setBeanName
parameter_list|(
name|String
name|beanName
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|beanName
expr_stmt|;
name|super
operator|.
name|setBeanName
argument_list|(
name|beanName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveProperties (CamelContext context, boolean ignoreMissingLocation, String... uri)
specifier|public
name|Properties
name|resolveProperties
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|boolean
name|ignoreMissingLocation
parameter_list|,
name|String
modifier|...
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// return the spring properties, if it
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|u
range|:
name|uri
control|)
block|{
name|String
name|ref
init|=
literal|"ref:"
operator|+
name|id
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|equals
argument_list|(
name|u
argument_list|)
condition|)
block|{
name|answer
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Properties
name|p
init|=
name|resolver
operator|.
name|resolveProperties
argument_list|(
name|context
argument_list|,
name|ignoreMissingLocation
argument_list|,
name|u
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|answer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|answer
return|;
block|}
block|}
DECL|method|setResolver (PropertiesResolver resolver)
specifier|public
name|void
name|setResolver
parameter_list|(
name|PropertiesResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
block|}
end_class

end_unit

