begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.pollingconsumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|pollingconsumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ScheduledPollConsumerScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|util
operator|.
name|CamelThreadPoolTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|scheduling
operator|.
name|concurrent
operator|.
name|ThreadPoolTaskScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|scheduling
operator|.
name|support
operator|.
name|CronTrigger
import|;
end_import

begin_comment
comment|/**  * A Spring based {@link ScheduledPollConsumerScheduler} which uses a {@link CronTrigger} to define when the  * poll should be triggered.  */
end_comment

begin_class
DECL|class|SpringScheduledPollConsumerScheduler
specifier|public
class|class
name|SpringScheduledPollConsumerScheduler
extends|extends
name|ServiceSupport
implements|implements
name|ScheduledPollConsumerScheduler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SpringScheduledPollConsumerScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|consumer
specifier|private
name|Consumer
name|consumer
decl_stmt|;
DECL|field|runnable
specifier|private
name|Runnable
name|runnable
decl_stmt|;
DECL|field|cron
specifier|private
name|String
name|cron
decl_stmt|;
DECL|field|timeZone
specifier|private
name|TimeZone
name|timeZone
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
DECL|field|trigger
specifier|private
specifier|volatile
name|CronTrigger
name|trigger
decl_stmt|;
DECL|field|taskScheduler
specifier|private
specifier|volatile
name|ThreadPoolTaskScheduler
name|taskScheduler
decl_stmt|;
DECL|field|destroyTaskScheduler
specifier|private
name|boolean
name|destroyTaskScheduler
decl_stmt|;
DECL|field|future
specifier|private
specifier|volatile
name|ScheduledFuture
name|future
decl_stmt|;
annotation|@
name|Override
DECL|method|onInit (Consumer consumer)
specifier|public
name|void
name|onInit
parameter_list|(
name|Consumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scheduleTask (Runnable runnable)
specifier|public
name|void
name|scheduleTask
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unscheduleTask ()
specifier|public
name|void
name|unscheduleTask
parameter_list|()
block|{
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|future
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|startScheduler ()
specifier|public
name|void
name|startScheduler
parameter_list|()
block|{
comment|// we start the scheduler in doStart
block|}
annotation|@
name|Override
DECL|method|isSchedulerStarted ()
specifier|public
name|boolean
name|isSchedulerStarted
parameter_list|()
block|{
return|return
name|taskScheduler
operator|!=
literal|null
operator|&&
operator|!
name|taskScheduler
operator|.
name|getScheduledExecutor
argument_list|()
operator|.
name|isShutdown
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|getCron ()
specifier|public
name|String
name|getCron
parameter_list|()
block|{
return|return
name|cron
return|;
block|}
DECL|method|setCron (String cron)
specifier|public
name|void
name|setCron
parameter_list|(
name|String
name|cron
parameter_list|)
block|{
name|this
operator|.
name|cron
operator|=
name|cron
expr_stmt|;
block|}
DECL|method|getTimeZone ()
specifier|public
name|TimeZone
name|getTimeZone
parameter_list|()
block|{
return|return
name|timeZone
return|;
block|}
DECL|method|setTimeZone (TimeZone timeZone)
specifier|public
name|void
name|setTimeZone
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
block|}
DECL|method|getTaskScheduler ()
specifier|public
name|ThreadPoolTaskScheduler
name|getTaskScheduler
parameter_list|()
block|{
return|return
name|taskScheduler
return|;
block|}
DECL|method|setTaskScheduler (ThreadPoolTaskScheduler taskScheduler)
specifier|public
name|void
name|setTaskScheduler
parameter_list|(
name|ThreadPoolTaskScheduler
name|taskScheduler
parameter_list|)
block|{
name|this
operator|.
name|taskScheduler
operator|=
name|taskScheduler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|cron
argument_list|,
literal|"cron"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|CronTrigger
argument_list|(
name|getCron
argument_list|()
argument_list|,
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskScheduler
operator|==
literal|null
condition|)
block|{
name|taskScheduler
operator|=
operator|new
name|CamelThreadPoolTaskScheduler
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|consumer
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|taskScheduler
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|destroyTaskScheduler
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scheduling cron trigger {}"
argument_list|,
name|getCron
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|=
name|taskScheduler
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|future
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|destroyTaskScheduler
condition|)
block|{
name|taskScheduler
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|taskScheduler
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

