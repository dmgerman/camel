begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A simple {@link RouteBuilder} which can be configured directly with one or more from URIs, zero or more to URIs  * and an optional bean processing step.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|SimpleRouteBuilder
specifier|public
class|class
name|SimpleRouteBuilder
extends|extends
name|RouteBuilder
block|{
DECL|field|fromUris
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fromUris
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|toUris
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|toUris
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|beanType
specifier|private
name|Class
name|beanType
decl_stmt|;
DECL|field|beanClass
specifier|private
name|String
name|beanClass
decl_stmt|;
DECL|field|beanRef
specifier|private
name|String
name|beanRef
decl_stmt|;
DECL|field|beanMethod
specifier|private
name|String
name|beanMethod
decl_stmt|;
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fromUris
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the fromUris property must contain at least one valid URI"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|fromUri
range|:
name|fromUris
control|)
block|{
name|ProcessorType
name|route
init|=
name|from
argument_list|(
name|fromUri
argument_list|)
decl_stmt|;
name|route
operator|=
name|addBeanCall
argument_list|(
name|route
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|toUri
range|:
name|toUris
control|)
block|{
name|route
operator|=
name|route
operator|.
name|to
argument_list|(
name|toUri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|setFromUri (String uri)
specifier|public
name|void
name|setFromUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|setFromUris
argument_list|(
name|singletonList
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setToUri (String uri)
specifier|public
name|void
name|setToUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|setToUris
argument_list|(
name|singletonList
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFromUris ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFromUris
parameter_list|()
block|{
return|return
name|fromUris
return|;
block|}
DECL|method|setFromUris (List<String> fromUris)
specifier|public
name|void
name|setFromUris
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fromUris
parameter_list|)
block|{
name|this
operator|.
name|fromUris
operator|=
name|fromUris
expr_stmt|;
block|}
DECL|method|getToUris ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getToUris
parameter_list|()
block|{
return|return
name|toUris
return|;
block|}
DECL|method|setToUris (List<String> toUris)
specifier|public
name|void
name|setToUris
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|toUris
parameter_list|)
block|{
name|this
operator|.
name|toUris
operator|=
name|toUris
expr_stmt|;
block|}
DECL|method|getBeanClass ()
specifier|public
name|String
name|getBeanClass
parameter_list|()
block|{
return|return
name|beanClass
return|;
block|}
DECL|method|setBeanClass (String beanClass)
specifier|public
name|void
name|setBeanClass
parameter_list|(
name|String
name|beanClass
parameter_list|)
block|{
name|this
operator|.
name|beanClass
operator|=
name|beanClass
expr_stmt|;
block|}
DECL|method|getBeanRef ()
specifier|public
name|String
name|getBeanRef
parameter_list|()
block|{
return|return
name|beanRef
return|;
block|}
DECL|method|setBeanRef (String beanRef)
specifier|public
name|void
name|setBeanRef
parameter_list|(
name|String
name|beanRef
parameter_list|)
block|{
name|this
operator|.
name|beanRef
operator|=
name|beanRef
expr_stmt|;
block|}
DECL|method|getBeanType ()
specifier|public
name|Class
name|getBeanType
parameter_list|()
block|{
if|if
condition|(
name|beanType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|beanClass
operator|!=
literal|null
condition|)
block|{
name|beanType
operator|=
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
name|beanClass
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|beanType
return|;
block|}
DECL|method|setBeanType (Class beanType)
specifier|public
name|void
name|setBeanType
parameter_list|(
name|Class
name|beanType
parameter_list|)
block|{
name|this
operator|.
name|beanType
operator|=
name|beanType
expr_stmt|;
block|}
DECL|method|getBeanMethod ()
specifier|public
name|String
name|getBeanMethod
parameter_list|()
block|{
return|return
name|beanMethod
return|;
block|}
DECL|method|setBeanMethod (String beanMethod)
specifier|public
name|void
name|setBeanMethod
parameter_list|(
name|String
name|beanMethod
parameter_list|)
block|{
name|this
operator|.
name|beanMethod
operator|=
name|beanMethod
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|addBeanCall (ProcessorType route)
specifier|protected
name|ProcessorType
name|addBeanCall
parameter_list|(
name|ProcessorType
name|route
parameter_list|)
block|{
name|Class
name|type
init|=
name|getBeanType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beanMethod
operator|!=
literal|null
condition|)
block|{
name|route
operator|=
name|route
operator|.
name|bean
argument_list|(
name|type
argument_list|,
name|beanMethod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|route
operator|=
name|route
operator|.
name|bean
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|beanRef
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beanMethod
operator|!=
literal|null
condition|)
block|{
name|route
operator|=
name|route
operator|.
name|beanRef
argument_list|(
name|beanRef
argument_list|,
name|beanMethod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|route
operator|=
name|route
operator|.
name|beanRef
argument_list|(
name|beanRef
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|route
return|;
block|}
DECL|method|singletonList (String value)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|singletonList
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|uris
return|;
block|}
block|}
end_class

end_unit

