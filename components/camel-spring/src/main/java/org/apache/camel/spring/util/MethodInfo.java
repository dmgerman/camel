begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|aopalliance
operator|.
name|intercept
operator|.
name|MethodInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AccessibleObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * @version $Revision: $  */
end_comment

begin_class
DECL|class|MethodInfo
specifier|public
class|class
name|MethodInfo
block|{
DECL|field|type
specifier|private
name|Class
name|type
decl_stmt|;
DECL|field|method
specifier|private
name|Method
name|method
decl_stmt|;
DECL|field|parametersExpression
specifier|private
name|Expression
name|parametersExpression
decl_stmt|;
DECL|method|MethodInfo (Class type, Method method, Expression parametersExpression)
specifier|public
name|MethodInfo
parameter_list|(
name|Class
name|type
parameter_list|,
name|Method
name|method
parameter_list|,
name|Expression
name|parametersExpression
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|parametersExpression
operator|=
name|parametersExpression
expr_stmt|;
block|}
DECL|method|createMethodInvocation (final Object pojo, final Exchange messageExchange)
specifier|public
name|MethodInvocation
name|createMethodInvocation
parameter_list|(
specifier|final
name|Object
name|pojo
parameter_list|,
specifier|final
name|Exchange
name|messageExchange
parameter_list|)
block|{
specifier|final
name|Object
index|[]
name|arguments
init|=
operator|(
name|Object
index|[]
operator|)
name|parametersExpression
operator|.
name|evaluate
argument_list|(
name|messageExchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|MethodInvocation
argument_list|()
block|{
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
specifier|public
name|Object
index|[]
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|Object
name|proceed
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|invoke
argument_list|(
name|method
argument_list|,
name|pojo
argument_list|,
name|arguments
argument_list|,
name|messageExchange
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getThis
parameter_list|()
block|{
return|return
name|pojo
return|;
block|}
specifier|public
name|AccessibleObject
name|getStaticPart
parameter_list|()
block|{
return|return
name|method
return|;
block|}
block|}
return|;
block|}
DECL|method|getType ()
specifier|public
name|Class
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getMethod ()
specifier|public
name|Method
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
DECL|method|getParametersExpression ()
specifier|public
name|Expression
name|getParametersExpression
parameter_list|()
block|{
return|return
name|parametersExpression
return|;
block|}
DECL|method|invoke (Method mth, Object pojo, Object[] arguments, Exchange exchange)
specifier|protected
name|Object
name|invoke
parameter_list|(
name|Method
name|mth
parameter_list|,
name|Object
name|pojo
parameter_list|,
name|Object
index|[]
name|arguments
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
return|return
name|mth
operator|.
name|invoke
argument_list|(
name|pojo
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
end_class

end_unit

