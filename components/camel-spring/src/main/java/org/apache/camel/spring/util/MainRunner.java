begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|name
import|;
end_import

begin_comment
comment|/**  * A simple helper bean for running main classes from within the spring.xml  * usually asynchronous in a background thread; which is useful for demos such  * as running Swing programs in the same JVM.  */
end_comment

begin_class
DECL|class|MainRunner
specifier|public
class|class
name|MainRunner
implements|implements
name|InitializingBean
implements|,
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MainRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|main
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|main
decl_stmt|;
DECL|field|args
specifier|private
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
DECL|field|asyncRun
specifier|private
name|boolean
name|asyncRun
init|=
literal|true
decl_stmt|;
DECL|field|delay
specifier|private
name|long
name|delay
decl_stmt|;
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MainRunner("
operator|+
name|name
argument_list|(
name|main
argument_list|)
operator|+
literal|" "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|getArgs
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runMethodWithoutCatchingExceptions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Class: "
operator|+
name|name
argument_list|(
name|main
argument_list|)
operator|+
literal|" does not have a main method: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to run: "
operator|+
name|this
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwable
name|throwable
init|=
name|e
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to run: "
operator|+
name|this
operator|+
literal|". Reason: "
operator|+
name|throwable
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runMethodWithoutCatchingExceptions ()
specifier|public
name|void
name|runMethodWithoutCatchingExceptions
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|Method
name|method
init|=
name|main
operator|.
name|getMethod
argument_list|(
literal|"main"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The main method is not static!: "
operator|+
name|method
argument_list|)
throw|;
block|}
name|Object
index|[]
name|arguments
init|=
block|{
name|getArgs
argument_list|()
block|}
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
DECL|method|getArgs ()
specifier|public
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
DECL|method|setArgs (String[] args)
specifier|public
name|void
name|setArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
DECL|method|isAsyncRun ()
specifier|public
name|boolean
name|isAsyncRun
parameter_list|()
block|{
return|return
name|asyncRun
return|;
block|}
DECL|method|setAsyncRun (boolean asyncRun)
specifier|public
name|void
name|setAsyncRun
parameter_list|(
name|boolean
name|asyncRun
parameter_list|)
block|{
name|this
operator|.
name|asyncRun
operator|=
name|asyncRun
expr_stmt|;
block|}
DECL|method|getMain ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getMain
parameter_list|()
block|{
return|return
name|main
return|;
block|}
DECL|method|setMain (Class<?> main)
specifier|public
name|void
name|setMain
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|main
parameter_list|)
block|{
name|this
operator|.
name|main
operator|=
name|main
expr_stmt|;
block|}
DECL|method|getDelay ()
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
DECL|method|setDelay (long delay)
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
DECL|method|afterPropertiesSet ()
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|main
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must specify a main class!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isAsyncRun
argument_list|()
condition|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"Thread for: "
operator|+
name|this
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|runMethodWithoutCatchingExceptions
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

