begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.handler
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|xml
operator|.
name|DomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * A parser of the various scripting language expressions  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|ScriptDefinitionParser
specifier|public
class|class
name|ScriptDefinitionParser
extends|extends
name|LazyLoadingBeanDefinitionParser
block|{
DECL|field|scriptEngineName
specifier|private
specifier|final
name|String
name|scriptEngineName
decl_stmt|;
DECL|method|ScriptDefinitionParser (String scriptEngineName)
specifier|public
name|ScriptDefinitionParser
parameter_list|(
name|String
name|scriptEngineName
parameter_list|)
block|{
name|super
argument_list|(
literal|"org.apache.camel.builder.script.ScriptBuilder"
argument_list|,
literal|"camel-script"
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptEngineName
operator|=
name|scriptEngineName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doParse (Element element, ParserContext parserContext, BeanDefinitionBuilder builder)
specifier|protected
name|void
name|doParse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|BeanDefinitionBuilder
name|builder
parameter_list|)
block|{
comment|// lets create a child context
name|String
name|engine
init|=
name|scriptEngineName
decl_stmt|;
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
name|engine
operator|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"language"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addConstructorArg
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|super
operator|.
name|doParse
argument_list|(
name|element
argument_list|,
name|parserContext
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|String
name|scriptText
init|=
name|DomUtils
operator|.
name|getTextValue
argument_list|(
name|element
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|scriptText
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"scriptText"
argument_list|,
name|scriptText
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

