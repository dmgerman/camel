begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_comment
comment|/**  * Wraps the processor in a Spring transaction  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|SpringTransactionPolicy
specifier|public
class|class
name|SpringTransactionPolicy
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Policy
argument_list|<
name|E
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SpringTransactionPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|template
specifier|private
name|TransactionTemplate
name|template
decl_stmt|;
DECL|field|propagationBehaviorName
specifier|private
name|String
name|propagationBehaviorName
decl_stmt|;
DECL|field|transactionManager
specifier|private
name|PlatformTransactionManager
name|transactionManager
decl_stmt|;
comment|/**      * Default constructor for easy spring configuration.      */
DECL|method|SpringTransactionPolicy ()
specifier|public
name|SpringTransactionPolicy
parameter_list|()
block|{     }
DECL|method|SpringTransactionPolicy (TransactionTemplate template)
specifier|public
name|SpringTransactionPolicy
parameter_list|(
name|TransactionTemplate
name|template
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
block|}
DECL|method|wrap (Processor processor)
specifier|public
name|Processor
name|wrap
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
specifier|final
name|TransactionTemplate
name|transactionTemplate
init|=
name|getTransactionTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|transactionTemplate
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No TransactionTemplate available so transactions will not be enabled!"
argument_list|)
expr_stmt|;
return|return
name|processor
return|;
block|}
name|TransactionInterceptor
name|answer
init|=
operator|new
name|TransactionInterceptor
argument_list|(
name|transactionTemplate
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|getTransactionTemplate ()
specifier|public
name|TransactionTemplate
name|getTransactionTemplate
parameter_list|()
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
name|template
operator|=
operator|new
name|TransactionTemplate
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|propagationBehaviorName
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setPropagationBehaviorName
argument_list|(
name|propagationBehaviorName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|template
return|;
block|}
DECL|method|setTransactionTemplate (TransactionTemplate template)
specifier|public
name|void
name|setTransactionTemplate
parameter_list|(
name|TransactionTemplate
name|template
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
block|}
DECL|method|setTransactionManager (PlatformTransactionManager transactionManager)
specifier|public
name|void
name|setTransactionManager
parameter_list|(
name|PlatformTransactionManager
name|transactionManager
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
block|}
DECL|method|getTransactionManager ()
specifier|public
name|PlatformTransactionManager
name|getTransactionManager
parameter_list|()
block|{
return|return
name|transactionManager
return|;
block|}
DECL|method|setPropagationBehaviorName (String propagationBehaviorName)
specifier|public
name|void
name|setPropagationBehaviorName
parameter_list|(
name|String
name|propagationBehaviorName
parameter_list|)
block|{
name|this
operator|.
name|propagationBehaviorName
operator|=
name|propagationBehaviorName
expr_stmt|;
block|}
DECL|method|getPropagationBehaviorName ()
specifier|public
name|String
name|getPropagationBehaviorName
parameter_list|()
block|{
return|return
name|propagationBehaviorName
return|;
block|}
block|}
end_class

end_unit

