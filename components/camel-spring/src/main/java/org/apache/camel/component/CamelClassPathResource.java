begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|ClassPathResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Camel specific {@link ClassPathResource} which uses the {@link ClassResolver} to load resources from the classpath.  *  * @deprecated use {@link org.apache.camel.component.ResourceEndpoint}. Will be removed in Camel 3.0.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|CamelClassPathResource
specifier|public
class|class
name|CamelClassPathResource
extends|extends
name|ClassPathResource
block|{
DECL|field|resolver
specifier|private
specifier|final
name|ClassResolver
name|resolver
decl_stmt|;
DECL|method|CamelClassPathResource (ClassResolver resolver, String path, ClassLoader classLoader)
specifier|public
name|CamelClassPathResource
parameter_list|(
name|ClassResolver
name|resolver
parameter_list|,
name|String
name|path
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|resolver
argument_list|,
literal|"Resolver must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|resolver
operator|.
name|loadResourceAsStream
argument_list|(
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getInputStream
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|is
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getURL ()
specifier|public
name|URL
name|getURL
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|resolver
operator|.
name|loadResourceAsURL
argument_list|(
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getURL
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|url
return|;
block|}
block|}
block|}
end_class

end_unit

