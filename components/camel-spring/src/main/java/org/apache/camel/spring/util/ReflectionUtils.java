begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_comment
comment|/**  * Reflection utilities, extending Spring ReflectionUtils.  */
end_comment

begin_class
DECL|class|ReflectionUtils
specifier|public
class|class
name|ReflectionUtils
extends|extends
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|ReflectionUtils
block|{
DECL|method|setField (Field f, Object instance, Object value)
specifier|public
specifier|static
name|void
name|setField
parameter_list|(
name|Field
name|f
parameter_list|,
name|Object
name|instance
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
try|try
block|{
name|boolean
name|oldAccessible
init|=
name|f
operator|.
name|isAccessible
argument_list|()
decl_stmt|;
name|boolean
name|shouldSetAccessible
init|=
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
operator|!
name|oldAccessible
decl_stmt|;
if|if
condition|(
name|shouldSetAccessible
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldSetAccessible
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
name|oldAccessible
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot inject value of class: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|" into: "
operator|+
name|f
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|handleReflectionException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

