begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|DefaultResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * A Camel specific {@link org.springframework.core.io.ResourceLoader} which can load  * resources from classpath using the Camel {@link org.apache.camel.spi.ClassResolver}.  */
end_comment

begin_class
DECL|class|CamelResourceLoader
specifier|public
class|class
name|CamelResourceLoader
extends|extends
name|DefaultResourceLoader
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|CamelResourceLoader (CamelContext camelContext)
specifier|public
name|CamelResourceLoader
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResource (String location)
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|location
argument_list|,
literal|"Location must not be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|CLASSPATH_URL_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|CamelClassPathResource
argument_list|(
name|camelContext
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|location
operator|.
name|substring
argument_list|(
name|CLASSPATH_URL_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceByPath (String path)
specifier|protected
name|Resource
name|getResourceByPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|CamelClassPathResource
argument_list|(
name|camelContext
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|path
argument_list|,
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

