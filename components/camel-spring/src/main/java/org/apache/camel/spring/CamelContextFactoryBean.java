begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElements
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementLifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|ManagedManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdentifiedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptFromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PackageScanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PolicyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteBuilderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ToDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransactedDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|config
operator|.
name|PropertiesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|DataFormatsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Delayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InflightRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|event
operator|.
name|ContextRefreshedEvent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
import|;
end_import

begin_comment
comment|/**  * A Spring {@link FactoryBean} to create and initialize a  * {@link SpringCamelContext} and install routes either explicitly configured in  * Spring XML or found by searching the classpath for Java classes which extend  * {@link RouteBuilder} using the nested {@link #setPackages(String[])}.  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"camelContext"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|CamelContextFactoryBean
specifier|public
class|class
name|CamelContextFactoryBean
extends|extends
name|IdentifiedType
implements|implements
name|RouteContainer
implements|,
name|FactoryBean
implements|,
name|InitializingBean
implements|,
name|DisposableBean
implements|,
name|ApplicationContextAware
implements|,
name|ApplicationListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CamelContextFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|trace
specifier|private
name|Boolean
name|trace
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|streamCache
specifier|private
name|Boolean
name|streamCache
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|delayer
specifier|private
name|Long
name|delayer
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|handleFault
specifier|private
name|Boolean
name|handleFault
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|errorHandlerRef
specifier|private
name|String
name|errorHandlerRef
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|autoStartup
specifier|private
name|Boolean
name|autoStartup
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|shutdownRoute
specifier|private
name|ShutdownRoute
name|shutdownRoute
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|shutdownRunningTask
specifier|private
name|ShutdownRunningTask
name|shutdownRunningTask
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"properties"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|properties
specifier|private
name|PropertiesDefinition
name|properties
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"package"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|packages
specifier|private
name|String
index|[]
name|packages
init|=
block|{}
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"packageScan"
argument_list|,
name|type
operator|=
name|PackageScanDefinition
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|packageScan
specifier|private
name|PackageScanDefinition
name|packageScan
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"jmxAgent"
argument_list|,
name|type
operator|=
name|CamelJMXAgentDefinition
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|camelJMXAgent
specifier|private
name|CamelJMXAgentDefinition
name|camelJMXAgent
decl_stmt|;
annotation|@
name|XmlElements
argument_list|(
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"propertyPlaceholder"
argument_list|,
name|type
operator|=
name|CamelPropertiesComponentFactoryBean
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"beanPostProcessor"
argument_list|,
name|type
operator|=
name|CamelBeanPostProcessor
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"template"
argument_list|,
name|type
operator|=
name|CamelProducerTemplateFactoryBean
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"consumerTemplate"
argument_list|,
name|type
operator|=
name|CamelConsumerTemplateFactoryBean
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"proxy"
argument_list|,
name|type
operator|=
name|CamelProxyFactoryDefinition
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
block|,
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"export"
argument_list|,
name|type
operator|=
name|CamelServiceExporterDefinition
operator|.
name|class
argument_list|,
name|required
operator|=
literal|false
argument_list|)
block|}
argument_list|)
DECL|field|beans
specifier|private
name|List
name|beans
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"routeBuilder"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|builderRefs
specifier|private
name|List
argument_list|<
name|RouteBuilderDefinition
argument_list|>
name|builderRefs
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteBuilderDefinition
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"endpoint"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|endpoints
specifier|private
name|List
argument_list|<
name|CamelEndpointFactoryBean
argument_list|>
name|endpoints
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"dataFormats"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|dataFormats
specifier|private
name|DataFormatsDefinition
name|dataFormats
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"onException"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|onExceptions
specifier|private
name|List
argument_list|<
name|OnExceptionDefinition
argument_list|>
name|onExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|OnExceptionDefinition
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"onCompletion"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|onCompletions
specifier|private
name|List
argument_list|<
name|OnCompletionDefinition
argument_list|>
name|onCompletions
init|=
operator|new
name|ArrayList
argument_list|<
name|OnCompletionDefinition
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"intercept"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|intercepts
specifier|private
name|List
argument_list|<
name|InterceptDefinition
argument_list|>
name|intercepts
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptDefinition
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"interceptFrom"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|interceptFroms
specifier|private
name|List
argument_list|<
name|InterceptFromDefinition
argument_list|>
name|interceptFroms
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptFromDefinition
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"interceptSendToEndpoint"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|interceptSendToEndpoints
specifier|private
name|List
argument_list|<
name|InterceptSendToEndpointDefinition
argument_list|>
name|interceptSendToEndpoints
init|=
operator|new
name|ArrayList
argument_list|<
name|InterceptSendToEndpointDefinition
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"route"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
DECL|field|routes
specifier|private
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteDefinition
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|context
specifier|private
name|SpringCamelContext
name|context
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|builders
specifier|private
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<
name|RoutesBuilder
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|applicationContext
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|contextClassLoaderOnStart
specifier|private
name|ClassLoader
name|contextClassLoaderOnStart
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|beanPostProcessor
specifier|private
name|BeanPostProcessor
name|beanPostProcessor
decl_stmt|;
DECL|method|CamelContextFactoryBean ()
specifier|public
name|CamelContextFactoryBean
parameter_list|()
block|{
comment|// Lets keep track of the class loader for when we actually do start things up
name|contextClassLoaderOnStart
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
DECL|method|getObject ()
specifier|public
name|Object
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getContext
argument_list|()
return|;
block|}
DECL|method|getObjectType ()
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|SpringCamelContext
operator|.
name|class
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getContextClassLoaderOnStart ()
specifier|public
name|ClassLoader
name|getContextClassLoaderOnStart
parameter_list|()
block|{
return|return
name|contextClassLoaderOnStart
return|;
block|}
DECL|method|afterPropertiesSet ()
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|setProperties
argument_list|(
name|properties
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// setup JMX agent at first
name|initJMXAgent
argument_list|()
expr_stmt|;
comment|// set the resolvers first
name|PackageScanClassResolver
name|packageResolver
init|=
name|getBeanForType
argument_list|(
name|PackageScanClassResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|packageResolver
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom PackageScanClassResolver: "
operator|+
name|packageResolver
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setPackageScanClassResolver
argument_list|(
name|packageResolver
argument_list|)
expr_stmt|;
block|}
name|ClassResolver
name|classResolver
init|=
name|getBeanForType
argument_list|(
name|ClassResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|classResolver
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ClassResolver: "
operator|+
name|classResolver
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setClassResolver
argument_list|(
name|classResolver
argument_list|)
expr_stmt|;
block|}
name|FactoryFinderResolver
name|factoryFinderResolver
init|=
name|getBeanForType
argument_list|(
name|FactoryFinderResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryFinderResolver
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom FactoryFinderResolver: "
operator|+
name|factoryFinderResolver
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setFactoryFinderResolver
argument_list|(
name|factoryFinderResolver
argument_list|)
expr_stmt|;
block|}
comment|// set the strategy if defined
name|Registry
name|registry
init|=
name|getBeanForType
argument_list|(
name|Registry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom Registry: "
operator|+
name|registry
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
name|Tracer
name|tracer
init|=
name|getBeanForType
argument_list|(
name|Tracer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracer
operator|!=
literal|null
condition|)
block|{
comment|// use formatter if there is a TraceFormatter bean defined
name|TraceFormatter
name|formatter
init|=
name|getBeanForType
argument_list|(
name|TraceFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|!=
literal|null
condition|)
block|{
name|tracer
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom Tracer: "
operator|+
name|tracer
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
block|}
name|HandleFault
name|handleFault
init|=
name|getBeanForType
argument_list|(
name|HandleFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|handleFault
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom HandleFault: "
operator|+
name|handleFault
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|handleFault
argument_list|)
expr_stmt|;
block|}
name|Delayer
name|delayer
init|=
name|getBeanForType
argument_list|(
name|Delayer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom Delayer: "
operator|+
name|delayer
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|delayer
argument_list|)
expr_stmt|;
block|}
name|InflightRepository
name|inflightRepository
init|=
name|getBeanForType
argument_list|(
name|InflightRepository
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom InflightRepository: "
operator|+
name|inflightRepository
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setInflightRepository
argument_list|(
name|inflightRepository
argument_list|)
expr_stmt|;
block|}
name|ManagementStrategy
name|managementStrategy
init|=
name|getBeanForType
argument_list|(
name|ManagementStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|managementStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ManagementStrategy: "
operator|+
name|managementStrategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setManagementStrategy
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
block|}
name|EventFactory
name|eventFactory
init|=
name|getBeanForType
argument_list|(
name|EventFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EventFactory: "
operator|+
name|eventFactory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setEventFactory
argument_list|(
name|eventFactory
argument_list|)
expr_stmt|;
block|}
comment|// set the event notifier strategies if defined
name|Map
argument_list|<
name|String
argument_list|,
name|EventNotifier
argument_list|>
name|eventNotifiers
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByType
argument_list|(
name|EventNotifier
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventNotifiers
operator|!=
literal|null
operator|&&
operator|!
name|eventNotifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|eventNotifiers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|EventNotifier
name|notifier
init|=
name|eventNotifiers
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getEventNotifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|notifier
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EventNotifier with id: "
operator|+
name|id
operator|+
literal|" and implementation: "
operator|+
name|notifier
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ShutdownStrategy
name|shutdownStrategy
init|=
name|getBeanForType
argument_list|(
name|ShutdownStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|shutdownStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ShutdownStrategy: "
operator|+
name|shutdownStrategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setShutdownStrategy
argument_list|(
name|shutdownStrategy
argument_list|)
expr_stmt|;
block|}
comment|// add global interceptors
name|Map
argument_list|<
name|String
argument_list|,
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByType
argument_list|(
name|InterceptStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|interceptStrategies
operator|!=
literal|null
operator|&&
operator|!
name|interceptStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|interceptStrategies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|InterceptStrategy
name|strategy
init|=
name|interceptStrategies
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|getContext
argument_list|()
operator|.
name|getInterceptStrategies
argument_list|()
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom InterceptStrategy with id: "
operator|+
name|id
operator|+
literal|" and implementation: "
operator|+
name|strategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set the lifecycle strategy if defined
name|Map
argument_list|<
name|String
argument_list|,
name|LifecycleStrategy
argument_list|>
name|lifecycleStrategies
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByType
argument_list|(
name|LifecycleStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|lifecycleStrategies
operator|!=
literal|null
operator|&&
operator|!
name|lifecycleStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|lifecycleStrategies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LifecycleStrategy
name|strategy
init|=
name|lifecycleStrategies
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|getContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom LifecycleStrategy with id: "
operator|+
name|id
operator|+
literal|" and implementation: "
operator|+
name|strategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addLifecycleStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Set the application context and camelContext for the beanPostProcessor
if|if
condition|(
name|beanPostProcessor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beanPostProcessor
operator|instanceof
name|ApplicationContextAware
condition|)
block|{
operator|(
operator|(
name|ApplicationContextAware
operator|)
name|beanPostProcessor
operator|)
operator|.
name|setApplicationContext
argument_list|(
name|applicationContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|beanPostProcessor
operator|instanceof
name|CamelBeanPostProcessor
condition|)
block|{
operator|(
operator|(
name|CamelBeanPostProcessor
operator|)
name|beanPostProcessor
operator|)
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// do special preparation for some concepts such as interceptors and policies
comment|// this is needed as JAXB does not build exactly the same model definition as Spring DSL would do
comment|// using route builders. So we have here a little custom code to fix the JAXB gaps
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routes
control|)
block|{
comment|// abstracts is the cross cutting concerns
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|abstracts
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|>
argument_list|()
decl_stmt|;
comment|// upper is the cross cutting concerns such as interceptors, error handlers etc
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|upper
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|>
argument_list|()
decl_stmt|;
comment|// lower is the regular route
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|lower
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|prepareRouteForInit
argument_list|(
name|route
argument_list|,
name|abstracts
argument_list|,
name|lower
argument_list|)
expr_stmt|;
comment|// toAsync should fix up itself at first
name|initToAsync
argument_list|(
name|lower
argument_list|)
expr_stmt|;
comment|// interceptors should be first for the cross cutting concerns
name|initInterceptors
argument_list|(
name|route
argument_list|,
name|upper
argument_list|)
expr_stmt|;
comment|// then on completion
name|initOnCompletions
argument_list|(
name|abstracts
argument_list|,
name|upper
argument_list|)
expr_stmt|;
comment|// then polices
name|initPolicies
argument_list|(
name|abstracts
argument_list|,
name|lower
argument_list|)
expr_stmt|;
comment|// then on exception
name|initOnExceptions
argument_list|(
name|abstracts
argument_list|,
name|upper
argument_list|)
expr_stmt|;
comment|// rebuild route as upper + lower
name|route
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|addAll
argument_list|(
name|upper
argument_list|)
expr_stmt|;
name|route
operator|.
name|getOutputs
argument_list|()
operator|.
name|addAll
argument_list|(
name|lower
argument_list|)
expr_stmt|;
comment|// configure parents
name|initParent
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataFormats
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|setDataFormats
argument_list|(
name|dataFormats
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// lets force any lazy creation
name|getContext
argument_list|()
operator|.
name|addRouteDefinitions
argument_list|(
name|routes
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found JAXB created routes: "
operator|+
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|findRouteBuilders
argument_list|()
expr_stmt|;
name|installRoutes
argument_list|()
expr_stmt|;
block|}
DECL|method|prepareRouteForInit (RouteDefinition route, List<ProcessorDefinition> abstracts, List<ProcessorDefinition> lower)
specifier|private
name|void
name|prepareRouteForInit
parameter_list|(
name|RouteDefinition
name|route
parameter_list|,
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|abstracts
parameter_list|,
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|lower
parameter_list|)
block|{
comment|// filter the route into abstracts and lower
for|for
control|(
name|ProcessorDefinition
name|output
range|:
name|route
operator|.
name|getOutputs
argument_list|()
control|)
block|{
if|if
condition|(
name|output
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|abstracts
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lower
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initParent (RouteDefinition route)
specifier|private
name|void
name|initParent
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
for|for
control|(
name|ProcessorDefinition
name|output
range|:
name|route
operator|.
name|getOutputs
argument_list|()
control|)
block|{
name|output
operator|.
name|setParent
argument_list|(
name|route
argument_list|)
expr_stmt|;
if|if
condition|(
name|output
operator|.
name|getOutputs
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// recursive the outputs
name|initParent
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initParent (ProcessorDefinition parent)
specifier|private
name|void
name|initParent
parameter_list|(
name|ProcessorDefinition
name|parent
parameter_list|)
block|{
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|children
init|=
name|parent
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getOutputs
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// recursive the children
name|initParent
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initToAsync (List<ProcessorDefinition> lower)
specifier|private
name|void
name|initToAsync
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|lower
parameter_list|)
block|{
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessorDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|ToDefinition
name|toAsync
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
name|output
range|:
name|lower
control|)
block|{
if|if
condition|(
name|toAsync
operator|!=
literal|null
condition|)
block|{
comment|// add this output on toAsync
name|toAsync
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// regular outputs
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|instanceof
name|ToDefinition
condition|)
block|{
name|ToDefinition
name|to
init|=
operator|(
name|ToDefinition
operator|)
name|output
decl_stmt|;
if|if
condition|(
name|to
operator|.
name|isAsync
argument_list|()
operator|!=
literal|null
operator|&&
name|to
operator|.
name|isAsync
argument_list|()
condition|)
block|{
comment|// new current to async
name|toAsync
operator|=
name|to
expr_stmt|;
block|}
block|}
block|}
comment|// rebuild outputs
name|lower
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lower
operator|.
name|addAll
argument_list|(
name|outputs
argument_list|)
expr_stmt|;
block|}
DECL|method|initOnExceptions (List<ProcessorDefinition> abstracts, List<ProcessorDefinition> upper)
specifier|private
name|void
name|initOnExceptions
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|abstracts
parameter_list|,
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|upper
parameter_list|)
block|{
comment|// add global on exceptions if any
if|if
condition|(
name|onExceptions
operator|!=
literal|null
operator|&&
operator|!
name|onExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|abstracts
operator|.
name|addAll
argument_list|(
name|onExceptions
argument_list|)
expr_stmt|;
block|}
comment|// now add onExceptions to the route
for|for
control|(
name|ProcessorDefinition
name|output
range|:
name|abstracts
control|)
block|{
if|if
condition|(
name|output
operator|instanceof
name|OnExceptionDefinition
condition|)
block|{
comment|// on exceptions must be added at top, so the route flow is correct as
comment|// on exceptions should be the first outputs
name|upper
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initInterceptors (RouteDefinition route, List<ProcessorDefinition> upper)
specifier|private
name|void
name|initInterceptors
parameter_list|(
name|RouteDefinition
name|route
parameter_list|,
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|upper
parameter_list|)
block|{
comment|// configure intercept
for|for
control|(
name|InterceptDefinition
name|intercept
range|:
name|getIntercepts
argument_list|()
control|)
block|{
name|intercept
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
comment|// add as first output so intercept is handled before the actual route and that gives
comment|// us the needed head start to init and be able to intercept all the remaining processing steps
name|upper
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|intercept
argument_list|)
expr_stmt|;
block|}
comment|// configure intercept from
for|for
control|(
name|InterceptFromDefinition
name|intercept
range|:
name|getInterceptFroms
argument_list|()
control|)
block|{
comment|// should we only apply interceptor for a given endpoint uri
name|boolean
name|match
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|intercept
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|FromDefinition
name|input
range|:
name|route
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|input
operator|.
name|getUri
argument_list|()
argument_list|,
name|intercept
operator|.
name|getUri
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
name|intercept
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
comment|// add as first output so intercept is handled before the actual route and that gives
comment|// us the needed head start to init and be able to intercept all the remaining processing steps
name|upper
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|intercept
argument_list|)
expr_stmt|;
block|}
block|}
comment|// configure intercept send to endpoint
for|for
control|(
name|InterceptSendToEndpointDefinition
name|intercept
range|:
name|getInterceptSendToEndpoints
argument_list|()
control|)
block|{
name|intercept
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
comment|// add as first output so intercept is handled before the actual route and that gives
comment|// us the needed head start to init and be able to intercept all the remaining processing steps
name|upper
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|intercept
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initOnCompletions (List<ProcessorDefinition> abstracts, List<ProcessorDefinition> upper)
specifier|private
name|void
name|initOnCompletions
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|abstracts
parameter_list|,
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|upper
parameter_list|)
block|{
name|List
argument_list|<
name|OnCompletionDefinition
argument_list|>
name|completions
init|=
operator|new
name|ArrayList
argument_list|<
name|OnCompletionDefinition
argument_list|>
argument_list|()
decl_stmt|;
comment|// find the route scoped onCompletions
for|for
control|(
name|ProcessorDefinition
name|out
range|:
name|abstracts
control|)
block|{
if|if
condition|(
name|out
operator|instanceof
name|OnCompletionDefinition
condition|)
block|{
name|completions
operator|.
name|add
argument_list|(
operator|(
name|OnCompletionDefinition
operator|)
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|// only add global onCompletion if there are no route already
if|if
condition|(
name|completions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|completions
operator|=
name|getOnCompletions
argument_list|()
expr_stmt|;
block|}
comment|// are there any completions to init at all?
if|if
condition|(
name|completions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|upper
operator|.
name|addAll
argument_list|(
name|completions
argument_list|)
expr_stmt|;
block|}
DECL|method|initPolicies (List<ProcessorDefinition> abstracts, List<ProcessorDefinition> lower)
specifier|private
name|void
name|initPolicies
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|abstracts
parameter_list|,
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|lower
parameter_list|)
block|{
comment|// we need two types as transacted cannot extend policy due JAXB limitations
name|PolicyDefinition
name|policy
init|=
literal|null
decl_stmt|;
name|TransactedDefinition
name|transacted
init|=
literal|null
decl_stmt|;
comment|// add to correct type
for|for
control|(
name|ProcessorDefinition
name|type
range|:
name|abstracts
control|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|PolicyDefinition
condition|)
block|{
name|policy
operator|=
operator|(
name|PolicyDefinition
operator|)
name|type
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TransactedDefinition
condition|)
block|{
name|transacted
operator|=
operator|(
name|TransactedDefinition
operator|)
name|type
expr_stmt|;
block|}
block|}
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
comment|// the outputs should be moved to the policy
name|policy
operator|.
name|getOutputs
argument_list|()
operator|.
name|addAll
argument_list|(
name|lower
argument_list|)
expr_stmt|;
comment|// and add it as the single output
name|lower
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lower
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|transacted
operator|!=
literal|null
condition|)
block|{
comment|// the outputs should be moved to the transacted policy
name|transacted
operator|.
name|getOutputs
argument_list|()
operator|.
name|addAll
argument_list|(
name|lower
argument_list|)
expr_stmt|;
comment|// and add it as the single output
name|lower
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lower
operator|.
name|add
argument_list|(
name|transacted
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initJMXAgent ()
specifier|private
name|void
name|initJMXAgent
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|camelJMXAgent
operator|!=
literal|null
operator|&&
name|camelJMXAgent
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMXAgent disabled"
argument_list|)
expr_stmt|;
comment|// clear the existing lifecycle strategies define by the DefaultCamelContext constructor
name|getContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// no need to add a lifecycle strategy as we do not need one as JMX is disabled
name|getContext
argument_list|()
operator|.
name|setManagementStrategy
argument_list|(
operator|new
name|DefaultManagementStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|camelJMXAgent
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMXAgent enabled: "
operator|+
name|camelJMXAgent
argument_list|)
expr_stmt|;
name|DefaultManagementAgent
name|agent
init|=
operator|new
name|DefaultManagementAgent
argument_list|()
decl_stmt|;
name|agent
operator|.
name|setConnectorPort
argument_list|(
name|camelJMXAgent
operator|.
name|getConnectorPort
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|setCreateConnector
argument_list|(
name|camelJMXAgent
operator|.
name|isCreateConnector
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|setMBeanObjectDomainName
argument_list|(
name|camelJMXAgent
operator|.
name|getMbeanObjectDomainName
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|setMBeanServerDefaultDomain
argument_list|(
name|camelJMXAgent
operator|.
name|getMbeanServerDefaultDomain
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|setRegistryPort
argument_list|(
name|camelJMXAgent
operator|.
name|getRegistryPort
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|setServiceUrlPath
argument_list|(
name|camelJMXAgent
operator|.
name|getServiceUrlPath
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|setUsePlatformMBeanServer
argument_list|(
name|camelJMXAgent
operator|.
name|isUsePlatformMBeanServer
argument_list|()
argument_list|)
expr_stmt|;
name|agent
operator|.
name|setOnlyRegisterProcessorWithCustomId
argument_list|(
name|camelJMXAgent
operator|.
name|getOnlyRegisterProcessorWithCustomId
argument_list|()
argument_list|)
expr_stmt|;
name|ManagementStrategy
name|managementStrategy
init|=
operator|new
name|ManagedManagementStrategy
argument_list|(
name|agent
argument_list|)
decl_stmt|;
name|getContext
argument_list|()
operator|.
name|setManagementStrategy
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
comment|// clear the existing lifecycle strategies define by the DefaultCamelContext constructor
name|getContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|DefaultManagementLifecycleStrategy
argument_list|(
name|getContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// set additional configuration from camelJMXAgent
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|onlyManageProcessorWithCustomId
argument_list|(
name|camelJMXAgent
operator|.
name|getOnlyRegisterProcessorWithCustomId
argument_list|()
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setStatisticsLevel
argument_list|(
name|camelJMXAgent
operator|.
name|getStatisticsLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getBeanForType (Class<T> clazz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getBeanForType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|T
name|bean
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|names
init|=
name|getApplicationContext
argument_list|()
operator|.
name|getBeanNamesForType
argument_list|(
name|clazz
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|bean
operator|=
operator|(
name|T
operator|)
name|getApplicationContext
argument_list|()
operator|.
name|getBean
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
block|{
name|ApplicationContext
name|parentContext
init|=
name|getApplicationContext
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentContext
operator|!=
literal|null
condition|)
block|{
name|names
operator|=
name|parentContext
operator|.
name|getBeanNamesForType
argument_list|(
name|clazz
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|bean
operator|=
operator|(
name|T
operator|)
name|parentContext
operator|.
name|getBean
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|bean
return|;
block|}
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|getContext
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|onApplicationEvent (ApplicationEvent event)
specifier|public
name|void
name|onApplicationEvent
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
comment|// let the spring camel context handle the events
name|context
operator|.
name|onApplicationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Publishing spring-event: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|instanceof
name|ContextRefreshedEvent
condition|)
block|{
comment|// now lets start the CamelContext so that all its possible
comment|// dependencies are initialized
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting the context now!"
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getContext ()
specifier|public
name|SpringCamelContext
name|getContext
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|createContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
DECL|method|setContext (SpringCamelContext context)
specifier|public
name|void
name|setContext
parameter_list|(
name|SpringCamelContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|getRoutes ()
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRoutes
parameter_list|()
block|{
return|return
name|routes
return|;
block|}
DECL|method|setRoutes (List<RouteDefinition> routes)
specifier|public
name|void
name|setRoutes
parameter_list|(
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
parameter_list|)
block|{
name|this
operator|.
name|routes
operator|=
name|routes
expr_stmt|;
block|}
DECL|method|getIntercepts ()
specifier|public
name|List
argument_list|<
name|InterceptDefinition
argument_list|>
name|getIntercepts
parameter_list|()
block|{
return|return
name|intercepts
return|;
block|}
DECL|method|setIntercepts (List<InterceptDefinition> intercepts)
specifier|public
name|void
name|setIntercepts
parameter_list|(
name|List
argument_list|<
name|InterceptDefinition
argument_list|>
name|intercepts
parameter_list|)
block|{
name|this
operator|.
name|intercepts
operator|=
name|intercepts
expr_stmt|;
block|}
DECL|method|getInterceptFroms ()
specifier|public
name|List
argument_list|<
name|InterceptFromDefinition
argument_list|>
name|getInterceptFroms
parameter_list|()
block|{
return|return
name|interceptFroms
return|;
block|}
DECL|method|setInterceptFroms (List<InterceptFromDefinition> interceptFroms)
specifier|public
name|void
name|setInterceptFroms
parameter_list|(
name|List
argument_list|<
name|InterceptFromDefinition
argument_list|>
name|interceptFroms
parameter_list|)
block|{
name|this
operator|.
name|interceptFroms
operator|=
name|interceptFroms
expr_stmt|;
block|}
DECL|method|getInterceptSendToEndpoints ()
specifier|public
name|List
argument_list|<
name|InterceptSendToEndpointDefinition
argument_list|>
name|getInterceptSendToEndpoints
parameter_list|()
block|{
return|return
name|interceptSendToEndpoints
return|;
block|}
DECL|method|setInterceptSendToEndpoints (List<InterceptSendToEndpointDefinition> interceptSendToEndpoints)
specifier|public
name|void
name|setInterceptSendToEndpoints
parameter_list|(
name|List
argument_list|<
name|InterceptSendToEndpointDefinition
argument_list|>
name|interceptSendToEndpoints
parameter_list|)
block|{
name|this
operator|.
name|interceptSendToEndpoints
operator|=
name|interceptSendToEndpoints
expr_stmt|;
block|}
DECL|method|getApplicationContext ()
specifier|public
name|ApplicationContext
name|getApplicationContext
parameter_list|()
block|{
if|if
condition|(
name|applicationContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No applicationContext has been injected!"
argument_list|)
throw|;
block|}
return|return
name|applicationContext
return|;
block|}
DECL|method|setApplicationContext (ApplicationContext applicationContext)
specifier|public
name|void
name|setApplicationContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
DECL|method|getProperties ()
specifier|public
name|PropertiesDefinition
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties (PropertiesDefinition properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|PropertiesDefinition
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|getPackages ()
specifier|public
name|String
index|[]
name|getPackages
parameter_list|()
block|{
return|return
name|packages
return|;
block|}
comment|/**      * Sets the package names to be recursively searched for Java classes which      * extend {@link RouteBuilder} to be auto-wired up to the      * {@link SpringCamelContext} as a route. Note that classes are excluded if      * they are specifically configured in the spring.xml      *<p/>      * A more advanced configuration can be done using {@link #setPackageScan(org.apache.camel.model.PackageScanDefinition)}      *       * @param packages the package names which are recursively searched      * @see #setPackageScan(org.apache.camel.model.PackageScanDefinition)      */
DECL|method|setPackages (String[] packages)
specifier|public
name|void
name|setPackages
parameter_list|(
name|String
index|[]
name|packages
parameter_list|)
block|{
name|this
operator|.
name|packages
operator|=
name|packages
expr_stmt|;
block|}
DECL|method|getPackageScan ()
specifier|public
name|PackageScanDefinition
name|getPackageScan
parameter_list|()
block|{
return|return
name|packageScan
return|;
block|}
comment|/**      * Sets the package scanning information. Package scanning allows for the      * automatic discovery of certain camel classes at runtime for inclusion      * e.g. {@link RouteBuilder} implementations      *       * @param packageScan the package scan      */
DECL|method|setPackageScan (PackageScanDefinition packageScan)
specifier|public
name|void
name|setPackageScan
parameter_list|(
name|PackageScanDefinition
name|packageScan
parameter_list|)
block|{
name|this
operator|.
name|packageScan
operator|=
name|packageScan
expr_stmt|;
block|}
DECL|method|setBeanPostProcessor (BeanPostProcessor postProcessor)
specifier|public
name|void
name|setBeanPostProcessor
parameter_list|(
name|BeanPostProcessor
name|postProcessor
parameter_list|)
block|{
name|this
operator|.
name|beanPostProcessor
operator|=
name|postProcessor
expr_stmt|;
block|}
DECL|method|getBeanPostProcessor ()
specifier|public
name|BeanPostProcessor
name|getBeanPostProcessor
parameter_list|()
block|{
return|return
name|beanPostProcessor
return|;
block|}
DECL|method|setCamelJMXAgent (CamelJMXAgentDefinition agent)
specifier|public
name|void
name|setCamelJMXAgent
parameter_list|(
name|CamelJMXAgentDefinition
name|agent
parameter_list|)
block|{
name|camelJMXAgent
operator|=
name|agent
expr_stmt|;
block|}
DECL|method|getTrace ()
specifier|public
name|Boolean
name|getTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
DECL|method|setTrace (Boolean trace)
specifier|public
name|void
name|setTrace
parameter_list|(
name|Boolean
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
DECL|method|getStreamCache ()
specifier|public
name|Boolean
name|getStreamCache
parameter_list|()
block|{
return|return
name|streamCache
return|;
block|}
DECL|method|setStreamCache (Boolean streamCache)
specifier|public
name|void
name|setStreamCache
parameter_list|(
name|Boolean
name|streamCache
parameter_list|)
block|{
name|this
operator|.
name|streamCache
operator|=
name|streamCache
expr_stmt|;
block|}
DECL|method|getDelayer ()
specifier|public
name|Long
name|getDelayer
parameter_list|()
block|{
return|return
name|delayer
return|;
block|}
DECL|method|setDelayer (Long delayer)
specifier|public
name|void
name|setDelayer
parameter_list|(
name|Long
name|delayer
parameter_list|)
block|{
name|this
operator|.
name|delayer
operator|=
name|delayer
expr_stmt|;
block|}
DECL|method|getHandleFault ()
specifier|public
name|Boolean
name|getHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
DECL|method|setHandleFault (Boolean handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|Boolean
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
DECL|method|getCamelJMXAgent ()
specifier|public
name|CamelJMXAgentDefinition
name|getCamelJMXAgent
parameter_list|()
block|{
return|return
name|camelJMXAgent
return|;
block|}
DECL|method|getBuilderRefs ()
specifier|public
name|List
argument_list|<
name|RouteBuilderDefinition
argument_list|>
name|getBuilderRefs
parameter_list|()
block|{
return|return
name|builderRefs
return|;
block|}
DECL|method|setBuilderRefs (List<RouteBuilderDefinition> builderRefs)
specifier|public
name|void
name|setBuilderRefs
parameter_list|(
name|List
argument_list|<
name|RouteBuilderDefinition
argument_list|>
name|builderRefs
parameter_list|)
block|{
name|this
operator|.
name|builderRefs
operator|=
name|builderRefs
expr_stmt|;
block|}
DECL|method|getErrorHandlerRef ()
specifier|public
name|String
name|getErrorHandlerRef
parameter_list|()
block|{
return|return
name|errorHandlerRef
return|;
block|}
comment|/**      * Sets the name of the error handler object used to default the error handling strategy      *      * @param errorHandlerRef the Spring bean ref of the error handler      */
DECL|method|setErrorHandlerRef (String errorHandlerRef)
specifier|public
name|void
name|setErrorHandlerRef
parameter_list|(
name|String
name|errorHandlerRef
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerRef
operator|=
name|errorHandlerRef
expr_stmt|;
block|}
DECL|method|setDataFormats (DataFormatsDefinition dataFormats)
specifier|public
name|void
name|setDataFormats
parameter_list|(
name|DataFormatsDefinition
name|dataFormats
parameter_list|)
block|{
name|this
operator|.
name|dataFormats
operator|=
name|dataFormats
expr_stmt|;
block|}
DECL|method|getDataFormats ()
specifier|public
name|DataFormatsDefinition
name|getDataFormats
parameter_list|()
block|{
return|return
name|dataFormats
return|;
block|}
DECL|method|setOnExceptions (List<OnExceptionDefinition> onExceptions)
specifier|public
name|void
name|setOnExceptions
parameter_list|(
name|List
argument_list|<
name|OnExceptionDefinition
argument_list|>
name|onExceptions
parameter_list|)
block|{
name|this
operator|.
name|onExceptions
operator|=
name|onExceptions
expr_stmt|;
block|}
DECL|method|getOnExceptions ()
specifier|public
name|List
argument_list|<
name|OnExceptionDefinition
argument_list|>
name|getOnExceptions
parameter_list|()
block|{
return|return
name|onExceptions
return|;
block|}
DECL|method|getOnCompletions ()
specifier|public
name|List
argument_list|<
name|OnCompletionDefinition
argument_list|>
name|getOnCompletions
parameter_list|()
block|{
return|return
name|onCompletions
return|;
block|}
DECL|method|setOnCompletions (List<OnCompletionDefinition> onCompletions)
specifier|public
name|void
name|setOnCompletions
parameter_list|(
name|List
argument_list|<
name|OnCompletionDefinition
argument_list|>
name|onCompletions
parameter_list|)
block|{
name|this
operator|.
name|onCompletions
operator|=
name|onCompletions
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|Boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
DECL|method|setAutoStartup (Boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|Boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|getShutdownRoute ()
specifier|public
name|ShutdownRoute
name|getShutdownRoute
parameter_list|()
block|{
return|return
name|shutdownRoute
return|;
block|}
DECL|method|setShutdownRoute (ShutdownRoute shutdownRoute)
specifier|public
name|void
name|setShutdownRoute
parameter_list|(
name|ShutdownRoute
name|shutdownRoute
parameter_list|)
block|{
name|this
operator|.
name|shutdownRoute
operator|=
name|shutdownRoute
expr_stmt|;
block|}
DECL|method|getShutdownRunningTask ()
specifier|public
name|ShutdownRunningTask
name|getShutdownRunningTask
parameter_list|()
block|{
return|return
name|shutdownRunningTask
return|;
block|}
DECL|method|setShutdownRunningTask (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|void
name|setShutdownRunningTask
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
name|this
operator|.
name|shutdownRunningTask
operator|=
name|shutdownRunningTask
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * Create the context      */
DECL|method|createContext ()
specifier|protected
name|SpringCamelContext
name|createContext
parameter_list|()
block|{
name|SpringCamelContext
name|ctx
init|=
name|newCamelContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|setName
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|streamCache
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setStreamCaching
argument_list|(
name|getStreamCache
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setTracing
argument_list|(
name|getTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setDelayer
argument_list|(
name|getDelayer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handleFault
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setHandleFault
argument_list|(
name|getHandleFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errorHandlerRef
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setErrorHandlerBuilder
argument_list|(
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|getErrorHandlerRef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoStartup
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setAutoStartup
argument_list|(
name|isAutoStartup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shutdownRoute
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setShutdownRoute
argument_list|(
name|getShutdownRoute
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shutdownRunningTask
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setShutdownRunningTask
argument_list|(
name|getShutdownRunningTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
DECL|method|newCamelContext ()
specifier|protected
name|SpringCamelContext
name|newCamelContext
parameter_list|()
block|{
return|return
operator|new
name|SpringCamelContext
argument_list|(
name|getApplicationContext
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Strategy to install all available routes into the context      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|installRoutes ()
specifier|protected
name|void
name|installRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteBuilder
argument_list|>
argument_list|()
decl_stmt|;
comment|// lets add route builders added from references
if|if
condition|(
name|builderRefs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouteBuilderDefinition
name|builderRef
range|:
name|builderRefs
control|)
block|{
name|RouteBuilder
name|builder
init|=
name|builderRef
operator|.
name|createRouteBuilder
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// support to get the route here
name|RoutesBuilder
name|routes
init|=
name|builderRef
operator|.
name|createRoutes
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|builders
operator|.
name|add
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Throw the exception that we can't find any build here
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Cannot find any routes with this RouteBuilder reference: "
operator|+
name|builderRef
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// install already configured routes
for|for
control|(
name|RoutesBuilder
name|routeBuilder
range|:
name|this
operator|.
name|builders
control|)
block|{
name|getContext
argument_list|()
operator|.
name|addRoutes
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
comment|// install builders
for|for
control|(
name|RouteBuilder
name|builder
range|:
name|builders
control|)
block|{
if|if
condition|(
name|beanPostProcessor
operator|!=
literal|null
condition|)
block|{
comment|// Inject the annotated resource
name|beanPostProcessor
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|builder
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getContext
argument_list|()
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Strategy method to try find {@link RouteBuilder} instances on the classpath      */
DECL|method|findRouteBuilders ()
specifier|protected
name|void
name|findRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
name|PackageScanClassResolver
name|resolver
init|=
name|getContext
argument_list|()
operator|.
name|getPackageScanClassResolver
argument_list|()
decl_stmt|;
name|addPackageElementContentsToScanDefinition
argument_list|()
expr_stmt|;
name|PackageScanDefinition
name|packageScanDef
init|=
name|getPackageScan
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageScanDef
operator|!=
literal|null
operator|&&
name|packageScanDef
operator|.
name|getPackages
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// use package scan filter
name|PatternBasedPackageScanFilter
name|filter
init|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|addIncludePatterns
argument_list|(
name|packageScanDef
operator|.
name|getIncludes
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addExcludePatterns
argument_list|(
name|packageScanDef
operator|.
name|getExcludes
argument_list|()
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|String
index|[]
name|normalized
init|=
name|normalizePackages
argument_list|(
name|packageScanDef
operator|.
name|getPackages
argument_list|()
argument_list|)
decl_stmt|;
name|RouteBuilderFinder
name|finder
init|=
operator|new
name|RouteBuilderFinder
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|normalized
argument_list|,
name|getContextClassLoaderOnStart
argument_list|()
argument_list|,
name|getBeanPostProcessor
argument_list|()
argument_list|,
name|getContext
argument_list|()
operator|.
name|getPackageScanClassResolver
argument_list|()
argument_list|)
decl_stmt|;
name|finder
operator|.
name|appendBuilders
argument_list|(
name|builders
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addPackageElementContentsToScanDefinition ()
specifier|private
name|void
name|addPackageElementContentsToScanDefinition
parameter_list|()
block|{
name|PackageScanDefinition
name|packageScanDef
init|=
name|getPackageScan
argument_list|()
decl_stmt|;
if|if
condition|(
name|getPackages
argument_list|()
operator|!=
literal|null
operator|&&
name|getPackages
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|packageScanDef
operator|==
literal|null
condition|)
block|{
name|packageScanDef
operator|=
operator|new
name|PackageScanDefinition
argument_list|()
expr_stmt|;
name|setPackageScan
argument_list|(
name|packageScanDef
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|pkg
range|:
name|getPackages
argument_list|()
control|)
block|{
name|packageScanDef
operator|.
name|getPackages
argument_list|()
operator|.
name|add
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|normalizePackages (List<String> unnormalized)
specifier|private
name|String
index|[]
name|normalizePackages
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|unnormalized
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|packages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|unnormalized
control|)
block|{
name|name
operator|=
name|ObjectHelper
operator|.
name|normalizeClassName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using package: "
operator|+
name|name
operator|+
literal|" to scan for RouteBuilder classes"
argument_list|)
expr_stmt|;
block|}
name|packages
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|packages
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|packages
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

