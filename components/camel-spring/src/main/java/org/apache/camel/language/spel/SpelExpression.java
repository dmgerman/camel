begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.spel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|spel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExpressionEvaluationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ExpressionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|util
operator|.
name|RegistryBeanResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|expression
operator|.
name|BeanFactoryResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|expression
operator|.
name|BeanResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|expression
operator|.
name|EvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|expression
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|expression
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|expression
operator|.
name|common
operator|.
name|TemplateParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|expression
operator|.
name|spel
operator|.
name|standard
operator|.
name|SpelExpressionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|expression
operator|.
name|spel
operator|.
name|support
operator|.
name|StandardEvaluationContext
import|;
end_import

begin_comment
comment|/**  * Class responsible for evaluating<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions">  * Spring Expression Language (SpEL)</a> in the context of Camel.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|SpelExpression
specifier|public
class|class
name|SpelExpression
extends|extends
name|ExpressionSupport
block|{
DECL|field|expressionString
specifier|private
specifier|final
name|String
name|expressionString
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
DECL|field|beanResolver
specifier|private
specifier|final
name|BeanResolver
name|beanResolver
decl_stmt|;
comment|// SpelExpressionParser is thread-safe according to the docs
DECL|field|expressionParser
specifier|private
specifier|final
name|SpelExpressionParser
name|expressionParser
decl_stmt|;
DECL|method|SpelExpression (String expressionString, Class<?> type)
specifier|public
name|SpelExpression
parameter_list|(
name|String
name|expressionString
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|expressionString
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SpelExpression (String expressionString, Class<?> type, BeanResolver beanResolver)
specifier|public
name|SpelExpression
parameter_list|(
name|String
name|expressionString
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|BeanResolver
name|beanResolver
parameter_list|)
block|{
name|this
operator|.
name|expressionString
operator|=
name|expressionString
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|beanResolver
operator|=
name|beanResolver
expr_stmt|;
name|this
operator|.
name|expressionParser
operator|=
operator|new
name|SpelExpressionParser
argument_list|()
expr_stmt|;
block|}
DECL|method|spel (String expression)
specifier|public
specifier|static
name|SpelExpression
name|spel
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
operator|new
name|SpelExpression
argument_list|(
name|expression
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|evaluate (Exchange exchange, Class<T> tClass)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|tClass
parameter_list|)
block|{
try|try
block|{
name|Expression
name|expression
init|=
name|parseExpression
argument_list|()
decl_stmt|;
name|EvaluationContext
name|evaluationContext
init|=
name|createEvaluationContext
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|expression
operator|.
name|getValue
argument_list|(
name|evaluationContext
argument_list|)
decl_stmt|;
comment|// Let Camel handle the type conversion
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|tClass
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExpressionEvaluationException
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createEvaluationContext (Exchange exchange)
specifier|private
name|EvaluationContext
name|createEvaluationContext
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|StandardEvaluationContext
name|evaluationContext
init|=
operator|new
name|StandardEvaluationContext
argument_list|(
operator|new
name|RootObject
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanResolver
operator|!=
literal|null
condition|)
block|{
name|evaluationContext
operator|.
name|setBeanResolver
argument_list|(
name|beanResolver
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|instanceof
name|SpringCamelContext
condition|)
block|{
comment|// Support references (like @foo) in expressions to beans defined in the Registry/ApplicationContext
name|ApplicationContext
name|applicationContext
init|=
operator|(
operator|(
name|SpringCamelContext
operator|)
name|exchange
operator|.
name|getContext
argument_list|()
operator|)
operator|.
name|getApplicationContext
argument_list|()
decl_stmt|;
name|evaluationContext
operator|.
name|setBeanResolver
argument_list|(
operator|new
name|BeanFactoryResolver
argument_list|(
name|applicationContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evaluationContext
operator|.
name|setBeanResolver
argument_list|(
operator|new
name|RegistryBeanResolver
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|evaluationContext
return|;
block|}
DECL|method|parseExpression ()
specifier|private
name|Expression
name|parseExpression
parameter_list|()
block|{
comment|// Support template parsing with #{ } delimiters
name|ParserContext
name|parserContext
init|=
operator|new
name|TemplateParserContext
argument_list|()
decl_stmt|;
name|Expression
name|expression
init|=
name|expressionParser
operator|.
name|parseExpression
argument_list|(
name|expressionString
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
return|return
name|expression
return|;
block|}
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|assertionFailureMessage (Exchange exchange)
specifier|protected
name|String
name|assertionFailureMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|expressionString
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SpelExpression["
operator|+
name|expressionString
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

