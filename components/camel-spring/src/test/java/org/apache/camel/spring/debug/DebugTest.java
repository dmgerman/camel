begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.debug
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|debug
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|DebugInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Debugger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|DebugTest
specifier|public
class|class
name|DebugTest
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DebugTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|main
specifier|protected
name|Main
name|main
decl_stmt|;
DECL|field|debugger
specifier|protected
name|Debugger
name|debugger
decl_stmt|;
DECL|field|expectedBody
specifier|protected
name|Object
name|expectedBody
init|=
literal|"<hello id='abc'>world!</hello>"
decl_stmt|;
DECL|method|testDebugger ()
specifier|public
name|void
name|testDebugger
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: example
comment|// lets run the camel route in debug mode
name|main
operator|=
operator|new
name|Main
argument_list|()
expr_stmt|;
name|main
operator|.
name|enableDebugging
argument_list|()
expr_stmt|;
name|main
operator|.
name|setApplicationContextUri
argument_list|(
literal|"org/apache/camel/spring/debug/applicationContext.xml"
argument_list|)
expr_stmt|;
name|main
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// now lets test we have a debugger available
name|debugger
operator|=
name|main
operator|.
name|getDebugger
argument_list|()
expr_stmt|;
comment|// END SNIPPET: example
name|assertNotNull
argument_list|(
literal|"should have a debugger!"
argument_list|,
name|debugger
argument_list|)
expr_stmt|;
name|DebugInterceptor
name|f1
init|=
name|assertHasInterceptor
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|DebugInterceptor
name|o1
init|=
name|assertHasInterceptor
argument_list|(
literal|"o1"
argument_list|)
decl_stmt|;
name|DebugInterceptor
name|o2
init|=
name|assertHasInterceptor
argument_list|(
literal|"o2"
argument_list|)
decl_stmt|;
comment|// now lets get the routes
name|List
argument_list|<
name|RouteType
argument_list|>
name|routes
init|=
name|main
operator|.
name|getRouteDefinitions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of routes"
argument_list|,
literal|1
argument_list|,
name|routes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lets send a message
name|CamelTemplate
name|template
init|=
name|main
operator|.
name|getCamelTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:a"
argument_list|,
name|expectedBody
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|o1Messages
init|=
name|o1
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected messages at o1"
argument_list|,
literal|1
argument_list|,
name|o1Messages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"o1 received message: "
operator|+
name|o1Messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|main
operator|!=
literal|null
condition|)
block|{
name|main
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertHasInterceptor (String id)
specifier|protected
name|DebugInterceptor
name|assertHasInterceptor
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|DebugInterceptor
name|interceptor
init|=
name|debugger
operator|.
name|getInterceptor
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have an interceptor for id: "
operator|+
name|id
argument_list|,
name|interceptor
argument_list|)
expr_stmt|;
return|return
name|interceptor
return|;
block|}
block|}
end_class

end_unit

