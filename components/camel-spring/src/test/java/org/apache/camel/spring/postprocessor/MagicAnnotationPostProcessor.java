begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.postprocessor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|postprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|InstantiationAwareBeanPostProcessorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Trivial post processor which sets the value of the annotation to the field it is applied to  */
end_comment

begin_class
annotation|@
name|Component
DECL|class|MagicAnnotationPostProcessor
specifier|public
class|class
name|MagicAnnotationPostProcessor
extends|extends
name|InstantiationAwareBeanPostProcessorAdapter
block|{
DECL|field|log
specifier|protected
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|postProcessAfterInstantiation (final Object bean, final String beanName)
specifier|public
name|boolean
name|postProcessAfterInstantiation
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
throws|throws
name|BeansException
block|{
name|ReflectionUtils
operator|.
name|doWithFields
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|ReflectionUtils
operator|.
name|FieldCallback
argument_list|()
block|{
specifier|public
name|void
name|doWith
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|MagicAnnotation
name|annotation
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|MagicAnnotation
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
operator|&&
name|field
operator|.
name|getType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Found MagicAnnotation on field "
operator|+
name|field
operator|+
literal|" of class "
operator|+
name|bean
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|ReflectionUtils
operator|.
name|makeAccessible
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|bean
argument_list|,
name|annotation
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

