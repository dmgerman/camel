begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.scan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|scan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|PatternBasedPackageScanFilter
import|;
end_import

begin_class
DECL|class|ScanTestSupport
specifier|public
specifier|abstract
class|class
name|ScanTestSupport
extends|extends
name|TestCase
block|{
DECL|field|filter
specifier|protected
name|PatternBasedPackageScanFilter
name|filter
decl_stmt|;
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
block|}
DECL|method|validateMatchingSetContains (Set<Class<?>> scannedClasses, Class<?>... matchingClasses)
specifier|protected
name|void
name|validateMatchingSetContains
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|scannedClasses
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|matchingClasses
parameter_list|)
block|{
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|expectedSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|expected
range|:
name|matchingClasses
control|)
block|{
name|expectedSet
operator|.
name|add
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
name|validateMatchingSetContains
argument_list|(
name|scannedClasses
argument_list|,
name|expectedSet
argument_list|)
expr_stmt|;
block|}
DECL|method|validateMatchingSetContains (Set<Class<?>> scannedClasses, Set<Class<?>> matchingClasses)
specifier|protected
name|void
name|validateMatchingSetContains
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|scannedClasses
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|matchingClasses
parameter_list|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|matching
init|=
name|getMatchingClasses
argument_list|(
name|scannedClasses
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of classes matched"
argument_list|,
name|matchingClasses
operator|.
name|size
argument_list|()
argument_list|,
name|matching
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|expected
range|:
name|matchingClasses
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected matching class '"
operator|+
name|expected
operator|+
literal|"' is not present"
argument_list|,
name|matching
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addIncludePatterns (String... patterns)
specifier|protected
name|void
name|addIncludePatterns
parameter_list|(
name|String
modifier|...
name|patterns
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|filter
operator|.
name|addIncludePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addExcludePatterns (String... patterns)
specifier|protected
name|void
name|addExcludePatterns
parameter_list|(
name|String
modifier|...
name|patterns
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|filter
operator|.
name|addExcludePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMatchingClasses (Set<Class<?>> scannedClasses, PatternBasedPackageScanFilter filter)
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getMatchingClasses
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|scannedClasses
parameter_list|,
name|PatternBasedPackageScanFilter
name|filter
parameter_list|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|matching
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|candidate
range|:
name|scannedClasses
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|matches
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|matching
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matching
return|;
block|}
block|}
end_class

end_unit

