begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|XmlParseTest
specifier|public
class|class
name|XmlParseTest
extends|extends
name|XmlTestSupport
block|{
DECL|method|testParseSimpleRouteXml ()
specifier|public
name|void
name|testParseSimpleRouteXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"simpleRoute.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"to"
argument_list|,
name|route
argument_list|,
literal|"seda:b"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorXml ()
specifier|public
name|void
name|testParseProcessorXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processor.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|assertProcessor
argument_list|(
name|route
argument_list|,
literal|"myProcessor"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithFilterXml ()
specifier|public
name|void
name|testParseProcessorWithFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterType
name|filter
init|=
name|assertFilter
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"juel"
argument_list|,
literal|"in.header.foo == 'bar'"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithHeaderFilterXml ()
specifier|public
name|void
name|testParseProcessorWithHeaderFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithHeaderFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterType
name|filter
init|=
name|assertFilter
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"header"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithElFilterXml ()
specifier|public
name|void
name|testParseProcessorWithElFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithElFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterType
name|filter
init|=
name|assertFilter
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"el"
argument_list|,
literal|"$in.header.foo == 'bar'"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseProcessorWithGroovyFilterXml ()
specifier|public
name|void
name|testParseProcessorWithGroovyFilterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"processorWithGroovyFilter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|FilterType
name|filter
init|=
name|assertFilter
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|filter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"groovy"
argument_list|,
literal|"in.headers.any { h -> h.startsWith('foo')}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRecipientListXml ()
specifier|public
name|void
name|testParseRecipientListXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"dynamicRecipientList.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|RecipientListType
name|node
init|=
name|assertRecipientList
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|node
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"header"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseStaticRecipientListXml ()
specifier|public
name|void
name|testParseStaticRecipientListXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"staticRecipientList.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
name|route
argument_list|,
literal|"seda:b"
argument_list|,
literal|"seda:c"
argument_list|,
literal|"seda:d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRouteWithInterceptorXml ()
specifier|public
name|void
name|testParseRouteWithInterceptorXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithInterceptor.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"to"
argument_list|,
name|route
argument_list|,
literal|"seda:d"
argument_list|)
expr_stmt|;
name|assertInterceptorRefs
argument_list|(
name|route
argument_list|,
literal|"interceptor1"
argument_list|,
literal|"interceptor2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseRouteWithChoiceXml ()
specifier|public
name|void
name|testParseRouteWithChoiceXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"routeWithChoice.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|ChoiceType
name|choice
init|=
name|assertChoice
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WhenType
argument_list|>
name|whens
init|=
name|assertListSize
argument_list|(
name|choice
operator|.
name|getWhenClauses
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertChildTo
argument_list|(
literal|"when(0)"
argument_list|,
name|whens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"seda:b"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"when(1)"
argument_list|,
name|whens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"seda:c"
argument_list|)
expr_stmt|;
name|OtherwiseType
name|otherwise
init|=
name|choice
operator|.
name|getOtherwise
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Otherwise is null"
argument_list|,
name|otherwise
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"otherwise"
argument_list|,
name|otherwise
argument_list|,
literal|"seda:d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseSplitterXml ()
specifier|public
name|void
name|testParseSplitterXml
parameter_list|()
throws|throws
name|Exception
block|{
name|RouteType
name|route
init|=
name|assertOneRoute
argument_list|(
literal|"splitter.xml"
argument_list|)
decl_stmt|;
name|assertFrom
argument_list|(
name|route
argument_list|,
literal|"seda:a"
argument_list|)
expr_stmt|;
name|SplitterType
name|splitter
init|=
name|assertSplitter
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|assertExpression
argument_list|(
name|splitter
operator|.
name|getExpression
argument_list|()
argument_list|,
literal|"xpath"
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|assertChildTo
argument_list|(
literal|"to"
argument_list|,
name|splitter
argument_list|,
literal|"seda:b"
argument_list|)
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|assertOneRoute (String uri)
specifier|protected
name|RouteType
name|assertOneRoute
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|JAXBException
block|{
name|RouteContainer
name|context
init|=
name|assertParseAsJaxb
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|RouteType
name|route
init|=
name|assertOneElement
argument_list|(
name|context
operator|.
name|getRoutes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|route
return|;
block|}
DECL|method|assertFrom (RouteType route, String uri)
specifier|protected
name|void
name|assertFrom
parameter_list|(
name|RouteType
name|route
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|FromType
name|from
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getInputs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"From URI"
argument_list|,
name|uri
argument_list|,
name|from
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChildTo (String message, ProcessorType route, String uri)
specifier|protected
name|void
name|assertChildTo
parameter_list|(
name|String
name|message
parameter_list|,
name|ProcessorType
name|route
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|ProcessorType
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
name|ToType
name|value
init|=
name|assertIsInstanceOf
argument_list|(
name|ToType
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|message
operator|+
literal|"To URI"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing: "
operator|+
name|text
operator|+
literal|" is equal to: "
operator|+
name|uri
operator|+
literal|" for processor: "
operator|+
name|processor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|uri
argument_list|,
name|value
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTo (String message, ProcessorType processor, String uri)
specifier|protected
name|void
name|assertTo
parameter_list|(
name|String
name|message
parameter_list|,
name|ProcessorType
name|processor
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|ToType
name|value
init|=
name|assertIsInstanceOf
argument_list|(
name|ToType
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|message
operator|+
literal|"To URI"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Testing: "
operator|+
name|text
operator|+
literal|" is equal to: "
operator|+
name|uri
operator|+
literal|" for processor: "
operator|+
name|processor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|uri
argument_list|,
name|value
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChildTo (ProcessorType route, String... uris)
specifier|protected
name|void
name|assertChildTo
parameter_list|(
name|ProcessorType
name|route
parameter_list|,
name|String
modifier|...
name|uris
parameter_list|)
block|{
name|List
argument_list|<
name|ProcessorType
argument_list|>
name|list
init|=
name|assertListSize
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|uris
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|assertTo
argument_list|(
literal|"output["
operator|+
name|idx
operator|+
literal|"] "
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertProcessor (ProcessorType route, String processorRef)
specifier|protected
name|void
name|assertProcessor
parameter_list|(
name|ProcessorType
name|route
parameter_list|,
name|String
name|processorRef
parameter_list|)
block|{
name|ProcessorType
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
name|ProcessorRef
name|to
init|=
name|assertIsInstanceOf
argument_list|(
name|ProcessorRef
operator|.
name|class
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Processor ref"
argument_list|,
name|processorRef
argument_list|,
name|to
operator|.
name|getRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFilter (ProcessorType route)
specifier|protected
name|FilterType
name|assertFilter
parameter_list|(
name|ProcessorType
name|route
parameter_list|)
block|{
name|ProcessorType
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|FilterType
operator|.
name|class
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|assertRecipientList (ProcessorType route)
specifier|protected
name|RecipientListType
name|assertRecipientList
parameter_list|(
name|ProcessorType
name|route
parameter_list|)
block|{
name|ProcessorType
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|RecipientListType
operator|.
name|class
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|assertChoice (ProcessorType route)
specifier|protected
name|ChoiceType
name|assertChoice
parameter_list|(
name|ProcessorType
name|route
parameter_list|)
block|{
name|ProcessorType
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|ChoiceType
operator|.
name|class
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|assertSplitter (ProcessorType route)
specifier|protected
name|SplitterType
name|assertSplitter
parameter_list|(
name|ProcessorType
name|route
parameter_list|)
block|{
name|ProcessorType
name|processor
init|=
name|assertOneElement
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|SplitterType
operator|.
name|class
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|assertExpression (ExpressionType expression, String language, String languageExpression)
specifier|protected
name|void
name|assertExpression
parameter_list|(
name|ExpressionType
name|expression
parameter_list|,
name|String
name|language
parameter_list|,
name|String
name|languageExpression
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Expression should not be null!"
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expression language"
argument_list|,
name|language
argument_list|,
name|expression
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expression"
argument_list|,
name|languageExpression
argument_list|,
name|expression
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInterceptorRefs (ProcessorType route, String... names)
specifier|protected
name|void
name|assertInterceptorRefs
parameter_list|(
name|ProcessorType
name|route
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|InterceptorRef
argument_list|>
name|interceptors
init|=
name|route
operator|.
name|getInterceptors
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|int
name|nextIdx
init|=
name|idx
operator|+
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not enough interceptors! Expected: "
operator|+
name|nextIdx
operator|+
literal|" but have: "
operator|+
name|interceptors
argument_list|,
name|nextIdx
operator|<=
name|interceptors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InterceptorRef
name|interceptor
init|=
name|interceptors
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Interceptor: "
operator|+
name|idx
argument_list|,
name|name
argument_list|,
name|interceptor
operator|.
name|getRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

