begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.log
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|log
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|MaskingFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|SpringLogMaskTest
specifier|public
class|class
name|SpringLogMaskTest
block|{
annotation|@
name|Test
DECL|method|testLogMask ()
specifier|public
name|void
name|testLogMask
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AbstractXmlApplicationContext
name|applicationContext
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/log/SpringLogMaskTest-context.xml"
argument_list|)
decl_stmt|;
name|SpringCamelContext
name|context
init|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|applicationContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:mask"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:mask"
argument_list|,
literal|"password=passw0rd@"
argument_list|,
literal|"headerPassword"
argument_list|,
literal|"#header-password$"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndProperty
argument_list|(
literal|"direct:mask"
argument_list|,
literal|"password=passw0rd@"
argument_list|,
literal|"propertyPassphrase"
argument_list|,
literal|"#property-passphrase$"
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogMaskDisabled ()
specifier|public
name|void
name|testLogMaskDisabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AbstractXmlApplicationContext
name|applicationContext
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/log/SpringLogMaskTest-context.xml"
argument_list|)
decl_stmt|;
name|SpringCamelContext
name|context
init|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|applicationContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:no-mask"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:no-mask"
argument_list|,
literal|"password=passw0rd@"
argument_list|,
literal|"headerPassword"
argument_list|,
literal|"#header-password$"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndProperty
argument_list|(
literal|"direct:no-mask"
argument_list|,
literal|"password=passw0rd@"
argument_list|,
literal|"propertyPassphrase"
argument_list|,
literal|"#property-passphrase$"
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomLogMask ()
specifier|public
name|void
name|testCustomLogMask
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AbstractXmlApplicationContext
name|applicationContext
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/log/SpringCustomLogMaskTest-context.xml"
argument_list|)
decl_stmt|;
name|SpringCamelContext
name|context
init|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|applicationContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockMaskingFormatter
name|customFormatter
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
name|Constants
operator|.
name|CUSTOM_LOG_MASK_REF
argument_list|,
name|MockMaskingFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|ProducerTemplate
name|template
init|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:mock"
argument_list|,
literal|"password=passw0rd@"
argument_list|,
literal|"headerPassword"
argument_list|,
literal|"#header-password$"
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|customFormatter
operator|.
name|received
operator|.
name|contains
argument_list|(
literal|"password=passw0rd@"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockMaskingFormatter
specifier|public
specifier|static
class|class
name|MockMaskingFormatter
implements|implements
name|MaskingFormatter
block|{
DECL|field|received
specifier|private
name|String
name|received
decl_stmt|;
annotation|@
name|Override
DECL|method|format (String source)
specifier|public
name|String
name|format
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|received
operator|=
name|source
expr_stmt|;
return|return
name|source
return|;
block|}
block|}
block|}
end_class

end_unit

