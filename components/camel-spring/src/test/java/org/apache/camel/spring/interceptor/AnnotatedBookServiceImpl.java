begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.interceptor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|annotation
operator|.
name|Transactional
import|;
end_import

begin_comment
comment|/**  * Used for unit testing that we can use spring and camel annotations mixed together  */
end_comment

begin_class
annotation|@
name|Transactional
annotation|@
name|Service
DECL|class|AnnotatedBookServiceImpl
specifier|public
class|class
name|AnnotatedBookServiceImpl
implements|implements
name|AnnotatedBookStore
block|{
annotation|@
name|Autowired
DECL|field|dataSource
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"seda:book"
argument_list|)
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
DECL|method|orderBook (String title)
specifier|public
name|void
name|orderBook
parameter_list|(
name|String
name|title
parameter_list|)
throws|throws
name|Exception
block|{
name|Transactional
name|tx
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Transactional
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Spring annotation-driven should have instrumented this class as @Transactional"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
literal|"REQUIRED"
operator|.
name|equals
argument_list|(
name|tx
operator|.
name|propagation
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should be REQUIRED propagation"
argument_list|)
throw|;
block|}
if|if
condition|(
name|title
operator|.
name|startsWith
argument_list|(
literal|"Donkey"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"We don't have Donkeys, only Camels"
argument_list|)
throw|;
block|}
comment|// create new local datasource to store in DB
operator|new
name|JdbcTemplate
argument_list|(
name|dataSource
argument_list|)
operator|.
name|update
argument_list|(
literal|"insert into books (title) values (?)"
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

