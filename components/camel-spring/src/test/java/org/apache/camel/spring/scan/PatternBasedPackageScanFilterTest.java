begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.scan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|scan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
operator|.
name|PatternBasedPackageScanFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PatternBasedPackageScanFilterTest
specifier|public
class|class
name|PatternBasedPackageScanFilterTest
extends|extends
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|scan
operator|.
name|ScanTestSupport
block|{
DECL|field|allClasses
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|allClasses
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// use classes that are pretty much constants
name|allClasses
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
expr_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|LinkedList
operator|.
name|class
argument_list|)
expr_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|FileInputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|RandomAccessFile
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// contains file pattern but in util pkg not io
name|allClasses
operator|.
name|add
argument_list|(
name|JarFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoPattersIncludeAllClasses ()
specifier|public
name|void
name|testNoPattersIncludeAllClasses
parameter_list|()
block|{
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncludePatterns ()
specifier|public
name|void
name|testIncludePatterns
parameter_list|()
block|{
name|addIncludePatterns
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.io.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|FileInputStream
operator|.
name|class
argument_list|,
name|RandomAccessFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.util.**"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|,
name|JarFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.io.*"
argument_list|,
literal|"java.util.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.io.File"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.io.File*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|FileInputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.io.*File*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|FileInputStream
operator|.
name|class
argument_list|,
name|RandomAccessFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.**.*File*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|FileInputStream
operator|.
name|class
argument_list|,
name|RandomAccessFile
operator|.
name|class
argument_list|,
name|JarFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.util.*List"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.lang"
argument_list|,
literal|"java.lang.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addIncludePatterns
argument_list|(
literal|"java.lang"
argument_list|,
literal|"java.lang.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExcludePatterns ()
specifier|public
name|void
name|testExcludePatterns
parameter_list|()
block|{
name|addExcludePatterns
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.io.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|,
name|JarFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.util.**"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|FileInputStream
operator|.
name|class
argument_list|,
name|RandomAccessFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.io.*"
argument_list|,
literal|"java.util.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.io.File"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|,
name|JarFile
operator|.
name|class
argument_list|,
name|FileInputStream
operator|.
name|class
argument_list|,
name|RandomAccessFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.io.File*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|,
name|JarFile
operator|.
name|class
argument_list|,
name|RandomAccessFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.io.*File*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|,
name|JarFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.**.*File*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.util.*List"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|FileInputStream
operator|.
name|class
argument_list|,
name|RandomAccessFile
operator|.
name|class
argument_list|,
name|JarFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.lang"
argument_list|,
literal|"java.lang.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.lang"
argument_list|,
literal|"java.lang.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExcludeHasPrecedenceOverInclude ()
specifier|public
name|void
name|testExcludeHasPrecedenceOverInclude
parameter_list|()
block|{
comment|// include any classes from the util pkg but exclude those in jar
name|addIncludePatterns
argument_list|(
literal|"java.util.*"
argument_list|)
expr_stmt|;
name|addExcludePatterns
argument_list|(
literal|"java.util.jar.*"
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|,
name|LinkedList
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBulkIncludeAdd ()
specifier|public
name|void
name|testBulkIncludeAdd
parameter_list|()
block|{
comment|// include any classes from the util pkg but exclude those in jar
name|Set
argument_list|<
name|String
argument_list|>
name|includes
init|=
name|CollectionHelper
operator|.
name|createSetContaining
argument_list|(
literal|"java.io.*"
argument_list|,
literal|"java.util.*"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|addIncludePatterns
argument_list|(
name|includes
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBulkExcludeAdd ()
specifier|public
name|void
name|testBulkExcludeAdd
parameter_list|()
block|{
comment|// include any classes from the util pkg but exclude those in jar
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
init|=
name|CollectionHelper
operator|.
name|createSetContaining
argument_list|(
literal|"java.io.*"
argument_list|,
literal|"java.util.*"
argument_list|)
decl_stmt|;
name|filter
operator|.
name|addExcludePatterns
argument_list|(
name|excludes
argument_list|)
expr_stmt|;
name|validateMatchingSetContains
argument_list|()
expr_stmt|;
block|}
DECL|method|validateMatchingSetContains (Class<?>.... matchingClasses)
specifier|protected
name|void
name|validateMatchingSetContains
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|matchingClasses
parameter_list|)
block|{
name|super
operator|.
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|,
name|matchingClasses
argument_list|)
expr_stmt|;
block|}
DECL|method|validateMatchingSetContains (Set<Class<?>> matchingClasses)
specifier|protected
name|void
name|validateMatchingSetContains
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|matchingClasses
parameter_list|)
block|{
name|super
operator|.
name|validateMatchingSetContains
argument_list|(
name|allClasses
argument_list|,
name|matchingClasses
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

