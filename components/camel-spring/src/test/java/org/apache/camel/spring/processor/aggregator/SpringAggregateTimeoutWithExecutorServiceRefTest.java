begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.processor.aggregator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|processor
operator|.
name|aggregator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregateProcessor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|processor
operator|.
name|SpringTestHelper
operator|.
name|createSpringCamelContext
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|SpringAggregateTimeoutWithExecutorServiceRefTest
specifier|public
class|class
name|SpringAggregateTimeoutWithExecutorServiceRefTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|NUM_AGGREGATORS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_AGGREGATORS
init|=
literal|4
decl_stmt|;
DECL|method|testThreadNotUsedForEveryAggregatorWithCustomExecutorService ()
specifier|public
name|void
name|testThreadNotUsedForEveryAggregatorWithCustomExecutorService
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"There should not be a thread for every aggregator when using a shared thread pool"
argument_list|,
name|aggregateThreadsCount
argument_list|()
operator|<
name|NUM_AGGREGATORS
argument_list|)
expr_stmt|;
comment|// sanity check to make sure were testing routes that work
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_AGGREGATORS
condition|;
operator|++
name|i
control|)
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
operator|+
name|i
argument_list|)
decl_stmt|;
comment|// by default the use latest aggregation strategy is used so we get message 4
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Message 4"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_AGGREGATORS
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
operator|+
name|i
argument_list|,
literal|"Message "
operator|+
name|j
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|aggregateThreadsCount ()
specifier|public
specifier|static
name|int
name|aggregateThreadsCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ThreadGroup
name|threadGroup
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadGroup
operator|.
name|activeCount
argument_list|()
index|]
decl_stmt|;
name|threadGroup
operator|.
name|enumerate
argument_list|(
name|threads
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
if|if
condition|(
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|AggregateProcessor
operator|.
name|AGGREGATE_TIMEOUT_CHECKER
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createSpringCamelContext
argument_list|(
name|this
argument_list|,
literal|"org/apache/camel/spring/processor/aggregator/SpringAggregateTimeoutWithExecutorServiceRefTest.xml"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

