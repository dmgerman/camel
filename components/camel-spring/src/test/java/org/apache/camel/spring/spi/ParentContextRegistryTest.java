begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|ParentContextRegistryTest
specifier|public
class|class
name|ParentContextRegistryTest
extends|extends
name|SpringTestSupport
block|{
DECL|field|EXPECTED_BEAN
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|EXPECTED_BEAN
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"TestValue"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
name|ClassPathXmlApplicationContext
name|parentContext
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"parentContextRegistryTestParent.xml"
argument_list|,
name|ParentContextRegistryTest
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"parentContextRegistryTestChild.xml"
block|}
argument_list|,
name|ParentContextRegistryTest
operator|.
name|class
argument_list|,
name|parentContext
argument_list|)
return|;
block|}
DECL|method|testLookupByName ()
specifier|public
name|void
name|testLookupByName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|EXPECTED_BEAN
argument_list|,
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
literal|"testParentBean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLookupByNameAndType ()
specifier|public
name|void
name|testLookupByNameAndType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|EXPECTED_BEAN
argument_list|,
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
literal|"testParentBean"
argument_list|,
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindByType ()
specifier|public
name|void
name|testFindByType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|EXPECTED_BEAN
argument_list|)
argument_list|,
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFindByTypeWithName ()
specifier|public
name|void
name|testFindByTypeWithName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"testParentBean"
argument_list|,
name|EXPECTED_BEAN
argument_list|)
argument_list|,
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

