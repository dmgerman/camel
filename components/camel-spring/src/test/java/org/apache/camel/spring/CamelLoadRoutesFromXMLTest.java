begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|CamelLoadRoutesFromXMLTest
specifier|public
class|class
name|CamelLoadRoutesFromXMLTest
extends|extends
name|SpringTestSupport
block|{
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/spring/camelLoadRoutesFromXMLTest.xml"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testLoadRoutes ()
specifier|public
name|void
name|testLoadRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringCamelContext
name|camel
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
name|SpringCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|camel
operator|.
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|camel
operator|.
name|getStatus
argument_list|()
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
comment|// load routes from xml file
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"myRoutes.xml"
argument_list|)
decl_stmt|;
name|RoutesDefinition
name|routes
init|=
name|camel
operator|.
name|loadRoutesDefinition
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|camel
operator|.
name|addRouteDefinitions
argument_list|(
name|routes
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|camel
operator|.
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// they should be started
name|assertTrue
argument_list|(
name|camel
operator|.
name|getRouteStatus
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|camel
operator|.
name|getRouteStatus
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
comment|// and they should work
name|MockEndpoint
name|foo
init|=
name|camel
operator|.
name|getEndpoint
argument_list|(
literal|"mock:foo"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|foo
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|bar
init|=
name|camel
operator|.
name|getEndpoint
argument_list|(
literal|"mock:bar"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|bar
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
name|ProducerTemplate
name|producer
init|=
name|camel
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|producer
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|sendBody
argument_list|(
literal|"direct:bar"
argument_list|,
literal|"Bye World"
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
expr_stmt|;
comment|// remove the routes
name|camel
operator|.
name|removeRouteDefinitions
argument_list|(
name|routes
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
comment|// they should be removed
name|assertNull
argument_list|(
name|camel
operator|.
name|getRouteStatus
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|camel
operator|.
name|getRouteStatus
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// you can also do this manually via their route ids
comment|//camel.stopRoute("foo");
comment|//camel.removeRoute("foo");
comment|//camel.stopRoute("bar");
comment|//camel.removeRoute("bar");
comment|// load updated xml
name|is
operator|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"myUpdatedRoutes.xml"
argument_list|)
expr_stmt|;
name|routes
operator|=
name|camel
operator|.
name|loadRoutesDefinition
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|camel
operator|.
name|addRouteDefinitions
argument_list|(
name|routes
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|camel
operator|.
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// they should be started
name|assertTrue
argument_list|(
name|camel
operator|.
name|getRouteStatus
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|camel
operator|.
name|getRouteStatus
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
comment|// and they should work again (need to get new mock endpoint as the old is gone)
name|foo
operator|=
name|camel
operator|.
name|getEndpoint
argument_list|(
literal|"mock:foo"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|foo
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Updated: Hello World"
argument_list|)
expr_stmt|;
name|bar
operator|=
name|camel
operator|.
name|getEndpoint
argument_list|(
literal|"mock:bar"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|bar
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Updated: Bye World"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|sendBody
argument_list|(
literal|"direct:bar"
argument_list|,
literal|"Bye World"
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

