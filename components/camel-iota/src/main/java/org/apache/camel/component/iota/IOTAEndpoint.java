begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.iota
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|iota
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|jota
operator|.
name|IotaAPI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_comment
comment|/**  * Component for integrate IOTA DLT  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.23.0"
argument_list|,
name|scheme
operator|=
literal|"iota"
argument_list|,
name|title
operator|=
literal|"IOTA"
argument_list|,
name|syntax
operator|=
literal|"iota:name"
argument_list|,
name|label
operator|=
literal|"dlt"
argument_list|)
DECL|class|IOTAEndpoint
specifier|public
class|class
name|IOTAEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|apiClient
specifier|private
name|IotaAPI
name|apiClient
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
annotation|@
name|UriParam
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
annotation|@
name|UriParam
DECL|field|operation
specifier|private
name|String
name|operation
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tag
specifier|private
name|String
name|tag
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1"
argument_list|)
DECL|field|securityLevel
specifier|private
name|Integer
name|securityLevel
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"14"
argument_list|)
DECL|field|minWeightMagnitude
specifier|private
name|Integer
name|minWeightMagnitude
init|=
name|IOTAConstants
operator|.
name|MIN_WEIGHT_MAGNITUDE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"9"
argument_list|)
DECL|field|depth
specifier|private
name|Integer
name|depth
init|=
name|IOTAConstants
operator|.
name|DEPTH
decl_stmt|;
DECL|method|IOTAEndpoint ()
specifier|public
name|IOTAEndpoint
parameter_list|()
block|{     }
DECL|method|IOTAEndpoint (String uri, IOTAComponent component)
specifier|public
name|IOTAEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|IOTAComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|IOTAProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"IOTAConsumer is not supported!"
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|apiClient
operator|=
operator|new
name|IotaAPI
operator|.
name|Builder
argument_list|()
operator|.
name|protocol
argument_list|(
name|u
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|host
argument_list|(
name|u
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|port
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|u
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|apiClient
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Component name      *       * @param url      */
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getUrl ()
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
comment|/**      * Node url      *       * @param url      */
DECL|method|setUrl (String url)
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
DECL|method|getTag ()
specifier|public
name|String
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
comment|/**      * TAG      *       * @param tag      */
DECL|method|setTag (String tag)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
DECL|method|getSecurityLevel ()
specifier|public
name|Integer
name|getSecurityLevel
parameter_list|()
block|{
return|return
name|securityLevel
return|;
block|}
comment|/**      * Address security level      *       * @param security level      */
DECL|method|setSecurityLevel (Integer securityLevel)
specifier|public
name|void
name|setSecurityLevel
parameter_list|(
name|Integer
name|securityLevel
parameter_list|)
block|{
name|this
operator|.
name|securityLevel
operator|=
name|securityLevel
expr_stmt|;
block|}
DECL|method|getMinWeightMagnitude ()
specifier|public
name|Integer
name|getMinWeightMagnitude
parameter_list|()
block|{
return|return
name|minWeightMagnitude
return|;
block|}
comment|/**      * The minWeightMagnitude is the minimum number of zeroes that a      * proof-of-work output/transaction hash must end with to be considered      * valid by full nodes      *       * @param minWeightMagnitude      */
DECL|method|setMinWeightMagnitude (Integer minWeightMagnitude)
specifier|public
name|void
name|setMinWeightMagnitude
parameter_list|(
name|Integer
name|minWeightMagnitude
parameter_list|)
block|{
name|this
operator|.
name|minWeightMagnitude
operator|=
name|minWeightMagnitude
expr_stmt|;
block|}
DECL|method|getDepth ()
specifier|public
name|Integer
name|getDepth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
comment|/**      * The depth determines how deep the tangle is analysed for getting Tips      *       * @param depth      */
DECL|method|setDepth (Integer depth)
specifier|public
name|void
name|setDepth
parameter_list|(
name|Integer
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
DECL|method|getApiClient ()
specifier|public
name|IotaAPI
name|getApiClient
parameter_list|()
block|{
return|return
name|apiClient
return|;
block|}
DECL|method|getOperation ()
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
comment|/**      * Supported operations are 'sendTransfer', 'getNewAddress'      *       * @param operation      */
DECL|method|setOperation (String operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
block|}
end_class

end_unit

