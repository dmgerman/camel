begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo4.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|Olingo4App
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|Olingo4ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo4BatchChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo4BatchQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo4BatchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo4BatchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|batch
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Consts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponseFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|entity
operator|.
name|DecompressingEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpEntityEnclosingRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|MessageConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|AbstractHttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|DefaultHttpResponseFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|DefaultHttpResponseParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|io
operator|.
name|HttpTransportMetricsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|io
operator|.
name|SessionInputBufferImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|ODataBatchConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|ODataClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|communication
operator|.
name|request
operator|.
name|ODataStreamer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|communication
operator|.
name|request
operator|.
name|batch
operator|.
name|ODataBatchLineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientPrimitiveValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|serialization
operator|.
name|ODataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|serialization
operator|.
name|ODataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|uri
operator|.
name|SegmentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|core
operator|.
name|ODataClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|core
operator|.
name|communication
operator|.
name|request
operator|.
name|batch
operator|.
name|ODataBatchController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|core
operator|.
name|communication
operator|.
name|request
operator|.
name|batch
operator|.
name|ODataBatchLineIteratorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|core
operator|.
name|communication
operator|.
name|request
operator|.
name|batch
operator|.
name|ODataBatchUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|core
operator|.
name|http
operator|.
name|HttpMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|edm
operator|.
name|Edm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmPrimitiveTypeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmReturnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|edm
operator|.
name|constants
operator|.
name|ODataServiceVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|ex
operator|.
name|ODataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|format
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|http
operator|.
name|HttpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|commons
operator|.
name|api
operator|.
name|http
operator|.
name|HttpStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|api
operator|.
name|OData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|api
operator|.
name|uri
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|api
operator|.
name|uri
operator|.
name|UriInfoKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|api
operator|.
name|uri
operator|.
name|UriParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|api
operator|.
name|uri
operator|.
name|UriResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|api
operator|.
name|uri
operator|.
name|UriResourceEntitySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|api
operator|.
name|uri
operator|.
name|UriResourceKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|core
operator|.
name|uri
operator|.
name|UriResourceFunctionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|core
operator|.
name|uri
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|core
operator|.
name|uri
operator|.
name|parser
operator|.
name|UriParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|server
operator|.
name|core
operator|.
name|uri
operator|.
name|validator
operator|.
name|UriValidationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
operator|.
name|api
operator|.
name|impl
operator|.
name|Olingo4Helper
operator|.
name|getContentTypeHeader
import|;
end_import

begin_comment
comment|/**  * Application API used by Olingo4 Component.  */
end_comment

begin_class
DECL|class|Olingo4AppImpl
specifier|public
specifier|final
class|class
name|Olingo4AppImpl
implements|implements
name|Olingo4App
block|{
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
DECL|field|BOUNDARY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|BOUNDARY_PREFIX
init|=
literal|"batch_"
decl_stmt|;
DECL|field|BOUNDARY_PARAMETER
specifier|private
specifier|static
specifier|final
name|String
name|BOUNDARY_PARAMETER
init|=
literal|"; boundary="
decl_stmt|;
DECL|field|BOUNDARY_DOUBLE_DASH
specifier|private
specifier|static
specifier|final
name|String
name|BOUNDARY_DOUBLE_DASH
init|=
literal|"--"
decl_stmt|;
DECL|field|MULTIPART_MIME_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPART_MIME_TYPE
init|=
literal|"multipart/"
decl_stmt|;
DECL|field|CONTENT_ID_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_ID_HEADER
init|=
literal|"Content-ID"
decl_stmt|;
DECL|field|CLIENT_ENTITY_FAKE_MARKER
specifier|private
specifier|static
specifier|final
name|String
name|CLIENT_ENTITY_FAKE_MARKER
init|=
literal|"('X')"
decl_stmt|;
DECL|field|DEFAULT_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|DEFAULT_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|,
name|ContentType
operator|.
name|PARAMETER_CHARSET
argument_list|,
name|Constants
operator|.
name|UTF8
argument_list|)
decl_stmt|;
DECL|field|METADATA_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|METADATA_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|ContentType
operator|.
name|APPLICATION_XML
argument_list|,
name|ContentType
operator|.
name|PARAMETER_CHARSET
argument_list|,
name|Constants
operator|.
name|UTF8
argument_list|)
decl_stmt|;
DECL|field|TEXT_PLAIN_WITH_CS_UTF_8
specifier|private
specifier|static
specifier|final
name|ContentType
name|TEXT_PLAIN_WITH_CS_UTF_8
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|ContentType
operator|.
name|TEXT_PLAIN
argument_list|,
name|ContentType
operator|.
name|PARAMETER_CHARSET
argument_list|,
name|Constants
operator|.
name|UTF8
argument_list|)
decl_stmt|;
DECL|field|SERVICE_DOCUMENT_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|SERVICE_DOCUMENT_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|APPLICATION_JSON
decl_stmt|;
DECL|field|BATCH_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|BATCH_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|MULTIPART_MIXED
decl_stmt|;
comment|/**      * Reference to CloseableHttpAsyncClient (default) or CloseableHttpClient      */
DECL|field|client
specifier|private
specifier|final
name|Closeable
name|client
decl_stmt|;
comment|/**      * Reference to ODataClient reader and writer      */
DECL|field|odataClient
specifier|private
specifier|final
name|ODataClient
name|odataClient
init|=
name|ODataClientFactory
operator|.
name|getClient
argument_list|()
decl_stmt|;
DECL|field|odataReader
specifier|private
specifier|final
name|ODataReader
name|odataReader
init|=
name|odataClient
operator|.
name|getReader
argument_list|()
decl_stmt|;
DECL|field|odataWriter
specifier|private
specifier|final
name|ODataWriter
name|odataWriter
init|=
name|odataClient
operator|.
name|getWriter
argument_list|()
decl_stmt|;
DECL|field|serviceUri
specifier|private
name|String
name|serviceUri
decl_stmt|;
DECL|field|contentType
specifier|private
name|ContentType
name|contentType
decl_stmt|;
DECL|field|httpHeaders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
decl_stmt|;
comment|/**      * Create Olingo4 Application with default HTTP configuration.      */
DECL|method|Olingo4AppImpl (String serviceUri)
specifier|public
name|Olingo4AppImpl
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
comment|// By default create HTTP asynchronous client
name|this
argument_list|(
name|serviceUri
argument_list|,
operator|(
name|HttpClientBuilder
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create Olingo4 Application with custom HTTP Asynchronous client builder.      *      * @param serviceUri Service Application base URI.      * @param builder custom HTTP client builder.      */
DECL|method|Olingo4AppImpl (String serviceUri, HttpAsyncClientBuilder builder)
specifier|public
name|Olingo4AppImpl
parameter_list|(
name|String
name|serviceUri
parameter_list|,
name|HttpAsyncClientBuilder
name|builder
parameter_list|)
block|{
name|setServiceUri
argument_list|(
name|serviceUri
argument_list|)
expr_stmt|;
name|CloseableHttpAsyncClient
name|asyncClient
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|asyncClient
operator|=
name|HttpAsyncClients
operator|.
name|createDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|asyncClient
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|asyncClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|asyncClient
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|DEFAULT_CONTENT_TYPE
expr_stmt|;
block|}
comment|/**      * Create Olingo4 Application with custom HTTP Synchronous client builder.      *      * @param serviceUri Service Application base URI.      * @param builder Custom HTTP Synchronous client builder.      */
DECL|method|Olingo4AppImpl (String serviceUri, HttpClientBuilder builder)
specifier|public
name|Olingo4AppImpl
parameter_list|(
name|String
name|serviceUri
parameter_list|,
name|HttpClientBuilder
name|builder
parameter_list|)
block|{
name|setServiceUri
argument_list|(
name|serviceUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|client
operator|=
name|HttpClients
operator|.
name|createDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|client
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|contentType
operator|=
name|DEFAULT_CONTENT_TYPE
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setServiceUri (String serviceUri)
specifier|public
name|void
name|setServiceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
if|if
condition|(
name|serviceUri
operator|==
literal|null
operator|||
name|serviceUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"serviceUri"
argument_list|)
throw|;
block|}
name|this
operator|.
name|serviceUri
operator|=
name|serviceUri
operator|.
name|endsWith
argument_list|(
name|SEPARATOR
argument_list|)
condition|?
name|serviceUri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|serviceUri
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|serviceUri
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getServiceUri ()
specifier|public
name|String
name|getServiceUri
parameter_list|()
block|{
return|return
name|serviceUri
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHttpHeaders
parameter_list|()
block|{
return|return
name|httpHeaders
return|;
block|}
annotation|@
name|Override
DECL|method|setHttpHeaders (Map<String, String> httpHeaders)
specifier|public
name|void
name|setHttpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|this
operator|.
name|httpHeaders
operator|=
name|httpHeaders
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
operator|.
name|toContentTypeString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setContentType (String contentType)
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|ContentType
operator|.
name|parse
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|read (final Edm edm, final String resourcePath, final Map<String, String> queryParams, final Olingo4ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|read
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
specifier|final
name|String
name|resourcePath
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
parameter_list|,
specifier|final
name|Olingo4ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|String
name|queryOptions
init|=
name|concatQueryParams
argument_list|(
name|queryParams
argument_list|)
decl_stmt|;
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
name|queryOptions
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|HttpGet
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
name|queryOptions
argument_list|)
argument_list|)
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|,
operator|new
name|AbstractFutureCallback
argument_list|<
name|T
argument_list|>
argument_list|(
name|responseHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|(
name|HttpResponse
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|readContent
argument_list|(
name|uriInfo
argument_list|,
name|result
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
else|:
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uread (final Edm edm, final String resourcePath, final Map<String, String> queryParams, final Olingo4ResponseHandler<InputStream> responseHandler)
specifier|public
name|void
name|uread
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
specifier|final
name|String
name|resourcePath
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
parameter_list|,
specifier|final
name|Olingo4ResponseHandler
argument_list|<
name|InputStream
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|String
name|queryOptions
init|=
name|concatQueryParams
argument_list|(
name|queryParams
argument_list|)
decl_stmt|;
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
name|queryOptions
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|HttpGet
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
name|queryOptions
argument_list|)
argument_list|)
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|,
operator|new
name|AbstractFutureCallback
argument_list|<
name|InputStream
argument_list|>
argument_list|(
name|responseHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|(
name|HttpResponse
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|responseStream
init|=
name|result
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|responseStream
operator|!=
literal|null
operator|&&
name|result
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|DecompressingEntity
condition|)
block|{
comment|// In case of GZIP compression it's necessary to create
comment|// InputStream from the source byte array
name|responseHandler
operator|.
name|onResponse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|responseStream
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responseHandler
operator|.
name|onResponse
argument_list|(
name|responseStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (Edm edm, String resourcePath, Object data, Olingo4ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|create
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo4ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPost
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (Edm edm, String resourcePath, Object data, Olingo4ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|update
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo4ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPut
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete (String resourcePath, final Olingo4ResponseHandler<HttpStatusCode> responseHandler)
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|resourcePath
parameter_list|,
specifier|final
name|Olingo4ResponseHandler
argument_list|<
name|HttpStatusCode
argument_list|>
name|responseHandler
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|HttpDelete
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|)
argument_list|)
argument_list|,
name|contentType
argument_list|,
operator|new
name|AbstractFutureCallback
argument_list|<
name|HttpStatusCode
argument_list|>
argument_list|(
name|responseHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|(
name|HttpResponse
name|result
parameter_list|)
block|{
specifier|final
name|StatusLine
name|statusLine
init|=
name|result
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
name|responseHandler
operator|.
name|onResponse
argument_list|(
name|HttpStatusCode
operator|.
name|fromStatusCode
argument_list|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|patch (Edm edm, String resourcePath, Object data, Olingo4ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|patch
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo4ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPatch
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge (Edm edm, String resourcePath, Object data, Olingo4ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|merge
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo4ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpMerge
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|batch (Edm edm, Object data, Olingo4ResponseHandler<List<Olingo4BatchResponse>> responseHandler)
specifier|public
name|void
name|batch
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo4ResponseHandler
argument_list|<
name|List
argument_list|<
name|Olingo4BatchResponse
argument_list|>
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|SegmentType
operator|.
name|BATCH
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPost
argument_list|(
name|createUri
argument_list|(
name|SegmentType
operator|.
name|BATCH
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|getResourceContentType (UriInfo uriInfo)
specifier|private
name|ContentType
name|getResourceContentType
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|ContentType
name|resourceContentType
decl_stmt|;
switch|switch
condition|(
name|uriInfo
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|service
case|:
comment|// service document
name|resourceContentType
operator|=
name|SERVICE_DOCUMENT_CONTENT_TYPE
expr_stmt|;
break|break;
case|case
name|metadata
case|:
comment|// metadata
name|resourceContentType
operator|=
name|METADATA_CONTENT_TYPE
expr_stmt|;
break|break;
case|case
name|resource
case|:
name|List
argument_list|<
name|UriResource
argument_list|>
name|listResource
init|=
name|uriInfo
operator|.
name|getUriResourceParts
argument_list|()
decl_stmt|;
name|UriResourceKind
name|lastResourceKind
init|=
name|listResource
operator|.
name|get
argument_list|(
name|listResource
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
decl_stmt|;
comment|// is it a $value or $count URI??
if|if
condition|(
name|lastResourceKind
operator|==
name|UriResourceKind
operator|.
name|count
operator|||
name|lastResourceKind
operator|==
name|UriResourceKind
operator|.
name|value
condition|)
block|{
name|resourceContentType
operator|=
name|TEXT_PLAIN_WITH_CS_UTF_8
expr_stmt|;
block|}
else|else
block|{
name|resourceContentType
operator|=
name|contentType
expr_stmt|;
block|}
break|break;
default|default:
name|resourceContentType
operator|=
name|contentType
expr_stmt|;
block|}
return|return
name|resourceContentType
return|;
block|}
DECL|method|readContent (UriInfo uriInfo, InputStream content, Olingo4ResponseHandler<T> responseHandler)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|readContent
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|,
name|InputStream
name|content
parameter_list|,
name|Olingo4ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
try|try
block|{
name|responseHandler
operator|.
name|onResponse
argument_list|(
name|this
operator|.
expr|<
name|T
operator|>
name|readContent
argument_list|(
name|uriInfo
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ODataException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readContent (UriInfo uriInfo, InputStream content)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|readContent
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|,
name|InputStream
name|content
parameter_list|)
throws|throws
name|ODataException
block|{
name|T
name|response
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|uriInfo
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|service
case|:
comment|// service document
name|response
operator|=
operator|(
name|T
operator|)
name|odataReader
operator|.
name|readServiceDocument
argument_list|(
name|content
argument_list|,
name|SERVICE_DOCUMENT_CONTENT_TYPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|metadata
case|:
comment|// $metadata
name|response
operator|=
operator|(
name|T
operator|)
name|odataReader
operator|.
name|readMetadata
argument_list|(
name|content
argument_list|)
expr_stmt|;
break|break;
case|case
name|resource
case|:
comment|// any resource entity
name|List
argument_list|<
name|UriResource
argument_list|>
name|listResource
init|=
name|uriInfo
operator|.
name|getUriResourceParts
argument_list|()
decl_stmt|;
name|UriResourceKind
name|lastResourceKind
init|=
name|listResource
operator|.
name|get
argument_list|(
name|listResource
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|lastResourceKind
condition|)
block|{
case|case
name|entitySet
case|:
name|UriResourceEntitySet
name|uriResourceEntitySet
init|=
operator|(
name|UriResourceEntitySet
operator|)
name|listResource
operator|.
name|get
argument_list|(
name|listResource
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UriParameter
argument_list|>
name|keyPredicates
init|=
name|uriResourceEntitySet
operator|.
name|getKeyPredicates
argument_list|()
decl_stmt|;
comment|// Check result type: single Entity or EntitySet based
comment|// on key predicate detection
if|if
condition|(
name|keyPredicates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|odataReader
operator|.
name|readEntity
argument_list|(
name|content
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|odataReader
operator|.
name|readEntitySet
argument_list|(
name|content
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|count
case|:
name|String
name|stringCount
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stringCount
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|content
argument_list|,
name|Consts
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
name|T
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|stringCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Error during $count value deserialization"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Error during $count value conversion: "
operator|+
name|stringCount
argument_list|,
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|value
case|:
try|try
block|{
name|ClientPrimitiveValue
name|value
init|=
name|odataClient
operator|.
name|getObjectFactory
argument_list|()
operator|.
name|newPrimitiveValueBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|EdmPrimitiveTypeKind
operator|.
name|String
argument_list|)
operator|.
name|setValue
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|content
argument_list|,
name|Consts
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|response
operator|=
operator|(
name|T
operator|)
name|value
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Error during $value deserialization"
argument_list|,
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|primitiveProperty
case|:
case|case
name|complexProperty
case|:
name|ClientProperty
name|property
init|=
name|odataReader
operator|.
name|readProperty
argument_list|(
name|content
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|hasPrimitiveValue
argument_list|()
condition|)
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|property
operator|.
name|getPrimitiveValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|hasComplexValue
argument_list|()
condition|)
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|property
operator|.
name|getComplexValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported property: "
operator|+
name|property
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
name|function
case|:
name|UriResourceFunctionImpl
name|uriResourceFunction
init|=
operator|(
name|UriResourceFunctionImpl
operator|)
name|listResource
operator|.
name|get
argument_list|(
name|listResource
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|EdmReturnType
name|functionReturnType
init|=
name|uriResourceFunction
operator|.
name|getFunction
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|functionReturnType
operator|.
name|getType
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|ENTITY
case|:
if|if
condition|(
name|functionReturnType
operator|.
name|isCollection
argument_list|()
condition|)
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|odataReader
operator|.
name|readEntitySet
argument_list|(
name|content
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|odataReader
operator|.
name|readEntity
argument_list|(
name|content
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PRIMITIVE
case|:
case|case
name|COMPLEX
case|:
name|ClientProperty
name|functionProperty
init|=
name|odataReader
operator|.
name|readProperty
argument_list|(
name|content
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionProperty
operator|.
name|hasPrimitiveValue
argument_list|()
condition|)
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|functionProperty
operator|.
name|getPrimitiveValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|functionProperty
operator|.
name|hasComplexValue
argument_list|()
condition|)
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|functionProperty
operator|.
name|getComplexValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported property: "
operator|+
name|functionProperty
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported function return type "
operator|+
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported resource type: "
operator|+
name|lastResourceKind
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported resource type "
operator|+
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
DECL|method|writeContent (final Edm edm, HttpEntityEnclosingRequestBase httpEntityRequest, final UriInfo uriInfo, final Object content, final Olingo4ResponseHandler<T> responseHandler)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|writeContent
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
name|HttpEntityEnclosingRequestBase
name|httpEntityRequest
parameter_list|,
specifier|final
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
name|Object
name|content
parameter_list|,
specifier|final
name|Olingo4ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
try|try
block|{
name|httpEntityRequest
operator|.
name|setEntity
argument_list|(
name|writeContent
argument_list|(
name|edm
argument_list|,
name|uriInfo
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Header
name|requestContentTypeHeader
init|=
name|httpEntityRequest
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
decl_stmt|;
specifier|final
name|ContentType
name|requestContentType
init|=
name|requestContentTypeHeader
operator|!=
literal|null
condition|?
name|ContentType
operator|.
name|parse
argument_list|(
name|requestContentTypeHeader
operator|.
name|getValue
argument_list|()
argument_list|)
else|:
name|contentType
decl_stmt|;
name|execute
argument_list|(
name|httpEntityRequest
argument_list|,
name|requestContentType
argument_list|,
operator|new
name|AbstractFutureCallback
argument_list|<
name|T
argument_list|>
argument_list|(
name|responseHandler
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|(
name|HttpResponse
name|result
parameter_list|)
throws|throws
name|IOException
throws|,
name|ODataException
block|{
comment|// if a entity is created (via POST request) the response
comment|// body contains the new created entity
name|HttpStatusCode
name|statusCode
init|=
name|HttpStatusCode
operator|.
name|fromStatusCode
argument_list|(
name|result
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
decl_stmt|;
comment|// look for no content, or no response body!!!
specifier|final
name|boolean
name|noEntity
init|=
name|result
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
operator|||
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentLength
argument_list|()
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|statusCode
operator|==
name|HttpStatusCode
operator|.
name|NO_CONTENT
operator|||
name|noEntity
condition|)
block|{
name|responseHandler
operator|.
name|onResponse
argument_list|(
operator|(
name|T
operator|)
name|HttpStatusCode
operator|.
name|fromStatusCode
argument_list|(
name|result
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|==
name|UriInfoKind
operator|.
name|resource
condition|)
block|{
name|List
argument_list|<
name|UriResource
argument_list|>
name|listResource
init|=
name|uriInfo
operator|.
name|getUriResourceParts
argument_list|()
decl_stmt|;
name|UriResourceKind
name|lastResourceKind
init|=
name|listResource
operator|.
name|get
argument_list|(
name|listResource
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|lastResourceKind
condition|)
block|{
case|case
name|entitySet
case|:
if|if
condition|(
name|content
operator|instanceof
name|ClientEntity
condition|)
block|{
name|ClientEntity
name|entity
init|=
name|odataReader
operator|.
name|readEntity
argument_list|(
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|ContentType
operator|.
name|parse
argument_list|(
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|responseHandler
operator|.
name|onResponse
argument_list|(
operator|(
name|T
operator|)
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported content type: "
operator|+
name|content
argument_list|)
throw|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|==
name|UriInfoKind
operator|.
name|batch
condition|)
block|{
name|List
argument_list|<
name|Olingo4BatchResponse
argument_list|>
name|batchResponse
init|=
name|parseBatchResponse
argument_list|(
name|edm
argument_list|,
name|result
argument_list|,
operator|(
name|List
argument_list|<
name|Olingo4BatchRequest
argument_list|>
operator|)
name|content
argument_list|)
decl_stmt|;
name|responseHandler
operator|.
name|onResponse
argument_list|(
operator|(
name|T
operator|)
name|batchResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported resource type: "
operator|+
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ODataException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeContent (final Edm edm, final UriInfo uriInfo, final Object content)
specifier|private
name|AbstractHttpEntity
name|writeContent
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
specifier|final
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
name|Object
name|content
parameter_list|)
throws|throws
name|ODataException
block|{
name|InputStream
name|requestStream
init|=
literal|null
decl_stmt|;
name|AbstractHttpEntity
name|httpEntity
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|==
name|UriInfoKind
operator|.
name|resource
condition|)
block|{
comment|// any resource entity
name|List
argument_list|<
name|UriResource
argument_list|>
name|listResource
init|=
name|uriInfo
operator|.
name|getUriResourceParts
argument_list|()
decl_stmt|;
name|UriResourceKind
name|lastResourceKind
init|=
name|listResource
operator|.
name|get
argument_list|(
name|listResource
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKind
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|lastResourceKind
condition|)
block|{
case|case
name|entitySet
case|:
if|if
condition|(
name|content
operator|instanceof
name|ClientEntity
condition|)
block|{
name|requestStream
operator|=
name|odataWriter
operator|.
name|writeEntity
argument_list|(
operator|(
name|ClientEntity
operator|)
name|content
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported content type: "
operator|+
name|content
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported resource type: "
operator|+
name|lastResourceKind
argument_list|)
throw|;
block|}
try|try
block|{
name|httpEntity
operator|=
operator|new
name|ByteArrayEntity
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|requestStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Error during converting input stream to byte array"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|httpEntity
operator|.
name|setChunked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|==
name|UriInfoKind
operator|.
name|batch
condition|)
block|{
specifier|final
name|String
name|boundary
init|=
name|BOUNDARY_PREFIX
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|final
name|String
name|contentHeader
init|=
name|BATCH_CONTENT_TYPE
operator|+
name|BOUNDARY_PARAMETER
operator|+
name|boundary
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Olingo4BatchRequest
argument_list|>
name|batchParts
init|=
operator|(
name|List
argument_list|<
name|Olingo4BatchRequest
argument_list|>
operator|)
name|content
decl_stmt|;
name|requestStream
operator|=
name|serializeBatchRequest
argument_list|(
name|edm
argument_list|,
name|batchParts
argument_list|,
name|BOUNDARY_DOUBLE_DASH
operator|+
name|boundary
argument_list|)
expr_stmt|;
try|try
block|{
name|httpEntity
operator|=
operator|new
name|ByteArrayEntity
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|requestStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Error during converting input stream to byte array"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|httpEntity
operator|.
name|setChunked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|httpEntity
operator|.
name|setContentType
argument_list|(
name|contentHeader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported resource type: "
operator|+
name|uriInfo
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|httpEntity
return|;
block|}
DECL|method|serializeBatchRequest (final Edm edm, final List<Olingo4BatchRequest> batchParts, String boundary)
specifier|private
name|InputStream
name|serializeBatchRequest
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
specifier|final
name|List
argument_list|<
name|Olingo4BatchRequest
argument_list|>
name|batchParts
parameter_list|,
name|String
name|boundary
parameter_list|)
throws|throws
name|ODataException
block|{
specifier|final
name|ByteArrayOutputStream
name|batchRequestHeaderOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|boundary
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
for|for
control|(
name|Olingo4BatchRequest
name|batchPart
range|:
name|batchParts
control|)
block|{
name|writeHttpHeader
argument_list|(
name|batchRequestHeaderOutputStream
argument_list|,
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|ContentType
operator|.
name|APPLICATION_HTTP
operator|.
name|toContentTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|writeHttpHeader
argument_list|(
name|batchRequestHeaderOutputStream
argument_list|,
name|ODataBatchConstants
operator|.
name|ITEM_TRANSFER_ENCODING_LINE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchPart
operator|instanceof
name|Olingo4BatchQueryRequest
condition|)
block|{
specifier|final
name|Olingo4BatchQueryRequest
name|batchQueryPart
init|=
operator|(
name|Olingo4BatchQueryRequest
operator|)
name|batchPart
decl_stmt|;
specifier|final
name|String
name|batchQueryUri
init|=
name|createUri
argument_list|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|batchQueryPart
operator|.
name|getResourceUri
argument_list|()
argument_list|)
condition|?
name|serviceUri
else|:
name|batchQueryPart
operator|.
name|getResourceUri
argument_list|()
argument_list|,
name|batchQueryPart
operator|.
name|getResourcePath
argument_list|()
argument_list|,
name|concatQueryParams
argument_list|(
name|batchQueryPart
operator|.
name|getQueryParams
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|batchQueryPart
operator|.
name|getResourcePath
argument_list|()
argument_list|,
name|concatQueryParams
argument_list|(
name|batchQueryPart
operator|.
name|getQueryParams
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
operator|(
name|HttpGet
operator|.
name|METHOD_NAME
operator|+
literal|" "
operator|+
name|batchQueryUri
operator|+
literal|" "
operator|+
name|HttpVersion
operator|.
name|HTTP_1_1
operator|)
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
name|writeHttpHeader
argument_list|(
name|batchRequestHeaderOutputStream
argument_list|,
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
operator|.
name|toContentTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|boundary
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|batchPart
operator|instanceof
name|Olingo4BatchChangeRequest
condition|)
block|{
specifier|final
name|Olingo4BatchChangeRequest
name|batchChangePart
init|=
operator|(
name|Olingo4BatchChangeRequest
operator|)
name|batchPart
decl_stmt|;
specifier|final
name|String
name|batchChangeUri
init|=
name|createUri
argument_list|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|batchChangePart
operator|.
name|getResourceUri
argument_list|()
argument_list|)
condition|?
name|serviceUri
else|:
name|batchChangePart
operator|.
name|getResourceUri
argument_list|()
argument_list|,
name|batchChangePart
operator|.
name|getResourcePath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|batchChangePart
operator|.
name|getResourcePath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|batchChangePart
operator|.
name|getOperation
argument_list|()
operator|!=
name|Operation
operator|.
name|DELETE
condition|)
block|{
name|writeHttpHeader
argument_list|(
name|batchRequestHeaderOutputStream
argument_list|,
name|CONTENT_ID_HEADER
argument_list|,
name|batchChangePart
operator|.
name|getContentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
operator|(
name|batchChangePart
operator|.
name|getOperation
argument_list|()
operator|.
name|getHttpMethod
argument_list|()
operator|+
literal|" "
operator|+
name|batchChangeUri
operator|+
literal|" "
operator|+
name|HttpVersion
operator|.
name|HTTP_1_1
operator|)
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
name|writeHttpHeader
argument_list|(
name|batchRequestHeaderOutputStream
argument_list|,
name|HttpHeader
operator|.
name|ODATA_VERSION
argument_list|,
name|ODataServiceVersion
operator|.
name|V40
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeHttpHeader
argument_list|(
name|batchRequestHeaderOutputStream
argument_list|,
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
operator|.
name|toContentTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|writeHttpHeader
argument_list|(
name|batchRequestHeaderOutputStream
argument_list|,
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
operator|.
name|toContentTypeString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchChangePart
operator|.
name|getOperation
argument_list|()
operator|!=
name|Operation
operator|.
name|DELETE
condition|)
block|{
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
name|AbstractHttpEntity
name|httpEnity
init|=
name|writeContent
argument_list|(
name|edm
argument_list|,
name|uriInfo
argument_list|,
name|batchChangePart
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|httpEnity
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
block|}
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|boundary
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|batchRequestHeaderOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported batch part request object type: "
operator|+
name|batchPart
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Error during batch request serialization"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|batchRequestHeaderOutputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeHttpHeader (ByteArrayOutputStream headerOutputStream, String headerName, String headerValue)
specifier|private
name|void
name|writeHttpHeader
parameter_list|(
name|ByteArrayOutputStream
name|headerOutputStream
parameter_list|,
name|String
name|headerName
parameter_list|,
name|String
name|headerValue
parameter_list|)
throws|throws
name|IOException
block|{
name|headerOutputStream
operator|.
name|write
argument_list|(
name|createHttpHeader
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|headerOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
block|}
DECL|method|createHttpHeader (String headerName, String headerValue)
specifier|private
name|String
name|createHttpHeader
parameter_list|(
name|String
name|headerName
parameter_list|,
name|String
name|headerValue
parameter_list|)
block|{
return|return
name|headerName
operator|+
operator|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|headerValue
argument_list|)
condition|?
literal|""
else|:
operator|(
literal|": "
operator|+
name|headerValue
operator|)
operator|)
return|;
block|}
DECL|method|parseBatchResponse (final Edm edm, HttpResponse response, List<Olingo4BatchRequest> batchRequest)
specifier|private
name|List
argument_list|<
name|Olingo4BatchResponse
argument_list|>
name|parseBatchResponse
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|List
argument_list|<
name|Olingo4BatchRequest
argument_list|>
name|batchRequest
parameter_list|)
throws|throws
name|ODataException
block|{
name|List
argument_list|<
name|Olingo4BatchResponse
argument_list|>
name|batchResponse
init|=
operator|new
argument_list|<
name|Olingo4BatchResponse
argument_list|>
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Header
index|[]
name|contentHeaders
init|=
name|response
operator|.
name|getHeaders
argument_list|(
name|HttpHeader
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|ODataBatchLineIterator
name|batchLineIterator
init|=
operator|new
name|ODataBatchLineIteratorImpl
argument_list|(
name|IOUtils
operator|.
name|lineIterator
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|batchBoundary
init|=
name|ODataBatchUtilities
operator|.
name|getBoundaryFromHeader
argument_list|(
name|getHeadersCollection
argument_list|(
name|contentHeaders
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ODataBatchController
name|batchController
init|=
operator|new
name|ODataBatchController
argument_list|(
name|batchLineIterator
argument_list|,
name|batchBoundary
argument_list|)
decl_stmt|;
name|batchController
operator|.
name|getBatchLineIterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|int
name|batchRequestIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|batchController
operator|.
name|getBatchLineIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ODataBatchUtilities
operator|.
name|readBatchPart
argument_list|(
name|batchController
argument_list|,
name|os
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Object
name|content
init|=
literal|null
decl_stmt|;
specifier|final
name|Olingo4BatchRequest
name|batchPartRequest
init|=
operator|(
name|Olingo4BatchRequest
operator|)
name|batchRequest
operator|.
name|get
argument_list|(
name|batchRequestIndex
argument_list|)
decl_stmt|;
specifier|final
name|HttpResponse
name|batchPartHttpResponse
init|=
name|constructBatchPartHttpResponse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|os
operator|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StatusLine
name|batchPartStatusLine
init|=
name|batchPartHttpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
specifier|final
name|int
name|batchPartLineStatusCode
init|=
name|batchPartStatusLine
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|batchPartHeaders
init|=
name|getHeadersValueMap
argument_list|(
name|batchPartHttpResponse
operator|.
name|getAllHeaders
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|batchPartRequest
operator|instanceof
name|Olingo4BatchQueryRequest
condition|)
block|{
name|Olingo4BatchQueryRequest
name|batchPartQueryRequest
init|=
operator|(
name|Olingo4BatchQueryRequest
operator|)
name|batchPartRequest
decl_stmt|;
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|batchPartQueryRequest
operator|.
name|getResourcePath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|HttpStatusCode
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
operator|<=
name|batchPartLineStatusCode
operator|&&
name|batchPartLineStatusCode
operator|<=
name|AbstractFutureCallback
operator|.
name|NETWORK_CONNECT_TIMEOUT_ERROR
condition|)
block|{
specifier|final
name|ContentType
name|responseContentType
init|=
name|getContentTypeHeader
argument_list|(
name|batchPartHttpResponse
argument_list|)
decl_stmt|;
name|content
operator|=
name|odataReader
operator|.
name|readError
argument_list|(
name|batchPartHttpResponse
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|responseContentType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|batchPartLineStatusCode
operator|==
name|HttpStatusCode
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
comment|// nothing to do if NO_CONTENT returning
block|}
else|else
block|{
name|content
operator|=
name|readContent
argument_list|(
name|uriInfo
argument_list|,
name|batchPartHttpResponse
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Olingo4BatchResponse
name|batchPartResponse
init|=
operator|new
name|Olingo4BatchResponse
argument_list|(
name|batchPartStatusLine
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|batchPartStatusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|,
literal|null
argument_list|,
name|batchPartHeaders
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|batchResponse
operator|.
name|add
argument_list|(
name|batchPartResponse
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|batchPartRequest
operator|instanceof
name|Olingo4BatchChangeRequest
condition|)
block|{
name|Olingo4BatchChangeRequest
name|batchPartChangeRequest
init|=
operator|(
name|Olingo4BatchChangeRequest
operator|)
name|batchPartRequest
decl_stmt|;
if|if
condition|(
name|batchPartLineStatusCode
operator|!=
name|HttpStatusCode
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
if|if
condition|(
name|HttpStatusCode
operator|.
name|BAD_REQUEST
operator|.
name|getStatusCode
argument_list|()
operator|<=
name|batchPartLineStatusCode
operator|&&
name|batchPartLineStatusCode
operator|<=
name|AbstractFutureCallback
operator|.
name|NETWORK_CONNECT_TIMEOUT_ERROR
condition|)
block|{
specifier|final
name|ContentType
name|responseContentType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|batchPartHttpResponse
operator|.
name|getFirstHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|content
operator|=
name|odataReader
operator|.
name|readError
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|responseContentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|UriInfo
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|batchPartChangeRequest
operator|.
name|getResourcePath
argument_list|()
operator|+
operator|(
name|batchPartChangeRequest
operator|.
name|getOperation
argument_list|()
operator|==
name|Operation
operator|.
name|CREATE
condition|?
name|CLIENT_ENTITY_FAKE_MARKER
else|:
literal|""
operator|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|content
operator|=
name|readContent
argument_list|(
name|uriInfo
argument_list|,
name|batchPartHttpResponse
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Olingo4BatchResponse
name|batchPartResponse
init|=
operator|new
name|Olingo4BatchResponse
argument_list|(
name|batchPartStatusLine
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|batchPartStatusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|,
name|batchPartChangeRequest
operator|.
name|getContentId
argument_list|()
argument_list|,
name|batchPartHeaders
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|batchResponse
operator|.
name|add
argument_list|(
name|batchPartResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
literal|"Unsupported batch part request object type: "
operator|+
name|batchPartRequest
argument_list|)
throw|;
block|}
name|batchRequestIndex
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|HttpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ODataException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|batchResponse
return|;
block|}
DECL|method|constructBatchPartHttpResponse (InputStream batchPartStream)
specifier|private
name|HttpResponse
name|constructBatchPartHttpResponse
parameter_list|(
name|InputStream
name|batchPartStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|HttpException
block|{
specifier|final
name|LineIterator
name|lines
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
name|batchPartStream
argument_list|,
name|Constants
operator|.
name|UTF8
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|headerOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bodyOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|boolean
name|startBatchPartHeader
init|=
literal|false
decl_stmt|;
name|boolean
name|startBatchPartBody
init|=
literal|false
decl_stmt|;
comment|// Iterate through lines in the batch part
while|while
condition|(
name|lines
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|lines
operator|.
name|nextLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Ignore all lines below HTTP/1.1 line
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|HttpVersion
operator|.
name|HTTP
argument_list|)
condition|)
block|{
comment|// This is the first header line
name|startBatchPartHeader
operator|=
literal|true
expr_stmt|;
block|}
comment|// Body starts with empty string after header lines
if|if
condition|(
name|startBatchPartHeader
operator|&&
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|startBatchPartHeader
operator|=
literal|false
expr_stmt|;
name|startBatchPartBody
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|startBatchPartHeader
condition|)
block|{
comment|// Write header to the output stream
name|headerOutputStream
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|headerOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|startBatchPartBody
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|line
argument_list|)
condition|)
block|{
comment|// Write body to the output stream
name|bodyOutputStream
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|(
name|Constants
operator|.
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|bodyOutputStream
operator|.
name|write
argument_list|(
name|ODataStreamer
operator|.
name|CRLF
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Prepare for parsing headers in to the HttpResponse object
name|HttpTransportMetricsImpl
name|metrics
init|=
operator|new
name|HttpTransportMetricsImpl
argument_list|()
decl_stmt|;
name|SessionInputBufferImpl
name|sessionInputBuffer
init|=
operator|new
name|SessionInputBufferImpl
argument_list|(
name|metrics
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|HttpResponseFactory
name|responseFactory
init|=
operator|new
name|DefaultHttpResponseFactory
argument_list|()
decl_stmt|;
name|sessionInputBuffer
operator|.
name|bind
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|headerOutputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultHttpResponseParser
name|responseParser
init|=
operator|new
name|DefaultHttpResponseParser
argument_list|(
name|sessionInputBuffer
argument_list|,
operator|new
name|BasicLineParser
argument_list|()
argument_list|,
name|responseFactory
argument_list|,
name|MessageConstraints
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
comment|// Parse HTTP response and headers
name|HttpResponse
name|response
init|=
name|responseParser
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|// Set body inside entity
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|ByteArrayEntity
argument_list|(
name|bodyOutputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|getHeadersCollection (Header[] headers)
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|getHeadersCollection
parameter_list|(
name|Header
index|[]
name|headers
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|headersCollection
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|headers
argument_list|)
control|)
block|{
name|headersCollection
operator|.
name|add
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|headersCollection
return|;
block|}
DECL|method|getHeadersValueMap (Header[] headers)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeadersValueMap
parameter_list|(
name|Header
index|[]
name|headers
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headersValueMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|headers
argument_list|)
control|)
block|{
name|headersValueMap
operator|.
name|put
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|headersValueMap
return|;
block|}
DECL|method|createUri (String resourcePath)
specifier|private
name|String
name|createUri
parameter_list|(
name|String
name|resourcePath
parameter_list|)
block|{
return|return
name|createUri
argument_list|(
name|serviceUri
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createUri (String resourcePath, String queryOptions)
specifier|private
name|String
name|createUri
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|String
name|queryOptions
parameter_list|)
block|{
return|return
name|createUri
argument_list|(
name|serviceUri
argument_list|,
name|resourcePath
argument_list|,
name|queryOptions
argument_list|)
return|;
block|}
DECL|method|createUri (String resourceUri, String resourcePath, String queryOptions)
specifier|private
name|String
name|createUri
parameter_list|(
name|String
name|resourceUri
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|String
name|queryOptions
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|absolutUri
init|=
operator|new
name|StringBuilder
argument_list|(
name|resourceUri
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|resourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryOptions
operator|!=
literal|null
operator|&&
operator|!
name|queryOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|absolutUri
operator|.
name|append
argument_list|(
literal|"/?"
operator|+
name|queryOptions
argument_list|)
expr_stmt|;
block|}
return|return
name|absolutUri
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|concatQueryParams (final Map<String, String> queryParams)
specifier|private
name|String
name|concatQueryParams
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|concatQuery
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryParams
operator|!=
literal|null
operator|&&
operator|!
name|queryParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|nParams
init|=
name|queryParams
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|queryParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|concatQuery
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|index
operator|<
name|nParams
condition|)
block|{
name|concatQuery
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|concatQuery
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"  *"
argument_list|,
literal|"%20"
argument_list|)
return|;
block|}
DECL|method|parseUri (Edm edm, String resourcePath, String queryOptions)
specifier|private
specifier|static
name|UriInfo
name|parseUri
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|String
name|queryOptions
parameter_list|)
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|edm
argument_list|,
name|OData
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|UriInfo
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|parser
operator|.
name|parseUri
argument_list|(
name|resourcePath
argument_list|,
name|queryOptions
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UriParserException
decl||
name|UriValidationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parseUri ("
operator|+
name|resourcePath
operator|+
literal|","
operator|+
name|queryOptions
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|execute (HttpUriRequest httpUriRequest, ContentType contentType, FutureCallback<HttpResponse> callback)
specifier|public
name|void
name|execute
parameter_list|(
name|HttpUriRequest
name|httpUriRequest
parameter_list|,
name|ContentType
name|contentType
parameter_list|,
name|FutureCallback
argument_list|<
name|HttpResponse
argument_list|>
name|callback
parameter_list|)
block|{
comment|// add accept header when its not a form or multipart
specifier|final
name|String
name|contentTypeString
init|=
name|contentType
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ContentType
operator|.
name|APPLICATION_FORM_URLENCODED
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|&&
operator|!
name|contentType
operator|.
name|toContentTypeString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|MULTIPART_MIME_TYPE
argument_list|)
condition|)
block|{
comment|// otherwise accept what is being sent
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|contentTypeString
argument_list|)
expr_stmt|;
block|}
comment|// is something being sent?
if|if
condition|(
name|httpUriRequest
operator|instanceof
name|HttpEntityEnclosingRequestBase
operator|&&
name|httpUriRequest
operator|.
name|getFirstHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentTypeString
argument_list|)
expr_stmt|;
block|}
comment|// set user specified custom headers
if|if
condition|(
name|httpHeaders
operator|!=
literal|null
operator|&&
operator|!
name|httpHeaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|httpHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|httpUriRequest
operator|.
name|setHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add 'Accept-Charset' header to avoid BOM marker presents inside
comment|// response stream
if|if
condition|(
operator|!
name|httpUriRequest
operator|.
name|containsHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_CHARSET
argument_list|)
condition|)
block|{
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_CHARSET
argument_list|,
name|Constants
operator|.
name|UTF8
argument_list|)
expr_stmt|;
block|}
comment|// add client protocol version if not specified
if|if
condition|(
operator|!
name|httpUriRequest
operator|.
name|containsHeader
argument_list|(
name|HttpHeader
operator|.
name|ODATA_VERSION
argument_list|)
condition|)
block|{
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeader
operator|.
name|ODATA_VERSION
argument_list|,
name|ODataServiceVersion
operator|.
name|V40
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|httpUriRequest
operator|.
name|containsHeader
argument_list|(
name|HttpHeader
operator|.
name|ODATA_MAX_VERSION
argument_list|)
condition|)
block|{
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeader
operator|.
name|ODATA_MAX_VERSION
argument_list|,
name|ODataServiceVersion
operator|.
name|V40
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// execute request
if|if
condition|(
name|client
operator|instanceof
name|CloseableHttpAsyncClient
condition|)
block|{
operator|(
operator|(
name|CloseableHttpAsyncClient
operator|)
name|client
operator|)
operator|.
name|execute
argument_list|(
name|httpUriRequest
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// invoke the callback methods explicitly after executing the
comment|// request synchronously
try|try
block|{
name|CloseableHttpResponse
name|result
init|=
operator|(
operator|(
name|CloseableHttpClient
operator|)
name|client
operator|)
operator|.
name|execute
argument_list|(
name|httpUriRequest
argument_list|)
decl_stmt|;
name|callback
operator|.
name|completed
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|failed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

