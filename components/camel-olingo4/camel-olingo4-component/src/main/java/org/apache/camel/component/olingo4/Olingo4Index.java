begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientEntitySet
import|;
end_import

begin_class
DECL|class|Olingo4Index
specifier|public
class|class
name|Olingo4Index
block|{
DECL|field|resultIndex
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|resultIndex
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|filter (Object o)
specifier|private
name|Object
name|filter
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|resultIndex
operator|.
name|contains
argument_list|(
name|o
operator|.
name|hashCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|o
return|;
block|}
DECL|method|indexDefault (Object o)
specifier|private
name|void
name|indexDefault
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|resultIndex
operator|.
name|add
argument_list|(
name|o
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|filter (Iterable<?> iterable)
specifier|private
name|Iterable
argument_list|<
name|?
argument_list|>
name|filter
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|iterable
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|filtered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|iterable
control|)
block|{
if|if
condition|(
name|resultIndex
operator|.
name|contains
argument_list|(
name|o
operator|.
name|hashCode
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|filtered
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|filtered
return|;
block|}
DECL|method|index (Iterable<?> iterable)
specifier|private
name|void
name|index
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|iterable
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|iterable
control|)
block|{
name|resultIndex
operator|.
name|add
argument_list|(
name|o
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|filter (ClientEntitySet entitySet)
specifier|private
name|ClientEntitySet
name|filter
parameter_list|(
name|ClientEntitySet
name|entitySet
parameter_list|)
block|{
name|List
argument_list|<
name|ClientEntity
argument_list|>
name|entities
init|=
name|entitySet
operator|.
name|getEntities
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|entitySet
return|;
block|}
name|List
argument_list|<
name|ClientEntity
argument_list|>
name|copyEntities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|copyEntities
operator|.
name|addAll
argument_list|(
name|entities
argument_list|)
expr_stmt|;
for|for
control|(
name|ClientEntity
name|entity
range|:
name|copyEntities
control|)
block|{
if|if
condition|(
name|resultIndex
operator|.
name|contains
argument_list|(
name|entity
operator|.
name|hashCode
argument_list|()
argument_list|)
condition|)
block|{
name|entities
operator|.
name|remove
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entitySet
return|;
block|}
DECL|method|index (ClientEntitySet entitySet)
specifier|private
name|void
name|index
parameter_list|(
name|ClientEntitySet
name|entitySet
parameter_list|)
block|{
for|for
control|(
name|ClientEntity
name|entity
range|:
name|entitySet
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|resultIndex
operator|.
name|add
argument_list|(
name|entity
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Index the results      */
DECL|method|index (Object result)
specifier|public
name|void
name|index
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|ClientEntitySet
condition|)
block|{
name|index
argument_list|(
operator|(
name|ClientEntitySet
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|Iterable
condition|)
block|{
name|index
argument_list|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexDefault
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|filterResponse (Object response)
specifier|public
name|Object
name|filterResponse
parameter_list|(
name|Object
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|instanceof
name|ClientEntitySet
condition|)
block|{
name|response
operator|=
name|filter
argument_list|(
operator|(
name|ClientEntitySet
operator|)
name|response
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|response
operator|instanceof
name|Iterable
condition|)
block|{
name|response
operator|=
name|filter
argument_list|(
operator|(
name|Iterable
argument_list|<
name|Object
argument_list|>
operator|)
name|response
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|response
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|response
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|filter
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
name|filter
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

