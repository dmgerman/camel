begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientCollectionValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientComplexValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientEntitySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientPrimitiveValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|client
operator|.
name|api
operator|.
name|domain
operator|.
name|ClientProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|Olingo4ComponentConsumerTest
specifier|public
class|class
name|Olingo4ComponentConsumerTest
extends|extends
name|AbstractOlingo4TestSupport
block|{
DECL|field|PEOPLE
specifier|private
specifier|static
specifier|final
name|String
name|PEOPLE
init|=
literal|"People"
decl_stmt|;
DECL|field|TEST_PEOPLE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PEOPLE
init|=
literal|"People('russellwhyte')"
decl_stmt|;
DECL|field|AIRPORTS
specifier|private
specifier|static
specifier|final
name|String
name|AIRPORTS
init|=
literal|"Airports"
decl_stmt|;
DECL|method|Olingo4ComponentConsumerTest ()
specifier|public
name|Olingo4ComponentConsumerTest
parameter_list|()
block|{
name|setUseRouteBuilder
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|addRouteAndStartContext (RouteBuilder builder)
specifier|private
name|void
name|addRouteAndStartContext
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|context
argument_list|()
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|startCamelContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumerQueryWithExpand ()
specifier|public
name|void
name|testConsumerQueryWithExpand
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedMsgCount
init|=
literal|1
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-query"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
name|expectedMsgCount
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|PEOPLE
operator|+
literal|"?"
operator|+
literal|"$filter=LastName eq 'Whyte'&$expand=Trips"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-query"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|//
comment|// First polled messages contained all the entities
comment|//
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ClientEntity
argument_list|)
expr_stmt|;
name|ClientEntity
name|e
init|=
operator|(
name|ClientEntity
operator|)
name|body
decl_stmt|;
name|ClientProperty
name|nameProp
init|=
name|e
operator|.
name|getProperty
argument_list|(
literal|"UserName"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nameProp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"russellwhyte"
argument_list|,
name|nameProp
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Read entity set of the People object and filter already seen items on      * subsequent exchanges Use a delay since the mock endpoint does not always      * get the correct number of exchanges before being satisfied. Note: -      * consumer.splitResults is set to false since this ensures the first      * returned message contains all the results. This is preferred for the      * purposes of this test. The default will mean the first n messages contain      * the results (where n is the result total) then subsequent messages will      * be empty      */
annotation|@
name|Test
DECL|method|testConsumerReadFilterAlreadySeen ()
specifier|public
name|void
name|testConsumerReadFilterAlreadySeen
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedEntities
init|=
literal|20
decl_stmt|;
name|int
name|expectedMsgCount
init|=
literal|3
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-alreadyseen"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
name|expectedMsgCount
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|PEOPLE
operator|+
literal|"?delay=2&consumer.sendEmptyMessageWhenIdle=true&consumer.splitResult=false&filterAlreadySeen=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-alreadyseen"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|//
comment|// First polled messages contained all the entities
comment|//
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ClientEntitySet
argument_list|)
expr_stmt|;
name|ClientEntitySet
name|set
init|=
operator|(
name|ClientEntitySet
operator|)
name|body
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedEntities
argument_list|,
name|set
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//
comment|// Subsequent polling messages should be empty
comment|// since the filterAlreadySeen property is true
comment|//
name|assertNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Read entity set of the People object and filter already seen items on      * subsequent exchanges Use a delay since the mock endpoint does not always      * get the correct number of exchanges before being satisfied. Note: -      * consumer.splitResults is set to false since this ensures the first      * returned message contains all the results. -      * consumer.sendEmptyMessageWhenIdle is set to false so only 1 message      * should even be returned.      */
annotation|@
name|Test
DECL|method|testConsumerReadFilterAlreadySeenNoEmptyMsgs ()
specifier|public
name|void
name|testConsumerReadFilterAlreadySeenNoEmptyMsgs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedEntities
init|=
literal|20
decl_stmt|;
name|int
name|expectedMsgCount
init|=
literal|1
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-alreadyseen"
argument_list|)
decl_stmt|;
comment|//
comment|// Add 1 to count since we want to wait for full result time
comment|// before asserting that only 1 message has been delivered
comment|//
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
name|expectedMsgCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|setResultWaitTime
argument_list|(
literal|6000L
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|PEOPLE
operator|+
literal|"?delay=2&consumer.sendEmptyMessageWhenIdle=false&consumer.splitResult=false&filterAlreadySeen=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-alreadyseen"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|//
comment|// Want to wait for entire result time& there should
comment|// be exactly 1 exchange transmitted to the endpoint
comment|//
name|mockEndpoint
operator|.
name|assertIsNotSatisfied
argument_list|()
expr_stmt|;
comment|// Only 1 exchange so this is good!
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|//
comment|// Only polled message contains all the entities
comment|//
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ClientEntitySet
argument_list|)
expr_stmt|;
name|ClientEntitySet
name|set
init|=
operator|(
name|ClientEntitySet
operator|)
name|body
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedEntities
argument_list|,
name|set
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * WithPredicate in address FilterAlreadySeen: true SplitResults: true      * consumer.sendEmptyMessageWhenIdle: true      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testConsumerReadFilterAlreadySeenWithPredicate1 ()
specifier|public
name|void
name|testConsumerReadFilterAlreadySeenWithPredicate1
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedMsgCount
init|=
literal|3
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-splitresult-kp-airport"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
name|expectedMsgCount
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|AIRPORTS
operator|+
literal|"('KSFO')"
operator|+
literal|"?filterAlreadySeen=true&"
operator|+
literal|"delay=2&consumer.sendEmptyMessageWhenIdle=true&"
operator|+
literal|"consumer.splitResult=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-splitresult-kp-airport"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|//
comment|// First polled messages contained all the entities
comment|//
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ClientEntity
argument_list|)
expr_stmt|;
name|ClientEntity
name|ksfoEntity
init|=
operator|(
name|ClientEntity
operator|)
name|body
decl_stmt|;
name|ClientProperty
name|nameProp
init|=
name|ksfoEntity
operator|.
name|getProperty
argument_list|(
literal|"Name"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nameProp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"San Francisco International Airport"
argument_list|,
name|nameProp
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//
comment|// Subsequent polling messages should be empty
comment|// since the filterAlreadySeen property is true
comment|//
name|assertNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * WithPredicate in address FilterAlreadySeen: true SplitResults: true      * consumer.sendEmptyMessageWhenIdle: false      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testConsumerReadFilterAlreadySeenWithPredicate2 ()
specifier|public
name|void
name|testConsumerReadFilterAlreadySeenWithPredicate2
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedMsgCount
init|=
literal|1
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-splitresult-kp-airport"
argument_list|)
decl_stmt|;
comment|//
comment|// Add 1 to count since we want to wait for full result time
comment|// before asserting that only 1 message has been delivered
comment|//
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
name|expectedMsgCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|setResultWaitTime
argument_list|(
literal|6000L
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|AIRPORTS
operator|+
literal|"('KSFO')"
operator|+
literal|"?filterAlreadySeen=true&"
operator|+
literal|"delay=2&consumer.sendEmptyMessageWhenIdle=false&"
operator|+
literal|"consumer.splitResult=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-splitresult-kp-airport"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|//
comment|// Want to wait for entire result time& there should
comment|// be exactly 1 exchange transmitted to the endpoint
comment|//
name|mockEndpoint
operator|.
name|assertIsNotSatisfied
argument_list|()
expr_stmt|;
comment|// Only 1 exchange so this is good!
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|//
comment|// Only polled message contains the entity
comment|//
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ClientEntity
argument_list|)
expr_stmt|;
name|ClientEntity
name|ksfoEntity
init|=
operator|(
name|ClientEntity
operator|)
name|body
decl_stmt|;
name|ClientProperty
name|nameProp
init|=
name|ksfoEntity
operator|.
name|getProperty
argument_list|(
literal|"Name"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nameProp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"San Francisco International Airport"
argument_list|,
name|nameProp
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read entity set of the People object and split the results into      * individual messages      */
annotation|@
name|Test
DECL|method|testConsumerReadSplitResults ()
specifier|public
name|void
name|testConsumerReadSplitResults
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedMsgCount
init|=
literal|3
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-splitresult"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
name|expectedMsgCount
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|PEOPLE
operator|+
literal|"?consumer.splitResult=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-splitresult"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|//
comment|// At least 3 individual messages in the exchange,
comment|// each containing a different entity.
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ClientEntity
argument_list|)
expr_stmt|;
name|ClientEntity
name|entity
init|=
operator|(
name|ClientEntity
operator|)
name|body
decl_stmt|;
name|ClientProperty
name|nameProperty
init|=
name|entity
operator|.
name|getProperty
argument_list|(
literal|"UserName"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nameProperty
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
literal|"russellwhyte"
argument_list|,
name|nameProperty
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
literal|"scottketchum"
argument_list|,
name|nameProperty
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|assertEquals
argument_list|(
literal|"ronaldmundy"
argument_list|,
name|nameProperty
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
block|}
comment|/**      * Read value of the People object and split the results into individual      * messages      */
annotation|@
name|Test
DECL|method|testConsumerReadClientValuesSplitResults ()
specifier|public
name|void
name|testConsumerReadClientValuesSplitResults
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-splitresult-value"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|TEST_PEOPLE
operator|+
literal|"/FavoriteFeature?consumer.splitResult=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-splitresult-value"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|//
comment|// 1 individual message in the exchange
comment|//
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|ClientPrimitiveValue
operator|.
name|class
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|ClientPrimitiveValue
name|value
init|=
operator|(
name|ClientPrimitiveValue
operator|)
name|body
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Feature1"
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read value of the People object's AddressInfo collection value& split      * the results into individual messages for each address      */
annotation|@
name|Test
DECL|method|testConsumerReadClientCollectionValuesSplitResults ()
specifier|public
name|void
name|testConsumerReadClientCollectionValuesSplitResults
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-splitresult-collection-value"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|TEST_PEOPLE
operator|+
literal|"/AddressInfo?consumer.splitResult=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-splitresult-collection-value"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|//
comment|// 1 individual message in the exchange
comment|//
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|ClientComplexValue
operator|.
name|class
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|ClientComplexValue
name|value
init|=
operator|(
name|ClientComplexValue
operator|)
name|body
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Boise"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|"City"
argument_list|)
operator|.
name|getComplexValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"Name"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read value of the People object's AddressInfo collection value& split      * the results into individual messages for each address      */
annotation|@
name|Test
DECL|method|testConsumerReadClientCollectionValuesNoSplitResults ()
specifier|public
name|void
name|testConsumerReadClientCollectionValuesNoSplitResults
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-nosplitresult-colleciton-value"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"olingo4://read/"
operator|+
name|TEST_PEOPLE
operator|+
literal|"/AddressInfo?consumer.splitResult=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-nosplitresult-colleciton-value"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|addRouteAndStartContext
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|//
comment|// 1 individual collection value message in the exchange
comment|//
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|ClientCollectionValue
operator|.
name|class
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|ClientCollectionValue
argument_list|<
name|?
argument_list|>
name|value
init|=
operator|(
name|ClientCollectionValue
argument_list|<
name|?
argument_list|>
operator|)
name|body
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|propIter
init|=
name|value
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Object
name|propValueObj
init|=
name|propIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|ClientComplexValue
operator|.
name|class
argument_list|,
name|propValueObj
argument_list|)
expr_stmt|;
name|ClientComplexValue
name|propValue
init|=
operator|(
name|ClientComplexValue
operator|)
name|propValueObj
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Boise"
argument_list|,
name|propValue
operator|.
name|get
argument_list|(
literal|"City"
argument_list|)
operator|.
name|getComplexValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"Name"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

