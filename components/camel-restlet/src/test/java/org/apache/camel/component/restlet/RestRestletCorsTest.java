begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.restlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|restlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|RestRestletCorsTest
specifier|public
class|class
name|RestRestletCorsTest
extends|extends
name|RestletTestSupport
block|{
DECL|field|headerSplitter
name|Splitter
name|headerSplitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testCors ()
specifier|public
name|void
name|testCors
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|out
init|=
name|template
operator|.
name|request
argument_list|(
literal|"http://localhost:"
operator|+
name|portNum
operator|+
literal|"/users/123/basic"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"OPTIONS"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"https://localhost:443"
argument_list|,
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Access-Control-Allow-Origin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GET, POST, PUT, DELETE, OPTIONS"
argument_list|,
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Access-Control-Allow-Methods"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Origin, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers"
argument_list|,
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Access-Control-Allow-Headers"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1234"
argument_list|,
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Access-Control-Max-Age"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestletProducerGet ()
specifier|public
name|void
name|testRestletProducerGet
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"http://localhost:"
operator|+
name|portNum
operator|+
literal|"/users/123/basic"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// verify no problems have occurred:
name|assertFalse
argument_list|(
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|is
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify all header values match those specified in restConfiguration:
name|assertThat
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
literal|"Access-Control-Allow-Origin"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"https://localhost:443"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHeaderSet
argument_list|(
name|message
argument_list|,
literal|"Access-Control-Allow-Methods"
argument_list|,
literal|"GET"
argument_list|,
literal|"POST"
argument_list|,
literal|"PUT"
argument_list|,
literal|"DELETE"
argument_list|,
literal|"OPTIONS"
argument_list|)
expr_stmt|;
name|assertHeaderSet
argument_list|(
name|message
argument_list|,
literal|"Access-Control-Allow-Headers"
argument_list|,
literal|"Origin"
argument_list|,
literal|"Accept"
argument_list|,
literal|"Content-Type"
argument_list|,
literal|"Access-Control-Request-Method"
argument_list|,
literal|"Access-Control-Request-Headers"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
literal|"Access-Control-Max-Age"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHeaderSet (Message message, String headerName, String... headerValues)
specifier|private
name|void
name|assertHeaderSet
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|headerName
parameter_list|,
name|String
modifier|...
name|headerValues
parameter_list|)
block|{
comment|// compare header values as sets: ignore order, all required values are present and nothing more:
name|String
name|allowHeaders
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|newHashSet
argument_list|(
name|headerSplitter
operator|.
name|split
argument_list|(
name|allowHeaders
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|newHashSet
argument_list|(
name|headerValues
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// configure to use restlet on localhost with the given port
name|restConfiguration
argument_list|()
operator|.
name|component
argument_list|(
literal|"restlet"
argument_list|)
operator|.
name|host
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|port
argument_list|(
name|portNum
argument_list|)
operator|.
name|enableCORS
argument_list|(
literal|true
argument_list|)
operator|.
name|corsHeaderProperty
argument_list|(
literal|"Access-Control-Allow-Origin"
argument_list|,
literal|"https://localhost:443"
argument_list|)
operator|.
name|corsHeaderProperty
argument_list|(
literal|"Access-Control-Allow-Methods"
argument_list|,
literal|"GET, POST, PUT, DELETE, OPTIONS"
argument_list|)
operator|.
name|corsHeaderProperty
argument_list|(
literal|"Access-Control-Allow-Headers"
argument_list|,
literal|"Origin, Accept, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers"
argument_list|)
operator|.
name|corsHeaderProperty
argument_list|(
literal|"Access-Control-Max-Age"
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
comment|// use the rest DSL to define the rest services
name|rest
argument_list|(
literal|"/users/"
argument_list|)
operator|.
name|get
argument_list|(
literal|"{id}/basic"
argument_list|)
operator|.
name|route
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:input"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|id
operator|+
literal|";Donald Duck"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

