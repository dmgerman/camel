begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.restlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|restlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|BufferedHttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  *  * @version   */
end_comment

begin_class
DECL|class|RestletTestSupport
specifier|public
specifier|abstract
class|class
name|RestletTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|portNum
specifier|protected
specifier|static
name|int
name|portNum
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|initializePortNum ()
specifier|public
specifier|static
name|void
name|initializePortNum
parameter_list|()
block|{
name|portNum
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
expr_stmt|;
block|}
DECL|method|doExecute (HttpUriRequest method)
specifier|public
name|HttpResponse
name|doExecute
parameter_list|(
name|HttpUriRequest
name|method
parameter_list|)
throws|throws
name|Exception
block|{
name|CloseableHttpClient
name|client
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|BufferedHttpEntity
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertHttpResponse (HttpResponse response, int expectedStatusCode, String expectedContentType)
specifier|public
specifier|static
name|void
name|assertHttpResponse
parameter_list|(
name|HttpResponse
name|response
parameter_list|,
name|int
name|expectedStatusCode
parameter_list|,
name|String
name|expectedContentType
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|assertHttpResponse
argument_list|(
name|response
argument_list|,
name|expectedStatusCode
argument_list|,
name|expectedContentType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHttpResponse (HttpResponse response, int expectedStatusCode, String expectedContentType, String expectedBody)
specifier|public
specifier|static
name|void
name|assertHttpResponse
parameter_list|(
name|HttpResponse
name|response
parameter_list|,
name|int
name|expectedStatusCode
parameter_list|,
name|String
name|expectedContentType
parameter_list|,
name|String
name|expectedBody
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|assertEquals
argument_list|(
name|expectedStatusCode
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getFirstHeader
argument_list|(
literal|"Content-Type"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|expectedContentType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedBody
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedBody
argument_list|,
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

