begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.restlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|restlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|SSLContextParametersAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|restlet
operator|.
name|converter
operator|.
name|RestletConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestApiConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestProducerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestProducerFactoryHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|HostUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Restlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|security
operator|.
name|ChallengeAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|security
operator|.
name|MapVerifier
import|;
end_import

begin_comment
comment|/**  * A Camel component embedded Restlet that produces and consumes exchanges.  */
end_comment

begin_class
DECL|class|RestletComponent
specifier|public
class|class
name|RestletComponent
extends|extends
name|DefaultComponent
implements|implements
name|RestConsumerFactory
implements|,
name|RestApiConsumerFactory
implements|,
name|RestProducerFactory
implements|,
name|SSLContextParametersAware
implements|,
name|HeaderFilterStrategyAware
block|{
DECL|field|LOCK
specifier|private
specifier|static
specifier|final
name|Object
name|LOCK
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|restletHostRegistry
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RestletHost
argument_list|>
name|restletHostRegistry
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|routers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MethodBasedRouter
argument_list|>
name|routers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|component
specifier|private
specifier|final
name|Component
name|component
decl_stmt|;
comment|// options that can be set on the restlet server
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|controllerDaemon
specifier|private
name|Boolean
name|controllerDaemon
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|controllerSleepTimeMs
specifier|private
name|Integer
name|controllerSleepTimeMs
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|inboundBufferSize
specifier|private
name|Integer
name|inboundBufferSize
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|minThreads
specifier|private
name|Integer
name|minThreads
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|maxThreads
specifier|private
name|Integer
name|maxThreads
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|lowThreads
specifier|private
name|Integer
name|lowThreads
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|maxConnectionsPerHost
specifier|private
name|Integer
name|maxConnectionsPerHost
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|maxTotalConnections
specifier|private
name|Integer
name|maxTotalConnections
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|outboundBufferSize
specifier|private
name|Integer
name|outboundBufferSize
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|maxQueued
specifier|private
name|Integer
name|maxQueued
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|persistingConnections
specifier|private
name|Boolean
name|persistingConnections
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|pipeliningConnections
specifier|private
name|Boolean
name|pipeliningConnections
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|threadMaxIdleTimeMs
specifier|private
name|Integer
name|threadMaxIdleTimeMs
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|useForwardedForHeader
specifier|private
name|Boolean
name|useForwardedForHeader
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|reuseAddress
specifier|private
name|Boolean
name|reuseAddress
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|disableStreamCache
specifier|private
name|boolean
name|disableStreamCache
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|synchronous
specifier|private
name|Boolean
name|synchronous
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|enabledConverters
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|enabledConverters
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|useGlobalSslContextParameters
specifier|private
name|boolean
name|useGlobalSslContextParameters
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"filter"
argument_list|,
name|description
operator|=
literal|"To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message."
argument_list|)
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
DECL|method|RestletComponent ()
specifier|public
name|RestletComponent
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Component
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RestletComponent (Component component)
specifier|public
name|RestletComponent
parameter_list|(
name|Component
name|component
parameter_list|)
block|{
comment|// Allow the Component to be injected, so that the RestletServlet may be
comment|// configured within a webapp
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// grab uri and remove all query parameters as we need to rebuild it a bit special
name|String
name|endpointUri
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|endpointUri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|endpointUri
operator|=
name|endpointUri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endpointUri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// normalize so the uri is as expected
name|endpointUri
operator|=
name|URISupport
operator|.
name|normalizeUri
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
comment|// decode %7B -> {
comment|// decode %7D -> }
name|endpointUri
operator|=
name|endpointUri
operator|.
name|replaceAll
argument_list|(
literal|"%7B"
argument_list|,
literal|"{"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"%7D"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
comment|// include restlet methods in the uri (use GET as default)
name|String
name|restletMethods
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"restletMethods"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|restletMethods
operator|!=
literal|null
condition|)
block|{
name|endpointUri
operator|=
name|endpointUri
operator|+
literal|"?restletMethods="
operator|+
name|restletMethods
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
name|String
name|restletMethod
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|restletMethods
operator|==
literal|null
condition|)
block|{
name|restletMethod
operator|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
literal|"restletMethod"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|endpointUri
operator|=
name|endpointUri
operator|+
literal|"?restletMethod="
operator|+
name|restletMethod
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
name|RestletEndpoint
name|result
init|=
operator|new
name|RestletEndpoint
argument_list|(
name|this
argument_list|,
name|endpointUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|synchronous
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setSynchronous
argument_list|(
name|synchronous
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setDisableStreamCache
argument_list|(
name|isDisableStreamCache
argument_list|()
argument_list|)
expr_stmt|;
name|setEndpointHeaderFilterStrategy
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|result
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|restletMethods
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setRestletMethods
argument_list|(
name|RestletConverter
operator|.
name|toMethods
argument_list|(
name|restletMethods
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setRestletMethod
argument_list|(
name|RestletConverter
operator|.
name|toMethod
argument_list|(
name|restletMethod
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// construct URI so we can use it to get the splitted information
comment|// use raw values to support paths that has spaces
name|String
name|remainingRaw
init|=
name|URISupport
operator|.
name|extractRemainderPath
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|remainingRaw
argument_list|)
decl_stmt|;
name|String
name|protocol
init|=
name|u
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|uriPattern
init|=
name|URISupport
operator|.
name|createRemainingURI
argument_list|(
name|u
argument_list|,
name|parameters
argument_list|)
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
comment|// must decode back to use {} style as that is what the restlet router expect to match in its uri pattern
comment|// decode %7B -> {
comment|// decode %7D -> }
name|uriPattern
operator|=
name|uriPattern
operator|.
name|replaceAll
argument_list|(
literal|"%7B"
argument_list|,
literal|"{"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"%7D"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
name|int
name|port
decl_stmt|;
name|String
name|host
init|=
name|u
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|getPort
argument_list|()
operator|>
literal|0
condition|)
block|{
name|port
operator|=
name|u
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|port
operator|=
name|this
operator|.
name|port
expr_stmt|;
block|}
name|result
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|result
operator|.
name|setUriPattern
argument_list|(
name|uriPattern
argument_list|)
expr_stmt|;
name|result
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getSslContextParameters
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|setSslContextParameters
argument_list|(
name|retrieveGlobalSslContextParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
block|}
block|}
comment|// any additional query parameters from parameters then we need to include them as well
if|if
condition|(
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|setQueryParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|endpointUri
operator|=
name|URISupport
operator|.
name|appendParametersToURI
argument_list|(
name|endpointUri
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|result
operator|.
name|setCompleteEndpointUri
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// configure component options
name|RestConfiguration
name|config
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRestConfiguration
argument_list|(
literal|"restlet"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// configure additional options on spark configuration
if|if
condition|(
name|config
operator|.
name|getComponentProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getComponentProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|this
argument_list|,
name|config
operator|.
name|getComponentProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cleanupConverters
argument_list|(
name|enabledConverters
argument_list|)
expr_stmt|;
name|component
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|component
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// component stop will stop servers so we should clear our list as well
name|restletHostRegistry
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// routers map entries are removed as consumer stops and servers map
comment|// is not touch so to keep in sync with component's servers
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|useIntrospectionOnEndpoint ()
specifier|protected
name|boolean
name|useIntrospectionOnEndpoint
parameter_list|()
block|{
comment|// we invoke setProperties ourselves so we can construct "user" uri on
comment|// on the remaining parameters
return|return
literal|false
return|;
block|}
DECL|method|connect (RestletConsumer consumer)
specifier|public
name|void
name|connect
parameter_list|(
name|RestletConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|RestletEndpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|addServerIfNecessary
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
comment|// if restlet servlet server is created, the offsetPath is set in component context
comment|// see http://restlet.tigris.org/issues/show_bug.cgi?id=988
name|String
name|offsetPath
init|=
operator|(
name|String
operator|)
name|this
operator|.
name|component
operator|.
name|getContext
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"org.restlet.ext.servlet.offsetPath"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getUriPattern
argument_list|()
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getUriPattern
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attachUriPatternToRestlet
argument_list|(
name|offsetPath
argument_list|,
name|endpoint
operator|.
name|getUriPattern
argument_list|()
argument_list|,
name|endpoint
argument_list|,
name|consumer
operator|.
name|getRestlet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|disconnect (RestletConsumer consumer)
specifier|public
name|void
name|disconnect
parameter_list|(
name|RestletConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|RestletEndpoint
name|endpoint
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MethodBasedRouter
argument_list|>
name|routesToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
name|endpoint
operator|.
name|getUriPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
operator|!
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MethodBasedRouter
name|methodRouter
init|=
name|getMethodRouter
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodRouter
operator|!=
literal|null
condition|)
block|{
name|routesToRemove
operator|.
name|add
argument_list|(
name|methodRouter
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MethodBasedRouter
name|router
range|:
name|routesToRemove
control|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|methods
argument_list|,
name|Method
operator|.
name|OPTIONS
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getRestletMethods
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|methods
argument_list|,
name|endpoint
operator|.
name|getRestletMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|methods
argument_list|,
name|endpoint
operator|.
name|getRestletMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|router
operator|.
name|removeRoute
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Detached restlet uriPattern: {} method: {}"
argument_list|,
name|router
operator|.
name|getUriPattern
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getRestletMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove router if its no longer in use
if|if
condition|(
operator|!
name|router
operator|.
name|hasRoutes
argument_list|()
condition|)
block|{
name|deAttachUriPatternFromRestlet
argument_list|(
name|router
operator|.
name|getUriPattern
argument_list|()
argument_list|,
name|endpoint
argument_list|,
name|router
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|router
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|routers
operator|.
name|remove
argument_list|(
name|router
operator|.
name|getUriPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getMethodRouter (String uriPattern, boolean addIfEmpty)
specifier|private
name|MethodBasedRouter
name|getMethodRouter
parameter_list|(
name|String
name|uriPattern
parameter_list|,
name|boolean
name|addIfEmpty
parameter_list|)
block|{
synchronized|synchronized
init|(
name|routers
init|)
block|{
name|MethodBasedRouter
name|result
init|=
name|routers
operator|.
name|get
argument_list|(
name|uriPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|addIfEmpty
condition|)
block|{
name|result
operator|=
operator|new
name|MethodBasedRouter
argument_list|(
name|uriPattern
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added method based router: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|routers
operator|.
name|put
argument_list|(
name|uriPattern
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|method|addServerIfNecessary (RestletEndpoint endpoint)
specifier|protected
name|void
name|addServerIfNecessary
parameter_list|(
name|RestletEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|buildKey
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|RestletHost
name|host
decl_stmt|;
synchronized|synchronized
init|(
name|restletHostRegistry
init|)
block|{
name|host
operator|=
name|restletHostRegistry
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
name|createRestletHost
argument_list|()
expr_stmt|;
name|host
operator|.
name|configure
argument_list|(
name|endpoint
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|restletHostRegistry
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added host: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|host
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createRestletHost ()
specifier|protected
name|RestletHost
name|createRestletHost
parameter_list|()
block|{
name|RestletHostOptions
name|options
init|=
operator|new
name|RestletHostOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|getControllerDaemon
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setControllerDaemon
argument_list|(
name|getControllerDaemon
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getControllerSleepTimeMs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setControllerSleepTimeMs
argument_list|(
name|getControllerSleepTimeMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getInboundBufferSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setInboundBufferSize
argument_list|(
name|getInboundBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMinThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setMinThreads
argument_list|(
name|getMinThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMaxThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setMaxThreads
argument_list|(
name|getMaxThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLowThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setLowThreads
argument_list|(
name|getLowThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMaxQueued
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setMaxQueued
argument_list|(
name|getMaxQueued
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMaxConnectionsPerHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setMaxConnectionsPerHost
argument_list|(
name|getMaxConnectionsPerHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMaxTotalConnections
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setMaxTotalConnections
argument_list|(
name|getMaxTotalConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getOutboundBufferSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setOutboundBufferSize
argument_list|(
name|getOutboundBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getPersistingConnections
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setPersistingConnections
argument_list|(
name|getPersistingConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getPipeliningConnections
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setPipeliningConnections
argument_list|(
name|getPipeliningConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadMaxIdleTimeMs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setThreadMaxIdleTimeMs
argument_list|(
name|getThreadMaxIdleTimeMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getUseForwardedForHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setUseForwardedForHeader
argument_list|(
name|getUseForwardedForHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getReuseAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setReuseAddress
argument_list|(
name|getReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DefaultRestletHost
argument_list|(
name|options
argument_list|)
return|;
block|}
DECL|method|buildKey (RestletEndpoint endpoint)
specifier|private
specifier|static
name|String
name|buildKey
parameter_list|(
name|RestletEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|endpoint
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
return|;
block|}
DECL|method|attachUriPatternToRestlet (String offsetPath, String uriPattern, RestletEndpoint endpoint, Restlet target)
specifier|private
name|void
name|attachUriPatternToRestlet
parameter_list|(
name|String
name|offsetPath
parameter_list|,
name|String
name|uriPattern
parameter_list|,
name|RestletEndpoint
name|endpoint
parameter_list|,
name|Restlet
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|MethodBasedRouter
name|router
init|=
name|getMethodRouter
argument_list|(
name|uriPattern
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|realm
init|=
name|endpoint
operator|.
name|getRestletRealm
argument_list|()
decl_stmt|;
if|if
condition|(
name|realm
operator|!=
literal|null
operator|&&
name|realm
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ChallengeAuthenticator
name|guard
init|=
operator|new
name|ChallengeAuthenticator
argument_list|(
name|component
operator|.
name|getContext
argument_list|()
operator|.
name|createChildContext
argument_list|()
argument_list|,
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
literal|"Camel-Restlet Endpoint Realm"
argument_list|)
decl_stmt|;
name|MapVerifier
name|verifier
init|=
operator|new
name|MapVerifier
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|realm
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|verifier
operator|.
name|getLocalSecrets
argument_list|()
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|guard
operator|.
name|setVerifier
argument_list|(
name|verifier
argument_list|)
expr_stmt|;
name|guard
operator|.
name|setNext
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|=
name|guard
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Target has been set to guard: {}"
argument_list|,
name|guard
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|methods
argument_list|,
name|Method
operator|.
name|OPTIONS
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getRestletMethods
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|methods
argument_list|,
name|endpoint
operator|.
name|getRestletMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|methods
argument_list|,
name|endpoint
operator|.
name|getRestletMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|router
operator|.
name|addRoute
argument_list|(
name|method
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Attached restlet uriPattern: {} method: {}"
argument_list|,
name|uriPattern
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|router
operator|.
name|hasBeenAttached
argument_list|()
condition|)
block|{
name|component
operator|.
name|getDefaultHost
argument_list|()
operator|.
name|attach
argument_list|(
name|offsetPath
operator|==
literal|null
condition|?
name|uriPattern
else|:
name|offsetPath
operator|+
name|uriPattern
argument_list|,
name|router
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Attached methodRouter uriPattern: {}"
argument_list|,
name|uriPattern
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|router
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Started methodRouter uriPattern: {}"
argument_list|,
name|uriPattern
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deAttachUriPatternFromRestlet (String uriPattern, RestletEndpoint endpoint, Restlet target)
specifier|private
name|void
name|deAttachUriPatternFromRestlet
parameter_list|(
name|String
name|uriPattern
parameter_list|,
name|RestletEndpoint
name|endpoint
parameter_list|,
name|Restlet
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|component
operator|.
name|getDefaultHost
argument_list|()
operator|.
name|detach
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"De-attached methodRouter uriPattern: {}"
argument_list|,
name|uriPattern
argument_list|)
expr_stmt|;
block|}
DECL|method|getControllerDaemon ()
specifier|public
name|Boolean
name|getControllerDaemon
parameter_list|()
block|{
return|return
name|controllerDaemon
return|;
block|}
comment|/**      * Indicates if the controller thread should be a daemon (not blocking JVM exit).      */
DECL|method|setControllerDaemon (Boolean controllerDaemon)
specifier|public
name|void
name|setControllerDaemon
parameter_list|(
name|Boolean
name|controllerDaemon
parameter_list|)
block|{
name|this
operator|.
name|controllerDaemon
operator|=
name|controllerDaemon
expr_stmt|;
block|}
DECL|method|getControllerSleepTimeMs ()
specifier|public
name|Integer
name|getControllerSleepTimeMs
parameter_list|()
block|{
return|return
name|controllerSleepTimeMs
return|;
block|}
comment|/**      * Time for the controller thread to sleep between each control.      */
DECL|method|setControllerSleepTimeMs (Integer controllerSleepTimeMs)
specifier|public
name|void
name|setControllerSleepTimeMs
parameter_list|(
name|Integer
name|controllerSleepTimeMs
parameter_list|)
block|{
name|this
operator|.
name|controllerSleepTimeMs
operator|=
name|controllerSleepTimeMs
expr_stmt|;
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|this
operator|.
name|headerFilterStrategy
return|;
block|}
comment|/**      * To use a custom {@link org.apache.camel.spi.HeaderFilterStrategy} to filter header to and from Camel message.      */
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy strategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|getInboundBufferSize ()
specifier|public
name|Integer
name|getInboundBufferSize
parameter_list|()
block|{
return|return
name|inboundBufferSize
return|;
block|}
comment|/**      * The size of the buffer when reading messages.      */
DECL|method|setInboundBufferSize (Integer inboundBufferSize)
specifier|public
name|void
name|setInboundBufferSize
parameter_list|(
name|Integer
name|inboundBufferSize
parameter_list|)
block|{
name|this
operator|.
name|inboundBufferSize
operator|=
name|inboundBufferSize
expr_stmt|;
block|}
DECL|method|getMaxConnectionsPerHost ()
specifier|public
name|Integer
name|getMaxConnectionsPerHost
parameter_list|()
block|{
return|return
name|maxConnectionsPerHost
return|;
block|}
comment|/**      * Maximum number of concurrent connections per host (IP address).      */
DECL|method|setMaxConnectionsPerHost (Integer maxConnectionsPerHost)
specifier|public
name|void
name|setMaxConnectionsPerHost
parameter_list|(
name|Integer
name|maxConnectionsPerHost
parameter_list|)
block|{
name|this
operator|.
name|maxConnectionsPerHost
operator|=
name|maxConnectionsPerHost
expr_stmt|;
block|}
DECL|method|getMaxThreads ()
specifier|public
name|Integer
name|getMaxThreads
parameter_list|()
block|{
return|return
name|maxThreads
return|;
block|}
comment|/**      * Maximum threads that will service requests.      */
DECL|method|setMaxThreads (Integer maxThreads)
specifier|public
name|void
name|setMaxThreads
parameter_list|(
name|Integer
name|maxThreads
parameter_list|)
block|{
name|this
operator|.
name|maxThreads
operator|=
name|maxThreads
expr_stmt|;
block|}
DECL|method|getLowThreads ()
specifier|public
name|Integer
name|getLowThreads
parameter_list|()
block|{
return|return
name|lowThreads
return|;
block|}
comment|/**      * Number of worker threads determining when the connector is considered overloaded.      */
DECL|method|setLowThreads (Integer lowThreads)
specifier|public
name|void
name|setLowThreads
parameter_list|(
name|Integer
name|lowThreads
parameter_list|)
block|{
name|this
operator|.
name|lowThreads
operator|=
name|lowThreads
expr_stmt|;
block|}
DECL|method|getMaxTotalConnections ()
specifier|public
name|Integer
name|getMaxTotalConnections
parameter_list|()
block|{
return|return
name|maxTotalConnections
return|;
block|}
comment|/**      * Maximum number of concurrent connections in total.      */
DECL|method|setMaxTotalConnections (Integer maxTotalConnections)
specifier|public
name|void
name|setMaxTotalConnections
parameter_list|(
name|Integer
name|maxTotalConnections
parameter_list|)
block|{
name|this
operator|.
name|maxTotalConnections
operator|=
name|maxTotalConnections
expr_stmt|;
block|}
DECL|method|getMinThreads ()
specifier|public
name|Integer
name|getMinThreads
parameter_list|()
block|{
return|return
name|minThreads
return|;
block|}
comment|/**      * Minimum threads waiting to service requests.      */
DECL|method|setMinThreads (Integer minThreads)
specifier|public
name|void
name|setMinThreads
parameter_list|(
name|Integer
name|minThreads
parameter_list|)
block|{
name|this
operator|.
name|minThreads
operator|=
name|minThreads
expr_stmt|;
block|}
DECL|method|getOutboundBufferSize ()
specifier|public
name|Integer
name|getOutboundBufferSize
parameter_list|()
block|{
return|return
name|outboundBufferSize
return|;
block|}
comment|/**      * The size of the buffer when writing messages.      */
DECL|method|setOutboundBufferSize (Integer outboundBufferSize)
specifier|public
name|void
name|setOutboundBufferSize
parameter_list|(
name|Integer
name|outboundBufferSize
parameter_list|)
block|{
name|this
operator|.
name|outboundBufferSize
operator|=
name|outboundBufferSize
expr_stmt|;
block|}
DECL|method|getPersistingConnections ()
specifier|public
name|Boolean
name|getPersistingConnections
parameter_list|()
block|{
return|return
name|persistingConnections
return|;
block|}
comment|/**      * Indicates if connections should be kept alive after a call.      */
DECL|method|setPersistingConnections (Boolean persistingConnections)
specifier|public
name|void
name|setPersistingConnections
parameter_list|(
name|Boolean
name|persistingConnections
parameter_list|)
block|{
name|this
operator|.
name|persistingConnections
operator|=
name|persistingConnections
expr_stmt|;
block|}
DECL|method|getPipeliningConnections ()
specifier|public
name|Boolean
name|getPipeliningConnections
parameter_list|()
block|{
return|return
name|pipeliningConnections
return|;
block|}
comment|/**      * Indicates if pipelining connections are supported.      */
DECL|method|setPipeliningConnections (Boolean pipeliningConnections)
specifier|public
name|void
name|setPipeliningConnections
parameter_list|(
name|Boolean
name|pipeliningConnections
parameter_list|)
block|{
name|this
operator|.
name|pipeliningConnections
operator|=
name|pipeliningConnections
expr_stmt|;
block|}
DECL|method|getThreadMaxIdleTimeMs ()
specifier|public
name|Integer
name|getThreadMaxIdleTimeMs
parameter_list|()
block|{
return|return
name|threadMaxIdleTimeMs
return|;
block|}
comment|/**      * Time for an idle thread to wait for an operation before being collected.      */
DECL|method|setThreadMaxIdleTimeMs (Integer threadMaxIdleTimeMs)
specifier|public
name|void
name|setThreadMaxIdleTimeMs
parameter_list|(
name|Integer
name|threadMaxIdleTimeMs
parameter_list|)
block|{
name|this
operator|.
name|threadMaxIdleTimeMs
operator|=
name|threadMaxIdleTimeMs
expr_stmt|;
block|}
DECL|method|getUseForwardedForHeader ()
specifier|public
name|Boolean
name|getUseForwardedForHeader
parameter_list|()
block|{
return|return
name|useForwardedForHeader
return|;
block|}
comment|/**      * Lookup the "X-Forwarded-For" header supported by popular proxies and caches and uses it to populate the Request.getClientAddresses()      * method result. This information is only safe for intermediary components within your local network.      * Other addresses could easily be changed by setting a fake header and should not be trusted for serious security checks.      */
DECL|method|setUseForwardedForHeader (Boolean useForwardedForHeader)
specifier|public
name|void
name|setUseForwardedForHeader
parameter_list|(
name|Boolean
name|useForwardedForHeader
parameter_list|)
block|{
name|this
operator|.
name|useForwardedForHeader
operator|=
name|useForwardedForHeader
expr_stmt|;
block|}
DECL|method|getReuseAddress ()
specifier|public
name|Boolean
name|getReuseAddress
parameter_list|()
block|{
return|return
name|reuseAddress
return|;
block|}
comment|/**      * Enable/disable the SO_REUSEADDR socket option.      * See java.io.ServerSocket#reuseAddress property for additional details.      */
DECL|method|setReuseAddress (Boolean reuseAddress)
specifier|public
name|void
name|setReuseAddress
parameter_list|(
name|Boolean
name|reuseAddress
parameter_list|)
block|{
name|this
operator|.
name|reuseAddress
operator|=
name|reuseAddress
expr_stmt|;
block|}
DECL|method|getMaxQueued ()
specifier|public
name|Integer
name|getMaxQueued
parameter_list|()
block|{
return|return
name|maxQueued
return|;
block|}
comment|/**      * Maximum number of calls that can be queued if there aren't any worker thread available to service them.      * If the value is '0', then no queue is used and calls are rejected if no worker thread is immediately available.      * If the value is '-1', then an unbounded queue is used and calls are never rejected.      */
DECL|method|setMaxQueued (Integer maxQueued)
specifier|public
name|void
name|setMaxQueued
parameter_list|(
name|Integer
name|maxQueued
parameter_list|)
block|{
name|this
operator|.
name|maxQueued
operator|=
name|maxQueued
expr_stmt|;
block|}
DECL|method|isDisableStreamCache ()
specifier|public
name|boolean
name|isDisableStreamCache
parameter_list|()
block|{
return|return
name|disableStreamCache
return|;
block|}
comment|/**      * Determines whether or not the raw input stream from Restlet is cached or not      * (Camel will read the stream into a in memory/overflow to file, Stream caching) cache.      * By default Camel will cache the Restlet input stream to support reading it multiple times to ensure Camel      * can retrieve all data from the stream. However you can set this option to true when you for example need      * to access the raw stream, such as streaming it directly to a file or other persistent store.      * DefaultRestletBinding will copy the request input stream into a stream cache and put it into message body      * if this option is false to support reading the stream multiple times.      */
DECL|method|setDisableStreamCache (boolean disableStreamCache)
specifier|public
name|void
name|setDisableStreamCache
parameter_list|(
name|boolean
name|disableStreamCache
parameter_list|)
block|{
name|this
operator|.
name|disableStreamCache
operator|=
name|disableStreamCache
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * To configure the port number for the restlet consumer routes.      * This allows to configure this once to reuse the same port for these consumers.      */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getSynchronous ()
specifier|public
name|Boolean
name|getSynchronous
parameter_list|()
block|{
return|return
name|synchronous
return|;
block|}
comment|/**      * Whether to use synchronous Restlet Client for the producer. Setting this option to true can yield faster performance      * as it seems the Restlet synchronous Client works better.      */
DECL|method|setSynchronous (Boolean synchronous)
specifier|public
name|void
name|setSynchronous
parameter_list|(
name|Boolean
name|synchronous
parameter_list|)
block|{
name|this
operator|.
name|synchronous
operator|=
name|synchronous
expr_stmt|;
block|}
DECL|method|getEnabledConverters ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getEnabledConverters
parameter_list|()
block|{
return|return
name|enabledConverters
return|;
block|}
comment|/**      * A list of converters to enable as full class name or simple class name.      * All the converters automatically registered are enabled if empty or null      */
DECL|method|setEnabledConverters (List<String> enabledConverters)
specifier|public
name|void
name|setEnabledConverters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|enabledConverters
parameter_list|)
block|{
if|if
condition|(
name|enabledConverters
operator|!=
literal|null
operator|&&
operator|!
name|enabledConverters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|enabledConverters
operator|=
operator|new
name|ArrayList
argument_list|(
name|enabledConverters
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A comma separated list of converters to enable as full class name or simple      * class name. All the converters automatically registered are enabled if      * empty or null      */
DECL|method|setEnabledConverters (String enabledConverters)
specifier|public
name|void
name|setEnabledConverters
parameter_list|(
name|String
name|enabledConverters
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|enabledConverters
argument_list|)
condition|)
block|{
name|this
operator|.
name|enabledConverters
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|enabledConverters
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isUseGlobalSslContextParameters ()
specifier|public
name|boolean
name|isUseGlobalSslContextParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|useGlobalSslContextParameters
return|;
block|}
comment|/**      * Enable usage of global SSL context parameters.      */
annotation|@
name|Override
DECL|method|setUseGlobalSslContextParameters (boolean useGlobalSslContextParameters)
specifier|public
name|void
name|setUseGlobalSslContextParameters
parameter_list|(
name|boolean
name|useGlobalSslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|useGlobalSslContextParameters
operator|=
name|useGlobalSslContextParameters
expr_stmt|;
block|}
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"To configure security using SSLContextParameters"
argument_list|,
name|label
operator|=
literal|"security"
argument_list|)
DECL|method|setSslContextParameters (final SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
specifier|final
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|basePath
decl_stmt|;
if|if
condition|(
name|uriTemplate
operator|!=
literal|null
condition|)
block|{
comment|// make sure to avoid double slashes
if|if
condition|(
name|uriTemplate
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
name|uriTemplate
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|uriTemplate
expr_stmt|;
block|}
block|}
name|path
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|scheme
init|=
literal|"http"
decl_stmt|;
name|String
name|host
init|=
literal|""
decl_stmt|;
comment|// use the component's port as the default value
name|int
name|port
init|=
name|this
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// if no explicit port/host configured, then use port from rest configuration
name|RestConfiguration
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
literal|"restlet"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scheme
operator|=
name|config
operator|.
name|getScheme
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|config
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
name|int
name|num
init|=
name|config
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|port
operator|=
name|num
expr_stmt|;
block|}
comment|// prefix path with context-path if configured in rest-dsl configuration
name|String
name|contextPath
init|=
name|config
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|contextPath
argument_list|)
condition|)
block|{
name|contextPath
operator|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
name|contextPath
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|contextPath
argument_list|)
condition|)
block|{
name|path
operator|=
name|contextPath
operator|+
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
block|}
comment|// if no explicit hostname set then resolve the hostname
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|host
argument_list|)
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|allLocalIp
condition|)
block|{
name|host
operator|=
literal|"0.0.0.0"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localHostName
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localIp
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalIp
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// build query string, and append any endpoint configuration properties
if|if
condition|(
name|config
operator|.
name|getComponent
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getComponent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"restlet"
argument_list|)
condition|)
block|{
comment|// setup endpoint options
if|if
condition|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// allow HTTP Options as we want to handle CORS in rest-dsl
name|boolean
name|cors
init|=
name|config
operator|.
name|isEnableCORS
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|String
name|url
decl_stmt|;
comment|// must use upper case for restrict
name|String
name|restrict
init|=
name|verb
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|cors
condition|)
block|{
name|restrict
operator|+=
literal|",OPTIONS"
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|url
operator|=
literal|"restlet:%s://%s:%s/%s?restletMethods=%s"
expr_stmt|;
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
name|url
argument_list|,
name|scheme
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
name|restrict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It could use the restlet servlet transport
name|url
operator|=
literal|"restlet:/%s?restletMethods=%s"
expr_stmt|;
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
name|restrict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&"
operator|+
name|query
expr_stmt|;
block|}
comment|// get the endpoint
name|RestletEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|url
argument_list|,
name|RestletEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// the endpoint must be started before creating the consumer
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
comment|// configure consumer properties
name|Consumer
name|consumer
init|=
name|endpoint
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getConsumerProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getConsumerProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|consumer
argument_list|,
name|config
operator|.
name|getConsumerProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|createApiConsumer (CamelContext camelContext, Processor processor, String contextPath, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Consumer
name|createApiConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// reuse the createConsumer method we already have. The api need to use GET and match on uri prefix
return|return
name|createConsumer
argument_list|(
name|camelContext
argument_list|,
name|processor
argument_list|,
literal|"GET"
argument_list|,
name|contextPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|configuration
argument_list|,
name|parameters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer (CamelContext camelContext, String host, String verb, String basePath, String uriTemplate, String queryParameters, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Producer
name|createProducer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|queryParameters
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// avoid leading slash
name|basePath
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|uriTemplate
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|uriTemplate
argument_list|)
expr_stmt|;
comment|// restlet method must be in upper-case
name|String
name|restletMethod
init|=
name|verb
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
comment|// get the endpoint
name|String
name|url
init|=
literal|"restlet:"
operator|+
name|host
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|url
operator|+=
literal|"/"
operator|+
name|basePath
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|uriTemplate
argument_list|)
condition|)
block|{
name|url
operator|+=
literal|"/"
operator|+
name|uriTemplate
expr_stmt|;
block|}
name|RestConfiguration
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
literal|"restlet"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// build query string, and append any endpoint configuration properties
if|if
condition|(
name|config
operator|.
name|getComponent
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getComponent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"restlet"
argument_list|)
condition|)
block|{
comment|// setup endpoint options
if|if
condition|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get the endpoint
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
else|else
block|{
name|url
operator|+=
literal|"?restletMethod="
operator|+
name|restletMethod
expr_stmt|;
block|}
comment|// there are cases where we might end up here without component being created beforehand
comment|// we need to abide by the component properties specified in the parameters when creating
comment|// the component
name|RestProducerFactoryHelper
operator|.
name|setupComponentFor
argument_list|(
name|url
argument_list|,
name|camelContext
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"component"
argument_list|)
argument_list|)
expr_stmt|;
name|RestletEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|url
argument_list|,
name|RestletEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
operator|&&
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|camelContext
argument_list|,
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
comment|// the endpoint must be started before creating the producer
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|endpoint
operator|.
name|createProducer
argument_list|()
return|;
block|}
DECL|method|cleanupConverters (List<String> converters)
specifier|protected
specifier|static
name|void
name|cleanupConverters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|converters
parameter_list|)
block|{
if|if
condition|(
name|converters
operator|!=
literal|null
operator|&&
operator|!
name|converters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// To avoid race conditions this operation relies on a global lock, we
comment|// could have used Engine's instance as lock so we'd lock only operations
comment|// on the same instance but we do not know how Engine is used by the
comment|// restlet framework
synchronized|synchronized
init|(
name|LOCK
init|)
block|{
name|Engine
operator|.
name|getInstance
argument_list|()
operator|.
name|getRegisteredConverters
argument_list|()
operator|.
name|removeIf
argument_list|(
name|converter
lambda|->
operator|!
name|converters
operator|.
name|contains
argument_list|(
name|converter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|converters
operator|.
name|contains
argument_list|(
name|converter
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setEndpointHeaderFilterStrategy (Endpoint endpoint)
specifier|public
name|void
name|setEndpointHeaderFilterStrategy
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
name|endpoint
operator|instanceof
name|HeaderFilterStrategyAware
condition|)
block|{
operator|(
operator|(
name|HeaderFilterStrategyAware
operator|)
name|endpoint
operator|)
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|this
operator|.
name|headerFilterStrategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

