begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.restlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|restlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WrappedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URLEncodedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|CacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ChallengeScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|CharacterSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|ClientInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|engine
operator|.
name|application
operator|.
name|DecodeRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|engine
operator|.
name|header
operator|.
name|HeaderConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|engine
operator|.
name|header
operator|.
name|HeaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|ByteArrayRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|EmptyRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|FileRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|InputRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|StreamRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|representation
operator|.
name|StringRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|util
operator|.
name|Series
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default Restlet binding implementation  */
end_comment

begin_class
DECL|class|DefaultRestletBinding
specifier|public
class|class
name|DefaultRestletBinding
implements|implements
name|RestletBinding
implements|,
name|HeaderFilterStrategyAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRestletBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RFC_2822_DATE_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|RFC_2822_DATE_PATTERN
init|=
literal|"EEE, dd MMM yyyy HH:mm:ss Z"
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|field|streamRepresentation
specifier|private
name|boolean
name|streamRepresentation
decl_stmt|;
DECL|field|autoCloseStream
specifier|private
name|boolean
name|autoCloseStream
decl_stmt|;
DECL|method|populateExchangeFromRestletRequest (Request request, Response response, Exchange exchange)
specifier|public
name|void
name|populateExchangeFromRestletRequest
parameter_list|(
name|Request
name|request
parameter_list|,
name|Response
name|response
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|inMessage
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|RestletConstants
operator|.
name|RESTLET_REQUEST
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|RestletConstants
operator|.
name|RESTLET_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|// extract headers from restlet
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|request
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Series
argument_list|<
name|Header
argument_list|>
name|series
init|=
operator|(
name|Series
argument_list|<
name|Header
argument_list|>
operator|)
name|value
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|series
control|)
block|{
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|inMessage
operator|.
name|setHeader
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|inMessage
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate exchange from Restlet request header: {} value: {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copy query string to header
name|populateQueryParameters
argument_list|(
name|request
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// copy URI to header
name|inMessage
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|request
operator|.
name|getResourceRef
argument_list|()
operator|.
name|getIdentifier
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// copy HTTP method to header
name|inMessage
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|isEntityAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// only deal with the form if the content type is "application/x-www-form-urlencoded"
if|if
condition|(
name|request
operator|.
name|getEntity
argument_list|()
operator|.
name|getMediaType
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getEntity
argument_list|()
operator|.
name|getMediaType
argument_list|()
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_WWW_FORM
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Form
name|form
init|=
operator|new
name|Form
argument_list|(
name|request
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|paramName
range|:
name|form
operator|.
name|getValuesMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
index|[]
name|values
init|=
name|form
operator|.
name|getValuesArray
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|values
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|values
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|inMessage
operator|.
name|setBody
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate exchange from Restlet request body: {}"
argument_list|,
name|paramName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|paramName
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|inMessage
operator|.
name|setHeader
argument_list|(
name|paramName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate exchange from Restlet request user header: {} value: {}"
argument_list|,
name|paramName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|InputStream
name|is
init|=
name|request
operator|.
name|getEntity
argument_list|()
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|Object
name|body
init|=
name|RestletHelper
operator|.
name|readResponseBodyFromInputStream
argument_list|(
name|is
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|inMessage
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateQueryParameters (Request request, Exchange exchange)
specifier|protected
name|void
name|populateQueryParameters
parameter_list|(
name|Request
name|request
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|query
init|=
name|request
operator|.
name|getResourceRef
argument_list|()
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|query
argument_list|)
expr_stmt|;
comment|// parse query and map to Camel message headers
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|URISupport
operator|.
name|parseQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP query parameter {} = {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|populateRestletRequestFromExchange (Request request, Exchange exchange)
specifier|public
name|void
name|populateRestletRequestFromExchange
parameter_list|(
name|Request
name|request
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|request
operator|.
name|setReferrerRef
argument_list|(
literal|"camel-restlet"
argument_list|)
expr_stmt|;
specifier|final
name|Method
name|method
init|=
name|request
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|MediaType
name|mediaType
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|==
literal|null
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|APPLICATION_WWW_FORM
expr_stmt|;
block|}
name|Form
name|form
init|=
literal|null
decl_stmt|;
comment|// Use forms only for PUT, POST and x-www-form-urlencoded
if|if
condition|(
operator|(
name|Method
operator|.
name|PUT
operator|==
name|method
operator|||
name|Method
operator|.
name|POST
operator|==
name|method
operator|)
operator|&&
name|MediaType
operator|.
name|APPLICATION_WWW_FORM
operator|.
name|equals
argument_list|(
name|mediaType
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|form
operator|=
operator|new
name|Form
argument_list|()
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
comment|//Body is key value pairs
try|try
block|{
name|Map
name|pairs
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|pairs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|pairs
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|form
operator|.
name|add
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"body for "
operator|+
name|MediaType
operator|.
name|APPLICATION_WWW_FORM
operator|+
literal|" request must be Map<String,String> or string format like name=bob&password=secRet"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// use string based for forms
name|String
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|pairs
init|=
name|URLEncodedUtils
operator|.
name|parse
argument_list|(
name|body
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|IOHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NameValuePair
name|p
range|:
name|pairs
control|)
block|{
name|form
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// get outgoing custom http headers from the exchange if they exists
name|Series
argument_list|<
name|Header
argument_list|>
name|restletHeaders
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
argument_list|,
name|Series
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|restletHeaders
operator|==
literal|null
condition|)
block|{
name|restletHeaders
operator|=
operator|new
name|Series
argument_list|<
name|Header
argument_list|>
argument_list|(
name|Header
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
argument_list|,
name|restletHeaders
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if the restlet headers already exists on the exchange, we need to filter them
for|for
control|(
name|String
name|name
range|:
name|restletHeaders
operator|.
name|getNames
argument_list|()
control|)
block|{
if|if
condition|(
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|name
argument_list|,
name|restletHeaders
operator|.
name|getValues
argument_list|(
name|name
argument_list|)
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|restletHeaders
operator|.
name|removeAll
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
argument_list|,
name|restletHeaders
argument_list|)
expr_stmt|;
comment|// since the restlet headers already exists remove them from the exchange so they don't get added again below
comment|// we will get a new set of restlet headers on the response
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
argument_list|)
expr_stmt|;
block|}
comment|// login and password are filtered by header filter strategy
name|String
name|login
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RestletConstants
operator|.
name|RESTLET_LOGIN
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RestletConstants
operator|.
name|RESTLET_PASSWORD
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|login
operator|!=
literal|null
operator|&&
name|password
operator|!=
literal|null
condition|)
block|{
name|ChallengeResponse
name|authentication
init|=
operator|new
name|ChallengeResponse
argument_list|(
name|ChallengeScheme
operator|.
name|HTTP_BASIC
argument_list|,
name|login
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|request
operator|.
name|setChallengeResponse
argument_list|(
name|authentication
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Basic HTTP Authentication has been applied"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
comment|// Use forms only for PUT, POST and x-www-form-urlencoded
if|if
condition|(
name|form
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"org.restlet."
argument_list|)
condition|)
block|{
comment|// put the org.restlet headers in attributes
name|request
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// put the user stuff in the form
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Object
name|v
range|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
control|)
block|{
name|form
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|restletHeaders
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//Add headers to headers and to body
name|form
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|restletHeaders
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// For non-form post put all the headers in custom headers
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|restletHeaders
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate Restlet request from exchange header: {} value: {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|form
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setEntity
argument_list|(
name|form
operator|.
name|getWebRepresentation
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate Restlet {} request from exchange body as form using media type {}"
argument_list|,
name|method
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// include body if PUT or POST
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|==
name|Method
operator|.
name|PUT
operator|||
name|request
operator|.
name|getMethod
argument_list|()
operator|==
name|Method
operator|.
name|POST
condition|)
block|{
name|Representation
name|body
init|=
name|createRepresentationFromBody
argument_list|(
name|exchange
argument_list|,
name|mediaType
argument_list|)
decl_stmt|;
name|request
operator|.
name|setEntity
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate Restlet {} request from exchange body: {} using media type {}"
argument_list|,
name|method
argument_list|,
name|body
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no body
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate Restlet {} request from exchange using media type {}"
argument_list|,
name|method
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEntity
argument_list|(
operator|new
name|EmptyRepresentation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// filter out standard restlet headers which must be configured differently
name|org
operator|.
name|restlet
operator|.
name|Message
name|extensionHeaders
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|HeaderUtils
operator|.
name|copyExtensionHeaders
argument_list|(
name|restletHeaders
argument_list|,
name|extensionHeaders
argument_list|)
expr_stmt|;
comment|// setup standard headers
name|Series
argument_list|<
name|Header
argument_list|>
name|standardHeaders
init|=
operator|new
name|Series
argument_list|<>
argument_list|(
name|Header
operator|.
name|class
argument_list|)
decl_stmt|;
name|standardHeaders
operator|.
name|addAll
argument_list|(
name|restletHeaders
argument_list|)
expr_stmt|;
name|standardHeaders
operator|.
name|removeAll
argument_list|(
name|extensionHeaders
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup extension headers
name|restletHeaders
operator|.
name|removeAll
argument_list|(
name|standardHeaders
argument_list|)
expr_stmt|;
comment|// now add standard headers but via the special restlet api
name|LOG
operator|.
name|debug
argument_list|(
literal|"Detected {} extension headers"
argument_list|,
name|extensionHeaders
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Detected {} standard headers"
argument_list|,
name|standardHeaders
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|configureRestletStandardHeaders
argument_list|(
name|exchange
argument_list|,
name|request
argument_list|,
name|standardHeaders
argument_list|)
expr_stmt|;
comment|// deprecated accept
specifier|final
name|MediaType
index|[]
name|acceptedMediaTypes
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
name|MediaType
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedMediaTypes
operator|!=
literal|null
condition|)
block|{
name|ClientInfo
name|clientInfo
init|=
name|request
operator|.
name|getClientInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Preference
argument_list|<
name|MediaType
argument_list|>
argument_list|>
name|acceptedMediaTypesList
init|=
name|clientInfo
operator|.
name|getAcceptedMediaTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|acceptedMediaType
range|:
name|acceptedMediaTypes
control|)
block|{
name|acceptedMediaTypesList
operator|.
name|add
argument_list|(
operator|new
name|Preference
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|acceptedMediaType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|configureRestletStandardHeaders (Exchange exchange, Request request, Series standardHeaders)
specifier|private
name|void
name|configureRestletStandardHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Request
name|request
parameter_list|,
name|Series
name|standardHeaders
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|standardHeaders
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Header
name|h
init|=
operator|(
name|Header
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|h
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|h
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Authorization"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// special workaround for restlet (https://github.com/restlet/restlet-framework-java/issues/1086)
name|ChallengeResponse
name|c
init|=
operator|new
name|ChallengeResponse
argument_list|(
operator|new
name|ChallengeScheme
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|setRawValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|request
operator|.
name|setChallengeResponse
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
literal|"Accept"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|ClientInfo
name|clientInfo
init|=
name|request
operator|.
name|getClientInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Preference
argument_list|<
name|MediaType
argument_list|>
argument_list|>
name|acceptedMediaTypesList
init|=
name|clientInfo
operator|.
name|getAcceptedMediaTypes
argument_list|()
decl_stmt|;
name|MediaType
index|[]
name|acceptedMediaTypes
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|MediaType
index|[]
operator|.
expr|class
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|MediaType
name|acceptedMediaType
range|:
name|acceptedMediaTypes
control|)
block|{
name|acceptedMediaTypesList
operator|.
name|add
argument_list|(
operator|new
name|Preference
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|acceptedMediaType
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
literal|"Content-Type"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|MediaType
name|mediaType
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|MediaType
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|getEntity
argument_list|()
operator|.
name|setMediaType
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// TODO: implement all the other restlet standard headers
name|LOG
operator|.
name|warn
argument_list|(
literal|"Addition of the standard header \"{}\" is not allowed. Please use the equivalent property in the Restlet API."
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateRestletResponseFromExchange (Exchange exchange, Response response)
specifier|public
name|void
name|populateRestletResponseFromExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|out
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|isFailed
argument_list|()
condition|)
block|{
comment|// 500 for internal server error which can be overridden by response code in header
name|response
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|valueOf
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|isFault
argument_list|()
condition|)
block|{
name|out
operator|=
name|msg
expr_stmt|;
block|}
else|else
block|{
comment|// print exception as message and stacktrace
name|Exception
name|t
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|out
operator|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
comment|// get content type
name|MediaType
name|mediaType
init|=
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|==
literal|null
condition|)
block|{
name|Object
name|body
init|=
name|out
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|mediaType
operator|=
name|MediaType
operator|.
name|TEXT_PLAIN
expr_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|String
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|TEXT_PLAIN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|StringSource
operator|||
name|body
operator|instanceof
name|DOMSource
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|TEXT_XML
expr_stmt|;
block|}
block|}
comment|// get response code
name|Integer
name|responseCode
init|=
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseCode
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|valueOf
argument_list|(
name|responseCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set response body according to the message body
name|Object
name|body
init|=
name|out
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|WrappedFile
condition|)
block|{
comment|// grab body from generic file holder
name|GenericFile
argument_list|<
name|?
argument_list|>
name|gf
init|=
operator|(
name|GenericFile
argument_list|<
name|?
argument_list|>
operator|)
name|body
decl_stmt|;
name|body
operator|=
name|gf
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
comment|// empty response
name|response
operator|.
name|setEntity
argument_list|(
literal|""
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|Response
condition|)
block|{
comment|// its already a restlet response, so dont do anything
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using existing Restlet Response from exchange body: {}"
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|Representation
condition|)
block|{
name|response
operator|.
name|setEntity
argument_list|(
name|out
operator|.
name|getBody
argument_list|(
name|Representation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|InputStream
condition|)
block|{
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|InputRepresentation
argument_list|(
name|out
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|mediaType
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|File
condition|)
block|{
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|FileRepresentation
argument_list|(
name|out
operator|.
name|getBody
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|mediaType
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|out
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|ByteArrayRepresentation
argument_list|(
name|bytes
argument_list|,
name|mediaType
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fallback and use string
name|String
name|text
init|=
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
name|text
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate Restlet response from exchange body: {}"
argument_list|,
name|body
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CharacterSet
name|cs
init|=
name|CharacterSet
operator|.
name|valueOf
argument_list|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|setCharacterSet
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
comment|// set headers at the end, as the entity must be set first
comment|// NOTE: setting HTTP headers on restlet is cumbersome and its API is "weird" and has some flaws
comment|// so we need to headers two times, and the 2nd time we add the non-internal headers once more
name|Series
argument_list|<
name|Header
argument_list|>
name|series
init|=
operator|new
name|Series
argument_list|<
name|Header
argument_list|>
argument_list|(
name|Header
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|out
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|boolean
name|added
init|=
name|setResponseHeader
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|added
condition|)
block|{
comment|// we only want non internal headers
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"Camel"
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"org.restlet"
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|series
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// set HTTP headers so we return these in the response
if|if
condition|(
operator|!
name|series
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|HeaderConstants
operator|.
name|ATTRIBUTE_HEADERS
argument_list|,
name|series
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateExchangeFromRestletResponse (Exchange exchange, Response response)
specifier|public
name|void
name|populateExchangeFromRestletResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|response
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate exchange from Restlet response header: {} value: {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set response code
name|int
name|responseCode
init|=
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|responseCode
argument_list|)
expr_stmt|;
comment|// set restlet response as header so end user have access to it if needed
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|RestletConstants
operator|.
name|RESTLET_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// get content type
name|MediaType
name|mediaType
init|=
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getMediaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting the Content-Type to be {}"
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|streamRepresentation
operator|&&
name|response
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|StreamRepresentation
condition|)
block|{
name|Representation
name|representationDecoded
init|=
operator|new
name|DecodeRepresentation
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|representationDecoded
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|autoCloseStream
condition|)
block|{
comment|// ensure the input stream is closed when we are done routing
name|exchange
operator|.
name|addOnCompletion
argument_list|(
operator|new
name|RestletOnCompletion
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|Representation
condition|)
block|{
name|Representation
name|representationDecoded
init|=
operator|new
name|DecodeRepresentation
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|representationDecoded
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// get content text by default
name|String
name|text
init|=
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Populate exchange from Restlet response: {}"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
comment|// preserve headers from in by copying any non existing headers
comment|// to avoid overriding existing headers with old values
name|MessageHelper
operator|.
name|copyHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setResponseHeader (Exchange exchange, org.restlet.Response message, String header, Object value)
specifier|protected
name|boolean
name|setResponseHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|org
operator|.
name|restlet
operator|.
name|Response
name|message
parameter_list|,
name|String
name|header
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// there must be a value going forward
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// must put to attributes
name|message
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// special for certain headers
if|if
condition|(
name|message
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// arfg darn restlet you make using your api harder for end users with all this trick just to set those ACL headers
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS
argument_list|)
condition|)
block|{
name|Boolean
name|bool
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|bool
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setAccessControlAllowCredentials
argument_list|(
name|bool
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_ACCESS_CONTROL_ALLOW_HEADERS
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|convertToStringSet
argument_list|(
name|value
argument_list|,
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setAccessControlAllowHeaders
argument_list|(
name|set
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_ACCESS_CONTROL_ALLOW_METHODS
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Method
argument_list|>
name|set
init|=
name|convertToMethodSet
argument_list|(
name|value
argument_list|,
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setAccessControlAllowMethods
argument_list|(
name|set
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setAccessControlAllowOrigin
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_ACCESS_CONTROL_EXPOSE_HEADERS
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|convertToStringSet
argument_list|(
name|value
argument_list|,
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setAccessControlExposeHeaders
argument_list|(
name|set
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_CACHE_CONTROL
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|message
operator|.
name|setCacheDirectives
argument_list|(
operator|(
name|List
argument_list|<
name|CacheDirective
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|List
argument_list|<
name|CacheDirective
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|CacheDirective
argument_list|>
argument_list|()
decl_stmt|;
comment|// set the cache control value directive
name|list
operator|.
name|add
argument_list|(
operator|new
name|CacheDirective
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setCacheDirectives
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_LOCATION
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setLocationRef
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_EXPIRES
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setExpirationDate
argument_list|(
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setExpirationDate
argument_list|(
operator|(
name|Date
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|RFC_2822_DATE_PATTERN
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
try|try
block|{
name|Date
name|date
init|=
name|format
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
decl_stmt|;
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setExpirationDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Header {} with value {} cannot be converted as a Date. The value will be ignored."
argument_list|,
name|HeaderConstants
operator|.
name|HEADER_EXPIRES
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_LAST_MODIFIED
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setModificationDate
argument_list|(
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setModificationDate
argument_list|(
operator|(
name|Date
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|RFC_2822_DATE_PATTERN
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
try|try
block|{
name|Date
name|date
init|=
name|format
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
decl_stmt|;
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setModificationDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Header {} with value {} cannot be converted as a Date. The value will be ignored."
argument_list|,
name|HeaderConstants
operator|.
name|HEADER_LAST_MODIFIED
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_CONTENT_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setSize
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setSize
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Long
name|num
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setSize
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Header {} with value {} cannot be converted as a Long. The value will be ignored."
argument_list|,
name|HeaderConstants
operator|.
name|HEADER_CONTENT_LENGTH
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|HeaderConstants
operator|.
name|HEADER_CONTENT_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|MediaType
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setMediaType
argument_list|(
operator|(
name|MediaType
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|type
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|MediaType
name|media
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|media
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getEntity
argument_list|()
operator|.
name|setMediaType
argument_list|(
name|media
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Header {} with value {} cannot be converted as a MediaType. The value will be ignored."
argument_list|,
name|HeaderConstants
operator|.
name|HEADER_CONTENT_TYPE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertToStringSet (Object value, TypeConverter typeConverter)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|convertToStringSet
parameter_list|(
name|Object
name|value
parameter_list|,
name|TypeConverter
name|typeConverter
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Set
condition|)
block|{
return|return
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|value
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|typeConverter
operator|.
name|tryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|text
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertToMethodSet (Object value, TypeConverter typeConverter)
specifier|private
name|Set
argument_list|<
name|Method
argument_list|>
name|convertToMethodSet
parameter_list|(
name|Object
name|value
parameter_list|,
name|TypeConverter
name|typeConverter
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Set
condition|)
block|{
return|return
operator|(
name|Set
argument_list|<
name|Method
argument_list|>
operator|)
name|value
return|;
block|}
name|Set
argument_list|<
name|Method
argument_list|>
name|set
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|typeConverter
operator|.
name|tryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|Method
name|method
init|=
name|Method
operator|.
name|valueOf
argument_list|(
name|text
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
comment|// creates new instance only if no matching instance exists
name|set
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
DECL|method|createRepresentationFromBody (Exchange exchange, MediaType mediaType)
specifier|protected
name|Representation
name|createRepresentationFromBody
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|EmptyRepresentation
argument_list|()
return|;
block|}
comment|// unwrap file
if|if
condition|(
name|body
operator|instanceof
name|WrappedFile
condition|)
block|{
name|body
operator|=
operator|(
operator|(
name|WrappedFile
operator|)
name|body
operator|)
operator|.
name|getFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|instanceof
name|InputStream
condition|)
block|{
return|return
operator|new
name|InputRepresentation
argument_list|(
operator|(
name|InputStream
operator|)
name|body
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|File
condition|)
block|{
return|return
operator|new
name|FileRepresentation
argument_list|(
operator|(
name|File
operator|)
name|body
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
operator|new
name|ByteArrayRepresentation
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|body
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|StringRepresentation
argument_list|(
operator|(
name|CharSequence
operator|)
name|body
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
comment|// fallback as string
name|body
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StringRepresentation
argument_list|(
operator|(
name|CharSequence
operator|)
name|body
argument_list|,
name|mediaType
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|EmptyRepresentation
argument_list|()
return|;
block|}
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy strategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|strategy
parameter_list|)
block|{
name|headerFilterStrategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|isStreamRepresentation ()
specifier|public
name|boolean
name|isStreamRepresentation
parameter_list|()
block|{
return|return
name|streamRepresentation
return|;
block|}
DECL|method|setStreamRepresentation (boolean streamRepresentation)
specifier|public
name|void
name|setStreamRepresentation
parameter_list|(
name|boolean
name|streamRepresentation
parameter_list|)
block|{
name|this
operator|.
name|streamRepresentation
operator|=
name|streamRepresentation
expr_stmt|;
block|}
DECL|method|isAutoCloseStream ()
specifier|public
name|boolean
name|isAutoCloseStream
parameter_list|()
block|{
return|return
name|autoCloseStream
return|;
block|}
DECL|method|setAutoCloseStream (boolean autoCloseStream)
specifier|public
name|void
name|setAutoCloseStream
parameter_list|(
name|boolean
name|autoCloseStream
parameter_list|)
block|{
name|this
operator|.
name|autoCloseStream
operator|=
name|autoCloseStream
expr_stmt|;
block|}
block|}
end_class

end_unit

