begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.restlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|restlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidParameterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|util
operator|.
name|Series
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DefaultRestletHost
specifier|public
specifier|final
class|class
name|DefaultRestletHost
implements|implements
name|RestletHost
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRestletHost
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resletHostOptions
specifier|private
specifier|final
name|RestletHostOptions
name|resletHostOptions
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|method|DefaultRestletHost (RestletHostOptions restletHostOptions)
specifier|public
name|DefaultRestletHost
parameter_list|(
name|RestletHostOptions
name|restletHostOptions
parameter_list|)
block|{
name|this
operator|.
name|resletHostOptions
operator|=
name|restletHostOptions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure (RestletEndpoint endpoint, Component component)
specifier|public
name|void
name|configure
parameter_list|(
name|RestletEndpoint
name|endpoint
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|server
operator|=
name|createServer
argument_list|(
name|endpoint
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|component
operator|.
name|getServers
argument_list|()
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// Add any Restlet server parameters that were included
name|Series
argument_list|<
name|Parameter
argument_list|>
name|params
init|=
name|server
operator|.
name|getContext
argument_list|()
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|SSLContextParameters
name|scp
init|=
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getSslContextParameters
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidParameterException
argument_list|(
literal|"Need to specify the SSLContextParameters option here!"
argument_list|)
throw|;
block|}
try|try
block|{
name|setupServerWithSSLContext
argument_list|(
name|endpoint
argument_list|,
name|params
argument_list|,
name|scp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error configuring Restlet server SSL context"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getControllerDaemon
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"controllerDaemon"
argument_list|,
name|resletHostOptions
operator|.
name|getControllerDaemon
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getControllerSleepTimeMs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"controllerSleepTimeMs"
argument_list|,
name|resletHostOptions
operator|.
name|getControllerSleepTimeMs
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getInboundBufferSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"inboundBufferSize"
argument_list|,
name|resletHostOptions
operator|.
name|getInboundBufferSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getMaxConnectionsPerHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"maxConnectionsPerHost"
argument_list|,
name|resletHostOptions
operator|.
name|getMaxConnectionsPerHost
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getMaxQueued
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"maxQueued"
argument_list|,
name|resletHostOptions
operator|.
name|getMaxQueued
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getMaxThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"maxThreads"
argument_list|,
name|resletHostOptions
operator|.
name|getMaxThreads
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getMaxTotalConnections
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"maxTotalConnections"
argument_list|,
name|resletHostOptions
operator|.
name|getMaxTotalConnections
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getMinThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"minThreads"
argument_list|,
name|resletHostOptions
operator|.
name|getMinThreads
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getLowThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"lowThreads"
argument_list|,
name|resletHostOptions
operator|.
name|getLowThreads
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getOutboundBufferSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"outboundBufferSize"
argument_list|,
name|resletHostOptions
operator|.
name|getOutboundBufferSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getPersistingConnections
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"persistingConnections"
argument_list|,
name|resletHostOptions
operator|.
name|getPersistingConnections
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getPipeliningConnections
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"pipeliningConnections"
argument_list|,
name|resletHostOptions
operator|.
name|getPipeliningConnections
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getThreadMaxIdleTimeMs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"threadMaxIdleTimeMs"
argument_list|,
name|resletHostOptions
operator|.
name|getThreadMaxIdleTimeMs
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getUseForwardedForHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"useForwardedForHeader"
argument_list|,
name|resletHostOptions
operator|.
name|getUseForwardedForHeader
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resletHostOptions
operator|.
name|getReuseAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"reuseAddress"
argument_list|,
name|resletHostOptions
operator|.
name|getReuseAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting parameters: {} to server: {}"
argument_list|,
name|params
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|server
operator|.
name|getContext
argument_list|()
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|createServer (RestletEndpoint endpoint, Component component)
specifier|private
name|Server
name|createServer
parameter_list|(
name|RestletEndpoint
name|endpoint
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
comment|// Consider hostname if provided. This is useful when loopback interface is required for security reasons.
if|if
condition|(
name|endpoint
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Server
argument_list|(
name|component
operator|.
name|getContext
argument_list|()
operator|.
name|createChildContext
argument_list|()
argument_list|,
name|Protocol
operator|.
name|valueOf
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
argument_list|,
name|endpoint
operator|.
name|getHost
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Server
argument_list|(
name|component
operator|.
name|getContext
argument_list|()
operator|.
name|createChildContext
argument_list|()
argument_list|,
name|Protocol
operator|.
name|valueOf
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|setupServerWithSSLContext (RestletEndpoint endpoint, Series<Parameter> params, SSLContextParameters scp)
specifier|private
name|void
name|setupServerWithSSLContext
parameter_list|(
name|RestletEndpoint
name|endpoint
parameter_list|,
name|Series
argument_list|<
name|Parameter
argument_list|>
name|params
parameter_list|,
name|SSLContextParameters
name|scp
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
comment|// set the SSLContext parameters
name|params
operator|.
name|add
argument_list|(
literal|"sslContextFactory"
argument_list|,
literal|"org.restlet.engine.ssl.DefaultSslContextFactory"
argument_list|)
expr_stmt|;
name|SSLContext
name|context
init|=
name|scp
operator|.
name|createSSLContext
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|SSLEngine
name|engine
init|=
name|context
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"enabledProtocols"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"enabledCipherSuites"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getEnabledCipherSuites
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|scp
operator|.
name|getSecureSocketProtocol
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"protocol"
argument_list|,
name|scp
operator|.
name|getSecureSocketProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getServerParameters
argument_list|()
operator|!=
literal|null
operator|&&
name|scp
operator|.
name|getServerParameters
argument_list|()
operator|.
name|getClientAuthentication
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|b
init|=
operator|!
name|scp
operator|.
name|getServerParameters
argument_list|()
operator|.
name|getClientAuthentication
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NONE"
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"needClientAuthentication"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"keyManagerAlgorithm"
argument_list|,
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyPassword
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"keyPassword"
argument_list|,
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"keyStorePath"
argument_list|,
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"keyStorePassword"
argument_list|,
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"keyStoreType"
argument_list|,
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"trustManagerAlgorithm"
argument_list|,
name|scp
operator|.
name|getKeyManagers
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"trustStorePath"
argument_list|,
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"trustStorePassword"
argument_list|,
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"trustStoreType"
argument_list|,
name|scp
operator|.
name|getTrustManagers
argument_list|()
operator|.
name|getKeyStore
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

