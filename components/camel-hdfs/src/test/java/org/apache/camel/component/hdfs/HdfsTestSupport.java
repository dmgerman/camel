begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_class
DECL|class|HdfsTestSupport
specifier|public
specifier|abstract
class|class
name|HdfsTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|CWD
specifier|public
specifier|static
specifier|final
name|File
name|CWD
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
DECL|field|skipTests
specifier|private
specifier|static
name|Boolean
name|skipTests
decl_stmt|;
DECL|method|skipTest ()
specifier|public
name|boolean
name|skipTest
parameter_list|()
block|{
if|if
condition|(
name|Objects
operator|.
name|isNull
argument_list|(
name|skipTests
argument_list|)
condition|)
block|{
name|skipTests
operator|=
name|notConfiguredToRunTests
argument_list|()
expr_stmt|;
block|}
return|return
name|skipTests
return|;
block|}
DECL|method|notConfiguredToRunTests ()
specifier|private
name|boolean
name|notConfiguredToRunTests
parameter_list|()
block|{
return|return
name|isJavaFromIbm
argument_list|()
operator|||
name|missingLocalHadoopConfiguration
argument_list|()
operator|||
name|missingAuthenticationConfiguration
argument_list|()
return|;
block|}
DECL|method|isJavaFromIbm ()
specifier|private
specifier|static
name|boolean
name|isJavaFromIbm
parameter_list|()
block|{
comment|// Hadoop doesn't run on IBM JDK
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
return|;
block|}
DECL|method|missingLocalHadoopConfiguration ()
specifier|private
specifier|static
name|boolean
name|missingLocalHadoopConfiguration
parameter_list|()
block|{
name|boolean
name|hasLocalHadoop
decl_stmt|;
try|try
block|{
name|String
name|hadoopHome
init|=
name|Shell
operator|.
name|getHadoopHome
argument_list|()
decl_stmt|;
name|hasLocalHadoop
operator|=
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|hadoopHome
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|hasLocalHadoop
operator|=
literal|false
expr_stmt|;
block|}
return|return
operator|!
name|hasLocalHadoop
return|;
block|}
DECL|method|missingAuthenticationConfiguration ()
specifier|private
name|boolean
name|missingAuthenticationConfiguration
parameter_list|()
block|{
try|try
block|{
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot run test due security exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

