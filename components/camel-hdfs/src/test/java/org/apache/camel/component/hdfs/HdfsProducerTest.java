begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BloomMapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleLanguage
operator|.
name|simple
import|;
end_import

begin_class
DECL|class|HdfsProducerTest
specifier|public
class|class
name|HdfsProducerTest
extends|extends
name|HdfsTestSupport
block|{
DECL|field|TEMP_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEMP_DIR
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test/"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducer ()
specifier|public
name|void
name|testProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start1"
argument_list|,
literal|"PAPPO"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel1"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PAPPO"
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerClose ()
specifier|public
name|void
name|testProducerClose
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
comment|// send 10 messages, and mark to close in last message
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start1"
argument_list|,
literal|"PAPPO"
operator|+
name|i
argument_list|,
name|HdfsConstants
operator|.
name|HDFS_CLOSE
argument_list|,
name|i
operator|==
literal|9
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel1"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|Text
name|txt
init|=
operator|(
name|Text
operator|)
name|value
decl_stmt|;
name|assertEquals
argument_list|(
literal|"PAPPO"
operator|+
name|i
argument_list|,
name|txt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteBoolean ()
specifier|public
name|void
name|testWriteBoolean
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|Boolean
name|aBoolean
init|=
literal|true
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_boolean"
argument_list|,
name|aBoolean
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-boolean"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Boolean
name|rBoolean
init|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rBoolean
argument_list|,
name|aBoolean
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteByte ()
specifier|public
name|void
name|testWriteByte
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|byte
name|aByte
init|=
literal|8
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_byte"
argument_list|,
name|aByte
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-byte"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|byte
name|rByte
init|=
operator|(
operator|(
name|ByteWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rByte
argument_list|,
name|aByte
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteInt ()
specifier|public
name|void
name|testWriteInt
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|int
name|anInt
init|=
literal|1234
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_int"
argument_list|,
name|anInt
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-int"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|int
name|rInt
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rInt
argument_list|,
name|anInt
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteFloat ()
specifier|public
name|void
name|testWriteFloat
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|float
name|aFloat
init|=
literal|12.34f
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_float"
argument_list|,
name|aFloat
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-float"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|float
name|rFloat
init|=
operator|(
operator|(
name|FloatWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rFloat
argument_list|,
name|aFloat
argument_list|,
literal|0.0F
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteDouble ()
specifier|public
name|void
name|testWriteDouble
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|Double
name|aDouble
init|=
literal|12.34D
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_double"
argument_list|,
name|aDouble
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-double"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Double
name|rDouble
init|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rDouble
argument_list|,
name|aDouble
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteLong ()
specifier|public
name|void
name|testWriteLong
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|aLong
init|=
literal|1234567890
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_long"
argument_list|,
name|aLong
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-long"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|long
name|rLong
init|=
operator|(
operator|(
name|LongWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rLong
argument_list|,
name|aLong
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteText ()
specifier|public
name|void
name|testWriteText
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|txt
init|=
literal|"CIAO MONDO !"
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_text1"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text1"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|rTxt
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rTxt
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteTextWithKey ()
specifier|public
name|void
name|testWriteTextWithKey
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|txtKey
init|=
literal|"THEKEY"
decl_stmt|;
name|String
name|txtValue
init|=
literal|"CIAO MONDO !"
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:write_text2"
argument_list|,
name|txtValue
argument_list|,
literal|"KEY"
argument_list|,
name|txtKey
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text2"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|txtKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|txtValue
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapWriteTextWithKey ()
specifier|public
name|void
name|testMapWriteTextWithKey
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|txtKey
init|=
literal|"THEKEY"
decl_stmt|;
name|String
name|txtValue
init|=
literal|"CIAO MONDO !"
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:write_text3"
argument_list|,
name|txtValue
argument_list|,
literal|"KEY"
argument_list|,
name|txtKey
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text3"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text3"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|txtKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|txtValue
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArrayWriteText ()
specifier|public
name|void
name|testArrayWriteText
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|txtValue
init|=
literal|"CIAO MONDO !"
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:write_text4"
argument_list|,
name|txtValue
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text4"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ArrayFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|ArrayFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text4"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|txtValue
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBloomMapWriteText ()
specifier|public
name|void
name|testBloomMapWriteText
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|txtKey
init|=
literal|"THEKEY"
decl_stmt|;
name|String
name|txtValue
init|=
literal|"CIAO MONDO !"
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:write_text5"
argument_list|,
name|txtValue
argument_list|,
literal|"KEY"
argument_list|,
name|txtKey
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text5"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BloomMapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|BloomMapFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text5"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|txtKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|txtValue
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteTextWithDynamicFilename ()
specifier|public
name|void
name|testWriteTextWithDynamicFilename
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:write_dynamic_filename"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|URL
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-dynamic/file"
operator|+
name|i
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|bos
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|,
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteTextWithDynamicFilenameExpression ()
specifier|public
name|void
name|testWriteTextWithDynamicFilenameExpression
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:write_dynamic_filename"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|simple
argument_list|(
literal|"file-${body}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|URL
argument_list|(
literal|"file:///"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-dynamic/file-CIAO"
operator|+
name|i
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|bos
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|,
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canTest
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"target/test"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel1?fileSystemType=LOCAL&valueType=TEXT&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
comment|/* For testing writables */
name|from
argument_list|(
literal|"direct:write_boolean"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-boolean?fileSystemType=LOCAL&valueType=BOOLEAN&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_byte"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-byte?fileSystemType=LOCAL&valueType=BYTE&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_int"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-int?fileSystemType=LOCAL&valueType=INT&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_float"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-float?fileSystemType=LOCAL&valueType=FLOAT&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_long"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-long?fileSystemType=LOCAL&valueType=LONG&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_double"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-double?fileSystemType=LOCAL&valueType=DOUBLE&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_text1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text1?fileSystemType=LOCAL&valueType=TEXT&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
comment|/* For testing key and value writing */
name|from
argument_list|(
literal|"direct:write_text2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text2?fileSystemType=LOCAL&keyType=TEXT&valueType=TEXT&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_text3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text3?fileSystemType=LOCAL&keyType=TEXT&valueType=TEXT&fileType=MAP_FILE"
argument_list|)
expr_stmt|;
comment|/* For testing ArrayFile */
name|from
argument_list|(
literal|"direct:write_text4"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text4?fileSystemType=LOCAL&valueType=TEXT&fileType=ARRAY_FILE"
argument_list|)
expr_stmt|;
comment|/* For testing BloomMapFile */
name|from
argument_list|(
literal|"direct:write_text5"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-text5?fileSystemType=LOCAL&keyType=TEXT&valueType=TEXT&fileType=BLOOMMAP_FILE"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:write_dynamic_filename"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:localhost/"
operator|+
name|TEMP_DIR
operator|.
name|toUri
argument_list|()
operator|+
literal|"/test-camel-dynamic/?fileSystemType=LOCAL&valueType=TEXT"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

