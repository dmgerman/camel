begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
operator|.
name|HdfsConstants
operator|.
name|DEFAULT_OPENED_SUFFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
operator|.
name|HdfsConstants
operator|.
name|DEFAULT_READ_SUFFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
operator|.
name|HdfsTestSupport
operator|.
name|CWD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|HdfsConsumerTest
specifier|public
class|class
name|HdfsConsumerTest
block|{
DECL|field|endpoint
specifier|private
name|HdfsEndpoint
name|endpoint
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|field|endpointConfig
specifier|private
name|HdfsConfiguration
name|endpointConfig
decl_stmt|;
DECL|field|hdfsInfoFactory
specifier|private
name|HdfsInfoFactory
name|hdfsInfoFactory
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|fileSystem
specifier|private
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|underTest
specifier|private
name|HdfsConsumer
name|underTest
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|=
name|mock
argument_list|(
name|HdfsEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|processor
operator|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
expr_stmt|;
name|endpointConfig
operator|=
name|mock
argument_list|(
name|HdfsConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfsInfoFactory
operator|=
name|mock
argument_list|(
name|HdfsInfoFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|HdfsInfo
name|hdfsInfo
init|=
name|mock
argument_list|(
name|HdfsInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|fileSystem
operator|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|mock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|hdfsInfoFactory
operator|.
name|newHdfsInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|hdfsInfoFactory
operator|.
name|getEndpointConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|endpointConfig
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|hdfsInfoFactory
operator|.
name|newHdfsInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|hdfsInfo
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileSystem
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|hdfsInfo
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|hdfsInfo
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getReadSuffix
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_READ_SUFFIX
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getOpenedSuffix
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_OPENED_SUFFIX
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doStartWithoutHdfsSetup ()
specifier|public
name|void
name|doStartWithoutHdfsSetup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
name|String
name|hdfsPath
init|=
literal|"hdfs://localhost/target/test/multiple-consumers"
decl_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileSystemType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HdfsFileSystemType
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|isConnectOnStartup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|underTest
operator|=
operator|new
name|HdfsConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|endpointConfig
argument_list|,
name|hdfsInfoFactory
argument_list|,
operator|new
name|StringBuilder
argument_list|(
name|hdfsPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|underTest
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// then
name|verify
argument_list|(
name|hdfsInfoFactory
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|newHdfsInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doStartWithHdfsSetup ()
specifier|public
name|void
name|doStartWithHdfsSetup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
name|String
name|hdfsPath
init|=
literal|"hdfs://localhost/target/test/multiple-consumers"
decl_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileSystemType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HdfsFileSystemType
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|isConnectOnStartup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileSystemLabel
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"TEST_FS_LABEL"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|underTest
operator|=
operator|new
name|HdfsConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|endpointConfig
argument_list|,
name|hdfsInfoFactory
argument_list|,
operator|new
name|StringBuilder
argument_list|(
name|hdfsPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|underTest
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// then
name|verify
argument_list|(
name|hdfsInfoFactory
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|newHdfsInfo
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"TODO: https://issues.apache.org/jira/browse/CAMEL-14211"
argument_list|)
DECL|method|doPollFromExistingLocalFile ()
specifier|public
name|void
name|doPollFromExistingLocalFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
name|String
name|hdfsPath
init|=
literal|"hdfs://localhost/target/test/multiple-consumers"
decl_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileSystemType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HdfsFileSystemType
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HdfsFileType
operator|.
name|NORMAL_FILE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"spiderman"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|isConnectOnStartup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileSystemLabel
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"TEST_FS_LABEL"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getChunkSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createExchange
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|isFile
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fileStatuses
init|=
operator|new
name|FileStatus
index|[
literal|1
index|]
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|fileStatuses
index|[
literal|0
index|]
operator|=
name|fileStatus
expr_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|globStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStatuses
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
name|hdfsPath
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"spiderman"
argument_list|)
expr_stmt|;
name|String
name|normalFile
init|=
name|CWD
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/src/test/resources/hdfs/normal_file.txt"
decl_stmt|;
name|FSDataInputStream
name|fsDataInputStream
init|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|MockDataInputStream
argument_list|(
name|normalFile
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|rename
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|open
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsDataInputStream
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Exchange
argument_list|>
name|exchangeCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|underTest
operator|=
operator|new
name|HdfsConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|endpointConfig
argument_list|,
name|hdfsInfoFactory
argument_list|,
operator|new
name|StringBuilder
argument_list|(
name|hdfsPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|int
name|actual
init|=
name|underTest
operator|.
name|doPoll
argument_list|()
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|actual
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|exchangeCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|exchangeCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|exchange
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|ByteArrayOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|body
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|body
operator|.
name|toString
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget fermentum arcu, vel dignissim ipsum."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"TODO: https://issues.apache.org/jira/browse/CAMEL-14211"
argument_list|)
DECL|method|doPollFromExistingLocalFileWithStreamDownload ()
specifier|public
name|void
name|doPollFromExistingLocalFileWithStreamDownload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given
name|String
name|hdfsPath
init|=
literal|"hdfs://localhost/target/test/multiple-consumers"
decl_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileSystemType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HdfsFileSystemType
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HdfsFileType
operator|.
name|NORMAL_FILE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"spiderman"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|isConnectOnStartup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getFileSystemLabel
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"TEST_FS_LABEL"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|getChunkSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpointConfig
operator|.
name|isStreamDownload
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createExchange
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hdfsPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|isFile
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fileStatuses
init|=
operator|new
name|FileStatus
index|[
literal|1
index|]
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|fileStatuses
index|[
literal|0
index|]
operator|=
name|fileStatus
expr_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|globStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStatuses
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
name|hdfsPath
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"spiderman"
argument_list|)
expr_stmt|;
name|String
name|normalFile
init|=
name|CWD
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/src/test/resources/hdfs/normal_file.txt"
decl_stmt|;
name|FSDataInputStream
name|fsDataInputStream
init|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|MockDataInputStream
argument_list|(
name|normalFile
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|rename
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileSystem
operator|.
name|open
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsDataInputStream
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Exchange
argument_list|>
name|exchangeCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|underTest
operator|=
operator|new
name|HdfsConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|endpointConfig
argument_list|,
name|hdfsInfoFactory
argument_list|,
operator|new
name|StringBuilder
argument_list|(
name|hdfsPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// when
name|int
name|actual
init|=
name|underTest
operator|.
name|doPoll
argument_list|()
decl_stmt|;
comment|// then
name|assertThat
argument_list|(
name|actual
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|exchangeCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|exchangeCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|exchange
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|body
init|=
operator|(
name|InputStream
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|body
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

