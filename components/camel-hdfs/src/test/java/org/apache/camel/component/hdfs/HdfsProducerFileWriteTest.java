begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HdfsProducerFileWriteTest
specifier|public
class|class
name|HdfsProducerFileWriteTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testSimpleWriteFile ()
specifier|public
name|void
name|testSimpleWriteFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test/test-camel-simple-write-file"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/file-batch1"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file://target/file-batch1?sortBy=file:name"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
operator|+
literal|"?fileSystemType=LOCAL"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|nb
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|10
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file://target/file-batch1/"
argument_list|,
literal|"CIAO"
argument_list|,
literal|"CamelFileName"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|nb
operator|.
name|matchesMockWaitTime
argument_list|()
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|URL
argument_list|(
literal|"file:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|bos
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|bos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSequenceWriteFile ()
specifier|public
name|void
name|testSequenceWriteFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test/test-camel-simple-write-file1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/file-batch2"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file://target/file-batch2?sortBy=file:name"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
operator|+
literal|"?fileSystemType=LOCAL&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|nb
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|10
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file://target/file-batch2"
argument_list|,
literal|"CIAO"
argument_list|,
literal|"CamelFileName"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|nb
operator|.
name|matchesMockWaitTime
argument_list|()
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BytesWritable
name|value
init|=
operator|(
name|BytesWritable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CIAO"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSequenceKeyWriteFile ()
specifier|public
name|void
name|testSequenceKeyWriteFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test/test-camel-simple-write-file2"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/file-batch3"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file://target/file-batch3?sortBy=file:name"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"KEY"
argument_list|)
operator|.
name|simple
argument_list|(
literal|"${in.header.CamelFileName}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
operator|+
literal|"?fileSystemType=LOCAL&keyType=TEXT&fileType=SEQUENCE_FILE"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|nb
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|10
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file://target/file-batch3"
argument_list|,
literal|"CIAO"
argument_list|,
literal|"CamelFileName"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|nb
operator|.
name|matchesMockWaitTime
argument_list|()
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|(
name|Text
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BytesWritable
name|value
init|=
operator|(
name|BytesWritable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CIAO"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapKeyWriteFile ()
specifier|public
name|void
name|testMapKeyWriteFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test/test-camel-simple-write-file1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/file-batch4"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file://target/file-batch4?sortBy=file:name"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"KEY"
argument_list|)
operator|.
name|simple
argument_list|(
literal|"${in.header.CamelFileName}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
operator|+
literal|"?fileSystemType=LOCAL&keyType=TEXT&fileType=MAP_FILE"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|nb
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|10
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file://target/file-batch4"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|,
literal|"CamelFileName"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|nb
operator|.
name|matchesMockWaitTime
argument_list|()
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
literal|"target/test/test-camel-simple-write-file1"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|)
decl_stmt|;
name|BytesWritable
name|value
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|reader
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSequenceKeyWriteBigFile ()
specifier|public
name|void
name|testSequenceKeyWriteBigFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test/test-camel-simple-write-file1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/file-batch5"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file://target/file-batch5?sortBy=file:name"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
operator|+
literal|"?fileSystemType=LOCAL&fileType=SEQUENCE_FILE&splitStrategy=IDLE:100&checkIdleInterval=10"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|nb
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
operator|*
literal|1024
operator|*
literal|512
condition|;
operator|++
name|i
control|)
block|{
name|bb
operator|.
name|putChar
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file://target/file-batch5"
argument_list|,
name|bb
argument_list|,
literal|"CamelFileName"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|nb
operator|.
name|matchesMockWaitTime
argument_list|()
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|file
operator|.
name|toUri
argument_list|()
operator|+
literal|'/'
operator|+
name|HdfsConstants
operator|.
name|DEFAULT_SEGMENT_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|file1
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs1
argument_list|,
name|file1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BytesWritable
name|value
init|=
operator|(
name|BytesWritable
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|.
name|getLength
argument_list|()
argument_list|,
literal|8
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"target/test"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

