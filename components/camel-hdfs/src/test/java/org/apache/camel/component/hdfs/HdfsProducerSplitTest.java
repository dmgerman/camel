begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HdfsProducerSplitTest
specifier|public
class|class
name|HdfsProducerSplitTest
extends|extends
name|CamelTestSupport
block|{
comment|//Hadoop doesn't run on IBM JDK
DECL|field|SKIP
specifier|private
specifier|static
specifier|final
name|boolean
name|SKIP
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
decl_stmt|;
DECL|field|BASE_FILE
specifier|private
specifier|static
specifier|final
name|Path
name|BASE_FILE
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test/test-camel-simple-write-BASE_FILE"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|SKIP
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWriteFileWithMessageSplit ()
specifier|public
name|void
name|testSimpleWriteFileWithMessageSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWriteFileWithBytesSplit ()
specifier|public
name|void
name|testSimpleWriteFileWithBytesSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWriteFileWithIdleSplit ()
specifier|public
name|void
name|testSimpleWriteFileWithIdleSplit
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|SKIP
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start3"
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|URL
argument_list|(
literal|"file:///"
operator|+
name|BASE_FILE
operator|.
name|toUri
argument_list|()
operator|+
literal|"3/"
operator|+
name|HdfsConstants
operator|.
name|DEFAULT_SEGMENT_PREFIX
operator|+
name|i
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|bos
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|,
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleWriteFileWithMessageIdleSplit ()
specifier|public
name|void
name|testSimpleWriteFileWithMessageIdleSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWriteFileWithBytesIdleSplit ()
specifier|public
name|void
name|testSimpleWriteFileWithBytesIdleSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|doTest (int routeNr)
specifier|private
name|void
name|doTest
parameter_list|(
name|int
name|routeNr
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|SKIP
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
operator|+
name|routeNr
argument_list|,
literal|"CIAO"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|stopCamelContext
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|URL
argument_list|(
literal|"file:///"
operator|+
name|BASE_FILE
operator|.
name|toUri
argument_list|()
operator|+
name|routeNr
operator|+
literal|'/'
operator|+
name|HdfsConstants
operator|.
name|DEFAULT_SEGMENT_PREFIX
operator|+
name|i
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|bos
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CIAO"
operator|+
name|i
argument_list|,
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|SKIP
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"target/test"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|BASE_FILE
operator|.
name|toUri
argument_list|()
operator|+
literal|"1?fileSystemType=LOCAL&splitStrategy=MESSAGES:1"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|BASE_FILE
operator|.
name|toUri
argument_list|()
operator|+
literal|"2?fileSystemType=LOCAL&splitStrategy=BYTES:5"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|BASE_FILE
operator|.
name|toUri
argument_list|()
operator|+
literal|"3?fileSystemType=LOCAL&splitStrategy=IDLE:1000"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start4"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|BASE_FILE
operator|.
name|toUri
argument_list|()
operator|+
literal|"4?fileSystemType=LOCAL&splitStrategy=IDLE:1000,MESSAGES:1"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start5"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hdfs:///"
operator|+
name|BASE_FILE
operator|.
name|toUri
argument_list|()
operator|+
literal|"5?fileSystemType=LOCAL&splitStrategy=IDLE:1000,BYTES:5"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

