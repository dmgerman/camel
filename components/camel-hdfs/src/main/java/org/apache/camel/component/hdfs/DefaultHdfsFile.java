begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
DECL|class|DefaultHdfsFile
specifier|abstract
class|class
name|DefaultHdfsFile
implements|implements
name|HdfsFile
block|{
DECL|method|copyBytes (InputStream in, OutputStream out, int buffSize, boolean close)
specifier|protected
specifier|final
name|long
name|copyBytes
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|buffSize
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|numBytes
init|=
literal|0
decl_stmt|;
name|PrintStream
name|ps
init|=
name|out
operator|instanceof
name|PrintStream
condition|?
operator|(
name|PrintStream
operator|)
name|out
else|:
literal|null
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
try|try
block|{
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|bytesRead
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|numBytes
operator|+=
name|bytesRead
expr_stmt|;
if|if
condition|(
operator|(
name|ps
operator|!=
literal|null
operator|)
operator|&&
name|ps
operator|.
name|checkError
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to write to output stream."
argument_list|)
throw|;
block|}
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|close
condition|)
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|numBytes
return|;
block|}
DECL|method|getWritable (Object obj, TypeConverter typeConverter, Holder<Integer> size)
specifier|protected
specifier|final
name|Writable
name|getWritable
parameter_list|(
name|Object
name|obj
parameter_list|,
name|TypeConverter
name|typeConverter
parameter_list|,
name|Holder
argument_list|<
name|Integer
argument_list|>
name|size
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|objCls
init|=
name|obj
operator|==
literal|null
condition|?
literal|null
else|:
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|HdfsWritableFactories
operator|.
name|HdfsWritableFactory
name|objWritableFactory
init|=
name|WritableCache
operator|.
name|writables
operator|.
name|get
argument_list|(
name|objCls
argument_list|)
decl_stmt|;
if|if
condition|(
name|objWritableFactory
operator|==
literal|null
condition|)
block|{
name|objWritableFactory
operator|=
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsObjectWritableFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|objWritableFactory
operator|.
name|create
argument_list|(
name|obj
argument_list|,
name|typeConverter
argument_list|,
name|size
argument_list|)
return|;
block|}
DECL|method|getObject (Writable writable, Holder<Integer> size)
specifier|protected
specifier|final
name|Object
name|getObject
parameter_list|(
name|Writable
name|writable
parameter_list|,
name|Holder
argument_list|<
name|Integer
argument_list|>
name|size
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|writableClass
init|=
name|NullWritable
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|writable
operator|!=
literal|null
condition|)
block|{
name|writableClass
operator|=
name|writable
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|HdfsWritableFactories
operator|.
name|HdfsWritableFactory
name|writableObjectFactory
init|=
name|WritableCache
operator|.
name|readables
operator|.
name|get
argument_list|(
name|writableClass
argument_list|)
decl_stmt|;
return|return
name|writableObjectFactory
operator|.
name|read
argument_list|(
name|writable
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
DECL|class|WritableCache
specifier|private
specifier|static
specifier|final
class|class
name|WritableCache
block|{
DECL|field|writables
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|,
name|HdfsWritableFactories
operator|.
name|HdfsWritableFactory
argument_list|>
name|writables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|readables
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|,
name|HdfsWritableFactories
operator|.
name|HdfsWritableFactory
argument_list|>
name|readables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|WritableCache ()
specifier|private
name|WritableCache
parameter_list|()
block|{         }
static|static
block|{
name|writables
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsBooleanWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsByteWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
name|ByteBuffer
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsBytesWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsDoubleWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsFloatWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsIntWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsLongWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsTextWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|writables
operator|.
name|put
argument_list|(
literal|null
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsNullWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
static|static
block|{
name|readables
operator|.
name|put
argument_list|(
name|BooleanWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsBooleanWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|ByteWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsByteWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsBytesWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|DoubleWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsDoubleWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|FloatWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsFloatWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsIntWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsLongWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|Text
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsTextWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
name|readables
operator|.
name|put
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|,
operator|new
name|HdfsWritableFactories
operator|.
name|HdfsNullWritableFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

