begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.hdfs.kerberos
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
operator|.
name|kerberos
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ConfiguredFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
import|;
end_import

begin_class
DECL|class|KerberosConfiguration
specifier|public
class|class
name|KerberosConfiguration
extends|extends
name|Configuration
block|{
DECL|field|HFDS_NAMED_SERVICE
specifier|private
specifier|static
specifier|final
name|String
name|HFDS_NAMED_SERVICE
init|=
literal|"hfdsNamedService"
decl_stmt|;
DECL|field|AUTHENTICATION_MODE
specifier|private
specifier|static
specifier|final
name|String
name|AUTHENTICATION_MODE
init|=
literal|"hadoop.security.authentication"
decl_stmt|;
DECL|field|HFDS_FS
specifier|private
specifier|static
specifier|final
name|String
name|HFDS_FS
init|=
literal|"fs.defaultFS"
decl_stmt|;
comment|/**      * Add all the kerberos specific settings needed for this authentication mode      * Generates the correct HA configuration (normally read from xml) based on the namedNodes:      * All named nodes have to be qualified: configuration.set("dfs.ha.namenodes.hfdsNamedService","namenode1,namenode2");      * For each named node the following entries is added      *<p>      * configuration.set("dfs.namenode.rpc-address.hfdsNamedService.namenode1", "namenode1:1234");      *<p>      * Finally the proxy provider has to be specified:      *<p>      * configuration.set("dfs.client.failover.proxy.provider.hfdsNamedService", "org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider");      *<p>      *      * @param namedNodes                 - All named nodes from the hadoop cluster      * @param kerberosConfigFileLocation - The location of the kerberos config file (on the server)      * @param replicationFactor          - dfs replication factor      */
DECL|method|KerberosConfiguration (List<String> namedNodes, String kerberosConfigFileLocation, int replicationFactor)
specifier|public
name|KerberosConfiguration
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|namedNodes
parameter_list|,
name|String
name|kerberosConfigFileLocation
parameter_list|,
name|int
name|replicationFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|HdfsKerberosConfigurationFactory
operator|.
name|setKerberosConfigFile
argument_list|(
name|kerberosConfigFileLocation
argument_list|)
expr_stmt|;
name|setupHdfsConfiguration
argument_list|(
name|namedNodes
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
block|}
DECL|method|setupHdfsConfiguration (List<String> namedNodes, int replicationFactor)
specifier|private
name|void
name|setupHdfsConfiguration
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|namedNodes
parameter_list|,
name|int
name|replicationFactor
parameter_list|)
block|{
name|this
operator|.
name|set
argument_list|(
name|AUTHENTICATION_MODE
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|replicationFactor
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|HFDS_NAMED_SERVICE
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
name|HFDS_NAMED_SERVICE
argument_list|)
argument_list|,
name|nodeToString
argument_list|(
name|namedNodes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|nodeToString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|namedNodes
operator|.
name|forEach
argument_list|(
name|nodeName
lambda|->
name|this
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|HFDS_NAMED_SERVICE
argument_list|,
name|nodeToString
argument_list|(
name|nodeName
argument_list|)
argument_list|)
argument_list|,
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|DFS_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|"."
operator|+
name|HFDS_NAMED_SERVICE
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
argument_list|(
name|HFDS_FS
argument_list|,
literal|"hdfs://"
operator|+
name|HFDS_NAMED_SERVICE
argument_list|)
expr_stmt|;
block|}
comment|/**      * In order to connect to a hadoop cluster using Kerberos you need to add your own filesystem to the cache of the FileSystem component.      * This is done by setting the uri that you use in your camel route as the URI that is used to setup the connection.      * The URI is used as key when adding it to the cache (default functionality of the static FileSystem.get(URI, Configuration) method).      *      * @param username           - Principal used to connect to the cluster      * @param keyTabFileLocation - KeyTab file location (must be on the server)      * @throws IOException - In case of error      */
DECL|method|loginWithKeytab (String username, String keyTabFileLocation)
specifier|public
name|void
name|loginWithKeytab
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|keyTabFileLocation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|keyTabFileLocation
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|format
argument_list|(
literal|"KeyTab file [%s] could not be found."
argument_list|,
name|keyTabFileLocation
argument_list|)
argument_list|)
throw|;
block|}
comment|// we need to log in otherwise you cannot connect to the filesystem later on
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|username
argument_list|,
name|keyTabFileLocation
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeToString (String nodeName)
specifier|private
name|String
name|nodeToString
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|nodeName
operator|.
name|replaceAll
argument_list|(
literal|":[0-9]*"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

