begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_class
DECL|class|HdfsOutputStream
specifier|public
class|class
name|HdfsOutputStream
implements|implements
name|Closeable
block|{
DECL|field|fileType
specifier|private
name|HdfsFileType
name|fileType
decl_stmt|;
DECL|field|info
specifier|private
name|HdfsInfo
name|info
decl_stmt|;
DECL|field|actualPath
specifier|private
name|String
name|actualPath
decl_stmt|;
DECL|field|suffixedPath
specifier|private
name|String
name|suffixedPath
decl_stmt|;
DECL|field|out
specifier|private
name|Closeable
name|out
decl_stmt|;
DECL|field|opened
specifier|private
specifier|volatile
name|boolean
name|opened
decl_stmt|;
DECL|field|numOfWrittenBytes
specifier|private
specifier|final
name|AtomicLong
name|numOfWrittenBytes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
DECL|field|numOfWrittenMessages
specifier|private
specifier|final
name|AtomicLong
name|numOfWrittenMessages
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
DECL|field|lastAccess
specifier|private
specifier|final
name|AtomicLong
name|lastAccess
init|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|busy
specifier|private
specifier|final
name|AtomicBoolean
name|busy
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|HdfsOutputStream ()
specifier|protected
name|HdfsOutputStream
parameter_list|()
block|{     }
DECL|method|createOutputStream (String hdfsPath, HdfsInfoFactory hdfsInfoFactory)
specifier|public
specifier|static
name|HdfsOutputStream
name|createOutputStream
parameter_list|(
name|String
name|hdfsPath
parameter_list|,
name|HdfsInfoFactory
name|hdfsInfoFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|endpointConfig
init|=
name|hdfsInfoFactory
operator|.
name|getEndpointConfig
argument_list|()
decl_stmt|;
name|HdfsOutputStream
name|oStream
init|=
operator|new
name|HdfsOutputStream
argument_list|()
decl_stmt|;
name|oStream
operator|.
name|fileType
operator|=
name|endpointConfig
operator|.
name|getFileType
argument_list|()
expr_stmt|;
name|oStream
operator|.
name|actualPath
operator|=
name|hdfsPath
expr_stmt|;
name|oStream
operator|.
name|info
operator|=
name|hdfsInfoFactory
operator|.
name|newHdfsInfoWithoutAuth
argument_list|(
name|oStream
operator|.
name|actualPath
argument_list|)
expr_stmt|;
name|oStream
operator|.
name|suffixedPath
operator|=
name|oStream
operator|.
name|actualPath
operator|+
literal|'.'
operator|+
name|endpointConfig
operator|.
name|getOpenedSuffix
argument_list|()
expr_stmt|;
name|Path
name|actualPath
init|=
operator|new
name|Path
argument_list|(
name|oStream
operator|.
name|actualPath
argument_list|)
decl_stmt|;
name|boolean
name|actualPathExists
init|=
name|oStream
operator|.
name|info
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|actualPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointConfig
operator|.
name|isWantAppend
argument_list|()
operator|||
name|endpointConfig
operator|.
name|isAppend
argument_list|()
condition|)
block|{
if|if
condition|(
name|actualPathExists
condition|)
block|{
name|endpointConfig
operator|.
name|setAppend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|oStream
operator|.
name|info
operator|=
name|hdfsInfoFactory
operator|.
name|newHdfsInfoWithoutAuth
argument_list|(
name|oStream
operator|.
name|suffixedPath
argument_list|)
expr_stmt|;
name|oStream
operator|.
name|info
operator|.
name|getFileSystem
argument_list|()
operator|.
name|rename
argument_list|(
name|actualPath
argument_list|,
operator|new
name|Path
argument_list|(
name|oStream
operator|.
name|suffixedPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointConfig
operator|.
name|setAppend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|actualPathExists
operator|&&
operator|!
name|oStream
operator|.
name|info
operator|.
name|getFileSystem
argument_list|()
operator|.
name|isDirectory
argument_list|(
name|actualPath
argument_list|)
condition|)
block|{
comment|// only check if not directory
if|if
condition|(
name|endpointConfig
operator|.
name|isOverwrite
argument_list|()
condition|)
block|{
name|oStream
operator|.
name|info
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|actualPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"File ["
operator|+
name|actualPath
operator|+
literal|"] already exists"
argument_list|)
throw|;
block|}
block|}
name|oStream
operator|.
name|out
operator|=
name|oStream
operator|.
name|fileType
operator|.
name|createOutputStream
argument_list|(
name|oStream
operator|.
name|suffixedPath
argument_list|,
name|hdfsInfoFactory
argument_list|)
expr_stmt|;
name|oStream
operator|.
name|opened
operator|=
literal|true
expr_stmt|;
return|return
name|oStream
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|opened
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|info
operator|.
name|getFileSystem
argument_list|()
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|suffixedPath
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|actualPath
argument_list|)
argument_list|)
expr_stmt|;
name|opened
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|append (Object key, Object value, Exchange exchange)
specifier|public
name|void
name|append
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
name|busy
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|nb
init|=
name|fileType
operator|.
name|append
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|numOfWrittenBytes
operator|.
name|addAndGet
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|numOfWrittenMessages
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|lastAccess
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|busy
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNumOfWrittenBytes ()
specifier|public
name|long
name|getNumOfWrittenBytes
parameter_list|()
block|{
return|return
name|numOfWrittenBytes
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getNumOfWrittenMessages ()
specifier|public
name|long
name|getNumOfWrittenMessages
parameter_list|()
block|{
return|return
name|numOfWrittenMessages
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getLastAccess ()
specifier|public
name|long
name|getLastAccess
parameter_list|()
block|{
return|return
name|lastAccess
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getActualPath ()
specifier|public
name|String
name|getActualPath
parameter_list|()
block|{
return|return
name|actualPath
return|;
block|}
DECL|method|isBusy ()
specifier|public
name|AtomicBoolean
name|isBusy
parameter_list|()
block|{
return|return
name|busy
return|;
block|}
DECL|method|getOut ()
specifier|public
name|Closeable
name|getOut
parameter_list|()
block|{
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

