begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rest.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rest
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|RestSwaggerEndpointUriParsingTest
specifier|public
class|class
name|RestSwaggerEndpointUriParsingTest
block|{
annotation|@
name|Parameter
argument_list|(
literal|3
argument_list|)
DECL|field|operationId
specifier|public
name|String
name|operationId
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|1
argument_list|)
DECL|field|remaining
specifier|public
name|String
name|remaining
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|2
argument_list|)
DECL|field|specificationUri
specifier|public
name|String
name|specificationUri
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|0
argument_list|)
DECL|field|uri
specifier|public
name|String
name|uri
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldParseEndpointUri ()
specifier|public
name|void
name|shouldParseEndpointUri
parameter_list|()
block|{
specifier|final
name|RestSwaggerComponent
name|component
init|=
operator|new
name|RestSwaggerComponent
argument_list|()
decl_stmt|;
specifier|final
name|RestSwaggerEndpoint
name|endpoint
init|=
operator|new
name|RestSwaggerEndpoint
argument_list|(
name|specificationUri
argument_list|,
name|remaining
argument_list|,
name|component
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|endpoint
operator|.
name|getSpecificationUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|specificationUri
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|endpoint
operator|.
name|getOperationId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|operationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"uri={0}, remaining={1}"
argument_list|)
DECL|method|parameters ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"rest-swagger:operation"
argument_list|,
literal|"operation"
argument_list|,
literal|"swagger.json"
argument_list|,
literal|"operation"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"rest-swagger:my-api.json#operation"
argument_list|,
literal|"my-api.json#operation"
argument_list|,
literal|"my-api.json"
argument_list|,
literal|"operation"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"rest-swagger:http://api.example.com/swagger.json#operation"
argument_list|,
literal|"http://api.example.com/swagger.json#operation"
argument_list|,
literal|"http://api.example.com/swagger.json"
argument_list|,
literal|"operation"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|params (final String uri, final String remaining, final String specificationUri, final String operationId)
specifier|static
name|Object
index|[]
name|params
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
specifier|final
name|String
name|specificationUri
parameter_list|,
specifier|final
name|String
name|operationId
parameter_list|)
block|{
return|return
operator|new
name|Object
index|[]
block|{
name|uri
block|,
name|remaining
block|,
name|specificationUri
block|,
name|operationId
block|}
return|;
block|}
block|}
end_class

end_unit

