begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rest.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rest
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|notEmpty
import|;
end_import

begin_class
DECL|class|RestSwaggerHelper
specifier|final
class|class
name|RestSwaggerHelper
block|{
DECL|field|HOST_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|HOST_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"https?://[^:]+(:\\d+)?"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
DECL|method|RestSwaggerHelper ()
specifier|private
name|RestSwaggerHelper
parameter_list|()
block|{
comment|// utility class
block|}
DECL|method|isMediaRange (final String given, final String name)
specifier|public
specifier|static
name|String
name|isMediaRange
parameter_list|(
specifier|final
name|String
name|given
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|notEmpty
argument_list|(
name|given
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|isHostParam (final String given)
specifier|static
name|String
name|isHostParam
parameter_list|(
specifier|final
name|String
name|given
parameter_list|)
block|{
specifier|final
name|String
name|hostUri
init|=
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|given
argument_list|,
literal|"host"
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|HOST_PATTERN
operator|.
name|matcher
argument_list|(
name|given
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"host must be an absolute URI (e.g. http://api.example.com), given: `"
operator|+
name|hostUri
operator|+
literal|"`"
argument_list|)
throw|;
block|}
return|return
name|hostUri
return|;
block|}
block|}
end_class

end_unit

