begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rest.swagger
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rest
operator|.
name|swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|ofNullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Scheme
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Swagger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|parameters
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|parser
operator|.
name|SwaggerParser
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|util
operator|.
name|Json
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rest
operator|.
name|swagger
operator|.
name|RestSwaggerHelper
operator|.
name|isHostParam
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rest
operator|.
name|swagger
operator|.
name|RestSwaggerHelper
operator|.
name|isMediaRange
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|after
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|notEmpty
import|;
end_import

begin_comment
comment|/**  * An awesome REST endpoint backed by Swagger specifications.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.19.0"
argument_list|,
name|scheme
operator|=
literal|"rest-swagger"
argument_list|,
name|title
operator|=
literal|"REST Swagger"
argument_list|,
name|syntax
operator|=
literal|"rest-swagger:specificationUri#operationId"
argument_list|,
name|label
operator|=
literal|"rest,swagger,http"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|)
DECL|class|RestSwaggerEndpoint
specifier|public
specifier|final
class|class
name|RestSwaggerEndpoint
extends|extends
name|DefaultEndpoint
block|{
comment|/**      * Remaining parameters specified in the Endpoint URI.      */
DECL|field|parameters
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
comment|/** The name of the Camel component, be it `rest-swagger` or `petstore` */
DECL|field|assignedComponentName
specifier|private
name|String
name|assignedComponentName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"API basePath, for example \"`/v2`\". Default is unset, if set overrides the value present in"
operator|+
literal|" Swagger specification and in the component configuration."
argument_list|,
name|defaultValue
operator|=
literal|""
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"false"
argument_list|)
DECL|field|basePath
specifier|private
name|String
name|basePath
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Name of the Camel component that will perform the requests. The compnent must be present"
operator|+
literal|" in Camel registry and it must implement RestProducerFactory service provider interface. If not set"
operator|+
literal|" CLASSPATH is searched for single component that implements RestProducerFactory SPI. Overrides"
operator|+
literal|" component configuration."
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"false"
argument_list|)
DECL|field|componentName
specifier|private
name|String
name|componentName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"What payload type this component capable of consuming. Could be one type, like `application/json`"
operator|+
literal|" or multiple types as `application/json, application/xml; q=0.5` according to the RFC7231. This equates"
operator|+
literal|" to the value of `Accept` HTTP header. If set overrides any value found in the Swagger specification and."
operator|+
literal|" in the component configuration"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|consumes
specifier|private
name|String
name|consumes
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Scheme hostname and port to direct the HTTP requests to in the form of"
operator|+
literal|" `http[s]://hostname[:port]`. Can be configured at the endpoint, component or in the correspoding"
operator|+
literal|" REST configuration in the Camel Context. If you give this component a name (e.g. `petstore`) that"
operator|+
literal|" REST configuration is consulted first, `rest-swagger` next, and global configuration last. If set"
operator|+
literal|" overrides any value found in the Swagger specification, RestConfiguration. Overrides all other "
operator|+
literal|" configuration."
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"ID of the operation from the Swagger specification."
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|operationId
specifier|private
name|String
name|operationId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"What payload type this component is producing. For example `application/json`"
operator|+
literal|" according to the RFC7231. This equates to the value of `Content-Type` HTTP header. If set overrides"
operator|+
literal|" any value present in the Swagger specification. Overrides all other configuration."
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|produces
specifier|private
name|String
name|produces
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Path to the Swagger specification file. The scheme, host base path are taken from this"
operator|+
literal|" specification, but these can be overriden with properties on the component or endpoint level. If not"
operator|+
literal|" given the component tries to load `swagger.json` resource. Note that the `host` defined on the"
operator|+
literal|" component and endpoint of this Component should contain the scheme, hostname and optionally the"
operator|+
literal|" port in the URI syntax (i.e. `https://api.example.com:8080`). Overrides component configuration."
argument_list|,
name|defaultValue
operator|=
name|RestSwaggerComponent
operator|.
name|DEFAULT_SPECIFICATION_URI_STR
argument_list|,
name|defaultValueNote
operator|=
literal|"By default loads `swagger.json` file"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|specificationUri
specifier|private
name|URI
name|specificationUri
init|=
name|RestSwaggerComponent
operator|.
name|DEFAULT_SPECIFICATION_URI
decl_stmt|;
DECL|method|RestSwaggerEndpoint ()
specifier|public
name|RestSwaggerEndpoint
parameter_list|()
block|{
comment|// help tooling instantiate endpoint
block|}
DECL|method|RestSwaggerEndpoint (final String uri, final String remaining, final RestSwaggerComponent component, final Map<String, Object> parameters)
specifier|public
name|RestSwaggerEndpoint
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|remaining
parameter_list|,
specifier|final
name|RestSwaggerComponent
name|component
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|notEmpty
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|)
argument_list|,
name|notNull
argument_list|(
name|component
argument_list|,
literal|"component"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|assignedComponentName
operator|=
name|before
argument_list|(
name|uri
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|componentSpecificationUri
init|=
name|component
operator|.
name|getSpecificationUri
argument_list|()
decl_stmt|;
name|specificationUri
operator|=
name|before
argument_list|(
name|remaining
argument_list|,
literal|"#"
argument_list|,
name|StringHelper
operator|::
name|trimToNull
argument_list|)
operator|.
name|map
argument_list|(
name|URI
operator|::
name|create
argument_list|)
operator|.
name|orElse
argument_list|(
name|ofNullable
argument_list|(
name|componentSpecificationUri
argument_list|)
operator|.
name|orElse
argument_list|(
name|RestSwaggerComponent
operator|.
name|DEFAULT_SPECIFICATION_URI
argument_list|)
argument_list|)
expr_stmt|;
name|operationId
operator|=
name|ofNullable
argument_list|(
name|after
argument_list|(
name|remaining
argument_list|,
literal|"#"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (final Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
specifier|final
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Consumer not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|Swagger
name|swagger
init|=
name|loadSpecificationFrom
argument_list|(
name|camelContext
argument_list|,
name|specificationUri
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|paths
init|=
name|swagger
operator|.
name|getPaths
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|pathEntry
range|:
name|paths
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Path
name|path
init|=
name|pathEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Entry
argument_list|<
name|HttpMethod
argument_list|,
name|Operation
argument_list|>
argument_list|>
name|maybeOperationEntry
init|=
name|path
operator|.
name|getOperationMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|operationEntry
lambda|->
name|operationId
operator|.
name|equals
argument_list|(
name|operationEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getOperationId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|maybeOperationEntry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|HttpMethod
argument_list|,
name|Operation
argument_list|>
name|operationEntry
init|=
name|maybeOperationEntry
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Operation
name|operation
init|=
name|operationEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Parameter
argument_list|>
name|pathParameters
init|=
name|operation
operator|.
name|getParameters
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
literal|"path"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getIn
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Parameter
operator|::
name|getName
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uriTemplate
init|=
name|resolveUri
argument_list|(
name|pathEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|pathParameters
argument_list|)
decl_stmt|;
specifier|final
name|HttpMethod
name|httpMethod
init|=
name|operationEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|method
init|=
name|httpMethod
operator|.
name|name
argument_list|()
decl_stmt|;
return|return
name|createProducerFor
argument_list|(
name|swagger
argument_list|,
name|operation
argument_list|,
name|method
argument_list|,
name|uriTemplate
argument_list|)
return|;
block|}
block|}
specifier|final
name|String
name|supportedOperations
init|=
name|paths
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getOperations
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Operation
operator|::
name|getOperationId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The specified operation with ID: `"
operator|+
name|operationId
operator|+
literal|"` cannot be found in the Swagger specification loaded from `"
operator|+
name|specificationUri
operator|+
literal|"`. Operations defined in the specification are: "
operator|+
name|supportedOperations
argument_list|)
throw|;
block|}
DECL|method|getBasePath ()
specifier|public
name|String
name|getBasePath
parameter_list|()
block|{
return|return
name|basePath
return|;
block|}
DECL|method|getComponentName ()
specifier|public
name|String
name|getComponentName
parameter_list|()
block|{
return|return
name|componentName
return|;
block|}
DECL|method|getConsumes ()
specifier|public
name|String
name|getConsumes
parameter_list|()
block|{
return|return
name|consumes
return|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|getOperationId ()
specifier|public
name|String
name|getOperationId
parameter_list|()
block|{
return|return
name|operationId
return|;
block|}
DECL|method|getProduces ()
specifier|public
name|String
name|getProduces
parameter_list|()
block|{
return|return
name|produces
return|;
block|}
DECL|method|getSpecificationUri ()
specifier|public
name|URI
name|getSpecificationUri
parameter_list|()
block|{
return|return
name|specificationUri
return|;
block|}
annotation|@
name|Override
DECL|method|isLenientProperties ()
specifier|public
name|boolean
name|isLenientProperties
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|setBasePath (final String basePath)
specifier|public
name|void
name|setBasePath
parameter_list|(
specifier|final
name|String
name|basePath
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|notEmpty
argument_list|(
name|basePath
argument_list|,
literal|"basePath"
argument_list|)
expr_stmt|;
block|}
DECL|method|setComponentName (final String componentName)
specifier|public
name|void
name|setComponentName
parameter_list|(
specifier|final
name|String
name|componentName
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|notEmpty
argument_list|(
name|componentName
argument_list|,
literal|"componentName"
argument_list|)
expr_stmt|;
block|}
DECL|method|setConsumes (final String consumes)
specifier|public
name|void
name|setConsumes
parameter_list|(
specifier|final
name|String
name|consumes
parameter_list|)
block|{
name|this
operator|.
name|consumes
operator|=
name|isMediaRange
argument_list|(
name|consumes
argument_list|,
literal|"consumes"
argument_list|)
expr_stmt|;
block|}
DECL|method|setHost (final String host)
specifier|public
name|void
name|setHost
parameter_list|(
specifier|final
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|isHostParam
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
DECL|method|setOperationId (final String operationId)
specifier|public
name|void
name|setOperationId
parameter_list|(
specifier|final
name|String
name|operationId
parameter_list|)
block|{
name|this
operator|.
name|operationId
operator|=
name|notEmpty
argument_list|(
name|operationId
argument_list|,
literal|"operationId"
argument_list|)
expr_stmt|;
block|}
DECL|method|setProduces (final String produces)
specifier|public
name|void
name|setProduces
parameter_list|(
specifier|final
name|String
name|produces
parameter_list|)
block|{
name|this
operator|.
name|produces
operator|=
name|isMediaRange
argument_list|(
name|produces
argument_list|,
literal|"produces"
argument_list|)
expr_stmt|;
block|}
DECL|method|setSpecificationUri (final URI specificationUri)
specifier|public
name|void
name|setSpecificationUri
parameter_list|(
specifier|final
name|URI
name|specificationUri
parameter_list|)
block|{
name|this
operator|.
name|specificationUri
operator|=
name|notNull
argument_list|(
name|specificationUri
argument_list|,
literal|"specificationUri"
argument_list|)
expr_stmt|;
block|}
DECL|method|component ()
name|RestSwaggerComponent
name|component
parameter_list|()
block|{
return|return
operator|(
name|RestSwaggerComponent
operator|)
name|getComponent
argument_list|()
return|;
block|}
DECL|method|createProducerFor (final Swagger swagger, final Operation operation, final String method, final String uriTemplate)
name|Producer
name|createProducerFor
parameter_list|(
specifier|final
name|Swagger
name|swagger
parameter_list|,
specifier|final
name|Operation
name|operation
parameter_list|,
specifier|final
name|String
name|method
parameter_list|,
specifier|final
name|String
name|uriTemplate
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|basePath
init|=
name|determineBasePath
argument_list|(
name|swagger
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|componentEndpointUri
init|=
operator|new
name|StringBuilder
argument_list|(
literal|200
argument_list|)
operator|.
name|append
argument_list|(
literal|"rest:"
argument_list|)
operator|.
name|append
argument_list|(
name|method
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|basePath
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|uriTemplate
argument_list|)
decl_stmt|;
specifier|final
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|Endpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|componentEndpointUri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|determineEndpointParameters
argument_list|(
name|swagger
argument_list|,
name|operation
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|endpoint
operator|.
name|createProducer
argument_list|()
return|;
block|}
DECL|method|determineBasePath (final Swagger swagger)
name|String
name|determineBasePath
parameter_list|(
specifier|final
name|Swagger
name|swagger
parameter_list|)
block|{
if|if
condition|(
name|isNotEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
return|return
name|basePath
return|;
block|}
specifier|final
name|String
name|componentBasePath
init|=
name|component
argument_list|()
operator|.
name|getBasePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|componentBasePath
argument_list|)
condition|)
block|{
return|return
name|componentBasePath
return|;
block|}
specifier|final
name|String
name|specificationBasePath
init|=
name|swagger
operator|.
name|getBasePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|specificationBasePath
argument_list|)
condition|)
block|{
return|return
name|specificationBasePath
return|;
block|}
specifier|final
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|RestConfiguration
name|specificConfiguration
init|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
name|assignedComponentName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|specificConfiguration
operator|!=
literal|null
operator|&&
name|isNotEmpty
argument_list|(
name|specificConfiguration
operator|.
name|getContextPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|specificConfiguration
operator|.
name|getContextPath
argument_list|()
return|;
block|}
specifier|final
name|RestConfiguration
name|restConfiguration
init|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
literal|"rest-swagger"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|restConfigurationBasePath
init|=
name|restConfiguration
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|restConfigurationBasePath
argument_list|)
condition|)
block|{
return|return
name|restConfigurationBasePath
return|;
block|}
return|return
name|RestSwaggerComponent
operator|.
name|DEFAULT_BASE_PATH
return|;
block|}
DECL|method|determineComponentName ()
name|String
name|determineComponentName
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|componentName
argument_list|)
operator|.
name|orElse
argument_list|(
name|component
argument_list|()
operator|.
name|getComponentName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|determineEndpointParameters (final Swagger swagger, final Operation operation)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|determineEndpointParameters
parameter_list|(
specifier|final
name|Swagger
name|swagger
parameter_list|,
specifier|final
name|Operation
name|operation
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|componentName
init|=
name|determineComponentName
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentName
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
literal|"componentName"
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|host
init|=
name|determineHost
argument_list|(
name|swagger
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
comment|// what we consume is what the API defined by Swagger specification
comment|// produces
specifier|final
name|String
name|determinedConsumes
init|=
name|determineOption
argument_list|(
name|swagger
operator|.
name|getProduces
argument_list|()
argument_list|,
name|operation
operator|.
name|getProduces
argument_list|()
argument_list|,
name|component
argument_list|()
operator|.
name|getConsumes
argument_list|()
argument_list|,
name|consumes
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|determinedConsumes
argument_list|)
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
literal|"consumes"
argument_list|,
name|determinedConsumes
argument_list|)
expr_stmt|;
block|}
comment|// what we produce is what the API defined by Swagger specification
comment|// consumes
specifier|final
name|String
name|determinedProducers
init|=
name|determineOption
argument_list|(
name|swagger
operator|.
name|getConsumes
argument_list|()
argument_list|,
name|operation
operator|.
name|getConsumes
argument_list|()
argument_list|,
name|component
argument_list|()
operator|.
name|getProduces
argument_list|()
argument_list|,
name|produces
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|determinedProducers
argument_list|)
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
literal|"produces"
argument_list|,
name|determinedProducers
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|queryParameters
init|=
name|operation
operator|.
name|getParameters
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
literal|"query"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getIn
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|queryParameter
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"&"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|queryParameters
argument_list|)
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
literal|"queryParameters"
argument_list|,
name|queryParameters
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
DECL|method|determineHost (final Swagger swagger)
name|String
name|determineHost
parameter_list|(
specifier|final
name|Swagger
name|swagger
parameter_list|)
block|{
if|if
condition|(
name|isNotEmpty
argument_list|(
name|host
argument_list|)
condition|)
block|{
return|return
name|host
return|;
block|}
specifier|final
name|String
name|componentHost
init|=
name|component
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|componentHost
argument_list|)
condition|)
block|{
return|return
name|componentHost
return|;
block|}
specifier|final
name|String
name|swaggerScheme
init|=
name|pickBestScheme
argument_list|(
name|specificationUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|swagger
operator|.
name|getSchemes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|swaggerHost
init|=
name|swagger
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|swaggerScheme
argument_list|)
operator|&&
name|isNotEmpty
argument_list|(
name|swaggerHost
argument_list|)
condition|)
block|{
return|return
name|swaggerScheme
operator|+
literal|"://"
operator|+
name|swaggerHost
return|;
block|}
specifier|final
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|RestConfiguration
name|specificRestConfiguration
init|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
name|assignedComponentName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|specificConfigurationHost
init|=
name|hostFrom
argument_list|(
name|specificRestConfiguration
argument_list|)
decl_stmt|;
if|if
condition|(
name|specificConfigurationHost
operator|!=
literal|null
condition|)
block|{
return|return
name|specificConfigurationHost
return|;
block|}
specifier|final
name|RestConfiguration
name|componentRestConfiguration
init|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
literal|"rest-swagger"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|componentConfigurationHost
init|=
name|hostFrom
argument_list|(
name|componentRestConfiguration
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentConfigurationHost
operator|!=
literal|null
condition|)
block|{
return|return
name|componentConfigurationHost
return|;
block|}
specifier|final
name|RestConfiguration
name|globalRestConfiguration
init|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|globalConfigurationHost
init|=
name|hostFrom
argument_list|(
name|globalRestConfiguration
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalConfigurationHost
operator|!=
literal|null
condition|)
block|{
return|return
name|globalConfigurationHost
return|;
block|}
specifier|final
name|String
name|specificationScheme
init|=
name|specificationUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|specificationUri
operator|.
name|isAbsolute
argument_list|()
operator|&&
name|specificationScheme
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|specificationUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|specificationUri
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|specificationUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|specificationUri
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create a new URI from: "
operator|+
name|specificationUri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|final
name|boolean
name|areTheSame
init|=
literal|"rest-swagger"
operator|.
name|equals
argument_list|(
name|assignedComponentName
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to determine destionation host for requests. The Swagger specification"
operator|+
literal|" does not specify `scheme` and `host` parameters, the specification URI is not absolute with `http` or"
operator|+
literal|" `https` scheme, and no RestConfigurations configured with `scheme`, `host` and `port` were found for `"
operator|+
operator|(
name|areTheSame
condition|?
literal|"rest-swagger` component"
else|:
name|assignedComponentName
operator|+
literal|"` or `rest-swagger` components"
operator|)
operator|+
literal|" and there is no global RestConfiguration with those properties"
argument_list|)
throw|;
block|}
DECL|method|literalPathParameterValue (final Parameter parameter)
name|String
name|literalPathParameterValue
parameter_list|(
specifier|final
name|Parameter
name|parameter
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|valueStr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|encoded
init|=
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|valueStr
argument_list|)
decl_stmt|;
return|return
name|encoded
return|;
block|}
DECL|method|literalQueryParameterValue (final Parameter parameter)
name|String
name|literalQueryParameterValue
parameter_list|(
specifier|final
name|Parameter
name|parameter
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|valueStr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|encoded
init|=
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|valueStr
argument_list|)
decl_stmt|;
return|return
name|name
operator|+
literal|"="
operator|+
name|encoded
return|;
block|}
DECL|method|queryParameter (final Parameter parameter)
name|String
name|queryParameter
parameter_list|(
specifier|final
name|Parameter
name|parameter
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|literalQueryParameterValue
argument_list|(
name|parameter
argument_list|)
return|;
block|}
return|return
name|queryParameterExpression
argument_list|(
name|parameter
argument_list|)
return|;
block|}
DECL|method|resolveUri (final String uriTemplate, final Map<String, Parameter> pathParameters)
name|String
name|resolveUri
parameter_list|(
specifier|final
name|String
name|uriTemplate
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Parameter
argument_list|>
name|pathParameters
parameter_list|)
block|{
if|if
condition|(
name|pathParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|uriTemplate
return|;
block|}
name|int
name|start
init|=
name|uriTemplate
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|uriTemplate
return|;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|final
name|StringBuilder
name|resolved
init|=
operator|new
name|StringBuilder
argument_list|(
name|uriTemplate
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
while|while
condition|(
name|start
operator|!=
operator|-
literal|1
condition|)
block|{
name|resolved
operator|.
name|append
argument_list|(
name|uriTemplate
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|start
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|end
init|=
name|uriTemplate
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|,
name|start
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|uriTemplate
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|Parameter
name|parameter
init|=
name|pathParameters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|literalPathParameterValue
argument_list|(
name|parameter
argument_list|)
decl_stmt|;
name|resolved
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolved
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|end
expr_stmt|;
name|start
operator|=
name|uriTemplate
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
name|resolved
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|determineOption (final List<String> specificationLevel, final List<String> operationLevel, final String componentLevel, final String endpointLevel)
specifier|static
name|String
name|determineOption
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|specificationLevel
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|operationLevel
parameter_list|,
specifier|final
name|String
name|componentLevel
parameter_list|,
specifier|final
name|String
name|endpointLevel
parameter_list|)
block|{
if|if
condition|(
name|isNotEmpty
argument_list|(
name|endpointLevel
argument_list|)
condition|)
block|{
return|return
name|endpointLevel
return|;
block|}
if|if
condition|(
name|isNotEmpty
argument_list|(
name|componentLevel
argument_list|)
condition|)
block|{
return|return
name|componentLevel
return|;
block|}
if|if
condition|(
name|operationLevel
operator|!=
literal|null
operator|&&
operator|!
name|operationLevel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|operationLevel
argument_list|)
return|;
block|}
if|if
condition|(
name|specificationLevel
operator|!=
literal|null
operator|&&
operator|!
name|specificationLevel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|specificationLevel
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|hostFrom (final RestConfiguration restConfiguration)
specifier|static
name|String
name|hostFrom
parameter_list|(
specifier|final
name|RestConfiguration
name|restConfiguration
parameter_list|)
block|{
if|if
condition|(
name|restConfiguration
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|scheme
init|=
name|restConfiguration
operator|.
name|getScheme
argument_list|()
decl_stmt|;
specifier|final
name|String
name|host
init|=
name|restConfiguration
operator|.
name|getHost
argument_list|()
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|restConfiguration
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
operator|||
name|host
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|StringBuilder
name|answer
init|=
operator|new
name|StringBuilder
argument_list|(
name|scheme
argument_list|)
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
operator|.
name|append
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
operator|&&
operator|!
operator|(
literal|"http"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
operator|&&
name|port
operator|==
literal|80
operator|)
operator|&&
operator|!
operator|(
literal|"https"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
operator|&&
name|port
operator|==
literal|443
operator|)
condition|)
block|{
name|answer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Loads the Swagger definition model from the given path. Tries to resolve      * the resource using Camel's resource loading support, if it fails uses      * Swagger's resource loading support instead.      *      * @param uri URI of the specification      * @param camelContext context to use      * @return the specification      * @throws IOException      */
DECL|method|loadSpecificationFrom (final CamelContext camelContext, final URI uri)
specifier|static
name|Swagger
name|loadSpecificationFrom
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ObjectMapper
name|mapper
init|=
name|Json
operator|.
name|mapper
argument_list|()
decl_stmt|;
specifier|final
name|SwaggerParser
name|swaggerParser
init|=
operator|new
name|SwaggerParser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|uriAsString
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|camelContext
argument_list|,
name|uriAsString
argument_list|)
init|)
block|{
specifier|final
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|stream
argument_list|)
decl_stmt|;
return|return
name|swaggerParser
operator|.
name|read
argument_list|(
name|node
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
comment|// try Swaggers loader
specifier|final
name|Swagger
name|swagger
init|=
name|swaggerParser
operator|.
name|read
argument_list|(
name|uriAsString
argument_list|)
decl_stmt|;
if|if
condition|(
name|swagger
operator|!=
literal|null
condition|)
block|{
return|return
name|swagger
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The given Swagger specification could not be loaded from `"
operator|+
name|uri
operator|+
literal|"`. Tried loading using Camel's resource resolution and using Swagger's own resource resolution."
operator|+
literal|" Swagger tends to swallow exceptions while parsing, try specifying Java system property `debugParser`"
operator|+
literal|" (e.g. `-DdebugParser=true`), the exception that occured when loading using Camel's resource"
operator|+
literal|" loader follows"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|pickBestScheme (final String specificationScheme, final List<Scheme> schemes)
specifier|static
name|String
name|pickBestScheme
parameter_list|(
specifier|final
name|String
name|specificationScheme
parameter_list|,
specifier|final
name|List
argument_list|<
name|Scheme
argument_list|>
name|schemes
parameter_list|)
block|{
if|if
condition|(
name|schemes
operator|!=
literal|null
operator|&&
operator|!
name|schemes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|schemes
operator|.
name|contains
argument_list|(
name|Scheme
operator|.
name|HTTPS
argument_list|)
condition|)
block|{
return|return
literal|"https"
return|;
block|}
if|if
condition|(
name|schemes
operator|.
name|contains
argument_list|(
name|Scheme
operator|.
name|HTTP
argument_list|)
condition|)
block|{
return|return
literal|"http"
return|;
block|}
block|}
if|if
condition|(
name|specificationScheme
operator|!=
literal|null
condition|)
block|{
return|return
name|specificationScheme
return|;
block|}
comment|// there is no support for WebSocket (Scheme.WS, Scheme.WSS)
return|return
literal|null
return|;
block|}
DECL|method|queryParameterExpression (final Parameter parameter)
specifier|static
name|String
name|queryParameterExpression
parameter_list|(
specifier|final
name|Parameter
name|parameter
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|expression
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"={"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parameter
operator|.
name|getRequired
argument_list|()
condition|)
block|{
name|expression
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|expression
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

