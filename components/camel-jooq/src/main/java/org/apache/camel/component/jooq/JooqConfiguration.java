begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jooq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jooq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|JooqConfiguration
specifier|public
class|class
name|JooqConfiguration
implements|implements
name|Cloneable
block|{
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|description
operator|=
literal|"JOOQ entity class"
argument_list|)
DECL|field|entityType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Delete entity after it is consumed"
argument_list|)
DECL|field|consumeDelete
specifier|private
name|boolean
name|consumeDelete
init|=
literal|true
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Type of operation to execute on query"
argument_list|,
name|defaultValue
operator|=
literal|"NONE"
argument_list|)
DECL|field|operation
specifier|private
name|JooqOperation
name|operation
init|=
name|JooqOperation
operator|.
name|NONE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"To execute plain SQL query"
argument_list|)
DECL|field|query
specifier|private
name|String
name|query
decl_stmt|;
DECL|field|databaseConfiguration
specifier|private
name|Configuration
name|databaseConfiguration
decl_stmt|;
DECL|method|JooqConfiguration ()
specifier|public
name|JooqConfiguration
parameter_list|()
block|{     }
DECL|method|getOperation ()
specifier|public
name|JooqOperation
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
DECL|method|setOperation (JooqOperation operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|JooqOperation
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getDatabaseConfiguration ()
specifier|public
name|Configuration
name|getDatabaseConfiguration
parameter_list|()
block|{
return|return
name|databaseConfiguration
return|;
block|}
DECL|method|setDatabaseConfiguration (Configuration databaseConfiguration)
specifier|public
name|void
name|setDatabaseConfiguration
parameter_list|(
name|Configuration
name|databaseConfiguration
parameter_list|)
block|{
name|this
operator|.
name|databaseConfiguration
operator|=
name|databaseConfiguration
expr_stmt|;
block|}
DECL|method|getEntityType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getEntityType
parameter_list|()
block|{
return|return
name|entityType
return|;
block|}
DECL|method|setEntityType (Class<?> entityType)
specifier|public
name|void
name|setEntityType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|)
block|{
name|this
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
block|}
DECL|method|isConsumeDelete ()
specifier|public
name|boolean
name|isConsumeDelete
parameter_list|()
block|{
return|return
name|consumeDelete
return|;
block|}
DECL|method|setConsumeDelete (boolean consumeDelete)
specifier|public
name|void
name|setConsumeDelete
parameter_list|(
name|boolean
name|consumeDelete
parameter_list|)
block|{
name|this
operator|.
name|consumeDelete
operator|=
name|consumeDelete
expr_stmt|;
block|}
DECL|method|getQuery ()
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
DECL|method|setQuery (String query)
specifier|public
name|void
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|JooqConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|JooqConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

