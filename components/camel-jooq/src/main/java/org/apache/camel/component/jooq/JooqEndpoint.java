begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jooq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jooq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledPollEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|ResultQuery
import|;
end_import

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|scheme
operator|=
literal|"jooq"
argument_list|,
name|syntax
operator|=
literal|"jooq:entityType"
argument_list|,
name|title
operator|=
literal|"JOOQ"
argument_list|,
name|label
operator|=
literal|"database"
argument_list|)
DECL|class|JooqEndpoint
specifier|public
class|class
name|JooqEndpoint
extends|extends
name|ScheduledPollEndpoint
block|{
DECL|field|producerExpression
specifier|private
name|Expression
name|producerExpression
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|JooqConfiguration
name|configuration
decl_stmt|;
DECL|method|JooqEndpoint (String uri, String remaining, JooqComponent component, JooqConfiguration configuration)
specifier|public
name|JooqEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|JooqComponent
name|component
parameter_list|,
name|JooqConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
block|{
return|return
operator|new
name|JooqProducer
argument_list|(
name|this
argument_list|,
name|getProducerExpression
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|JooqConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (JooqConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|JooqConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getProducerExpression ()
specifier|public
name|Expression
name|getProducerExpression
parameter_list|()
block|{
if|if
condition|(
name|producerExpression
operator|==
literal|null
condition|)
block|{
name|producerExpression
operator|=
name|createProducerExpression
argument_list|()
expr_stmt|;
block|}
return|return
name|producerExpression
return|;
block|}
DECL|method|createProducerExpression ()
specifier|protected
name|Expression
name|createProducerExpression
parameter_list|()
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
switch|switch
condition|(
name|configuration
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
name|type
operator|=
name|configuration
operator|.
name|getEntityType
argument_list|()
expr_stmt|;
break|break;
case|case
name|EXECUTE
case|:
name|type
operator|=
name|Query
operator|.
name|class
expr_stmt|;
break|break;
case|case
name|FETCH
case|:
name|type
operator|=
name|ResultQuery
operator|.
name|class
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation: "
operator|+
name|configuration
operator|.
name|getOperation
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|Expression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
name|asType
parameter_list|)
block|{
name|Object
name|answer
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|Object
name|defaultValue
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
operator|new
name|NoTypeConversionAvailableException
argument_list|(
name|defaultValue
argument_list|,
name|type
argument_list|)
argument_list|)
throw|;
block|}
name|answer
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|JooqConsumer
name|consumer
init|=
operator|new
name|JooqConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
block|}
end_class

end_unit

