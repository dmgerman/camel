begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jooq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jooq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|DSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|ResultQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|UpdatableRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
import|;
end_import

begin_class
DECL|class|JooqProducer
specifier|public
class|class
name|JooqProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|expression
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
DECL|field|endpoint
specifier|private
name|JooqEndpoint
name|endpoint
decl_stmt|;
DECL|method|JooqProducer (JooqEndpoint endpoint, Expression expression)
specifier|public
name|JooqProducer
parameter_list|(
name|JooqEndpoint
name|endpoint
parameter_list|,
name|Expression
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|JooqConfiguration
name|configuration
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|dbConfig
init|=
name|configuration
operator|.
name|getDatabaseConfiguration
argument_list|()
decl_stmt|;
name|JooqOperation
name|operation
init|=
name|configuration
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|String
name|querySQL
init|=
name|configuration
operator|.
name|getQuery
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|EXECUTE
case|:
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|querySQL
argument_list|)
condition|)
block|{
name|Query
name|query
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Query
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|attach
argument_list|(
name|dbConfig
argument_list|)
expr_stmt|;
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DSLContext
name|context
init|=
name|DSL
operator|.
name|using
argument_list|(
name|dbConfig
argument_list|)
decl_stmt|;
name|context
operator|.
name|execute
argument_list|(
name|querySQL
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FETCH
case|:
name|Result
name|result
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|querySQL
argument_list|)
condition|)
block|{
name|ResultQuery
name|resultQuery
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|ResultQuery
operator|.
name|class
argument_list|)
decl_stmt|;
name|resultQuery
operator|.
name|attach
argument_list|(
name|dbConfig
argument_list|)
expr_stmt|;
name|result
operator|=
name|resultQuery
operator|.
name|fetch
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DSLContext
name|context
init|=
name|DSL
operator|.
name|using
argument_list|(
name|dbConfig
argument_list|)
decl_stmt|;
name|result
operator|=
name|context
operator|.
name|fetch
argument_list|(
name|querySQL
argument_list|)
expr_stmt|;
block|}
name|Message
name|target
init|=
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|target
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|NONE
case|:
name|DSLContext
name|context
init|=
name|DSL
operator|.
name|using
argument_list|(
name|dbConfig
argument_list|)
decl_stmt|;
specifier|final
name|UpdatableRecord
name|entity
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|UpdatableRecord
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|batchStore
argument_list|(
name|entity
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong operation: "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

