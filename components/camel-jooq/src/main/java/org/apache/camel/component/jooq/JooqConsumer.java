begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jooq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jooq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledBatchPollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|DSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|UpdatableRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
import|;
end_import

begin_class
DECL|class|JooqConsumer
specifier|public
class|class
name|JooqConsumer
extends|extends
name|ScheduledBatchPollingConsumer
block|{
DECL|class|DataHolder
specifier|private
specifier|static
specifier|final
class|class
name|DataHolder
block|{
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|result
specifier|private
name|Object
name|result
decl_stmt|;
DECL|method|DataHolder ()
specifier|private
name|DataHolder
parameter_list|()
block|{         }
block|}
DECL|method|JooqConsumer (JooqEndpoint endpoint, Processor processor)
specifier|public
name|JooqConsumer
parameter_list|(
name|JooqEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|JooqEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|JooqEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|JooqConfiguration
name|configuration
init|=
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|dbConfig
init|=
name|configuration
operator|.
name|getDatabaseConfiguration
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
init|=
name|configuration
operator|.
name|getEntityType
argument_list|()
decl_stmt|;
name|DSLContext
name|context
init|=
name|DSL
operator|.
name|using
argument_list|(
name|dbConfig
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|DataHolder
argument_list|>
name|answer
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Result
argument_list|<
name|UpdatableRecord
argument_list|<
name|?
argument_list|>
argument_list|>
name|results
init|=
name|context
operator|.
name|selectFrom
argument_list|(
name|getTable
argument_list|(
name|entityType
argument_list|)
argument_list|)
operator|.
name|fetch
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdatableRecord
name|result
range|:
name|results
control|)
block|{
name|DataHolder
name|holder
init|=
operator|new
name|DataHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|holder
operator|.
name|exchange
operator|=
name|createExchange
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|holder
argument_list|)
expr_stmt|;
block|}
name|int
name|messagePolled
init|=
name|processBatch
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
name|answer
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isConsumeDelete
argument_list|()
condition|)
block|{
name|context
operator|.
name|batchDelete
argument_list|(
name|results
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|messagePolled
return|;
block|}
DECL|method|createExchange (Object result)
specifier|protected
name|Exchange
name|createExchange
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|getTable (Class<?> entityType)
specifier|private
name|Table
name|getTable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|)
block|{
name|UpdatableRecord
name|object
init|=
operator|(
name|UpdatableRecord
operator|)
name|ObjectHelper
operator|.
name|newInstance
argument_list|(
name|entityType
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|object
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
DECL|method|processBatch (Queue<Object> exchanges)
specifier|public
name|int
name|processBatch
parameter_list|(
name|Queue
argument_list|<
name|Object
argument_list|>
name|exchanges
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|total
init|=
name|exchanges
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|isBatchAllowed
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|DataHolder
name|holder
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|DataHolder
operator|.
name|class
argument_list|,
name|exchanges
operator|.
name|poll
argument_list|()
argument_list|)
decl_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|holder
operator|.
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
block|}
end_class

end_unit

