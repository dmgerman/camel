begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.microprofile.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|microprofile
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheck
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheck
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|health
operator|.
name|AbstractHealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|health
operator|.
name|HealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|health
operator|.
name|HealthCheckResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|health
operator|.
name|HealthCheckResponseBuilder
import|;
end_import

begin_comment
comment|/**  * Invokes Camel health checks and adds their results into the HealthCheckResponseBuilder  */
end_comment

begin_class
DECL|class|AbstractCamelMicroProfileHealthCheck
specifier|public
specifier|abstract
class|class
name|AbstractCamelMicroProfileHealthCheck
implements|implements
name|HealthCheck
implements|,
name|CamelContextAware
block|{
annotation|@
name|Inject
DECL|field|camelContext
specifier|protected
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|HealthCheckResponse
name|call
parameter_list|()
block|{
specifier|final
name|HealthCheckResponseBuilder
name|builder
init|=
name|HealthCheckResponse
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|name
argument_list|(
name|getHealthCheckName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|Result
argument_list|>
name|results
init|=
name|HealthCheckHelper
operator|.
name|invoke
argument_list|(
name|camelContext
argument_list|,
operator|(
name|HealthCheckFilter
operator|)
name|check
lambda|->
name|check
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
operator|&&
name|check
operator|.
name|getGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|getHealthGroupFilterExclude
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|up
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|details
init|=
name|result
operator|.
name|getDetails
argument_list|()
decl_stmt|;
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|details
operator|.
name|containsKey
argument_list|(
name|AbstractHealthCheck
operator|.
name|CHECK_ENABLED
argument_list|)
condition|)
block|{
name|enabled
operator|=
operator|(
name|boolean
operator|)
name|details
operator|.
name|get
argument_list|(
name|AbstractHealthCheck
operator|.
name|CHECK_ENABLED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enabled
condition|)
block|{
name|builder
operator|.
name|withData
argument_list|(
name|result
operator|.
name|getCheck
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|result
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|DOWN
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|camelContext
return|;
block|}
comment|/**      * Gets the name of a specific health group to exclude when invoking a Camel HealthCheck      * @return the health group to exclude      */
DECL|method|getHealthGroupFilterExclude ()
specifier|abstract
name|String
name|getHealthGroupFilterExclude
parameter_list|()
function_decl|;
comment|/**      * Gets the name of the health check which will be used as a heading for the associated checks.      * @return the health check name      */
DECL|method|getHealthCheckName ()
specifier|abstract
name|String
name|getHealthCheckName
parameter_list|()
function_decl|;
block|}
end_class

end_unit

