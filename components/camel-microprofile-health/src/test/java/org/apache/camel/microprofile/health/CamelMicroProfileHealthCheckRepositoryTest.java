begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.microprofile.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|microprofile
operator|.
name|health
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|io
operator|.
name|smallrye
operator|.
name|health
operator|.
name|SmallRyeHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|health
operator|.
name|RoutesHealthCheckRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|health
operator|.
name|HealthCheckResponse
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CamelMicroProfileHealthCheckRepositoryTest
specifier|public
class|class
name|CamelMicroProfileHealthCheckRepositoryTest
extends|extends
name|CamelMicroProfileHealthTestSupport
block|{
annotation|@
name|Test
DECL|method|testCamelHealthRepositoryUpStatus ()
specifier|public
name|void
name|testCamelHealthRepositoryUpStatus
parameter_list|()
block|{
name|HealthCheckRegistry
name|healthCheckRegistry
init|=
name|HealthCheckRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|healthCheckRegistry
operator|.
name|addRepository
argument_list|(
operator|new
name|RoutesHealthCheckRepository
argument_list|()
argument_list|)
expr_stmt|;
name|CamelMicroProfileReadinessCheck
name|readinessCheck
init|=
operator|new
name|CamelMicroProfileReadinessCheck
argument_list|()
decl_stmt|;
name|readinessCheck
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|addHealthCheck
argument_list|(
name|readinessCheck
argument_list|)
expr_stmt|;
name|SmallRyeHealth
name|health
init|=
name|reporter
operator|.
name|getHealth
argument_list|()
decl_stmt|;
name|JsonObject
name|healthObject
init|=
name|getHealthJson
argument_list|(
name|health
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|UP
operator|.
name|name
argument_list|()
argument_list|,
name|healthObject
operator|.
name|getString
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|JsonArray
name|checks
init|=
name|healthObject
operator|.
name|getJsonArray
argument_list|(
literal|"checks"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|checks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertHealthCheckOutput
argument_list|(
literal|"camel-readiness-checks"
argument_list|,
name|State
operator|.
name|UP
argument_list|,
name|checks
operator|.
name|getJsonObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|jsonObject
lambda|->
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|UP
operator|.
name|name
argument_list|()
argument_list|,
name|jsonObject
operator|.
name|getString
argument_list|(
literal|"route:healthyRoute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCamelHealthRepositoryDownStatus ()
specifier|public
name|void
name|testCamelHealthRepositoryDownStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|HealthCheckRegistry
name|healthCheckRegistry
init|=
name|HealthCheckRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|healthCheckRegistry
operator|.
name|addRepository
argument_list|(
operator|new
name|RoutesHealthCheckRepository
argument_list|()
argument_list|)
expr_stmt|;
name|CamelMicroProfileReadinessCheck
name|readinessCheck
init|=
operator|new
name|CamelMicroProfileReadinessCheck
argument_list|()
decl_stmt|;
name|readinessCheck
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|addHealthCheck
argument_list|(
name|readinessCheck
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
literal|"healthyRoute"
argument_list|)
expr_stmt|;
name|SmallRyeHealth
name|health
init|=
name|reporter
operator|.
name|getHealth
argument_list|()
decl_stmt|;
name|JsonObject
name|healthObject
init|=
name|getHealthJson
argument_list|(
name|health
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|DOWN
operator|.
name|name
argument_list|()
argument_list|,
name|healthObject
operator|.
name|getString
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|JsonArray
name|checks
init|=
name|healthObject
operator|.
name|getJsonArray
argument_list|(
literal|"checks"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|checks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertHealthCheckOutput
argument_list|(
literal|"camel-readiness-checks"
argument_list|,
name|State
operator|.
name|DOWN
argument_list|,
name|checks
operator|.
name|getJsonObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|jsonObject
lambda|->
block|{
name|assertEquals
argument_list|(
name|State
operator|.
name|DOWN
operator|.
name|name
argument_list|()
argument_list|,
name|jsonObject
operator|.
name|getString
argument_list|(
literal|"route:healthyRoute"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"healthyRoute"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"Hello Camel MicroProfile Health"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

