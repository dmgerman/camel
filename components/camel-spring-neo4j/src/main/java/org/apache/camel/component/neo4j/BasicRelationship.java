begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.neo4j
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|neo4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|neo4j
operator|.
name|graphdb
operator|.
name|Node
import|;
end_import

begin_class
DECL|class|BasicRelationship
specifier|public
class|class
name|BasicRelationship
block|{
DECL|field|start
specifier|private
specifier|final
name|Node
name|start
decl_stmt|;
DECL|field|end
specifier|private
specifier|final
name|Node
name|end
decl_stmt|;
DECL|field|relationshipType
specifier|private
specifier|final
name|String
name|relationshipType
decl_stmt|;
DECL|field|properties
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
DECL|method|BasicRelationship (Node start, Node end, String relationshipType)
specifier|public
name|BasicRelationship
parameter_list|(
name|Node
name|start
parameter_list|,
name|Node
name|end
parameter_list|,
name|String
name|relationshipType
parameter_list|)
block|{
name|this
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|relationshipType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicRelationship (Node start, Node end, String relationshipType, Map<String, Object> properties)
specifier|public
name|BasicRelationship
parameter_list|(
name|Node
name|start
parameter_list|,
name|Node
name|end
parameter_list|,
name|String
name|relationshipType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|relationshipType
operator|=
name|relationshipType
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|getEnd ()
specifier|public
name|Node
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
DECL|method|getProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|getRelationshipType ()
specifier|public
name|String
name|getRelationshipType
parameter_list|()
block|{
return|return
name|relationshipType
return|;
block|}
DECL|method|getStart ()
specifier|public
name|Node
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
block|}
end_class

end_unit

