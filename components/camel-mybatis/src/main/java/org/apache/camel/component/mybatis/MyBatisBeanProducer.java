begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mybatis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mybatis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|BeanProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ibatis
operator|.
name|session
operator|.
name|ExecutorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ibatis
operator|.
name|session
operator|.
name|SqlSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MyBatisBeanProducer
specifier|public
class|class
name|MyBatisBeanProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MyBatisBeanProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|MyBatisBeanEndpoint
name|endpoint
decl_stmt|;
DECL|field|beanProcessor
specifier|private
name|BeanProcessor
name|beanProcessor
decl_stmt|;
DECL|field|session
specifier|private
name|SqlSession
name|session
decl_stmt|;
DECL|method|MyBatisBeanProducer (MyBatisBeanEndpoint endpoint)
specifier|public
name|MyBatisBeanProducer
parameter_list|(
name|MyBatisBeanEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Invoking MyBatisBean on {}:{}"
argument_list|,
name|endpoint
operator|.
name|getBeanName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|beanProcessor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// discover the bean and get the mapper
name|session
operator|=
literal|null
expr_stmt|;
name|ExecutorType
name|executorType
init|=
name|endpoint
operator|.
name|getExecutorType
argument_list|()
decl_stmt|;
if|if
condition|(
name|executorType
operator|==
literal|null
condition|)
block|{
name|session
operator|=
name|endpoint
operator|.
name|getSqlSessionFactory
argument_list|()
operator|.
name|openSession
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|session
operator|=
name|endpoint
operator|.
name|getSqlSessionFactory
argument_list|()
operator|.
name|openSession
argument_list|(
name|executorType
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opened MyBatis SqlSession: {}"
argument_list|,
name|session
argument_list|)
expr_stmt|;
comment|// is the bean a alias type
name|Class
name|clazz
init|=
name|session
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTypeAliasRegistry
argument_list|()
operator|.
name|resolveAlias
argument_list|(
name|endpoint
operator|.
name|getBeanName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// its maybe a FQN so try to use Camel to lookup the class
name|clazz
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|endpoint
operator|.
name|getBeanName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolved MyBatis Bean: {} as class: {}"
argument_list|,
name|endpoint
operator|.
name|getBeanName
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
comment|// find the mapper
name|Object
name|mapper
init|=
name|session
operator|.
name|getMapper
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Mapper with typeAlias or class name: "
operator|+
name|endpoint
operator|.
name|getBeanName
argument_list|()
operator|+
literal|" in MyBatis configuration."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolved MyBatis Bean mapper: {}"
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
name|beanProcessor
operator|=
operator|new
name|BeanProcessor
argument_list|(
name|mapper
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|beanProcessor
operator|.
name|setMethod
argument_list|(
name|endpoint
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|beanProcessor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|beanProcessor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing MyBatis SqlSession: {}"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

