begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mybatis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mybatis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ibatis
operator|.
name|session
operator|.
name|SqlSession
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultMyBatisProcessingStrategy
specifier|public
class|class
name|DefaultMyBatisProcessingStrategy
implements|implements
name|MyBatisProcessingStrategy
block|{
DECL|method|commit (MyBatisEndpoint endpoint, Exchange exchange, Object data, String consumeStatements)
specifier|public
name|void
name|commit
parameter_list|(
name|MyBatisEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|data
parameter_list|,
name|String
name|consumeStatements
parameter_list|)
throws|throws
name|Exception
block|{
name|SqlSession
name|session
init|=
name|endpoint
operator|.
name|getSqlSessionFactory
argument_list|()
operator|.
name|openSession
argument_list|()
decl_stmt|;
name|String
index|[]
name|statements
init|=
name|consumeStatements
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|statement
range|:
name|statements
control|)
block|{
name|session
operator|.
name|update
argument_list|(
name|statement
operator|.
name|trim
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|poll (MyBatisConsumer consumer, MyBatisEndpoint endpoint)
specifier|public
name|List
name|poll
parameter_list|(
name|MyBatisConsumer
name|consumer
parameter_list|,
name|MyBatisEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|SqlSession
name|session
init|=
name|endpoint
operator|.
name|getSqlSessionFactory
argument_list|()
operator|.
name|openSession
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|session
operator|.
name|selectList
argument_list|(
name|endpoint
operator|.
name|getStatement
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

