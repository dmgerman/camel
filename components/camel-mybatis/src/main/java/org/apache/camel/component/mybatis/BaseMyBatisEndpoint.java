begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mybatis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mybatis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPollingEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ibatis
operator|.
name|session
operator|.
name|ExecutorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ibatis
operator|.
name|session
operator|.
name|SqlSessionFactory
import|;
end_import

begin_class
DECL|class|BaseMyBatisEndpoint
specifier|public
specifier|abstract
class|class
name|BaseMyBatisEndpoint
extends|extends
name|DefaultPollingEndpoint
block|{
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Enables or disables transaction. If enabled then if processing an exchange failed then the consumer"
operator|+
literal|"break out processing any further exchanges to cause a rollback eager."
argument_list|)
DECL|field|transacted
specifier|private
name|boolean
name|transacted
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"0"
argument_list|)
DECL|field|maxMessagesPerPoll
specifier|private
name|int
name|maxMessagesPerPoll
decl_stmt|;
annotation|@
name|UriParam
DECL|field|outputHeader
specifier|private
name|String
name|outputHeader
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|inputHeader
specifier|private
name|String
name|inputHeader
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|optionalPrefix
operator|=
literal|"consumer."
argument_list|)
DECL|field|onConsume
specifier|private
name|String
name|onConsume
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|optionalPrefix
operator|=
literal|"consumer."
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|useIterator
specifier|private
name|boolean
name|useIterator
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|optionalPrefix
operator|=
literal|"consumer."
argument_list|)
DECL|field|routeEmptyResultSet
specifier|private
name|boolean
name|routeEmptyResultSet
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|processingStrategy
specifier|private
name|MyBatisProcessingStrategy
name|processingStrategy
init|=
operator|new
name|DefaultMyBatisProcessingStrategy
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"SIMPLE"
argument_list|)
DECL|field|executorType
specifier|private
name|ExecutorType
name|executorType
decl_stmt|;
DECL|method|BaseMyBatisEndpoint ()
specifier|public
name|BaseMyBatisEndpoint
parameter_list|()
block|{     }
DECL|method|BaseMyBatisEndpoint (String endpointUri, Component component)
specifier|public
name|BaseMyBatisEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|MyBatisComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|MyBatisComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
DECL|method|getSqlSessionFactory ()
specifier|public
name|SqlSessionFactory
name|getSqlSessionFactory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getComponent
argument_list|()
operator|.
name|getSqlSessionFactory
argument_list|()
return|;
block|}
DECL|method|getExecutorType ()
specifier|public
name|ExecutorType
name|getExecutorType
parameter_list|()
block|{
return|return
name|executorType
return|;
block|}
comment|/**      * The executor type to be used while executing statements.      *<ul>      *<li>simple - executor does nothing special.</li>      *<li>reuse - executor reuses prepared statements.</li>      *<li>batch - executor reuses statements and batches updates.</li>      *</ul>      */
DECL|method|setExecutorType (ExecutorType executorType)
specifier|public
name|void
name|setExecutorType
parameter_list|(
name|ExecutorType
name|executorType
parameter_list|)
block|{
name|this
operator|.
name|executorType
operator|=
name|executorType
expr_stmt|;
block|}
DECL|method|setExecutorType (String executorType)
specifier|public
name|void
name|setExecutorType
parameter_list|(
name|String
name|executorType
parameter_list|)
block|{
name|this
operator|.
name|executorType
operator|=
name|ExecutorType
operator|.
name|valueOf
argument_list|(
name|executorType
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|isTransacted ()
specifier|public
name|boolean
name|isTransacted
parameter_list|()
block|{
return|return
name|transacted
return|;
block|}
comment|/**      * Enables or disables transaction. If enabled then if processing an exchange failed then the consumer      + break out processing any further exchanges to cause a rollback eager      */
DECL|method|setTransacted (boolean transacted)
specifier|public
name|void
name|setTransacted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
block|{
name|this
operator|.
name|transacted
operator|=
name|transacted
expr_stmt|;
block|}
DECL|method|getProcessingStrategy ()
specifier|public
name|MyBatisProcessingStrategy
name|getProcessingStrategy
parameter_list|()
block|{
return|return
name|processingStrategy
return|;
block|}
comment|/**      * To use a custom MyBatisProcessingStrategy      */
DECL|method|setProcessingStrategy (MyBatisProcessingStrategy processingStrategy)
specifier|public
name|void
name|setProcessingStrategy
parameter_list|(
name|MyBatisProcessingStrategy
name|processingStrategy
parameter_list|)
block|{
name|this
operator|.
name|processingStrategy
operator|=
name|processingStrategy
expr_stmt|;
block|}
DECL|method|getMaxMessagesPerPoll ()
specifier|public
name|int
name|getMaxMessagesPerPoll
parameter_list|()
block|{
return|return
name|maxMessagesPerPoll
return|;
block|}
comment|/**      * This option is intended to split results returned by the database pool into the batches and deliver them in multiple exchanges.      * This integer defines the maximum messages to deliver in single exchange. By default, no maximum is set.      * Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files.      * Set a value of 0 or negative to disable it.      */
DECL|method|setMaxMessagesPerPoll (int maxMessagesPerPoll)
specifier|public
name|void
name|setMaxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|this
operator|.
name|maxMessagesPerPoll
operator|=
name|maxMessagesPerPoll
expr_stmt|;
block|}
DECL|method|getOutputHeader ()
specifier|public
name|String
name|getOutputHeader
parameter_list|()
block|{
return|return
name|outputHeader
return|;
block|}
comment|/**      * Store the query result in a header instead of the message body.      * By default, outputHeader == null and the query result is stored in the message body,      * any existing content in the message body is discarded.      * If outputHeader is set, the value is used as the name of the header to store the      * query result and the original message body is preserved. Setting outputHeader will      * also omit populating the default CamelMyBatisResult header since it would be the same      * as outputHeader all the time.      */
DECL|method|setOutputHeader (String outputHeader)
specifier|public
name|void
name|setOutputHeader
parameter_list|(
name|String
name|outputHeader
parameter_list|)
block|{
name|this
operator|.
name|outputHeader
operator|=
name|outputHeader
expr_stmt|;
block|}
DECL|method|getInputHeader ()
specifier|public
name|String
name|getInputHeader
parameter_list|()
block|{
return|return
name|inputHeader
return|;
block|}
comment|/**      * User the header value for input parameters instead of the message body.      * By default, inputHeader == null and the input parameters are taken from the message body.      * If outputHeader is set, the value is used and query parameters will be taken from the      * header instead of the body.      */
DECL|method|setInputHeader (String inputHeader)
specifier|public
name|void
name|setInputHeader
parameter_list|(
name|String
name|inputHeader
parameter_list|)
block|{
name|this
operator|.
name|inputHeader
operator|=
name|inputHeader
expr_stmt|;
block|}
DECL|method|getOnConsume ()
specifier|public
name|String
name|getOnConsume
parameter_list|()
block|{
return|return
name|onConsume
return|;
block|}
comment|/**      * Statement to run after data has been processed in the route      */
DECL|method|setOnConsume (String onConsume)
specifier|public
name|void
name|setOnConsume
parameter_list|(
name|String
name|onConsume
parameter_list|)
block|{
name|this
operator|.
name|onConsume
operator|=
name|onConsume
expr_stmt|;
block|}
DECL|method|isUseIterator ()
specifier|public
name|boolean
name|isUseIterator
parameter_list|()
block|{
return|return
name|useIterator
return|;
block|}
comment|/**      * Process resultset individually or as a list      */
DECL|method|setUseIterator (boolean useIterator)
specifier|public
name|void
name|setUseIterator
parameter_list|(
name|boolean
name|useIterator
parameter_list|)
block|{
name|this
operator|.
name|useIterator
operator|=
name|useIterator
expr_stmt|;
block|}
DECL|method|isRouteEmptyResultSet ()
specifier|public
name|boolean
name|isRouteEmptyResultSet
parameter_list|()
block|{
return|return
name|routeEmptyResultSet
return|;
block|}
comment|/**      * Whether allow empty resultset to be routed to the next hop      */
DECL|method|setRouteEmptyResultSet (boolean routeEmptyResultSet)
specifier|public
name|void
name|setRouteEmptyResultSet
parameter_list|(
name|boolean
name|routeEmptyResultSet
parameter_list|)
block|{
name|this
operator|.
name|routeEmptyResultSet
operator|=
name|routeEmptyResultSet
expr_stmt|;
block|}
block|}
end_class

end_unit

