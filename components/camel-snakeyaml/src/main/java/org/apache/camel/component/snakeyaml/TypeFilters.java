begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.snakeyaml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_class
DECL|class|TypeFilters
specifier|public
specifier|final
class|class
name|TypeFilters
block|{
DECL|method|TypeFilters ()
specifier|private
name|TypeFilters
parameter_list|()
block|{     }
DECL|class|RegExp
specifier|public
specifier|static
specifier|final
class|class
name|RegExp
implements|implements
name|TypeFilter
block|{
DECL|field|predicates
specifier|private
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|>
name|predicates
decl_stmt|;
DECL|method|RegExp (String pattern)
specifier|public
name|RegExp
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|predicates
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
operator|.
name|asPredicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RegExp (Collection<String> patterns)
specifier|public
name|RegExp
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
name|this
operator|.
name|predicates
operator|=
name|patterns
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Pattern
operator|::
name|compile
argument_list|)
operator|.
name|map
argument_list|(
name|Pattern
operator|::
name|asPredicate
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (String type)
specifier|public
name|boolean
name|test
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|predicates
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|test
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|TypeName
specifier|public
specifier|static
specifier|final
class|class
name|TypeName
implements|implements
name|TypeFilter
block|{
DECL|field|values
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
DECL|method|TypeName (String value)
specifier|public
name|TypeName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|TypeName (Collection<String> values)
specifier|public
name|TypeName
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|test (String type)
specifier|public
name|boolean
name|test
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|this
operator|.
name|values
operator|.
name|contains
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
comment|// ***************************
comment|// Helpers
comment|// ***************************
DECL|method|valueOf (String definition)
specifier|public
specifier|static
name|Optional
argument_list|<
name|TypeFilter
argument_list|>
name|valueOf
parameter_list|(
name|String
name|definition
parameter_list|)
block|{
name|String
name|type
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|definition
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
literal|"type"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|StringHelper
operator|.
name|after
argument_list|(
name|definition
argument_list|,
literal|":"
argument_list|,
name|TypeName
operator|::
operator|new
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"regexp"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|StringHelper
operator|.
name|after
argument_list|(
name|definition
argument_list|,
literal|":"
argument_list|,
name|RegExp
operator|::
operator|new
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|regexp (String... patterns)
specifier|public
specifier|static
name|TypeFilter
name|regexp
parameter_list|(
name|String
modifier|...
name|patterns
parameter_list|)
block|{
return|return
operator|new
name|RegExp
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|patterns
argument_list|)
argument_list|)
return|;
block|}
DECL|method|regexp (Collection<String> patterns)
specifier|public
specifier|static
name|TypeFilter
name|regexp
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
return|return
operator|new
name|RegExp
argument_list|(
name|patterns
argument_list|)
return|;
block|}
DECL|method|typeNames (Collection<String> values)
specifier|public
specifier|static
name|TypeFilter
name|typeNames
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|new
name|TypeName
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|typeNames (String... values)
specifier|public
specifier|static
name|TypeFilter
name|typeNames
parameter_list|(
name|String
modifier|...
name|values
parameter_list|)
block|{
return|return
name|typeNames
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
DECL|method|types (Collection<Class<?>> values)
specifier|public
specifier|static
name|TypeFilter
name|types
parameter_list|(
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|new
name|TypeName
argument_list|(
name|values
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|types (Class<?>.... values)
specifier|public
specifier|static
name|TypeFilter
name|types
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|values
parameter_list|)
block|{
return|return
name|types
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
DECL|method|allowAll ()
specifier|public
specifier|static
name|TypeFilter
name|allowAll
parameter_list|()
block|{
return|return
name|s
lambda|->
literal|true
return|;
block|}
DECL|method|allowNone ()
specifier|public
specifier|static
name|TypeFilter
name|allowNone
parameter_list|()
block|{
return|return
name|s
lambda|->
literal|false
return|;
block|}
block|}
end_class

end_unit

