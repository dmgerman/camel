begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.snakeyaml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
operator|.
name|model
operator|.
name|TestPojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SnakeYAMLTypeFilterTest
specifier|public
class|class
name|SnakeYAMLTypeFilterTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testSafeConstructor ()
specifier|public
name|void
name|testSafeConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|SnakeYAMLTypeFilterHelper
operator|.
name|testSafeConstructor
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypeConstructor ()
specifier|public
name|void
name|testTypeConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|SnakeYAMLTypeFilterHelper
operator|.
name|testTypeConstructor
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypeConstructorFromDefinition ()
specifier|public
name|void
name|testTypeConstructorFromDefinition
parameter_list|()
throws|throws
name|Exception
block|{
name|SnakeYAMLTypeFilterHelper
operator|.
name|testTypeConstructorFromDefinition
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllowAllConstructor ()
specifier|public
name|void
name|testAllowAllConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|SnakeYAMLTypeFilterHelper
operator|.
name|testAllowAllConstructor
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// SafeConstructor
name|SnakeYAMLDataFormat
name|safeConstructorDf
init|=
operator|new
name|SnakeYAMLDataFormat
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"direct:safe-constructor"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|safeConstructorDf
argument_list|)
expr_stmt|;
comment|// Type filter Constructor
name|SnakeYAMLDataFormat
name|typeConstructorDf
init|=
operator|new
name|SnakeYAMLDataFormat
argument_list|()
decl_stmt|;
name|typeConstructorDf
operator|.
name|addTypeFilters
argument_list|(
name|TypeFilters
operator|.
name|types
argument_list|(
name|TestPojo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:type-constructor"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|typeConstructorDf
argument_list|)
expr_stmt|;
comment|// Type filter Constructor from string definitions
name|SnakeYAMLDataFormat
name|typeConstructorStrDf
init|=
operator|new
name|SnakeYAMLDataFormat
argument_list|()
decl_stmt|;
name|typeConstructorStrDf
operator|.
name|setTypeFilterDefinitions
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"type:org.apache.camel.component.snakeyaml.model.TestPojo"
argument_list|,
literal|"regexp:org.apache.camel.component.snakeyaml.model.R.*"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:type-constructor-strdef"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|typeConstructorStrDf
argument_list|)
expr_stmt|;
comment|// Allow all Constructor
name|SnakeYAMLDataFormat
name|allConstructorDf
init|=
operator|new
name|SnakeYAMLDataFormat
argument_list|()
decl_stmt|;
name|allConstructorDf
operator|.
name|setAllowAnyType
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:all-constructor"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|allConstructorDf
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:all-constructor"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

