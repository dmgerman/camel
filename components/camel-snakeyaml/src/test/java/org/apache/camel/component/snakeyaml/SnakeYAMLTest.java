begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.snakeyaml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
operator|.
name|model
operator|.
name|TestPojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|nodes
operator|.
name|Tag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
operator|.
name|SnakeYAMLTestHelper
operator|.
name|createClassTagDataFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
operator|.
name|SnakeYAMLTestHelper
operator|.
name|createDataFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
operator|.
name|SnakeYAMLTestHelper
operator|.
name|createPrettyFlowDataFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
operator|.
name|SnakeYAMLTestHelper
operator|.
name|createTestMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snakeyaml
operator|.
name|SnakeYAMLTestHelper
operator|.
name|createTestPojo
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|SnakeYAMLTest
specifier|public
class|class
name|SnakeYAMLTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|format
specifier|private
specifier|final
name|SnakeYAMLDataFormat
name|format
decl_stmt|;
DECL|field|body
specifier|private
specifier|final
name|Object
name|body
decl_stmt|;
DECL|field|expected
specifier|private
specifier|final
name|String
name|expected
decl_stmt|;
DECL|method|SnakeYAMLTest (SnakeYAMLDataFormat format, Object body, String expected)
specifier|public
name|SnakeYAMLTest
parameter_list|(
name|SnakeYAMLDataFormat
name|format
parameter_list|,
name|Object
name|body
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|yamlCases ()
specifier|public
specifier|static
name|Collection
name|yamlCases
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|createDataFormat
argument_list|(
literal|null
argument_list|)
block|,
name|createTestMap
argument_list|()
block|,
literal|"{name: Camel}"
block|}
block|,
block|{
name|createDataFormat
argument_list|(
name|TestPojo
operator|.
name|class
argument_list|)
block|,
name|createTestPojo
argument_list|()
block|,
literal|"!!org.apache.camel.component.snakeyaml.model.TestPojo {name: Camel}"
block|}
block|,
block|{
name|createPrettyFlowDataFormat
argument_list|(
name|TestPojo
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|createTestPojo
argument_list|()
block|,
literal|"!!org.apache.camel.component.snakeyaml.model.TestPojo {\n  name: Camel\n}"
block|}
block|,
block|{
name|createClassTagDataFormat
argument_list|(
name|TestPojo
operator|.
name|class
argument_list|,
operator|new
name|Tag
argument_list|(
literal|"!tpojo"
argument_list|)
argument_list|)
block|,
name|createTestPojo
argument_list|()
block|,
literal|"!tpojo {name: Camel}"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshal ()
specifier|public
name|void
name|testMarshalAndUnmarshal
parameter_list|()
throws|throws
name|Exception
block|{
name|SnakeYAMLTestHelper
operator|.
name|marshalAndUnmarshal
argument_list|(
name|context
argument_list|()
argument_list|,
name|body
argument_list|,
literal|"mock:reverse"
argument_list|,
literal|"direct:in"
argument_list|,
literal|"direct:back"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|marshal
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:back"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:reverse"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

