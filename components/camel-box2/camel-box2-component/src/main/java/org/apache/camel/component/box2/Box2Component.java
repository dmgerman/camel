begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box2
operator|.
name|internal
operator|.
name|Box2ApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box2
operator|.
name|internal
operator|.
name|Box2ApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box2
operator|.
name|internal
operator|.
name|Box2ConnectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractApiComponent
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link Box2Endpoint}.  *   * @author<a href="mailto:punkhornsw@gmail.com">William Collins</a>  *   */
end_comment

begin_comment
comment|// @UriEndpoint(scheme = "box2", consumerClass = Box2Consumer.class,
end_comment

begin_comment
comment|// consumerPrefix = "consumer", syntax = "", title = "Box2 Component")
end_comment

begin_class
DECL|class|Box2Component
specifier|public
class|class
name|Box2Component
extends|extends
name|AbstractApiComponent
argument_list|<
name|Box2ApiName
argument_list|,
name|Box2Configuration
argument_list|,
name|Box2ApiCollection
argument_list|>
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|boxConnection
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
DECL|method|Box2Component ()
specifier|public
name|Box2Component
parameter_list|()
block|{
name|super
argument_list|(
name|Box2Endpoint
operator|.
name|class
argument_list|,
name|Box2ApiName
operator|.
name|class
argument_list|,
name|Box2ApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Box2Component (CamelContext context)
specifier|public
name|Box2Component
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|Box2Endpoint
operator|.
name|class
argument_list|,
name|Box2ApiName
operator|.
name|class
argument_list|,
name|Box2ApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApiName (String apiNameStr)
specifier|protected
name|Box2ApiName
name|getApiName
parameter_list|(
name|String
name|apiNameStr
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|Box2ApiName
operator|.
name|fromValue
argument_list|(
name|apiNameStr
argument_list|)
return|;
block|}
comment|/**      * To use the shared configuration      */
annotation|@
name|Override
DECL|method|setConfiguration (Box2Configuration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Box2Configuration
name|configuration
parameter_list|)
block|{
name|super
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * To use the shared configuration      */
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|Box2Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
comment|/**      * To use a shared connection      *       * @return the shared connection      */
DECL|method|getBoxConnection ()
specifier|public
name|BoxAPIConnection
name|getBoxConnection
parameter_list|()
block|{
return|return
name|boxConnection
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String methodName, Box2ApiName apiName, Box2Configuration endpointConfiguration)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Box2ApiName
name|apiName
parameter_list|,
name|Box2Configuration
name|endpointConfiguration
parameter_list|)
block|{
name|endpointConfiguration
operator|.
name|setApiName
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
name|endpointConfiguration
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Box2Endpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|apiName
argument_list|,
name|methodName
argument_list|,
name|endpointConfiguration
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|boxConnection
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|boxConnection
operator|=
name|Box2ConnectionHelper
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to connect, Box2 component configuration is missing"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|boxConnection
operator|!=
literal|null
condition|)
block|{
name|boxConnection
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|public
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|boxConnection
operator|!=
literal|null
condition|)
block|{
name|boxConnection
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

