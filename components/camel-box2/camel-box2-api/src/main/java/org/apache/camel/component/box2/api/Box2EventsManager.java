begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|EventStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Box2 Events Manager  *   *<p>  * Provides operations to manage Box events.  *   * @author<a href="mailto:punkhornsw@gmail.com">William Collins</a>  *  */
end_comment

begin_class
DECL|class|Box2EventsManager
specifier|public
class|class
name|Box2EventsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Box2EventsManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Box connection to authenticated user account.      */
DECL|field|boxConnection
specifier|private
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
DECL|field|eventStream
specifier|private
name|EventStream
name|eventStream
decl_stmt|;
comment|/**      * Create events manager to manage the events of Box connection's      * authenticated user.      *       * @param boxConnection      *            - Box connection to authenticated user account.      */
DECL|method|Box2EventsManager (BoxAPIConnection boxConnection)
specifier|public
name|Box2EventsManager
parameter_list|(
name|BoxAPIConnection
name|boxConnection
parameter_list|)
block|{
name|this
operator|.
name|boxConnection
operator|=
name|boxConnection
expr_stmt|;
block|}
comment|/**      * Create an event stream with optional starting initial position and add      * listener that will be notified when an event is received.      *       * @param startingPosition      *            - the starting position of the event stream.      * @param listener      *            - the listener to add to event stream.      *       * @return The event stream.      */
DECL|method|listen (EventListener listener, Long startingPosition)
specifier|public
name|void
name|listen
parameter_list|(
name|EventListener
name|listener
parameter_list|,
name|Long
name|startingPosition
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Listening for events with listener="
operator|+
name|listener
operator|+
literal|" at startingPosition="
operator|+
name|startingPosition
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parameter 'listener' is null: will not listen for events"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|startingPosition
operator|!=
literal|null
condition|)
block|{
name|eventStream
operator|=
operator|new
name|EventStream
argument_list|(
name|boxConnection
argument_list|,
name|startingPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eventStream
operator|=
operator|new
name|EventStream
argument_list|(
name|boxConnection
argument_list|)
expr_stmt|;
block|}
name|eventStream
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|eventStream
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|stopListening ()
specifier|public
name|void
name|stopListening
parameter_list|()
block|{
if|if
condition|(
name|eventStream
operator|!=
literal|null
operator|&&
name|eventStream
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|eventStream
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|eventStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

