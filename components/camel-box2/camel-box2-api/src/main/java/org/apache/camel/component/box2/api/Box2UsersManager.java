begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.box2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|box2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxAPIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|BoxUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|CreateUserParams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|box
operator|.
name|sdk
operator|.
name|EmailAlias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Box2 Users Manager  *   *<p>  * Provides operations to manage Box users.  *   *   *  */
end_comment

begin_class
DECL|class|Box2UsersManager
specifier|public
class|class
name|Box2UsersManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Box2UsersManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Box connection to authenticated user account.      */
DECL|field|boxConnection
specifier|private
name|BoxAPIConnection
name|boxConnection
decl_stmt|;
comment|/**      * Create users manager to manage the users of Box connection's      * authenticated user.      *       * @param boxConnection      *            - Box connection to authenticated user account.      */
DECL|method|Box2UsersManager (BoxAPIConnection boxConnection)
specifier|public
name|Box2UsersManager
parameter_list|(
name|BoxAPIConnection
name|boxConnection
parameter_list|)
block|{
name|this
operator|.
name|boxConnection
operator|=
name|boxConnection
expr_stmt|;
block|}
comment|/**      * Get current user.      *       * @return The current user.      */
DECL|method|getCurrentUser ()
specifier|public
name|BoxUser
name|getCurrentUser
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting current user"
argument_list|)
expr_stmt|;
return|return
name|BoxUser
operator|.
name|getCurrentUser
argument_list|(
name|boxConnection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get any managed users that match the filter term as well as any external      * users that match the filter term. For managed users it matches any users      * names or emails that start with the term. For external, it only does full      * match on email. This method is ideal to use in the case where you have a      * full email for a user and you don't know if they're managed or external.      *       * @param filterTerm      *            - The filter term to lookup users by (login for external,      *            login or name for managed); if<code>null</code> all managed      *            users are returned.      * @param fields      *            - the fields to retrieve. Leave this out for the standard      *            fields.      * @return All the enterprise users or enterprise users that matches the      *         filter.      */
DECL|method|getAllEnterpriseOrExternalUsers (String filterTerm, String... fields)
specifier|public
name|List
argument_list|<
name|BoxUser
operator|.
name|Info
argument_list|>
name|getAllEnterpriseOrExternalUsers
parameter_list|(
name|String
name|filterTerm
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting all enterprise users matching filterTerm="
operator|+
name|filterTerm
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BoxUser
operator|.
name|Info
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|BoxUser
operator|.
name|Info
argument_list|>
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|BoxUser
operator|.
name|Info
argument_list|>
name|iterable
decl_stmt|;
if|if
condition|(
name|filterTerm
operator|==
literal|null
condition|)
block|{
name|iterable
operator|=
name|BoxUser
operator|.
name|getAllEnterpriseUsers
argument_list|(
name|boxConnection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterable
operator|=
name|BoxUser
operator|.
name|getAllEnterpriseUsers
argument_list|(
name|boxConnection
argument_list|,
name|filterTerm
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BoxUser
operator|.
name|Info
name|info
range|:
name|iterable
control|)
block|{
name|users
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|users
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Provision a new user in an enterprise with additional user information.      *       * @param login      *            - the email address the user will use to login.      * @param name      *            - the name of the user.      * @param params      *            - additional user information.      * @return All the enterprise users or enterprise users that matches the      *         filter.      */
DECL|method|createEnterpriseUser (String login, String name, CreateUserParams params)
specifier|public
name|BoxUser
name|createEnterpriseUser
parameter_list|(
name|String
name|login
parameter_list|,
name|String
name|name
parameter_list|,
name|CreateUserParams
name|params
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating enterprise user with login="
operator|+
name|login
operator|+
literal|" name="
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|login
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'login' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'name' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
return|return
name|BoxUser
operator|.
name|createEnterpriseUser
argument_list|(
name|boxConnection
argument_list|,
name|login
argument_list|,
name|name
argument_list|,
name|params
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|BoxUser
operator|.
name|createEnterpriseUser
argument_list|(
name|boxConnection
argument_list|,
name|login
argument_list|,
name|name
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Provision a new app user in an enterprise with additional user      * information using Box Developer Edition.      *       * @param name      *            - the name of the user.      * @param params      *            - additional user information.      * @return All the enterprise users or enterprise users that matches the      *         filter.      */
DECL|method|createAppUser (String name, CreateUserParams params)
specifier|public
name|BoxUser
name|createAppUser
parameter_list|(
name|String
name|name
parameter_list|,
name|CreateUserParams
name|params
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating app user with name="
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'name' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
return|return
name|BoxUser
operator|.
name|createAppUser
argument_list|(
name|boxConnection
argument_list|,
name|name
argument_list|,
name|params
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|BoxUser
operator|.
name|createAppUser
argument_list|(
name|boxConnection
argument_list|,
name|name
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get user information.      *       * @param userId      *            - the id of user.      * @return The user information.      */
DECL|method|getUserInfo (String userId)
specifier|public
name|BoxUser
operator|.
name|Info
name|getUserInfo
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting info for user(id="
operator|+
name|userId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'userId' can not be null"
argument_list|)
throw|;
block|}
name|BoxUser
name|user
init|=
operator|new
name|BoxUser
argument_list|(
name|boxConnection
argument_list|,
name|userId
argument_list|)
decl_stmt|;
return|return
name|user
operator|.
name|getInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Update user information.      *       * @param userId      *            - the id of user to update.      * @param info      *            - the updated information      * @return The updated user.      */
DECL|method|updateUserInfo (String userId, BoxUser.Info info)
specifier|public
name|BoxUser
name|updateUserInfo
parameter_list|(
name|String
name|userId
parameter_list|,
name|BoxUser
operator|.
name|Info
name|info
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating info for user(id="
operator|+
name|userId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'userId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'info' can not be null"
argument_list|)
throw|;
block|}
name|BoxUser
name|user
init|=
operator|new
name|BoxUser
argument_list|(
name|boxConnection
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|user
operator|.
name|updateInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete user from an enterprise account.      *       * @param userId      *            - the id of user to delete.      * @param notifyUser      *            - whether or not to send an email notification to the user      *            that their account has been deleted.      * @param force      *            - whether or not this user should be deleted even if they      *            still own files.      */
DECL|method|deleteUser (String userId, boolean notifyUser, boolean force)
specifier|public
name|void
name|deleteUser
parameter_list|(
name|String
name|userId
parameter_list|,
name|boolean
name|notifyUser
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting user(id="
operator|+
name|userId
operator|+
literal|") notifyUser="
operator|+
name|notifyUser
operator|+
literal|" force="
operator|+
name|force
argument_list|)
expr_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'fileId' can not be null"
argument_list|)
throw|;
block|}
name|BoxUser
name|file
init|=
operator|new
name|BoxUser
argument_list|(
name|boxConnection
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|(
name|notifyUser
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Add a new email alias to user's account.      *       * @param userId      *            - the id of user.      * @param email      *            - the email address to add as an alias.      * @return The newly created email alias.      */
DECL|method|addUserEmailAlias (String userId, String email)
specifier|public
name|EmailAlias
name|addUserEmailAlias
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|email
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding email alias '"
operator|+
name|email
operator|+
literal|"' to user(id="
operator|+
name|userId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'userId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|email
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Paramerer 'email' can not be null"
argument_list|)
throw|;
block|}
name|BoxUser
name|user
init|=
operator|new
name|BoxUser
argument_list|(
name|boxConnection
argument_list|,
name|userId
argument_list|)
decl_stmt|;
return|return
name|user
operator|.
name|addEmailAlias
argument_list|(
name|email
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get a collection of all the email aliases for user.      *       * @param userId      *            - the id of user.      * @return A collection of all the email aliases for user.      */
DECL|method|getUserEmailAlias (String userId)
specifier|public
name|Collection
argument_list|<
name|EmailAlias
argument_list|>
name|getUserEmailAlias
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get email aliases for user(id="
operator|+
name|userId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'userId' can not be null"
argument_list|)
throw|;
block|}
name|BoxUser
name|user
init|=
operator|new
name|BoxUser
argument_list|(
name|boxConnection
argument_list|,
name|userId
argument_list|)
decl_stmt|;
return|return
name|user
operator|.
name|getEmailAliases
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Delete an email alias from user's account.      *       * @param userId      *            - the id of user.      * @param emailAliasId      *            - the id of the email alias to delete.      */
DECL|method|deleteUserEmailAlias (String userId, String emailAliasId)
specifier|public
name|void
name|deleteUserEmailAlias
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|emailAliasId
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting email_alias("
operator|+
name|emailAliasId
operator|+
literal|") for user(id="
operator|+
name|userId
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'userId' can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|emailAliasId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter 'emailAliasId' can not be null"
argument_list|)
throw|;
block|}
name|BoxUser
name|user
init|=
operator|new
name|BoxUser
argument_list|(
name|boxConnection
argument_list|,
name|userId
argument_list|)
decl_stmt|;
name|user
operator|.
name|deleteEmailAlias
argument_list|(
name|emailAliasId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BoxAPIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Box API returned the error code %d\n\n%s"
argument_list|,
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

