begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.neo4j
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|neo4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|neo4j
operator|.
name|graphdb
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|neo4j
operator|.
name|graphdb
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|neo4j
operator|.
name|kernel
operator|.
name|EmbeddedGraphDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|neo4j
operator|.
name|support
operator|.
name|DelegatingGraphDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|neo4j
operator|.
name|support
operator|.
name|Neo4jTemplate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyMapOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
operator|.
name|initMocks
import|;
end_import

begin_class
DECL|class|Neo4jProducerTest
specifier|public
class|class
name|Neo4jProducerTest
block|{
DECL|field|db
specifier|private
name|EmbeddedGraphDatabase
name|db
decl_stmt|;
annotation|@
name|Mock
DECL|field|endpoint
specifier|private
name|Neo4jEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|Mock
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|producer
specifier|private
name|Neo4jProducer
name|producer
decl_stmt|;
annotation|@
name|Mock
DECL|field|msg
specifier|private
name|Message
name|msg
decl_stmt|;
annotation|@
name|Mock
DECL|field|template
specifier|private
name|Neo4jTemplate
name|template
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|db
operator|=
operator|new
name|EmbeddedGraphDatabase
argument_list|(
name|getRandomStore
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|=
operator|new
name|Neo4jProducer
argument_list|(
name|endpoint
argument_list|,
operator|new
name|DelegatingGraphDatabase
argument_list|(
name|db
argument_list|)
argument_list|,
name|template
argument_list|)
expr_stmt|;
block|}
DECL|method|getRandomStore ()
name|String
name|getRandomStore
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"prefix"
argument_list|,
literal|"suffix"
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/neo4j-test-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
return|return
name|dir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateNodeEmptyBody ()
specifier|public
name|void
name|testCreateNodeEmptyBody
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|CREATE_NODE
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|mock
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|14L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|template
operator|.
name|createNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|createNode
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|msg
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_NODE_ID
argument_list|,
literal|14L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateNodePropertiesBody ()
specifier|public
name|void
name|testCreateNodePropertiesBody
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|CREATE_NODE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|mock
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|14L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|template
operator|.
name|createNode
argument_list|(
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|createNode
argument_list|(
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|msg
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_NODE_ID
argument_list|,
literal|14L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateRelationshipWithBasicBody ()
specifier|public
name|void
name|testCreateRelationshipWithBasicBody
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|CREATE_RELATIONSHIP
argument_list|)
expr_stmt|;
name|Node
name|start
init|=
name|mock
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|Node
name|end
init|=
name|mock
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|"friendswith"
decl_stmt|;
name|BasicRelationship
name|br
init|=
operator|new
name|BasicRelationship
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|Relationship
name|r
init|=
name|mock
argument_list|(
name|Relationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|99L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|template
operator|.
name|createRelationshipBetween
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|createRelationshipBetween
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|msg
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_RELATIONSHIP_ID
argument_list|,
literal|99L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateRelationshipWithSpringBody ()
specifier|public
name|void
name|testCreateRelationshipWithSpringBody
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|CREATE_RELATIONSHIP
argument_list|)
expr_stmt|;
name|Object
name|start
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|end
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|Relationship
argument_list|>
name|entityClass
init|=
name|Relationship
operator|.
name|class
decl_stmt|;
name|String
name|type
init|=
literal|"friendswith"
decl_stmt|;
name|SpringDataRelationship
argument_list|<
name|Relationship
argument_list|>
name|spring
init|=
operator|new
name|SpringDataRelationship
argument_list|<
name|Relationship
argument_list|>
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|entityClass
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|spring
argument_list|)
expr_stmt|;
name|Relationship
name|r
init|=
name|mock
argument_list|(
name|Relationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|55L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|template
operator|.
name|createRelationshipBetween
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|entityClass
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|createRelationshipBetween
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|entityClass
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|msg
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_RELATIONSHIP_ID
argument_list|,
literal|55L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Neo4jException
operator|.
name|class
argument_list|)
DECL|method|testNullOperationFails ()
specifier|public
name|void
name|testNullOperationFails
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveNodeBasicBody ()
specifier|public
name|void
name|testRemoveNodeBasicBody
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|mock
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|14L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|REMOVE_NODE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|delete
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveNodeById ()
specifier|public
name|void
name|testRemoveNodeById
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|mock
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|template
operator|.
name|getNode
argument_list|(
literal|44L
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|REMOVE_NODE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|44L
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|delete
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveRelationshipByBasic ()
specifier|public
name|void
name|testRemoveRelationshipByBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Relationship
name|r
init|=
name|mock
argument_list|(
name|Relationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|REMOVE_RELATIONSHIP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|delete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveRelationshipById ()
specifier|public
name|void
name|testRemoveRelationshipById
parameter_list|()
throws|throws
name|Exception
block|{
name|Relationship
name|r
init|=
name|mock
argument_list|(
name|Relationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|template
operator|.
name|getRelationship
argument_list|(
literal|51L
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|REMOVE_RELATIONSHIP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|51L
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|delete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveRelationshipBySpringData ()
specifier|public
name|void
name|testRemoveRelationshipBySpringData
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|start
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|end
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|String
argument_list|>
name|entityClass
init|=
name|String
operator|.
name|class
decl_stmt|;
name|String
name|type
init|=
literal|"friendswith"
decl_stmt|;
name|SpringDataRelationship
argument_list|<
name|String
argument_list|>
name|spring
init|=
operator|new
name|SpringDataRelationship
argument_list|<
name|String
argument_list|>
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|entityClass
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|REMOVE_RELATIONSHIP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|spring
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|template
argument_list|)
operator|.
name|deleteRelationshipBetween
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Neo4jException
operator|.
name|class
argument_list|)
DECL|method|testUnsupportedBodyForCreateNode ()
specifier|public
name|void
name|testUnsupportedBodyForCreateNode
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|CREATE_NODE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Neo4jException
operator|.
name|class
argument_list|)
DECL|method|testUnsupportedBodyForCreateRelationship ()
specifier|public
name|void
name|testUnsupportedBodyForCreateRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|CREATE_RELATIONSHIP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Neo4jException
operator|.
name|class
argument_list|)
DECL|method|testUnsupportedBodyForDeleteNode ()
specifier|public
name|void
name|testUnsupportedBodyForDeleteNode
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|REMOVE_NODE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Neo4jException
operator|.
name|class
argument_list|)
DECL|method|testUnsupportedBodyForDeleteRelationship ()
specifier|public
name|void
name|testUnsupportedBodyForDeleteRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|msg
operator|.
name|getHeader
argument_list|(
name|Neo4jEndpoint
operator|.
name|HEADER_OPERATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Neo4jOperation
operator|.
name|REMOVE_RELATIONSHIP
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

