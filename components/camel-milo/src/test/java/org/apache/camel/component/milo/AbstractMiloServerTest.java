begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|server
operator|.
name|MiloServerComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|AssertionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|security
operator|.
name|SecurityPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|DataValue
import|;
end_import

begin_class
DECL|class|AbstractMiloServerTest
specifier|public
specifier|abstract
class|class
name|AbstractMiloServerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|serverPort
specifier|private
name|int
name|serverPort
decl_stmt|;
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doPreSetup
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverPort
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
expr_stmt|;
block|}
DECL|method|getServerPort ()
specifier|public
name|int
name|getServerPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverPort
return|;
block|}
DECL|method|isAddServer ()
specifier|protected
name|boolean
name|isAddServer
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Replace the port placeholder with the dynamic server port      *       * @param uri the URI to process      * @return the result, may be {@code null} if the input is {@code null}      */
DECL|method|resolve (String uri)
specifier|protected
name|String
name|resolve
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
return|return
name|uri
operator|.
name|replace
argument_list|(
literal|"@@port@@"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|serverPort
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testBody (final AssertionClause clause, final Consumer<DataValue> valueConsumer)
specifier|public
specifier|static
name|void
name|testBody
parameter_list|(
specifier|final
name|AssertionClause
name|clause
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|DataValue
argument_list|>
name|valueConsumer
parameter_list|)
block|{
name|testBody
argument_list|(
name|clause
argument_list|,
name|DataValue
operator|.
name|class
argument_list|,
name|valueConsumer
argument_list|)
expr_stmt|;
block|}
DECL|method|testBody (final AssertionClause clause, final Class<T> bodyClass, final Consumer<T> valueConsumer)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|testBody
parameter_list|(
specifier|final
name|AssertionClause
name|clause
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|bodyClass
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|valueConsumer
parameter_list|)
block|{
name|clause
operator|.
name|predicate
argument_list|(
name|exchange
lambda|->
block|{
specifier|final
name|T
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|bodyClass
argument_list|)
decl_stmt|;
name|valueConsumer
operator|.
name|accept
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGoodValue (final Object expectedValue)
specifier|public
specifier|static
name|Consumer
argument_list|<
name|DataValue
argument_list|>
name|assertGoodValue
parameter_list|(
specifier|final
name|Object
name|expectedValue
parameter_list|)
block|{
return|return
name|value
lambda|->
block|{
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|getStatusCode
argument_list|()
operator|.
name|isGood
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|value
operator|.
name|getStatusCode
argument_list|()
operator|.
name|isBad
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|configureContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|configureContext (final CamelContext context)
specifier|protected
name|void
name|configureContext
parameter_list|(
specifier|final
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isAddServer
argument_list|()
condition|)
block|{
specifier|final
name|MiloServerComponent
name|server
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"milo-server"
argument_list|,
name|MiloServerComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|configureMiloServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureMiloServer (final MiloServerComponent server)
specifier|protected
name|void
name|configureMiloServer
parameter_list|(
specifier|final
name|MiloServerComponent
name|server
parameter_list|)
throws|throws
name|Exception
block|{
name|server
operator|.
name|setBindAddresses
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setBindPort
argument_list|(
name|this
operator|.
name|serverPort
argument_list|)
expr_stmt|;
name|server
operator|.
name|setUserAuthenticationCredentials
argument_list|(
literal|"foo:bar,foo2:bar2"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setUsernameSecurityPolicyUri
argument_list|(
name|SecurityPolicy
operator|.
name|None
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSecurityPoliciesById
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a default key store for testing      *      * @return always returns a key store      */
DECL|method|loadDefaultTestKey ()
specifier|protected
name|KeyStoreLoader
operator|.
name|Result
name|loadDefaultTestKey
parameter_list|()
block|{
try|try
block|{
specifier|final
name|KeyStoreLoader
name|loader
init|=
operator|new
name|KeyStoreLoader
argument_list|()
decl_stmt|;
name|loader
operator|.
name|setUrl
argument_list|(
literal|"file:src/test/resources/cert/cert.p12"
argument_list|)
expr_stmt|;
name|loader
operator|.
name|setKeyStorePassword
argument_list|(
literal|"pwd1"
argument_list|)
expr_stmt|;
name|loader
operator|.
name|setKeyPassword
argument_list|(
literal|"pwd1"
argument_list|)
expr_stmt|;
return|return
name|loader
operator|.
name|load
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|GeneralSecurityException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

