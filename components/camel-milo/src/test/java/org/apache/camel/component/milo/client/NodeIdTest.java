begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|AbstractMiloServerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|ExpandedNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|UrlEscapers
operator|.
name|urlFormParameterEscaper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|server
operator|.
name|MiloServerComponent
operator|.
name|DEFAULT_NAMESPACE_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|Unsigned
operator|.
name|uint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|Unsigned
operator|.
name|ushort
import|;
end_import

begin_comment
comment|/**  * Testing different ways to specify node IDs  */
end_comment

begin_class
DECL|class|NodeIdTest
specifier|public
class|class
name|NodeIdTest
extends|extends
name|AbstractMiloServerTest
block|{
annotation|@
name|Test
DECL|method|testFull1 ()
specifier|public
name|void
name|testFull1
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"nsu=%s;s=%s"
argument_list|,
name|DEFAULT_NAMESPACE_URI
argument_list|,
literal|"item-1"
argument_list|)
decl_stmt|;
name|testUri
argument_list|(
literal|"milo-client:tcp://foo:bar@localhost:@@port@@?samplingInterval=1000&node=RAW("
operator|+
name|s
operator|+
literal|")"
argument_list|,
name|DEFAULT_NAMESPACE_URI
argument_list|,
literal|"item-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFull2 ()
specifier|public
name|void
name|testFull2
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ns=%s;s=%s"
argument_list|,
literal|1
argument_list|,
literal|"item-1"
argument_list|)
decl_stmt|;
name|testUri
argument_list|(
literal|"milo-client:tcp://foo:bar@localhost:@@port@@?samplingInterval=1000&node=RAW("
operator|+
name|s
operator|+
literal|")"
argument_list|,
name|ushort
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"item-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFull3 ()
specifier|public
name|void
name|testFull3
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ns=%s;i=%s"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|testUri
argument_list|(
literal|"milo-client:tcp://foo:bar@localhost:@@port@@?samplingInterval=1000&node=RAW("
operator|+
name|s
operator|+
literal|")"
argument_list|,
name|ushort
argument_list|(
literal|1
argument_list|)
argument_list|,
name|uint
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFull1NonRaw ()
specifier|public
name|void
name|testFull1NonRaw
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ns=%s;i=%s"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|testUri
argument_list|(
literal|"milo-client:tcp://foo:bar@localhost:@@port@@?samplingInterval=1000&node="
operator|+
name|urlFormParameterEscaper
argument_list|()
operator|.
name|escape
argument_list|(
name|s
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|1
argument_list|)
argument_list|,
name|uint
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDocURL ()
specifier|public
name|void
name|testDocURL
parameter_list|()
block|{
name|testUri
argument_list|(
literal|"milo-client://user:password@localhost:12345?node=RAW(nsu=http://foo.bar;s=foo/bar)"
argument_list|,
literal|"http://foo.bar"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ResolveEndpointFailedException
operator|.
name|class
argument_list|)
DECL|method|testMixed ()
specifier|public
name|void
name|testMixed
parameter_list|()
block|{
comment|// This must fail since "node" is incomplete
name|testUri
argument_list|(
literal|"milo-client:tcp://foo:bar@localhost:@@port@@?node=foo&namespaceUri="
operator|+
name|DEFAULT_NAMESPACE_URI
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testUri (final String uri, final Serializable namespace, final Serializable partialNodeId)
specifier|private
name|void
name|testUri
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|Serializable
name|namespace
parameter_list|,
specifier|final
name|Serializable
name|partialNodeId
parameter_list|)
block|{
name|assertNodeId
argument_list|(
name|getMandatoryEndpoint
argument_list|(
name|resolve
argument_list|(
name|uri
argument_list|)
argument_list|,
name|MiloClientEndpoint
operator|.
name|class
argument_list|)
argument_list|,
name|namespace
argument_list|,
name|partialNodeId
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNodeId (final MiloClientEndpoint endpoint, final Serializable namespace, final Serializable partialNodeId)
specifier|private
name|void
name|assertNodeId
parameter_list|(
specifier|final
name|MiloClientEndpoint
name|endpoint
parameter_list|,
specifier|final
name|Serializable
name|namespace
parameter_list|,
specifier|final
name|Serializable
name|partialNodeId
parameter_list|)
block|{
specifier|final
name|ExpandedNodeId
name|en
init|=
name|endpoint
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|namespace
argument_list|,
name|en
operator|.
name|getNamespaceUri
argument_list|()
operator|==
literal|null
condition|?
name|en
operator|.
name|getNamespaceIndex
argument_list|()
else|:
name|en
operator|.
name|getNamespaceUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|partialNodeId
argument_list|,
name|en
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

