begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo.call
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|call
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|AbstractMiloServerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|call
operator|.
name|MockCall
operator|.
name|Call1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|server
operator|.
name|OpcUaServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|server
operator|.
name|api
operator|.
name|config
operator|.
name|OpcUaServerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|server
operator|.
name|api
operator|.
name|config
operator|.
name|OpcUaServerConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|server
operator|.
name|identity
operator|.
name|AnonymousIdentityValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|server
operator|.
name|nodes
operator|.
name|UaMethodNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|application
operator|.
name|DefaultCertificateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|application
operator|.
name|InsecureCertificateValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|security
operator|.
name|SecurityPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|NodeIds
operator|.
name|nodeValue
import|;
end_import

begin_comment
comment|/**  * Unit tests for calling from the client side  */
end_comment

begin_class
DECL|class|CallClientTest
specifier|public
class|class
name|CallClientTest
extends|extends
name|AbstractMiloServerTest
block|{
DECL|field|DIRECT_START_1
specifier|private
specifier|static
specifier|final
name|String
name|DIRECT_START_1
init|=
literal|"direct:start1"
decl_stmt|;
DECL|field|MILO_CLIENT_BASE_C1
specifier|private
specifier|static
specifier|final
name|String
name|MILO_CLIENT_BASE_C1
init|=
literal|"milo-client:tcp://localhost:@@port@@"
decl_stmt|;
DECL|field|MILO_CLIENT_ITEM_C1_1
specifier|private
specifier|static
specifier|final
name|String
name|MILO_CLIENT_ITEM_C1_1
init|=
name|MILO_CLIENT_BASE_C1
operator|+
literal|"?node="
operator|+
name|nodeValue
argument_list|(
name|MockNamespace
operator|.
name|URI
argument_list|,
name|MockNamespace
operator|.
name|FOLDER_ID
argument_list|)
operator|+
literal|"&method="
operator|+
name|nodeValue
argument_list|(
name|MockNamespace
operator|.
name|URI
argument_list|,
literal|"id1"
argument_list|)
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
name|DIRECT_START_1
argument_list|)
DECL|field|producer1
specifier|protected
name|ProducerTemplate
name|producer1
decl_stmt|;
DECL|field|server
specifier|private
name|OpcUaServer
name|server
decl_stmt|;
DECL|field|call1
specifier|private
name|Call1
name|call1
decl_stmt|;
annotation|@
name|Override
DECL|method|isAddServer ()
specifier|protected
name|boolean
name|isAddServer
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Before
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|OpcUaServerConfigBuilder
name|config
init|=
operator|new
name|OpcUaServerConfigBuilder
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBindAddresses
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBindPort
argument_list|(
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setIdentityValidator
argument_list|(
name|AnonymousIdentityValidator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUserTokenPolicies
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|OpcUaServerConfig
operator|.
name|USER_TOKEN_POLICY_ANONYMOUS
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSecurityPolicies
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SecurityPolicy
operator|.
name|None
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCertificateManager
argument_list|(
operator|new
name|DefaultCertificateManager
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCertificateValidator
argument_list|(
operator|new
name|InsecureCertificateValidator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
operator|new
name|OpcUaServer
argument_list|(
name|config
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|call1
operator|=
operator|new
name|MockCall
operator|.
name|Call1
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|getNamespaceManager
argument_list|()
operator|.
name|registerAndAdd
argument_list|(
name|MockNamespace
operator|.
name|URI
argument_list|,
name|index
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|UaMethodNode
argument_list|>
name|methods
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|methods
operator|.
name|add
argument_list|(
name|MockCall
operator|.
name|fromNode
argument_list|(
name|index
argument_list|,
name|this
operator|.
name|server
operator|.
name|getNodeMap
argument_list|()
argument_list|,
literal|"id1"
argument_list|,
literal|"name1"
argument_list|,
name|this
operator|.
name|call1
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|MockNamespace
argument_list|(
name|index
argument_list|,
name|this
operator|.
name|server
argument_list|,
name|methods
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|startup
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|DIRECT_START_1
argument_list|)
operator|.
name|to
argument_list|(
name|resolve
argument_list|(
name|MILO_CLIENT_ITEM_C1_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testCall1 ()
specifier|public
name|void
name|testCall1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// call
name|doCall
argument_list|(
name|this
operator|.
name|producer1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|doCall
argument_list|(
name|this
operator|.
name|producer1
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
comment|// assert
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|,
name|this
operator|.
name|call1
operator|.
name|calls
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doCall (final ProducerTemplate producerTemplate, final Object input)
specifier|private
specifier|static
name|void
name|doCall
parameter_list|(
specifier|final
name|ProducerTemplate
name|producerTemplate
parameter_list|,
specifier|final
name|Object
name|input
parameter_list|)
block|{
comment|// we always write synchronously since we do need the message order
name|producerTemplate
operator|.
name|sendBodyAndHeader
argument_list|(
name|input
argument_list|,
literal|"await"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

