begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|DataValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|Variant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ConverterTest
specifier|public
class|class
name|ConverterTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testDataValueToVariant ()
specifier|public
name|void
name|testDataValueToVariant
parameter_list|()
block|{
specifier|final
name|Variant
name|value
init|=
name|testConvertDataValue
argument_list|(
literal|"Foo"
argument_list|,
name|Variant
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Foo"
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVariantToDataValue ()
specifier|public
name|void
name|testVariantToDataValue
parameter_list|()
block|{
specifier|final
name|DataValue
name|value
init|=
name|testConvert
argument_list|(
operator|new
name|Variant
argument_list|(
literal|"Foo"
argument_list|)
argument_list|,
name|DataValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Foo"
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|.
name|getStatusCode
argument_list|()
operator|.
name|isGood
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvert (final Object value, final Class<T> clazz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|testConvert
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|this
operator|.
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|clazz
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|testConvertDataValue (final Object value, final Class<T> clazz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|testConvertDataValue
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|this
operator|.
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|clazz
argument_list|,
operator|new
name|DataValue
argument_list|(
operator|new
name|Variant
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

