begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo.client.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|client
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|NamespaceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|PartialNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|client
operator|.
name|MiloClientConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|OpcUaClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|config
operator|.
name|OpcUaClientConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|identity
operator|.
name|AnonymousProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|identity
operator|.
name|CompositeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|identity
operator|.
name|IdentityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|identity
operator|.
name|UsernameProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|subscriptions
operator|.
name|UaMonitoredItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|subscriptions
operator|.
name|UaSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|subscriptions
operator|.
name|UaSubscriptionManager
operator|.
name|SubscriptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|client
operator|.
name|UaTcpStackClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|AttributeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|Identifiers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|StatusCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|UaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|DataValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|QualifiedName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|StatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|Unsigned
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|enumerated
operator|.
name|MonitoringMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|enumerated
operator|.
name|TimestampsToReturn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|structured
operator|.
name|EndpointDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|structured
operator|.
name|MonitoredItemCreateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|structured
operator|.
name|MonitoringParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|structured
operator|.
name|ReadValueId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SubscriptionManager
specifier|public
class|class
name|SubscriptionManager
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubscriptionManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clientHandleCounter
specifier|private
specifier|final
name|AtomicLong
name|clientHandleCounter
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|class|SubscriptionListenerImpl
specifier|private
specifier|final
class|class
name|SubscriptionListenerImpl
implements|implements
name|SubscriptionListener
block|{
annotation|@
name|Override
DECL|method|onSubscriptionTransferFailed (final UaSubscription subscription, final StatusCode statusCode)
specifier|public
name|void
name|onSubscriptionTransferFailed
parameter_list|(
specifier|final
name|UaSubscription
name|subscription
parameter_list|,
specifier|final
name|StatusCode
name|statusCode
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Transfer failed {} : {}"
argument_list|,
name|subscription
operator|.
name|getSubscriptionId
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
comment|// we simply tear it down and build it up again
name|handleConnectionFailue
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Subscription failed to reconnect"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onStatusChanged (final UaSubscription subscription, final StatusCode status)
specifier|public
name|void
name|onStatusChanged
parameter_list|(
specifier|final
name|UaSubscription
name|subscription
parameter_list|,
specifier|final
name|StatusCode
name|status
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Subscription status changed {} : {}"
argument_list|,
name|subscription
operator|.
name|getSubscriptionId
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onPublishFailure (final UaException exception)
specifier|public
name|void
name|onPublishFailure
parameter_list|(
specifier|final
name|UaException
name|exception
parameter_list|)
block|{ 		}
annotation|@
name|Override
DECL|method|onNotificationDataLost (final UaSubscription subscription)
specifier|public
name|void
name|onNotificationDataLost
parameter_list|(
specifier|final
name|UaSubscription
name|subscription
parameter_list|)
block|{ 		}
annotation|@
name|Override
DECL|method|onKeepAlive (final UaSubscription subscription, final DateTime publishTime)
specifier|public
name|void
name|onKeepAlive
parameter_list|(
specifier|final
name|UaSubscription
name|subscription
parameter_list|,
specifier|final
name|DateTime
name|publishTime
parameter_list|)
block|{ 		}
block|}
DECL|interface|Worker
specifier|public
interface|interface
name|Worker
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|work (T on)
specifier|public
name|void
name|work
parameter_list|(
name|T
name|on
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|class|Subscription
specifier|private
specifier|static
class|class
name|Subscription
block|{
DECL|field|namespaceId
specifier|private
specifier|final
name|NamespaceId
name|namespaceId
decl_stmt|;
DECL|field|partialNodeId
specifier|private
specifier|final
name|PartialNodeId
name|partialNodeId
decl_stmt|;
DECL|field|samplingInterval
specifier|private
specifier|final
name|Double
name|samplingInterval
decl_stmt|;
DECL|field|valueConsumer
specifier|private
specifier|final
name|Consumer
argument_list|<
name|DataValue
argument_list|>
name|valueConsumer
decl_stmt|;
DECL|method|Subscription (final NamespaceId namespaceId, final PartialNodeId partialNodeId, final Double samplingInterval, final Consumer<DataValue> valueConsumer)
specifier|public
name|Subscription
parameter_list|(
specifier|final
name|NamespaceId
name|namespaceId
parameter_list|,
specifier|final
name|PartialNodeId
name|partialNodeId
parameter_list|,
specifier|final
name|Double
name|samplingInterval
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|DataValue
argument_list|>
name|valueConsumer
parameter_list|)
block|{
name|this
operator|.
name|namespaceId
operator|=
name|namespaceId
expr_stmt|;
name|this
operator|.
name|partialNodeId
operator|=
name|partialNodeId
expr_stmt|;
name|this
operator|.
name|samplingInterval
operator|=
name|samplingInterval
expr_stmt|;
name|this
operator|.
name|valueConsumer
operator|=
name|valueConsumer
expr_stmt|;
block|}
DECL|method|getNamespaceId ()
specifier|public
name|NamespaceId
name|getNamespaceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespaceId
return|;
block|}
DECL|method|getPartialNodeId ()
specifier|public
name|PartialNodeId
name|getPartialNodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|partialNodeId
return|;
block|}
DECL|method|getSamplingInterval ()
specifier|public
name|Double
name|getSamplingInterval
parameter_list|()
block|{
return|return
name|this
operator|.
name|samplingInterval
return|;
block|}
DECL|method|getValueConsumer ()
specifier|public
name|Consumer
argument_list|<
name|DataValue
argument_list|>
name|getValueConsumer
parameter_list|()
block|{
return|return
name|this
operator|.
name|valueConsumer
return|;
block|}
block|}
DECL|class|Connected
specifier|private
class|class
name|Connected
block|{
DECL|field|client
specifier|private
name|OpcUaClient
name|client
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|UaSubscription
name|manager
decl_stmt|;
DECL|field|badSubscriptions
specifier|private
specifier|final
name|Map
argument_list|<
name|UInteger
argument_list|,
name|Subscription
argument_list|>
name|badSubscriptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|goodSubscriptions
specifier|private
specifier|final
name|Map
argument_list|<
name|UInteger
argument_list|,
name|UaMonitoredItem
argument_list|>
name|goodSubscriptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|namespaceCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|UShort
argument_list|>
name|namespaceCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Connected (final OpcUaClient client, final UaSubscription manager)
specifier|public
name|Connected
parameter_list|(
specifier|final
name|OpcUaClient
name|client
parameter_list|,
specifier|final
name|UaSubscription
name|manager
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
DECL|method|putSubscriptions (final Map<UInteger, Subscription> subscriptions)
specifier|public
name|void
name|putSubscriptions
parameter_list|(
specifier|final
name|Map
argument_list|<
name|UInteger
argument_list|,
name|Subscription
argument_list|>
name|subscriptions
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|subscriptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// convert to requests
specifier|final
name|List
argument_list|<
name|MonitoredItemCreateRequest
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subscriptions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|UInteger
argument_list|,
name|Subscription
argument_list|>
name|entry
range|:
name|subscriptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Subscription
name|s
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|UShort
name|namespaceIndex
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getNamespaceId
argument_list|()
operator|.
name|isNumeric
argument_list|()
condition|)
block|{
name|namespaceIndex
operator|=
name|s
operator|.
name|getNamespaceId
argument_list|()
operator|.
name|getNumeric
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|namespaceIndex
operator|=
name|lookupNamespace
argument_list|(
name|s
operator|.
name|getNamespaceId
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespaceIndex
operator|==
literal|null
condition|)
block|{
name|handleSubscriptionError
argument_list|(
operator|new
name|StatusCode
argument_list|(
name|StatusCodes
operator|.
name|Bad_InvalidArgument
argument_list|)
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|NodeId
name|nodeId
init|=
name|s
operator|.
name|getPartialNodeId
argument_list|()
operator|.
name|toNodeId
argument_list|(
name|namespaceIndex
argument_list|)
decl_stmt|;
specifier|final
name|ReadValueId
name|itemId
init|=
operator|new
name|ReadValueId
argument_list|(
name|nodeId
argument_list|,
name|AttributeId
operator|.
name|Value
operator|.
name|uid
argument_list|()
argument_list|,
literal|null
argument_list|,
name|QualifiedName
operator|.
name|NULL_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|MonitoringParameters
name|parameters
init|=
operator|new
name|MonitoringParameters
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|s
operator|.
name|getSamplingInterval
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|items
operator|.
name|add
argument_list|(
operator|new
name|MonitoredItemCreateRequest
argument_list|(
name|itemId
argument_list|,
name|MonitoringMode
operator|.
name|Reporting
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// create monitors
name|this
operator|.
name|manager
operator|.
name|createMonitoredItems
argument_list|(
name|TimestampsToReturn
operator|.
name|Both
argument_list|,
name|items
argument_list|,
parameter_list|(
name|item
parameter_list|,
name|idx
parameter_list|)
lambda|->
block|{
comment|// set value listener
specifier|final
name|Subscription
name|s
init|=
name|subscriptions
operator|.
name|get
argument_list|(
name|item
operator|.
name|getClientHandle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getStatusCode
argument_list|()
operator|.
name|isBad
argument_list|()
condition|)
block|{
name|handleSubscriptionError
argument_list|(
name|item
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|item
operator|.
name|getClientHandle
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|goodSubscriptions
operator|.
name|put
argument_list|(
name|item
operator|.
name|getClientHandle
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|.
name|setValueConsumer
argument_list|(
name|s
operator|.
name|getValueConsumer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|badSubscriptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SubscriptionManager
operator|.
name|this
operator|.
name|executor
operator|.
name|schedule
argument_list|(
name|this
operator|::
name|resubscribe
argument_list|,
name|SubscriptionManager
operator|.
name|this
operator|.
name|reconnectTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleSubscriptionError (final StatusCode statusCode, final UInteger clientHandle, final Subscription s)
specifier|private
name|void
name|handleSubscriptionError
parameter_list|(
specifier|final
name|StatusCode
name|statusCode
parameter_list|,
specifier|final
name|UInteger
name|clientHandle
parameter_list|,
specifier|final
name|Subscription
name|s
parameter_list|)
block|{
name|this
operator|.
name|badSubscriptions
operator|.
name|put
argument_list|(
name|clientHandle
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|.
name|getValueConsumer
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|DataValue
argument_list|(
name|statusCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|resubscribe ()
specifier|private
name|void
name|resubscribe
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|UInteger
argument_list|,
name|Subscription
argument_list|>
name|subscriptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|badSubscriptions
argument_list|)
decl_stmt|;
name|this
operator|.
name|badSubscriptions
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|putSubscriptions
argument_list|(
name|subscriptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|handleConnectionFailue
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|activate (final UInteger clientHandle, final Subscription subscription)
specifier|public
name|void
name|activate
parameter_list|(
specifier|final
name|UInteger
name|clientHandle
parameter_list|,
specifier|final
name|Subscription
name|subscription
parameter_list|)
throws|throws
name|Exception
block|{
name|putSubscriptions
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|clientHandle
argument_list|,
name|subscription
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deactivate (final UInteger clientHandle)
specifier|public
name|void
name|deactivate
parameter_list|(
specifier|final
name|UInteger
name|clientHandle
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|UaMonitoredItem
name|item
init|=
name|this
operator|.
name|goodSubscriptions
operator|.
name|remove
argument_list|(
name|clientHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|manager
operator|.
name|deleteMonitoredItems
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|item
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|badSubscriptions
operator|.
name|remove
argument_list|(
name|clientHandle
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|lookupNamespace (final String namespaceUri)
specifier|private
name|UShort
name|lookupNamespace
parameter_list|(
specifier|final
name|String
name|namespaceUri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|lookupNamespaceIndex
argument_list|(
name|namespaceUri
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|lookupNamespaceIndex (final String namespaceUri)
specifier|private
name|CompletableFuture
argument_list|<
name|UShort
argument_list|>
name|lookupNamespaceIndex
parameter_list|(
specifier|final
name|String
name|namespaceUri
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking up namespace: {}"
argument_list|,
name|namespaceUri
argument_list|)
expr_stmt|;
comment|// check cache
block|{
specifier|final
name|UShort
name|result
init|=
name|this
operator|.
name|namespaceCache
operator|.
name|get
argument_list|(
name|namespaceUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found namespace in cache: {} -> {}"
argument_list|,
name|namespaceUri
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
comment|/* 			 * We always read the server side table since the cache did not help 			 * us and the namespace might have been added to the server at a 			 * later time. 			 */
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up namespace on server: {}"
argument_list|,
name|namespaceUri
argument_list|)
expr_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|DataValue
argument_list|>
name|future
init|=
name|this
operator|.
name|client
operator|.
name|readValue
argument_list|(
literal|0
argument_list|,
name|TimestampsToReturn
operator|.
name|Neither
argument_list|,
name|Identifiers
operator|.
name|Server_NamespaceArray
argument_list|)
decl_stmt|;
return|return
name|future
operator|.
name|thenApply
argument_list|(
name|value
lambda|->
block|{
specifier|final
name|Object
name|rawValue
init|=
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rawValue
operator|instanceof
name|String
index|[]
condition|)
block|{
specifier|final
name|String
index|[]
name|namespaces
init|=
operator|(
name|String
index|[]
operator|)
name|rawValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namespaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|namespaces
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|namespaceUri
argument_list|)
condition|)
block|{
specifier|final
name|UShort
name|result
init|=
name|Unsigned
operator|.
name|ushort
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|this
operator|.
name|namespaceCache
operator|.
name|putIfAbsent
argument_list|(
name|namespaceUri
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|client
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|client
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|write (final NamespaceId namespaceId, final PartialNodeId partialNodeId, final DataValue value)
specifier|public
name|CompletableFuture
argument_list|<
name|StatusCode
argument_list|>
name|write
parameter_list|(
specifier|final
name|NamespaceId
name|namespaceId
parameter_list|,
specifier|final
name|PartialNodeId
name|partialNodeId
parameter_list|,
specifier|final
name|DataValue
name|value
parameter_list|)
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|UShort
argument_list|>
name|future
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Namespace: {}"
argument_list|,
name|namespaceId
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespaceId
operator|.
name|isNumeric
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using provided index: {}"
argument_list|,
name|namespaceId
operator|.
name|getNumeric
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|=
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|namespaceId
operator|.
name|getNumeric
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking up namespace: {}"
argument_list|,
name|namespaceId
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|=
name|lookupNamespaceIndex
argument_list|(
name|namespaceId
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|future
operator|.
name|thenCompose
argument_list|(
name|index
lambda|->
block|{
specifier|final
name|NodeId
name|nodeId
init|=
name|partialNodeId
operator|.
name|toNodeId
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node - partial: {}, full: {}"
argument_list|,
name|partialNodeId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|client
operator|.
name|writeValue
argument_list|(
name|nodeId
argument_list|,
name|value
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|status
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Write to ns={}/{}, id={} = {} -> {}"
argument_list|,
name|namespaceId
argument_list|,
name|index
argument_list|,
name|nodeId
argument_list|,
name|value
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to write"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
block|}
DECL|field|configuration
specifier|private
specifier|final
name|MiloClientConfiguration
name|configuration
decl_stmt|;
DECL|field|clientBuilder
specifier|private
specifier|final
name|OpcUaClientConfigBuilder
name|clientBuilder
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ScheduledExecutorService
name|executor
decl_stmt|;
DECL|field|reconnectTimeout
specifier|private
specifier|final
name|long
name|reconnectTimeout
decl_stmt|;
DECL|field|connected
specifier|private
name|Connected
name|connected
decl_stmt|;
DECL|field|disposed
specifier|private
name|boolean
name|disposed
decl_stmt|;
DECL|field|reconnectJob
specifier|private
name|Future
argument_list|<
name|?
argument_list|>
name|reconnectJob
decl_stmt|;
DECL|field|subscriptions
specifier|private
specifier|final
name|Map
argument_list|<
name|UInteger
argument_list|,
name|Subscription
argument_list|>
name|subscriptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SubscriptionManager (final MiloClientConfiguration configuration, final OpcUaClientConfigBuilder clientBuilder, final ScheduledExecutorService executor, final long reconnectTimeout)
specifier|public
name|SubscriptionManager
parameter_list|(
specifier|final
name|MiloClientConfiguration
name|configuration
parameter_list|,
specifier|final
name|OpcUaClientConfigBuilder
name|clientBuilder
parameter_list|,
specifier|final
name|ScheduledExecutorService
name|executor
parameter_list|,
specifier|final
name|long
name|reconnectTimeout
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|clientBuilder
operator|=
name|clientBuilder
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|reconnectTimeout
operator|=
name|reconnectTimeout
expr_stmt|;
name|connect
argument_list|()
expr_stmt|;
block|}
DECL|method|handleConnectionFailue (final Throwable e)
specifier|private
specifier|synchronized
name|void
name|handleConnectionFailue
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|connected
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|connected
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|connected
operator|=
literal|null
expr_stmt|;
block|}
comment|// log
name|LOG
operator|.
name|info
argument_list|(
literal|"Connection failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// always trigger re-connect
name|triggerReconnect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|connect ()
specifier|private
name|void
name|connect
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting connect"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|reconnectJob
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|disposed
condition|)
block|{
comment|// we woke up disposed
return|return;
block|}
block|}
try|try
block|{
specifier|final
name|Connected
name|connected
init|=
name|performConnect
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connect call done"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|disposed
condition|)
block|{
comment|// we got disposed during connect
return|return;
block|}
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting subscriptions: {}"
argument_list|,
name|this
operator|.
name|subscriptions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connected
operator|.
name|putSubscriptions
argument_list|(
name|this
operator|.
name|subscriptions
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Update state : {} -> {}"
argument_list|,
name|this
operator|.
name|connected
argument_list|,
name|connected
argument_list|)
expr_stmt|;
specifier|final
name|Connected
name|oldConnected
init|=
name|this
operator|.
name|connected
decl_stmt|;
name|this
operator|.
name|connected
operator|=
name|connected
expr_stmt|;
if|if
condition|(
name|oldConnected
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dispose old state"
argument_list|)
expr_stmt|;
name|oldConnected
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to set subscriptions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|connected
operator|.
name|dispose
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to connect"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|triggerReconnect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|Connected
name|connected
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|disposed
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|disposed
operator|=
literal|true
expr_stmt|;
name|connected
operator|=
name|this
operator|.
name|connected
expr_stmt|;
block|}
if|if
condition|(
name|connected
operator|!=
literal|null
condition|)
block|{
comment|// dispose outside of lock
name|connected
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|triggerReconnect (final boolean immediate)
specifier|private
specifier|synchronized
name|void
name|triggerReconnect
parameter_list|(
specifier|final
name|boolean
name|immediate
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trigger re-connect (immediate: {})"
argument_list|,
name|immediate
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|reconnectJob
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-connect already scheduled"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|immediate
condition|)
block|{
name|this
operator|.
name|reconnectJob
operator|=
name|this
operator|.
name|executor
operator|.
name|submit
argument_list|(
name|this
operator|::
name|connect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|reconnectJob
operator|=
name|this
operator|.
name|executor
operator|.
name|schedule
argument_list|(
name|this
operator|::
name|connect
argument_list|,
name|this
operator|.
name|reconnectTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performConnect ()
specifier|private
name|Connected
name|performConnect
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|EndpointDescription
name|endpoint
init|=
name|UaTcpStackClient
operator|.
name|getEndpoints
argument_list|(
name|this
operator|.
name|configuration
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|thenApply
argument_list|(
name|endpoints
lambda|->
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found enpoints:"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|EndpointDescription
name|ep
range|:
name|endpoints
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\t{}"
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|findEndpoint
argument_list|(
name|endpoints
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Selected endpoint: {}"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|this
operator|.
name|configuration
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
decl_stmt|;
comment|// set identity providers
specifier|final
name|List
argument_list|<
name|IdentityProvider
argument_list|>
name|providers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|user
init|=
name|uri
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
operator|!
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|String
index|[]
name|creds
init|=
name|user
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|creds
operator|!=
literal|null
operator|&&
name|creds
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Enable username/password provider: {}"
argument_list|,
name|creds
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|providers
operator|.
name|add
argument_list|(
operator|new
name|UsernameProvider
argument_list|(
name|creds
index|[
literal|0
index|]
argument_list|,
name|creds
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: need a way to clone
specifier|final
name|OpcUaClientConfigBuilder
name|cfg
init|=
name|this
operator|.
name|clientBuilder
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
operator|new
name|AnonymousProvider
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setIdentityProvider
argument_list|(
operator|new
name|CompositeProvider
argument_list|(
name|providers
argument_list|)
argument_list|)
expr_stmt|;
comment|// set endpoint
name|cfg
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
specifier|final
name|OpcUaClient
name|client
init|=
operator|new
name|OpcUaClient
argument_list|(
name|cfg
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|UaSubscription
name|manager
init|=
name|client
operator|.
name|getSubscriptionManager
argument_list|()
operator|.
name|createSubscription
argument_list|(
literal|1_000.0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|client
operator|.
name|getSubscriptionManager
argument_list|()
operator|.
name|addSubscriptionListener
argument_list|(
operator|new
name|SubscriptionListenerImpl
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Connected
argument_list|(
name|client
argument_list|,
name|manager
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
comment|// clean up
name|client
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|findEndpoint (final EndpointDescription[] endpoints)
specifier|private
name|EndpointDescription
name|findEndpoint
parameter_list|(
specifier|final
name|EndpointDescription
index|[]
name|endpoints
parameter_list|)
block|{
name|EndpointDescription
name|best
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|EndpointDescription
name|ep
range|:
name|endpoints
control|)
block|{
if|if
condition|(
name|best
operator|==
literal|null
operator|||
name|ep
operator|.
name|getSecurityLevel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|best
operator|.
name|getSecurityLevel
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|best
operator|=
name|ep
expr_stmt|;
block|}
block|}
return|return
name|best
return|;
block|}
DECL|method|whenConnected (final Worker<Connected> worker)
specifier|protected
specifier|synchronized
name|void
name|whenConnected
parameter_list|(
specifier|final
name|Worker
argument_list|<
name|Connected
argument_list|>
name|worker
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|connected
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|worker
operator|.
name|work
argument_list|(
name|this
operator|.
name|connected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|handleConnectionFailue
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|registerItem (final NamespaceId namespaceId, final PartialNodeId partialNodeId, final Double samplingInterval, final Consumer<DataValue> valueConsumer)
specifier|public
name|UInteger
name|registerItem
parameter_list|(
specifier|final
name|NamespaceId
name|namespaceId
parameter_list|,
specifier|final
name|PartialNodeId
name|partialNodeId
parameter_list|,
specifier|final
name|Double
name|samplingInterval
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|DataValue
argument_list|>
name|valueConsumer
parameter_list|)
block|{
specifier|final
name|UInteger
name|clientHandle
init|=
name|Unsigned
operator|.
name|uint
argument_list|(
name|this
operator|.
name|clientHandleCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Subscription
name|subscription
init|=
operator|new
name|Subscription
argument_list|(
name|namespaceId
argument_list|,
name|partialNodeId
argument_list|,
name|samplingInterval
argument_list|,
name|valueConsumer
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|subscriptions
operator|.
name|put
argument_list|(
name|clientHandle
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
name|whenConnected
argument_list|(
name|connected
lambda|->
block|{
name|connected
operator|.
name|activate
argument_list|(
name|clientHandle
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|clientHandle
return|;
block|}
DECL|method|unregisterItem (final UInteger clientHandle)
specifier|public
specifier|synchronized
name|void
name|unregisterItem
parameter_list|(
specifier|final
name|UInteger
name|clientHandle
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|subscriptions
operator|.
name|remove
argument_list|(
name|clientHandle
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|whenConnected
argument_list|(
name|connected
lambda|->
block|{
name|connected
operator|.
name|deactivate
argument_list|(
name|clientHandle
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (final NamespaceId namespaceId, final PartialNodeId partialNodeId, final DataValue value, final boolean await)
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|NamespaceId
name|namespaceId
parameter_list|,
specifier|final
name|PartialNodeId
name|partialNodeId
parameter_list|,
specifier|final
name|DataValue
name|value
parameter_list|,
specifier|final
name|boolean
name|await
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Object
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|connected
operator|!=
literal|null
condition|)
block|{
name|future
operator|=
name|this
operator|.
name|connected
operator|.
name|write
argument_list|(
name|namespaceId
argument_list|,
name|partialNodeId
argument_list|,
name|value
argument_list|)
operator|.
name|handleAsync
argument_list|(
parameter_list|(
name|status
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
comment|// handle outside the lock, running using
comment|// handleAsync
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|handleConnectionFailue
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|,
name|this
operator|.
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|await
operator|&&
name|future
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// should never happen since our previous handler should not
comment|// fail
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to wait for completion"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

