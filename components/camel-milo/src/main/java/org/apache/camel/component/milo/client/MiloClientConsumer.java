begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|client
operator|.
name|MiloClientConnection
operator|.
name|MonitorHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|DataValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|ExpandedNodeId
import|;
end_import

begin_class
DECL|class|MiloClientConsumer
specifier|public
class|class
name|MiloClientConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|connection
specifier|private
specifier|final
name|MiloClientConnection
name|connection
decl_stmt|;
DECL|field|handle
specifier|private
name|MonitorHandle
name|handle
decl_stmt|;
DECL|field|node
specifier|private
name|ExpandedNodeId
name|node
decl_stmt|;
DECL|field|samplingInterval
specifier|private
name|Double
name|samplingInterval
decl_stmt|;
DECL|method|MiloClientConsumer (final MiloClientEndpoint endpoint, final Processor processor, final MiloClientConnection connection)
specifier|public
name|MiloClientConsumer
parameter_list|(
specifier|final
name|MiloClientEndpoint
name|endpoint
parameter_list|,
specifier|final
name|Processor
name|processor
parameter_list|,
specifier|final
name|MiloClientConnection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|requireNonNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|endpoint
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|samplingInterval
operator|=
name|endpoint
operator|.
name|getSamplingInterval
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|this
operator|.
name|handle
operator|=
name|this
operator|.
name|connection
operator|.
name|monitorValue
argument_list|(
name|this
operator|.
name|node
argument_list|,
name|this
operator|.
name|samplingInterval
argument_list|,
name|this
operator|::
name|handleValueUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|handle
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|handle
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|this
operator|.
name|handle
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|handleValueUpdate (final DataValue value)
specifier|private
name|void
name|handleValueUpdate
parameter_list|(
specifier|final
name|DataValue
name|value
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Handle item update - {} = {}"
argument_list|,
name|node
argument_list|,
name|value
argument_list|)
expr_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
name|mapMessage
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|getAsyncProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to process message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mapMessage (final DataValue value)
specifier|private
name|Message
name|mapMessage
parameter_list|(
specifier|final
name|DataValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|DefaultMessage
name|result
init|=
operator|new
name|DefaultMessage
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|Messages
operator|.
name|fillFromDataValue
argument_list|(
name|value
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

