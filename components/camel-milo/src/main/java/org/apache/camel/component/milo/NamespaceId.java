begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 Jens Reimann<jreimann@redhat.com>  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|ExpandedNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UShort
import|;
end_import

begin_class
DECL|class|NamespaceId
specifier|public
class|class
name|NamespaceId
block|{
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|field|numeric
specifier|private
specifier|final
name|UShort
name|numeric
decl_stmt|;
DECL|method|NamespaceId (final String uri)
specifier|public
name|NamespaceId
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|numeric
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|NamespaceId (final UShort numeric)
specifier|public
name|NamespaceId
parameter_list|(
specifier|final
name|UShort
name|numeric
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|numeric
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|numeric
operator|=
name|numeric
expr_stmt|;
block|}
DECL|method|getUri ()
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
return|;
block|}
DECL|method|getNumeric ()
specifier|public
name|UShort
name|getNumeric
parameter_list|()
block|{
return|return
name|this
operator|.
name|numeric
return|;
block|}
DECL|method|isNumeric ()
specifier|public
name|boolean
name|isNumeric
parameter_list|()
block|{
return|return
name|this
operator|.
name|numeric
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|isNumeric
argument_list|()
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[Namespace - numeric: %s]"
argument_list|,
name|this
operator|.
name|numeric
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[Namespace - URI: %s]"
argument_list|,
name|this
operator|.
name|uri
argument_list|)
return|;
block|}
block|}
DECL|method|getValue ()
specifier|public
name|Serializable
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
operator|!=
literal|null
condition|?
name|this
operator|.
name|uri
else|:
name|this
operator|.
name|numeric
return|;
block|}
DECL|method|fromExpandedNodeId (final ExpandedNodeId id)
specifier|public
specifier|static
name|NamespaceId
name|fromExpandedNodeId
parameter_list|(
specifier|final
name|ExpandedNodeId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|id
operator|.
name|getNamespaceUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|NamespaceId
argument_list|(
name|id
operator|.
name|getNamespaceUri
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|id
operator|.
name|getNamespaceIndex
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|NamespaceId
argument_list|(
name|id
operator|.
name|getNamespaceIndex
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unknown namespace type"
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

