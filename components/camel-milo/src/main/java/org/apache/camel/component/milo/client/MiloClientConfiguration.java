begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|KeyStoreLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
operator|.
name|KeyStoreLoader
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|sdk
operator|.
name|client
operator|.
name|api
operator|.
name|config
operator|.
name|OpcUaClientConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|security
operator|.
name|SecurityPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|LocalizedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|Unsigned
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|MiloClientConfiguration
specifier|public
class|class
name|MiloClientConfiguration
implements|implements
name|Cloneable
block|{
DECL|field|DEFAULT_APPLICATION_URI
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_APPLICATION_URI
init|=
literal|"http://camel.apache.org/EclipseMilo/Client"
decl_stmt|;
DECL|field|DEFAULT_APPLICATION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_APPLICATION_NAME
init|=
literal|"Apache Camel adapter for Eclipse Milo"
decl_stmt|;
DECL|field|DEFAULT_PRODUCT_URI
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PRODUCT_URI
init|=
literal|"http://camel.apache.org/EclipseMilo"
decl_stmt|;
annotation|@
name|XmlTransient
comment|// to not be included in component docs
DECL|field|endpointUri
specifier|private
name|String
name|endpointUri
decl_stmt|;
annotation|@
name|UriParam
DECL|field|discoveryEndpointUri
specifier|private
name|String
name|discoveryEndpointUri
decl_stmt|;
annotation|@
name|UriParam
DECL|field|discoveryEndpointSuffix
specifier|private
name|String
name|discoveryEndpointSuffix
decl_stmt|;
annotation|@
name|UriParam
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|,
name|defaultValue
operator|=
name|DEFAULT_APPLICATION_NAME
argument_list|)
DECL|field|applicationName
specifier|private
name|String
name|applicationName
init|=
name|DEFAULT_APPLICATION_NAME
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|,
name|defaultValue
operator|=
name|DEFAULT_APPLICATION_URI
argument_list|)
DECL|field|applicationUri
specifier|private
name|String
name|applicationUri
init|=
name|DEFAULT_APPLICATION_URI
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|,
name|defaultValue
operator|=
name|DEFAULT_PRODUCT_URI
argument_list|)
DECL|field|productUri
specifier|private
name|String
name|productUri
init|=
name|DEFAULT_PRODUCT_URI
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|requestTimeout
specifier|private
name|Long
name|requestTimeout
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|channelLifetime
specifier|private
name|Long
name|channelLifetime
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|sessionName
specifier|private
name|String
name|sessionName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|sessionTimeout
specifier|private
name|Long
name|sessionTimeout
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|maxPendingPublishRequests
specifier|private
name|Long
name|maxPendingPublishRequests
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|maxResponseMessageSize
specifier|private
name|Long
name|maxResponseMessageSize
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|keyStoreUrl
specifier|private
name|URL
name|keyStoreUrl
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|keyStoreType
specifier|private
name|String
name|keyStoreType
init|=
name|KeyStoreLoader
operator|.
name|DEFAULT_KEY_STORE_TYPE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|keyAlias
specifier|private
name|String
name|keyAlias
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|keyStorePassword
specifier|private
name|String
name|keyStorePassword
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|keyPassword
specifier|private
name|String
name|keyPassword
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|allowedSecurityPolicies
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|allowedSecurityPolicies
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"client"
argument_list|)
DECL|field|overrideHost
specifier|private
name|boolean
name|overrideHost
decl_stmt|;
DECL|method|MiloClientConfiguration ()
specifier|public
name|MiloClientConfiguration
parameter_list|()
block|{     }
DECL|method|MiloClientConfiguration (final MiloClientConfiguration other)
specifier|public
name|MiloClientConfiguration
parameter_list|(
specifier|final
name|MiloClientConfiguration
name|other
parameter_list|)
block|{
name|this
operator|.
name|endpointUri
operator|=
name|other
operator|.
name|endpointUri
expr_stmt|;
name|this
operator|.
name|discoveryEndpointUri
operator|=
name|other
operator|.
name|discoveryEndpointUri
expr_stmt|;
name|this
operator|.
name|discoveryEndpointSuffix
operator|=
name|other
operator|.
name|discoveryEndpointSuffix
expr_stmt|;
name|this
operator|.
name|clientId
operator|=
name|other
operator|.
name|clientId
expr_stmt|;
name|this
operator|.
name|applicationName
operator|=
name|other
operator|.
name|applicationName
expr_stmt|;
name|this
operator|.
name|applicationUri
operator|=
name|other
operator|.
name|applicationUri
expr_stmt|;
name|this
operator|.
name|productUri
operator|=
name|other
operator|.
name|productUri
expr_stmt|;
name|this
operator|.
name|requestTimeout
operator|=
name|other
operator|.
name|requestTimeout
expr_stmt|;
name|this
operator|.
name|channelLifetime
operator|=
name|other
operator|.
name|channelLifetime
expr_stmt|;
name|this
operator|.
name|sessionName
operator|=
name|other
operator|.
name|sessionName
expr_stmt|;
name|this
operator|.
name|maxPendingPublishRequests
operator|=
name|other
operator|.
name|maxPendingPublishRequests
expr_stmt|;
name|this
operator|.
name|maxResponseMessageSize
operator|=
name|other
operator|.
name|maxResponseMessageSize
expr_stmt|;
name|this
operator|.
name|keyStoreUrl
operator|=
name|other
operator|.
name|keyStoreUrl
expr_stmt|;
name|this
operator|.
name|keyStoreType
operator|=
name|other
operator|.
name|keyStoreType
expr_stmt|;
name|this
operator|.
name|keyAlias
operator|=
name|other
operator|.
name|keyAlias
expr_stmt|;
name|this
operator|.
name|keyStorePassword
operator|=
name|other
operator|.
name|keyStorePassword
expr_stmt|;
name|this
operator|.
name|keyPassword
operator|=
name|other
operator|.
name|keyPassword
expr_stmt|;
name|this
operator|.
name|allowedSecurityPolicies
operator|=
name|allowedSecurityPolicies
operator|!=
literal|null
condition|?
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|other
operator|.
name|allowedSecurityPolicies
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|overrideHost
operator|=
name|other
operator|.
name|overrideHost
expr_stmt|;
block|}
comment|/**      * The OPC UA server endpoint      */
DECL|method|setEndpointUri (final String endpointUri)
specifier|public
name|void
name|setEndpointUri
parameter_list|(
specifier|final
name|String
name|endpointUri
parameter_list|)
block|{
name|this
operator|.
name|endpointUri
operator|=
name|endpointUri
expr_stmt|;
block|}
DECL|method|getEndpointUri ()
specifier|public
name|String
name|getEndpointUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|endpointUri
return|;
block|}
comment|/**      * An alternative discovery URI      */
DECL|method|setDiscoveryEndpointUri (final String endpointDiscoveryUri)
specifier|public
name|void
name|setDiscoveryEndpointUri
parameter_list|(
specifier|final
name|String
name|endpointDiscoveryUri
parameter_list|)
block|{
name|this
operator|.
name|discoveryEndpointUri
operator|=
name|endpointDiscoveryUri
expr_stmt|;
block|}
DECL|method|getDiscoveryEndpointUri ()
specifier|public
name|String
name|getDiscoveryEndpointUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|discoveryEndpointUri
return|;
block|}
comment|/**      * A suffix for endpoint URI when discovering      */
DECL|method|setDiscoveryEndpointSuffix (final String endpointDiscoverySuffix)
specifier|public
name|void
name|setDiscoveryEndpointSuffix
parameter_list|(
specifier|final
name|String
name|endpointDiscoverySuffix
parameter_list|)
block|{
name|this
operator|.
name|discoveryEndpointSuffix
operator|=
name|endpointDiscoverySuffix
expr_stmt|;
block|}
DECL|method|getDiscoveryEndpointSuffix ()
specifier|public
name|String
name|getDiscoveryEndpointSuffix
parameter_list|()
block|{
return|return
name|this
operator|.
name|discoveryEndpointSuffix
return|;
block|}
comment|/**      * A virtual client id to force the creation of a new connection instance      */
DECL|method|setClientId (final String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
specifier|final
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|this
operator|.
name|clientId
return|;
block|}
comment|/**      * The application name      */
DECL|method|setApplicationName (final String applicationName)
specifier|public
name|void
name|setApplicationName
parameter_list|(
specifier|final
name|String
name|applicationName
parameter_list|)
block|{
name|this
operator|.
name|applicationName
operator|=
name|applicationName
expr_stmt|;
block|}
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationName
return|;
block|}
comment|/**      * The application URI      */
DECL|method|setApplicationUri (final String applicationUri)
specifier|public
name|void
name|setApplicationUri
parameter_list|(
specifier|final
name|String
name|applicationUri
parameter_list|)
block|{
name|this
operator|.
name|applicationUri
operator|=
name|applicationUri
expr_stmt|;
block|}
DECL|method|getApplicationUri ()
specifier|public
name|String
name|getApplicationUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationUri
return|;
block|}
comment|/**      * The product URI      */
DECL|method|setProductUri (final String productUri)
specifier|public
name|void
name|setProductUri
parameter_list|(
specifier|final
name|String
name|productUri
parameter_list|)
block|{
name|this
operator|.
name|productUri
operator|=
name|productUri
expr_stmt|;
block|}
DECL|method|getProductUri ()
specifier|public
name|String
name|getProductUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|productUri
return|;
block|}
comment|/**      * Request timeout in milliseconds      */
DECL|method|setRequestTimeout (final Long reconnectTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
specifier|final
name|Long
name|reconnectTimeout
parameter_list|)
block|{
name|this
operator|.
name|requestTimeout
operator|=
name|reconnectTimeout
expr_stmt|;
block|}
DECL|method|getRequestTimeout ()
specifier|public
name|Long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|requestTimeout
return|;
block|}
comment|/**      * Channel lifetime in milliseconds      */
DECL|method|setChannelLifetime (final Long channelLifetime)
specifier|public
name|void
name|setChannelLifetime
parameter_list|(
specifier|final
name|Long
name|channelLifetime
parameter_list|)
block|{
name|this
operator|.
name|channelLifetime
operator|=
name|channelLifetime
expr_stmt|;
block|}
DECL|method|getChannelLifetime ()
specifier|public
name|Long
name|getChannelLifetime
parameter_list|()
block|{
return|return
name|this
operator|.
name|channelLifetime
return|;
block|}
comment|/**      * Session name      */
DECL|method|setSessionName (final String sessionName)
specifier|public
name|void
name|setSessionName
parameter_list|(
specifier|final
name|String
name|sessionName
parameter_list|)
block|{
name|this
operator|.
name|sessionName
operator|=
name|sessionName
expr_stmt|;
block|}
DECL|method|getSessionName ()
specifier|public
name|String
name|getSessionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|sessionName
return|;
block|}
comment|/**      * Session timeout in milliseconds      */
DECL|method|setSessionTimeout (final Long sessionTimeout)
specifier|public
name|void
name|setSessionTimeout
parameter_list|(
specifier|final
name|Long
name|sessionTimeout
parameter_list|)
block|{
name|this
operator|.
name|sessionTimeout
operator|=
name|sessionTimeout
expr_stmt|;
block|}
DECL|method|getSessionTimeout ()
specifier|public
name|Long
name|getSessionTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|sessionTimeout
return|;
block|}
comment|/**      * The maximum number of pending publish requests      */
DECL|method|setMaxPendingPublishRequests (final Long maxPendingPublishRequests)
specifier|public
name|void
name|setMaxPendingPublishRequests
parameter_list|(
specifier|final
name|Long
name|maxPendingPublishRequests
parameter_list|)
block|{
name|this
operator|.
name|maxPendingPublishRequests
operator|=
name|maxPendingPublishRequests
expr_stmt|;
block|}
DECL|method|getMaxPendingPublishRequests ()
specifier|public
name|Long
name|getMaxPendingPublishRequests
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxPendingPublishRequests
return|;
block|}
comment|/**      * The maximum number of bytes a response message may have      */
DECL|method|setMaxResponseMessageSize (final Long maxResponseMessageSize)
specifier|public
name|void
name|setMaxResponseMessageSize
parameter_list|(
specifier|final
name|Long
name|maxResponseMessageSize
parameter_list|)
block|{
name|this
operator|.
name|maxResponseMessageSize
operator|=
name|maxResponseMessageSize
expr_stmt|;
block|}
DECL|method|getMaxResponseMessageSize ()
specifier|public
name|Long
name|getMaxResponseMessageSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxResponseMessageSize
return|;
block|}
comment|/**      * The URL where the key should be loaded from      */
DECL|method|setKeyStoreUrl (final String keyStoreUrl)
specifier|public
name|void
name|setKeyStoreUrl
parameter_list|(
specifier|final
name|String
name|keyStoreUrl
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
operator|.
name|keyStoreUrl
operator|=
name|keyStoreUrl
operator|!=
literal|null
condition|?
operator|new
name|URL
argument_list|(
name|keyStoreUrl
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
DECL|method|getKeyStoreUrl ()
specifier|public
name|URL
name|getKeyStoreUrl
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyStoreUrl
return|;
block|}
comment|/**      * The key store type      */
DECL|method|setKeyStoreType (final String keyStoreType)
specifier|public
name|void
name|setKeyStoreType
parameter_list|(
specifier|final
name|String
name|keyStoreType
parameter_list|)
block|{
name|this
operator|.
name|keyStoreType
operator|=
name|keyStoreType
expr_stmt|;
block|}
DECL|method|getKeyStoreType ()
specifier|public
name|String
name|getKeyStoreType
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyStoreType
return|;
block|}
comment|/**      * The name of the key in the keystore file      */
DECL|method|setKeyAlias (final String keyAlias)
specifier|public
name|void
name|setKeyAlias
parameter_list|(
specifier|final
name|String
name|keyAlias
parameter_list|)
block|{
name|this
operator|.
name|keyAlias
operator|=
name|keyAlias
expr_stmt|;
block|}
DECL|method|getKeyAlias ()
specifier|public
name|String
name|getKeyAlias
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyAlias
return|;
block|}
comment|/**      * The keystore password      */
DECL|method|setKeyStorePassword (final String keyStorePassword)
specifier|public
name|void
name|setKeyStorePassword
parameter_list|(
specifier|final
name|String
name|keyStorePassword
parameter_list|)
block|{
name|this
operator|.
name|keyStorePassword
operator|=
name|keyStorePassword
expr_stmt|;
block|}
DECL|method|getKeyStorePassword ()
specifier|public
name|String
name|getKeyStorePassword
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyStorePassword
return|;
block|}
comment|/**      * The key password      */
DECL|method|setKeyPassword (final String keyPassword)
specifier|public
name|void
name|setKeyPassword
parameter_list|(
specifier|final
name|String
name|keyPassword
parameter_list|)
block|{
name|this
operator|.
name|keyPassword
operator|=
name|keyPassword
expr_stmt|;
block|}
DECL|method|getKeyPassword ()
specifier|public
name|String
name|getKeyPassword
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyPassword
return|;
block|}
comment|/**      * A set of allowed security policy URIs. Default is to accept all and use      * the highest.      */
DECL|method|setAllowedSecurityPolicies (final Set<String> allowedSecurityPolicies)
specifier|public
name|void
name|setAllowedSecurityPolicies
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allowedSecurityPolicies
parameter_list|)
block|{
name|this
operator|.
name|allowedSecurityPolicies
operator|=
name|allowedSecurityPolicies
expr_stmt|;
block|}
DECL|method|setAllowedSecurityPolicies (final String allowedSecurityPolicies)
specifier|public
name|void
name|setAllowedSecurityPolicies
parameter_list|(
specifier|final
name|String
name|allowedSecurityPolicies
parameter_list|)
block|{
comment|// check if we are reset or set
if|if
condition|(
name|allowedSecurityPolicies
operator|==
literal|null
condition|)
block|{
comment|// resetting to null
name|this
operator|.
name|allowedSecurityPolicies
operator|=
literal|null
expr_stmt|;
return|return;
block|}
comment|// split and convert
name|this
operator|.
name|allowedSecurityPolicies
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|policies
init|=
name|allowedSecurityPolicies
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|policy
range|:
name|policies
control|)
block|{
name|String
name|adding
init|=
literal|null
decl_stmt|;
try|try
block|{
name|adding
operator|=
name|SecurityPolicy
operator|.
name|fromUri
argument_list|(
name|policy
argument_list|)
operator|.
name|getSecurityPolicyUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
if|if
condition|(
name|adding
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|adding
operator|=
name|SecurityPolicy
operator|.
name|valueOf
argument_list|(
name|policy
argument_list|)
operator|.
name|getSecurityPolicyUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
if|if
condition|(
name|adding
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown security policy: "
operator|+
name|policy
argument_list|)
throw|;
block|}
name|this
operator|.
name|allowedSecurityPolicies
operator|.
name|add
argument_list|(
name|adding
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAllowedSecurityPolicies ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllowedSecurityPolicies
parameter_list|()
block|{
return|return
name|this
operator|.
name|allowedSecurityPolicies
return|;
block|}
comment|/**      * Override the server reported endpoint host with the host from the      * endpoint URI.      */
DECL|method|setOverrideHost (boolean overrideHost)
specifier|public
name|void
name|setOverrideHost
parameter_list|(
name|boolean
name|overrideHost
parameter_list|)
block|{
name|this
operator|.
name|overrideHost
operator|=
name|overrideHost
expr_stmt|;
block|}
DECL|method|isOverrideHost ()
specifier|public
name|boolean
name|isOverrideHost
parameter_list|()
block|{
return|return
name|overrideHost
return|;
block|}
annotation|@
name|Override
DECL|method|clone ()
specifier|public
name|MiloClientConfiguration
name|clone
parameter_list|()
block|{
return|return
operator|new
name|MiloClientConfiguration
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|toCacheId ()
specifier|public
name|String
name|toCacheId
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|clientId
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|clientId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|endpointUri
operator|+
literal|"|"
operator|+
name|this
operator|.
name|clientId
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|endpointUri
return|;
block|}
block|}
DECL|method|newBuilder ()
specifier|public
name|OpcUaClientConfigBuilder
name|newBuilder
parameter_list|()
block|{
return|return
name|mapToClientConfiguration
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|mapToClientConfiguration (final MiloClientConfiguration configuration)
specifier|private
specifier|static
name|OpcUaClientConfigBuilder
name|mapToClientConfiguration
parameter_list|(
specifier|final
name|MiloClientConfiguration
name|configuration
parameter_list|)
block|{
specifier|final
name|OpcUaClientConfigBuilder
name|builder
init|=
operator|new
name|OpcUaClientConfigBuilder
argument_list|()
decl_stmt|;
name|whenHasText
argument_list|(
name|configuration
operator|::
name|getApplicationName
argument_list|,
name|value
lambda|->
name|builder
operator|.
name|setApplicationName
argument_list|(
name|LocalizedText
operator|.
name|english
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|whenHasText
argument_list|(
name|configuration
operator|::
name|getApplicationUri
argument_list|,
name|builder
operator|::
name|setApplicationUri
argument_list|)
expr_stmt|;
name|whenHasText
argument_list|(
name|configuration
operator|::
name|getProductUri
argument_list|,
name|builder
operator|::
name|setProductUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getRequestTimeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRequestTimeout
argument_list|(
name|Unsigned
operator|.
name|uint
argument_list|(
name|configuration
operator|.
name|getRequestTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getChannelLifetime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setChannelLifetime
argument_list|(
name|Unsigned
operator|.
name|uint
argument_list|(
name|configuration
operator|.
name|getChannelLifetime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|whenHasText
argument_list|(
name|configuration
operator|::
name|getSessionName
argument_list|,
name|value
lambda|->
name|builder
operator|.
name|setSessionName
argument_list|(
parameter_list|()
lambda|->
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getSessionTimeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSessionTimeout
argument_list|(
name|UInteger
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getSessionTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getMaxPendingPublishRequests
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMaxPendingPublishRequests
argument_list|(
name|UInteger
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getMaxPendingPublishRequests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getMaxResponseMessageSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMaxResponseMessageSize
argument_list|(
name|UInteger
operator|.
name|valueOf
argument_list|(
name|configuration
operator|.
name|getMaxPendingPublishRequests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getKeyStoreUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setKey
argument_list|(
name|configuration
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|setKey (final MiloClientConfiguration configuration, final OpcUaClientConfigBuilder builder)
specifier|private
specifier|static
name|void
name|setKey
parameter_list|(
specifier|final
name|MiloClientConfiguration
name|configuration
parameter_list|,
specifier|final
name|OpcUaClientConfigBuilder
name|builder
parameter_list|)
block|{
specifier|final
name|KeyStoreLoader
name|loader
init|=
operator|new
name|KeyStoreLoader
argument_list|()
decl_stmt|;
specifier|final
name|Result
name|result
decl_stmt|;
try|try
block|{
comment|// key store properties
name|loader
operator|.
name|setType
argument_list|(
name|configuration
operator|.
name|getKeyStoreType
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|setUrl
argument_list|(
name|configuration
operator|.
name|getKeyStoreUrl
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|setKeyStorePassword
argument_list|(
name|configuration
operator|.
name|getKeyStorePassword
argument_list|()
argument_list|)
expr_stmt|;
comment|// key properties
name|loader
operator|.
name|setKeyAlias
argument_list|(
name|configuration
operator|.
name|getKeyAlias
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|setKeyPassword
argument_list|(
name|configuration
operator|.
name|getKeyPassword
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to load key"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Key not found in keystore"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setCertificate
argument_list|(
name|result
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setKeyPair
argument_list|(
name|result
operator|.
name|getKeyPair
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|whenHasText (final Supplier<String> valueSupplier, final Consumer<String> valueConsumer)
specifier|private
specifier|static
name|void
name|whenHasText
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|String
argument_list|>
name|valueSupplier
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|String
argument_list|>
name|valueConsumer
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|valueSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|valueConsumer
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

