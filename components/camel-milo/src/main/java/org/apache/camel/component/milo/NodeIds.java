begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|ExpandedNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UShort
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|Unsigned
operator|.
name|ushort
import|;
end_import

begin_comment
comment|/**  * Helper class to work with node IDs  */
end_comment

begin_class
DECL|class|NodeIds
specifier|public
specifier|final
class|class
name|NodeIds
block|{
DECL|method|NodeIds ()
specifier|private
name|NodeIds
parameter_list|()
block|{     }
DECL|method|toNodeId (final UShort namespaceIndex, final ExpandedNodeId nodeId)
specifier|public
specifier|static
name|NodeId
name|toNodeId
parameter_list|(
specifier|final
name|UShort
name|namespaceIndex
parameter_list|,
specifier|final
name|ExpandedNodeId
name|nodeId
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|namespaceIndex
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|id
init|=
name|nodeId
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|String
operator|)
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|instanceof
name|UInteger
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|UInteger
operator|)
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|instanceof
name|ByteString
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|ByteString
operator|)
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|instanceof
name|UUID
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|UUID
operator|)
name|id
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid id type: "
operator|+
name|id
argument_list|)
throw|;
block|}
DECL|method|toNodeId (final int namespaceIndex, final ExpandedNodeId nodeId)
specifier|public
specifier|static
name|NodeId
name|toNodeId
parameter_list|(
specifier|final
name|int
name|namespaceIndex
parameter_list|,
specifier|final
name|ExpandedNodeId
name|nodeId
parameter_list|)
block|{
return|return
name|toNodeId
argument_list|(
name|ushort
argument_list|(
name|namespaceIndex
argument_list|)
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final String namespace, final String node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final String namespace, final int node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|int
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final String namespace, final UUID node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|UUID
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final String namespace, final ByteString node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|ByteString
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final int namespace, final String node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|int
name|namespace
parameter_list|,
specifier|final
name|String
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final int namespace, final int node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|int
name|namespace
parameter_list|,
specifier|final
name|int
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final int namespace, final UUID node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|int
name|namespace
parameter_list|,
specifier|final
name|UUID
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create an attribute value for the "node" attribute      *       * @param namespace the namespace to use      * @param node the node ID      * @return the value ready to append to a "node" URI attribute      */
DECL|method|nodeValue (final int namespace, final ByteString node)
specifier|public
specifier|static
name|String
name|nodeValue
parameter_list|(
specifier|final
name|int
name|namespace
parameter_list|,
specifier|final
name|ByteString
name|node
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RAW("
argument_list|)
decl_stmt|;
name|appendNamespace
argument_list|(
name|builder
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|appendNodeId
argument_list|(
name|builder
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|appendNamespace (final StringBuilder builder, final String namespace)
specifier|private
specifier|static
name|void
name|appendNamespace
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nsu="
argument_list|)
operator|.
name|append
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
DECL|method|appendNamespace (final StringBuilder builder, final int namespace)
specifier|private
specifier|static
name|void
name|appendNamespace
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|int
name|namespace
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ns="
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toUnsignedString
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|appendNodeId (final StringBuilder builder, final String nodeId)
specifier|private
specifier|static
name|void
name|appendNodeId
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"s="
argument_list|)
operator|.
name|append
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
DECL|method|appendNodeId (final StringBuilder builder, final int nodeId)
specifier|private
specifier|static
name|void
name|appendNodeId
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|int
name|nodeId
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"i="
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toUnsignedString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|appendNodeId (final StringBuilder builder, final UUID nodeId)
specifier|private
specifier|static
name|void
name|appendNodeId
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|UUID
name|nodeId
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"g="
argument_list|)
operator|.
name|append
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
DECL|method|appendNodeId (final StringBuilder builder, final ByteString nodeId)
specifier|private
specifier|static
name|void
name|appendNodeId
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|ByteString
name|nodeId
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"b="
argument_list|)
operator|.
name|append
argument_list|(
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|nodeId
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

