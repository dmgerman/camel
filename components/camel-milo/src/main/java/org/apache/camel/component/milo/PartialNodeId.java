begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.milo
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|milo
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|Unsigned
operator|.
name|uint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|Unsigned
operator|.
name|ushort
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|ExpandedNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|builtin
operator|.
name|unsigned
operator|.
name|UShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|milo
operator|.
name|opcua
operator|.
name|stack
operator|.
name|core
operator|.
name|types
operator|.
name|enumerated
operator|.
name|IdType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_class
DECL|class|PartialNodeId
specifier|public
class|class
name|PartialNodeId
block|{
DECL|field|type
specifier|private
name|IdType
name|type
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|Serializable
name|id
decl_stmt|;
DECL|method|PartialNodeId (final int id)
specifier|public
name|PartialNodeId
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|uint
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|PartialNodeId (final UInteger id)
specifier|public
name|PartialNodeId
parameter_list|(
specifier|final
name|UInteger
name|id
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|PartialNodeId (final String id)
specifier|public
name|PartialNodeId
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|PartialNodeId (final UUID id)
specifier|public
name|PartialNodeId
parameter_list|(
specifier|final
name|UUID
name|id
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|PartialNodeId (final ByteString id)
specifier|public
name|PartialNodeId
parameter_list|(
specifier|final
name|ByteString
name|id
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|toNodeId (final int namespaceIndex)
specifier|public
name|NodeId
name|toNodeId
parameter_list|(
specifier|final
name|int
name|namespaceIndex
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|String
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|UInteger
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|ushort
argument_list|(
name|namespaceIndex
argument_list|)
argument_list|,
operator|(
name|UInteger
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|ByteString
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|ByteString
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|UUID
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|UUID
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid id type: "
operator|+
name|this
operator|.
name|id
argument_list|)
throw|;
block|}
DECL|method|toNodeId (final UShort namespaceIndex)
specifier|public
name|NodeId
name|toNodeId
parameter_list|(
specifier|final
name|UShort
name|namespaceIndex
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|String
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|UInteger
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|UInteger
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|ByteString
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|ByteString
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|id
operator|instanceof
name|UUID
condition|)
block|{
return|return
operator|new
name|NodeId
argument_list|(
name|namespaceIndex
argument_list|,
operator|(
name|UUID
operator|)
name|this
operator|.
name|id
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid id type: "
operator|+
name|this
operator|.
name|id
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|this
operator|.
name|type
argument_list|)
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|this
operator|.
name|id
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getValue ()
specifier|public
name|Serializable
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|fromExpandedNodeId (final ExpandedNodeId node)
specifier|public
specifier|static
name|PartialNodeId
name|fromExpandedNodeId
parameter_list|(
specifier|final
name|ExpandedNodeId
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Object
name|value
init|=
name|node
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|PartialNodeId
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|UInteger
condition|)
block|{
return|return
operator|new
name|PartialNodeId
argument_list|(
operator|(
name|UInteger
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|UUID
condition|)
block|{
return|return
operator|new
name|PartialNodeId
argument_list|(
operator|(
name|UUID
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ByteString
condition|)
block|{
return|return
operator|new
name|PartialNodeId
argument_list|(
operator|(
name|ByteString
operator|)
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unknown node id type: "
operator|+
name|value
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

