begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dns.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dns
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LoggingExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DnsActivationPolicy
specifier|public
class|class
name|DnsActivationPolicy
extends|extends
name|RoutePolicySupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DnsActivationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exceptionHandler
specifier|private
name|ExceptionHandler
name|exceptionHandler
decl_stmt|;
DECL|field|dnsActivation
specifier|private
name|DnsActivation
name|dnsActivation
decl_stmt|;
DECL|field|ttl
specifier|private
name|long
name|ttl
decl_stmt|;
DECL|field|stopRoutesOnException
specifier|private
name|boolean
name|stopRoutesOnException
decl_stmt|;
DECL|field|routes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Route
argument_list|>
name|routes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|method|DnsActivationPolicy ()
specifier|public
name|DnsActivationPolicy
parameter_list|()
block|{
name|dnsActivation
operator|=
operator|new
name|DnsActivation
argument_list|()
expr_stmt|;
block|}
DECL|method|onInit (Route route)
specifier|public
name|void
name|onInit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onInit {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routes
operator|.
name|put
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|route
argument_list|)
expr_stmt|;
block|}
DECL|method|onRemove (Route route)
specifier|public
name|void
name|onRemove
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onRemove {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// noop
block|}
annotation|@
name|Override
DECL|method|onStart (Route route)
specifier|public
name|void
name|onStart
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onStart {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// noop
block|}
annotation|@
name|Override
DECL|method|onStop (Route route)
specifier|public
name|void
name|onStop
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onStop {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// noop
block|}
annotation|@
name|Override
DECL|method|onSuspend (Route route)
specifier|public
name|void
name|onSuspend
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onSuspend {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// noop
block|}
annotation|@
name|Override
DECL|method|onResume (Route route)
specifier|public
name|void
name|onResume
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onResume {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// noop
block|}
DECL|method|onExchangeBegin (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeBegin
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onExchange start "
operator|+
name|route
operator|.
name|getId
argument_list|()
operator|+
literal|"/"
operator|+
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// noop
block|}
DECL|method|onExchangeDone (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeDone
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onExchange end "
operator|+
name|route
operator|.
name|getId
argument_list|()
operator|+
literal|"/"
operator|+
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"doStart"
argument_list|)
expr_stmt|;
name|timer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
operator|new
name|DnsActivationTask
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"doStop"
argument_list|)
expr_stmt|;
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|timer
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getExceptionHandler ()
specifier|public
name|ExceptionHandler
name|getExceptionHandler
parameter_list|()
block|{
if|if
condition|(
name|exceptionHandler
operator|==
literal|null
condition|)
block|{
name|exceptionHandler
operator|=
operator|new
name|LoggingExceptionHandler
argument_list|(
literal|null
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exceptionHandler
return|;
block|}
DECL|method|setExceptionHandler (ExceptionHandler exceptionHandler)
specifier|public
name|void
name|setExceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|this
operator|.
name|exceptionHandler
operator|=
name|exceptionHandler
expr_stmt|;
block|}
DECL|method|setHostname (String hostname)
specifier|public
name|void
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|dnsActivation
operator|.
name|setHostname
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|dnsActivation
operator|.
name|getHostname
argument_list|()
return|;
block|}
DECL|method|setResolvesTo (List<String> resolvesTo)
specifier|public
name|void
name|setResolvesTo
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|resolvesTo
parameter_list|)
block|{
name|dnsActivation
operator|.
name|setResolvesTo
argument_list|(
name|resolvesTo
argument_list|)
expr_stmt|;
block|}
DECL|method|setResolvesTo (String resolvesTo)
specifier|public
name|void
name|setResolvesTo
parameter_list|(
name|String
name|resolvesTo
parameter_list|)
block|{
name|dnsActivation
operator|.
name|setResolvesTo
argument_list|(
name|resolvesTo
argument_list|)
expr_stmt|;
block|}
DECL|method|getResolvesTo ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResolvesTo
parameter_list|()
block|{
return|return
name|dnsActivation
operator|.
name|getResolvesTo
argument_list|()
return|;
block|}
DECL|method|setTtl (long ttl)
specifier|public
name|void
name|setTtl
parameter_list|(
name|long
name|ttl
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
DECL|method|setTtl (String ttl)
specifier|public
name|void
name|setTtl
parameter_list|(
name|String
name|ttl
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|ttl
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
DECL|method|getTtl ()
specifier|public
name|long
name|getTtl
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ttl
return|;
block|}
DECL|method|setStopRoutesOnException (String stopRoutesOnException)
specifier|public
name|void
name|setStopRoutesOnException
parameter_list|(
name|String
name|stopRoutesOnException
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|stopRoutesOnException
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|stopRoutesOnException
argument_list|)
expr_stmt|;
block|}
DECL|method|startRouteImpl (Route route)
specifier|private
name|void
name|startRouteImpl
parameter_list|(
name|Route
name|route
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceStatus
name|routeStatus
init|=
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|getRouteStatus
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeStatus
operator|==
name|ServiceStatus
operator|.
name|Stopped
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|startRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|routeStatus
operator|==
name|ServiceStatus
operator|.
name|Suspended
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resuming {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|startConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Nothing to do "
operator|+
name|route
operator|.
name|getId
argument_list|()
operator|+
literal|" is "
operator|+
name|routeStatus
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startRoutes ()
specifier|private
name|void
name|startRoutes
parameter_list|()
block|{
for|for
control|(
name|String
name|routeId
range|:
name|routes
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|Route
name|route
init|=
name|routes
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
name|startRouteImpl
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|routeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stopRouteImpl (Route route)
specifier|private
name|void
name|stopRouteImpl
parameter_list|(
name|Route
name|route
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceStatus
name|routeStatus
init|=
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|getRouteStatus
argument_list|(
name|route
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeStatus
operator|==
name|ServiceStatus
operator|.
name|Started
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping {}"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|stopRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Nothing to do "
operator|+
name|route
operator|.
name|getId
argument_list|()
operator|+
literal|" is "
operator|+
name|routeStatus
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopRoutes ()
specifier|private
name|void
name|stopRoutes
parameter_list|()
block|{
for|for
control|(
name|String
name|routeId
range|:
name|routes
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|Route
name|route
init|=
name|routes
operator|.
name|get
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
name|stopRouteImpl
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|routeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isActive ()
specifier|protected
name|boolean
name|isActive
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dnsActivation
operator|.
name|isActive
argument_list|()
return|;
block|}
DECL|class|DnsActivationTask
class|class
name|DnsActivationTask
extends|extends
name|TimerTask
block|{
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
name|startRoutes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stopRoutes
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DnsActivation TimerTask failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopRoutesOnException
condition|)
block|{
name|stopRoutes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

