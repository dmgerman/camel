begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dns.processor.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dns
operator|.
name|processor
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dns
operator|.
name|DnsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|SRVRecord
import|;
end_import

begin_class
DECL|class|DnsServiceCallServerListStrategies
specifier|public
specifier|final
class|class
name|DnsServiceCallServerListStrategies
block|{
DECL|method|DnsServiceCallServerListStrategies ()
specifier|private
name|DnsServiceCallServerListStrategies
parameter_list|()
block|{     }
DECL|class|OnDemand
specifier|public
specifier|static
specifier|final
class|class
name|OnDemand
extends|extends
name|DnsServiceCallServerListStrategy
block|{
DECL|field|lookupFactory
specifier|private
specifier|final
name|DnsServiceLookupFactory
name|lookupFactory
decl_stmt|;
DECL|method|OnDemand (DnsConfiguration configuration)
specifier|public
name|OnDemand
parameter_list|(
name|DnsConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|lookupFactory
operator|=
operator|new
name|DnsServiceLookupFactory
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUpdatedListOfServers (String name)
specifier|public
name|List
argument_list|<
name|ServiceCallServer
argument_list|>
name|getUpdatedListOfServers
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Lookup
name|lookup
init|=
name|lookupFactory
operator|.
name|apply
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Record
index|[]
name|records
init|=
name|lookup
operator|.
name|run
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServiceCallServer
argument_list|>
name|servers
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|nonNull
argument_list|(
name|records
argument_list|)
operator|&&
name|lookup
operator|.
name|getResult
argument_list|()
operator|==
name|Lookup
operator|.
name|SUCCESSFUL
condition|)
block|{
name|servers
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|records
argument_list|)
operator|.
name|filter
argument_list|(
name|SRVRecord
operator|.
name|class
operator|::
name|isInstance
argument_list|)
operator|.
name|map
argument_list|(
name|SRVRecord
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|sorted
argument_list|(
name|DnsServiceCallServer
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|map
argument_list|(
name|DnsServiceCallServer
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|servers
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OnDemand"
return|;
block|}
block|}
comment|// *************************************************************************
comment|// Helpers
comment|// *************************************************************************
DECL|method|onDemand (DnsConfiguration configuration)
specifier|public
specifier|static
name|DnsServiceCallServerListStrategy
name|onDemand
parameter_list|(
name|DnsConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|OnDemand
argument_list|(
name|configuration
argument_list|)
return|;
block|}
block|}
end_class

end_unit

