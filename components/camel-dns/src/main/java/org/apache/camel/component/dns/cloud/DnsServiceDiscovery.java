begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dns.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dns
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dns
operator|.
name|DnsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|SRVRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|TextParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Type
import|;
end_import

begin_class
DECL|class|DnsServiceDiscovery
specifier|public
specifier|final
class|class
name|DnsServiceDiscovery
extends|extends
name|DefaultServiceDiscovery
block|{
DECL|field|COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|SRVRecord
argument_list|>
name|COMPARATOR
init|=
name|comparator
argument_list|()
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|DnsConfiguration
name|configuration
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Lookup
argument_list|>
name|cache
decl_stmt|;
DECL|method|DnsServiceDiscovery (DnsConfiguration configuration)
specifier|public
name|DnsServiceDiscovery
parameter_list|(
name|DnsConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|cache
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getServices (String name)
specifier|public
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|getServices
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Lookup
name|lookup
init|=
name|cache
operator|.
name|computeIfAbsent
argument_list|(
name|name
argument_list|,
name|this
operator|::
name|createLookup
argument_list|)
decl_stmt|;
specifier|final
name|Record
index|[]
name|records
init|=
name|lookup
operator|.
name|run
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|services
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|nonNull
argument_list|(
name|records
argument_list|)
operator|&&
name|lookup
operator|.
name|getResult
argument_list|()
operator|==
name|Lookup
operator|.
name|SUCCESSFUL
condition|)
block|{
name|services
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|records
argument_list|)
operator|.
name|filter
argument_list|(
name|SRVRecord
operator|.
name|class
operator|::
name|isInstance
argument_list|)
operator|.
name|map
argument_list|(
name|SRVRecord
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|sorted
argument_list|(
name|COMPARATOR
argument_list|)
operator|.
name|map
argument_list|(
name|record
lambda|->
name|asService
argument_list|(
name|name
argument_list|,
name|record
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|services
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|createLookup (String name)
specifier|private
name|Lookup
name|createLookup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|Lookup
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s.%s.%s"
argument_list|,
name|name
argument_list|,
name|configuration
operator|.
name|getProto
argument_list|()
argument_list|,
name|configuration
operator|.
name|getDomain
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|SRV
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TextParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|comparator ()
specifier|private
specifier|static
name|Comparator
argument_list|<
name|SRVRecord
argument_list|>
name|comparator
parameter_list|()
block|{
name|Comparator
argument_list|<
name|SRVRecord
argument_list|>
name|byPriority
init|=
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
name|Integer
operator|.
name|compare
argument_list|(
name|e2
operator|.
name|getPriority
argument_list|()
argument_list|,
name|e1
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|SRVRecord
argument_list|>
name|byWeight
init|=
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
name|Integer
operator|.
name|compare
argument_list|(
name|e2
operator|.
name|getWeight
argument_list|()
argument_list|,
name|e1
operator|.
name|getWeight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|byPriority
operator|.
name|thenComparing
argument_list|(
name|byWeight
argument_list|)
return|;
block|}
DECL|method|asService (String serviceName, SRVRecord record)
specifier|private
specifier|static
name|ServiceDefinition
name|asService
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|SRVRecord
name|record
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|record
operator|.
name|getPriority
argument_list|()
argument_list|,
name|val
lambda|->
name|meta
operator|.
name|put
argument_list|(
literal|"priority"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|record
operator|.
name|getWeight
argument_list|()
argument_list|,
name|val
lambda|->
name|meta
operator|.
name|put
argument_list|(
literal|"weight"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultServiceDefinition
argument_list|(
name|serviceName
argument_list|,
name|record
operator|.
name|getTarget
argument_list|()
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|,
name|record
operator|.
name|getPort
argument_list|()
argument_list|,
name|meta
argument_list|)
return|;
block|}
block|}
end_class

end_unit

