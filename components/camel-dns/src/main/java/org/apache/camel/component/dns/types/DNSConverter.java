begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dns.types
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dns
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|DClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|ExtendedResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|ReverseMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xbill
operator|.
name|DNS
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  *   * A converter for all the DNS objects used by the DNS component.  *  */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|DNSConverter
specifier|public
class|class
name|DNSConverter
block|{
comment|/**      * @param record      * @return the String representation of a record.      */
annotation|@
name|Converter
DECL|method|convert (Record record)
specifier|public
name|String
name|convert
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
return|return
name|record
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @param records      * @return the String representation of a record.      */
annotation|@
name|Converter
DECL|method|convert (Record[] records)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|convert
parameter_list|(
name|Record
index|[]
name|records
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Record
name|rec
range|:
name|records
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|rec
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**      * @param message      * @return the String representation of a message.      */
annotation|@
name|Converter
DECL|method|convert (Message message)
specifier|public
name|String
name|convert
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *       * @param address a DNS address      * @return its String representation.      */
annotation|@
name|Converter
DECL|method|convert (Address address)
specifier|public
name|String
name|convert
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
return|return
name|address
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *       * @param address      * @return the host name of the address.      */
annotation|@
name|Converter
DECL|method|convert (InetAddress address)
specifier|public
name|String
name|convert
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
return|return
name|address
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
comment|/**      * @param domain      * @return the InetAddress object for a given domain.      * @throws UnknownHostException      */
annotation|@
name|Converter
DECL|method|convert (String domain)
specifier|public
name|InetAddress
name|convert
parameter_list|(
name|String
name|domain
parameter_list|)
throws|throws
name|UnknownHostException
block|{
return|return
name|Address
operator|.
name|getByName
argument_list|(
operator|(
name|String
operator|)
name|domain
argument_list|)
return|;
block|}
block|}
end_class

end_unit

