begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.everit.jsonschema
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|everit
operator|.
name|jsonschema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|everit
operator|.
name|json
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|everit
operator|.
name|json
operator|.
name|schema
operator|.
name|loader
operator|.
name|SchemaLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONTokener
import|;
end_import

begin_comment
comment|/**  * Validates the payload of a message using XML Schema and JAXP Validation.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed JSON ValidatorEndpoint"
argument_list|)
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"json-validator"
argument_list|,
name|title
operator|=
literal|"JSON Schema Validator"
argument_list|,
name|syntax
operator|=
literal|"json-validator:resourceUri"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"core,validation"
argument_list|)
DECL|class|JsonSchemaValidatorEndpoint
specifier|public
class|class
name|JsonSchemaValidatorEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"URL to a local resource on the classpath, or a reference to lookup a bean in the Registry,"
operator|+
literal|" or a full URL to a remote resource or resource on the file system which contains the JSON Schema to validate against."
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|resourceUri
specifier|private
name|String
name|resourceUri
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom org.apache.camel.component.everit.jsonschema.JsonValidatorErrorHandler. "
operator|+
literal|"The default error handler captures the errors and throws an exception."
argument_list|)
DECL|field|errorHandler
specifier|private
name|JsonValidatorErrorHandler
name|errorHandler
init|=
operator|new
name|DefaultJsonValidationErrorHandler
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Whether to fail if no body exists."
argument_list|)
DECL|field|failOnNullBody
specifier|private
name|boolean
name|failOnNullBody
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Whether to fail if no header exists when validating against a header."
argument_list|)
DECL|field|failOnNullHeader
specifier|private
name|boolean
name|failOnNullHeader
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"To validate against a header instead of the message body."
argument_list|)
DECL|field|headerName
specifier|private
name|String
name|headerName
decl_stmt|;
comment|/**      * We need a one-to-one relation between endpoint and a Schema       * to be able to clear the cached schema. See method      * {@link #clearCachedSchema}.      */
DECL|field|schema
specifier|private
name|Schema
name|schema
decl_stmt|;
DECL|method|JsonSchemaValidatorEndpoint (String endpointUri, Component component, String resourceUri)
specifier|public
name|JsonSchemaValidatorEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|resourceUri
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceUri
operator|=
name|resourceUri
expr_stmt|;
block|}
DECL|method|loadSchema ()
specifier|private
name|Schema
name|loadSchema
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|resourceUri
argument_list|,
literal|"resourceUri"
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
operator|.
name|resourceUri
argument_list|)
init|)
block|{
name|JSONObject
name|rawSchema
init|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|JSONTokener
argument_list|(
name|inputStream
argument_list|)
argument_list|)
decl_stmt|;
comment|// LOG.debug("JSON schema: {}", rawSchema);
return|return
name|SchemaLoader
operator|.
name|load
argument_list|(
name|rawSchema
argument_list|)
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Clears the cached schema, forcing to re-load the schema on next request"
argument_list|)
DECL|method|clearCachedSchema ()
specifier|public
name|void
name|clearCachedSchema
parameter_list|()
block|{
name|this
operator|.
name|schema
operator|=
literal|null
expr_stmt|;
comment|// will cause to reload the schema
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|schema
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|schema
operator|=
name|loadSchema
argument_list|()
expr_stmt|;
block|}
name|JsonValidatingProcessor
name|validator
init|=
operator|new
name|JsonValidatingProcessor
argument_list|(
name|this
operator|.
name|schema
argument_list|)
decl_stmt|;
name|configureValidator
argument_list|(
name|validator
argument_list|)
expr_stmt|;
return|return
operator|new
name|JsonSchemaValidatorProducer
argument_list|(
name|this
argument_list|,
name|validator
argument_list|)
return|;
block|}
DECL|method|configureValidator (JsonValidatingProcessor validator)
specifier|private
name|void
name|configureValidator
parameter_list|(
name|JsonValidatingProcessor
name|validator
parameter_list|)
block|{
name|validator
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
name|validator
operator|.
name|setFailOnNullBody
argument_list|(
name|failOnNullBody
argument_list|)
expr_stmt|;
name|validator
operator|.
name|setFailOnNullHeader
argument_list|(
name|failOnNullHeader
argument_list|)
expr_stmt|;
name|validator
operator|.
name|setHeaderName
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot consume from validator"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getResourceUri ()
specifier|public
name|String
name|getResourceUri
parameter_list|()
block|{
return|return
name|resourceUri
return|;
block|}
comment|/**      * URL to a local resource on the classpath, or a reference to lookup a bean in the Registry,      * or a full URL to a remote resource or resource on the file system which contains the JSON Schema to validate against.      */
DECL|method|setResourceUri (String resourceUri)
specifier|public
name|void
name|setResourceUri
parameter_list|(
name|String
name|resourceUri
parameter_list|)
block|{
name|this
operator|.
name|resourceUri
operator|=
name|resourceUri
expr_stmt|;
block|}
DECL|method|getErrorHandler ()
specifier|public
name|JsonValidatorErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
comment|/**      * To use a custom org.apache.camel.processor.validation.ValidatorErrorHandler.      *<p/>      * The default error handler captures the errors and throws an exception.      */
DECL|method|setErrorHandler (JsonValidatorErrorHandler errorHandler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|JsonValidatorErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
DECL|method|isFailOnNullBody ()
specifier|public
name|boolean
name|isFailOnNullBody
parameter_list|()
block|{
return|return
name|failOnNullBody
return|;
block|}
comment|/**      * Whether to fail if no body exists.      */
DECL|method|setFailOnNullBody (boolean failOnNullBody)
specifier|public
name|void
name|setFailOnNullBody
parameter_list|(
name|boolean
name|failOnNullBody
parameter_list|)
block|{
name|this
operator|.
name|failOnNullBody
operator|=
name|failOnNullBody
expr_stmt|;
block|}
DECL|method|isFailOnNullHeader ()
specifier|public
name|boolean
name|isFailOnNullHeader
parameter_list|()
block|{
return|return
name|failOnNullHeader
return|;
block|}
comment|/**      * Whether to fail if no header exists when validating against a header.      */
DECL|method|setFailOnNullHeader (boolean failOnNullHeader)
specifier|public
name|void
name|setFailOnNullHeader
parameter_list|(
name|boolean
name|failOnNullHeader
parameter_list|)
block|{
name|this
operator|.
name|failOnNullHeader
operator|=
name|failOnNullHeader
expr_stmt|;
block|}
DECL|method|getHeaderName ()
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
comment|/**      * To validate against a header instead of the message body.      */
DECL|method|setHeaderName (String headerName)
specifier|public
name|void
name|setHeaderName
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
name|this
operator|.
name|headerName
operator|=
name|headerName
expr_stmt|;
block|}
block|}
end_class

end_unit

