begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.everit.jsonschema
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|everit
operator|.
name|jsonschema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AsyncProcessorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|everit
operator|.
name|json
operator|.
name|schema
operator|.
name|ObjectSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|everit
operator|.
name|json
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|everit
operator|.
name|json
operator|.
name|schema
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONTokener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A processor which validates the JSON of the inbound message body  * against some JSON schema  */
end_comment

begin_class
DECL|class|JsonValidatingProcessor
specifier|public
class|class
name|JsonValidatingProcessor
implements|implements
name|AsyncProcessor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonValidatingProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|schemaReader
specifier|private
name|JsonSchemaReader
name|schemaReader
decl_stmt|;
DECL|field|errorHandler
specifier|private
name|JsonValidatorErrorHandler
name|errorHandler
init|=
operator|new
name|DefaultJsonValidationErrorHandler
argument_list|()
decl_stmt|;
DECL|field|failOnNullBody
specifier|private
name|boolean
name|failOnNullBody
init|=
literal|true
decl_stmt|;
DECL|field|failOnNullHeader
specifier|private
name|boolean
name|failOnNullHeader
init|=
literal|true
decl_stmt|;
DECL|field|headerName
specifier|private
name|String
name|headerName
decl_stmt|;
DECL|method|JsonValidatingProcessor ()
specifier|public
name|JsonValidatingProcessor
parameter_list|()
block|{              }
DECL|method|JsonValidatingProcessor (JsonSchemaReader schemaReader)
specifier|public
name|JsonValidatingProcessor
parameter_list|(
name|JsonSchemaReader
name|schemaReader
parameter_list|)
block|{
name|this
operator|.
name|schemaReader
operator|=
name|schemaReader
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|AsyncProcessorHelper
operator|.
name|process
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
name|doProcess
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|doProcess (Exchange exchange)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|jsonPayload
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|getContentToValidate
argument_list|(
name|exchange
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldUseHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
operator|&&
name|isFailOnNullHeader
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoJsonHeaderValidationException
argument_list|(
name|exchange
argument_list|,
name|headerName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|is
operator|==
literal|null
operator|&&
name|isFailOnNullBody
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoJsonBodyValidationException
argument_list|(
name|exchange
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|schema
operator|=
name|this
operator|.
name|schemaReader
operator|.
name|getSchema
argument_list|()
expr_stmt|;
if|if
condition|(
name|schema
operator|instanceof
name|ObjectSchema
condition|)
block|{
name|jsonPayload
operator|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|JSONTokener
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsonPayload
operator|=
operator|new
name|JSONArray
argument_list|(
operator|new
name|JSONTokener
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// throws a ValidationException if this object is invalid
name|schema
operator|.
name|validate
argument_list|(
name|jsonPayload
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"JSON is valid"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|.
name|handleErrors
argument_list|(
name|exchange
argument_list|,
name|schema
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|.
name|handleErrors
argument_list|(
name|exchange
argument_list|,
name|schema
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContentToValidate (Exchange exchange, Class<T> clazz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getContentToValidate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|shouldUseHeader
argument_list|()
condition|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|clazz
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
DECL|method|shouldUseHeader ()
specifier|private
name|boolean
name|shouldUseHeader
parameter_list|()
block|{
return|return
name|headerName
operator|!=
literal|null
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getErrorHandler ()
specifier|public
name|JsonValidatorErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
DECL|method|setErrorHandler (JsonValidatorErrorHandler errorHandler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|JsonValidatorErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
DECL|method|isFailOnNullBody ()
specifier|public
name|boolean
name|isFailOnNullBody
parameter_list|()
block|{
return|return
name|failOnNullBody
return|;
block|}
DECL|method|setFailOnNullBody (boolean failOnNullBody)
specifier|public
name|void
name|setFailOnNullBody
parameter_list|(
name|boolean
name|failOnNullBody
parameter_list|)
block|{
name|this
operator|.
name|failOnNullBody
operator|=
name|failOnNullBody
expr_stmt|;
block|}
DECL|method|isFailOnNullHeader ()
specifier|public
name|boolean
name|isFailOnNullHeader
parameter_list|()
block|{
return|return
name|failOnNullHeader
return|;
block|}
DECL|method|setFailOnNullHeader (boolean failOnNullHeader)
specifier|public
name|void
name|setFailOnNullHeader
parameter_list|(
name|boolean
name|failOnNullHeader
parameter_list|)
block|{
name|this
operator|.
name|failOnNullHeader
operator|=
name|failOnNullHeader
expr_stmt|;
block|}
DECL|method|getHeaderName ()
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|headerName
return|;
block|}
DECL|method|setHeaderName (String headerName)
specifier|public
name|void
name|setHeaderName
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
name|this
operator|.
name|headerName
operator|=
name|headerName
expr_stmt|;
block|}
block|}
end_class

end_unit

