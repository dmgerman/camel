begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AvailablePortFinderTest
specifier|public
class|class
name|AvailablePortFinderTest
block|{
annotation|@
name|Test
DECL|method|getNextAvailablePort ()
specifier|public
name|void
name|getNextAvailablePort
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|p1
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|int
name|p2
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Port "
operator|+
name|p1
operator|+
literal|" Port2 "
operator|+
name|p2
argument_list|,
name|p1
operator|==
name|p2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNextAvailablePortInt ()
specifier|public
name|void
name|testGetNextAvailablePortInt
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|p1
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|9123
argument_list|)
decl_stmt|;
name|int
name|p2
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|9123
argument_list|)
decl_stmt|;
comment|// these calls only check availability but don't mark the port as in use.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotAvailablePort ()
specifier|public
name|void
name|testNotAvailablePort
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|p1
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|11000
argument_list|)
decl_stmt|;
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|int
name|p2
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Port "
operator|+
name|p1
operator|+
literal|" Port2 "
operator|+
name|p2
argument_list|,
name|p1
operator|==
name|p2
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|getMinOutOfRangePort ()
specifier|public
name|void
name|getMinOutOfRangePort
parameter_list|()
throws|throws
name|Exception
block|{
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
name|AvailablePortFinder
operator|.
name|MIN_PORT_NUMBER
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|getMaxOutOfRangePort ()
specifier|public
name|void
name|getMaxOutOfRangePort
parameter_list|()
throws|throws
name|Exception
block|{
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
name|AvailablePortFinder
operator|.
name|MAX_PORT_NUMBER
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

