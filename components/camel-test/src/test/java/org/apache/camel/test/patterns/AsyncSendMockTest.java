begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.patterns
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|patterns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AsyncSendMockTest
specifier|public
class|class
name|AsyncSendMockTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|isMockEndpoints ()
specifier|public
name|String
name|isMockEndpoints
parameter_list|()
block|{
return|return
literal|"seda*"
return|;
block|}
annotation|@
name|Test
DECL|method|testmakeAsyncApiCall ()
specifier|public
name|void
name|testmakeAsyncApiCall
parameter_list|()
block|{
try|try
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:seda:start"
argument_list|)
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"username"
argument_list|,
literal|"admin123"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:seda:start"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|DefaultExchange
name|dfex
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|dfex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"username"
argument_list|,
literal|"admin123"
argument_list|)
expr_stmt|;
name|dfex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"password"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|dfex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncSend
argument_list|(
literal|"seda:start"
argument_list|,
name|dfex
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to make async call to api"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

