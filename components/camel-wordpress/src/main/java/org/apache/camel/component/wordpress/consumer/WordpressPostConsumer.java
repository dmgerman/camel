begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.wordpress.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|WordpressEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|api
operator|.
name|WordpressServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|api
operator|.
name|model
operator|.
name|Post
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|api
operator|.
name|model
operator|.
name|PostSearchCriteria
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|api
operator|.
name|service
operator|.
name|WordpressServicePosts
import|;
end_import

begin_comment
comment|/**  * Consumer for Posts. Adapter for {@link WordpressServicePosts} read only methods (list and retrieve).  */
end_comment

begin_class
DECL|class|WordpressPostConsumer
specifier|public
class|class
name|WordpressPostConsumer
extends|extends
name|AbstractWordpressConsumer
block|{
DECL|field|servicePosts
specifier|private
name|WordpressServicePosts
name|servicePosts
decl_stmt|;
DECL|method|WordpressPostConsumer (WordpressEndpoint endpoint, Processor processor)
specifier|public
name|WordpressPostConsumer
parameter_list|(
name|WordpressEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|servicePosts
operator|=
name|WordpressServiceProvider
operator|.
name|getInstance
argument_list|()
operator|.
name|getService
argument_list|(
name|WordpressServicePosts
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|WordpressPostConsumer (WordpressEndpoint endpoint, Processor processor, ScheduledExecutorService scheduledExecutorService)
specifier|public
name|WordpressPostConsumer
parameter_list|(
name|WordpressEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
name|servicePosts
operator|=
name|WordpressServiceProvider
operator|.
name|getInstance
argument_list|()
operator|.
name|getService
argument_list|(
name|WordpressServicePosts
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|pollForPostList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|pollForSingle
argument_list|()
return|;
block|}
block|}
DECL|method|pollForPostList ()
specifier|private
name|int
name|pollForPostList
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Post
argument_list|>
name|posts
init|=
name|this
operator|.
name|servicePosts
operator|.
name|list
argument_list|(
operator|(
name|PostSearchCriteria
operator|)
name|getConfiguration
argument_list|()
operator|.
name|getSearchCriteria
argument_list|()
argument_list|)
decl_stmt|;
name|posts
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|this
operator|.
name|process
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|posts
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|pollForSingle ()
specifier|private
name|int
name|pollForSingle
parameter_list|()
block|{
specifier|final
name|Post
name|post
init|=
name|this
operator|.
name|servicePosts
operator|.
name|retrieve
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|post
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|this
operator|.
name|process
argument_list|(
name|post
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

