begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.wordpress.api.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|api
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|api
operator|.
name|WordpressServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|bootstrap
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|WordpressMockServerTestSupport
specifier|public
specifier|abstract
class|class
name|WordpressMockServerTestSupport
block|{
DECL|field|localServer
specifier|protected
specifier|static
name|HttpServer
name|localServer
decl_stmt|;
DECL|field|serviceProvider
specifier|protected
specifier|static
name|WordpressServiceProvider
name|serviceProvider
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WordpressMockServerTestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PORT
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
literal|9009
decl_stmt|;
DECL|method|WordpressMockServerTestSupport ()
specifier|public
name|WordpressMockServerTestSupport
parameter_list|()
block|{      }
annotation|@
name|BeforeClass
DECL|method|setUpMockServer ()
specifier|public
specifier|static
name|void
name|setUpMockServer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// @formatter:off
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|localServer
operator|=
name|createServer
argument_list|(
name|PORT
operator|+
name|i
argument_list|)
expr_stmt|;
name|localServer
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|BindException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Port {} already in use, trying next one"
argument_list|,
name|PORT
operator|+
name|i
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
name|serviceProvider
operator|=
name|WordpressServiceProvider
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|serviceProvider
operator|.
name|init
argument_list|(
name|getServerBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
comment|// @formatter:on
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Local server up and running on address {} and port {}"
argument_list|,
name|localServer
operator|.
name|getInetAddress
argument_list|()
argument_list|,
name|localServer
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createServer (int port)
specifier|private
specifier|static
name|HttpServer
name|createServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|postsListCreateRequestHandlers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|postsListCreateRequestHandlers
operator|.
name|put
argument_list|(
literal|"GET"
argument_list|,
literal|"/data/posts/list.json"
argument_list|)
expr_stmt|;
name|postsListCreateRequestHandlers
operator|.
name|put
argument_list|(
literal|"POST"
argument_list|,
literal|"/data/posts/create.json"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|postsSingleUpdateRequestHandlers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|postsSingleUpdateRequestHandlers
operator|.
name|put
argument_list|(
literal|"GET"
argument_list|,
literal|"/data/posts/single.json"
argument_list|)
expr_stmt|;
name|postsSingleUpdateRequestHandlers
operator|.
name|put
argument_list|(
literal|"POST"
argument_list|,
literal|"/data/posts/update.json"
argument_list|)
expr_stmt|;
name|postsSingleUpdateRequestHandlers
operator|.
name|put
argument_list|(
literal|"DELETE"
argument_list|,
literal|"/data/posts/delete.json"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|usersListCreateRequestHandlers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|usersListCreateRequestHandlers
operator|.
name|put
argument_list|(
literal|"GET"
argument_list|,
literal|"/data/users/list.json"
argument_list|)
expr_stmt|;
name|usersListCreateRequestHandlers
operator|.
name|put
argument_list|(
literal|"POST"
argument_list|,
literal|"/data/users/create.json"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|usersSingleUpdateRequestHandlers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|usersSingleUpdateRequestHandlers
operator|.
name|put
argument_list|(
literal|"GET"
argument_list|,
literal|"/data/users/single.json"
argument_list|)
expr_stmt|;
name|usersSingleUpdateRequestHandlers
operator|.
name|put
argument_list|(
literal|"POST"
argument_list|,
literal|"/data/users/update.json"
argument_list|)
expr_stmt|;
name|usersSingleUpdateRequestHandlers
operator|.
name|put
argument_list|(
literal|"DELETE"
argument_list|,
literal|"/data/users/delete.json"
argument_list|)
expr_stmt|;
comment|// @formatter:off
return|return
name|ServerBootstrap
operator|.
name|bootstrap
argument_list|()
operator|.
name|setListenerPort
argument_list|(
name|port
argument_list|)
operator|.
name|registerHandler
argument_list|(
literal|"/wp/v2/posts"
argument_list|,
operator|new
name|WordpressServerHttpRequestHandler
argument_list|(
name|postsListCreateRequestHandlers
argument_list|)
argument_list|)
operator|.
name|registerHandler
argument_list|(
literal|"/wp/v2/posts/*"
argument_list|,
operator|new
name|WordpressServerHttpRequestHandler
argument_list|(
name|postsSingleUpdateRequestHandlers
argument_list|)
argument_list|)
operator|.
name|registerHandler
argument_list|(
literal|"/wp/v2/users"
argument_list|,
operator|new
name|WordpressServerHttpRequestHandler
argument_list|(
name|usersListCreateRequestHandlers
argument_list|)
argument_list|)
operator|.
name|registerHandler
argument_list|(
literal|"/wp/v2/users/*"
argument_list|,
operator|new
name|WordpressServerHttpRequestHandler
argument_list|(
name|usersSingleUpdateRequestHandlers
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
return|;
comment|// @formatter:on
block|}
annotation|@
name|AfterClass
DECL|method|tearDownMockServer ()
specifier|public
specifier|static
name|void
name|tearDownMockServer
parameter_list|()
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Stopping local server"
argument_list|)
expr_stmt|;
if|if
condition|(
name|localServer
operator|!=
literal|null
condition|)
block|{
name|localServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getServiceProvider ()
specifier|public
specifier|static
name|WordpressServiceProvider
name|getServiceProvider
parameter_list|()
block|{
return|return
name|serviceProvider
return|;
block|}
DECL|method|getServerBaseUrl ()
specifier|public
specifier|static
name|String
name|getServerBaseUrl
parameter_list|()
block|{
return|return
literal|"http://"
operator|+
name|localServer
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|localServer
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

