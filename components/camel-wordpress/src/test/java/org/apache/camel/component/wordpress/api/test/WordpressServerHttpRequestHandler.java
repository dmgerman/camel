begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.wordpress.api.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|wordpress
operator|.
name|api
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|WordpressServerHttpRequestHandler
specifier|public
class|class
name|WordpressServerHttpRequestHandler
implements|implements
name|HttpRequestHandler
block|{
DECL|field|USERNAME
specifier|public
specifier|static
specifier|final
name|String
name|USERNAME
init|=
literal|"ben"
decl_stmt|;
DECL|field|PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password123"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WordpressServerHttpRequestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockResourceJsonResponse
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mockResourceJsonResponse
decl_stmt|;
DECL|method|WordpressServerHttpRequestHandler (String mockResourceJsonResponse)
specifier|public
name|WordpressServerHttpRequestHandler
parameter_list|(
name|String
name|mockResourceJsonResponse
parameter_list|)
block|{
name|this
operator|.
name|mockResourceJsonResponse
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"GET"
argument_list|,
name|mockResourceJsonResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|WordpressServerHttpRequestHandler (Map<String, String> mockResourceJsonResponse)
specifier|public
name|WordpressServerHttpRequestHandler
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mockResourceJsonResponse
parameter_list|)
block|{
name|this
operator|.
name|mockResourceJsonResponse
operator|=
name|mockResourceJsonResponse
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (HttpRequest request, HttpResponse response, HttpContext context)
specifier|public
name|void
name|handle
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"received request {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
specifier|final
name|HttpRequestWrapper
name|requestWrapper
init|=
name|HttpRequestWrapper
operator|.
name|wrap
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// make sure that our writing operations have authentication header
if|if
condition|(
operator|!
name|authenticate
argument_list|(
name|requestWrapper
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatusCode
argument_list|(
name|HttpStatus
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"Forbidden"
argument_list|,
name|ContentType
operator|.
name|TEXT_PLAIN
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|responseBody
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|mockResourceJsonResponse
operator|.
name|get
argument_list|(
name|requestWrapper
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseBody
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Resource not found on {}. Response body null."
argument_list|,
name|mockResourceJsonResponse
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setStatusCode
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
name|responseBody
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|authenticate (HttpRequestWrapper request)
specifier|private
name|boolean
name|authenticate
parameter_list|(
name|HttpRequestWrapper
name|request
parameter_list|)
block|{
comment|// read operations don't need to authenticate
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|contentEquals
argument_list|(
literal|"GET"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Header
name|authorizationHeader
range|:
name|request
operator|.
name|getHeaders
argument_list|(
literal|"Authorization"
argument_list|)
control|)
block|{
comment|// Authorization: Basic base64credentials
name|String
name|base64Credentials
init|=
name|authorizationHeader
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|"Basic"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|credentials
init|=
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|base64Credentials
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
comment|// credentials = username:password
specifier|final
name|String
index|[]
name|values
init|=
name|credentials
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|USERNAME
operator|.
name|equals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
operator|&&
name|PASSWORD
operator|.
name|equals
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

