begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.openstack.nova
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|nova
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|nova
operator|.
name|producer
operator|.
name|ServerProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|api
operator|.
name|Builders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|common
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|ServerCreate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|openstack
operator|.
name|compute
operator|.
name|domain
operator|.
name|NovaServerCreate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ServerProducerTest
specifier|public
class|class
name|ServerProducerTest
extends|extends
name|NovaProducerTestSupport
block|{
annotation|@
name|Mock
DECL|field|testOSServer
specifier|private
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|Server
name|testOSServer
decl_stmt|;
DECL|field|dummyServer
specifier|private
name|ServerCreate
name|dummyServer
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|producer
operator|=
operator|new
name|ServerProducer
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|serverService
operator|.
name|boot
argument_list|(
name|any
argument_list|(
name|NovaServerCreate
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testOSServer
argument_list|)
expr_stmt|;
name|dummyServer
operator|=
name|createDummyServer
argument_list|()
expr_stmt|;
name|initServerMock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createServer ()
specifier|public
name|void
name|createServer
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NovaConstants
operator|.
name|CREATE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedFlavorID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|testOSServer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedFlavorID
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
name|dummyServer
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|created
init|=
name|msg
operator|.
name|getBody
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|checkCreatedServer
argument_list|(
name|dummyServer
argument_list|,
name|created
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createServerWithHeaders ()
specifier|public
name|void
name|createServerWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expectedFlavorID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|testOSServer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedFlavorID
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|OPERATION
argument_list|,
name|NovaConstants
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|NAME
argument_list|,
name|dummyServer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|FLAVOR_ID
argument_list|,
name|dummyServer
operator|.
name|getFlavorRef
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|IMAGE_ID
argument_list|,
name|dummyServer
operator|.
name|getImageRef
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|created
init|=
name|msg
operator|.
name|getBody
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|checkCreatedServer
argument_list|(
name|dummyServer
argument_list|,
name|created
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|serverAction ()
specifier|public
name|void
name|serverAction
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|serverService
operator|.
name|action
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Action
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ActionResponse
operator|.
name|actionSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NovaConstants
operator|.
name|ACTION
argument_list|)
expr_stmt|;
name|String
name|id
init|=
literal|"myID"
decl_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|ACTION
argument_list|,
name|Action
operator|.
name|PAUSE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Action
argument_list|>
name|actionArgumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Action
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|idArgumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|serverService
argument_list|)
operator|.
name|action
argument_list|(
name|idArgumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|actionArgumentCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|idArgumentCaptor
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actionArgumentCaptor
operator|.
name|getValue
argument_list|()
operator|==
name|Action
operator|.
name|PAUSE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|msg
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|msg
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
comment|//test fail
specifier|final
name|String
name|failReason
init|=
literal|"fr"
decl_stmt|;
name|when
argument_list|(
name|serverService
operator|.
name|action
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Action
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ActionResponse
operator|.
name|actionFailed
argument_list|(
name|failReason
argument_list|,
literal|401
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|contains
argument_list|(
name|failReason
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createSnapshot ()
specifier|public
name|void
name|createSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"myID"
decl_stmt|;
name|String
name|snapshotName
init|=
literal|"mySnapshot"
decl_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|OPERATION
argument_list|,
name|NovaConstants
operator|.
name|CREATE_SNAPSHOT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|NAME
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setHeader
argument_list|(
name|NovaConstants
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|snapshot
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|idCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|serverService
argument_list|)
operator|.
name|createSnapshot
argument_list|(
name|idCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|snapshot
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|idCaptor
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotName
argument_list|,
name|snapshot
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initServerMock ()
specifier|private
name|void
name|initServerMock
parameter_list|()
block|{
name|when
argument_list|(
name|testOSServer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|testOSServer
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dummyServer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|testOSServer
operator|.
name|getFlavorId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dummyServer
operator|.
name|getFlavorRef
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|testOSServer
operator|.
name|getImageId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dummyServer
operator|.
name|getImageRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createDummyServer ()
specifier|private
name|ServerCreate
name|createDummyServer
parameter_list|()
block|{
return|return
name|Builders
operator|.
name|server
argument_list|()
operator|.
name|name
argument_list|(
literal|"MyCoolServer"
argument_list|)
operator|.
name|flavor
argument_list|(
literal|"flavorID"
argument_list|)
operator|.
name|image
argument_list|(
literal|"imageID"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|checkCreatedServer (ServerCreate old, Server created)
specifier|private
name|void
name|checkCreatedServer
parameter_list|(
name|ServerCreate
name|old
parameter_list|,
name|Server
name|created
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|old
operator|.
name|getName
argument_list|()
argument_list|,
name|created
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|old
operator|.
name|getFlavorRef
argument_list|()
argument_list|,
name|created
operator|.
name|getFlavorId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|old
operator|.
name|getImageRef
argument_list|()
argument_list|,
name|created
operator|.
name|getImageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|created
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

