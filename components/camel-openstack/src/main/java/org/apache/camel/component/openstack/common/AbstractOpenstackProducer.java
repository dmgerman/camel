begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.openstack.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|nova
operator|.
name|NovaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|api
operator|.
name|OSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|common
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|common
operator|.
name|Payload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|common
operator|.
name|Payloads
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_class
DECL|class|AbstractOpenstackProducer
specifier|public
specifier|abstract
class|class
name|AbstractOpenstackProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|os
specifier|protected
name|OSClient
name|os
decl_stmt|;
DECL|field|endpoint
specifier|private
name|AbstractOpenstackEndpoint
name|endpoint
decl_stmt|;
DECL|method|AbstractOpenstackProducer (AbstractOpenstackEndpoint endpoint, OSClient client)
specifier|public
name|AbstractOpenstackProducer
parameter_list|(
name|AbstractOpenstackEndpoint
name|endpoint
parameter_list|,
name|OSClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|os
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|createPayload (Message msg)
specifier|protected
name|Payload
name|createPayload
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
comment|//if payload object is send directly
name|Payload
name|payload
init|=
name|msg
operator|.
name|getBody
argument_list|(
name|Payload
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|payload
argument_list|)
condition|)
block|{
return|return
name|payload
return|;
block|}
name|Object
name|messageBody
init|=
name|msg
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageBody
operator|instanceof
name|URL
condition|)
block|{
name|payload
operator|=
name|Payloads
operator|.
name|create
argument_list|(
operator|(
name|URL
operator|)
name|messageBody
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageBody
operator|instanceof
name|File
condition|)
block|{
name|payload
operator|=
name|Payloads
operator|.
name|create
argument_list|(
operator|(
name|File
operator|)
name|messageBody
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageBody
operator|instanceof
name|InputStream
condition|)
block|{
name|payload
operator|=
name|Payloads
operator|.
name|create
argument_list|(
operator|(
name|InputStream
operator|)
name|messageBody
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You have to set payload. It can be InputStream, File or URL class"
argument_list|)
throw|;
block|}
return|return
name|payload
return|;
block|}
DECL|method|getOperation (Exchange exchange)
specifier|protected
name|String
name|getOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|String
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|NovaConstants
operator|.
name|OPERATION
argument_list|,
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|operation
argument_list|,
literal|"Operation"
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
DECL|method|checkFailure (ActionResponse response, Message msg, String operation)
specifier|protected
name|void
name|checkFailure
parameter_list|(
name|ActionResponse
name|response
parameter_list|,
name|Message
name|msg
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|msg
operator|.
name|setFault
argument_list|(
operator|!
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|msg
operator|.
name|setBody
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" %s was not successful: %s"
argument_list|,
name|operation
argument_list|,
name|response
operator|.
name|getFault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

