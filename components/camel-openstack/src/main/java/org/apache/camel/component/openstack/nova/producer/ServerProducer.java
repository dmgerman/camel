begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.openstack.nova.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|nova
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|common
operator|.
name|AbstractOpenstackProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|common
operator|.
name|OpenstackConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|nova
operator|.
name|NovaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|nova
operator|.
name|NovaEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|api
operator|.
name|Builders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|api
operator|.
name|OSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|common
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|ServerCreate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|compute
operator|.
name|builder
operator|.
name|ServerCreateBuilder
import|;
end_import

begin_class
DECL|class|ServerProducer
specifier|public
class|class
name|ServerProducer
extends|extends
name|AbstractOpenstackProducer
block|{
DECL|method|ServerProducer (NovaEndpoint endpoint, OSClient client)
specifier|public
name|ServerProducer
parameter_list|(
name|NovaEndpoint
name|endpoint
parameter_list|,
name|OSClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|operation
init|=
name|getOperation
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|OpenstackConstants
operator|.
name|CREATE
case|:
name|doCreate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|NovaConstants
operator|.
name|CREATE_SNAPSHOT
case|:
name|doCreateSnapshot
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|GET
case|:
name|doGet
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|GET_ALL
case|:
name|doGetAll
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|DELETE
case|:
name|doDelete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|NovaConstants
operator|.
name|ACTION
case|:
name|doAction
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|//execute action when Operation:Action header is not set but
comment|// Action is properly specified
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|NovaConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|doAction
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|doCreate (Exchange exchange)
specifier|private
name|void
name|doCreate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|ServerCreate
name|in
init|=
name|messageToServer
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Server
name|out
init|=
name|os
operator|.
name|compute
argument_list|()
operator|.
name|servers
argument_list|()
operator|.
name|boot
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doCreateSnapshot (Exchange exchange)
specifier|private
name|void
name|doCreateSnapshot
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|serverId
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|serverId
argument_list|,
literal|"Server ID"
argument_list|)
expr_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"VolumeSnapshot name"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|snapshotId
init|=
name|os
operator|.
name|compute
argument_list|()
operator|.
name|servers
argument_list|()
operator|.
name|createSnapshot
argument_list|(
name|serverId
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
block|}
DECL|method|doGet (Exchange exchange)
specifier|private
name|void
name|doGet
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|serverId
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|serverId
argument_list|,
literal|"Server ID"
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|result
init|=
name|os
operator|.
name|compute
argument_list|()
operator|.
name|servers
argument_list|()
operator|.
name|get
argument_list|(
name|serverId
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doGetAll (Exchange exchange)
specifier|private
name|void
name|doGetAll
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Server
argument_list|>
name|out
init|=
name|os
operator|.
name|compute
argument_list|()
operator|.
name|servers
argument_list|()
operator|.
name|list
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doAction (Exchange exchange)
specifier|private
name|void
name|doAction
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Action
name|action
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|NovaConstants
operator|.
name|ACTION
argument_list|,
name|Action
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|serverId
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|action
argument_list|,
literal|"Server action"
argument_list|)
expr_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|serverId
argument_list|,
literal|"Server ID"
argument_list|)
expr_stmt|;
specifier|final
name|ActionResponse
name|response
init|=
name|os
operator|.
name|compute
argument_list|()
operator|.
name|servers
argument_list|()
operator|.
name|action
argument_list|(
name|serverId
argument_list|,
name|action
argument_list|)
decl_stmt|;
name|checkFailure
argument_list|(
name|response
argument_list|,
name|msg
argument_list|,
literal|"Performing action "
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doDelete (Exchange exchange)
specifier|private
name|void
name|doDelete
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|serverId
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|serverId
argument_list|,
literal|"Server ID"
argument_list|)
expr_stmt|;
specifier|final
name|ActionResponse
name|response
init|=
name|os
operator|.
name|compute
argument_list|()
operator|.
name|servers
argument_list|()
operator|.
name|delete
argument_list|(
name|serverId
argument_list|)
decl_stmt|;
name|checkFailure
argument_list|(
name|response
argument_list|,
name|msg
argument_list|,
literal|"Delete server with ID "
operator|+
name|serverId
argument_list|)
expr_stmt|;
block|}
DECL|method|messageToServer (Message message)
specifier|private
name|ServerCreate
name|messageToServer
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|ServerCreate
name|serverCreate
init|=
name|message
operator|.
name|getBody
argument_list|(
name|ServerCreate
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverCreate
operator|==
literal|null
condition|)
block|{
name|Map
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|ServerCreateBuilder
name|builder
init|=
name|Builders
operator|.
name|server
argument_list|()
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"Name"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|name
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|NovaConstants
operator|.
name|IMAGE_ID
argument_list|)
condition|)
block|{
name|builder
operator|.
name|image
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|NovaConstants
operator|.
name|IMAGE_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|NovaConstants
operator|.
name|NETWORK
argument_list|)
condition|)
block|{
name|builder
operator|.
name|networks
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|NovaConstants
operator|.
name|NETWORK
argument_list|,
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|NovaConstants
operator|.
name|FLAVOR_ID
argument_list|)
condition|)
block|{
name|builder
operator|.
name|flavor
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|NovaConstants
operator|.
name|FLAVOR_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|NovaConstants
operator|.
name|KEYPAIR_NAME
argument_list|)
condition|)
block|{
name|builder
operator|.
name|keypairName
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|NovaConstants
operator|.
name|KEYPAIR_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|NovaConstants
operator|.
name|ADMIN_PASSWORD
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addAdminPass
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|NovaConstants
operator|.
name|ADMIN_PASSWORD
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serverCreate
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|serverCreate
return|;
block|}
block|}
end_class

end_unit

