begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.openstack.glance
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|glance
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|common
operator|.
name|AbstractOpenstackProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openstack
operator|.
name|common
operator|.
name|OpenstackConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|api
operator|.
name|Builders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|api
operator|.
name|OSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|common
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|common
operator|.
name|Payload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|image
operator|.
name|ContainerFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|image
operator|.
name|DiskFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|image
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openstack4j
operator|.
name|model
operator|.
name|image
operator|.
name|builder
operator|.
name|ImageBuilder
import|;
end_import

begin_class
DECL|class|GlanceProducer
specifier|public
class|class
name|GlanceProducer
extends|extends
name|AbstractOpenstackProducer
block|{
DECL|method|GlanceProducer (GlanceEndpoint endpoint, OSClient client)
specifier|public
name|GlanceProducer
parameter_list|(
name|GlanceEndpoint
name|endpoint
parameter_list|,
name|OSClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operation
init|=
name|getOperation
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|GlanceConstants
operator|.
name|RESERVE
case|:
name|doReserve
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|CREATE
case|:
name|doCreate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|UPDATE
case|:
name|doUpdate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|GlanceConstants
operator|.
name|UPLOAD
case|:
name|doUpload
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|GET
case|:
name|doGet
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|GET_ALL
case|:
name|doGetAll
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|OpenstackConstants
operator|.
name|DELETE
case|:
name|doDelete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
DECL|method|doReserve (Exchange exchange)
specifier|private
name|void
name|doReserve
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Image
name|in
init|=
name|messageToImage
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Image
name|out
init|=
name|os
operator|.
name|images
argument_list|()
operator|.
name|reserve
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doCreate (Exchange exchange)
specifier|private
name|void
name|doCreate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Image
name|in
init|=
name|messageHeadersToImage
argument_list|(
name|msg
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Payload
name|payload
init|=
name|createPayload
argument_list|(
name|msg
argument_list|)
decl_stmt|;
specifier|final
name|Image
name|out
init|=
name|os
operator|.
name|images
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doUpload (Exchange exchange)
specifier|private
name|void
name|doUpload
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|imageId
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|imageId
argument_list|,
literal|"Image ID"
argument_list|)
expr_stmt|;
specifier|final
name|Image
name|in
init|=
name|messageHeadersToImage
argument_list|(
name|msg
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Payload
name|payload
init|=
name|createPayload
argument_list|(
name|msg
argument_list|)
decl_stmt|;
specifier|final
name|Image
name|out
init|=
name|os
operator|.
name|images
argument_list|()
operator|.
name|upload
argument_list|(
name|imageId
argument_list|,
name|payload
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doUpdate (Exchange exchange)
specifier|private
name|void
name|doUpdate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Image
name|in
init|=
name|messageToImage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
specifier|final
name|Image
name|out
init|=
name|os
operator|.
name|images
argument_list|()
operator|.
name|update
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doGet (Exchange exchange)
specifier|private
name|void
name|doGet
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|imageId
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|imageId
argument_list|,
literal|"ImageID"
argument_list|)
expr_stmt|;
specifier|final
name|Image
name|out
init|=
name|os
operator|.
name|images
argument_list|()
operator|.
name|get
argument_list|(
name|imageId
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doGetAll (Exchange exchange)
specifier|private
name|void
name|doGetAll
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Image
argument_list|>
name|out
init|=
name|os
operator|.
name|images
argument_list|()
operator|.
name|list
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|doDelete (Exchange exchange)
specifier|private
name|void
name|doDelete
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|imageId
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|imageId
argument_list|,
literal|"ImageID"
argument_list|)
expr_stmt|;
specifier|final
name|ActionResponse
name|response
init|=
name|os
operator|.
name|compute
argument_list|()
operator|.
name|images
argument_list|()
operator|.
name|delete
argument_list|(
name|imageId
argument_list|)
decl_stmt|;
name|checkFailure
argument_list|(
name|response
argument_list|,
name|exchange
argument_list|,
literal|"Delete image "
operator|+
name|imageId
argument_list|)
expr_stmt|;
block|}
DECL|method|messageToImage (Message message)
specifier|private
name|Image
name|messageToImage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Image
name|image
init|=
name|message
operator|.
name|getBody
argument_list|(
name|Image
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|==
literal|null
condition|)
block|{
name|image
operator|=
name|messageHeadersToImage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|image
return|;
block|}
DECL|method|messageHeadersToImage (Message message, boolean required)
specifier|private
name|Image
name|messageHeadersToImage
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|ImageBuilder
name|imageBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|required
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Image Name must be specified and not empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|name
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|DISK_FORMAT
argument_list|,
name|DiskFormat
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|diskFormat
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|DISK_FORMAT
argument_list|,
name|DiskFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|CONTAINER_FORMAT
argument_list|,
name|ContainerFormat
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|containerFormat
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|CONTAINER_FORMAT
argument_list|,
name|ContainerFormat
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|SIZE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|size
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|SIZE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|CHECKSUM
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|checksum
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|CHECKSUM
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|MIN_DISK
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|minDisk
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|MIN_DISK
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|MIN_RAM
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|minRam
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|MIN_RAM
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|OWNER
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|owner
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|OWNER
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|IS_PUBLIC
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|isPublic
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|GlanceConstants
operator|.
name|IS_PUBLIC
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|PROPERTIES
argument_list|)
argument_list|)
condition|)
block|{
name|imageBuilder
operator|=
name|getImageBuilder
argument_list|(
name|imageBuilder
argument_list|)
operator|.
name|properties
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|OpenstackConstants
operator|.
name|PROPERTIES
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|required
operator|&&
name|imageBuilder
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|imageBuilder
argument_list|,
literal|"Image"
argument_list|)
expr_stmt|;
return|return
name|imageBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getImageBuilder (ImageBuilder builder)
specifier|private
name|ImageBuilder
name|getImageBuilder
parameter_list|(
name|ImageBuilder
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|==
literal|null
condition|?
name|Builders
operator|.
name|image
argument_list|()
else|:
name|builder
return|;
block|}
block|}
end_class

end_unit

