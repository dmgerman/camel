begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyManagementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_class
DECL|class|RabbitMQConnectionFactorySupport
specifier|public
class|class
name|RabbitMQConnectionFactorySupport
block|{
DECL|method|createFactoryFor (final RabbitMQEndpoint endpoint)
specifier|public
name|ConnectionFactory
name|createFactoryFor
parameter_list|(
specifier|final
name|RabbitMQEndpoint
name|endpoint
parameter_list|)
block|{
name|ConnectionFactory
name|factory
init|=
operator|new
name|ConnectionFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setUsername
argument_list|(
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPassword
argument_list|(
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setVirtualHost
argument_list|(
name|endpoint
operator|.
name|getVhost
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setHost
argument_list|(
name|endpoint
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPort
argument_list|(
name|endpoint
operator|.
name|getPortNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getClientProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setClientProperties
argument_list|(
name|endpoint
operator|.
name|getClientProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|setConnectionTimeout
argument_list|(
name|endpoint
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setRequestedChannelMax
argument_list|(
name|endpoint
operator|.
name|getRequestedChannelMax
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setRequestedFrameMax
argument_list|(
name|endpoint
operator|.
name|getRequestedFrameMax
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setRequestedHeartbeat
argument_list|(
name|endpoint
operator|.
name|getRequestedHeartbeat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getSslProtocol
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|endpoint
operator|.
name|getSslProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|factory
operator|.
name|useSslProtocol
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|.
name|getTrustManager
argument_list|()
operator|==
literal|null
condition|)
block|{
name|factory
operator|.
name|useSslProtocol
argument_list|(
name|endpoint
operator|.
name|getSslProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|.
name|useSslProtocol
argument_list|(
name|endpoint
operator|.
name|getSslProtocol
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getTrustManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
decl||
name|KeyManagementException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid sslProtocol "
operator|+
name|endpoint
operator|.
name|getSslProtocol
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|endpoint
operator|.
name|getAutomaticRecoveryEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setAutomaticRecoveryEnabled
argument_list|(
name|endpoint
operator|.
name|getAutomaticRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getNetworkRecoveryInterval
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setNetworkRecoveryInterval
argument_list|(
name|endpoint
operator|.
name|getNetworkRecoveryInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getTopologyRecoveryEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setTopologyRecoveryEnabled
argument_list|(
name|endpoint
operator|.
name|getTopologyRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
block|}
end_class

end_unit

