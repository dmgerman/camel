begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Channel
import|;
end_import

begin_class
DECL|class|RabbitMQDeclareSupport
specifier|public
class|class
name|RabbitMQDeclareSupport
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|RabbitMQEndpoint
name|endpoint
decl_stmt|;
DECL|method|RabbitMQDeclareSupport (final RabbitMQEndpoint endpoint)
name|RabbitMQDeclareSupport
parameter_list|(
specifier|final
name|RabbitMQEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|declareAndBindExchangesAndQueuesUsing (final Channel channel)
specifier|public
name|void
name|declareAndBindExchangesAndQueuesUsing
parameter_list|(
specifier|final
name|Channel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|declareAndBindDeadLetterExchangeWithQueue
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|declareAndBindExchangeWithQueue
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
DECL|method|declareAndBindDeadLetterExchangeWithQueue (final Channel channel)
specifier|private
name|void
name|declareAndBindDeadLetterExchangeWithQueue
parameter_list|(
specifier|final
name|Channel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|endpoint
operator|.
name|getDeadLetterExchange
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO Do we need to setup the args for the DeadLetter?
name|declareExchange
argument_list|(
name|channel
argument_list|,
name|endpoint
operator|.
name|getDeadLetterExchange
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getDeadLetterExchangeType
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|declareAndBindQueue
argument_list|(
name|channel
argument_list|,
name|endpoint
operator|.
name|getDeadLetterQueue
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getDeadLetterExchange
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getDeadLetterRoutingKey
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|declareAndBindExchangeWithQueue (final Channel channel)
specifier|private
name|void
name|declareAndBindExchangeWithQueue
parameter_list|(
specifier|final
name|Channel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldDeclareExchange
argument_list|()
condition|)
block|{
name|declareExchange
argument_list|(
name|channel
argument_list|,
name|endpoint
operator|.
name|getExchangeName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getExchangeType
argument_list|()
argument_list|,
name|resolvedExchangeArguments
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shouldDeclareQueue
argument_list|()
condition|)
block|{
comment|// need to make sure the queueDeclare is same with the exchange declare
name|declareAndBindQueue
argument_list|(
name|channel
argument_list|,
name|endpoint
operator|.
name|getQueue
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getExchangeName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getRoutingKey
argument_list|()
argument_list|,
name|resolvedQueueArguments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resolvedQueueArguments ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resolvedQueueArguments
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queueArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|populateQueueArgumentsFromDeadLetterExchange
argument_list|(
name|queueArgs
argument_list|)
expr_stmt|;
name|populateQueueArgumentsFromConfigurer
argument_list|(
name|queueArgs
argument_list|)
expr_stmt|;
return|return
name|queueArgs
return|;
block|}
DECL|method|populateQueueArgumentsFromDeadLetterExchange (final Map<String, Object> queueArgs)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|populateQueueArgumentsFromDeadLetterExchange
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queueArgs
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getDeadLetterExchange
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|queueArgs
operator|.
name|put
argument_list|(
name|RabbitMQConstants
operator|.
name|RABBITMQ_DEAD_LETTER_EXCHANGE
argument_list|,
name|endpoint
operator|.
name|getDeadLetterExchange
argument_list|()
argument_list|)
expr_stmt|;
name|queueArgs
operator|.
name|put
argument_list|(
name|RabbitMQConstants
operator|.
name|RABBITMQ_DEAD_LETTER_ROUTING_KEY
argument_list|,
name|endpoint
operator|.
name|getDeadLetterRoutingKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|queueArgs
return|;
block|}
DECL|method|resolvedExchangeArguments ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resolvedExchangeArguments
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|exchangeArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getExchangeArgsConfigurer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|getExchangeArgsConfigurer
argument_list|()
operator|.
name|configurArgs
argument_list|(
name|exchangeArgs
argument_list|)
expr_stmt|;
block|}
return|return
name|exchangeArgs
return|;
block|}
DECL|method|shouldDeclareQueue ()
specifier|private
name|boolean
name|shouldDeclareQueue
parameter_list|()
block|{
return|return
operator|!
name|endpoint
operator|.
name|isSkipQueueDeclare
argument_list|()
operator|&&
name|endpoint
operator|.
name|getQueue
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|shouldDeclareExchange ()
specifier|private
name|boolean
name|shouldDeclareExchange
parameter_list|()
block|{
return|return
operator|!
name|endpoint
operator|.
name|isSkipExchangeDeclare
argument_list|()
return|;
block|}
DECL|method|shouldBindQueue ()
specifier|private
name|boolean
name|shouldBindQueue
parameter_list|()
block|{
return|return
operator|!
name|endpoint
operator|.
name|isSkipQueueBind
argument_list|()
return|;
block|}
DECL|method|populateQueueArgumentsFromConfigurer (final Map<String, Object> queueArgs)
specifier|private
name|void
name|populateQueueArgumentsFromConfigurer
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queueArgs
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|getQueueArgsConfigurer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|getQueueArgsConfigurer
argument_list|()
operator|.
name|configurArgs
argument_list|(
name|queueArgs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|declareExchange (final Channel channel, final String exchange, final String exchangeType, final Map<String, Object> exchangeArgs)
specifier|private
name|void
name|declareExchange
parameter_list|(
specifier|final
name|Channel
name|channel
parameter_list|,
specifier|final
name|String
name|exchange
parameter_list|,
specifier|final
name|String
name|exchangeType
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|exchangeArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|channel
operator|.
name|exchangeDeclare
argument_list|(
name|exchange
argument_list|,
name|exchangeType
argument_list|,
name|endpoint
operator|.
name|isDurable
argument_list|()
argument_list|,
name|endpoint
operator|.
name|isAutoDelete
argument_list|()
argument_list|,
name|exchangeArgs
argument_list|)
expr_stmt|;
block|}
DECL|method|declareAndBindQueue (final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String, Object> arguments)
specifier|private
name|void
name|declareAndBindQueue
parameter_list|(
specifier|final
name|Channel
name|channel
parameter_list|,
specifier|final
name|String
name|queue
parameter_list|,
specifier|final
name|String
name|exchange
parameter_list|,
specifier|final
name|String
name|routingKey
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
name|channel
operator|.
name|queueDeclare
argument_list|(
name|queue
argument_list|,
name|endpoint
operator|.
name|isDurable
argument_list|()
argument_list|,
literal|false
argument_list|,
name|endpoint
operator|.
name|isAutoDelete
argument_list|()
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldBindQueue
argument_list|()
condition|)
block|{
name|channel
operator|.
name|queueBind
argument_list|(
name|queue
argument_list|,
name|exchange
argument_list|,
name|emptyIfNull
argument_list|(
name|routingKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|emptyIfNull (final String routingKey)
specifier|private
name|String
name|emptyIfNull
parameter_list|(
specifier|final
name|String
name|routingKey
parameter_list|)
block|{
return|return
name|routingKey
operator|==
literal|null
condition|?
literal|""
else|:
name|routingKey
return|;
block|}
block|}
end_class

end_unit

